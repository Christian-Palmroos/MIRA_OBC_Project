
GPS reference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08008bb8  08008bb8  00018bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ec  080090ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f4  080090f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080090fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e0  080092dc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080092dc  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a553  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6b  00000000  00000000  0002a75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d24  00000000  00000000  0002d450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6cb  00000000  00000000  0003f174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006697a  00000000  00000000  0004a83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b11b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe8  00000000  00000000  000b120c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008ba0 	.word	0x08008ba0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	08008ba0 	.word	0x08008ba0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f897 	bl	8001570 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffe7 	bl	8001420 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f889 	bl	8001570 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f87f 	bl	8001570 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f80f 	bl	80014a4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f805 	bl	80014a4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 fe89 	bl	8002270 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fad2 	bl	8001b10 <__aeabi_dsub>
 800056c:	f001 fe80 	bl	8002270 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f837 	bl	8001638 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f001 feb4 	bl	800233c <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f82e 	bl	8001638 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fa94 	bl	8001b10 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 fe6d 	bl	80022dc <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f817 	bl	8001638 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f001 fe94 	bl	800233c <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 f8d0 	bl	80007bc <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f001 ff46 	bl	80024d4 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f001 ff41 	bl	80024d4 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	469b      	mov	fp, r3
 800065a:	d433      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065c:	465a      	mov	r2, fp
 800065e:	4653      	mov	r3, sl
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83a      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e078      	b.n	8000768 <__udivmoddi4+0x144>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e075      	b.n	800076e <__udivmoddi4+0x14a>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e028      	b.n	80006ee <__udivmoddi4+0xca>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	4652      	mov	r2, sl
 80006cc:	40da      	lsrs	r2, r3
 80006ce:	4641      	mov	r1, r8
 80006d0:	0013      	movs	r3, r2
 80006d2:	464a      	mov	r2, r9
 80006d4:	408a      	lsls	r2, r1
 80006d6:	0017      	movs	r7, r2
 80006d8:	4642      	mov	r2, r8
 80006da:	431f      	orrs	r7, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	4093      	lsls	r3, r2
 80006e0:	001e      	movs	r6, r3
 80006e2:	42af      	cmp	r7, r5
 80006e4:	d9c4      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2300      	movs	r3, #0
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	4643      	mov	r3, r8
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0d9      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f4:	07fb      	lsls	r3, r7, #31
 80006f6:	0872      	lsrs	r2, r6, #1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	4646      	mov	r6, r8
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	e00e      	b.n	800071e <__udivmoddi4+0xfa>
 8000700:	42ab      	cmp	r3, r5
 8000702:	d101      	bne.n	8000708 <__udivmoddi4+0xe4>
 8000704:	42a2      	cmp	r2, r4
 8000706:	d80c      	bhi.n	8000722 <__udivmoddi4+0xfe>
 8000708:	1aa4      	subs	r4, r4, r2
 800070a:	419d      	sbcs	r5, r3
 800070c:	2001      	movs	r0, #1
 800070e:	1924      	adds	r4, r4, r4
 8000710:	416d      	adcs	r5, r5
 8000712:	2100      	movs	r1, #0
 8000714:	3e01      	subs	r6, #1
 8000716:	1824      	adds	r4, r4, r0
 8000718:	414d      	adcs	r5, r1
 800071a:	2e00      	cmp	r6, #0
 800071c:	d006      	beq.n	800072c <__udivmoddi4+0x108>
 800071e:	42ab      	cmp	r3, r5
 8000720:	d9ee      	bls.n	8000700 <__udivmoddi4+0xdc>
 8000722:	3e01      	subs	r6, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2e00      	cmp	r6, #0
 800072a:	d1f8      	bne.n	800071e <__udivmoddi4+0xfa>
 800072c:	9800      	ldr	r0, [sp, #0]
 800072e:	9901      	ldr	r1, [sp, #4]
 8000730:	465b      	mov	r3, fp
 8000732:	1900      	adds	r0, r0, r4
 8000734:	4169      	adcs	r1, r5
 8000736:	2b00      	cmp	r3, #0
 8000738:	db24      	blt.n	8000784 <__udivmoddi4+0x160>
 800073a:	002b      	movs	r3, r5
 800073c:	465a      	mov	r2, fp
 800073e:	4644      	mov	r4, r8
 8000740:	40d3      	lsrs	r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	40e2      	lsrs	r2, r4
 8000746:	001c      	movs	r4, r3
 8000748:	465b      	mov	r3, fp
 800074a:	0015      	movs	r5, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	db2a      	blt.n	80007a6 <__udivmoddi4+0x182>
 8000750:	0026      	movs	r6, r4
 8000752:	409e      	lsls	r6, r3
 8000754:	0033      	movs	r3, r6
 8000756:	0026      	movs	r6, r4
 8000758:	4647      	mov	r7, r8
 800075a:	40be      	lsls	r6, r7
 800075c:	0032      	movs	r2, r6
 800075e:	1a80      	subs	r0, r0, r2
 8000760:	4199      	sbcs	r1, r3
 8000762:	9000      	str	r0, [sp, #0]
 8000764:	9101      	str	r1, [sp, #4]
 8000766:	e79f      	b.n	80006a8 <__udivmoddi4+0x84>
 8000768:	42a3      	cmp	r3, r4
 800076a:	d8bc      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 800076c:	e783      	b.n	8000676 <__udivmoddi4+0x52>
 800076e:	4642      	mov	r2, r8
 8000770:	2320      	movs	r3, #32
 8000772:	2100      	movs	r1, #0
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	2200      	movs	r2, #0
 8000778:	9100      	str	r1, [sp, #0]
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	40da      	lsrs	r2, r3
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	e786      	b.n	8000692 <__udivmoddi4+0x6e>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	002a      	movs	r2, r5
 800078c:	4646      	mov	r6, r8
 800078e:	409a      	lsls	r2, r3
 8000790:	0023      	movs	r3, r4
 8000792:	40f3      	lsrs	r3, r6
 8000794:	4644      	mov	r4, r8
 8000796:	4313      	orrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dad4      	bge.n	8000750 <__udivmoddi4+0x12c>
 80007a6:	4642      	mov	r2, r8
 80007a8:	002f      	movs	r7, r5
 80007aa:	2320      	movs	r3, #32
 80007ac:	0026      	movs	r6, r4
 80007ae:	4097      	lsls	r7, r2
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	40de      	lsrs	r6, r3
 80007b4:	003b      	movs	r3, r7
 80007b6:	4333      	orrs	r3, r6
 80007b8:	e7cd      	b.n	8000756 <__udivmoddi4+0x132>
 80007ba:	46c0      	nop			; (mov r8, r8)

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	000d      	movs	r5, r1
 80007c6:	0004      	movs	r4, r0
 80007c8:	b5c0      	push	{r6, r7, lr}
 80007ca:	001f      	movs	r7, r3
 80007cc:	0011      	movs	r1, r2
 80007ce:	0328      	lsls	r0, r5, #12
 80007d0:	0f62      	lsrs	r2, r4, #29
 80007d2:	0a40      	lsrs	r0, r0, #9
 80007d4:	4310      	orrs	r0, r2
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	0d52      	lsrs	r2, r2, #21
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	4691      	mov	r9, r2
 80007e0:	0a64      	lsrs	r4, r4, #9
 80007e2:	0ffa      	lsrs	r2, r7, #31
 80007e4:	0f4f      	lsrs	r7, r1, #29
 80007e6:	006e      	lsls	r6, r5, #1
 80007e8:	4327      	orrs	r7, r4
 80007ea:	4692      	mov	sl, r2
 80007ec:	46b8      	mov	r8, r7
 80007ee:	0d76      	lsrs	r6, r6, #21
 80007f0:	0fed      	lsrs	r5, r5, #31
 80007f2:	00c9      	lsls	r1, r1, #3
 80007f4:	4295      	cmp	r5, r2
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e099      	b.n	800092e <__aeabi_dadd+0x172>
 80007fa:	464c      	mov	r4, r9
 80007fc:	1b34      	subs	r4, r6, r4
 80007fe:	46a4      	mov	ip, r4
 8000800:	2c00      	cmp	r4, #0
 8000802:	dc00      	bgt.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e07c      	b.n	8000900 <__aeabi_dadd+0x144>
 8000806:	464a      	mov	r2, r9
 8000808:	2a00      	cmp	r2, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e0b8      	b.n	8000980 <__aeabi_dadd+0x1c4>
 800080e:	4ac5      	ldr	r2, [pc, #788]	; (8000b24 <__aeabi_dadd+0x368>)
 8000810:	4296      	cmp	r6, r2
 8000812:	d100      	bne.n	8000816 <__aeabi_dadd+0x5a>
 8000814:	e11c      	b.n	8000a50 <__aeabi_dadd+0x294>
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	003c      	movs	r4, r7
 800081a:	0412      	lsls	r2, r2, #16
 800081c:	4314      	orrs	r4, r2
 800081e:	46a0      	mov	r8, r4
 8000820:	4662      	mov	r2, ip
 8000822:	2a38      	cmp	r2, #56	; 0x38
 8000824:	dd00      	ble.n	8000828 <__aeabi_dadd+0x6c>
 8000826:	e161      	b.n	8000aec <__aeabi_dadd+0x330>
 8000828:	2a1f      	cmp	r2, #31
 800082a:	dd00      	ble.n	800082e <__aeabi_dadd+0x72>
 800082c:	e1cc      	b.n	8000bc8 <__aeabi_dadd+0x40c>
 800082e:	4664      	mov	r4, ip
 8000830:	2220      	movs	r2, #32
 8000832:	1b12      	subs	r2, r2, r4
 8000834:	4644      	mov	r4, r8
 8000836:	4094      	lsls	r4, r2
 8000838:	000f      	movs	r7, r1
 800083a:	46a1      	mov	r9, r4
 800083c:	4664      	mov	r4, ip
 800083e:	4091      	lsls	r1, r2
 8000840:	40e7      	lsrs	r7, r4
 8000842:	464c      	mov	r4, r9
 8000844:	1e4a      	subs	r2, r1, #1
 8000846:	4191      	sbcs	r1, r2
 8000848:	433c      	orrs	r4, r7
 800084a:	4642      	mov	r2, r8
 800084c:	4321      	orrs	r1, r4
 800084e:	4664      	mov	r4, ip
 8000850:	40e2      	lsrs	r2, r4
 8000852:	1a80      	subs	r0, r0, r2
 8000854:	1a5c      	subs	r4, r3, r1
 8000856:	42a3      	cmp	r3, r4
 8000858:	419b      	sbcs	r3, r3
 800085a:	425f      	negs	r7, r3
 800085c:	1bc7      	subs	r7, r0, r7
 800085e:	023b      	lsls	r3, r7, #8
 8000860:	d400      	bmi.n	8000864 <__aeabi_dadd+0xa8>
 8000862:	e0d0      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000864:	027f      	lsls	r7, r7, #9
 8000866:	0a7f      	lsrs	r7, r7, #9
 8000868:	2f00      	cmp	r7, #0
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0xb2>
 800086c:	e0ff      	b.n	8000a6e <__aeabi_dadd+0x2b2>
 800086e:	0038      	movs	r0, r7
 8000870:	f001 fe12 	bl	8002498 <__clzsi2>
 8000874:	0001      	movs	r1, r0
 8000876:	3908      	subs	r1, #8
 8000878:	2320      	movs	r3, #32
 800087a:	0022      	movs	r2, r4
 800087c:	1a5b      	subs	r3, r3, r1
 800087e:	408f      	lsls	r7, r1
 8000880:	40da      	lsrs	r2, r3
 8000882:	408c      	lsls	r4, r1
 8000884:	4317      	orrs	r7, r2
 8000886:	42b1      	cmp	r1, r6
 8000888:	da00      	bge.n	800088c <__aeabi_dadd+0xd0>
 800088a:	e0ff      	b.n	8000a8c <__aeabi_dadd+0x2d0>
 800088c:	1b89      	subs	r1, r1, r6
 800088e:	1c4b      	adds	r3, r1, #1
 8000890:	2b1f      	cmp	r3, #31
 8000892:	dd00      	ble.n	8000896 <__aeabi_dadd+0xda>
 8000894:	e0a8      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000896:	2220      	movs	r2, #32
 8000898:	0039      	movs	r1, r7
 800089a:	1ad2      	subs	r2, r2, r3
 800089c:	0020      	movs	r0, r4
 800089e:	4094      	lsls	r4, r2
 80008a0:	4091      	lsls	r1, r2
 80008a2:	40d8      	lsrs	r0, r3
 80008a4:	1e62      	subs	r2, r4, #1
 80008a6:	4194      	sbcs	r4, r2
 80008a8:	40df      	lsrs	r7, r3
 80008aa:	2600      	movs	r6, #0
 80008ac:	4301      	orrs	r1, r0
 80008ae:	430c      	orrs	r4, r1
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x10c>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x10c>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	193f      	adds	r7, r7, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	023b      	lsls	r3, r7, #8
 80008ca:	d400      	bmi.n	80008ce <__aeabi_dadd+0x112>
 80008cc:	e09e      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008ce:	4b95      	ldr	r3, [pc, #596]	; (8000b24 <__aeabi_dadd+0x368>)
 80008d0:	3601      	adds	r6, #1
 80008d2:	429e      	cmp	r6, r3
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x11c>
 80008d6:	e0b7      	b.n	8000a48 <__aeabi_dadd+0x28c>
 80008d8:	4a93      	ldr	r2, [pc, #588]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008da:	08e4      	lsrs	r4, r4, #3
 80008dc:	4017      	ands	r7, r2
 80008de:	077b      	lsls	r3, r7, #29
 80008e0:	0571      	lsls	r1, r6, #21
 80008e2:	027f      	lsls	r7, r7, #9
 80008e4:	4323      	orrs	r3, r4
 80008e6:	0b3f      	lsrs	r7, r7, #12
 80008e8:	0d4a      	lsrs	r2, r1, #21
 80008ea:	0512      	lsls	r2, r2, #20
 80008ec:	433a      	orrs	r2, r7
 80008ee:	07ed      	lsls	r5, r5, #31
 80008f0:	432a      	orrs	r2, r5
 80008f2:	0018      	movs	r0, r3
 80008f4:	0011      	movs	r1, r2
 80008f6:	bce0      	pop	{r5, r6, r7}
 80008f8:	46ba      	mov	sl, r7
 80008fa:	46b1      	mov	r9, r6
 80008fc:	46a8      	mov	r8, r5
 80008fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000900:	2c00      	cmp	r4, #0
 8000902:	d04b      	beq.n	800099c <__aeabi_dadd+0x1e0>
 8000904:	464c      	mov	r4, r9
 8000906:	1ba4      	subs	r4, r4, r6
 8000908:	46a4      	mov	ip, r4
 800090a:	2e00      	cmp	r6, #0
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x154>
 800090e:	e123      	b.n	8000b58 <__aeabi_dadd+0x39c>
 8000910:	0004      	movs	r4, r0
 8000912:	431c      	orrs	r4, r3
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x15c>
 8000916:	e1af      	b.n	8000c78 <__aeabi_dadd+0x4bc>
 8000918:	4662      	mov	r2, ip
 800091a:	1e54      	subs	r4, r2, #1
 800091c:	2a01      	cmp	r2, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x166>
 8000920:	e215      	b.n	8000d4e <__aeabi_dadd+0x592>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x368>)
 8000924:	45ac      	cmp	ip, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x16e>
 8000928:	e1c8      	b.n	8000cbc <__aeabi_dadd+0x500>
 800092a:	46a4      	mov	ip, r4
 800092c:	e11b      	b.n	8000b66 <__aeabi_dadd+0x3aa>
 800092e:	464a      	mov	r2, r9
 8000930:	1ab2      	subs	r2, r6, r2
 8000932:	4694      	mov	ip, r2
 8000934:	2a00      	cmp	r2, #0
 8000936:	dc00      	bgt.n	800093a <__aeabi_dadd+0x17e>
 8000938:	e0ac      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800093a:	464a      	mov	r2, r9
 800093c:	2a00      	cmp	r2, #0
 800093e:	d043      	beq.n	80009c8 <__aeabi_dadd+0x20c>
 8000940:	4a78      	ldr	r2, [pc, #480]	; (8000b24 <__aeabi_dadd+0x368>)
 8000942:	4296      	cmp	r6, r2
 8000944:	d100      	bne.n	8000948 <__aeabi_dadd+0x18c>
 8000946:	e1af      	b.n	8000ca8 <__aeabi_dadd+0x4ec>
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	003c      	movs	r4, r7
 800094c:	0412      	lsls	r2, r2, #16
 800094e:	4314      	orrs	r4, r2
 8000950:	46a0      	mov	r8, r4
 8000952:	4662      	mov	r2, ip
 8000954:	2a38      	cmp	r2, #56	; 0x38
 8000956:	dc67      	bgt.n	8000a28 <__aeabi_dadd+0x26c>
 8000958:	2a1f      	cmp	r2, #31
 800095a:	dc00      	bgt.n	800095e <__aeabi_dadd+0x1a2>
 800095c:	e15f      	b.n	8000c1e <__aeabi_dadd+0x462>
 800095e:	4647      	mov	r7, r8
 8000960:	3a20      	subs	r2, #32
 8000962:	40d7      	lsrs	r7, r2
 8000964:	4662      	mov	r2, ip
 8000966:	2a20      	cmp	r2, #32
 8000968:	d005      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 800096a:	4664      	mov	r4, ip
 800096c:	2240      	movs	r2, #64	; 0x40
 800096e:	1b12      	subs	r2, r2, r4
 8000970:	4644      	mov	r4, r8
 8000972:	4094      	lsls	r4, r2
 8000974:	4321      	orrs	r1, r4
 8000976:	1e4a      	subs	r2, r1, #1
 8000978:	4191      	sbcs	r1, r2
 800097a:	000c      	movs	r4, r1
 800097c:	433c      	orrs	r4, r7
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x274>
 8000980:	003a      	movs	r2, r7
 8000982:	430a      	orrs	r2, r1
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1cc>
 8000986:	e105      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 8000988:	0022      	movs	r2, r4
 800098a:	3a01      	subs	r2, #1
 800098c:	2c01      	cmp	r4, #1
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x1d6>
 8000990:	e182      	b.n	8000c98 <__aeabi_dadd+0x4dc>
 8000992:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x368>)
 8000994:	45a4      	cmp	ip, r4
 8000996:	d05b      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000998:	4694      	mov	ip, r2
 800099a:	e741      	b.n	8000820 <__aeabi_dadd+0x64>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x370>)
 800099e:	1c77      	adds	r7, r6, #1
 80009a0:	4227      	tst	r7, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ea>
 80009a4:	e0c4      	b.n	8000b30 <__aeabi_dadd+0x374>
 80009a6:	0004      	movs	r4, r0
 80009a8:	431c      	orrs	r4, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f4>
 80009ae:	e169      	b.n	8000c84 <__aeabi_dadd+0x4c8>
 80009b0:	2c00      	cmp	r4, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fa>
 80009b4:	e1bf      	b.n	8000d36 <__aeabi_dadd+0x57a>
 80009b6:	4644      	mov	r4, r8
 80009b8:	430c      	orrs	r4, r1
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x202>
 80009bc:	e1d0      	b.n	8000d60 <__aeabi_dadd+0x5a4>
 80009be:	0742      	lsls	r2, r0, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c0      	lsrs	r0, r0, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x260>
 80009c8:	003a      	movs	r2, r7
 80009ca:	430a      	orrs	r2, r1
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x214>
 80009ce:	e170      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009d0:	4662      	mov	r2, ip
 80009d2:	4664      	mov	r4, ip
 80009d4:	3a01      	subs	r2, #1
 80009d6:	2c01      	cmp	r4, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c51      	ldr	r4, [pc, #324]	; (8000b24 <__aeabi_dadd+0x368>)
 80009de:	45a4      	cmp	ip, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e161      	b.n	8000ca8 <__aeabi_dadd+0x4ec>
 80009e4:	4694      	mov	ip, r2
 80009e6:	e7b4      	b.n	8000952 <__aeabi_dadd+0x196>
 80009e8:	003a      	movs	r2, r7
 80009ea:	391f      	subs	r1, #31
 80009ec:	40ca      	lsrs	r2, r1
 80009ee:	0011      	movs	r1, r2
 80009f0:	2b20      	cmp	r3, #32
 80009f2:	d003      	beq.n	80009fc <__aeabi_dadd+0x240>
 80009f4:	2240      	movs	r2, #64	; 0x40
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	409f      	lsls	r7, r3
 80009fa:	433c      	orrs	r4, r7
 80009fc:	1e63      	subs	r3, r4, #1
 80009fe:	419c      	sbcs	r4, r3
 8000a00:	2700      	movs	r7, #0
 8000a02:	2600      	movs	r6, #0
 8000a04:	430c      	orrs	r4, r1
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e753      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a0c:	46b4      	mov	ip, r6
 8000a0e:	08e4      	lsrs	r4, r4, #3
 8000a10:	077b      	lsls	r3, r7, #29
 8000a12:	4323      	orrs	r3, r4
 8000a14:	08f8      	lsrs	r0, r7, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x368>)
 8000a18:	4594      	cmp	ip, r2
 8000a1a:	d01d      	beq.n	8000a58 <__aeabi_dadd+0x29c>
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	0307      	lsls	r7, r0, #12
 8000a20:	0552      	lsls	r2, r2, #21
 8000a22:	0b3f      	lsrs	r7, r7, #12
 8000a24:	0d52      	lsrs	r2, r2, #21
 8000a26:	e760      	b.n	80008ea <__aeabi_dadd+0x12e>
 8000a28:	4644      	mov	r4, r8
 8000a2a:	430c      	orrs	r4, r1
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	419b      	sbcs	r3, r3
 8000a36:	425f      	negs	r7, r3
 8000a38:	183f      	adds	r7, r7, r0
 8000a3a:	023b      	lsls	r3, r7, #8
 8000a3c:	d5e3      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a3e:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <__aeabi_dadd+0x368>)
 8000a40:	3601      	adds	r6, #1
 8000a42:	429e      	cmp	r6, r3
 8000a44:	d000      	beq.n	8000a48 <__aeabi_dadd+0x28c>
 8000a46:	e0b5      	b.n	8000bb4 <__aeabi_dadd+0x3f8>
 8000a48:	0032      	movs	r2, r6
 8000a4a:	2700      	movs	r7, #0
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e74c      	b.n	80008ea <__aeabi_dadd+0x12e>
 8000a50:	0742      	lsls	r2, r0, #29
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	08c0      	lsrs	r0, r0, #3
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4302      	orrs	r2, r0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a5e:	e1e1      	b.n	8000e24 <__aeabi_dadd+0x668>
 8000a60:	2780      	movs	r7, #128	; 0x80
 8000a62:	033f      	lsls	r7, r7, #12
 8000a64:	4307      	orrs	r7, r0
 8000a66:	033f      	lsls	r7, r7, #12
 8000a68:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <__aeabi_dadd+0x368>)
 8000a6a:	0b3f      	lsrs	r7, r7, #12
 8000a6c:	e73d      	b.n	80008ea <__aeabi_dadd+0x12e>
 8000a6e:	0020      	movs	r0, r4
 8000a70:	f001 fd12 	bl	8002498 <__clzsi2>
 8000a74:	0001      	movs	r1, r0
 8000a76:	3118      	adds	r1, #24
 8000a78:	291f      	cmp	r1, #31
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_dadd+0x2c2>
 8000a7c:	e6fc      	b.n	8000878 <__aeabi_dadd+0xbc>
 8000a7e:	3808      	subs	r0, #8
 8000a80:	4084      	lsls	r4, r0
 8000a82:	0027      	movs	r7, r4
 8000a84:	2400      	movs	r4, #0
 8000a86:	42b1      	cmp	r1, r6
 8000a88:	db00      	blt.n	8000a8c <__aeabi_dadd+0x2d0>
 8000a8a:	e6ff      	b.n	800088c <__aeabi_dadd+0xd0>
 8000a8c:	4a26      	ldr	r2, [pc, #152]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a8e:	1a76      	subs	r6, r6, r1
 8000a90:	4017      	ands	r7, r2
 8000a92:	e70d      	b.n	80008b0 <__aeabi_dadd+0xf4>
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d02f      	beq.n	8000af8 <__aeabi_dadd+0x33c>
 8000a98:	464a      	mov	r2, r9
 8000a9a:	1b92      	subs	r2, r2, r6
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x2e8>
 8000aa2:	e0ad      	b.n	8000c00 <__aeabi_dadd+0x444>
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <__aeabi_dadd+0x368>)
 8000aa6:	4591      	cmp	r9, r2
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dadd+0x2f0>
 8000aaa:	e10f      	b.n	8000ccc <__aeabi_dadd+0x510>
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0412      	lsls	r2, r2, #16
 8000ab0:	4310      	orrs	r0, r2
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	2a38      	cmp	r2, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x2fe>
 8000ab8:	e10f      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000aba:	2a1f      	cmp	r2, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x304>
 8000abe:	e180      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ac0:	4664      	mov	r4, ip
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	001e      	movs	r6, r3
 8000ac6:	1b12      	subs	r2, r2, r4
 8000ac8:	4667      	mov	r7, ip
 8000aca:	0004      	movs	r4, r0
 8000acc:	4093      	lsls	r3, r2
 8000ace:	4094      	lsls	r4, r2
 8000ad0:	40fe      	lsrs	r6, r7
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	4193      	sbcs	r3, r2
 8000ad6:	40f8      	lsrs	r0, r7
 8000ad8:	4334      	orrs	r4, r6
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4480      	add	r8, r0
 8000ade:	1864      	adds	r4, r4, r1
 8000ae0:	428c      	cmp	r4, r1
 8000ae2:	41bf      	sbcs	r7, r7
 8000ae4:	427f      	negs	r7, r7
 8000ae6:	464e      	mov	r6, r9
 8000ae8:	4447      	add	r7, r8
 8000aea:	e7a6      	b.n	8000a3a <__aeabi_dadd+0x27e>
 8000aec:	4642      	mov	r2, r8
 8000aee:	430a      	orrs	r2, r1
 8000af0:	0011      	movs	r1, r2
 8000af2:	1e4a      	subs	r2, r1, #1
 8000af4:	4191      	sbcs	r1, r2
 8000af6:	e6ad      	b.n	8000854 <__aeabi_dadd+0x98>
 8000af8:	4c0c      	ldr	r4, [pc, #48]	; (8000b2c <__aeabi_dadd+0x370>)
 8000afa:	1c72      	adds	r2, r6, #1
 8000afc:	4222      	tst	r2, r4
 8000afe:	d000      	beq.n	8000b02 <__aeabi_dadd+0x346>
 8000b00:	e0a1      	b.n	8000c46 <__aeabi_dadd+0x48a>
 8000b02:	0002      	movs	r2, r0
 8000b04:	431a      	orrs	r2, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d000      	beq.n	8000b0c <__aeabi_dadd+0x350>
 8000b0a:	e0fa      	b.n	8000d02 <__aeabi_dadd+0x546>
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x356>
 8000b10:	e145      	b.n	8000d9e <__aeabi_dadd+0x5e2>
 8000b12:	003a      	movs	r2, r7
 8000b14:	430a      	orrs	r2, r1
 8000b16:	d000      	beq.n	8000b1a <__aeabi_dadd+0x35e>
 8000b18:	e146      	b.n	8000da8 <__aeabi_dadd+0x5ec>
 8000b1a:	0742      	lsls	r2, r0, #29
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	08c0      	lsrs	r0, r0, #3
 8000b22:	e77b      	b.n	8000a1c <__aeabi_dadd+0x260>
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4647      	mov	r7, r8
 8000b32:	1a5c      	subs	r4, r3, r1
 8000b34:	1bc2      	subs	r2, r0, r7
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	41bf      	sbcs	r7, r7
 8000b3a:	427f      	negs	r7, r7
 8000b3c:	46b9      	mov	r9, r7
 8000b3e:	0017      	movs	r7, r2
 8000b40:	464a      	mov	r2, r9
 8000b42:	1abf      	subs	r7, r7, r2
 8000b44:	023a      	lsls	r2, r7, #8
 8000b46:	d500      	bpl.n	8000b4a <__aeabi_dadd+0x38e>
 8000b48:	e08d      	b.n	8000c66 <__aeabi_dadd+0x4aa>
 8000b4a:	0023      	movs	r3, r4
 8000b4c:	433b      	orrs	r3, r7
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_dadd+0x396>
 8000b50:	e68a      	b.n	8000868 <__aeabi_dadd+0xac>
 8000b52:	2000      	movs	r0, #0
 8000b54:	2500      	movs	r5, #0
 8000b56:	e761      	b.n	8000a1c <__aeabi_dadd+0x260>
 8000b58:	4cb4      	ldr	r4, [pc, #720]	; (8000e2c <__aeabi_dadd+0x670>)
 8000b5a:	45a1      	cmp	r9, r4
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_dadd+0x3a4>
 8000b5e:	e0ad      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000b60:	2480      	movs	r4, #128	; 0x80
 8000b62:	0424      	lsls	r4, r4, #16
 8000b64:	4320      	orrs	r0, r4
 8000b66:	4664      	mov	r4, ip
 8000b68:	2c38      	cmp	r4, #56	; 0x38
 8000b6a:	dc3d      	bgt.n	8000be8 <__aeabi_dadd+0x42c>
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	2c1f      	cmp	r4, #31
 8000b70:	dd00      	ble.n	8000b74 <__aeabi_dadd+0x3b8>
 8000b72:	e0b7      	b.n	8000ce4 <__aeabi_dadd+0x528>
 8000b74:	2520      	movs	r5, #32
 8000b76:	001e      	movs	r6, r3
 8000b78:	1b2d      	subs	r5, r5, r4
 8000b7a:	0004      	movs	r4, r0
 8000b7c:	40ab      	lsls	r3, r5
 8000b7e:	40ac      	lsls	r4, r5
 8000b80:	40d6      	lsrs	r6, r2
 8000b82:	40d0      	lsrs	r0, r2
 8000b84:	4642      	mov	r2, r8
 8000b86:	1e5d      	subs	r5, r3, #1
 8000b88:	41ab      	sbcs	r3, r5
 8000b8a:	4334      	orrs	r4, r6
 8000b8c:	1a12      	subs	r2, r2, r0
 8000b8e:	4690      	mov	r8, r2
 8000b90:	4323      	orrs	r3, r4
 8000b92:	e02c      	b.n	8000bee <__aeabi_dadd+0x432>
 8000b94:	0742      	lsls	r2, r0, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c0      	lsrs	r0, r0, #3
 8000b9c:	e73b      	b.n	8000a16 <__aeabi_dadd+0x25a>
 8000b9e:	185c      	adds	r4, r3, r1
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4440      	add	r0, r8
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	18c7      	adds	r7, r0, r3
 8000baa:	2601      	movs	r6, #1
 8000bac:	023b      	lsls	r3, r7, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3f6>
 8000bb0:	e729      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4a9e      	ldr	r2, [pc, #632]	; (8000e30 <__aeabi_dadd+0x674>)
 8000bb6:	0863      	lsrs	r3, r4, #1
 8000bb8:	4017      	ands	r7, r2
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4014      	ands	r4, r2
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	07fb      	lsls	r3, r7, #31
 8000bc2:	431c      	orrs	r4, r3
 8000bc4:	087f      	lsrs	r7, r7, #1
 8000bc6:	e673      	b.n	80008b0 <__aeabi_dadd+0xf4>
 8000bc8:	4644      	mov	r4, r8
 8000bca:	3a20      	subs	r2, #32
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	4662      	mov	r2, ip
 8000bd0:	2a20      	cmp	r2, #32
 8000bd2:	d005      	beq.n	8000be0 <__aeabi_dadd+0x424>
 8000bd4:	4667      	mov	r7, ip
 8000bd6:	2240      	movs	r2, #64	; 0x40
 8000bd8:	1bd2      	subs	r2, r2, r7
 8000bda:	4647      	mov	r7, r8
 8000bdc:	4097      	lsls	r7, r2
 8000bde:	4339      	orrs	r1, r7
 8000be0:	1e4a      	subs	r2, r1, #1
 8000be2:	4191      	sbcs	r1, r2
 8000be4:	4321      	orrs	r1, r4
 8000be6:	e635      	b.n	8000854 <__aeabi_dadd+0x98>
 8000be8:	4303      	orrs	r3, r0
 8000bea:	1e58      	subs	r0, r3, #1
 8000bec:	4183      	sbcs	r3, r0
 8000bee:	1acc      	subs	r4, r1, r3
 8000bf0:	42a1      	cmp	r1, r4
 8000bf2:	41bf      	sbcs	r7, r7
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	427f      	negs	r7, r7
 8000bf8:	4655      	mov	r5, sl
 8000bfa:	464e      	mov	r6, r9
 8000bfc:	1bdf      	subs	r7, r3, r7
 8000bfe:	e62e      	b.n	800085e <__aeabi_dadd+0xa2>
 8000c00:	0002      	movs	r2, r0
 8000c02:	431a      	orrs	r2, r3
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x44c>
 8000c06:	e0bd      	b.n	8000d84 <__aeabi_dadd+0x5c8>
 8000c08:	4662      	mov	r2, ip
 8000c0a:	4664      	mov	r4, ip
 8000c0c:	3a01      	subs	r2, #1
 8000c0e:	2c01      	cmp	r4, #1
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x458>
 8000c12:	e0e5      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000c14:	4c85      	ldr	r4, [pc, #532]	; (8000e2c <__aeabi_dadd+0x670>)
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d058      	beq.n	8000ccc <__aeabi_dadd+0x510>
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	e749      	b.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000c1e:	4664      	mov	r4, ip
 8000c20:	2220      	movs	r2, #32
 8000c22:	1b12      	subs	r2, r2, r4
 8000c24:	4644      	mov	r4, r8
 8000c26:	4094      	lsls	r4, r2
 8000c28:	000f      	movs	r7, r1
 8000c2a:	46a1      	mov	r9, r4
 8000c2c:	4664      	mov	r4, ip
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	40e7      	lsrs	r7, r4
 8000c32:	464c      	mov	r4, r9
 8000c34:	1e4a      	subs	r2, r1, #1
 8000c36:	4191      	sbcs	r1, r2
 8000c38:	433c      	orrs	r4, r7
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	430c      	orrs	r4, r1
 8000c3e:	4661      	mov	r1, ip
 8000c40:	40ca      	lsrs	r2, r1
 8000c42:	1880      	adds	r0, r0, r2
 8000c44:	e6f4      	b.n	8000a30 <__aeabi_dadd+0x274>
 8000c46:	4c79      	ldr	r4, [pc, #484]	; (8000e2c <__aeabi_dadd+0x670>)
 8000c48:	42a2      	cmp	r2, r4
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dadd+0x492>
 8000c4c:	e6fd      	b.n	8000a4a <__aeabi_dadd+0x28e>
 8000c4e:	1859      	adds	r1, r3, r1
 8000c50:	4299      	cmp	r1, r3
 8000c52:	419b      	sbcs	r3, r3
 8000c54:	4440      	add	r0, r8
 8000c56:	425f      	negs	r7, r3
 8000c58:	19c7      	adds	r7, r0, r7
 8000c5a:	07fc      	lsls	r4, r7, #31
 8000c5c:	0849      	lsrs	r1, r1, #1
 8000c5e:	0016      	movs	r6, r2
 8000c60:	430c      	orrs	r4, r1
 8000c62:	087f      	lsrs	r7, r7, #1
 8000c64:	e6cf      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c66:	1acc      	subs	r4, r1, r3
 8000c68:	42a1      	cmp	r1, r4
 8000c6a:	41bf      	sbcs	r7, r7
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	427f      	negs	r7, r7
 8000c70:	1a18      	subs	r0, r3, r0
 8000c72:	4655      	mov	r5, sl
 8000c74:	1bc7      	subs	r7, r0, r7
 8000c76:	e5f7      	b.n	8000868 <__aeabi_dadd+0xac>
 8000c78:	08c9      	lsrs	r1, r1, #3
 8000c7a:	077b      	lsls	r3, r7, #29
 8000c7c:	4655      	mov	r5, sl
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	08f8      	lsrs	r0, r7, #3
 8000c82:	e6c8      	b.n	8000a16 <__aeabi_dadd+0x25a>
 8000c84:	2c00      	cmp	r4, #0
 8000c86:	d000      	beq.n	8000c8a <__aeabi_dadd+0x4ce>
 8000c88:	e081      	b.n	8000d8e <__aeabi_dadd+0x5d2>
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	d115      	bne.n	8000cbc <__aeabi_dadd+0x500>
 8000c90:	2080      	movs	r0, #128	; 0x80
 8000c92:	2500      	movs	r5, #0
 8000c94:	0300      	lsls	r0, r0, #12
 8000c96:	e6e3      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000c98:	1a5c      	subs	r4, r3, r1
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	419b      	sbcs	r3, r3
 8000c9e:	1bc7      	subs	r7, r0, r7
 8000ca0:	425b      	negs	r3, r3
 8000ca2:	2601      	movs	r6, #1
 8000ca4:	1aff      	subs	r7, r7, r3
 8000ca6:	e5da      	b.n	800085e <__aeabi_dadd+0xa2>
 8000ca8:	0742      	lsls	r2, r0, #29
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	08c0      	lsrs	r0, r0, #3
 8000cb0:	e6d2      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000cb2:	0742      	lsls	r2, r0, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c0      	lsrs	r0, r0, #3
 8000cba:	e6ac      	b.n	8000a16 <__aeabi_dadd+0x25a>
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	4642      	mov	r2, r8
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	075b      	lsls	r3, r3, #29
 8000cc4:	4655      	mov	r5, sl
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	08d0      	lsrs	r0, r2, #3
 8000cca:	e6c5      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	4642      	mov	r2, r8
 8000cd0:	075b      	lsls	r3, r3, #29
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	08d0      	lsrs	r0, r2, #3
 8000cd8:	e6be      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000cda:	4303      	orrs	r3, r0
 8000cdc:	001c      	movs	r4, r3
 8000cde:	1e63      	subs	r3, r4, #1
 8000ce0:	419c      	sbcs	r4, r3
 8000ce2:	e6fc      	b.n	8000ade <__aeabi_dadd+0x322>
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	3c20      	subs	r4, #32
 8000ce8:	40e2      	lsrs	r2, r4
 8000cea:	0014      	movs	r4, r2
 8000cec:	4662      	mov	r2, ip
 8000cee:	2a20      	cmp	r2, #32
 8000cf0:	d003      	beq.n	8000cfa <__aeabi_dadd+0x53e>
 8000cf2:	2540      	movs	r5, #64	; 0x40
 8000cf4:	1aad      	subs	r5, r5, r2
 8000cf6:	40a8      	lsls	r0, r5
 8000cf8:	4303      	orrs	r3, r0
 8000cfa:	1e58      	subs	r0, r3, #1
 8000cfc:	4183      	sbcs	r3, r0
 8000cfe:	4323      	orrs	r3, r4
 8000d00:	e775      	b.n	8000bee <__aeabi_dadd+0x432>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d0e2      	beq.n	8000ccc <__aeabi_dadd+0x510>
 8000d06:	003a      	movs	r2, r7
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	d0cd      	beq.n	8000ca8 <__aeabi_dadd+0x4ec>
 8000d0c:	0742      	lsls	r2, r0, #29
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	08c0      	lsrs	r0, r0, #3
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	4210      	tst	r0, r2
 8000d1a:	d006      	beq.n	8000d2a <__aeabi_dadd+0x56e>
 8000d1c:	08fc      	lsrs	r4, r7, #3
 8000d1e:	4214      	tst	r4, r2
 8000d20:	d103      	bne.n	8000d2a <__aeabi_dadd+0x56e>
 8000d22:	0020      	movs	r0, r4
 8000d24:	08cb      	lsrs	r3, r1, #3
 8000d26:	077a      	lsls	r2, r7, #29
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	0f5a      	lsrs	r2, r3, #29
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	0752      	lsls	r2, r2, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	e690      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000d36:	4643      	mov	r3, r8
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x582>
 8000d3c:	e709      	b.n	8000b52 <__aeabi_dadd+0x396>
 8000d3e:	4643      	mov	r3, r8
 8000d40:	4642      	mov	r2, r8
 8000d42:	08c9      	lsrs	r1, r1, #3
 8000d44:	075b      	lsls	r3, r3, #29
 8000d46:	4655      	mov	r5, sl
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	08d0      	lsrs	r0, r2, #3
 8000d4c:	e666      	b.n	8000a1c <__aeabi_dadd+0x260>
 8000d4e:	1acc      	subs	r4, r1, r3
 8000d50:	42a1      	cmp	r1, r4
 8000d52:	4189      	sbcs	r1, r1
 8000d54:	1a3f      	subs	r7, r7, r0
 8000d56:	4249      	negs	r1, r1
 8000d58:	4655      	mov	r5, sl
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	1a7f      	subs	r7, r7, r1
 8000d5e:	e57e      	b.n	800085e <__aeabi_dadd+0xa2>
 8000d60:	4642      	mov	r2, r8
 8000d62:	1a5c      	subs	r4, r3, r1
 8000d64:	1a87      	subs	r7, r0, r2
 8000d66:	42a3      	cmp	r3, r4
 8000d68:	4192      	sbcs	r2, r2
 8000d6a:	4252      	negs	r2, r2
 8000d6c:	1abf      	subs	r7, r7, r2
 8000d6e:	023a      	lsls	r2, r7, #8
 8000d70:	d53d      	bpl.n	8000dee <__aeabi_dadd+0x632>
 8000d72:	1acc      	subs	r4, r1, r3
 8000d74:	42a1      	cmp	r1, r4
 8000d76:	4189      	sbcs	r1, r1
 8000d78:	4643      	mov	r3, r8
 8000d7a:	4249      	negs	r1, r1
 8000d7c:	1a1f      	subs	r7, r3, r0
 8000d7e:	4655      	mov	r5, sl
 8000d80:	1a7f      	subs	r7, r7, r1
 8000d82:	e595      	b.n	80008b0 <__aeabi_dadd+0xf4>
 8000d84:	077b      	lsls	r3, r7, #29
 8000d86:	08c9      	lsrs	r1, r1, #3
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	08f8      	lsrs	r0, r7, #3
 8000d8c:	e643      	b.n	8000a16 <__aeabi_dadd+0x25a>
 8000d8e:	4644      	mov	r4, r8
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	430c      	orrs	r4, r1
 8000d94:	d130      	bne.n	8000df8 <__aeabi_dadd+0x63c>
 8000d96:	0742      	lsls	r2, r0, #29
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	08c0      	lsrs	r0, r0, #3
 8000d9c:	e65c      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000d9e:	077b      	lsls	r3, r7, #29
 8000da0:	08c9      	lsrs	r1, r1, #3
 8000da2:	430b      	orrs	r3, r1
 8000da4:	08f8      	lsrs	r0, r7, #3
 8000da6:	e639      	b.n	8000a1c <__aeabi_dadd+0x260>
 8000da8:	185c      	adds	r4, r3, r1
 8000daa:	429c      	cmp	r4, r3
 8000dac:	419b      	sbcs	r3, r3
 8000dae:	4440      	add	r0, r8
 8000db0:	425b      	negs	r3, r3
 8000db2:	18c7      	adds	r7, r0, r3
 8000db4:	023b      	lsls	r3, r7, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_dadd+0x5fe>
 8000db8:	e625      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <__aeabi_dadd+0x674>)
 8000dbc:	2601      	movs	r6, #1
 8000dbe:	401f      	ands	r7, r3
 8000dc0:	e621      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000dc2:	0004      	movs	r4, r0
 8000dc4:	3a20      	subs	r2, #32
 8000dc6:	40d4      	lsrs	r4, r2
 8000dc8:	4662      	mov	r2, ip
 8000dca:	2a20      	cmp	r2, #32
 8000dcc:	d004      	beq.n	8000dd8 <__aeabi_dadd+0x61c>
 8000dce:	2240      	movs	r2, #64	; 0x40
 8000dd0:	4666      	mov	r6, ip
 8000dd2:	1b92      	subs	r2, r2, r6
 8000dd4:	4090      	lsls	r0, r2
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	4193      	sbcs	r3, r2
 8000ddc:	431c      	orrs	r4, r3
 8000dde:	e67e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000de0:	185c      	adds	r4, r3, r1
 8000de2:	428c      	cmp	r4, r1
 8000de4:	4189      	sbcs	r1, r1
 8000de6:	4440      	add	r0, r8
 8000de8:	4249      	negs	r1, r1
 8000dea:	1847      	adds	r7, r0, r1
 8000dec:	e6dd      	b.n	8000baa <__aeabi_dadd+0x3ee>
 8000dee:	0023      	movs	r3, r4
 8000df0:	433b      	orrs	r3, r7
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e6ad      	b.n	8000b52 <__aeabi_dadd+0x396>
 8000df6:	e606      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df8:	0744      	lsls	r4, r0, #29
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	2480      	movs	r4, #128	; 0x80
 8000dfe:	08c0      	lsrs	r0, r0, #3
 8000e00:	0324      	lsls	r4, r4, #12
 8000e02:	4220      	tst	r0, r4
 8000e04:	d008      	beq.n	8000e18 <__aeabi_dadd+0x65c>
 8000e06:	4642      	mov	r2, r8
 8000e08:	08d6      	lsrs	r6, r2, #3
 8000e0a:	4226      	tst	r6, r4
 8000e0c:	d104      	bne.n	8000e18 <__aeabi_dadd+0x65c>
 8000e0e:	4655      	mov	r5, sl
 8000e10:	0030      	movs	r0, r6
 8000e12:	08cb      	lsrs	r3, r1, #3
 8000e14:	0751      	lsls	r1, r2, #29
 8000e16:	430b      	orrs	r3, r1
 8000e18:	0f5a      	lsrs	r2, r3, #29
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	0752      	lsls	r2, r2, #29
 8000e20:	4313      	orrs	r3, r2
 8000e22:	e619      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000e24:	2300      	movs	r3, #0
 8000e26:	4a01      	ldr	r2, [pc, #4]	; (8000e2c <__aeabi_dadd+0x670>)
 8000e28:	001f      	movs	r7, r3
 8000e2a:	e55e      	b.n	80008ea <__aeabi_dadd+0x12e>
 8000e2c:	000007ff 	.word	0x000007ff
 8000e30:	ff7fffff 	.word	0xff7fffff

08000e34 <__aeabi_ddiv>:
 8000e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e36:	4657      	mov	r7, sl
 8000e38:	464e      	mov	r6, r9
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	46de      	mov	lr, fp
 8000e3e:	b5e0      	push	{r5, r6, r7, lr}
 8000e40:	4681      	mov	r9, r0
 8000e42:	0005      	movs	r5, r0
 8000e44:	030c      	lsls	r4, r1, #12
 8000e46:	0048      	lsls	r0, r1, #1
 8000e48:	4692      	mov	sl, r2
 8000e4a:	001f      	movs	r7, r3
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	0b24      	lsrs	r4, r4, #12
 8000e50:	0d40      	lsrs	r0, r0, #21
 8000e52:	0fce      	lsrs	r6, r1, #31
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_ddiv+0x26>
 8000e58:	e156      	b.n	8001108 <__aeabi_ddiv+0x2d4>
 8000e5a:	4bd4      	ldr	r3, [pc, #848]	; (80011ac <__aeabi_ddiv+0x378>)
 8000e5c:	4298      	cmp	r0, r3
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_ddiv+0x2e>
 8000e60:	e172      	b.n	8001148 <__aeabi_ddiv+0x314>
 8000e62:	0f6b      	lsrs	r3, r5, #29
 8000e64:	00e4      	lsls	r4, r4, #3
 8000e66:	431c      	orrs	r4, r3
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	041b      	lsls	r3, r3, #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	4698      	mov	r8, r3
 8000e70:	4bcf      	ldr	r3, [pc, #828]	; (80011b0 <__aeabi_ddiv+0x37c>)
 8000e72:	00ed      	lsls	r5, r5, #3
 8000e74:	469b      	mov	fp, r3
 8000e76:	2300      	movs	r3, #0
 8000e78:	4699      	mov	r9, r3
 8000e7a:	4483      	add	fp, r0
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	033c      	lsls	r4, r7, #12
 8000e80:	007b      	lsls	r3, r7, #1
 8000e82:	4650      	mov	r0, sl
 8000e84:	0b24      	lsrs	r4, r4, #12
 8000e86:	0d5b      	lsrs	r3, r3, #21
 8000e88:	0fff      	lsrs	r7, r7, #31
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_ddiv+0x5c>
 8000e8e:	e11f      	b.n	80010d0 <__aeabi_ddiv+0x29c>
 8000e90:	4ac6      	ldr	r2, [pc, #792]	; (80011ac <__aeabi_ddiv+0x378>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0x64>
 8000e96:	e162      	b.n	800115e <__aeabi_ddiv+0x32a>
 8000e98:	49c5      	ldr	r1, [pc, #788]	; (80011b0 <__aeabi_ddiv+0x37c>)
 8000e9a:	0f42      	lsrs	r2, r0, #29
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	00e4      	lsls	r4, r4, #3
 8000ea0:	4659      	mov	r1, fp
 8000ea2:	4314      	orrs	r4, r2
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	4463      	add	r3, ip
 8000ea8:	0412      	lsls	r2, r2, #16
 8000eaa:	1acb      	subs	r3, r1, r3
 8000eac:	4314      	orrs	r4, r2
 8000eae:	469b      	mov	fp, r3
 8000eb0:	00c2      	lsls	r2, r0, #3
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	0033      	movs	r3, r6
 8000eb6:	407b      	eors	r3, r7
 8000eb8:	469a      	mov	sl, r3
 8000eba:	464b      	mov	r3, r9
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d827      	bhi.n	8000f10 <__aeabi_ddiv+0xdc>
 8000ec0:	49bc      	ldr	r1, [pc, #752]	; (80011b4 <__aeabi_ddiv+0x380>)
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	58cb      	ldr	r3, [r1, r3]
 8000ec6:	469f      	mov	pc, r3
 8000ec8:	46b2      	mov	sl, r6
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d016      	beq.n	8000efe <__aeabi_ddiv+0xca>
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_ddiv+0xa2>
 8000ed4:	e28e      	b.n	80013f4 <__aeabi_ddiv+0x5c0>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d000      	beq.n	8000edc <__aeabi_ddiv+0xa8>
 8000eda:	e0d9      	b.n	8001090 <__aeabi_ddiv+0x25c>
 8000edc:	2300      	movs	r3, #0
 8000ede:	2400      	movs	r4, #0
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	4652      	mov	r2, sl
 8000ee4:	051b      	lsls	r3, r3, #20
 8000ee6:	4323      	orrs	r3, r4
 8000ee8:	07d2      	lsls	r2, r2, #31
 8000eea:	4313      	orrs	r3, r2
 8000eec:	0028      	movs	r0, r5
 8000eee:	0019      	movs	r1, r3
 8000ef0:	b005      	add	sp, #20
 8000ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ef4:	46bb      	mov	fp, r7
 8000ef6:	46b2      	mov	sl, r6
 8000ef8:	46a9      	mov	r9, r5
 8000efa:	46a0      	mov	r8, r4
 8000efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efe:	2400      	movs	r4, #0
 8000f00:	2500      	movs	r5, #0
 8000f02:	4baa      	ldr	r3, [pc, #680]	; (80011ac <__aeabi_ddiv+0x378>)
 8000f04:	e7ed      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 8000f06:	46ba      	mov	sl, r7
 8000f08:	46a0      	mov	r8, r4
 8000f0a:	0015      	movs	r5, r2
 8000f0c:	9000      	str	r0, [sp, #0]
 8000f0e:	e7dc      	b.n	8000eca <__aeabi_ddiv+0x96>
 8000f10:	4544      	cmp	r4, r8
 8000f12:	d200      	bcs.n	8000f16 <__aeabi_ddiv+0xe2>
 8000f14:	e1c7      	b.n	80012a6 <__aeabi_ddiv+0x472>
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xe6>
 8000f18:	e1c2      	b.n	80012a0 <__aeabi_ddiv+0x46c>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	469c      	mov	ip, r3
 8000f20:	002e      	movs	r6, r5
 8000f22:	4640      	mov	r0, r8
 8000f24:	2500      	movs	r5, #0
 8000f26:	44e3      	add	fp, ip
 8000f28:	0223      	lsls	r3, r4, #8
 8000f2a:	0e14      	lsrs	r4, r2, #24
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	0c1b      	lsrs	r3, r3, #16
 8000f30:	4699      	mov	r9, r3
 8000f32:	0423      	lsls	r3, r4, #16
 8000f34:	0c1f      	lsrs	r7, r3, #16
 8000f36:	0212      	lsls	r2, r2, #8
 8000f38:	4649      	mov	r1, r9
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	9701      	str	r7, [sp, #4]
 8000f3e:	f7ff f985 	bl	800024c <__aeabi_uidivmod>
 8000f42:	0002      	movs	r2, r0
 8000f44:	437a      	muls	r2, r7
 8000f46:	040b      	lsls	r3, r1, #16
 8000f48:	0c31      	lsrs	r1, r6, #16
 8000f4a:	4680      	mov	r8, r0
 8000f4c:	4319      	orrs	r1, r3
 8000f4e:	428a      	cmp	r2, r1
 8000f50:	d907      	bls.n	8000f62 <__aeabi_ddiv+0x12e>
 8000f52:	2301      	movs	r3, #1
 8000f54:	425b      	negs	r3, r3
 8000f56:	469c      	mov	ip, r3
 8000f58:	1909      	adds	r1, r1, r4
 8000f5a:	44e0      	add	r8, ip
 8000f5c:	428c      	cmp	r4, r1
 8000f5e:	d800      	bhi.n	8000f62 <__aeabi_ddiv+0x12e>
 8000f60:	e207      	b.n	8001372 <__aeabi_ddiv+0x53e>
 8000f62:	1a88      	subs	r0, r1, r2
 8000f64:	4649      	mov	r1, r9
 8000f66:	f7ff f971 	bl	800024c <__aeabi_uidivmod>
 8000f6a:	0409      	lsls	r1, r1, #16
 8000f6c:	468c      	mov	ip, r1
 8000f6e:	0431      	lsls	r1, r6, #16
 8000f70:	4666      	mov	r6, ip
 8000f72:	9a01      	ldr	r2, [sp, #4]
 8000f74:	0c09      	lsrs	r1, r1, #16
 8000f76:	4342      	muls	r2, r0
 8000f78:	0003      	movs	r3, r0
 8000f7a:	4331      	orrs	r1, r6
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	d904      	bls.n	8000f8a <__aeabi_ddiv+0x156>
 8000f80:	1909      	adds	r1, r1, r4
 8000f82:	3b01      	subs	r3, #1
 8000f84:	428c      	cmp	r4, r1
 8000f86:	d800      	bhi.n	8000f8a <__aeabi_ddiv+0x156>
 8000f88:	e1ed      	b.n	8001366 <__aeabi_ddiv+0x532>
 8000f8a:	1a88      	subs	r0, r1, r2
 8000f8c:	4642      	mov	r2, r8
 8000f8e:	0412      	lsls	r2, r2, #16
 8000f90:	431a      	orrs	r2, r3
 8000f92:	4690      	mov	r8, r2
 8000f94:	4641      	mov	r1, r8
 8000f96:	9b00      	ldr	r3, [sp, #0]
 8000f98:	040e      	lsls	r6, r1, #16
 8000f9a:	0c1b      	lsrs	r3, r3, #16
 8000f9c:	001f      	movs	r7, r3
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	9b00      	ldr	r3, [sp, #0]
 8000fa2:	0c36      	lsrs	r6, r6, #16
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	000b      	movs	r3, r1
 8000faa:	4373      	muls	r3, r6
 8000fac:	0c12      	lsrs	r2, r2, #16
 8000fae:	437e      	muls	r6, r7
 8000fb0:	9103      	str	r1, [sp, #12]
 8000fb2:	4351      	muls	r1, r2
 8000fb4:	437a      	muls	r2, r7
 8000fb6:	0c1f      	lsrs	r7, r3, #16
 8000fb8:	46bc      	mov	ip, r7
 8000fba:	1876      	adds	r6, r6, r1
 8000fbc:	4466      	add	r6, ip
 8000fbe:	42b1      	cmp	r1, r6
 8000fc0:	d903      	bls.n	8000fca <__aeabi_ddiv+0x196>
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	0249      	lsls	r1, r1, #9
 8000fc6:	468c      	mov	ip, r1
 8000fc8:	4462      	add	r2, ip
 8000fca:	0c31      	lsrs	r1, r6, #16
 8000fcc:	188a      	adds	r2, r1, r2
 8000fce:	0431      	lsls	r1, r6, #16
 8000fd0:	041e      	lsls	r6, r3, #16
 8000fd2:	0c36      	lsrs	r6, r6, #16
 8000fd4:	198e      	adds	r6, r1, r6
 8000fd6:	4290      	cmp	r0, r2
 8000fd8:	d302      	bcc.n	8000fe0 <__aeabi_ddiv+0x1ac>
 8000fda:	d112      	bne.n	8001002 <__aeabi_ddiv+0x1ce>
 8000fdc:	42b5      	cmp	r5, r6
 8000fde:	d210      	bcs.n	8001002 <__aeabi_ddiv+0x1ce>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	1e59      	subs	r1, r3, #1
 8000fe4:	9b00      	ldr	r3, [sp, #0]
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	4465      	add	r5, ip
 8000fea:	001f      	movs	r7, r3
 8000fec:	429d      	cmp	r5, r3
 8000fee:	419b      	sbcs	r3, r3
 8000ff0:	425b      	negs	r3, r3
 8000ff2:	191b      	adds	r3, r3, r4
 8000ff4:	18c0      	adds	r0, r0, r3
 8000ff6:	4284      	cmp	r4, r0
 8000ff8:	d200      	bcs.n	8000ffc <__aeabi_ddiv+0x1c8>
 8000ffa:	e1a0      	b.n	800133e <__aeabi_ddiv+0x50a>
 8000ffc:	d100      	bne.n	8001000 <__aeabi_ddiv+0x1cc>
 8000ffe:	e19b      	b.n	8001338 <__aeabi_ddiv+0x504>
 8001000:	4688      	mov	r8, r1
 8001002:	1bae      	subs	r6, r5, r6
 8001004:	42b5      	cmp	r5, r6
 8001006:	41ad      	sbcs	r5, r5
 8001008:	1a80      	subs	r0, r0, r2
 800100a:	426d      	negs	r5, r5
 800100c:	1b40      	subs	r0, r0, r5
 800100e:	4284      	cmp	r4, r0
 8001010:	d100      	bne.n	8001014 <__aeabi_ddiv+0x1e0>
 8001012:	e1d5      	b.n	80013c0 <__aeabi_ddiv+0x58c>
 8001014:	4649      	mov	r1, r9
 8001016:	f7ff f919 	bl	800024c <__aeabi_uidivmod>
 800101a:	9a01      	ldr	r2, [sp, #4]
 800101c:	040b      	lsls	r3, r1, #16
 800101e:	4342      	muls	r2, r0
 8001020:	0c31      	lsrs	r1, r6, #16
 8001022:	0005      	movs	r5, r0
 8001024:	4319      	orrs	r1, r3
 8001026:	428a      	cmp	r2, r1
 8001028:	d900      	bls.n	800102c <__aeabi_ddiv+0x1f8>
 800102a:	e16c      	b.n	8001306 <__aeabi_ddiv+0x4d2>
 800102c:	1a88      	subs	r0, r1, r2
 800102e:	4649      	mov	r1, r9
 8001030:	f7ff f90c 	bl	800024c <__aeabi_uidivmod>
 8001034:	9a01      	ldr	r2, [sp, #4]
 8001036:	0436      	lsls	r6, r6, #16
 8001038:	4342      	muls	r2, r0
 800103a:	0409      	lsls	r1, r1, #16
 800103c:	0c36      	lsrs	r6, r6, #16
 800103e:	0003      	movs	r3, r0
 8001040:	430e      	orrs	r6, r1
 8001042:	42b2      	cmp	r2, r6
 8001044:	d900      	bls.n	8001048 <__aeabi_ddiv+0x214>
 8001046:	e153      	b.n	80012f0 <__aeabi_ddiv+0x4bc>
 8001048:	9803      	ldr	r0, [sp, #12]
 800104a:	1ab6      	subs	r6, r6, r2
 800104c:	0002      	movs	r2, r0
 800104e:	042d      	lsls	r5, r5, #16
 8001050:	431d      	orrs	r5, r3
 8001052:	9f02      	ldr	r7, [sp, #8]
 8001054:	042b      	lsls	r3, r5, #16
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	435a      	muls	r2, r3
 800105a:	437b      	muls	r3, r7
 800105c:	469c      	mov	ip, r3
 800105e:	0c29      	lsrs	r1, r5, #16
 8001060:	4348      	muls	r0, r1
 8001062:	0c13      	lsrs	r3, r2, #16
 8001064:	4484      	add	ip, r0
 8001066:	4463      	add	r3, ip
 8001068:	4379      	muls	r1, r7
 800106a:	4298      	cmp	r0, r3
 800106c:	d903      	bls.n	8001076 <__aeabi_ddiv+0x242>
 800106e:	2080      	movs	r0, #128	; 0x80
 8001070:	0240      	lsls	r0, r0, #9
 8001072:	4684      	mov	ip, r0
 8001074:	4461      	add	r1, ip
 8001076:	0c18      	lsrs	r0, r3, #16
 8001078:	0412      	lsls	r2, r2, #16
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	0c12      	lsrs	r2, r2, #16
 800107e:	1841      	adds	r1, r0, r1
 8001080:	189b      	adds	r3, r3, r2
 8001082:	428e      	cmp	r6, r1
 8001084:	d200      	bcs.n	8001088 <__aeabi_ddiv+0x254>
 8001086:	e0ff      	b.n	8001288 <__aeabi_ddiv+0x454>
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x258>
 800108a:	e0fa      	b.n	8001282 <__aeabi_ddiv+0x44e>
 800108c:	2301      	movs	r3, #1
 800108e:	431d      	orrs	r5, r3
 8001090:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <__aeabi_ddiv+0x384>)
 8001092:	445a      	add	r2, fp
 8001094:	2a00      	cmp	r2, #0
 8001096:	dc00      	bgt.n	800109a <__aeabi_ddiv+0x266>
 8001098:	e0aa      	b.n	80011f0 <__aeabi_ddiv+0x3bc>
 800109a:	076b      	lsls	r3, r5, #29
 800109c:	d000      	beq.n	80010a0 <__aeabi_ddiv+0x26c>
 800109e:	e13d      	b.n	800131c <__aeabi_ddiv+0x4e8>
 80010a0:	08ed      	lsrs	r5, r5, #3
 80010a2:	4643      	mov	r3, r8
 80010a4:	01db      	lsls	r3, r3, #7
 80010a6:	d506      	bpl.n	80010b6 <__aeabi_ddiv+0x282>
 80010a8:	4642      	mov	r2, r8
 80010aa:	4b44      	ldr	r3, [pc, #272]	; (80011bc <__aeabi_ddiv+0x388>)
 80010ac:	401a      	ands	r2, r3
 80010ae:	4690      	mov	r8, r2
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	00d2      	lsls	r2, r2, #3
 80010b4:	445a      	add	r2, fp
 80010b6:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <__aeabi_ddiv+0x38c>)
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dd00      	ble.n	80010be <__aeabi_ddiv+0x28a>
 80010bc:	e71f      	b.n	8000efe <__aeabi_ddiv+0xca>
 80010be:	4643      	mov	r3, r8
 80010c0:	075b      	lsls	r3, r3, #29
 80010c2:	431d      	orrs	r5, r3
 80010c4:	4643      	mov	r3, r8
 80010c6:	0552      	lsls	r2, r2, #21
 80010c8:	025c      	lsls	r4, r3, #9
 80010ca:	0b24      	lsrs	r4, r4, #12
 80010cc:	0d53      	lsrs	r3, r2, #21
 80010ce:	e708      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 80010d0:	4652      	mov	r2, sl
 80010d2:	4322      	orrs	r2, r4
 80010d4:	d100      	bne.n	80010d8 <__aeabi_ddiv+0x2a4>
 80010d6:	e07b      	b.n	80011d0 <__aeabi_ddiv+0x39c>
 80010d8:	2c00      	cmp	r4, #0
 80010da:	d100      	bne.n	80010de <__aeabi_ddiv+0x2aa>
 80010dc:	e0fa      	b.n	80012d4 <__aeabi_ddiv+0x4a0>
 80010de:	0020      	movs	r0, r4
 80010e0:	f001 f9da 	bl	8002498 <__clzsi2>
 80010e4:	0002      	movs	r2, r0
 80010e6:	3a0b      	subs	r2, #11
 80010e8:	231d      	movs	r3, #29
 80010ea:	0001      	movs	r1, r0
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	4652      	mov	r2, sl
 80010f0:	3908      	subs	r1, #8
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	408c      	lsls	r4, r1
 80010f6:	4314      	orrs	r4, r2
 80010f8:	4652      	mov	r2, sl
 80010fa:	408a      	lsls	r2, r1
 80010fc:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <__aeabi_ddiv+0x390>)
 80010fe:	4458      	add	r0, fp
 8001100:	469b      	mov	fp, r3
 8001102:	4483      	add	fp, r0
 8001104:	2000      	movs	r0, #0
 8001106:	e6d5      	b.n	8000eb4 <__aeabi_ddiv+0x80>
 8001108:	464b      	mov	r3, r9
 800110a:	4323      	orrs	r3, r4
 800110c:	4698      	mov	r8, r3
 800110e:	d044      	beq.n	800119a <__aeabi_ddiv+0x366>
 8001110:	2c00      	cmp	r4, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x2e2>
 8001114:	e0ce      	b.n	80012b4 <__aeabi_ddiv+0x480>
 8001116:	0020      	movs	r0, r4
 8001118:	f001 f9be 	bl	8002498 <__clzsi2>
 800111c:	0001      	movs	r1, r0
 800111e:	0002      	movs	r2, r0
 8001120:	390b      	subs	r1, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a5b      	subs	r3, r3, r1
 8001126:	4649      	mov	r1, r9
 8001128:	0010      	movs	r0, r2
 800112a:	40d9      	lsrs	r1, r3
 800112c:	3808      	subs	r0, #8
 800112e:	4084      	lsls	r4, r0
 8001130:	000b      	movs	r3, r1
 8001132:	464d      	mov	r5, r9
 8001134:	4323      	orrs	r3, r4
 8001136:	4698      	mov	r8, r3
 8001138:	4085      	lsls	r5, r0
 800113a:	4823      	ldr	r0, [pc, #140]	; (80011c8 <__aeabi_ddiv+0x394>)
 800113c:	1a83      	subs	r3, r0, r2
 800113e:	469b      	mov	fp, r3
 8001140:	2300      	movs	r3, #0
 8001142:	4699      	mov	r9, r3
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	e69a      	b.n	8000e7e <__aeabi_ddiv+0x4a>
 8001148:	464b      	mov	r3, r9
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d11d      	bne.n	800118c <__aeabi_ddiv+0x358>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	2500      	movs	r5, #0
 8001158:	4683      	mov	fp, r0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	e68f      	b.n	8000e7e <__aeabi_ddiv+0x4a>
 800115e:	4652      	mov	r2, sl
 8001160:	4322      	orrs	r2, r4
 8001162:	d109      	bne.n	8001178 <__aeabi_ddiv+0x344>
 8001164:	2302      	movs	r3, #2
 8001166:	4649      	mov	r1, r9
 8001168:	4319      	orrs	r1, r3
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <__aeabi_ddiv+0x398>)
 800116c:	4689      	mov	r9, r1
 800116e:	469c      	mov	ip, r3
 8001170:	2400      	movs	r4, #0
 8001172:	2002      	movs	r0, #2
 8001174:	44e3      	add	fp, ip
 8001176:	e69d      	b.n	8000eb4 <__aeabi_ddiv+0x80>
 8001178:	2303      	movs	r3, #3
 800117a:	464a      	mov	r2, r9
 800117c:	431a      	orrs	r2, r3
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <__aeabi_ddiv+0x398>)
 8001180:	4691      	mov	r9, r2
 8001182:	469c      	mov	ip, r3
 8001184:	4652      	mov	r2, sl
 8001186:	2003      	movs	r0, #3
 8001188:	44e3      	add	fp, ip
 800118a:	e693      	b.n	8000eb4 <__aeabi_ddiv+0x80>
 800118c:	230c      	movs	r3, #12
 800118e:	4699      	mov	r9, r3
 8001190:	3b09      	subs	r3, #9
 8001192:	46a0      	mov	r8, r4
 8001194:	4683      	mov	fp, r0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e671      	b.n	8000e7e <__aeabi_ddiv+0x4a>
 800119a:	2304      	movs	r3, #4
 800119c:	4699      	mov	r9, r3
 800119e:	2300      	movs	r3, #0
 80011a0:	469b      	mov	fp, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	2500      	movs	r5, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	e669      	b.n	8000e7e <__aeabi_ddiv+0x4a>
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	000007ff 	.word	0x000007ff
 80011b0:	fffffc01 	.word	0xfffffc01
 80011b4:	08008bc0 	.word	0x08008bc0
 80011b8:	000003ff 	.word	0x000003ff
 80011bc:	feffffff 	.word	0xfeffffff
 80011c0:	000007fe 	.word	0x000007fe
 80011c4:	000003f3 	.word	0x000003f3
 80011c8:	fffffc0d 	.word	0xfffffc0d
 80011cc:	fffff801 	.word	0xfffff801
 80011d0:	4649      	mov	r1, r9
 80011d2:	2301      	movs	r3, #1
 80011d4:	4319      	orrs	r1, r3
 80011d6:	4689      	mov	r9, r1
 80011d8:	2400      	movs	r4, #0
 80011da:	2001      	movs	r0, #1
 80011dc:	e66a      	b.n	8000eb4 <__aeabi_ddiv+0x80>
 80011de:	2300      	movs	r3, #0
 80011e0:	2480      	movs	r4, #128	; 0x80
 80011e2:	469a      	mov	sl, r3
 80011e4:	2500      	movs	r5, #0
 80011e6:	4b8a      	ldr	r3, [pc, #552]	; (8001410 <__aeabi_ddiv+0x5dc>)
 80011e8:	0324      	lsls	r4, r4, #12
 80011ea:	e67a      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 80011ec:	2501      	movs	r5, #1
 80011ee:	426d      	negs	r5, r5
 80011f0:	2301      	movs	r3, #1
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	2b38      	cmp	r3, #56	; 0x38
 80011f6:	dd00      	ble.n	80011fa <__aeabi_ddiv+0x3c6>
 80011f8:	e670      	b.n	8000edc <__aeabi_ddiv+0xa8>
 80011fa:	2b1f      	cmp	r3, #31
 80011fc:	dc00      	bgt.n	8001200 <__aeabi_ddiv+0x3cc>
 80011fe:	e0bf      	b.n	8001380 <__aeabi_ddiv+0x54c>
 8001200:	211f      	movs	r1, #31
 8001202:	4249      	negs	r1, r1
 8001204:	1a8a      	subs	r2, r1, r2
 8001206:	4641      	mov	r1, r8
 8001208:	40d1      	lsrs	r1, r2
 800120a:	000a      	movs	r2, r1
 800120c:	2b20      	cmp	r3, #32
 800120e:	d004      	beq.n	800121a <__aeabi_ddiv+0x3e6>
 8001210:	4641      	mov	r1, r8
 8001212:	4b80      	ldr	r3, [pc, #512]	; (8001414 <__aeabi_ddiv+0x5e0>)
 8001214:	445b      	add	r3, fp
 8001216:	4099      	lsls	r1, r3
 8001218:	430d      	orrs	r5, r1
 800121a:	1e6b      	subs	r3, r5, #1
 800121c:	419d      	sbcs	r5, r3
 800121e:	2307      	movs	r3, #7
 8001220:	432a      	orrs	r2, r5
 8001222:	001d      	movs	r5, r3
 8001224:	2400      	movs	r4, #0
 8001226:	4015      	ands	r5, r2
 8001228:	4213      	tst	r3, r2
 800122a:	d100      	bne.n	800122e <__aeabi_ddiv+0x3fa>
 800122c:	e0d4      	b.n	80013d8 <__aeabi_ddiv+0x5a4>
 800122e:	210f      	movs	r1, #15
 8001230:	2300      	movs	r3, #0
 8001232:	4011      	ands	r1, r2
 8001234:	2904      	cmp	r1, #4
 8001236:	d100      	bne.n	800123a <__aeabi_ddiv+0x406>
 8001238:	e0cb      	b.n	80013d2 <__aeabi_ddiv+0x59e>
 800123a:	1d11      	adds	r1, r2, #4
 800123c:	4291      	cmp	r1, r2
 800123e:	4192      	sbcs	r2, r2
 8001240:	4252      	negs	r2, r2
 8001242:	189b      	adds	r3, r3, r2
 8001244:	000a      	movs	r2, r1
 8001246:	0219      	lsls	r1, r3, #8
 8001248:	d400      	bmi.n	800124c <__aeabi_ddiv+0x418>
 800124a:	e0c2      	b.n	80013d2 <__aeabi_ddiv+0x59e>
 800124c:	2301      	movs	r3, #1
 800124e:	2400      	movs	r4, #0
 8001250:	2500      	movs	r5, #0
 8001252:	e646      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	4641      	mov	r1, r8
 8001258:	031b      	lsls	r3, r3, #12
 800125a:	4219      	tst	r1, r3
 800125c:	d008      	beq.n	8001270 <__aeabi_ddiv+0x43c>
 800125e:	421c      	tst	r4, r3
 8001260:	d106      	bne.n	8001270 <__aeabi_ddiv+0x43c>
 8001262:	431c      	orrs	r4, r3
 8001264:	0324      	lsls	r4, r4, #12
 8001266:	46ba      	mov	sl, r7
 8001268:	0015      	movs	r5, r2
 800126a:	4b69      	ldr	r3, [pc, #420]	; (8001410 <__aeabi_ddiv+0x5dc>)
 800126c:	0b24      	lsrs	r4, r4, #12
 800126e:	e638      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 8001270:	2480      	movs	r4, #128	; 0x80
 8001272:	4643      	mov	r3, r8
 8001274:	0324      	lsls	r4, r4, #12
 8001276:	431c      	orrs	r4, r3
 8001278:	0324      	lsls	r4, r4, #12
 800127a:	46b2      	mov	sl, r6
 800127c:	4b64      	ldr	r3, [pc, #400]	; (8001410 <__aeabi_ddiv+0x5dc>)
 800127e:	0b24      	lsrs	r4, r4, #12
 8001280:	e62f      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 8001282:	2b00      	cmp	r3, #0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x454>
 8001286:	e703      	b.n	8001090 <__aeabi_ddiv+0x25c>
 8001288:	19a6      	adds	r6, r4, r6
 800128a:	1e68      	subs	r0, r5, #1
 800128c:	42a6      	cmp	r6, r4
 800128e:	d200      	bcs.n	8001292 <__aeabi_ddiv+0x45e>
 8001290:	e08d      	b.n	80013ae <__aeabi_ddiv+0x57a>
 8001292:	428e      	cmp	r6, r1
 8001294:	d200      	bcs.n	8001298 <__aeabi_ddiv+0x464>
 8001296:	e0a3      	b.n	80013e0 <__aeabi_ddiv+0x5ac>
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x468>
 800129a:	e0b3      	b.n	8001404 <__aeabi_ddiv+0x5d0>
 800129c:	0005      	movs	r5, r0
 800129e:	e6f5      	b.n	800108c <__aeabi_ddiv+0x258>
 80012a0:	42aa      	cmp	r2, r5
 80012a2:	d900      	bls.n	80012a6 <__aeabi_ddiv+0x472>
 80012a4:	e639      	b.n	8000f1a <__aeabi_ddiv+0xe6>
 80012a6:	4643      	mov	r3, r8
 80012a8:	07de      	lsls	r6, r3, #31
 80012aa:	0858      	lsrs	r0, r3, #1
 80012ac:	086b      	lsrs	r3, r5, #1
 80012ae:	431e      	orrs	r6, r3
 80012b0:	07ed      	lsls	r5, r5, #31
 80012b2:	e639      	b.n	8000f28 <__aeabi_ddiv+0xf4>
 80012b4:	4648      	mov	r0, r9
 80012b6:	f001 f8ef 	bl	8002498 <__clzsi2>
 80012ba:	0001      	movs	r1, r0
 80012bc:	0002      	movs	r2, r0
 80012be:	3115      	adds	r1, #21
 80012c0:	3220      	adds	r2, #32
 80012c2:	291c      	cmp	r1, #28
 80012c4:	dc00      	bgt.n	80012c8 <__aeabi_ddiv+0x494>
 80012c6:	e72c      	b.n	8001122 <__aeabi_ddiv+0x2ee>
 80012c8:	464b      	mov	r3, r9
 80012ca:	3808      	subs	r0, #8
 80012cc:	4083      	lsls	r3, r0
 80012ce:	2500      	movs	r5, #0
 80012d0:	4698      	mov	r8, r3
 80012d2:	e732      	b.n	800113a <__aeabi_ddiv+0x306>
 80012d4:	f001 f8e0 	bl	8002498 <__clzsi2>
 80012d8:	0003      	movs	r3, r0
 80012da:	001a      	movs	r2, r3
 80012dc:	3215      	adds	r2, #21
 80012de:	3020      	adds	r0, #32
 80012e0:	2a1c      	cmp	r2, #28
 80012e2:	dc00      	bgt.n	80012e6 <__aeabi_ddiv+0x4b2>
 80012e4:	e700      	b.n	80010e8 <__aeabi_ddiv+0x2b4>
 80012e6:	4654      	mov	r4, sl
 80012e8:	3b08      	subs	r3, #8
 80012ea:	2200      	movs	r2, #0
 80012ec:	409c      	lsls	r4, r3
 80012ee:	e705      	b.n	80010fc <__aeabi_ddiv+0x2c8>
 80012f0:	1936      	adds	r6, r6, r4
 80012f2:	3b01      	subs	r3, #1
 80012f4:	42b4      	cmp	r4, r6
 80012f6:	d900      	bls.n	80012fa <__aeabi_ddiv+0x4c6>
 80012f8:	e6a6      	b.n	8001048 <__aeabi_ddiv+0x214>
 80012fa:	42b2      	cmp	r2, r6
 80012fc:	d800      	bhi.n	8001300 <__aeabi_ddiv+0x4cc>
 80012fe:	e6a3      	b.n	8001048 <__aeabi_ddiv+0x214>
 8001300:	1e83      	subs	r3, r0, #2
 8001302:	1936      	adds	r6, r6, r4
 8001304:	e6a0      	b.n	8001048 <__aeabi_ddiv+0x214>
 8001306:	1909      	adds	r1, r1, r4
 8001308:	3d01      	subs	r5, #1
 800130a:	428c      	cmp	r4, r1
 800130c:	d900      	bls.n	8001310 <__aeabi_ddiv+0x4dc>
 800130e:	e68d      	b.n	800102c <__aeabi_ddiv+0x1f8>
 8001310:	428a      	cmp	r2, r1
 8001312:	d800      	bhi.n	8001316 <__aeabi_ddiv+0x4e2>
 8001314:	e68a      	b.n	800102c <__aeabi_ddiv+0x1f8>
 8001316:	1e85      	subs	r5, r0, #2
 8001318:	1909      	adds	r1, r1, r4
 800131a:	e687      	b.n	800102c <__aeabi_ddiv+0x1f8>
 800131c:	230f      	movs	r3, #15
 800131e:	402b      	ands	r3, r5
 8001320:	2b04      	cmp	r3, #4
 8001322:	d100      	bne.n	8001326 <__aeabi_ddiv+0x4f2>
 8001324:	e6bc      	b.n	80010a0 <__aeabi_ddiv+0x26c>
 8001326:	2305      	movs	r3, #5
 8001328:	425b      	negs	r3, r3
 800132a:	42ab      	cmp	r3, r5
 800132c:	419b      	sbcs	r3, r3
 800132e:	3504      	adds	r5, #4
 8001330:	425b      	negs	r3, r3
 8001332:	08ed      	lsrs	r5, r5, #3
 8001334:	4498      	add	r8, r3
 8001336:	e6b4      	b.n	80010a2 <__aeabi_ddiv+0x26e>
 8001338:	42af      	cmp	r7, r5
 800133a:	d900      	bls.n	800133e <__aeabi_ddiv+0x50a>
 800133c:	e660      	b.n	8001000 <__aeabi_ddiv+0x1cc>
 800133e:	4282      	cmp	r2, r0
 8001340:	d804      	bhi.n	800134c <__aeabi_ddiv+0x518>
 8001342:	d000      	beq.n	8001346 <__aeabi_ddiv+0x512>
 8001344:	e65c      	b.n	8001000 <__aeabi_ddiv+0x1cc>
 8001346:	42ae      	cmp	r6, r5
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x518>
 800134a:	e659      	b.n	8001000 <__aeabi_ddiv+0x1cc>
 800134c:	2302      	movs	r3, #2
 800134e:	425b      	negs	r3, r3
 8001350:	469c      	mov	ip, r3
 8001352:	9b00      	ldr	r3, [sp, #0]
 8001354:	44e0      	add	r8, ip
 8001356:	469c      	mov	ip, r3
 8001358:	4465      	add	r5, ip
 800135a:	429d      	cmp	r5, r3
 800135c:	419b      	sbcs	r3, r3
 800135e:	425b      	negs	r3, r3
 8001360:	191b      	adds	r3, r3, r4
 8001362:	18c0      	adds	r0, r0, r3
 8001364:	e64d      	b.n	8001002 <__aeabi_ddiv+0x1ce>
 8001366:	428a      	cmp	r2, r1
 8001368:	d800      	bhi.n	800136c <__aeabi_ddiv+0x538>
 800136a:	e60e      	b.n	8000f8a <__aeabi_ddiv+0x156>
 800136c:	1e83      	subs	r3, r0, #2
 800136e:	1909      	adds	r1, r1, r4
 8001370:	e60b      	b.n	8000f8a <__aeabi_ddiv+0x156>
 8001372:	428a      	cmp	r2, r1
 8001374:	d800      	bhi.n	8001378 <__aeabi_ddiv+0x544>
 8001376:	e5f4      	b.n	8000f62 <__aeabi_ddiv+0x12e>
 8001378:	1e83      	subs	r3, r0, #2
 800137a:	4698      	mov	r8, r3
 800137c:	1909      	adds	r1, r1, r4
 800137e:	e5f0      	b.n	8000f62 <__aeabi_ddiv+0x12e>
 8001380:	4925      	ldr	r1, [pc, #148]	; (8001418 <__aeabi_ddiv+0x5e4>)
 8001382:	0028      	movs	r0, r5
 8001384:	4459      	add	r1, fp
 8001386:	408d      	lsls	r5, r1
 8001388:	4642      	mov	r2, r8
 800138a:	408a      	lsls	r2, r1
 800138c:	1e69      	subs	r1, r5, #1
 800138e:	418d      	sbcs	r5, r1
 8001390:	4641      	mov	r1, r8
 8001392:	40d8      	lsrs	r0, r3
 8001394:	40d9      	lsrs	r1, r3
 8001396:	4302      	orrs	r2, r0
 8001398:	432a      	orrs	r2, r5
 800139a:	000b      	movs	r3, r1
 800139c:	0751      	lsls	r1, r2, #29
 800139e:	d100      	bne.n	80013a2 <__aeabi_ddiv+0x56e>
 80013a0:	e751      	b.n	8001246 <__aeabi_ddiv+0x412>
 80013a2:	210f      	movs	r1, #15
 80013a4:	4011      	ands	r1, r2
 80013a6:	2904      	cmp	r1, #4
 80013a8:	d000      	beq.n	80013ac <__aeabi_ddiv+0x578>
 80013aa:	e746      	b.n	800123a <__aeabi_ddiv+0x406>
 80013ac:	e74b      	b.n	8001246 <__aeabi_ddiv+0x412>
 80013ae:	0005      	movs	r5, r0
 80013b0:	428e      	cmp	r6, r1
 80013b2:	d000      	beq.n	80013b6 <__aeabi_ddiv+0x582>
 80013b4:	e66a      	b.n	800108c <__aeabi_ddiv+0x258>
 80013b6:	9a00      	ldr	r2, [sp, #0]
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d000      	beq.n	80013be <__aeabi_ddiv+0x58a>
 80013bc:	e666      	b.n	800108c <__aeabi_ddiv+0x258>
 80013be:	e667      	b.n	8001090 <__aeabi_ddiv+0x25c>
 80013c0:	4a16      	ldr	r2, [pc, #88]	; (800141c <__aeabi_ddiv+0x5e8>)
 80013c2:	445a      	add	r2, fp
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	dc00      	bgt.n	80013ca <__aeabi_ddiv+0x596>
 80013c8:	e710      	b.n	80011ec <__aeabi_ddiv+0x3b8>
 80013ca:	2301      	movs	r3, #1
 80013cc:	2500      	movs	r5, #0
 80013ce:	4498      	add	r8, r3
 80013d0:	e667      	b.n	80010a2 <__aeabi_ddiv+0x26e>
 80013d2:	075d      	lsls	r5, r3, #29
 80013d4:	025b      	lsls	r3, r3, #9
 80013d6:	0b1c      	lsrs	r4, r3, #12
 80013d8:	08d2      	lsrs	r2, r2, #3
 80013da:	2300      	movs	r3, #0
 80013dc:	4315      	orrs	r5, r2
 80013de:	e580      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 80013e0:	9800      	ldr	r0, [sp, #0]
 80013e2:	3d02      	subs	r5, #2
 80013e4:	0042      	lsls	r2, r0, #1
 80013e6:	4282      	cmp	r2, r0
 80013e8:	41bf      	sbcs	r7, r7
 80013ea:	427f      	negs	r7, r7
 80013ec:	193c      	adds	r4, r7, r4
 80013ee:	1936      	adds	r6, r6, r4
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	e7dd      	b.n	80013b0 <__aeabi_ddiv+0x57c>
 80013f4:	2480      	movs	r4, #128	; 0x80
 80013f6:	4643      	mov	r3, r8
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	431c      	orrs	r4, r3
 80013fc:	0324      	lsls	r4, r4, #12
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__aeabi_ddiv+0x5dc>)
 8001400:	0b24      	lsrs	r4, r4, #12
 8001402:	e56e      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 8001404:	9a00      	ldr	r2, [sp, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d3ea      	bcc.n	80013e0 <__aeabi_ddiv+0x5ac>
 800140a:	0005      	movs	r5, r0
 800140c:	e7d3      	b.n	80013b6 <__aeabi_ddiv+0x582>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff
 8001414:	0000043e 	.word	0x0000043e
 8001418:	0000041e 	.word	0x0000041e
 800141c:	000003ff 	.word	0x000003ff

08001420 <__eqdf2>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464e      	mov	r6, r9
 8001424:	4645      	mov	r5, r8
 8001426:	46de      	mov	lr, fp
 8001428:	4657      	mov	r7, sl
 800142a:	4690      	mov	r8, r2
 800142c:	b5e0      	push	{r5, r6, r7, lr}
 800142e:	0017      	movs	r7, r2
 8001430:	031a      	lsls	r2, r3, #12
 8001432:	0b12      	lsrs	r2, r2, #12
 8001434:	0005      	movs	r5, r0
 8001436:	4684      	mov	ip, r0
 8001438:	4819      	ldr	r0, [pc, #100]	; (80014a0 <__eqdf2+0x80>)
 800143a:	030e      	lsls	r6, r1, #12
 800143c:	004c      	lsls	r4, r1, #1
 800143e:	4691      	mov	r9, r2
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	0fdb      	lsrs	r3, r3, #31
 8001444:	469b      	mov	fp, r3
 8001446:	0b36      	lsrs	r6, r6, #12
 8001448:	0d64      	lsrs	r4, r4, #21
 800144a:	0fc9      	lsrs	r1, r1, #31
 800144c:	0d52      	lsrs	r2, r2, #21
 800144e:	4284      	cmp	r4, r0
 8001450:	d019      	beq.n	8001486 <__eqdf2+0x66>
 8001452:	4282      	cmp	r2, r0
 8001454:	d010      	beq.n	8001478 <__eqdf2+0x58>
 8001456:	2001      	movs	r0, #1
 8001458:	4294      	cmp	r4, r2
 800145a:	d10e      	bne.n	800147a <__eqdf2+0x5a>
 800145c:	454e      	cmp	r6, r9
 800145e:	d10c      	bne.n	800147a <__eqdf2+0x5a>
 8001460:	2001      	movs	r0, #1
 8001462:	45c4      	cmp	ip, r8
 8001464:	d109      	bne.n	800147a <__eqdf2+0x5a>
 8001466:	4559      	cmp	r1, fp
 8001468:	d017      	beq.n	800149a <__eqdf2+0x7a>
 800146a:	2c00      	cmp	r4, #0
 800146c:	d105      	bne.n	800147a <__eqdf2+0x5a>
 800146e:	0030      	movs	r0, r6
 8001470:	4328      	orrs	r0, r5
 8001472:	1e43      	subs	r3, r0, #1
 8001474:	4198      	sbcs	r0, r3
 8001476:	e000      	b.n	800147a <__eqdf2+0x5a>
 8001478:	2001      	movs	r0, #1
 800147a:	bcf0      	pop	{r4, r5, r6, r7}
 800147c:	46bb      	mov	fp, r7
 800147e:	46b2      	mov	sl, r6
 8001480:	46a9      	mov	r9, r5
 8001482:	46a0      	mov	r8, r4
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001486:	0033      	movs	r3, r6
 8001488:	2001      	movs	r0, #1
 800148a:	432b      	orrs	r3, r5
 800148c:	d1f5      	bne.n	800147a <__eqdf2+0x5a>
 800148e:	42a2      	cmp	r2, r4
 8001490:	d1f3      	bne.n	800147a <__eqdf2+0x5a>
 8001492:	464b      	mov	r3, r9
 8001494:	433b      	orrs	r3, r7
 8001496:	d1f0      	bne.n	800147a <__eqdf2+0x5a>
 8001498:	e7e2      	b.n	8001460 <__eqdf2+0x40>
 800149a:	2000      	movs	r0, #0
 800149c:	e7ed      	b.n	800147a <__eqdf2+0x5a>
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	000007ff 	.word	0x000007ff

080014a4 <__gedf2>:
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	4647      	mov	r7, r8
 80014a8:	46ce      	mov	lr, r9
 80014aa:	0004      	movs	r4, r0
 80014ac:	0018      	movs	r0, r3
 80014ae:	0016      	movs	r6, r2
 80014b0:	031b      	lsls	r3, r3, #12
 80014b2:	0b1b      	lsrs	r3, r3, #12
 80014b4:	4d2d      	ldr	r5, [pc, #180]	; (800156c <__gedf2+0xc8>)
 80014b6:	004a      	lsls	r2, r1, #1
 80014b8:	4699      	mov	r9, r3
 80014ba:	b580      	push	{r7, lr}
 80014bc:	0043      	lsls	r3, r0, #1
 80014be:	030f      	lsls	r7, r1, #12
 80014c0:	46a4      	mov	ip, r4
 80014c2:	46b0      	mov	r8, r6
 80014c4:	0b3f      	lsrs	r7, r7, #12
 80014c6:	0d52      	lsrs	r2, r2, #21
 80014c8:	0fc9      	lsrs	r1, r1, #31
 80014ca:	0d5b      	lsrs	r3, r3, #21
 80014cc:	0fc0      	lsrs	r0, r0, #31
 80014ce:	42aa      	cmp	r2, r5
 80014d0:	d021      	beq.n	8001516 <__gedf2+0x72>
 80014d2:	42ab      	cmp	r3, r5
 80014d4:	d013      	beq.n	80014fe <__gedf2+0x5a>
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d122      	bne.n	8001520 <__gedf2+0x7c>
 80014da:	433c      	orrs	r4, r7
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <__gedf2+0x42>
 80014e0:	464d      	mov	r5, r9
 80014e2:	432e      	orrs	r6, r5
 80014e4:	d022      	beq.n	800152c <__gedf2+0x88>
 80014e6:	2c00      	cmp	r4, #0
 80014e8:	d010      	beq.n	800150c <__gedf2+0x68>
 80014ea:	4281      	cmp	r1, r0
 80014ec:	d022      	beq.n	8001534 <__gedf2+0x90>
 80014ee:	2002      	movs	r0, #2
 80014f0:	3901      	subs	r1, #1
 80014f2:	4008      	ands	r0, r1
 80014f4:	3801      	subs	r0, #1
 80014f6:	bcc0      	pop	{r6, r7}
 80014f8:	46b9      	mov	r9, r7
 80014fa:	46b0      	mov	r8, r6
 80014fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fe:	464d      	mov	r5, r9
 8001500:	432e      	orrs	r6, r5
 8001502:	d129      	bne.n	8001558 <__gedf2+0xb4>
 8001504:	2a00      	cmp	r2, #0
 8001506:	d1f0      	bne.n	80014ea <__gedf2+0x46>
 8001508:	433c      	orrs	r4, r7
 800150a:	d1ee      	bne.n	80014ea <__gedf2+0x46>
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f2      	bne.n	80014f6 <__gedf2+0x52>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7ef      	b.n	80014f6 <__gedf2+0x52>
 8001516:	003d      	movs	r5, r7
 8001518:	4325      	orrs	r5, r4
 800151a:	d11d      	bne.n	8001558 <__gedf2+0xb4>
 800151c:	4293      	cmp	r3, r2
 800151e:	d0ee      	beq.n	80014fe <__gedf2+0x5a>
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1e2      	bne.n	80014ea <__gedf2+0x46>
 8001524:	464c      	mov	r4, r9
 8001526:	4326      	orrs	r6, r4
 8001528:	d1df      	bne.n	80014ea <__gedf2+0x46>
 800152a:	e7e0      	b.n	80014ee <__gedf2+0x4a>
 800152c:	2000      	movs	r0, #0
 800152e:	2c00      	cmp	r4, #0
 8001530:	d0e1      	beq.n	80014f6 <__gedf2+0x52>
 8001532:	e7dc      	b.n	80014ee <__gedf2+0x4a>
 8001534:	429a      	cmp	r2, r3
 8001536:	dc0a      	bgt.n	800154e <__gedf2+0xaa>
 8001538:	dbe8      	blt.n	800150c <__gedf2+0x68>
 800153a:	454f      	cmp	r7, r9
 800153c:	d8d7      	bhi.n	80014ee <__gedf2+0x4a>
 800153e:	d00e      	beq.n	800155e <__gedf2+0xba>
 8001540:	2000      	movs	r0, #0
 8001542:	454f      	cmp	r7, r9
 8001544:	d2d7      	bcs.n	80014f6 <__gedf2+0x52>
 8001546:	2900      	cmp	r1, #0
 8001548:	d0e2      	beq.n	8001510 <__gedf2+0x6c>
 800154a:	0008      	movs	r0, r1
 800154c:	e7d3      	b.n	80014f6 <__gedf2+0x52>
 800154e:	4243      	negs	r3, r0
 8001550:	4158      	adcs	r0, r3
 8001552:	0040      	lsls	r0, r0, #1
 8001554:	3801      	subs	r0, #1
 8001556:	e7ce      	b.n	80014f6 <__gedf2+0x52>
 8001558:	2002      	movs	r0, #2
 800155a:	4240      	negs	r0, r0
 800155c:	e7cb      	b.n	80014f6 <__gedf2+0x52>
 800155e:	45c4      	cmp	ip, r8
 8001560:	d8c5      	bhi.n	80014ee <__gedf2+0x4a>
 8001562:	2000      	movs	r0, #0
 8001564:	45c4      	cmp	ip, r8
 8001566:	d2c6      	bcs.n	80014f6 <__gedf2+0x52>
 8001568:	e7ed      	b.n	8001546 <__gedf2+0xa2>
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	000007ff 	.word	0x000007ff

08001570 <__ledf2>:
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	4647      	mov	r7, r8
 8001574:	46ce      	mov	lr, r9
 8001576:	0004      	movs	r4, r0
 8001578:	0018      	movs	r0, r3
 800157a:	0016      	movs	r6, r2
 800157c:	031b      	lsls	r3, r3, #12
 800157e:	0b1b      	lsrs	r3, r3, #12
 8001580:	4d2c      	ldr	r5, [pc, #176]	; (8001634 <__ledf2+0xc4>)
 8001582:	004a      	lsls	r2, r1, #1
 8001584:	4699      	mov	r9, r3
 8001586:	b580      	push	{r7, lr}
 8001588:	0043      	lsls	r3, r0, #1
 800158a:	030f      	lsls	r7, r1, #12
 800158c:	46a4      	mov	ip, r4
 800158e:	46b0      	mov	r8, r6
 8001590:	0b3f      	lsrs	r7, r7, #12
 8001592:	0d52      	lsrs	r2, r2, #21
 8001594:	0fc9      	lsrs	r1, r1, #31
 8001596:	0d5b      	lsrs	r3, r3, #21
 8001598:	0fc0      	lsrs	r0, r0, #31
 800159a:	42aa      	cmp	r2, r5
 800159c:	d00d      	beq.n	80015ba <__ledf2+0x4a>
 800159e:	42ab      	cmp	r3, r5
 80015a0:	d010      	beq.n	80015c4 <__ledf2+0x54>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d127      	bne.n	80015f6 <__ledf2+0x86>
 80015a6:	433c      	orrs	r4, r7
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d111      	bne.n	80015d0 <__ledf2+0x60>
 80015ac:	464d      	mov	r5, r9
 80015ae:	432e      	orrs	r6, r5
 80015b0:	d10e      	bne.n	80015d0 <__ledf2+0x60>
 80015b2:	2000      	movs	r0, #0
 80015b4:	2c00      	cmp	r4, #0
 80015b6:	d015      	beq.n	80015e4 <__ledf2+0x74>
 80015b8:	e00e      	b.n	80015d8 <__ledf2+0x68>
 80015ba:	003d      	movs	r5, r7
 80015bc:	4325      	orrs	r5, r4
 80015be:	d110      	bne.n	80015e2 <__ledf2+0x72>
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d118      	bne.n	80015f6 <__ledf2+0x86>
 80015c4:	464d      	mov	r5, r9
 80015c6:	432e      	orrs	r6, r5
 80015c8:	d10b      	bne.n	80015e2 <__ledf2+0x72>
 80015ca:	2a00      	cmp	r2, #0
 80015cc:	d102      	bne.n	80015d4 <__ledf2+0x64>
 80015ce:	433c      	orrs	r4, r7
 80015d0:	2c00      	cmp	r4, #0
 80015d2:	d00b      	beq.n	80015ec <__ledf2+0x7c>
 80015d4:	4281      	cmp	r1, r0
 80015d6:	d014      	beq.n	8001602 <__ledf2+0x92>
 80015d8:	2002      	movs	r0, #2
 80015da:	3901      	subs	r1, #1
 80015dc:	4008      	ands	r0, r1
 80015de:	3801      	subs	r0, #1
 80015e0:	e000      	b.n	80015e4 <__ledf2+0x74>
 80015e2:	2002      	movs	r0, #2
 80015e4:	bcc0      	pop	{r6, r7}
 80015e6:	46b9      	mov	r9, r7
 80015e8:	46b0      	mov	r8, r6
 80015ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ec:	2800      	cmp	r0, #0
 80015ee:	d1f9      	bne.n	80015e4 <__ledf2+0x74>
 80015f0:	2001      	movs	r0, #1
 80015f2:	4240      	negs	r0, r0
 80015f4:	e7f6      	b.n	80015e4 <__ledf2+0x74>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ec      	bne.n	80015d4 <__ledf2+0x64>
 80015fa:	464c      	mov	r4, r9
 80015fc:	4326      	orrs	r6, r4
 80015fe:	d1e9      	bne.n	80015d4 <__ledf2+0x64>
 8001600:	e7ea      	b.n	80015d8 <__ledf2+0x68>
 8001602:	429a      	cmp	r2, r3
 8001604:	dd04      	ble.n	8001610 <__ledf2+0xa0>
 8001606:	4243      	negs	r3, r0
 8001608:	4158      	adcs	r0, r3
 800160a:	0040      	lsls	r0, r0, #1
 800160c:	3801      	subs	r0, #1
 800160e:	e7e9      	b.n	80015e4 <__ledf2+0x74>
 8001610:	429a      	cmp	r2, r3
 8001612:	dbeb      	blt.n	80015ec <__ledf2+0x7c>
 8001614:	454f      	cmp	r7, r9
 8001616:	d8df      	bhi.n	80015d8 <__ledf2+0x68>
 8001618:	d006      	beq.n	8001628 <__ledf2+0xb8>
 800161a:	2000      	movs	r0, #0
 800161c:	454f      	cmp	r7, r9
 800161e:	d2e1      	bcs.n	80015e4 <__ledf2+0x74>
 8001620:	2900      	cmp	r1, #0
 8001622:	d0e5      	beq.n	80015f0 <__ledf2+0x80>
 8001624:	0008      	movs	r0, r1
 8001626:	e7dd      	b.n	80015e4 <__ledf2+0x74>
 8001628:	45c4      	cmp	ip, r8
 800162a:	d8d5      	bhi.n	80015d8 <__ledf2+0x68>
 800162c:	2000      	movs	r0, #0
 800162e:	45c4      	cmp	ip, r8
 8001630:	d2d8      	bcs.n	80015e4 <__ledf2+0x74>
 8001632:	e7f5      	b.n	8001620 <__ledf2+0xb0>
 8001634:	000007ff 	.word	0x000007ff

08001638 <__aeabi_dmul>:
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	4657      	mov	r7, sl
 800163c:	464e      	mov	r6, r9
 800163e:	4645      	mov	r5, r8
 8001640:	46de      	mov	lr, fp
 8001642:	b5e0      	push	{r5, r6, r7, lr}
 8001644:	4698      	mov	r8, r3
 8001646:	030c      	lsls	r4, r1, #12
 8001648:	004b      	lsls	r3, r1, #1
 800164a:	0006      	movs	r6, r0
 800164c:	4692      	mov	sl, r2
 800164e:	b087      	sub	sp, #28
 8001650:	0b24      	lsrs	r4, r4, #12
 8001652:	0d5b      	lsrs	r3, r3, #21
 8001654:	0fcf      	lsrs	r7, r1, #31
 8001656:	2b00      	cmp	r3, #0
 8001658:	d100      	bne.n	800165c <__aeabi_dmul+0x24>
 800165a:	e15c      	b.n	8001916 <__aeabi_dmul+0x2de>
 800165c:	4ad9      	ldr	r2, [pc, #868]	; (80019c4 <__aeabi_dmul+0x38c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d100      	bne.n	8001664 <__aeabi_dmul+0x2c>
 8001662:	e175      	b.n	8001950 <__aeabi_dmul+0x318>
 8001664:	0f42      	lsrs	r2, r0, #29
 8001666:	00e4      	lsls	r4, r4, #3
 8001668:	4314      	orrs	r4, r2
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	0412      	lsls	r2, r2, #16
 800166e:	4314      	orrs	r4, r2
 8001670:	4ad5      	ldr	r2, [pc, #852]	; (80019c8 <__aeabi_dmul+0x390>)
 8001672:	00c5      	lsls	r5, r0, #3
 8001674:	4694      	mov	ip, r2
 8001676:	4463      	add	r3, ip
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	4699      	mov	r9, r3
 800167e:	469b      	mov	fp, r3
 8001680:	4643      	mov	r3, r8
 8001682:	4642      	mov	r2, r8
 8001684:	031e      	lsls	r6, r3, #12
 8001686:	0fd2      	lsrs	r2, r2, #31
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4650      	mov	r0, sl
 800168c:	4690      	mov	r8, r2
 800168e:	0b36      	lsrs	r6, r6, #12
 8001690:	0d5b      	lsrs	r3, r3, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x5e>
 8001694:	e120      	b.n	80018d8 <__aeabi_dmul+0x2a0>
 8001696:	4acb      	ldr	r2, [pc, #812]	; (80019c4 <__aeabi_dmul+0x38c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x66>
 800169c:	e162      	b.n	8001964 <__aeabi_dmul+0x32c>
 800169e:	49ca      	ldr	r1, [pc, #808]	; (80019c8 <__aeabi_dmul+0x390>)
 80016a0:	0f42      	lsrs	r2, r0, #29
 80016a2:	468c      	mov	ip, r1
 80016a4:	9900      	ldr	r1, [sp, #0]
 80016a6:	4463      	add	r3, ip
 80016a8:	00f6      	lsls	r6, r6, #3
 80016aa:	468c      	mov	ip, r1
 80016ac:	4316      	orrs	r6, r2
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	449c      	add	ip, r3
 80016b2:	0412      	lsls	r2, r2, #16
 80016b4:	4663      	mov	r3, ip
 80016b6:	4316      	orrs	r6, r2
 80016b8:	00c2      	lsls	r2, r0, #3
 80016ba:	2000      	movs	r0, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	9900      	ldr	r1, [sp, #0]
 80016c0:	4643      	mov	r3, r8
 80016c2:	3101      	adds	r1, #1
 80016c4:	468c      	mov	ip, r1
 80016c6:	4649      	mov	r1, r9
 80016c8:	407b      	eors	r3, r7
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	290f      	cmp	r1, #15
 80016ce:	d826      	bhi.n	800171e <__aeabi_dmul+0xe6>
 80016d0:	4bbe      	ldr	r3, [pc, #760]	; (80019cc <__aeabi_dmul+0x394>)
 80016d2:	0089      	lsls	r1, r1, #2
 80016d4:	5859      	ldr	r1, [r3, r1]
 80016d6:	468f      	mov	pc, r1
 80016d8:	4643      	mov	r3, r8
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	0034      	movs	r4, r6
 80016de:	0015      	movs	r5, r2
 80016e0:	4683      	mov	fp, r0
 80016e2:	465b      	mov	r3, fp
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d016      	beq.n	8001716 <__aeabi_dmul+0xde>
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0xb6>
 80016ec:	e203      	b.n	8001af6 <__aeabi_dmul+0x4be>
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d000      	beq.n	80016f4 <__aeabi_dmul+0xbc>
 80016f2:	e0cd      	b.n	8001890 <__aeabi_dmul+0x258>
 80016f4:	2200      	movs	r2, #0
 80016f6:	2400      	movs	r4, #0
 80016f8:	2500      	movs	r5, #0
 80016fa:	9b01      	ldr	r3, [sp, #4]
 80016fc:	0512      	lsls	r2, r2, #20
 80016fe:	4322      	orrs	r2, r4
 8001700:	07db      	lsls	r3, r3, #31
 8001702:	431a      	orrs	r2, r3
 8001704:	0028      	movs	r0, r5
 8001706:	0011      	movs	r1, r2
 8001708:	b007      	add	sp, #28
 800170a:	bcf0      	pop	{r4, r5, r6, r7}
 800170c:	46bb      	mov	fp, r7
 800170e:	46b2      	mov	sl, r6
 8001710:	46a9      	mov	r9, r5
 8001712:	46a0      	mov	r8, r4
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001716:	2400      	movs	r4, #0
 8001718:	2500      	movs	r5, #0
 800171a:	4aaa      	ldr	r2, [pc, #680]	; (80019c4 <__aeabi_dmul+0x38c>)
 800171c:	e7ed      	b.n	80016fa <__aeabi_dmul+0xc2>
 800171e:	0c28      	lsrs	r0, r5, #16
 8001720:	042d      	lsls	r5, r5, #16
 8001722:	0c2d      	lsrs	r5, r5, #16
 8001724:	002b      	movs	r3, r5
 8001726:	0c11      	lsrs	r1, r2, #16
 8001728:	0412      	lsls	r2, r2, #16
 800172a:	0c12      	lsrs	r2, r2, #16
 800172c:	4353      	muls	r3, r2
 800172e:	4698      	mov	r8, r3
 8001730:	0013      	movs	r3, r2
 8001732:	002f      	movs	r7, r5
 8001734:	4343      	muls	r3, r0
 8001736:	4699      	mov	r9, r3
 8001738:	434f      	muls	r7, r1
 800173a:	444f      	add	r7, r9
 800173c:	46bb      	mov	fp, r7
 800173e:	4647      	mov	r7, r8
 8001740:	000b      	movs	r3, r1
 8001742:	0c3f      	lsrs	r7, r7, #16
 8001744:	46ba      	mov	sl, r7
 8001746:	4343      	muls	r3, r0
 8001748:	44da      	add	sl, fp
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	45d1      	cmp	r9, sl
 800174e:	d904      	bls.n	800175a <__aeabi_dmul+0x122>
 8001750:	2780      	movs	r7, #128	; 0x80
 8001752:	027f      	lsls	r7, r7, #9
 8001754:	46b9      	mov	r9, r7
 8001756:	444b      	add	r3, r9
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	4653      	mov	r3, sl
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	469b      	mov	fp, r3
 8001760:	4653      	mov	r3, sl
 8001762:	041f      	lsls	r7, r3, #16
 8001764:	4643      	mov	r3, r8
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	0c1b      	lsrs	r3, r3, #16
 800176a:	4698      	mov	r8, r3
 800176c:	003b      	movs	r3, r7
 800176e:	4443      	add	r3, r8
 8001770:	9304      	str	r3, [sp, #16]
 8001772:	0c33      	lsrs	r3, r6, #16
 8001774:	0436      	lsls	r6, r6, #16
 8001776:	0c36      	lsrs	r6, r6, #16
 8001778:	4698      	mov	r8, r3
 800177a:	0033      	movs	r3, r6
 800177c:	4343      	muls	r3, r0
 800177e:	4699      	mov	r9, r3
 8001780:	4643      	mov	r3, r8
 8001782:	4343      	muls	r3, r0
 8001784:	002f      	movs	r7, r5
 8001786:	469a      	mov	sl, r3
 8001788:	4643      	mov	r3, r8
 800178a:	4377      	muls	r7, r6
 800178c:	435d      	muls	r5, r3
 800178e:	0c38      	lsrs	r0, r7, #16
 8001790:	444d      	add	r5, r9
 8001792:	1945      	adds	r5, r0, r5
 8001794:	45a9      	cmp	r9, r5
 8001796:	d903      	bls.n	80017a0 <__aeabi_dmul+0x168>
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	4699      	mov	r9, r3
 800179e:	44ca      	add	sl, r9
 80017a0:	043f      	lsls	r7, r7, #16
 80017a2:	0c28      	lsrs	r0, r5, #16
 80017a4:	0c3f      	lsrs	r7, r7, #16
 80017a6:	042d      	lsls	r5, r5, #16
 80017a8:	19ed      	adds	r5, r5, r7
 80017aa:	0c27      	lsrs	r7, r4, #16
 80017ac:	0424      	lsls	r4, r4, #16
 80017ae:	0c24      	lsrs	r4, r4, #16
 80017b0:	0003      	movs	r3, r0
 80017b2:	0020      	movs	r0, r4
 80017b4:	4350      	muls	r0, r2
 80017b6:	437a      	muls	r2, r7
 80017b8:	4691      	mov	r9, r2
 80017ba:	003a      	movs	r2, r7
 80017bc:	4453      	add	r3, sl
 80017be:	9305      	str	r3, [sp, #20]
 80017c0:	0c03      	lsrs	r3, r0, #16
 80017c2:	469a      	mov	sl, r3
 80017c4:	434a      	muls	r2, r1
 80017c6:	4361      	muls	r1, r4
 80017c8:	4449      	add	r1, r9
 80017ca:	4451      	add	r1, sl
 80017cc:	44ab      	add	fp, r5
 80017ce:	4589      	cmp	r9, r1
 80017d0:	d903      	bls.n	80017da <__aeabi_dmul+0x1a2>
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	4699      	mov	r9, r3
 80017d8:	444a      	add	r2, r9
 80017da:	0400      	lsls	r0, r0, #16
 80017dc:	0c0b      	lsrs	r3, r1, #16
 80017de:	0c00      	lsrs	r0, r0, #16
 80017e0:	0409      	lsls	r1, r1, #16
 80017e2:	1809      	adds	r1, r1, r0
 80017e4:	0020      	movs	r0, r4
 80017e6:	4699      	mov	r9, r3
 80017e8:	4643      	mov	r3, r8
 80017ea:	4370      	muls	r0, r6
 80017ec:	435c      	muls	r4, r3
 80017ee:	437e      	muls	r6, r7
 80017f0:	435f      	muls	r7, r3
 80017f2:	0c03      	lsrs	r3, r0, #16
 80017f4:	4698      	mov	r8, r3
 80017f6:	19a4      	adds	r4, r4, r6
 80017f8:	4444      	add	r4, r8
 80017fa:	444a      	add	r2, r9
 80017fc:	9703      	str	r7, [sp, #12]
 80017fe:	42a6      	cmp	r6, r4
 8001800:	d904      	bls.n	800180c <__aeabi_dmul+0x1d4>
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	025b      	lsls	r3, r3, #9
 8001806:	4698      	mov	r8, r3
 8001808:	4447      	add	r7, r8
 800180a:	9703      	str	r7, [sp, #12]
 800180c:	0423      	lsls	r3, r4, #16
 800180e:	9e02      	ldr	r6, [sp, #8]
 8001810:	469a      	mov	sl, r3
 8001812:	9b05      	ldr	r3, [sp, #20]
 8001814:	445e      	add	r6, fp
 8001816:	4698      	mov	r8, r3
 8001818:	42ae      	cmp	r6, r5
 800181a:	41ad      	sbcs	r5, r5
 800181c:	1876      	adds	r6, r6, r1
 800181e:	428e      	cmp	r6, r1
 8001820:	4189      	sbcs	r1, r1
 8001822:	0400      	lsls	r0, r0, #16
 8001824:	0c00      	lsrs	r0, r0, #16
 8001826:	4450      	add	r0, sl
 8001828:	4440      	add	r0, r8
 800182a:	426d      	negs	r5, r5
 800182c:	1947      	adds	r7, r0, r5
 800182e:	46b8      	mov	r8, r7
 8001830:	4693      	mov	fp, r2
 8001832:	4249      	negs	r1, r1
 8001834:	4689      	mov	r9, r1
 8001836:	44c3      	add	fp, r8
 8001838:	44d9      	add	r9, fp
 800183a:	4298      	cmp	r0, r3
 800183c:	4180      	sbcs	r0, r0
 800183e:	45a8      	cmp	r8, r5
 8001840:	41ad      	sbcs	r5, r5
 8001842:	4593      	cmp	fp, r2
 8001844:	4192      	sbcs	r2, r2
 8001846:	4589      	cmp	r9, r1
 8001848:	4189      	sbcs	r1, r1
 800184a:	426d      	negs	r5, r5
 800184c:	4240      	negs	r0, r0
 800184e:	4328      	orrs	r0, r5
 8001850:	0c24      	lsrs	r4, r4, #16
 8001852:	4252      	negs	r2, r2
 8001854:	4249      	negs	r1, r1
 8001856:	430a      	orrs	r2, r1
 8001858:	9b03      	ldr	r3, [sp, #12]
 800185a:	1900      	adds	r0, r0, r4
 800185c:	1880      	adds	r0, r0, r2
 800185e:	18c7      	adds	r7, r0, r3
 8001860:	464b      	mov	r3, r9
 8001862:	0ddc      	lsrs	r4, r3, #23
 8001864:	9b04      	ldr	r3, [sp, #16]
 8001866:	0275      	lsls	r5, r6, #9
 8001868:	431d      	orrs	r5, r3
 800186a:	1e6a      	subs	r2, r5, #1
 800186c:	4195      	sbcs	r5, r2
 800186e:	464b      	mov	r3, r9
 8001870:	0df6      	lsrs	r6, r6, #23
 8001872:	027f      	lsls	r7, r7, #9
 8001874:	4335      	orrs	r5, r6
 8001876:	025a      	lsls	r2, r3, #9
 8001878:	433c      	orrs	r4, r7
 800187a:	4315      	orrs	r5, r2
 800187c:	01fb      	lsls	r3, r7, #7
 800187e:	d400      	bmi.n	8001882 <__aeabi_dmul+0x24a>
 8001880:	e11c      	b.n	8001abc <__aeabi_dmul+0x484>
 8001882:	2101      	movs	r1, #1
 8001884:	086a      	lsrs	r2, r5, #1
 8001886:	400d      	ands	r5, r1
 8001888:	4315      	orrs	r5, r2
 800188a:	07e2      	lsls	r2, r4, #31
 800188c:	4315      	orrs	r5, r2
 800188e:	0864      	lsrs	r4, r4, #1
 8001890:	494f      	ldr	r1, [pc, #316]	; (80019d0 <__aeabi_dmul+0x398>)
 8001892:	4461      	add	r1, ip
 8001894:	2900      	cmp	r1, #0
 8001896:	dc00      	bgt.n	800189a <__aeabi_dmul+0x262>
 8001898:	e0b0      	b.n	80019fc <__aeabi_dmul+0x3c4>
 800189a:	076b      	lsls	r3, r5, #29
 800189c:	d009      	beq.n	80018b2 <__aeabi_dmul+0x27a>
 800189e:	220f      	movs	r2, #15
 80018a0:	402a      	ands	r2, r5
 80018a2:	2a04      	cmp	r2, #4
 80018a4:	d005      	beq.n	80018b2 <__aeabi_dmul+0x27a>
 80018a6:	1d2a      	adds	r2, r5, #4
 80018a8:	42aa      	cmp	r2, r5
 80018aa:	41ad      	sbcs	r5, r5
 80018ac:	426d      	negs	r5, r5
 80018ae:	1964      	adds	r4, r4, r5
 80018b0:	0015      	movs	r5, r2
 80018b2:	01e3      	lsls	r3, r4, #7
 80018b4:	d504      	bpl.n	80018c0 <__aeabi_dmul+0x288>
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <__aeabi_dmul+0x39c>)
 80018ba:	00c9      	lsls	r1, r1, #3
 80018bc:	4014      	ands	r4, r2
 80018be:	4461      	add	r1, ip
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <__aeabi_dmul+0x3a0>)
 80018c2:	4291      	cmp	r1, r2
 80018c4:	dd00      	ble.n	80018c8 <__aeabi_dmul+0x290>
 80018c6:	e726      	b.n	8001716 <__aeabi_dmul+0xde>
 80018c8:	0762      	lsls	r2, r4, #29
 80018ca:	08ed      	lsrs	r5, r5, #3
 80018cc:	0264      	lsls	r4, r4, #9
 80018ce:	0549      	lsls	r1, r1, #21
 80018d0:	4315      	orrs	r5, r2
 80018d2:	0b24      	lsrs	r4, r4, #12
 80018d4:	0d4a      	lsrs	r2, r1, #21
 80018d6:	e710      	b.n	80016fa <__aeabi_dmul+0xc2>
 80018d8:	4652      	mov	r2, sl
 80018da:	4332      	orrs	r2, r6
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dmul+0x2a8>
 80018de:	e07f      	b.n	80019e0 <__aeabi_dmul+0x3a8>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dmul+0x2ae>
 80018e4:	e0dc      	b.n	8001aa0 <__aeabi_dmul+0x468>
 80018e6:	0030      	movs	r0, r6
 80018e8:	f000 fdd6 	bl	8002498 <__clzsi2>
 80018ec:	0002      	movs	r2, r0
 80018ee:	3a0b      	subs	r2, #11
 80018f0:	231d      	movs	r3, #29
 80018f2:	0001      	movs	r1, r0
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	4652      	mov	r2, sl
 80018f8:	3908      	subs	r1, #8
 80018fa:	40da      	lsrs	r2, r3
 80018fc:	408e      	lsls	r6, r1
 80018fe:	4316      	orrs	r6, r2
 8001900:	4652      	mov	r2, sl
 8001902:	408a      	lsls	r2, r1
 8001904:	9b00      	ldr	r3, [sp, #0]
 8001906:	4935      	ldr	r1, [pc, #212]	; (80019dc <__aeabi_dmul+0x3a4>)
 8001908:	1a18      	subs	r0, r3, r0
 800190a:	0003      	movs	r3, r0
 800190c:	468c      	mov	ip, r1
 800190e:	4463      	add	r3, ip
 8001910:	2000      	movs	r0, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	e6d3      	b.n	80016be <__aeabi_dmul+0x86>
 8001916:	0025      	movs	r5, r4
 8001918:	4305      	orrs	r5, r0
 800191a:	d04a      	beq.n	80019b2 <__aeabi_dmul+0x37a>
 800191c:	2c00      	cmp	r4, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dmul+0x2ea>
 8001920:	e0b0      	b.n	8001a84 <__aeabi_dmul+0x44c>
 8001922:	0020      	movs	r0, r4
 8001924:	f000 fdb8 	bl	8002498 <__clzsi2>
 8001928:	0001      	movs	r1, r0
 800192a:	0002      	movs	r2, r0
 800192c:	390b      	subs	r1, #11
 800192e:	231d      	movs	r3, #29
 8001930:	0010      	movs	r0, r2
 8001932:	1a5b      	subs	r3, r3, r1
 8001934:	0031      	movs	r1, r6
 8001936:	0035      	movs	r5, r6
 8001938:	3808      	subs	r0, #8
 800193a:	4084      	lsls	r4, r0
 800193c:	40d9      	lsrs	r1, r3
 800193e:	4085      	lsls	r5, r0
 8001940:	430c      	orrs	r4, r1
 8001942:	4826      	ldr	r0, [pc, #152]	; (80019dc <__aeabi_dmul+0x3a4>)
 8001944:	1a83      	subs	r3, r0, r2
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2300      	movs	r3, #0
 800194a:	4699      	mov	r9, r3
 800194c:	469b      	mov	fp, r3
 800194e:	e697      	b.n	8001680 <__aeabi_dmul+0x48>
 8001950:	0005      	movs	r5, r0
 8001952:	4325      	orrs	r5, r4
 8001954:	d126      	bne.n	80019a4 <__aeabi_dmul+0x36c>
 8001956:	2208      	movs	r2, #8
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	2400      	movs	r4, #0
 800195e:	4691      	mov	r9, r2
 8001960:	469b      	mov	fp, r3
 8001962:	e68d      	b.n	8001680 <__aeabi_dmul+0x48>
 8001964:	4652      	mov	r2, sl
 8001966:	9b00      	ldr	r3, [sp, #0]
 8001968:	4332      	orrs	r2, r6
 800196a:	d110      	bne.n	800198e <__aeabi_dmul+0x356>
 800196c:	4915      	ldr	r1, [pc, #84]	; (80019c4 <__aeabi_dmul+0x38c>)
 800196e:	2600      	movs	r6, #0
 8001970:	468c      	mov	ip, r1
 8001972:	4463      	add	r3, ip
 8001974:	4649      	mov	r1, r9
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2302      	movs	r3, #2
 800197a:	4319      	orrs	r1, r3
 800197c:	4689      	mov	r9, r1
 800197e:	2002      	movs	r0, #2
 8001980:	e69d      	b.n	80016be <__aeabi_dmul+0x86>
 8001982:	465b      	mov	r3, fp
 8001984:	9701      	str	r7, [sp, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d000      	beq.n	800198c <__aeabi_dmul+0x354>
 800198a:	e6ad      	b.n	80016e8 <__aeabi_dmul+0xb0>
 800198c:	e6c3      	b.n	8001716 <__aeabi_dmul+0xde>
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <__aeabi_dmul+0x38c>)
 8001990:	2003      	movs	r0, #3
 8001992:	4694      	mov	ip, r2
 8001994:	4463      	add	r3, ip
 8001996:	464a      	mov	r2, r9
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2303      	movs	r3, #3
 800199c:	431a      	orrs	r2, r3
 800199e:	4691      	mov	r9, r2
 80019a0:	4652      	mov	r2, sl
 80019a2:	e68c      	b.n	80016be <__aeabi_dmul+0x86>
 80019a4:	220c      	movs	r2, #12
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2303      	movs	r3, #3
 80019aa:	0005      	movs	r5, r0
 80019ac:	4691      	mov	r9, r2
 80019ae:	469b      	mov	fp, r3
 80019b0:	e666      	b.n	8001680 <__aeabi_dmul+0x48>
 80019b2:	2304      	movs	r3, #4
 80019b4:	4699      	mov	r9, r3
 80019b6:	2300      	movs	r3, #0
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	2400      	movs	r4, #0
 80019be:	469b      	mov	fp, r3
 80019c0:	e65e      	b.n	8001680 <__aeabi_dmul+0x48>
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	fffffc01 	.word	0xfffffc01
 80019cc:	08008c00 	.word	0x08008c00
 80019d0:	000003ff 	.word	0x000003ff
 80019d4:	feffffff 	.word	0xfeffffff
 80019d8:	000007fe 	.word	0x000007fe
 80019dc:	fffffc0d 	.word	0xfffffc0d
 80019e0:	4649      	mov	r1, r9
 80019e2:	2301      	movs	r3, #1
 80019e4:	4319      	orrs	r1, r3
 80019e6:	4689      	mov	r9, r1
 80019e8:	2600      	movs	r6, #0
 80019ea:	2001      	movs	r0, #1
 80019ec:	e667      	b.n	80016be <__aeabi_dmul+0x86>
 80019ee:	2300      	movs	r3, #0
 80019f0:	2480      	movs	r4, #128	; 0x80
 80019f2:	2500      	movs	r5, #0
 80019f4:	4a43      	ldr	r2, [pc, #268]	; (8001b04 <__aeabi_dmul+0x4cc>)
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	0324      	lsls	r4, r4, #12
 80019fa:	e67e      	b.n	80016fa <__aeabi_dmul+0xc2>
 80019fc:	2001      	movs	r0, #1
 80019fe:	1a40      	subs	r0, r0, r1
 8001a00:	2838      	cmp	r0, #56	; 0x38
 8001a02:	dd00      	ble.n	8001a06 <__aeabi_dmul+0x3ce>
 8001a04:	e676      	b.n	80016f4 <__aeabi_dmul+0xbc>
 8001a06:	281f      	cmp	r0, #31
 8001a08:	dd5b      	ble.n	8001ac2 <__aeabi_dmul+0x48a>
 8001a0a:	221f      	movs	r2, #31
 8001a0c:	0023      	movs	r3, r4
 8001a0e:	4252      	negs	r2, r2
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	40cb      	lsrs	r3, r1
 8001a14:	0019      	movs	r1, r3
 8001a16:	2820      	cmp	r0, #32
 8001a18:	d003      	beq.n	8001a22 <__aeabi_dmul+0x3ea>
 8001a1a:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <__aeabi_dmul+0x4d0>)
 8001a1c:	4462      	add	r2, ip
 8001a1e:	4094      	lsls	r4, r2
 8001a20:	4325      	orrs	r5, r4
 8001a22:	1e6a      	subs	r2, r5, #1
 8001a24:	4195      	sbcs	r5, r2
 8001a26:	002a      	movs	r2, r5
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	2107      	movs	r1, #7
 8001a2c:	000d      	movs	r5, r1
 8001a2e:	2400      	movs	r4, #0
 8001a30:	4015      	ands	r5, r2
 8001a32:	4211      	tst	r1, r2
 8001a34:	d05b      	beq.n	8001aee <__aeabi_dmul+0x4b6>
 8001a36:	210f      	movs	r1, #15
 8001a38:	2400      	movs	r4, #0
 8001a3a:	4011      	ands	r1, r2
 8001a3c:	2904      	cmp	r1, #4
 8001a3e:	d053      	beq.n	8001ae8 <__aeabi_dmul+0x4b0>
 8001a40:	1d11      	adds	r1, r2, #4
 8001a42:	4291      	cmp	r1, r2
 8001a44:	4192      	sbcs	r2, r2
 8001a46:	4252      	negs	r2, r2
 8001a48:	18a4      	adds	r4, r4, r2
 8001a4a:	000a      	movs	r2, r1
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d54b      	bpl.n	8001ae8 <__aeabi_dmul+0x4b0>
 8001a50:	2201      	movs	r2, #1
 8001a52:	2400      	movs	r4, #0
 8001a54:	2500      	movs	r5, #0
 8001a56:	e650      	b.n	80016fa <__aeabi_dmul+0xc2>
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	031b      	lsls	r3, r3, #12
 8001a5c:	421c      	tst	r4, r3
 8001a5e:	d009      	beq.n	8001a74 <__aeabi_dmul+0x43c>
 8001a60:	421e      	tst	r6, r3
 8001a62:	d107      	bne.n	8001a74 <__aeabi_dmul+0x43c>
 8001a64:	4333      	orrs	r3, r6
 8001a66:	031c      	lsls	r4, r3, #12
 8001a68:	4643      	mov	r3, r8
 8001a6a:	0015      	movs	r5, r2
 8001a6c:	0b24      	lsrs	r4, r4, #12
 8001a6e:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <__aeabi_dmul+0x4cc>)
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	e642      	b.n	80016fa <__aeabi_dmul+0xc2>
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	0312      	lsls	r2, r2, #12
 8001a78:	4314      	orrs	r4, r2
 8001a7a:	0324      	lsls	r4, r4, #12
 8001a7c:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <__aeabi_dmul+0x4cc>)
 8001a7e:	0b24      	lsrs	r4, r4, #12
 8001a80:	9701      	str	r7, [sp, #4]
 8001a82:	e63a      	b.n	80016fa <__aeabi_dmul+0xc2>
 8001a84:	f000 fd08 	bl	8002498 <__clzsi2>
 8001a88:	0001      	movs	r1, r0
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	3115      	adds	r1, #21
 8001a8e:	3220      	adds	r2, #32
 8001a90:	291c      	cmp	r1, #28
 8001a92:	dc00      	bgt.n	8001a96 <__aeabi_dmul+0x45e>
 8001a94:	e74b      	b.n	800192e <__aeabi_dmul+0x2f6>
 8001a96:	0034      	movs	r4, r6
 8001a98:	3808      	subs	r0, #8
 8001a9a:	2500      	movs	r5, #0
 8001a9c:	4084      	lsls	r4, r0
 8001a9e:	e750      	b.n	8001942 <__aeabi_dmul+0x30a>
 8001aa0:	f000 fcfa 	bl	8002498 <__clzsi2>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	3215      	adds	r2, #21
 8001aaa:	3020      	adds	r0, #32
 8001aac:	2a1c      	cmp	r2, #28
 8001aae:	dc00      	bgt.n	8001ab2 <__aeabi_dmul+0x47a>
 8001ab0:	e71e      	b.n	80018f0 <__aeabi_dmul+0x2b8>
 8001ab2:	4656      	mov	r6, sl
 8001ab4:	3b08      	subs	r3, #8
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	409e      	lsls	r6, r3
 8001aba:	e723      	b.n	8001904 <__aeabi_dmul+0x2cc>
 8001abc:	9b00      	ldr	r3, [sp, #0]
 8001abe:	469c      	mov	ip, r3
 8001ac0:	e6e6      	b.n	8001890 <__aeabi_dmul+0x258>
 8001ac2:	4912      	ldr	r1, [pc, #72]	; (8001b0c <__aeabi_dmul+0x4d4>)
 8001ac4:	0022      	movs	r2, r4
 8001ac6:	4461      	add	r1, ip
 8001ac8:	002e      	movs	r6, r5
 8001aca:	408d      	lsls	r5, r1
 8001acc:	408a      	lsls	r2, r1
 8001ace:	40c6      	lsrs	r6, r0
 8001ad0:	1e69      	subs	r1, r5, #1
 8001ad2:	418d      	sbcs	r5, r1
 8001ad4:	4332      	orrs	r2, r6
 8001ad6:	432a      	orrs	r2, r5
 8001ad8:	40c4      	lsrs	r4, r0
 8001ada:	0753      	lsls	r3, r2, #29
 8001adc:	d0b6      	beq.n	8001a4c <__aeabi_dmul+0x414>
 8001ade:	210f      	movs	r1, #15
 8001ae0:	4011      	ands	r1, r2
 8001ae2:	2904      	cmp	r1, #4
 8001ae4:	d1ac      	bne.n	8001a40 <__aeabi_dmul+0x408>
 8001ae6:	e7b1      	b.n	8001a4c <__aeabi_dmul+0x414>
 8001ae8:	0765      	lsls	r5, r4, #29
 8001aea:	0264      	lsls	r4, r4, #9
 8001aec:	0b24      	lsrs	r4, r4, #12
 8001aee:	08d2      	lsrs	r2, r2, #3
 8001af0:	4315      	orrs	r5, r2
 8001af2:	2200      	movs	r2, #0
 8001af4:	e601      	b.n	80016fa <__aeabi_dmul+0xc2>
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0312      	lsls	r2, r2, #12
 8001afa:	4314      	orrs	r4, r2
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	4a01      	ldr	r2, [pc, #4]	; (8001b04 <__aeabi_dmul+0x4cc>)
 8001b00:	0b24      	lsrs	r4, r4, #12
 8001b02:	e5fa      	b.n	80016fa <__aeabi_dmul+0xc2>
 8001b04:	000007ff 	.word	0x000007ff
 8001b08:	0000043e 	.word	0x0000043e
 8001b0c:	0000041e 	.word	0x0000041e

08001b10 <__aeabi_dsub>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	4657      	mov	r7, sl
 8001b14:	464e      	mov	r6, r9
 8001b16:	4645      	mov	r5, r8
 8001b18:	46de      	mov	lr, fp
 8001b1a:	b5e0      	push	{r5, r6, r7, lr}
 8001b1c:	001e      	movs	r6, r3
 8001b1e:	0017      	movs	r7, r2
 8001b20:	004a      	lsls	r2, r1, #1
 8001b22:	030b      	lsls	r3, r1, #12
 8001b24:	0d52      	lsrs	r2, r2, #21
 8001b26:	0a5b      	lsrs	r3, r3, #9
 8001b28:	4690      	mov	r8, r2
 8001b2a:	0f42      	lsrs	r2, r0, #29
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	0fcd      	lsrs	r5, r1, #31
 8001b30:	4ccd      	ldr	r4, [pc, #820]	; (8001e68 <__aeabi_dsub+0x358>)
 8001b32:	0331      	lsls	r1, r6, #12
 8001b34:	00c3      	lsls	r3, r0, #3
 8001b36:	4694      	mov	ip, r2
 8001b38:	0070      	lsls	r0, r6, #1
 8001b3a:	0f7a      	lsrs	r2, r7, #29
 8001b3c:	0a49      	lsrs	r1, r1, #9
 8001b3e:	00ff      	lsls	r7, r7, #3
 8001b40:	469a      	mov	sl, r3
 8001b42:	46b9      	mov	r9, r7
 8001b44:	0d40      	lsrs	r0, r0, #21
 8001b46:	0ff6      	lsrs	r6, r6, #31
 8001b48:	4311      	orrs	r1, r2
 8001b4a:	42a0      	cmp	r0, r4
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dsub+0x40>
 8001b4e:	e0b1      	b.n	8001cb4 <__aeabi_dsub+0x1a4>
 8001b50:	2201      	movs	r2, #1
 8001b52:	4056      	eors	r6, r2
 8001b54:	46b3      	mov	fp, r6
 8001b56:	42b5      	cmp	r5, r6
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x4c>
 8001b5a:	e088      	b.n	8001c6e <__aeabi_dsub+0x15e>
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	1a12      	subs	r2, r2, r0
 8001b60:	2a00      	cmp	r2, #0
 8001b62:	dc00      	bgt.n	8001b66 <__aeabi_dsub+0x56>
 8001b64:	e0ae      	b.n	8001cc4 <__aeabi_dsub+0x1b4>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x5c>
 8001b6a:	e0c1      	b.n	8001cf0 <__aeabi_dsub+0x1e0>
 8001b6c:	48be      	ldr	r0, [pc, #760]	; (8001e68 <__aeabi_dsub+0x358>)
 8001b6e:	4580      	cmp	r8, r0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x64>
 8001b72:	e151      	b.n	8001e18 <__aeabi_dsub+0x308>
 8001b74:	2080      	movs	r0, #128	; 0x80
 8001b76:	0400      	lsls	r0, r0, #16
 8001b78:	4301      	orrs	r1, r0
 8001b7a:	2a38      	cmp	r2, #56	; 0x38
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dsub+0x70>
 8001b7e:	e17b      	b.n	8001e78 <__aeabi_dsub+0x368>
 8001b80:	2a1f      	cmp	r2, #31
 8001b82:	dd00      	ble.n	8001b86 <__aeabi_dsub+0x76>
 8001b84:	e1ee      	b.n	8001f64 <__aeabi_dsub+0x454>
 8001b86:	2020      	movs	r0, #32
 8001b88:	003e      	movs	r6, r7
 8001b8a:	1a80      	subs	r0, r0, r2
 8001b8c:	000c      	movs	r4, r1
 8001b8e:	40d6      	lsrs	r6, r2
 8001b90:	40d1      	lsrs	r1, r2
 8001b92:	4087      	lsls	r7, r0
 8001b94:	4662      	mov	r2, ip
 8001b96:	4084      	lsls	r4, r0
 8001b98:	1a52      	subs	r2, r2, r1
 8001b9a:	1e78      	subs	r0, r7, #1
 8001b9c:	4187      	sbcs	r7, r0
 8001b9e:	4694      	mov	ip, r2
 8001ba0:	4334      	orrs	r4, r6
 8001ba2:	4327      	orrs	r7, r4
 8001ba4:	1bdc      	subs	r4, r3, r7
 8001ba6:	42a3      	cmp	r3, r4
 8001ba8:	419b      	sbcs	r3, r3
 8001baa:	4662      	mov	r2, ip
 8001bac:	425b      	negs	r3, r3
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	464b      	mov	r3, r9
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	d400      	bmi.n	8001bba <__aeabi_dsub+0xaa>
 8001bb8:	e118      	b.n	8001dec <__aeabi_dsub+0x2dc>
 8001bba:	464b      	mov	r3, r9
 8001bbc:	0258      	lsls	r0, r3, #9
 8001bbe:	0a43      	lsrs	r3, r0, #9
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	464b      	mov	r3, r9
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0xba>
 8001bc8:	e137      	b.n	8001e3a <__aeabi_dsub+0x32a>
 8001bca:	4648      	mov	r0, r9
 8001bcc:	f000 fc64 	bl	8002498 <__clzsi2>
 8001bd0:	0001      	movs	r1, r0
 8001bd2:	3908      	subs	r1, #8
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	0022      	movs	r2, r4
 8001bd8:	4648      	mov	r0, r9
 8001bda:	1a5b      	subs	r3, r3, r1
 8001bdc:	40da      	lsrs	r2, r3
 8001bde:	4088      	lsls	r0, r1
 8001be0:	408c      	lsls	r4, r1
 8001be2:	4643      	mov	r3, r8
 8001be4:	4310      	orrs	r0, r2
 8001be6:	4588      	cmp	r8, r1
 8001be8:	dd00      	ble.n	8001bec <__aeabi_dsub+0xdc>
 8001bea:	e136      	b.n	8001e5a <__aeabi_dsub+0x34a>
 8001bec:	1ac9      	subs	r1, r1, r3
 8001bee:	1c4b      	adds	r3, r1, #1
 8001bf0:	2b1f      	cmp	r3, #31
 8001bf2:	dd00      	ble.n	8001bf6 <__aeabi_dsub+0xe6>
 8001bf4:	e0ea      	b.n	8001dcc <__aeabi_dsub+0x2bc>
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	0026      	movs	r6, r4
 8001bfa:	1ad2      	subs	r2, r2, r3
 8001bfc:	0001      	movs	r1, r0
 8001bfe:	4094      	lsls	r4, r2
 8001c00:	40de      	lsrs	r6, r3
 8001c02:	40d8      	lsrs	r0, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	4091      	lsls	r1, r2
 8001c08:	1e62      	subs	r2, r4, #1
 8001c0a:	4194      	sbcs	r4, r2
 8001c0c:	4681      	mov	r9, r0
 8001c0e:	4698      	mov	r8, r3
 8001c10:	4331      	orrs	r1, r6
 8001c12:	430c      	orrs	r4, r1
 8001c14:	0763      	lsls	r3, r4, #29
 8001c16:	d009      	beq.n	8001c2c <__aeabi_dsub+0x11c>
 8001c18:	230f      	movs	r3, #15
 8001c1a:	4023      	ands	r3, r4
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d005      	beq.n	8001c2c <__aeabi_dsub+0x11c>
 8001c20:	1d23      	adds	r3, r4, #4
 8001c22:	42a3      	cmp	r3, r4
 8001c24:	41a4      	sbcs	r4, r4
 8001c26:	4264      	negs	r4, r4
 8001c28:	44a1      	add	r9, r4
 8001c2a:	001c      	movs	r4, r3
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	d400      	bmi.n	8001c34 <__aeabi_dsub+0x124>
 8001c32:	e0de      	b.n	8001df2 <__aeabi_dsub+0x2e2>
 8001c34:	4641      	mov	r1, r8
 8001c36:	4b8c      	ldr	r3, [pc, #560]	; (8001e68 <__aeabi_dsub+0x358>)
 8001c38:	3101      	adds	r1, #1
 8001c3a:	4299      	cmp	r1, r3
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x130>
 8001c3e:	e0e7      	b.n	8001e10 <__aeabi_dsub+0x300>
 8001c40:	464b      	mov	r3, r9
 8001c42:	488a      	ldr	r0, [pc, #552]	; (8001e6c <__aeabi_dsub+0x35c>)
 8001c44:	08e4      	lsrs	r4, r4, #3
 8001c46:	4003      	ands	r3, r0
 8001c48:	0018      	movs	r0, r3
 8001c4a:	0549      	lsls	r1, r1, #21
 8001c4c:	075b      	lsls	r3, r3, #29
 8001c4e:	0240      	lsls	r0, r0, #9
 8001c50:	4323      	orrs	r3, r4
 8001c52:	0d4a      	lsrs	r2, r1, #21
 8001c54:	0b04      	lsrs	r4, r0, #12
 8001c56:	0512      	lsls	r2, r2, #20
 8001c58:	07ed      	lsls	r5, r5, #31
 8001c5a:	4322      	orrs	r2, r4
 8001c5c:	432a      	orrs	r2, r5
 8001c5e:	0018      	movs	r0, r3
 8001c60:	0011      	movs	r1, r2
 8001c62:	bcf0      	pop	{r4, r5, r6, r7}
 8001c64:	46bb      	mov	fp, r7
 8001c66:	46b2      	mov	sl, r6
 8001c68:	46a9      	mov	r9, r5
 8001c6a:	46a0      	mov	r8, r4
 8001c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c6e:	4642      	mov	r2, r8
 8001c70:	1a12      	subs	r2, r2, r0
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	dd52      	ble.n	8001d1c <__aeabi_dsub+0x20c>
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x16c>
 8001c7a:	e09c      	b.n	8001db6 <__aeabi_dsub+0x2a6>
 8001c7c:	45a0      	cmp	r8, r4
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x172>
 8001c80:	e0ca      	b.n	8001e18 <__aeabi_dsub+0x308>
 8001c82:	2080      	movs	r0, #128	; 0x80
 8001c84:	0400      	lsls	r0, r0, #16
 8001c86:	4301      	orrs	r1, r0
 8001c88:	2a38      	cmp	r2, #56	; 0x38
 8001c8a:	dd00      	ble.n	8001c8e <__aeabi_dsub+0x17e>
 8001c8c:	e149      	b.n	8001f22 <__aeabi_dsub+0x412>
 8001c8e:	2a1f      	cmp	r2, #31
 8001c90:	dc00      	bgt.n	8001c94 <__aeabi_dsub+0x184>
 8001c92:	e197      	b.n	8001fc4 <__aeabi_dsub+0x4b4>
 8001c94:	0010      	movs	r0, r2
 8001c96:	000e      	movs	r6, r1
 8001c98:	3820      	subs	r0, #32
 8001c9a:	40c6      	lsrs	r6, r0
 8001c9c:	2a20      	cmp	r2, #32
 8001c9e:	d004      	beq.n	8001caa <__aeabi_dsub+0x19a>
 8001ca0:	2040      	movs	r0, #64	; 0x40
 8001ca2:	1a82      	subs	r2, r0, r2
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	430f      	orrs	r7, r1
 8001ca8:	46b9      	mov	r9, r7
 8001caa:	464c      	mov	r4, r9
 8001cac:	1e62      	subs	r2, r4, #1
 8001cae:	4194      	sbcs	r4, r2
 8001cb0:	4334      	orrs	r4, r6
 8001cb2:	e13a      	b.n	8001f2a <__aeabi_dsub+0x41a>
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	433a      	orrs	r2, r7
 8001cb8:	d028      	beq.n	8001d0c <__aeabi_dsub+0x1fc>
 8001cba:	46b3      	mov	fp, r6
 8001cbc:	42b5      	cmp	r5, r6
 8001cbe:	d02b      	beq.n	8001d18 <__aeabi_dsub+0x208>
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	; (8001e70 <__aeabi_dsub+0x360>)
 8001cc2:	4442      	add	r2, r8
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d05d      	beq.n	8001d84 <__aeabi_dsub+0x274>
 8001cc8:	4642      	mov	r2, r8
 8001cca:	4644      	mov	r4, r8
 8001ccc:	1a82      	subs	r2, r0, r2
 8001cce:	2c00      	cmp	r4, #0
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x1c4>
 8001cd2:	e0f5      	b.n	8001ec0 <__aeabi_dsub+0x3b0>
 8001cd4:	4665      	mov	r5, ip
 8001cd6:	431d      	orrs	r5, r3
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x1cc>
 8001cda:	e19c      	b.n	8002016 <__aeabi_dsub+0x506>
 8001cdc:	1e55      	subs	r5, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x1d4>
 8001ce2:	e1fb      	b.n	80020dc <__aeabi_dsub+0x5cc>
 8001ce4:	4c60      	ldr	r4, [pc, #384]	; (8001e68 <__aeabi_dsub+0x358>)
 8001ce6:	42a2      	cmp	r2, r4
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x1dc>
 8001cea:	e1bd      	b.n	8002068 <__aeabi_dsub+0x558>
 8001cec:	002a      	movs	r2, r5
 8001cee:	e0f0      	b.n	8001ed2 <__aeabi_dsub+0x3c2>
 8001cf0:	0008      	movs	r0, r1
 8001cf2:	4338      	orrs	r0, r7
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x1e8>
 8001cf6:	e0c3      	b.n	8001e80 <__aeabi_dsub+0x370>
 8001cf8:	1e50      	subs	r0, r2, #1
 8001cfa:	2a01      	cmp	r2, #1
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x1f0>
 8001cfe:	e1a8      	b.n	8002052 <__aeabi_dsub+0x542>
 8001d00:	4c59      	ldr	r4, [pc, #356]	; (8001e68 <__aeabi_dsub+0x358>)
 8001d02:	42a2      	cmp	r2, r4
 8001d04:	d100      	bne.n	8001d08 <__aeabi_dsub+0x1f8>
 8001d06:	e087      	b.n	8001e18 <__aeabi_dsub+0x308>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	e736      	b.n	8001b7a <__aeabi_dsub+0x6a>
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4056      	eors	r6, r2
 8001d10:	46b3      	mov	fp, r6
 8001d12:	42b5      	cmp	r5, r6
 8001d14:	d000      	beq.n	8001d18 <__aeabi_dsub+0x208>
 8001d16:	e721      	b.n	8001b5c <__aeabi_dsub+0x4c>
 8001d18:	4a55      	ldr	r2, [pc, #340]	; (8001e70 <__aeabi_dsub+0x360>)
 8001d1a:	4442      	add	r2, r8
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x212>
 8001d20:	e0b5      	b.n	8001e8e <__aeabi_dsub+0x37e>
 8001d22:	4642      	mov	r2, r8
 8001d24:	4644      	mov	r4, r8
 8001d26:	1a82      	subs	r2, r0, r2
 8001d28:	2c00      	cmp	r4, #0
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x21e>
 8001d2c:	e138      	b.n	8001fa0 <__aeabi_dsub+0x490>
 8001d2e:	4e4e      	ldr	r6, [pc, #312]	; (8001e68 <__aeabi_dsub+0x358>)
 8001d30:	42b0      	cmp	r0, r6
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dsub+0x226>
 8001d34:	e1de      	b.n	80020f4 <__aeabi_dsub+0x5e4>
 8001d36:	2680      	movs	r6, #128	; 0x80
 8001d38:	4664      	mov	r4, ip
 8001d3a:	0436      	lsls	r6, r6, #16
 8001d3c:	4334      	orrs	r4, r6
 8001d3e:	46a4      	mov	ip, r4
 8001d40:	2a38      	cmp	r2, #56	; 0x38
 8001d42:	dd00      	ble.n	8001d46 <__aeabi_dsub+0x236>
 8001d44:	e196      	b.n	8002074 <__aeabi_dsub+0x564>
 8001d46:	2a1f      	cmp	r2, #31
 8001d48:	dd00      	ble.n	8001d4c <__aeabi_dsub+0x23c>
 8001d4a:	e224      	b.n	8002196 <__aeabi_dsub+0x686>
 8001d4c:	2620      	movs	r6, #32
 8001d4e:	1ab4      	subs	r4, r6, r2
 8001d50:	46a2      	mov	sl, r4
 8001d52:	4664      	mov	r4, ip
 8001d54:	4656      	mov	r6, sl
 8001d56:	40b4      	lsls	r4, r6
 8001d58:	46a1      	mov	r9, r4
 8001d5a:	001c      	movs	r4, r3
 8001d5c:	464e      	mov	r6, r9
 8001d5e:	40d4      	lsrs	r4, r2
 8001d60:	4326      	orrs	r6, r4
 8001d62:	0034      	movs	r4, r6
 8001d64:	4656      	mov	r6, sl
 8001d66:	40b3      	lsls	r3, r6
 8001d68:	1e5e      	subs	r6, r3, #1
 8001d6a:	41b3      	sbcs	r3, r6
 8001d6c:	431c      	orrs	r4, r3
 8001d6e:	4663      	mov	r3, ip
 8001d70:	40d3      	lsrs	r3, r2
 8001d72:	18c9      	adds	r1, r1, r3
 8001d74:	19e4      	adds	r4, r4, r7
 8001d76:	42bc      	cmp	r4, r7
 8001d78:	41bf      	sbcs	r7, r7
 8001d7a:	427f      	negs	r7, r7
 8001d7c:	46b9      	mov	r9, r7
 8001d7e:	4680      	mov	r8, r0
 8001d80:	4489      	add	r9, r1
 8001d82:	e0d8      	b.n	8001f36 <__aeabi_dsub+0x426>
 8001d84:	4640      	mov	r0, r8
 8001d86:	4c3b      	ldr	r4, [pc, #236]	; (8001e74 <__aeabi_dsub+0x364>)
 8001d88:	3001      	adds	r0, #1
 8001d8a:	4220      	tst	r0, r4
 8001d8c:	d000      	beq.n	8001d90 <__aeabi_dsub+0x280>
 8001d8e:	e0b4      	b.n	8001efa <__aeabi_dsub+0x3ea>
 8001d90:	4640      	mov	r0, r8
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x288>
 8001d96:	e144      	b.n	8002022 <__aeabi_dsub+0x512>
 8001d98:	4660      	mov	r0, ip
 8001d9a:	4318      	orrs	r0, r3
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x290>
 8001d9e:	e190      	b.n	80020c2 <__aeabi_dsub+0x5b2>
 8001da0:	0008      	movs	r0, r1
 8001da2:	4338      	orrs	r0, r7
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x298>
 8001da6:	e1aa      	b.n	80020fe <__aeabi_dsub+0x5ee>
 8001da8:	4661      	mov	r1, ip
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	0749      	lsls	r1, r1, #29
 8001dae:	430b      	orrs	r3, r1
 8001db0:	4661      	mov	r1, ip
 8001db2:	08cc      	lsrs	r4, r1, #3
 8001db4:	e027      	b.n	8001e06 <__aeabi_dsub+0x2f6>
 8001db6:	0008      	movs	r0, r1
 8001db8:	4338      	orrs	r0, r7
 8001dba:	d061      	beq.n	8001e80 <__aeabi_dsub+0x370>
 8001dbc:	1e50      	subs	r0, r2, #1
 8001dbe:	2a01      	cmp	r2, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x2b4>
 8001dc2:	e139      	b.n	8002038 <__aeabi_dsub+0x528>
 8001dc4:	42a2      	cmp	r2, r4
 8001dc6:	d027      	beq.n	8001e18 <__aeabi_dsub+0x308>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	e75d      	b.n	8001c88 <__aeabi_dsub+0x178>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	391f      	subs	r1, #31
 8001dd0:	40ca      	lsrs	r2, r1
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d003      	beq.n	8001de0 <__aeabi_dsub+0x2d0>
 8001dd8:	2240      	movs	r2, #64	; 0x40
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4098      	lsls	r0, r3
 8001dde:	4304      	orrs	r4, r0
 8001de0:	1e63      	subs	r3, r4, #1
 8001de2:	419c      	sbcs	r4, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	4698      	mov	r8, r3
 8001dea:	430c      	orrs	r4, r1
 8001dec:	0763      	lsls	r3, r4, #29
 8001dee:	d000      	beq.n	8001df2 <__aeabi_dsub+0x2e2>
 8001df0:	e712      	b.n	8001c18 <__aeabi_dsub+0x108>
 8001df2:	464b      	mov	r3, r9
 8001df4:	464a      	mov	r2, r9
 8001df6:	08e4      	lsrs	r4, r4, #3
 8001df8:	075b      	lsls	r3, r3, #29
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	08d4      	lsrs	r4, r2, #3
 8001dfe:	4642      	mov	r2, r8
 8001e00:	4919      	ldr	r1, [pc, #100]	; (8001e68 <__aeabi_dsub+0x358>)
 8001e02:	428a      	cmp	r2, r1
 8001e04:	d00e      	beq.n	8001e24 <__aeabi_dsub+0x314>
 8001e06:	0324      	lsls	r4, r4, #12
 8001e08:	0552      	lsls	r2, r2, #21
 8001e0a:	0b24      	lsrs	r4, r4, #12
 8001e0c:	0d52      	lsrs	r2, r2, #21
 8001e0e:	e722      	b.n	8001c56 <__aeabi_dsub+0x146>
 8001e10:	000a      	movs	r2, r1
 8001e12:	2400      	movs	r4, #0
 8001e14:	2300      	movs	r3, #0
 8001e16:	e71e      	b.n	8001c56 <__aeabi_dsub+0x146>
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	4662      	mov	r2, ip
 8001e1c:	0752      	lsls	r2, r2, #29
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	4662      	mov	r2, ip
 8001e22:	08d4      	lsrs	r4, r2, #3
 8001e24:	001a      	movs	r2, r3
 8001e26:	4322      	orrs	r2, r4
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x31c>
 8001e2a:	e1fc      	b.n	8002226 <__aeabi_dsub+0x716>
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	0312      	lsls	r2, r2, #12
 8001e30:	4314      	orrs	r4, r2
 8001e32:	0324      	lsls	r4, r4, #12
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <__aeabi_dsub+0x358>)
 8001e36:	0b24      	lsrs	r4, r4, #12
 8001e38:	e70d      	b.n	8001c56 <__aeabi_dsub+0x146>
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	f000 fb2c 	bl	8002498 <__clzsi2>
 8001e40:	0001      	movs	r1, r0
 8001e42:	3118      	adds	r1, #24
 8001e44:	291f      	cmp	r1, #31
 8001e46:	dc00      	bgt.n	8001e4a <__aeabi_dsub+0x33a>
 8001e48:	e6c4      	b.n	8001bd4 <__aeabi_dsub+0xc4>
 8001e4a:	3808      	subs	r0, #8
 8001e4c:	4084      	lsls	r4, r0
 8001e4e:	4643      	mov	r3, r8
 8001e50:	0020      	movs	r0, r4
 8001e52:	2400      	movs	r4, #0
 8001e54:	4588      	cmp	r8, r1
 8001e56:	dc00      	bgt.n	8001e5a <__aeabi_dsub+0x34a>
 8001e58:	e6c8      	b.n	8001bec <__aeabi_dsub+0xdc>
 8001e5a:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <__aeabi_dsub+0x35c>)
 8001e5c:	1a5b      	subs	r3, r3, r1
 8001e5e:	4010      	ands	r0, r2
 8001e60:	4698      	mov	r8, r3
 8001e62:	4681      	mov	r9, r0
 8001e64:	e6d6      	b.n	8001c14 <__aeabi_dsub+0x104>
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	000007ff 	.word	0x000007ff
 8001e6c:	ff7fffff 	.word	0xff7fffff
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	000007fe 	.word	0x000007fe
 8001e78:	430f      	orrs	r7, r1
 8001e7a:	1e7a      	subs	r2, r7, #1
 8001e7c:	4197      	sbcs	r7, r2
 8001e7e:	e691      	b.n	8001ba4 <__aeabi_dsub+0x94>
 8001e80:	4661      	mov	r1, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0749      	lsls	r1, r1, #29
 8001e86:	430b      	orrs	r3, r1
 8001e88:	4661      	mov	r1, ip
 8001e8a:	08cc      	lsrs	r4, r1, #3
 8001e8c:	e7b8      	b.n	8001e00 <__aeabi_dsub+0x2f0>
 8001e8e:	4640      	mov	r0, r8
 8001e90:	4cd3      	ldr	r4, [pc, #844]	; (80021e0 <__aeabi_dsub+0x6d0>)
 8001e92:	3001      	adds	r0, #1
 8001e94:	4220      	tst	r0, r4
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x38a>
 8001e98:	e0a2      	b.n	8001fe0 <__aeabi_dsub+0x4d0>
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x392>
 8001ea0:	e101      	b.n	80020a6 <__aeabi_dsub+0x596>
 8001ea2:	4660      	mov	r0, ip
 8001ea4:	4318      	orrs	r0, r3
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x39a>
 8001ea8:	e15e      	b.n	8002168 <__aeabi_dsub+0x658>
 8001eaa:	0008      	movs	r0, r1
 8001eac:	4338      	orrs	r0, r7
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_dsub+0x3a2>
 8001eb0:	e15f      	b.n	8002172 <__aeabi_dsub+0x662>
 8001eb2:	4661      	mov	r1, ip
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	0749      	lsls	r1, r1, #29
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	4661      	mov	r1, ip
 8001ebc:	08cc      	lsrs	r4, r1, #3
 8001ebe:	e7a2      	b.n	8001e06 <__aeabi_dsub+0x2f6>
 8001ec0:	4dc8      	ldr	r5, [pc, #800]	; (80021e4 <__aeabi_dsub+0x6d4>)
 8001ec2:	42a8      	cmp	r0, r5
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x3b8>
 8001ec6:	e0cf      	b.n	8002068 <__aeabi_dsub+0x558>
 8001ec8:	2580      	movs	r5, #128	; 0x80
 8001eca:	4664      	mov	r4, ip
 8001ecc:	042d      	lsls	r5, r5, #16
 8001ece:	432c      	orrs	r4, r5
 8001ed0:	46a4      	mov	ip, r4
 8001ed2:	2a38      	cmp	r2, #56	; 0x38
 8001ed4:	dc56      	bgt.n	8001f84 <__aeabi_dsub+0x474>
 8001ed6:	2a1f      	cmp	r2, #31
 8001ed8:	dd00      	ble.n	8001edc <__aeabi_dsub+0x3cc>
 8001eda:	e0d1      	b.n	8002080 <__aeabi_dsub+0x570>
 8001edc:	2520      	movs	r5, #32
 8001ede:	001e      	movs	r6, r3
 8001ee0:	1aad      	subs	r5, r5, r2
 8001ee2:	4664      	mov	r4, ip
 8001ee4:	40ab      	lsls	r3, r5
 8001ee6:	40ac      	lsls	r4, r5
 8001ee8:	40d6      	lsrs	r6, r2
 8001eea:	1e5d      	subs	r5, r3, #1
 8001eec:	41ab      	sbcs	r3, r5
 8001eee:	4334      	orrs	r4, r6
 8001ef0:	4323      	orrs	r3, r4
 8001ef2:	4664      	mov	r4, ip
 8001ef4:	40d4      	lsrs	r4, r2
 8001ef6:	1b09      	subs	r1, r1, r4
 8001ef8:	e049      	b.n	8001f8e <__aeabi_dsub+0x47e>
 8001efa:	4660      	mov	r0, ip
 8001efc:	1bdc      	subs	r4, r3, r7
 8001efe:	1a46      	subs	r6, r0, r1
 8001f00:	42a3      	cmp	r3, r4
 8001f02:	4180      	sbcs	r0, r0
 8001f04:	4240      	negs	r0, r0
 8001f06:	4681      	mov	r9, r0
 8001f08:	0030      	movs	r0, r6
 8001f0a:	464e      	mov	r6, r9
 8001f0c:	1b80      	subs	r0, r0, r6
 8001f0e:	4681      	mov	r9, r0
 8001f10:	0200      	lsls	r0, r0, #8
 8001f12:	d476      	bmi.n	8002002 <__aeabi_dsub+0x4f2>
 8001f14:	464b      	mov	r3, r9
 8001f16:	4323      	orrs	r3, r4
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dsub+0x40c>
 8001f1a:	e652      	b.n	8001bc2 <__aeabi_dsub+0xb2>
 8001f1c:	2400      	movs	r4, #0
 8001f1e:	2500      	movs	r5, #0
 8001f20:	e771      	b.n	8001e06 <__aeabi_dsub+0x2f6>
 8001f22:	4339      	orrs	r1, r7
 8001f24:	000c      	movs	r4, r1
 8001f26:	1e62      	subs	r2, r4, #1
 8001f28:	4194      	sbcs	r4, r2
 8001f2a:	18e4      	adds	r4, r4, r3
 8001f2c:	429c      	cmp	r4, r3
 8001f2e:	419b      	sbcs	r3, r3
 8001f30:	425b      	negs	r3, r3
 8001f32:	4463      	add	r3, ip
 8001f34:	4699      	mov	r9, r3
 8001f36:	464b      	mov	r3, r9
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	d400      	bmi.n	8001f3e <__aeabi_dsub+0x42e>
 8001f3c:	e756      	b.n	8001dec <__aeabi_dsub+0x2dc>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	469c      	mov	ip, r3
 8001f42:	4ba8      	ldr	r3, [pc, #672]	; (80021e4 <__aeabi_dsub+0x6d4>)
 8001f44:	44e0      	add	r8, ip
 8001f46:	4598      	cmp	r8, r3
 8001f48:	d038      	beq.n	8001fbc <__aeabi_dsub+0x4ac>
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	48a6      	ldr	r0, [pc, #664]	; (80021e8 <__aeabi_dsub+0x6d8>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4003      	ands	r3, r0
 8001f52:	0018      	movs	r0, r3
 8001f54:	0863      	lsrs	r3, r4, #1
 8001f56:	4014      	ands	r4, r2
 8001f58:	431c      	orrs	r4, r3
 8001f5a:	07c3      	lsls	r3, r0, #31
 8001f5c:	431c      	orrs	r4, r3
 8001f5e:	0843      	lsrs	r3, r0, #1
 8001f60:	4699      	mov	r9, r3
 8001f62:	e657      	b.n	8001c14 <__aeabi_dsub+0x104>
 8001f64:	0010      	movs	r0, r2
 8001f66:	000e      	movs	r6, r1
 8001f68:	3820      	subs	r0, #32
 8001f6a:	40c6      	lsrs	r6, r0
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d004      	beq.n	8001f7a <__aeabi_dsub+0x46a>
 8001f70:	2040      	movs	r0, #64	; 0x40
 8001f72:	1a82      	subs	r2, r0, r2
 8001f74:	4091      	lsls	r1, r2
 8001f76:	430f      	orrs	r7, r1
 8001f78:	46b9      	mov	r9, r7
 8001f7a:	464f      	mov	r7, r9
 8001f7c:	1e7a      	subs	r2, r7, #1
 8001f7e:	4197      	sbcs	r7, r2
 8001f80:	4337      	orrs	r7, r6
 8001f82:	e60f      	b.n	8001ba4 <__aeabi_dsub+0x94>
 8001f84:	4662      	mov	r2, ip
 8001f86:	431a      	orrs	r2, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	4193      	sbcs	r3, r2
 8001f8e:	1afc      	subs	r4, r7, r3
 8001f90:	42a7      	cmp	r7, r4
 8001f92:	41bf      	sbcs	r7, r7
 8001f94:	427f      	negs	r7, r7
 8001f96:	1bcb      	subs	r3, r1, r7
 8001f98:	4699      	mov	r9, r3
 8001f9a:	465d      	mov	r5, fp
 8001f9c:	4680      	mov	r8, r0
 8001f9e:	e608      	b.n	8001bb2 <__aeabi_dsub+0xa2>
 8001fa0:	4666      	mov	r6, ip
 8001fa2:	431e      	orrs	r6, r3
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x498>
 8001fa6:	e0be      	b.n	8002126 <__aeabi_dsub+0x616>
 8001fa8:	1e56      	subs	r6, r2, #1
 8001faa:	2a01      	cmp	r2, #1
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x4a0>
 8001fae:	e109      	b.n	80021c4 <__aeabi_dsub+0x6b4>
 8001fb0:	4c8c      	ldr	r4, [pc, #560]	; (80021e4 <__aeabi_dsub+0x6d4>)
 8001fb2:	42a2      	cmp	r2, r4
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x4a8>
 8001fb6:	e119      	b.n	80021ec <__aeabi_dsub+0x6dc>
 8001fb8:	0032      	movs	r2, r6
 8001fba:	e6c1      	b.n	8001d40 <__aeabi_dsub+0x230>
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	2400      	movs	r4, #0
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e648      	b.n	8001c56 <__aeabi_dsub+0x146>
 8001fc4:	2020      	movs	r0, #32
 8001fc6:	000c      	movs	r4, r1
 8001fc8:	1a80      	subs	r0, r0, r2
 8001fca:	003e      	movs	r6, r7
 8001fcc:	4087      	lsls	r7, r0
 8001fce:	4084      	lsls	r4, r0
 8001fd0:	40d6      	lsrs	r6, r2
 8001fd2:	1e78      	subs	r0, r7, #1
 8001fd4:	4187      	sbcs	r7, r0
 8001fd6:	40d1      	lsrs	r1, r2
 8001fd8:	4334      	orrs	r4, r6
 8001fda:	433c      	orrs	r4, r7
 8001fdc:	448c      	add	ip, r1
 8001fde:	e7a4      	b.n	8001f2a <__aeabi_dsub+0x41a>
 8001fe0:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <__aeabi_dsub+0x6d4>)
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x4d8>
 8001fe6:	e0e9      	b.n	80021bc <__aeabi_dsub+0x6ac>
 8001fe8:	19df      	adds	r7, r3, r7
 8001fea:	429f      	cmp	r7, r3
 8001fec:	419b      	sbcs	r3, r3
 8001fee:	4461      	add	r1, ip
 8001ff0:	425b      	negs	r3, r3
 8001ff2:	18c9      	adds	r1, r1, r3
 8001ff4:	07cc      	lsls	r4, r1, #31
 8001ff6:	087f      	lsrs	r7, r7, #1
 8001ff8:	084b      	lsrs	r3, r1, #1
 8001ffa:	4699      	mov	r9, r3
 8001ffc:	4680      	mov	r8, r0
 8001ffe:	433c      	orrs	r4, r7
 8002000:	e6f4      	b.n	8001dec <__aeabi_dsub+0x2dc>
 8002002:	1afc      	subs	r4, r7, r3
 8002004:	42a7      	cmp	r7, r4
 8002006:	41bf      	sbcs	r7, r7
 8002008:	4663      	mov	r3, ip
 800200a:	427f      	negs	r7, r7
 800200c:	1ac9      	subs	r1, r1, r3
 800200e:	1bcb      	subs	r3, r1, r7
 8002010:	4699      	mov	r9, r3
 8002012:	465d      	mov	r5, fp
 8002014:	e5d5      	b.n	8001bc2 <__aeabi_dsub+0xb2>
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	074b      	lsls	r3, r1, #29
 800201a:	465d      	mov	r5, fp
 800201c:	433b      	orrs	r3, r7
 800201e:	08cc      	lsrs	r4, r1, #3
 8002020:	e6ee      	b.n	8001e00 <__aeabi_dsub+0x2f0>
 8002022:	4662      	mov	r2, ip
 8002024:	431a      	orrs	r2, r3
 8002026:	d000      	beq.n	800202a <__aeabi_dsub+0x51a>
 8002028:	e082      	b.n	8002130 <__aeabi_dsub+0x620>
 800202a:	000b      	movs	r3, r1
 800202c:	433b      	orrs	r3, r7
 800202e:	d11b      	bne.n	8002068 <__aeabi_dsub+0x558>
 8002030:	2480      	movs	r4, #128	; 0x80
 8002032:	2500      	movs	r5, #0
 8002034:	0324      	lsls	r4, r4, #12
 8002036:	e6f9      	b.n	8001e2c <__aeabi_dsub+0x31c>
 8002038:	19dc      	adds	r4, r3, r7
 800203a:	429c      	cmp	r4, r3
 800203c:	419b      	sbcs	r3, r3
 800203e:	4461      	add	r1, ip
 8002040:	4689      	mov	r9, r1
 8002042:	425b      	negs	r3, r3
 8002044:	4499      	add	r9, r3
 8002046:	464b      	mov	r3, r9
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	d444      	bmi.n	80020d6 <__aeabi_dsub+0x5c6>
 800204c:	2301      	movs	r3, #1
 800204e:	4698      	mov	r8, r3
 8002050:	e6cc      	b.n	8001dec <__aeabi_dsub+0x2dc>
 8002052:	1bdc      	subs	r4, r3, r7
 8002054:	4662      	mov	r2, ip
 8002056:	42a3      	cmp	r3, r4
 8002058:	419b      	sbcs	r3, r3
 800205a:	1a51      	subs	r1, r2, r1
 800205c:	425b      	negs	r3, r3
 800205e:	1acb      	subs	r3, r1, r3
 8002060:	4699      	mov	r9, r3
 8002062:	2301      	movs	r3, #1
 8002064:	4698      	mov	r8, r3
 8002066:	e5a4      	b.n	8001bb2 <__aeabi_dsub+0xa2>
 8002068:	08ff      	lsrs	r7, r7, #3
 800206a:	074b      	lsls	r3, r1, #29
 800206c:	465d      	mov	r5, fp
 800206e:	433b      	orrs	r3, r7
 8002070:	08cc      	lsrs	r4, r1, #3
 8002072:	e6d7      	b.n	8001e24 <__aeabi_dsub+0x314>
 8002074:	4662      	mov	r2, ip
 8002076:	431a      	orrs	r2, r3
 8002078:	0014      	movs	r4, r2
 800207a:	1e63      	subs	r3, r4, #1
 800207c:	419c      	sbcs	r4, r3
 800207e:	e679      	b.n	8001d74 <__aeabi_dsub+0x264>
 8002080:	0015      	movs	r5, r2
 8002082:	4664      	mov	r4, ip
 8002084:	3d20      	subs	r5, #32
 8002086:	40ec      	lsrs	r4, r5
 8002088:	46a0      	mov	r8, r4
 800208a:	2a20      	cmp	r2, #32
 800208c:	d005      	beq.n	800209a <__aeabi_dsub+0x58a>
 800208e:	2540      	movs	r5, #64	; 0x40
 8002090:	4664      	mov	r4, ip
 8002092:	1aaa      	subs	r2, r5, r2
 8002094:	4094      	lsls	r4, r2
 8002096:	4323      	orrs	r3, r4
 8002098:	469a      	mov	sl, r3
 800209a:	4654      	mov	r4, sl
 800209c:	1e63      	subs	r3, r4, #1
 800209e:	419c      	sbcs	r4, r3
 80020a0:	4643      	mov	r3, r8
 80020a2:	4323      	orrs	r3, r4
 80020a4:	e773      	b.n	8001f8e <__aeabi_dsub+0x47e>
 80020a6:	4662      	mov	r2, ip
 80020a8:	431a      	orrs	r2, r3
 80020aa:	d023      	beq.n	80020f4 <__aeabi_dsub+0x5e4>
 80020ac:	000a      	movs	r2, r1
 80020ae:	433a      	orrs	r2, r7
 80020b0:	d000      	beq.n	80020b4 <__aeabi_dsub+0x5a4>
 80020b2:	e0a0      	b.n	80021f6 <__aeabi_dsub+0x6e6>
 80020b4:	4662      	mov	r2, ip
 80020b6:	08db      	lsrs	r3, r3, #3
 80020b8:	0752      	lsls	r2, r2, #29
 80020ba:	4313      	orrs	r3, r2
 80020bc:	4662      	mov	r2, ip
 80020be:	08d4      	lsrs	r4, r2, #3
 80020c0:	e6b0      	b.n	8001e24 <__aeabi_dsub+0x314>
 80020c2:	000b      	movs	r3, r1
 80020c4:	433b      	orrs	r3, r7
 80020c6:	d100      	bne.n	80020ca <__aeabi_dsub+0x5ba>
 80020c8:	e728      	b.n	8001f1c <__aeabi_dsub+0x40c>
 80020ca:	08ff      	lsrs	r7, r7, #3
 80020cc:	074b      	lsls	r3, r1, #29
 80020ce:	465d      	mov	r5, fp
 80020d0:	433b      	orrs	r3, r7
 80020d2:	08cc      	lsrs	r4, r1, #3
 80020d4:	e697      	b.n	8001e06 <__aeabi_dsub+0x2f6>
 80020d6:	2302      	movs	r3, #2
 80020d8:	4698      	mov	r8, r3
 80020da:	e736      	b.n	8001f4a <__aeabi_dsub+0x43a>
 80020dc:	1afc      	subs	r4, r7, r3
 80020de:	42a7      	cmp	r7, r4
 80020e0:	41bf      	sbcs	r7, r7
 80020e2:	4663      	mov	r3, ip
 80020e4:	427f      	negs	r7, r7
 80020e6:	1ac9      	subs	r1, r1, r3
 80020e8:	1bcb      	subs	r3, r1, r7
 80020ea:	4699      	mov	r9, r3
 80020ec:	2301      	movs	r3, #1
 80020ee:	465d      	mov	r5, fp
 80020f0:	4698      	mov	r8, r3
 80020f2:	e55e      	b.n	8001bb2 <__aeabi_dsub+0xa2>
 80020f4:	074b      	lsls	r3, r1, #29
 80020f6:	08ff      	lsrs	r7, r7, #3
 80020f8:	433b      	orrs	r3, r7
 80020fa:	08cc      	lsrs	r4, r1, #3
 80020fc:	e692      	b.n	8001e24 <__aeabi_dsub+0x314>
 80020fe:	1bdc      	subs	r4, r3, r7
 8002100:	4660      	mov	r0, ip
 8002102:	42a3      	cmp	r3, r4
 8002104:	41b6      	sbcs	r6, r6
 8002106:	1a40      	subs	r0, r0, r1
 8002108:	4276      	negs	r6, r6
 800210a:	1b80      	subs	r0, r0, r6
 800210c:	4681      	mov	r9, r0
 800210e:	0200      	lsls	r0, r0, #8
 8002110:	d560      	bpl.n	80021d4 <__aeabi_dsub+0x6c4>
 8002112:	1afc      	subs	r4, r7, r3
 8002114:	42a7      	cmp	r7, r4
 8002116:	41bf      	sbcs	r7, r7
 8002118:	4663      	mov	r3, ip
 800211a:	427f      	negs	r7, r7
 800211c:	1ac9      	subs	r1, r1, r3
 800211e:	1bcb      	subs	r3, r1, r7
 8002120:	4699      	mov	r9, r3
 8002122:	465d      	mov	r5, fp
 8002124:	e576      	b.n	8001c14 <__aeabi_dsub+0x104>
 8002126:	08ff      	lsrs	r7, r7, #3
 8002128:	074b      	lsls	r3, r1, #29
 800212a:	433b      	orrs	r3, r7
 800212c:	08cc      	lsrs	r4, r1, #3
 800212e:	e667      	b.n	8001e00 <__aeabi_dsub+0x2f0>
 8002130:	000a      	movs	r2, r1
 8002132:	08db      	lsrs	r3, r3, #3
 8002134:	433a      	orrs	r2, r7
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x62a>
 8002138:	e66f      	b.n	8001e1a <__aeabi_dsub+0x30a>
 800213a:	4662      	mov	r2, ip
 800213c:	0752      	lsls	r2, r2, #29
 800213e:	4313      	orrs	r3, r2
 8002140:	4662      	mov	r2, ip
 8002142:	08d4      	lsrs	r4, r2, #3
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	4214      	tst	r4, r2
 800214a:	d007      	beq.n	800215c <__aeabi_dsub+0x64c>
 800214c:	08c8      	lsrs	r0, r1, #3
 800214e:	4210      	tst	r0, r2
 8002150:	d104      	bne.n	800215c <__aeabi_dsub+0x64c>
 8002152:	465d      	mov	r5, fp
 8002154:	0004      	movs	r4, r0
 8002156:	08fb      	lsrs	r3, r7, #3
 8002158:	0749      	lsls	r1, r1, #29
 800215a:	430b      	orrs	r3, r1
 800215c:	0f5a      	lsrs	r2, r3, #29
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	0752      	lsls	r2, r2, #29
 8002164:	4313      	orrs	r3, r2
 8002166:	e65d      	b.n	8001e24 <__aeabi_dsub+0x314>
 8002168:	074b      	lsls	r3, r1, #29
 800216a:	08ff      	lsrs	r7, r7, #3
 800216c:	433b      	orrs	r3, r7
 800216e:	08cc      	lsrs	r4, r1, #3
 8002170:	e649      	b.n	8001e06 <__aeabi_dsub+0x2f6>
 8002172:	19dc      	adds	r4, r3, r7
 8002174:	429c      	cmp	r4, r3
 8002176:	419b      	sbcs	r3, r3
 8002178:	4461      	add	r1, ip
 800217a:	4689      	mov	r9, r1
 800217c:	425b      	negs	r3, r3
 800217e:	4499      	add	r9, r3
 8002180:	464b      	mov	r3, r9
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	d400      	bmi.n	8002188 <__aeabi_dsub+0x678>
 8002186:	e631      	b.n	8001dec <__aeabi_dsub+0x2dc>
 8002188:	464a      	mov	r2, r9
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <__aeabi_dsub+0x6d8>)
 800218c:	401a      	ands	r2, r3
 800218e:	2301      	movs	r3, #1
 8002190:	4691      	mov	r9, r2
 8002192:	4698      	mov	r8, r3
 8002194:	e62a      	b.n	8001dec <__aeabi_dsub+0x2dc>
 8002196:	0016      	movs	r6, r2
 8002198:	4664      	mov	r4, ip
 800219a:	3e20      	subs	r6, #32
 800219c:	40f4      	lsrs	r4, r6
 800219e:	46a0      	mov	r8, r4
 80021a0:	2a20      	cmp	r2, #32
 80021a2:	d005      	beq.n	80021b0 <__aeabi_dsub+0x6a0>
 80021a4:	2640      	movs	r6, #64	; 0x40
 80021a6:	4664      	mov	r4, ip
 80021a8:	1ab2      	subs	r2, r6, r2
 80021aa:	4094      	lsls	r4, r2
 80021ac:	4323      	orrs	r3, r4
 80021ae:	469a      	mov	sl, r3
 80021b0:	4654      	mov	r4, sl
 80021b2:	1e63      	subs	r3, r4, #1
 80021b4:	419c      	sbcs	r4, r3
 80021b6:	4643      	mov	r3, r8
 80021b8:	431c      	orrs	r4, r3
 80021ba:	e5db      	b.n	8001d74 <__aeabi_dsub+0x264>
 80021bc:	0002      	movs	r2, r0
 80021be:	2400      	movs	r4, #0
 80021c0:	2300      	movs	r3, #0
 80021c2:	e548      	b.n	8001c56 <__aeabi_dsub+0x146>
 80021c4:	19dc      	adds	r4, r3, r7
 80021c6:	42bc      	cmp	r4, r7
 80021c8:	41bf      	sbcs	r7, r7
 80021ca:	4461      	add	r1, ip
 80021cc:	4689      	mov	r9, r1
 80021ce:	427f      	negs	r7, r7
 80021d0:	44b9      	add	r9, r7
 80021d2:	e738      	b.n	8002046 <__aeabi_dsub+0x536>
 80021d4:	464b      	mov	r3, r9
 80021d6:	4323      	orrs	r3, r4
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x6cc>
 80021da:	e69f      	b.n	8001f1c <__aeabi_dsub+0x40c>
 80021dc:	e606      	b.n	8001dec <__aeabi_dsub+0x2dc>
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	000007fe 	.word	0x000007fe
 80021e4:	000007ff 	.word	0x000007ff
 80021e8:	ff7fffff 	.word	0xff7fffff
 80021ec:	08ff      	lsrs	r7, r7, #3
 80021ee:	074b      	lsls	r3, r1, #29
 80021f0:	433b      	orrs	r3, r7
 80021f2:	08cc      	lsrs	r4, r1, #3
 80021f4:	e616      	b.n	8001e24 <__aeabi_dsub+0x314>
 80021f6:	4662      	mov	r2, ip
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	4313      	orrs	r3, r2
 80021fe:	4662      	mov	r2, ip
 8002200:	08d4      	lsrs	r4, r2, #3
 8002202:	2280      	movs	r2, #128	; 0x80
 8002204:	0312      	lsls	r2, r2, #12
 8002206:	4214      	tst	r4, r2
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x70a>
 800220a:	08c8      	lsrs	r0, r1, #3
 800220c:	4210      	tst	r0, r2
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x70a>
 8002210:	465d      	mov	r5, fp
 8002212:	0004      	movs	r4, r0
 8002214:	08fb      	lsrs	r3, r7, #3
 8002216:	0749      	lsls	r1, r1, #29
 8002218:	430b      	orrs	r3, r1
 800221a:	0f5a      	lsrs	r2, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0752      	lsls	r2, r2, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	4313      	orrs	r3, r2
 8002224:	e5fe      	b.n	8001e24 <__aeabi_dsub+0x314>
 8002226:	2300      	movs	r3, #0
 8002228:	4a01      	ldr	r2, [pc, #4]	; (8002230 <__aeabi_dsub+0x720>)
 800222a:	001c      	movs	r4, r3
 800222c:	e513      	b.n	8001c56 <__aeabi_dsub+0x146>
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	000007ff 	.word	0x000007ff

08002234 <__aeabi_dcmpun>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	0005      	movs	r5, r0
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <__aeabi_dcmpun+0x38>)
 800223a:	031c      	lsls	r4, r3, #12
 800223c:	0016      	movs	r6, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	030a      	lsls	r2, r1, #12
 8002242:	0049      	lsls	r1, r1, #1
 8002244:	0b12      	lsrs	r2, r2, #12
 8002246:	0d49      	lsrs	r1, r1, #21
 8002248:	0b24      	lsrs	r4, r4, #12
 800224a:	0d5b      	lsrs	r3, r3, #21
 800224c:	4281      	cmp	r1, r0
 800224e:	d008      	beq.n	8002262 <__aeabi_dcmpun+0x2e>
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <__aeabi_dcmpun+0x38>)
 8002252:	2000      	movs	r0, #0
 8002254:	4293      	cmp	r3, r2
 8002256:	d103      	bne.n	8002260 <__aeabi_dcmpun+0x2c>
 8002258:	0020      	movs	r0, r4
 800225a:	4330      	orrs	r0, r6
 800225c:	1e43      	subs	r3, r0, #1
 800225e:	4198      	sbcs	r0, r3
 8002260:	bd70      	pop	{r4, r5, r6, pc}
 8002262:	2001      	movs	r0, #1
 8002264:	432a      	orrs	r2, r5
 8002266:	d1fb      	bne.n	8002260 <__aeabi_dcmpun+0x2c>
 8002268:	e7f2      	b.n	8002250 <__aeabi_dcmpun+0x1c>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	000007ff 	.word	0x000007ff

08002270 <__aeabi_d2iz>:
 8002270:	000a      	movs	r2, r1
 8002272:	b530      	push	{r4, r5, lr}
 8002274:	4c13      	ldr	r4, [pc, #76]	; (80022c4 <__aeabi_d2iz+0x54>)
 8002276:	0053      	lsls	r3, r2, #1
 8002278:	0309      	lsls	r1, r1, #12
 800227a:	0005      	movs	r5, r0
 800227c:	0b09      	lsrs	r1, r1, #12
 800227e:	2000      	movs	r0, #0
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	0fd2      	lsrs	r2, r2, #31
 8002284:	42a3      	cmp	r3, r4
 8002286:	dd04      	ble.n	8002292 <__aeabi_d2iz+0x22>
 8002288:	480f      	ldr	r0, [pc, #60]	; (80022c8 <__aeabi_d2iz+0x58>)
 800228a:	4283      	cmp	r3, r0
 800228c:	dd02      	ble.n	8002294 <__aeabi_d2iz+0x24>
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <__aeabi_d2iz+0x5c>)
 8002290:	18d0      	adds	r0, r2, r3
 8002292:	bd30      	pop	{r4, r5, pc}
 8002294:	2080      	movs	r0, #128	; 0x80
 8002296:	0340      	lsls	r0, r0, #13
 8002298:	4301      	orrs	r1, r0
 800229a:	480d      	ldr	r0, [pc, #52]	; (80022d0 <__aeabi_d2iz+0x60>)
 800229c:	1ac0      	subs	r0, r0, r3
 800229e:	281f      	cmp	r0, #31
 80022a0:	dd08      	ble.n	80022b4 <__aeabi_d2iz+0x44>
 80022a2:	480c      	ldr	r0, [pc, #48]	; (80022d4 <__aeabi_d2iz+0x64>)
 80022a4:	1ac3      	subs	r3, r0, r3
 80022a6:	40d9      	lsrs	r1, r3
 80022a8:	000b      	movs	r3, r1
 80022aa:	4258      	negs	r0, r3
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d1f0      	bne.n	8002292 <__aeabi_d2iz+0x22>
 80022b0:	0018      	movs	r0, r3
 80022b2:	e7ee      	b.n	8002292 <__aeabi_d2iz+0x22>
 80022b4:	4c08      	ldr	r4, [pc, #32]	; (80022d8 <__aeabi_d2iz+0x68>)
 80022b6:	40c5      	lsrs	r5, r0
 80022b8:	46a4      	mov	ip, r4
 80022ba:	4463      	add	r3, ip
 80022bc:	4099      	lsls	r1, r3
 80022be:	000b      	movs	r3, r1
 80022c0:	432b      	orrs	r3, r5
 80022c2:	e7f2      	b.n	80022aa <__aeabi_d2iz+0x3a>
 80022c4:	000003fe 	.word	0x000003fe
 80022c8:	0000041d 	.word	0x0000041d
 80022cc:	7fffffff 	.word	0x7fffffff
 80022d0:	00000433 	.word	0x00000433
 80022d4:	00000413 	.word	0x00000413
 80022d8:	fffffbed 	.word	0xfffffbed

080022dc <__aeabi_i2d>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	2800      	cmp	r0, #0
 80022e0:	d016      	beq.n	8002310 <__aeabi_i2d+0x34>
 80022e2:	17c3      	asrs	r3, r0, #31
 80022e4:	18c5      	adds	r5, r0, r3
 80022e6:	405d      	eors	r5, r3
 80022e8:	0fc4      	lsrs	r4, r0, #31
 80022ea:	0028      	movs	r0, r5
 80022ec:	f000 f8d4 	bl	8002498 <__clzsi2>
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <__aeabi_i2d+0x5c>)
 80022f2:	1a12      	subs	r2, r2, r0
 80022f4:	280a      	cmp	r0, #10
 80022f6:	dc16      	bgt.n	8002326 <__aeabi_i2d+0x4a>
 80022f8:	0003      	movs	r3, r0
 80022fa:	002e      	movs	r6, r5
 80022fc:	3315      	adds	r3, #21
 80022fe:	409e      	lsls	r6, r3
 8002300:	230b      	movs	r3, #11
 8002302:	1a18      	subs	r0, r3, r0
 8002304:	40c5      	lsrs	r5, r0
 8002306:	0552      	lsls	r2, r2, #21
 8002308:	032d      	lsls	r5, r5, #12
 800230a:	0b2d      	lsrs	r5, r5, #12
 800230c:	0d53      	lsrs	r3, r2, #21
 800230e:	e003      	b.n	8002318 <__aeabi_i2d+0x3c>
 8002310:	2400      	movs	r4, #0
 8002312:	2300      	movs	r3, #0
 8002314:	2500      	movs	r5, #0
 8002316:	2600      	movs	r6, #0
 8002318:	051b      	lsls	r3, r3, #20
 800231a:	432b      	orrs	r3, r5
 800231c:	07e4      	lsls	r4, r4, #31
 800231e:	4323      	orrs	r3, r4
 8002320:	0030      	movs	r0, r6
 8002322:	0019      	movs	r1, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	380b      	subs	r0, #11
 8002328:	4085      	lsls	r5, r0
 800232a:	0552      	lsls	r2, r2, #21
 800232c:	032d      	lsls	r5, r5, #12
 800232e:	2600      	movs	r6, #0
 8002330:	0b2d      	lsrs	r5, r5, #12
 8002332:	0d53      	lsrs	r3, r2, #21
 8002334:	e7f0      	b.n	8002318 <__aeabi_i2d+0x3c>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	0000041e 	.word	0x0000041e

0800233c <__aeabi_ui2d>:
 800233c:	b510      	push	{r4, lr}
 800233e:	1e04      	subs	r4, r0, #0
 8002340:	d010      	beq.n	8002364 <__aeabi_ui2d+0x28>
 8002342:	f000 f8a9 	bl	8002498 <__clzsi2>
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <__aeabi_ui2d+0x48>)
 8002348:	1a1b      	subs	r3, r3, r0
 800234a:	280a      	cmp	r0, #10
 800234c:	dc11      	bgt.n	8002372 <__aeabi_ui2d+0x36>
 800234e:	220b      	movs	r2, #11
 8002350:	0021      	movs	r1, r4
 8002352:	1a12      	subs	r2, r2, r0
 8002354:	40d1      	lsrs	r1, r2
 8002356:	3015      	adds	r0, #21
 8002358:	030a      	lsls	r2, r1, #12
 800235a:	055b      	lsls	r3, r3, #21
 800235c:	4084      	lsls	r4, r0
 800235e:	0b12      	lsrs	r2, r2, #12
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	e001      	b.n	8002368 <__aeabi_ui2d+0x2c>
 8002364:	2300      	movs	r3, #0
 8002366:	2200      	movs	r2, #0
 8002368:	051b      	lsls	r3, r3, #20
 800236a:	4313      	orrs	r3, r2
 800236c:	0020      	movs	r0, r4
 800236e:	0019      	movs	r1, r3
 8002370:	bd10      	pop	{r4, pc}
 8002372:	0022      	movs	r2, r4
 8002374:	380b      	subs	r0, #11
 8002376:	4082      	lsls	r2, r0
 8002378:	055b      	lsls	r3, r3, #21
 800237a:	0312      	lsls	r2, r2, #12
 800237c:	2400      	movs	r4, #0
 800237e:	0b12      	lsrs	r2, r2, #12
 8002380:	0d5b      	lsrs	r3, r3, #21
 8002382:	e7f1      	b.n	8002368 <__aeabi_ui2d+0x2c>
 8002384:	0000041e 	.word	0x0000041e

08002388 <__aeabi_d2f>:
 8002388:	0002      	movs	r2, r0
 800238a:	004b      	lsls	r3, r1, #1
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	0d5b      	lsrs	r3, r3, #21
 8002390:	030c      	lsls	r4, r1, #12
 8002392:	4e3d      	ldr	r6, [pc, #244]	; (8002488 <__aeabi_d2f+0x100>)
 8002394:	0a64      	lsrs	r4, r4, #9
 8002396:	0f40      	lsrs	r0, r0, #29
 8002398:	1c5f      	adds	r7, r3, #1
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	4304      	orrs	r4, r0
 800239e:	00d5      	lsls	r5, r2, #3
 80023a0:	4237      	tst	r7, r6
 80023a2:	d00a      	beq.n	80023ba <__aeabi_d2f+0x32>
 80023a4:	4839      	ldr	r0, [pc, #228]	; (800248c <__aeabi_d2f+0x104>)
 80023a6:	181e      	adds	r6, r3, r0
 80023a8:	2efe      	cmp	r6, #254	; 0xfe
 80023aa:	dd16      	ble.n	80023da <__aeabi_d2f+0x52>
 80023ac:	20ff      	movs	r0, #255	; 0xff
 80023ae:	2400      	movs	r4, #0
 80023b0:	05c0      	lsls	r0, r0, #23
 80023b2:	4320      	orrs	r0, r4
 80023b4:	07c9      	lsls	r1, r1, #31
 80023b6:	4308      	orrs	r0, r1
 80023b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <__aeabi_d2f+0x44>
 80023be:	432c      	orrs	r4, r5
 80023c0:	d026      	beq.n	8002410 <__aeabi_d2f+0x88>
 80023c2:	2205      	movs	r2, #5
 80023c4:	0192      	lsls	r2, r2, #6
 80023c6:	0a54      	lsrs	r4, r2, #9
 80023c8:	b2d8      	uxtb	r0, r3
 80023ca:	e7f1      	b.n	80023b0 <__aeabi_d2f+0x28>
 80023cc:	4325      	orrs	r5, r4
 80023ce:	d0ed      	beq.n	80023ac <__aeabi_d2f+0x24>
 80023d0:	2080      	movs	r0, #128	; 0x80
 80023d2:	03c0      	lsls	r0, r0, #15
 80023d4:	4304      	orrs	r4, r0
 80023d6:	20ff      	movs	r0, #255	; 0xff
 80023d8:	e7ea      	b.n	80023b0 <__aeabi_d2f+0x28>
 80023da:	2e00      	cmp	r6, #0
 80023dc:	dd1b      	ble.n	8002416 <__aeabi_d2f+0x8e>
 80023de:	0192      	lsls	r2, r2, #6
 80023e0:	1e53      	subs	r3, r2, #1
 80023e2:	419a      	sbcs	r2, r3
 80023e4:	00e4      	lsls	r4, r4, #3
 80023e6:	0f6d      	lsrs	r5, r5, #29
 80023e8:	4322      	orrs	r2, r4
 80023ea:	432a      	orrs	r2, r5
 80023ec:	0753      	lsls	r3, r2, #29
 80023ee:	d048      	beq.n	8002482 <__aeabi_d2f+0xfa>
 80023f0:	230f      	movs	r3, #15
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d000      	beq.n	80023fa <__aeabi_d2f+0x72>
 80023f8:	3204      	adds	r2, #4
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	04db      	lsls	r3, r3, #19
 80023fe:	4013      	ands	r3, r2
 8002400:	d03f      	beq.n	8002482 <__aeabi_d2f+0xfa>
 8002402:	1c70      	adds	r0, r6, #1
 8002404:	2efe      	cmp	r6, #254	; 0xfe
 8002406:	d0d1      	beq.n	80023ac <__aeabi_d2f+0x24>
 8002408:	0192      	lsls	r2, r2, #6
 800240a:	0a54      	lsrs	r4, r2, #9
 800240c:	b2c0      	uxtb	r0, r0
 800240e:	e7cf      	b.n	80023b0 <__aeabi_d2f+0x28>
 8002410:	2000      	movs	r0, #0
 8002412:	2400      	movs	r4, #0
 8002414:	e7cc      	b.n	80023b0 <__aeabi_d2f+0x28>
 8002416:	0032      	movs	r2, r6
 8002418:	3217      	adds	r2, #23
 800241a:	db22      	blt.n	8002462 <__aeabi_d2f+0xda>
 800241c:	2080      	movs	r0, #128	; 0x80
 800241e:	0400      	lsls	r0, r0, #16
 8002420:	4320      	orrs	r0, r4
 8002422:	241e      	movs	r4, #30
 8002424:	1ba4      	subs	r4, r4, r6
 8002426:	2c1f      	cmp	r4, #31
 8002428:	dd1d      	ble.n	8002466 <__aeabi_d2f+0xde>
 800242a:	2202      	movs	r2, #2
 800242c:	4252      	negs	r2, r2
 800242e:	1b96      	subs	r6, r2, r6
 8002430:	0002      	movs	r2, r0
 8002432:	40f2      	lsrs	r2, r6
 8002434:	0016      	movs	r6, r2
 8002436:	2c20      	cmp	r4, #32
 8002438:	d004      	beq.n	8002444 <__aeabi_d2f+0xbc>
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <__aeabi_d2f+0x108>)
 800243c:	4694      	mov	ip, r2
 800243e:	4463      	add	r3, ip
 8002440:	4098      	lsls	r0, r3
 8002442:	4305      	orrs	r5, r0
 8002444:	002a      	movs	r2, r5
 8002446:	1e53      	subs	r3, r2, #1
 8002448:	419a      	sbcs	r2, r3
 800244a:	4332      	orrs	r2, r6
 800244c:	2600      	movs	r6, #0
 800244e:	0753      	lsls	r3, r2, #29
 8002450:	d1ce      	bne.n	80023f0 <__aeabi_d2f+0x68>
 8002452:	2480      	movs	r4, #128	; 0x80
 8002454:	0013      	movs	r3, r2
 8002456:	04e4      	lsls	r4, r4, #19
 8002458:	2001      	movs	r0, #1
 800245a:	4023      	ands	r3, r4
 800245c:	4222      	tst	r2, r4
 800245e:	d1d3      	bne.n	8002408 <__aeabi_d2f+0x80>
 8002460:	e7b0      	b.n	80023c4 <__aeabi_d2f+0x3c>
 8002462:	2300      	movs	r3, #0
 8002464:	e7ad      	b.n	80023c2 <__aeabi_d2f+0x3a>
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <__aeabi_d2f+0x10c>)
 8002468:	4694      	mov	ip, r2
 800246a:	002a      	movs	r2, r5
 800246c:	40e2      	lsrs	r2, r4
 800246e:	0014      	movs	r4, r2
 8002470:	002a      	movs	r2, r5
 8002472:	4463      	add	r3, ip
 8002474:	409a      	lsls	r2, r3
 8002476:	4098      	lsls	r0, r3
 8002478:	1e55      	subs	r5, r2, #1
 800247a:	41aa      	sbcs	r2, r5
 800247c:	4302      	orrs	r2, r0
 800247e:	4322      	orrs	r2, r4
 8002480:	e7e4      	b.n	800244c <__aeabi_d2f+0xc4>
 8002482:	0033      	movs	r3, r6
 8002484:	e79e      	b.n	80023c4 <__aeabi_d2f+0x3c>
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	000007fe 	.word	0x000007fe
 800248c:	fffffc80 	.word	0xfffffc80
 8002490:	fffffca2 	.word	0xfffffca2
 8002494:	fffffc82 	.word	0xfffffc82

08002498 <__clzsi2>:
 8002498:	211c      	movs	r1, #28
 800249a:	2301      	movs	r3, #1
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	4298      	cmp	r0, r3
 80024a0:	d301      	bcc.n	80024a6 <__clzsi2+0xe>
 80024a2:	0c00      	lsrs	r0, r0, #16
 80024a4:	3910      	subs	r1, #16
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	4298      	cmp	r0, r3
 80024aa:	d301      	bcc.n	80024b0 <__clzsi2+0x18>
 80024ac:	0a00      	lsrs	r0, r0, #8
 80024ae:	3908      	subs	r1, #8
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	4298      	cmp	r0, r3
 80024b4:	d301      	bcc.n	80024ba <__clzsi2+0x22>
 80024b6:	0900      	lsrs	r0, r0, #4
 80024b8:	3904      	subs	r1, #4
 80024ba:	a202      	add	r2, pc, #8	; (adr r2, 80024c4 <__clzsi2+0x2c>)
 80024bc:	5c10      	ldrb	r0, [r2, r0]
 80024be:	1840      	adds	r0, r0, r1
 80024c0:	4770      	bx	lr
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	02020304 	.word	0x02020304
 80024c8:	01010101 	.word	0x01010101
	...

080024d4 <__clzdi2>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	2900      	cmp	r1, #0
 80024d8:	d103      	bne.n	80024e2 <__clzdi2+0xe>
 80024da:	f7ff ffdd 	bl	8002498 <__clzsi2>
 80024de:	3020      	adds	r0, #32
 80024e0:	e002      	b.n	80024e8 <__clzdi2+0x14>
 80024e2:	0008      	movs	r0, r1
 80024e4:	f7ff ffd8 	bl	8002498 <__clzsi2>
 80024e8:	bd10      	pop	{r4, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)

080024ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f2:	240c      	movs	r4, #12
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	0018      	movs	r0, r3
 80024f8:	2314      	movs	r3, #20
 80024fa:	001a      	movs	r2, r3
 80024fc:	2100      	movs	r1, #0
 80024fe:	f002 ff9d 	bl	800543c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <MX_GPIO_Init+0x84>)
 8002504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <MX_GPIO_Init+0x84>)
 8002508:	2104      	movs	r1, #4
 800250a:	430a      	orrs	r2, r1
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <MX_GPIO_Init+0x84>)
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	2204      	movs	r2, #4
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_GPIO_Init+0x84>)
 800251c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <MX_GPIO_Init+0x84>)
 8002520:	2101      	movs	r1, #1
 8002522:	430a      	orrs	r2, r1
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <MX_GPIO_Init+0x84>)
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	2201      	movs	r2, #1
 800252c:	4013      	ands	r3, r2
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002532:	23a0      	movs	r3, #160	; 0xa0
 8002534:	05db      	lsls	r3, r3, #23
 8002536:	2200      	movs	r2, #0
 8002538:	2120      	movs	r1, #32
 800253a:	0018      	movs	r0, r3
 800253c:	f000 feba 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002540:	0021      	movs	r1, r4
 8002542:	187b      	adds	r3, r7, r1
 8002544:	2220      	movs	r2, #32
 8002546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002548:	187b      	adds	r3, r7, r1
 800254a:	2201      	movs	r2, #1
 800254c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	187b      	adds	r3, r7, r1
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800255a:	187a      	adds	r2, r7, r1
 800255c:	23a0      	movs	r3, #160	; 0xa0
 800255e:	05db      	lsls	r3, r3, #23
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 fd28 	bl	8002fb8 <HAL_GPIO_Init>

}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b009      	add	sp, #36	; 0x24
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b0ff      	sub	sp, #508	; 0x1fc
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800257a:	f000 fb23 	bl	8002bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257e:	f000 f893 	bl	80026a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002582:	f7ff ffb3 	bl	80024ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8002586:	f000 f9ff 	bl	8002988 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800258a:	f000 fa2b 	bl	80029e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_MspInit(&hlpuart1);
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <main+0x120>)
 8002590:	0018      	movs	r0, r3
 8002592:	f000 fa57 	bl	8002a44 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 8002596:	4b40      	ldr	r3, [pc, #256]	; (8002698 <main+0x124>)
 8002598:	0018      	movs	r0, r3
 800259a:	f000 fa53 	bl	8002a44 <HAL_UART_MspInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 800259e:	23a0      	movs	r3, #160	; 0xa0
 80025a0:	05db      	lsls	r3, r3, #23
 80025a2:	2120      	movs	r1, #32
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 fea2 	bl	80032ee <HAL_GPIO_TogglePin>

	  HAL_UART_Receive (&hlpuart1, UART1_rxBuffer, sizeof(UART1_rxBuffer), 5000);
 80025aa:	4c3c      	ldr	r4, [pc, #240]	; (800269c <main+0x128>)
 80025ac:	23fa      	movs	r3, #250	; 0xfa
 80025ae:	005a      	lsls	r2, r3, #1
 80025b0:	1d39      	adds	r1, r7, #4
 80025b2:	4838      	ldr	r0, [pc, #224]	; (8002694 <main+0x120>)
 80025b4:	0023      	movs	r3, r4
 80025b6:	f001 fe75 	bl	80042a4 <HAL_UART_Receive>
	  printf("%s", UART1_rxBuffer);
 80025ba:	1d3a      	adds	r2, r7, #4
 80025bc:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <main+0x12c>)
 80025be:	0011      	movs	r1, r2
 80025c0:	0018      	movs	r0, r3
 80025c2:	f003 f94b 	bl	800585c <iprintf>
	  HAL_UART_Transmit (&hlpuart1, UART1_rxBuffer, sizeof(UART1_rxBuffer), 5000);
 80025c6:	4c35      	ldr	r4, [pc, #212]	; (800269c <main+0x128>)
 80025c8:	23fa      	movs	r3, #250	; 0xfa
 80025ca:	005a      	lsls	r2, r3, #1
 80025cc:	1d39      	adds	r1, r7, #4
 80025ce:	4831      	ldr	r0, [pc, #196]	; (8002694 <main+0x120>)
 80025d0:	0023      	movs	r3, r4
 80025d2:	f001 fdc7 	bl	8004164 <HAL_UART_Transmit>
	  HAL_UART_Transmit (&huart2, "a", 1, 5000);
 80025d6:	4b31      	ldr	r3, [pc, #196]	; (800269c <main+0x128>)
 80025d8:	4932      	ldr	r1, [pc, #200]	; (80026a4 <main+0x130>)
 80025da:	482f      	ldr	r0, [pc, #188]	; (8002698 <main+0x124>)
 80025dc:	2201      	movs	r2, #1
 80025de:	f001 fdc1 	bl	8004164 <HAL_UART_Transmit>

	  //HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
	  //HAL_Delay (1000);

	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80025e2:	23a0      	movs	r3, #160	; 0xa0
 80025e4:	05db      	lsls	r3, r3, #23
 80025e6:	2120      	movs	r1, #32
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 fe80 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (200);
 80025ee:	20c8      	movs	r0, #200	; 0xc8
 80025f0:	f000 fb58 	bl	8002ca4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80025f4:	23a0      	movs	r3, #160	; 0xa0
 80025f6:	05db      	lsls	r3, r3, #23
 80025f8:	2120      	movs	r1, #32
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fe77 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (200);
 8002600:	20c8      	movs	r0, #200	; 0xc8
 8002602:	f000 fb4f 	bl	8002ca4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002606:	23a0      	movs	r3, #160	; 0xa0
 8002608:	05db      	lsls	r3, r3, #23
 800260a:	2120      	movs	r1, #32
 800260c:	0018      	movs	r0, r3
 800260e:	f000 fe6e 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (200);
 8002612:	20c8      	movs	r0, #200	; 0xc8
 8002614:	f000 fb46 	bl	8002ca4 <HAL_Delay>

	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002618:	23a0      	movs	r3, #160	; 0xa0
 800261a:	05db      	lsls	r3, r3, #23
 800261c:	2120      	movs	r1, #32
 800261e:	0018      	movs	r0, r3
 8002620:	f000 fe65 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (700);
 8002624:	23af      	movs	r3, #175	; 0xaf
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fb3b 	bl	8002ca4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 800262e:	23a0      	movs	r3, #160	; 0xa0
 8002630:	05db      	lsls	r3, r3, #23
 8002632:	2120      	movs	r1, #32
 8002634:	0018      	movs	r0, r3
 8002636:	f000 fe5a 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (700);
 800263a:	23af      	movs	r3, #175	; 0xaf
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	0018      	movs	r0, r3
 8002640:	f000 fb30 	bl	8002ca4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002644:	23a0      	movs	r3, #160	; 0xa0
 8002646:	05db      	lsls	r3, r3, #23
 8002648:	2120      	movs	r1, #32
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fe4f 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (700);
 8002650:	23af      	movs	r3, #175	; 0xaf
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	0018      	movs	r0, r3
 8002656:	f000 fb25 	bl	8002ca4 <HAL_Delay>

	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 800265a:	23a0      	movs	r3, #160	; 0xa0
 800265c:	05db      	lsls	r3, r3, #23
 800265e:	2120      	movs	r1, #32
 8002660:	0018      	movs	r0, r3
 8002662:	f000 fe44 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (200);
 8002666:	20c8      	movs	r0, #200	; 0xc8
 8002668:	f000 fb1c 	bl	8002ca4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 800266c:	23a0      	movs	r3, #160	; 0xa0
 800266e:	05db      	lsls	r3, r3, #23
 8002670:	2120      	movs	r1, #32
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fe3b 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (200);
 8002678:	20c8      	movs	r0, #200	; 0xc8
 800267a:	f000 fb13 	bl	8002ca4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 800267e:	23a0      	movs	r3, #160	; 0xa0
 8002680:	05db      	lsls	r3, r3, #23
 8002682:	2120      	movs	r1, #32
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fe32 	bl	80032ee <HAL_GPIO_TogglePin>
	  HAL_Delay (200);
 800268a:	20c8      	movs	r0, #200	; 0xc8
 800268c:	f000 fb0a 	bl	8002ca4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002690:	e785      	b.n	800259e <main+0x2a>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	20000200 	.word	0x20000200
 8002698:	20000288 	.word	0x20000288
 800269c:	00001388 	.word	0x00001388
 80026a0:	08008bb8 	.word	0x08008bb8
 80026a4:	08008bbc 	.word	0x08008bbc

080026a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b099      	sub	sp, #100	; 0x64
 80026ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ae:	242c      	movs	r4, #44	; 0x2c
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	0018      	movs	r0, r3
 80026b4:	2334      	movs	r3, #52	; 0x34
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f002 febf 	bl	800543c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026be:	2318      	movs	r3, #24
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	0018      	movs	r0, r3
 80026c4:	2314      	movs	r3, #20
 80026c6:	001a      	movs	r2, r3
 80026c8:	2100      	movs	r1, #0
 80026ca:	f002 feb7 	bl	800543c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026ce:	003b      	movs	r3, r7
 80026d0:	0018      	movs	r0, r3
 80026d2:	2318      	movs	r3, #24
 80026d4:	001a      	movs	r2, r3
 80026d6:	2100      	movs	r1, #0
 80026d8:	f002 feb0 	bl	800543c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <SystemClock_Config+0xd4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a27      	ldr	r2, [pc, #156]	; (8002780 <SystemClock_Config+0xd8>)
 80026e2:	401a      	ands	r2, r3
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <SystemClock_Config+0xd4>)
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0109      	lsls	r1, r1, #4
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80026ee:	0021      	movs	r1, r4
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2210      	movs	r2, #16
 80026f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2201      	movs	r2, #1
 80026fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002702:	187b      	adds	r3, r7, r1
 8002704:	22a0      	movs	r2, #160	; 0xa0
 8002706:	0212      	lsls	r2, r2, #8
 8002708:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002710:	187b      	adds	r3, r7, r1
 8002712:	0018      	movs	r0, r3
 8002714:	f000 fe06 	bl	8003324 <HAL_RCC_OscConfig>
 8002718:	1e03      	subs	r3, r0, #0
 800271a:	d001      	beq.n	8002720 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800271c:	f000 f832 	bl	8002784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002720:	2118      	movs	r1, #24
 8002722:	187b      	adds	r3, r7, r1
 8002724:	220f      	movs	r2, #15
 8002726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002728:	187b      	adds	r3, r7, r1
 800272a:	2200      	movs	r2, #0
 800272c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002740:	187b      	adds	r3, r7, r1
 8002742:	2100      	movs	r1, #0
 8002744:	0018      	movs	r0, r3
 8002746:	f001 f969 	bl	8003a1c <HAL_RCC_ClockConfig>
 800274a:	1e03      	subs	r3, r0, #0
 800274c:	d001      	beq.n	8002752 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800274e:	f000 f819 	bl	8002784 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 8002752:	003b      	movs	r3, r7
 8002754:	2206      	movs	r2, #6
 8002756:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002758:	003b      	movs	r3, r7
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800275e:	003b      	movs	r3, r7
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002764:	003b      	movs	r3, r7
 8002766:	0018      	movs	r0, r3
 8002768:	f001 fb7c 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002770:	f000 f808 	bl	8002784 <Error_Handler>
  }
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b019      	add	sp, #100	; 0x64
 800277a:	bd90      	pop	{r4, r7, pc}
 800277c:	40007000 	.word	0x40007000
 8002780:	ffffe7ff 	.word	0xffffe7ff

08002784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002788:	b672      	cpsid	i
}
 800278a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800278c:	e7fe      	b.n	800278c <Error_Handler+0x8>
	...

08002790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_MspInit+0x24>)
 8002796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_MspInit+0x24>)
 800279a:	2101      	movs	r1, #1
 800279c:	430a      	orrs	r2, r1
 800279e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <HAL_MspInit+0x24>)
 80027a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_MspInit+0x24>)
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	0549      	lsls	r1, r1, #21
 80027aa:	430a      	orrs	r2, r1
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <NMI_Handler+0x4>

080027be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <HardFault_Handler+0x4>

080027c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027dc:	f000 fa46 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <LPUART1_IRQHandler+0x14>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f001 fe3e 	bl	8004470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000200 	.word	0x20000200

08002800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  return 1;
 8002804:	2301      	movs	r3, #1
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_kill>:

int _kill(int pid, int sig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002816:	f002 fde7 	bl	80053e8 <__errno>
 800281a:	0003      	movs	r3, r0
 800281c:	2216      	movs	r2, #22
 800281e:	601a      	str	r2, [r3, #0]
  return -1;
 8002820:	2301      	movs	r3, #1
 8002822:	425b      	negs	r3, r3
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}

0800282c <_exit>:

void _exit (int status)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002834:	2301      	movs	r3, #1
 8002836:	425a      	negs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	0011      	movs	r1, r2
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff ffe5 	bl	800280c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002842:	e7fe      	b.n	8002842 <_exit+0x16>

08002844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e00a      	b.n	800286c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002856:	e000      	b.n	800285a <_read+0x16>
 8002858:	bf00      	nop
 800285a:	0001      	movs	r1, r0
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	60ba      	str	r2, [r7, #8]
 8002862:	b2ca      	uxtb	r2, r1
 8002864:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3301      	adds	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	dbf0      	blt.n	8002856 <_read+0x12>
  }

  return len;
 8002874:	687b      	ldr	r3, [r7, #4]
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b006      	add	sp, #24
 800287c:	bd80      	pop	{r7, pc}

0800287e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e009      	b.n	80028a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60ba      	str	r2, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	0018      	movs	r0, r3
 800289a:	e000      	b.n	800289e <_write+0x20>
 800289c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	dbf1      	blt.n	8002890 <_write+0x12>
  }
  return len;
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b006      	add	sp, #24
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_close>:

int _close(int file)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028be:	2301      	movs	r3, #1
 80028c0:	425b      	negs	r3, r3
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	0192      	lsls	r2, r2, #6
 80028da:	605a      	str	r2, [r3, #4]
  return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_isatty>:

int _isatty(int file)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <_sbrk+0x5c>)
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <_sbrk+0x60>)
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <_sbrk+0x64>)
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <_sbrk+0x68>)
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	18d3      	adds	r3, r2, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002940:	f002 fd52 	bl	80053e8 <__errno>
 8002944:	0003      	movs	r3, r0
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294a:	2301      	movs	r3, #1
 800294c:	425b      	negs	r3, r3
 800294e:	e009      	b.n	8002964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	18d2      	adds	r2, r2, r3
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <_sbrk+0x64>)
 8002960:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b006      	add	sp, #24
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20005000 	.word	0x20005000
 8002970:	00000400 	.word	0x00000400
 8002974:	200001fc 	.word	0x200001fc
 8002978:	20000328 	.word	0x20000328

0800297c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <MX_LPUART1_UART_Init+0x58>)
 8002990:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 8002994:	2296      	movs	r2, #150	; 0x96
 8002996:	0192      	lsls	r2, r2, #6
 8002998:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 80029ae:	220c      	movs	r2, #12
 80029b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <MX_LPUART1_UART_Init+0x54>)
 80029c6:	0018      	movs	r0, r3
 80029c8:	f001 fb78 	bl	80040bc <HAL_UART_Init>
 80029cc:	1e03      	subs	r3, r0, #0
 80029ce:	d001      	beq.n	80029d4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80029d0:	f7ff fed8 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	20000200 	.word	0x20000200
 80029e0:	40004800 	.word	0x40004800

080029e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <MX_USART2_UART_Init+0x5c>)
 80029ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 80029f0:	2296      	movs	r2, #150	; 0x96
 80029f2:	0192      	lsls	r2, r2, #6
 80029f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a14:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <MX_USART2_UART_Init+0x58>)
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f001 fb47 	bl	80040bc <HAL_UART_Init>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d001      	beq.n	8002a36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a32:	f7ff fea7 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000288 	.word	0x20000288
 8002a40:	40004400 	.word	0x40004400

08002a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b08b      	sub	sp, #44	; 0x2c
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	2414      	movs	r4, #20
 8002a4e:	193b      	adds	r3, r7, r4
 8002a50:	0018      	movs	r0, r3
 8002a52:	2314      	movs	r3, #20
 8002a54:	001a      	movs	r2, r3
 8002a56:	2100      	movs	r1, #0
 8002a58:	f002 fcf0 	bl	800543c <memset>
  if(uartHandle->Instance==LPUART1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a33      	ldr	r2, [pc, #204]	; (8002b30 <HAL_UART_MspInit+0xec>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d131      	bne.n	8002aca <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a66:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6a:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	02c9      	lsls	r1, r1, #11
 8002a70:	430a      	orrs	r2, r1
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a74:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a80:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	2204      	movs	r2, #4
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|PC_TX_Pin;
 8002a8c:	0021      	movs	r1, r4
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2203      	movs	r2, #3
 8002a92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2202      	movs	r2, #2
 8002a98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2206      	movs	r2, #6
 8002aaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_UART_MspInit+0xf4>)
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	0010      	movs	r0, r2
 8002ab4:	f000 fa80 	bl	8002fb8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	201d      	movs	r0, #29
 8002abe:	f000 f9c1 	bl	8002e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002ac2:	201d      	movs	r0, #29
 8002ac4:	f000 f9d3 	bl	8002e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ac8:	e02e      	b.n	8002b28 <HAL_UART_MspInit+0xe4>
  else if(uartHandle->Instance==USART2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <HAL_UART_MspInit+0xf8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d129      	bne.n	8002b28 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	0289      	lsls	r1, r1, #10
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_UART_MspInit+0xf0>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002afa:	2114      	movs	r1, #20
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	220c      	movs	r2, #12
 8002b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	2202      	movs	r2, #2
 8002b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2203      	movs	r2, #3
 8002b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2204      	movs	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1a:	187a      	adds	r2, r7, r1
 8002b1c:	23a0      	movs	r3, #160	; 0xa0
 8002b1e:	05db      	lsls	r3, r3, #23
 8002b20:	0011      	movs	r1, r2
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 fa48 	bl	8002fb8 <HAL_GPIO_Init>
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b00b      	add	sp, #44	; 0x2c
 8002b2e:	bd90      	pop	{r4, r7, pc}
 8002b30:	40004800 	.word	0x40004800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	50000800 	.word	0x50000800
 8002b3c:	40004400 	.word	0x40004400

08002b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002b40:	4813      	ldr	r0, [pc, #76]	; (8002b90 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002b42:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b44:	f7ff ff1a 	bl	800297c <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002b48:	4812      	ldr	r0, [pc, #72]	; (8002b94 <LoopForever+0x6>)
    LDR R1, [R0]
 8002b4a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002b4c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <LoopForever+0xa>)
    CMP R1, R2
 8002b50:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002b52:	d105      	bne.n	8002b60 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002b54:	4811      	ldr	r0, [pc, #68]	; (8002b9c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002b56:	4912      	ldr	r1, [pc, #72]	; (8002ba0 <LoopForever+0x12>)
    STR R1, [R0]
 8002b58:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002b5a:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002b5c:	4912      	ldr	r1, [pc, #72]	; (8002ba8 <LoopForever+0x1a>)
    STR R1, [R0]
 8002b5e:	6001      	str	r1, [r0, #0]

08002b60 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b60:	4812      	ldr	r0, [pc, #72]	; (8002bac <LoopForever+0x1e>)
  ldr r1, =_edata
 8002b62:	4913      	ldr	r1, [pc, #76]	; (8002bb0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <LoopForever+0x26>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b68:	e002      	b.n	8002b70 <LoopCopyDataInit>

08002b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6e:	3304      	adds	r3, #4

08002b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b74:	d3f9      	bcc.n	8002b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002b78:	4c10      	ldr	r4, [pc, #64]	; (8002bbc <LoopForever+0x2e>)
  movs r3, #0
 8002b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b7c:	e001      	b.n	8002b82 <LoopFillZerobss>

08002b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b80:	3204      	adds	r2, #4

08002b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b84:	d3fb      	bcc.n	8002b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b86:	f002 fc35 	bl	80053f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b8a:	f7ff fcf3 	bl	8002574 <main>

08002b8e <LoopForever>:

LoopForever:
    b LoopForever
 8002b8e:	e7fe      	b.n	8002b8e <LoopForever>
   ldr   r0, =_estack
 8002b90:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8002b94:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002b98:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002b9c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002ba0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002ba4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002ba8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bb4:	080090fc 	.word	0x080090fc
  ldr r2, =_sbss
 8002bb8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bbc:	20000324 	.word	0x20000324

08002bc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bc0:	e7fe      	b.n	8002bc0 <ADC1_IRQHandler>
	...

08002bc4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bca:	1dfb      	adds	r3, r7, #7
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_Init+0x3c>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_Init+0x3c>)
 8002bd6:	2140      	movs	r1, #64	; 0x40
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bdc:	2003      	movs	r0, #3
 8002bde:	f000 f811 	bl	8002c04 <HAL_InitTick>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d003      	beq.n	8002bee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e001      	b.n	8002bf2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bee:	f7ff fdcf 	bl	8002790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	781b      	ldrb	r3, [r3, #0]
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40022000 	.word	0x40022000

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_InitTick+0x5c>)
 8002c0e:	681c      	ldr	r4, [r3, #0]
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_InitTick+0x60>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	0019      	movs	r1, r3
 8002c16:	23fa      	movs	r3, #250	; 0xfa
 8002c18:	0098      	lsls	r0, r3, #2
 8002c1a:	f7fd fa91 	bl	8000140 <__udivsi3>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	0019      	movs	r1, r3
 8002c22:	0020      	movs	r0, r4
 8002c24:	f7fd fa8c 	bl	8000140 <__udivsi3>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f92f 	bl	8002e8e <HAL_SYSTICK_Config>
 8002c30:	1e03      	subs	r3, r0, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e00f      	b.n	8002c58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d80b      	bhi.n	8002c56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	2301      	movs	r3, #1
 8002c42:	425b      	negs	r3, r3
 8002c44:	2200      	movs	r2, #0
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 f8fc 	bl	8002e44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_InitTick+0x64>)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b003      	add	sp, #12
 8002c5e:	bd90      	pop	{r4, r7, pc}
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000008 	.word	0x20000008
 8002c68:	20000004 	.word	0x20000004

08002c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_IncTick+0x1c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	001a      	movs	r2, r3
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_IncTick+0x20>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	18d2      	adds	r2, r2, r3
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_IncTick+0x20>)
 8002c7e:	601a      	str	r2, [r3, #0]
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	20000008 	.word	0x20000008
 8002c8c:	20000310 	.word	0x20000310

08002c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  return uwTick;
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <HAL_GetTick+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000310 	.word	0x20000310

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	f7ff ffe0 	bl	8002c90 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	20000008 	.word	0x20000008

08002cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	1dfb      	adds	r3, r7, #7
 8002cf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8002cfe:	d809      	bhi.n	8002d14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d00:	1dfb      	adds	r3, r7, #7
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	001a      	movs	r2, r3
 8002d06:	231f      	movs	r3, #31
 8002d08:	401a      	ands	r2, r3
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <__NVIC_EnableIRQ+0x30>)
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4091      	lsls	r1, r2
 8002d10:	000a      	movs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
  }
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	0002      	movs	r2, r0
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	1dfb      	adds	r3, r7, #7
 8002d2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b7f      	cmp	r3, #127	; 0x7f
 8002d34:	d828      	bhi.n	8002d88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d36:	4a2f      	ldr	r2, [pc, #188]	; (8002df4 <__NVIC_SetPriority+0xd4>)
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	33c0      	adds	r3, #192	; 0xc0
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	589b      	ldr	r3, [r3, r2]
 8002d46:	1dfa      	adds	r2, r7, #7
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	400a      	ands	r2, r1
 8002d50:	00d2      	lsls	r2, r2, #3
 8002d52:	21ff      	movs	r1, #255	; 0xff
 8002d54:	4091      	lsls	r1, r2
 8002d56:	000a      	movs	r2, r1
 8002d58:	43d2      	mvns	r2, r2
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	019b      	lsls	r3, r3, #6
 8002d62:	22ff      	movs	r2, #255	; 0xff
 8002d64:	401a      	ands	r2, r3
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	4003      	ands	r3, r0
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d74:	481f      	ldr	r0, [pc, #124]	; (8002df4 <__NVIC_SetPriority+0xd4>)
 8002d76:	1dfb      	adds	r3, r7, #7
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	33c0      	adds	r3, #192	; 0xc0
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d86:	e031      	b.n	8002dec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d88:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <__NVIC_SetPriority+0xd8>)
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	0019      	movs	r1, r3
 8002d90:	230f      	movs	r3, #15
 8002d92:	400b      	ands	r3, r1
 8002d94:	3b08      	subs	r3, #8
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3306      	adds	r3, #6
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	18d3      	adds	r3, r2, r3
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1dfa      	adds	r2, r7, #7
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	0011      	movs	r1, r2
 8002da8:	2203      	movs	r2, #3
 8002daa:	400a      	ands	r2, r1
 8002dac:	00d2      	lsls	r2, r2, #3
 8002dae:	21ff      	movs	r1, #255	; 0xff
 8002db0:	4091      	lsls	r1, r2
 8002db2:	000a      	movs	r2, r1
 8002db4:	43d2      	mvns	r2, r2
 8002db6:	401a      	ands	r2, r3
 8002db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	22ff      	movs	r2, #255	; 0xff
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	2303      	movs	r3, #3
 8002dca:	4003      	ands	r3, r0
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dd0:	4809      	ldr	r0, [pc, #36]	; (8002df8 <__NVIC_SetPriority+0xd8>)
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	001c      	movs	r4, r3
 8002dd8:	230f      	movs	r3, #15
 8002dda:	4023      	ands	r3, r4
 8002ddc:	3b08      	subs	r3, #8
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	430a      	orrs	r2, r1
 8002de2:	3306      	adds	r3, #6
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	18c3      	adds	r3, r0, r3
 8002de8:	3304      	adds	r3, #4
 8002dea:	601a      	str	r2, [r3, #0]
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b003      	add	sp, #12
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1e5a      	subs	r2, r3, #1
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	045b      	lsls	r3, r3, #17
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d301      	bcc.n	8002e14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e10:	2301      	movs	r3, #1
 8002e12:	e010      	b.n	8002e36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <SysTick_Config+0x44>)
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	3a01      	subs	r2, #1
 8002e1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	425b      	negs	r3, r3
 8002e20:	2103      	movs	r1, #3
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff ff7c 	bl	8002d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <SysTick_Config+0x44>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <SysTick_Config+0x44>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	210f      	movs	r1, #15
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	1c02      	adds	r2, r0, #0
 8002e54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b25b      	sxtb	r3, r3
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7ff ff5d 	bl	8002d20 <__NVIC_SetPriority>
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	0002      	movs	r2, r0
 8002e76:	1dfb      	adds	r3, r7, #7
 8002e78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7a:	1dfb      	adds	r3, r7, #7
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff ff33 	bl	8002cec <__NVIC_EnableIRQ>
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff ffaf 	bl	8002dfc <SysTick_Config>
 8002e9e:	0003      	movs	r3, r0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2225      	movs	r2, #37	; 0x25
 8002ebc:	5c9b      	ldrb	r3, [r3, r2]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d008      	beq.n	8002ed6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2224      	movs	r2, #36	; 0x24
 8002ece:	2100      	movs	r1, #0
 8002ed0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e024      	b.n	8002f20 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	210e      	movs	r1, #14
 8002ee2:	438a      	bics	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	221c      	movs	r2, #28
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2101      	movs	r1, #1
 8002f04:	4091      	lsls	r1, r2
 8002f06:	000a      	movs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2225      	movs	r2, #37	; 0x25
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2224      	movs	r2, #36	; 0x24
 8002f16:	2100      	movs	r1, #0
 8002f18:	5499      	strb	r1, [r3, r2]

    return status;
 8002f1a:	230f      	movs	r3, #15
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	210f      	movs	r1, #15
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2225      	movs	r2, #37	; 0x25
 8002f3c:	5c9b      	ldrb	r3, [r3, r2]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d006      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e02a      	b.n	8002fa8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	210e      	movs	r1, #14
 8002f5e:	438a      	bics	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	438a      	bics	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	221c      	movs	r2, #28
 8002f78:	401a      	ands	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2101      	movs	r1, #1
 8002f80:	4091      	lsls	r1, r2
 8002f82:	000a      	movs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2225      	movs	r2, #37	; 0x25
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2224      	movs	r2, #36	; 0x24
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	0010      	movs	r0, r2
 8002fa6:	4798      	blx	r3
    }
  }
  return status;
 8002fa8:	230f      	movs	r3, #15
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	781b      	ldrb	r3, [r3, #0]
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b004      	add	sp, #16
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fce:	e155      	b.n	800327c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4091      	lsls	r1, r2
 8002fda:	000a      	movs	r2, r1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d100      	bne.n	8002fe8 <HAL_GPIO_Init+0x30>
 8002fe6:	e146      	b.n	8003276 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2203      	movs	r2, #3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d005      	beq.n	8003000 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d130      	bne.n	8003062 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	409a      	lsls	r2, r3
 800300e:	0013      	movs	r3, r2
 8003010:	43da      	mvns	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	409a      	lsls	r2, r3
 8003022:	0013      	movs	r3, r2
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003036:	2201      	movs	r2, #1
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	43da      	mvns	r2, r3
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	2201      	movs	r2, #1
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
 8003054:	0013      	movs	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2203      	movs	r2, #3
 8003068:	4013      	ands	r3, r2
 800306a:	2b03      	cmp	r3, #3
 800306c:	d017      	beq.n	800309e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	409a      	lsls	r2, r3
 800307c:	0013      	movs	r3, r2
 800307e:	43da      	mvns	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	0013      	movs	r3, r2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2203      	movs	r2, #3
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d123      	bne.n	80030f2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	58d3      	ldr	r3, [r2, r3]
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2207      	movs	r2, #7
 80030bc:	4013      	ands	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	220f      	movs	r2, #15
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	43da      	mvns	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2107      	movs	r1, #7
 80030d6:	400b      	ands	r3, r1
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	409a      	lsls	r2, r3
 80030dc:	0013      	movs	r3, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	0092      	lsls	r2, r2, #2
 80030ee:	6939      	ldr	r1, [r7, #16]
 80030f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	43da      	mvns	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2203      	movs	r2, #3
 8003110:	401a      	ands	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	23c0      	movs	r3, #192	; 0xc0
 800312c:	029b      	lsls	r3, r3, #10
 800312e:	4013      	ands	r3, r2
 8003130:	d100      	bne.n	8003134 <HAL_GPIO_Init+0x17c>
 8003132:	e0a0      	b.n	8003276 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003134:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_GPIO_Init+0x2dc>)
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	4b56      	ldr	r3, [pc, #344]	; (8003294 <HAL_GPIO_Init+0x2dc>)
 800313a:	2101      	movs	r1, #1
 800313c:	430a      	orrs	r2, r1
 800313e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003140:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_GPIO_Init+0x2e0>)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	589b      	ldr	r3, [r3, r2]
 800314c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2203      	movs	r2, #3
 8003152:	4013      	ands	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	409a      	lsls	r2, r3
 800315a:	0013      	movs	r3, r2
 800315c:	43da      	mvns	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	23a0      	movs	r3, #160	; 0xa0
 8003168:	05db      	lsls	r3, r3, #23
 800316a:	429a      	cmp	r2, r3
 800316c:	d01f      	beq.n	80031ae <HAL_GPIO_Init+0x1f6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4a      	ldr	r2, [pc, #296]	; (800329c <HAL_GPIO_Init+0x2e4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x1f2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a49      	ldr	r2, [pc, #292]	; (80032a0 <HAL_GPIO_Init+0x2e8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x1ee>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_GPIO_Init+0x2ec>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x1ea>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_GPIO_Init+0x2f0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x1e6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a46      	ldr	r2, [pc, #280]	; (80032ac <HAL_GPIO_Init+0x2f4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x1e2>
 8003196:	2305      	movs	r3, #5
 8003198:	e00a      	b.n	80031b0 <HAL_GPIO_Init+0x1f8>
 800319a:	2306      	movs	r3, #6
 800319c:	e008      	b.n	80031b0 <HAL_GPIO_Init+0x1f8>
 800319e:	2304      	movs	r3, #4
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x1f8>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x1f8>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x1f8>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x1f8>
 80031ae:	2300      	movs	r3, #0
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	2103      	movs	r1, #3
 80031b4:	400a      	ands	r2, r1
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031c0:	4935      	ldr	r1, [pc, #212]	; (8003298 <HAL_GPIO_Init+0x2e0>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ce:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	035b      	lsls	r3, r3, #13
 80031e6:	4013      	ands	r3, r2
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031f2:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031f8:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	43da      	mvns	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	039b      	lsls	r3, r3, #14
 8003210:	4013      	ands	r3, r2
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	43da      	mvns	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	4013      	ands	r3, r2
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43da      	mvns	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	025b      	lsls	r3, r3, #9
 8003264:	4013      	ands	r3, r2
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	40da      	lsrs	r2, r3
 8003284:	1e13      	subs	r3, r2, #0
 8003286:	d000      	beq.n	800328a <HAL_GPIO_Init+0x2d2>
 8003288:	e6a2      	b.n	8002fd0 <HAL_GPIO_Init+0x18>
  }
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b006      	add	sp, #24
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	40010000 	.word	0x40010000
 800329c:	50000400 	.word	0x50000400
 80032a0:	50000800 	.word	0x50000800
 80032a4:	50000c00 	.word	0x50000c00
 80032a8:	50001000 	.word	0x50001000
 80032ac:	50001c00 	.word	0x50001c00
 80032b0:	40010400 	.word	0x40010400

080032b4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	0008      	movs	r0, r1
 80032be:	0011      	movs	r1, r2
 80032c0:	1cbb      	adds	r3, r7, #2
 80032c2:	1c02      	adds	r2, r0, #0
 80032c4:	801a      	strh	r2, [r3, #0]
 80032c6:	1c7b      	adds	r3, r7, #1
 80032c8:	1c0a      	adds	r2, r1, #0
 80032ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032cc:	1c7b      	adds	r3, r7, #1
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d4:	1cbb      	adds	r3, r7, #2
 80032d6:	881a      	ldrh	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80032de:	1cbb      	adds	r3, r7, #2
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b002      	add	sp, #8
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	000a      	movs	r2, r1
 80032f8:	1cbb      	adds	r3, r7, #2
 80032fa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003302:	1cbb      	adds	r3, r7, #2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	041a      	lsls	r2, r3, #16
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	43db      	mvns	r3, r3
 8003310:	1cb9      	adds	r1, r7, #2
 8003312:	8809      	ldrh	r1, [r1, #0]
 8003314:	400b      	ands	r3, r1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	619a      	str	r2, [r3, #24]
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b004      	add	sp, #16
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b5b0      	push	{r4, r5, r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f000 fb6c 	bl	8003a10 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003338:	4bc8      	ldr	r3, [pc, #800]	; (800365c <HAL_RCC_OscConfig+0x338>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	220c      	movs	r2, #12
 800333e:	4013      	ands	r3, r2
 8003340:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003342:	4bc6      	ldr	r3, [pc, #792]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	025b      	lsls	r3, r3, #9
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2201      	movs	r2, #1
 8003354:	4013      	ands	r3, r2
 8003356:	d100      	bne.n	800335a <HAL_RCC_OscConfig+0x36>
 8003358:	e07d      	b.n	8003456 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d007      	beq.n	8003370 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d112      	bne.n	800338c <HAL_RCC_OscConfig+0x68>
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	025b      	lsls	r3, r3, #9
 800336c:	429a      	cmp	r2, r3
 800336e:	d10d      	bne.n	800338c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	4bba      	ldr	r3, [pc, #744]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	029b      	lsls	r3, r3, #10
 8003378:	4013      	ands	r3, r2
 800337a:	d100      	bne.n	800337e <HAL_RCC_OscConfig+0x5a>
 800337c:	e06a      	b.n	8003454 <HAL_RCC_OscConfig+0x130>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d166      	bne.n	8003454 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f000 fb42 	bl	8003a10 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x84>
 8003398:	4bb0      	ldr	r3, [pc, #704]	; (800365c <HAL_RCC_OscConfig+0x338>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4baf      	ldr	r3, [pc, #700]	; (800365c <HAL_RCC_OscConfig+0x338>)
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	0249      	lsls	r1, r1, #9
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e027      	b.n	80033f8 <HAL_RCC_OscConfig+0xd4>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	23a0      	movs	r3, #160	; 0xa0
 80033ae:	02db      	lsls	r3, r3, #11
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d10e      	bne.n	80033d2 <HAL_RCC_OscConfig+0xae>
 80033b4:	4ba9      	ldr	r3, [pc, #676]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4ba8      	ldr	r3, [pc, #672]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	02c9      	lsls	r1, r1, #11
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	4ba6      	ldr	r3, [pc, #664]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4ba5      	ldr	r3, [pc, #660]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	0249      	lsls	r1, r1, #9
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e012      	b.n	80033f8 <HAL_RCC_OscConfig+0xd4>
 80033d2:	4ba2      	ldr	r3, [pc, #648]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4ba1      	ldr	r3, [pc, #644]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033d8:	49a1      	ldr	r1, [pc, #644]	; (8003660 <HAL_RCC_OscConfig+0x33c>)
 80033da:	400a      	ands	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	4b9f      	ldr	r3, [pc, #636]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	025b      	lsls	r3, r3, #9
 80033e6:	4013      	ands	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4b9b      	ldr	r3, [pc, #620]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b9a      	ldr	r3, [pc, #616]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80033f2:	499c      	ldr	r1, [pc, #624]	; (8003664 <HAL_RCC_OscConfig+0x340>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d014      	beq.n	800342a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7ff fc46 	bl	8002c90 <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340a:	f7ff fc41 	bl	8002c90 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	; 0x64
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e2f9      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800341c:	4b8f      	ldr	r3, [pc, #572]	; (800365c <HAL_RCC_OscConfig+0x338>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	4013      	ands	r3, r2
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0xe6>
 8003428:	e015      	b.n	8003456 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7ff fc31 	bl	8002c90 <HAL_GetTick>
 800342e:	0003      	movs	r3, r0
 8003430:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7ff fc2c 	bl	8002c90 <HAL_GetTick>
 8003438:	0002      	movs	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e2e4      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003446:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	029b      	lsls	r3, r3, #10
 800344e:	4013      	ands	r3, r2
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x110>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2202      	movs	r2, #2
 800345c:	4013      	ands	r3, r2
 800345e:	d100      	bne.n	8003462 <HAL_RCC_OscConfig+0x13e>
 8003460:	e099      	b.n	8003596 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	2220      	movs	r2, #32
 800346c:	4013      	ands	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003470:	4b7a      	ldr	r3, [pc, #488]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003476:	2120      	movs	r1, #32
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	2220      	movs	r2, #32
 8003480:	4393      	bics	r3, r2
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d13e      	bne.n	800350e <HAL_RCC_OscConfig+0x1ea>
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d13b      	bne.n	800350e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003496:	4b71      	ldr	r3, [pc, #452]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2204      	movs	r2, #4
 800349c:	4013      	ands	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_RCC_OscConfig+0x186>
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e2b2      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a6e      	ldr	r2, [pc, #440]	; (8003668 <HAL_RCC_OscConfig+0x344>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	4b68      	ldr	r3, [pc, #416]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034c0:	4b66      	ldr	r3, [pc, #408]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2209      	movs	r2, #9
 80034c6:	4393      	bics	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	4b64      	ldr	r3, [pc, #400]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d2:	f000 fbeb 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80034d6:	0001      	movs	r1, r0
 80034d8:	4b60      	ldr	r3, [pc, #384]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	220f      	movs	r2, #15
 80034e0:	4013      	ands	r3, r2
 80034e2:	4a62      	ldr	r2, [pc, #392]	; (800366c <HAL_RCC_OscConfig+0x348>)
 80034e4:	5cd3      	ldrb	r3, [r2, r3]
 80034e6:	000a      	movs	r2, r1
 80034e8:	40da      	lsrs	r2, r3
 80034ea:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCC_OscConfig+0x34c>)
 80034ec:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_OscConfig+0x350>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2513      	movs	r5, #19
 80034f4:	197c      	adds	r4, r7, r5
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7ff fb84 	bl	8002c04 <HAL_InitTick>
 80034fc:	0003      	movs	r3, r0
 80034fe:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003500:	197b      	adds	r3, r7, r5
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d046      	beq.n	8003596 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003508:	197b      	adds	r3, r7, r5
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	e280      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d027      	beq.n	8003564 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003514:	4b51      	ldr	r3, [pc, #324]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2209      	movs	r2, #9
 800351a:	4393      	bics	r3, r2
 800351c:	0019      	movs	r1, r3
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003522:	430a      	orrs	r2, r1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7ff fbb3 	bl	8002c90 <HAL_GetTick>
 800352a:	0003      	movs	r3, r0
 800352c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003530:	f7ff fbae 	bl	8002c90 <HAL_GetTick>
 8003534:	0002      	movs	r2, r0
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e266      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003542:	4b46      	ldr	r3, [pc, #280]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2204      	movs	r2, #4
 8003548:	4013      	ands	r3, r2
 800354a:	d0f1      	beq.n	8003530 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCC_OscConfig+0x338>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4a45      	ldr	r2, [pc, #276]	; (8003668 <HAL_RCC_OscConfig+0x344>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	021a      	lsls	r2, r3, #8
 800355c:	4b3f      	ldr	r3, [pc, #252]	; (800365c <HAL_RCC_OscConfig+0x338>)
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	e018      	b.n	8003596 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003564:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b3c      	ldr	r3, [pc, #240]	; (800365c <HAL_RCC_OscConfig+0x338>)
 800356a:	2101      	movs	r1, #1
 800356c:	438a      	bics	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7ff fb8e 	bl	8002c90 <HAL_GetTick>
 8003574:	0003      	movs	r3, r0
 8003576:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357a:	f7ff fb89 	bl	8002c90 <HAL_GetTick>
 800357e:	0002      	movs	r2, r0
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e241      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800358c:	4b33      	ldr	r3, [pc, #204]	; (800365c <HAL_RCC_OscConfig+0x338>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2204      	movs	r2, #4
 8003592:	4013      	ands	r3, r2
 8003594:	d1f1      	bne.n	800357a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2210      	movs	r2, #16
 800359c:	4013      	ands	r3, r2
 800359e:	d100      	bne.n	80035a2 <HAL_RCC_OscConfig+0x27e>
 80035a0:	e0a1      	b.n	80036e6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d140      	bne.n	800362a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a8:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4013      	ands	r3, r2
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_OscConfig+0x29c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e227      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c0:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <HAL_RCC_OscConfig+0x354>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	0a19      	lsrs	r1, r3, #8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	061a      	lsls	r2, r3, #24
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	0b5b      	lsrs	r3, r3, #13
 80035ee:	3301      	adds	r3, #1
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	0212      	lsls	r2, r2, #8
 80035f4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035f6:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCC_OscConfig+0x338>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	210f      	movs	r1, #15
 80035fe:	400b      	ands	r3, r1
 8003600:	491a      	ldr	r1, [pc, #104]	; (800366c <HAL_RCC_OscConfig+0x348>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCC_OscConfig+0x34c>)
 8003608:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800360a:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <HAL_RCC_OscConfig+0x350>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2513      	movs	r5, #19
 8003610:	197c      	adds	r4, r7, r5
 8003612:	0018      	movs	r0, r3
 8003614:	f7ff faf6 	bl	8002c04 <HAL_InitTick>
 8003618:	0003      	movs	r3, r0
 800361a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800361c:	197b      	adds	r3, r7, r5
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d060      	beq.n	80036e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003624:	197b      	adds	r3, r7, r5
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	e1f2      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03f      	beq.n	80036b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_OscConfig+0x338>)
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	0049      	lsls	r1, r1, #1
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7ff fb26 	bl	8002c90 <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003648:	e018      	b.n	800367c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800364a:	f7ff fb21 	bl	8002c90 <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d911      	bls.n	800367c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1d9      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
 800365c:	40021000 	.word	0x40021000
 8003660:	fffeffff 	.word	0xfffeffff
 8003664:	fffbffff 	.word	0xfffbffff
 8003668:	ffffe0ff 	.word	0xffffe0ff
 800366c:	08008c40 	.word	0x08008c40
 8003670:	20000000 	.word	0x20000000
 8003674:	20000004 	.word	0x20000004
 8003678:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800367c:	4bc9      	ldr	r3, [pc, #804]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4013      	ands	r3, r2
 8003686:	d0e0      	beq.n	800364a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003688:	4bc6      	ldr	r3, [pc, #792]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4ac6      	ldr	r2, [pc, #792]	; (80039a8 <HAL_RCC_OscConfig+0x684>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1a      	ldr	r2, [r3, #32]
 8003696:	4bc3      	ldr	r3, [pc, #780]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800369c:	4bc1      	ldr	r3, [pc, #772]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	0a19      	lsrs	r1, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	061a      	lsls	r2, r3, #24
 80036aa:	4bbe      	ldr	r3, [pc, #760]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	e019      	b.n	80036e6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036b2:	4bbc      	ldr	r3, [pc, #752]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4bbb      	ldr	r3, [pc, #748]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80036b8:	49bc      	ldr	r1, [pc, #752]	; (80039ac <HAL_RCC_OscConfig+0x688>)
 80036ba:	400a      	ands	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7ff fae7 	bl	8002c90 <HAL_GetTick>
 80036c2:	0003      	movs	r3, r0
 80036c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036c8:	f7ff fae2 	bl	8002c90 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e19a      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036da:	4bb2      	ldr	r3, [pc, #712]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4013      	ands	r3, r2
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2208      	movs	r2, #8
 80036ec:	4013      	ands	r3, r2
 80036ee:	d036      	beq.n	800375e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d019      	beq.n	800372c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f8:	4baa      	ldr	r3, [pc, #680]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80036fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036fc:	4ba9      	ldr	r3, [pc, #676]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80036fe:	2101      	movs	r1, #1
 8003700:	430a      	orrs	r2, r1
 8003702:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7ff fac4 	bl	8002c90 <HAL_GetTick>
 8003708:	0003      	movs	r3, r0
 800370a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370e:	f7ff fabf 	bl	8002c90 <HAL_GetTick>
 8003712:	0002      	movs	r2, r0
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e177      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003720:	4ba0      	ldr	r3, [pc, #640]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	2202      	movs	r2, #2
 8003726:	4013      	ands	r3, r2
 8003728:	d0f1      	beq.n	800370e <HAL_RCC_OscConfig+0x3ea>
 800372a:	e018      	b.n	800375e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b9d      	ldr	r3, [pc, #628]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800372e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003730:	4b9c      	ldr	r3, [pc, #624]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003732:	2101      	movs	r1, #1
 8003734:	438a      	bics	r2, r1
 8003736:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7ff faaa 	bl	8002c90 <HAL_GetTick>
 800373c:	0003      	movs	r3, r0
 800373e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003742:	f7ff faa5 	bl	8002c90 <HAL_GetTick>
 8003746:	0002      	movs	r2, r0
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e15d      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003754:	4b93      	ldr	r3, [pc, #588]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	2202      	movs	r2, #2
 800375a:	4013      	ands	r3, r2
 800375c:	d1f1      	bne.n	8003742 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2204      	movs	r2, #4
 8003764:	4013      	ands	r3, r2
 8003766:	d100      	bne.n	800376a <HAL_RCC_OscConfig+0x446>
 8003768:	e0ae      	b.n	80038c8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376a:	2023      	movs	r0, #35	; 0x23
 800376c:	183b      	adds	r3, r7, r0
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003772:	4b8c      	ldr	r3, [pc, #560]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	055b      	lsls	r3, r3, #21
 800377a:	4013      	ands	r3, r2
 800377c:	d109      	bne.n	8003792 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b89      	ldr	r3, [pc, #548]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003782:	4b88      	ldr	r3, [pc, #544]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	0549      	lsls	r1, r1, #21
 8003788:	430a      	orrs	r2, r1
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800378c:	183b      	adds	r3, r7, r0
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b87      	ldr	r3, [pc, #540]	; (80039b0 <HAL_RCC_OscConfig+0x68c>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4013      	ands	r3, r2
 800379c:	d11a      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379e:	4b84      	ldr	r3, [pc, #528]	; (80039b0 <HAL_RCC_OscConfig+0x68c>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b83      	ldr	r3, [pc, #524]	; (80039b0 <HAL_RCC_OscConfig+0x68c>)
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	0049      	lsls	r1, r1, #1
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ac:	f7ff fa70 	bl	8002c90 <HAL_GetTick>
 80037b0:	0003      	movs	r3, r0
 80037b2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7ff fa6b 	bl	8002c90 <HAL_GetTick>
 80037ba:	0002      	movs	r2, r0
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b64      	cmp	r3, #100	; 0x64
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e123      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	4b79      	ldr	r3, [pc, #484]	; (80039b0 <HAL_RCC_OscConfig+0x68c>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	429a      	cmp	r2, r3
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x4cc>
 80037e0:	4b70      	ldr	r3, [pc, #448]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80037e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037e4:	4b6f      	ldr	r3, [pc, #444]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	0049      	lsls	r1, r1, #1
 80037ea:	430a      	orrs	r2, r1
 80037ec:	651a      	str	r2, [r3, #80]	; 0x50
 80037ee:	e031      	b.n	8003854 <HAL_RCC_OscConfig+0x530>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10c      	bne.n	8003812 <HAL_RCC_OscConfig+0x4ee>
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80037fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037fc:	4b69      	ldr	r3, [pc, #420]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80037fe:	496b      	ldr	r1, [pc, #428]	; (80039ac <HAL_RCC_OscConfig+0x688>)
 8003800:	400a      	ands	r2, r1
 8003802:	651a      	str	r2, [r3, #80]	; 0x50
 8003804:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003808:	4b66      	ldr	r3, [pc, #408]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800380a:	496a      	ldr	r1, [pc, #424]	; (80039b4 <HAL_RCC_OscConfig+0x690>)
 800380c:	400a      	ands	r2, r1
 800380e:	651a      	str	r2, [r3, #80]	; 0x50
 8003810:	e020      	b.n	8003854 <HAL_RCC_OscConfig+0x530>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	23a0      	movs	r3, #160	; 0xa0
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	429a      	cmp	r2, r3
 800381c:	d10e      	bne.n	800383c <HAL_RCC_OscConfig+0x518>
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003822:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	00c9      	lsls	r1, r1, #3
 8003828:	430a      	orrs	r2, r1
 800382a:	651a      	str	r2, [r3, #80]	; 0x50
 800382c:	4b5d      	ldr	r3, [pc, #372]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800382e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003830:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	0049      	lsls	r1, r1, #1
 8003836:	430a      	orrs	r2, r1
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0x530>
 800383c:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800383e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003840:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003842:	495a      	ldr	r1, [pc, #360]	; (80039ac <HAL_RCC_OscConfig+0x688>)
 8003844:	400a      	ands	r2, r1
 8003846:	651a      	str	r2, [r3, #80]	; 0x50
 8003848:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800384a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800384c:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800384e:	4959      	ldr	r1, [pc, #356]	; (80039b4 <HAL_RCC_OscConfig+0x690>)
 8003850:	400a      	ands	r2, r1
 8003852:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7ff fa18 	bl	8002c90 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003864:	e009      	b.n	800387a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7ff fa13 	bl	8002c90 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	4a51      	ldr	r2, [pc, #324]	; (80039b8 <HAL_RCC_OscConfig+0x694>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0ca      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800387a:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800387c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4013      	ands	r3, r2
 8003884:	d0ef      	beq.n	8003866 <HAL_RCC_OscConfig+0x542>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003888:	f7ff fa02 	bl	8002c90 <HAL_GetTick>
 800388c:	0003      	movs	r3, r0
 800388e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003890:	e009      	b.n	80038a6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7ff f9fd 	bl	8002c90 <HAL_GetTick>
 8003896:	0002      	movs	r2, r0
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	4a46      	ldr	r2, [pc, #280]	; (80039b8 <HAL_RCC_OscConfig+0x694>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0b4      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80038a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4013      	ands	r3, r2
 80038b0:	d1ef      	bne.n	8003892 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038b2:	2323      	movs	r3, #35	; 0x23
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80038be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c0:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80038c2:	493e      	ldr	r1, [pc, #248]	; (80039bc <HAL_RCC_OscConfig+0x698>)
 80038c4:	400a      	ands	r2, r1
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d100      	bne.n	80038d2 <HAL_RCC_OscConfig+0x5ae>
 80038d0:	e09d      	b.n	8003a0e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d100      	bne.n	80038da <HAL_RCC_OscConfig+0x5b6>
 80038d8:	e076      	b.n	80039c8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d145      	bne.n	800396e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 80038e8:	4935      	ldr	r1, [pc, #212]	; (80039c0 <HAL_RCC_OscConfig+0x69c>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7ff f9cf 	bl	8002c90 <HAL_GetTick>
 80038f2:	0003      	movs	r3, r0
 80038f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7ff f9ca 	bl	8002c90 <HAL_GetTick>
 80038fc:	0002      	movs	r2, r0
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e082      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800390a:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	049b      	lsls	r3, r3, #18
 8003912:	4013      	ands	r3, r2
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <HAL_RCC_OscConfig+0x6a0>)
 800391c:	4013      	ands	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	431a      	orrs	r2, r3
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003932:	430a      	orrs	r2, r1
 8003934:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003936:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	0449      	lsls	r1, r1, #17
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7ff f9a4 	bl	8002c90 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394e:	f7ff f99f 	bl	8002c90 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e057      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	049b      	lsls	r3, r3, #18
 8003968:	4013      	ands	r3, r2
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x62a>
 800396c:	e04f      	b.n	8003a0e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003974:	4912      	ldr	r1, [pc, #72]	; (80039c0 <HAL_RCC_OscConfig+0x69c>)
 8003976:	400a      	ands	r2, r1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7ff f989 	bl	8002c90 <HAL_GetTick>
 800397e:	0003      	movs	r3, r0
 8003980:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7ff f984 	bl	8002c90 <HAL_GetTick>
 8003988:	0002      	movs	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e03c      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003996:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_RCC_OscConfig+0x680>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	049b      	lsls	r3, r3, #18
 800399e:	4013      	ands	r3, r2
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x660>
 80039a2:	e034      	b.n	8003a0e <HAL_RCC_OscConfig+0x6ea>
 80039a4:	40021000 	.word	0x40021000
 80039a8:	ffff1fff 	.word	0xffff1fff
 80039ac:	fffffeff 	.word	0xfffffeff
 80039b0:	40007000 	.word	0x40007000
 80039b4:	fffffbff 	.word	0xfffffbff
 80039b8:	00001388 	.word	0x00001388
 80039bc:	efffffff 	.word	0xefffffff
 80039c0:	feffffff 	.word	0xfeffffff
 80039c4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e01d      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x6f4>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	025b      	lsls	r3, r3, #9
 80039e0:	401a      	ands	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10f      	bne.n	8003a0a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	23f0      	movs	r3, #240	; 0xf0
 80039ee:	039b      	lsls	r3, r3, #14
 80039f0:	401a      	ands	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	23c0      	movs	r3, #192	; 0xc0
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	401a      	ands	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b00a      	add	sp, #40	; 0x28
 8003a16:	bdb0      	pop	{r4, r5, r7, pc}
 8003a18:	40021000 	.word	0x40021000

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b5b0      	push	{r4, r5, r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e128      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b96      	ldr	r3, [pc, #600]	; (8003c8c <HAL_RCC_ClockConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2201      	movs	r2, #1
 8003a36:	4013      	ands	r3, r2
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d91e      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b93      	ldr	r3, [pc, #588]	; (8003c8c <HAL_RCC_ClockConfig+0x270>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2201      	movs	r2, #1
 8003a44:	4393      	bics	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	4b90      	ldr	r3, [pc, #576]	; (8003c8c <HAL_RCC_ClockConfig+0x270>)
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a50:	f7ff f91e 	bl	8002c90 <HAL_GetTick>
 8003a54:	0003      	movs	r3, r0
 8003a56:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a58:	e009      	b.n	8003a6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5a:	f7ff f919 	bl	8002c90 <HAL_GetTick>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	4a8a      	ldr	r2, [pc, #552]	; (8003c90 <HAL_RCC_ClockConfig+0x274>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e109      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b87      	ldr	r3, [pc, #540]	; (8003c8c <HAL_RCC_ClockConfig+0x270>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	4013      	ands	r3, r2
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1ee      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2202      	movs	r2, #2
 8003a82:	4013      	ands	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a86:	4b83      	ldr	r3, [pc, #524]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	22f0      	movs	r2, #240	; 0xf0
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
 8003aa4:	e089      	b.n	8003bba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aae:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	029b      	lsls	r3, r3, #10
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d120      	bne.n	8003afc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0e1      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ac6:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	049b      	lsls	r3, r3, #18
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d114      	bne.n	8003afc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0d5      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d106      	bne.n	8003aec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ade:	4b6d      	ldr	r3, [pc, #436]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d109      	bne.n	8003afc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0ca      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003aec:	4b69      	ldr	r3, [pc, #420]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0c2      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afc:	4b65      	ldr	r3, [pc, #404]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2203      	movs	r2, #3
 8003b02:	4393      	bics	r3, r2
 8003b04:	0019      	movs	r1, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	4b62      	ldr	r3, [pc, #392]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7ff f8be 	bl	8002c90 <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d111      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b20:	e009      	b.n	8003b36 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b22:	f7ff f8b5 	bl	8002c90 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	4a58      	ldr	r2, [pc, #352]	; (8003c90 <HAL_RCC_ClockConfig+0x274>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0a5      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b36:	4b57      	ldr	r3, [pc, #348]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	220c      	movs	r2, #12
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d1ef      	bne.n	8003b22 <HAL_RCC_ClockConfig+0x106>
 8003b42:	e03a      	b.n	8003bba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d111      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4c:	e009      	b.n	8003b62 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4e:	f7ff f89f 	bl	8002c90 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_RCC_ClockConfig+0x274>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e08f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b62:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	220c      	movs	r2, #12
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b0c      	cmp	r3, #12
 8003b6c:	d1ef      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x132>
 8003b6e:	e024      	b.n	8003bba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d11b      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b78:	e009      	b.n	8003b8e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7a:	f7ff f889 	bl	8002c90 <HAL_GetTick>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	4a42      	ldr	r2, [pc, #264]	; (8003c90 <HAL_RCC_ClockConfig+0x274>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e079      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8e:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	220c      	movs	r2, #12
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d1ef      	bne.n	8003b7a <HAL_RCC_ClockConfig+0x15e>
 8003b9a:	e00e      	b.n	8003bba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9c:	f7ff f878 	bl	8002c90 <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	4a3a      	ldr	r2, [pc, #232]	; (8003c90 <HAL_RCC_ClockConfig+0x274>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e068      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bb0:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	220c      	movs	r2, #12
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bba:	4b34      	ldr	r3, [pc, #208]	; (8003c8c <HAL_RCC_ClockConfig+0x270>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d21e      	bcs.n	8003c06 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_RCC_ClockConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	4393      	bics	r3, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <HAL_RCC_ClockConfig+0x270>)
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bda:	f7ff f859 	bl	8002c90 <HAL_GetTick>
 8003bde:	0003      	movs	r3, r0
 8003be0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	e009      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be4:	f7ff f854 	bl	8002c90 <HAL_GetTick>
 8003be8:	0002      	movs	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <HAL_RCC_ClockConfig+0x274>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e044      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf8:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <HAL_RCC_ClockConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4013      	ands	r3, r2
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d1ee      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <HAL_RCC_ClockConfig+0x27c>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c2e:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_RCC_ClockConfig+0x280>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	0019      	movs	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	00da      	lsls	r2, r3, #3
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c40:	430a      	orrs	r2, r1
 8003c42:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c44:	f000 f832 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c48:	0001      	movs	r1, r0
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	220f      	movs	r2, #15
 8003c52:	4013      	ands	r3, r2
 8003c54:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <HAL_RCC_ClockConfig+0x284>)
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	000a      	movs	r2, r1
 8003c5a:	40da      	lsrs	r2, r3
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HAL_RCC_ClockConfig+0x288>)
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_RCC_ClockConfig+0x28c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	250b      	movs	r5, #11
 8003c66:	197c      	adds	r4, r7, r5
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7fe ffcb 	bl	8002c04 <HAL_InitTick>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003c72:	197b      	adds	r3, r7, r5
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003c7a:	197b      	adds	r3, r7, r5
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b004      	add	sp, #16
 8003c88:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	00001388 	.word	0x00001388
 8003c94:	40021000 	.word	0x40021000
 8003c98:	fffff8ff 	.word	0xfffff8ff
 8003c9c:	ffffc7ff 	.word	0xffffc7ff
 8003ca0:	08008c40 	.word	0x08008c40
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	20000004 	.word	0x20000004

08003cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b5b0      	push	{r4, r5, r7, lr}
 8003cae:	b08e      	sub	sp, #56	; 0x38
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003cb2:	4b4c      	ldr	r3, [pc, #304]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cba:	230c      	movs	r3, #12
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d014      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x40>
 8003cc2:	d900      	bls.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x1a>
 8003cc4:	e07b      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x112>
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d002      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x24>
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cce:	e076      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003cd0:	4b44      	ldr	r3, [pc, #272]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d002      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003cda:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003cde:	e07c      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003ce0:	4b42      	ldr	r3, [pc, #264]	; (8003dec <HAL_RCC_GetSysClockFreq+0x140>)
 8003ce2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ce4:	e079      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ce6:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cea:	e076      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	0c9a      	lsrs	r2, r3, #18
 8003cf0:	230f      	movs	r3, #15
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	4b3f      	ldr	r3, [pc, #252]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x148>)
 8003cf6:	5c9b      	ldrb	r3, [r3, r2]
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	0d9a      	lsrs	r2, r3, #22
 8003cfe:	2303      	movs	r3, #3
 8003d00:	4013      	ands	r3, r2
 8003d02:	3301      	adds	r3, #1
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d06:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	025b      	lsls	r3, r3, #9
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d01a      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	69b8      	ldr	r0, [r7, #24]
 8003d20:	69f9      	ldr	r1, [r7, #28]
 8003d22:	f7fc fbe1 	bl	80004e8 <__aeabi_lmul>
 8003d26:	0002      	movs	r2, r0
 8003d28:	000b      	movs	r3, r1
 8003d2a:	0010      	movs	r0, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f7fc fbb5 	bl	80004a8 <__aeabi_uldivmod>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	000b      	movs	r3, r1
 8003d42:	0013      	movs	r3, r2
 8003d44:	637b      	str	r3, [r7, #52]	; 0x34
 8003d46:	e037      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d48:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d01a      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	4a23      	ldr	r2, [pc, #140]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	68b8      	ldr	r0, [r7, #8]
 8003d60:	68f9      	ldr	r1, [r7, #12]
 8003d62:	f7fc fbc1 	bl	80004e8 <__aeabi_lmul>
 8003d66:	0002      	movs	r2, r0
 8003d68:	000b      	movs	r3, r1
 8003d6a:	0010      	movs	r0, r2
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f7fc fb95 	bl	80004a8 <__aeabi_uldivmod>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	000b      	movs	r3, r1
 8003d82:	0013      	movs	r3, r2
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
 8003d86:	e017      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	0019      	movs	r1, r3
 8003d90:	4a16      	ldr	r2, [pc, #88]	; (8003dec <HAL_RCC_GetSysClockFreq+0x140>)
 8003d92:	2300      	movs	r3, #0
 8003d94:	f7fc fba8 	bl	80004e8 <__aeabi_lmul>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	000b      	movs	r3, r1
 8003d9c:	0010      	movs	r0, r2
 8003d9e:	0019      	movs	r1, r3
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	001c      	movs	r4, r3
 8003da4:	2300      	movs	r3, #0
 8003da6:	001d      	movs	r5, r3
 8003da8:	0022      	movs	r2, r4
 8003daa:	002b      	movs	r3, r5
 8003dac:	f7fc fb7c 	bl	80004a8 <__aeabi_uldivmod>
 8003db0:	0002      	movs	r2, r0
 8003db2:	000b      	movs	r3, r1
 8003db4:	0013      	movs	r3, r2
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dbc:	e00d      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	0b5b      	lsrs	r3, r3, #13
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	2280      	movs	r2, #128	; 0x80
 8003dd0:	0212      	lsls	r2, r2, #8
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dd8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b00e      	add	sp, #56	; 0x38
 8003de2:	bdb0      	pop	{r4, r5, r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	003d0900 	.word	0x003d0900
 8003dec:	00f42400 	.word	0x00f42400
 8003df0:	007a1200 	.word	0x007a1200
 8003df4:	08008c58 	.word	0x08008c58

08003df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	20000000 	.word	0x20000000

08003e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e10:	f7ff fff2 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e14:	0001      	movs	r1, r0
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	4013      	ands	r3, r2
 8003e20:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	40d9      	lsrs	r1, r3
 8003e26:	000b      	movs	r3, r1
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	40021000 	.word	0x40021000
 8003e34:	08008c50 	.word	0x08008c50

08003e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e3c:	f7ff ffdc 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e40:	0001      	movs	r1, r0
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	0adb      	lsrs	r3, r3, #11
 8003e48:	2207      	movs	r2, #7
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	40d9      	lsrs	r1, r3
 8003e52:	000b      	movs	r3, r1
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08008c50 	.word	0x08008c50

08003e64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003e6c:	2017      	movs	r0, #23
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d100      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003e7e:	e0c7      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e80:	4b84      	ldr	r3, [pc, #528]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	055b      	lsls	r3, r3, #21
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d109      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8c:	4b81      	ldr	r3, [pc, #516]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e90:	4b80      	ldr	r3, [pc, #512]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e92:	2180      	movs	r1, #128	; 0x80
 8003e94:	0549      	lsls	r1, r1, #21
 8003e96:	430a      	orrs	r2, r1
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e9a:	183b      	adds	r3, r7, r0
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d11a      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eac:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b79      	ldr	r3, [pc, #484]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	0049      	lsls	r1, r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eba:	f7fe fee9 	bl	8002c90 <HAL_GetTick>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec4:	f7fe fee4 	bl	8002c90 <HAL_GetTick>
 8003ec8:	0002      	movs	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0d9      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b70      	ldr	r3, [pc, #448]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	23c0      	movs	r3, #192	; 0xc0
 8003ee8:	039b      	lsls	r3, r3, #14
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	23c0      	movs	r3, #192	; 0xc0
 8003ef4:	039b      	lsls	r3, r3, #14
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d013      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	23c0      	movs	r3, #192	; 0xc0
 8003f04:	029b      	lsls	r3, r3, #10
 8003f06:	401a      	ands	r2, r3
 8003f08:	23c0      	movs	r3, #192	; 0xc0
 8003f0a:	029b      	lsls	r3, r3, #10
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10a      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f10:	4b60      	ldr	r3, [pc, #384]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	029b      	lsls	r3, r3, #10
 8003f18:	401a      	ands	r2, r3
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d101      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0b1      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003f26:	4b5b      	ldr	r3, [pc, #364]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f2a:	23c0      	movs	r3, #192	; 0xc0
 8003f2c:	029b      	lsls	r3, r3, #10
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d03b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	23c0      	movs	r3, #192	; 0xc0
 8003f3e:	029b      	lsls	r3, r3, #10
 8003f40:	4013      	ands	r3, r2
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d033      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d02e      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f52:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	4a51      	ldr	r2, [pc, #324]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f60:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	0309      	lsls	r1, r1, #12
 8003f66:	430a      	orrs	r2, r1
 8003f68:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f6e:	4b49      	ldr	r3, [pc, #292]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f70:	494b      	ldr	r1, [pc, #300]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4013      	ands	r3, r2
 8003f84:	d014      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe fe83 	bl	8002c90 <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f8e:	e009      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fe fe7e 	bl	8002c90 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	4a42      	ldr	r2, [pc, #264]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e072      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d0ef      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d01f      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	23c0      	movs	r3, #192	; 0xc0
 8003fc0:	029b      	lsls	r3, r3, #10
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	23c0      	movs	r3, #192	; 0xc0
 8003fc6:	029b      	lsls	r3, r3, #10
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003fcc:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a35      	ldr	r2, [pc, #212]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	23c0      	movs	r3, #192	; 0xc0
 8003fdc:	039b      	lsls	r3, r3, #14
 8003fde:	401a      	ands	r2, r3
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fe8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	23c0      	movs	r3, #192	; 0xc0
 8003ff0:	029b      	lsls	r3, r3, #10
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ffa:	2317      	movs	r3, #23
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b23      	ldr	r3, [pc, #140]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004008:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800400a:	4928      	ldr	r1, [pc, #160]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800400c:	400a      	ands	r2, r1
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2202      	movs	r2, #2
 8004016:	4013      	ands	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800401a:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401e:	220c      	movs	r2, #12
 8004020:	4393      	bics	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800402a:	430a      	orrs	r2, r1
 800402c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2204      	movs	r2, #4
 8004034:	4013      	ands	r3, r2
 8004036:	d009      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004038:	4b16      	ldr	r3, [pc, #88]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800403a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403c:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	4b13      	ldr	r3, [pc, #76]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004048:	430a      	orrs	r2, r1
 800404a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2208      	movs	r2, #8
 8004052:	4013      	ands	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800405c:	4013      	ands	r3, r2
 800405e:	0019      	movs	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004066:	430a      	orrs	r2, r1
 8004068:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	4013      	ands	r3, r2
 8004072:	d009      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004078:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800407a:	4013      	ands	r3, r2
 800407c:	0019      	movs	r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	4b04      	ldr	r3, [pc, #16]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004084:	430a      	orrs	r2, r1
 8004086:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b006      	add	sp, #24
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
 800409c:	fffcffff 	.word	0xfffcffff
 80040a0:	fff7ffff 	.word	0xfff7ffff
 80040a4:	00001388 	.word	0x00001388
 80040a8:	ffcfffff 	.word	0xffcfffff
 80040ac:	efffffff 	.word	0xefffffff
 80040b0:	fffff3ff 	.word	0xfffff3ff
 80040b4:	ffffcfff 	.word	0xffffcfff
 80040b8:	fff3ffff 	.word	0xfff3ffff

080040bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e044      	b.n	8004158 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d107      	bne.n	80040e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2278      	movs	r2, #120	; 0x78
 80040da:	2100      	movs	r1, #0
 80040dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fe fcaf 	bl	8002a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2224      	movs	r2, #36	; 0x24
 80040ea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2101      	movs	r1, #1
 80040f8:	438a      	bics	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 fcb4 	bl	8004a6c <UART_SetConfig>
 8004104:	0003      	movs	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e024      	b.n	8004158 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0018      	movs	r0, r3
 800411a:	f000 fef1 	bl	8004f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	490d      	ldr	r1, [pc, #52]	; (8004160 <HAL_UART_Init+0xa4>)
 800412a:	400a      	ands	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	212a      	movs	r1, #42	; 0x2a
 800413a:	438a      	bics	r2, r1
 800413c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2101      	movs	r1, #1
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f000 ff89 	bl	8005068 <UART_CheckIdleState>
 8004156:	0003      	movs	r3, r0
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b002      	add	sp, #8
 800415e:	bd80      	pop	{r7, pc}
 8004160:	ffffb7ff 	.word	0xffffb7ff

08004164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	1dbb      	adds	r3, r7, #6
 8004172:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004178:	2b20      	cmp	r3, #32
 800417a:	d000      	beq.n	800417e <HAL_UART_Transmit+0x1a>
 800417c:	e08c      	b.n	8004298 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_UART_Transmit+0x28>
 8004184:	1dbb      	adds	r3, r7, #6
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e084      	b.n	800429a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	015b      	lsls	r3, r3, #5
 8004198:	429a      	cmp	r2, r3
 800419a:	d109      	bne.n	80041b0 <HAL_UART_Transmit+0x4c>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2201      	movs	r2, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	d001      	beq.n	80041b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e074      	b.n	800429a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2284      	movs	r2, #132	; 0x84
 80041b4:	2100      	movs	r1, #0
 80041b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2221      	movs	r2, #33	; 0x21
 80041bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041be:	f7fe fd67 	bl	8002c90 <HAL_GetTick>
 80041c2:	0003      	movs	r3, r0
 80041c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1dba      	adds	r2, r7, #6
 80041ca:	2150      	movs	r1, #80	; 0x50
 80041cc:	8812      	ldrh	r2, [r2, #0]
 80041ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1dba      	adds	r2, r7, #6
 80041d4:	2152      	movs	r1, #82	; 0x52
 80041d6:	8812      	ldrh	r2, [r2, #0]
 80041d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	015b      	lsls	r3, r3, #5
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d108      	bne.n	80041f8 <HAL_UART_Transmit+0x94>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e003      	b.n	8004200 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004200:	e02f      	b.n	8004262 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	0013      	movs	r3, r2
 800420c:	2200      	movs	r2, #0
 800420e:	2180      	movs	r1, #128	; 0x80
 8004210:	f000 ffd2 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8004214:	1e03      	subs	r3, r0, #0
 8004216:	d004      	beq.n	8004222 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e03b      	b.n	800429a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	001a      	movs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	05d2      	lsls	r2, r2, #23
 8004234:	0dd2      	lsrs	r2, r2, #23
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	3302      	adds	r3, #2
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e007      	b.n	8004250 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	781a      	ldrb	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3301      	adds	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2252      	movs	r2, #82	; 0x52
 8004254:	5a9b      	ldrh	r3, [r3, r2]
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b299      	uxth	r1, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2252      	movs	r2, #82	; 0x52
 8004260:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2252      	movs	r2, #82	; 0x52
 8004266:	5a9b      	ldrh	r3, [r3, r2]
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1c9      	bne.n	8004202 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	0013      	movs	r3, r2
 8004278:	2200      	movs	r2, #0
 800427a:	2140      	movs	r1, #64	; 0x40
 800427c:	f000 ff9c 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8004280:	1e03      	subs	r3, r0, #0
 8004282:	d004      	beq.n	800428e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e005      	b.n	800429a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b008      	add	sp, #32
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	1dbb      	adds	r3, r7, #6
 80042b2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2280      	movs	r2, #128	; 0x80
 80042b8:	589b      	ldr	r3, [r3, r2]
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d000      	beq.n	80042c0 <HAL_UART_Receive+0x1c>
 80042be:	e0d0      	b.n	8004462 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_UART_Receive+0x2a>
 80042c6:	1dbb      	adds	r3, r7, #6
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0c8      	b.n	8004464 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	015b      	lsls	r3, r3, #5
 80042da:	429a      	cmp	r2, r3
 80042dc:	d109      	bne.n	80042f2 <HAL_UART_Receive+0x4e>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2201      	movs	r2, #1
 80042ea:	4013      	ands	r3, r2
 80042ec:	d001      	beq.n	80042f2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0b8      	b.n	8004464 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2284      	movs	r2, #132	; 0x84
 80042f6:	2100      	movs	r1, #0
 80042f8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	2122      	movs	r1, #34	; 0x22
 8004300:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004308:	f7fe fcc2 	bl	8002c90 <HAL_GetTick>
 800430c:	0003      	movs	r3, r0
 800430e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1dba      	adds	r2, r7, #6
 8004314:	2158      	movs	r1, #88	; 0x58
 8004316:	8812      	ldrh	r2, [r2, #0]
 8004318:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1dba      	adds	r2, r7, #6
 800431e:	215a      	movs	r1, #90	; 0x5a
 8004320:	8812      	ldrh	r2, [r2, #0]
 8004322:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	015b      	lsls	r3, r3, #5
 800432c:	429a      	cmp	r2, r3
 800432e:	d10d      	bne.n	800434c <HAL_UART_Receive+0xa8>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <HAL_UART_Receive+0x9e>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	225c      	movs	r2, #92	; 0x5c
 800433c:	494b      	ldr	r1, [pc, #300]	; (800446c <HAL_UART_Receive+0x1c8>)
 800433e:	5299      	strh	r1, [r3, r2]
 8004340:	e02e      	b.n	80043a0 <HAL_UART_Receive+0xfc>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	225c      	movs	r2, #92	; 0x5c
 8004346:	21ff      	movs	r1, #255	; 0xff
 8004348:	5299      	strh	r1, [r3, r2]
 800434a:	e029      	b.n	80043a0 <HAL_UART_Receive+0xfc>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_UART_Receive+0xcc>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <HAL_UART_Receive+0xc2>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	225c      	movs	r2, #92	; 0x5c
 8004360:	21ff      	movs	r1, #255	; 0xff
 8004362:	5299      	strh	r1, [r3, r2]
 8004364:	e01c      	b.n	80043a0 <HAL_UART_Receive+0xfc>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	225c      	movs	r2, #92	; 0x5c
 800436a:	217f      	movs	r1, #127	; 0x7f
 800436c:	5299      	strh	r1, [r3, r2]
 800436e:	e017      	b.n	80043a0 <HAL_UART_Receive+0xfc>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	055b      	lsls	r3, r3, #21
 8004378:	429a      	cmp	r2, r3
 800437a:	d10d      	bne.n	8004398 <HAL_UART_Receive+0xf4>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <HAL_UART_Receive+0xea>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	225c      	movs	r2, #92	; 0x5c
 8004388:	217f      	movs	r1, #127	; 0x7f
 800438a:	5299      	strh	r1, [r3, r2]
 800438c:	e008      	b.n	80043a0 <HAL_UART_Receive+0xfc>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	225c      	movs	r2, #92	; 0x5c
 8004392:	213f      	movs	r1, #63	; 0x3f
 8004394:	5299      	strh	r1, [r3, r2]
 8004396:	e003      	b.n	80043a0 <HAL_UART_Receive+0xfc>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	225c      	movs	r2, #92	; 0x5c
 800439c:	2100      	movs	r1, #0
 800439e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80043a0:	2312      	movs	r3, #18
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	215c      	movs	r1, #92	; 0x5c
 80043a8:	5a52      	ldrh	r2, [r2, r1]
 80043aa:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	015b      	lsls	r3, r3, #5
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d108      	bne.n	80043ca <HAL_UART_Receive+0x126>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e003      	b.n	80043d2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80043d2:	e03a      	b.n	800444a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	0013      	movs	r3, r2
 80043de:	2200      	movs	r2, #0
 80043e0:	2120      	movs	r1, #32
 80043e2:	f000 fee9 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 80043e6:	1e03      	subs	r3, r0, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2280      	movs	r2, #128	; 0x80
 80043ee:	2120      	movs	r1, #32
 80043f0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e036      	b.n	8004464 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10e      	bne.n	800441a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	b29b      	uxth	r3, r3
 8004404:	2212      	movs	r2, #18
 8004406:	18ba      	adds	r2, r7, r2
 8004408:	8812      	ldrh	r2, [r2, #0]
 800440a:	4013      	ands	r3, r2
 800440c:	b29a      	uxth	r2, r3
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	3302      	adds	r3, #2
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	e00e      	b.n	8004438 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2212      	movs	r2, #18
 8004424:	18ba      	adds	r2, r7, r2
 8004426:	8812      	ldrh	r2, [r2, #0]
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	4013      	ands	r3, r2
 800442c:	b2da      	uxtb	r2, r3
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3301      	adds	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	225a      	movs	r2, #90	; 0x5a
 800443c:	5a9b      	ldrh	r3, [r3, r2]
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b299      	uxth	r1, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	225a      	movs	r2, #90	; 0x5a
 8004448:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	225a      	movs	r2, #90	; 0x5a
 800444e:	5a9b      	ldrh	r3, [r3, r2]
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1be      	bne.n	80043d4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2280      	movs	r2, #128	; 0x80
 800445a:	2120      	movs	r1, #32
 800445c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b008      	add	sp, #32
 800446a:	bd80      	pop	{r7, pc}
 800446c:	000001ff 	.word	0x000001ff

08004470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b0ab      	sub	sp, #172	; 0xac
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	22a4      	movs	r2, #164	; 0xa4
 8004480:	18b9      	adds	r1, r7, r2
 8004482:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	20a0      	movs	r0, #160	; 0xa0
 800448c:	1839      	adds	r1, r7, r0
 800448e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	219c      	movs	r1, #156	; 0x9c
 8004498:	1879      	adds	r1, r7, r1
 800449a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800449c:	0011      	movs	r1, r2
 800449e:	18bb      	adds	r3, r7, r2
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a99      	ldr	r2, [pc, #612]	; (8004708 <HAL_UART_IRQHandler+0x298>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	2298      	movs	r2, #152	; 0x98
 80044a8:	18bc      	adds	r4, r7, r2
 80044aa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80044ac:	18bb      	adds	r3, r7, r2
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d114      	bne.n	80044de <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2220      	movs	r2, #32
 80044ba:	4013      	ands	r3, r2
 80044bc:	d00f      	beq.n	80044de <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2220      	movs	r2, #32
 80044c4:	4013      	ands	r3, r2
 80044c6:	d00a      	beq.n	80044de <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d100      	bne.n	80044d2 <HAL_UART_IRQHandler+0x62>
 80044d0:	e2a0      	b.n	8004a14 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	0010      	movs	r0, r2
 80044da:	4798      	blx	r3
      }
      return;
 80044dc:	e29a      	b.n	8004a14 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044de:	2398      	movs	r3, #152	; 0x98
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d100      	bne.n	80044ea <HAL_UART_IRQHandler+0x7a>
 80044e8:	e114      	b.n	8004714 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044ea:	239c      	movs	r3, #156	; 0x9c
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2201      	movs	r2, #1
 80044f2:	4013      	ands	r3, r2
 80044f4:	d106      	bne.n	8004504 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044f6:	23a0      	movs	r3, #160	; 0xa0
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a83      	ldr	r2, [pc, #524]	; (800470c <HAL_UART_IRQHandler+0x29c>)
 80044fe:	4013      	ands	r3, r2
 8004500:	d100      	bne.n	8004504 <HAL_UART_IRQHandler+0x94>
 8004502:	e107      	b.n	8004714 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004504:	23a4      	movs	r3, #164	; 0xa4
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	4013      	ands	r3, r2
 800450e:	d012      	beq.n	8004536 <HAL_UART_IRQHandler+0xc6>
 8004510:	23a0      	movs	r3, #160	; 0xa0
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4013      	ands	r3, r2
 800451c:	d00b      	beq.n	8004536 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2284      	movs	r2, #132	; 0x84
 800452a:	589b      	ldr	r3, [r3, r2]
 800452c:	2201      	movs	r2, #1
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2184      	movs	r1, #132	; 0x84
 8004534:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004536:	23a4      	movs	r3, #164	; 0xa4
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2202      	movs	r2, #2
 800453e:	4013      	ands	r3, r2
 8004540:	d011      	beq.n	8004566 <HAL_UART_IRQHandler+0xf6>
 8004542:	239c      	movs	r3, #156	; 0x9c
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2201      	movs	r2, #1
 800454a:	4013      	ands	r3, r2
 800454c:	d00b      	beq.n	8004566 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2202      	movs	r2, #2
 8004554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2284      	movs	r2, #132	; 0x84
 800455a:	589b      	ldr	r3, [r3, r2]
 800455c:	2204      	movs	r2, #4
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2184      	movs	r1, #132	; 0x84
 8004564:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004566:	23a4      	movs	r3, #164	; 0xa4
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2204      	movs	r2, #4
 800456e:	4013      	ands	r3, r2
 8004570:	d011      	beq.n	8004596 <HAL_UART_IRQHandler+0x126>
 8004572:	239c      	movs	r3, #156	; 0x9c
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2201      	movs	r2, #1
 800457a:	4013      	ands	r3, r2
 800457c:	d00b      	beq.n	8004596 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2204      	movs	r2, #4
 8004584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2284      	movs	r2, #132	; 0x84
 800458a:	589b      	ldr	r3, [r3, r2]
 800458c:	2202      	movs	r2, #2
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2184      	movs	r1, #132	; 0x84
 8004594:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004596:	23a4      	movs	r3, #164	; 0xa4
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2208      	movs	r2, #8
 800459e:	4013      	ands	r3, r2
 80045a0:	d017      	beq.n	80045d2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045a2:	23a0      	movs	r3, #160	; 0xa0
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2220      	movs	r2, #32
 80045aa:	4013      	ands	r3, r2
 80045ac:	d105      	bne.n	80045ba <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045ae:	239c      	movs	r3, #156	; 0x9c
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2201      	movs	r2, #1
 80045b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045b8:	d00b      	beq.n	80045d2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2208      	movs	r2, #8
 80045c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2284      	movs	r2, #132	; 0x84
 80045c6:	589b      	ldr	r3, [r3, r2]
 80045c8:	2208      	movs	r2, #8
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2184      	movs	r1, #132	; 0x84
 80045d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045d2:	23a4      	movs	r3, #164	; 0xa4
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	d013      	beq.n	8004608 <HAL_UART_IRQHandler+0x198>
 80045e0:	23a0      	movs	r3, #160	; 0xa0
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	04db      	lsls	r3, r3, #19
 80045ea:	4013      	ands	r3, r2
 80045ec:	d00c      	beq.n	8004608 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	0112      	lsls	r2, r2, #4
 80045f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2284      	movs	r2, #132	; 0x84
 80045fc:	589b      	ldr	r3, [r3, r2]
 80045fe:	2220      	movs	r2, #32
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2184      	movs	r1, #132	; 0x84
 8004606:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2284      	movs	r2, #132	; 0x84
 800460c:	589b      	ldr	r3, [r3, r2]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d100      	bne.n	8004614 <HAL_UART_IRQHandler+0x1a4>
 8004612:	e201      	b.n	8004a18 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004614:	23a4      	movs	r3, #164	; 0xa4
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2220      	movs	r2, #32
 800461c:	4013      	ands	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004620:	23a0      	movs	r3, #160	; 0xa0
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2220      	movs	r2, #32
 8004628:	4013      	ands	r3, r2
 800462a:	d008      	beq.n	800463e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	0010      	movs	r0, r2
 800463c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2284      	movs	r2, #132	; 0x84
 8004642:	589b      	ldr	r3, [r3, r2]
 8004644:	2194      	movs	r1, #148	; 0x94
 8004646:	187a      	adds	r2, r7, r1
 8004648:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2240      	movs	r2, #64	; 0x40
 8004652:	4013      	ands	r3, r2
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d004      	beq.n	8004662 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004658:	187b      	adds	r3, r7, r1
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2228      	movs	r2, #40	; 0x28
 800465e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004660:	d047      	beq.n	80046f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0018      	movs	r0, r3
 8004666:	f000 fe11 	bl	800528c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2240      	movs	r2, #64	; 0x40
 8004672:	4013      	ands	r3, r2
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d137      	bne.n	80046e8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004678:	f3ef 8310 	mrs	r3, PRIMASK
 800467c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800467e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004680:	2090      	movs	r0, #144	; 0x90
 8004682:	183a      	adds	r2, r7, r0
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	2301      	movs	r3, #1
 8004688:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468c:	f383 8810 	msr	PRIMASK, r3
}
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	438a      	bics	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]
 80046a2:	183b      	adds	r3, r7, r0
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d012      	beq.n	80046de <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <HAL_UART_IRQHandler+0x2a0>)
 80046be:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c4:	0018      	movs	r0, r3
 80046c6:	f7fe fc2f 	bl	8002f28 <HAL_DMA_Abort_IT>
 80046ca:	1e03      	subs	r3, r0, #0
 80046cc:	d01a      	beq.n	8004704 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d8:	0018      	movs	r0, r3
 80046da:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	e012      	b.n	8004704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 f9af 	bl	8004a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e6:	e00d      	b.n	8004704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 f9aa 	bl	8004a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e008      	b.n	8004704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 f9a5 	bl	8004a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2284      	movs	r2, #132	; 0x84
 80046fe:	2100      	movs	r1, #0
 8004700:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004702:	e189      	b.n	8004a18 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	46c0      	nop			; (mov r8, r8)
    return;
 8004706:	e187      	b.n	8004a18 <HAL_UART_IRQHandler+0x5a8>
 8004708:	0000080f 	.word	0x0000080f
 800470c:	04000120 	.word	0x04000120
 8004710:	08005355 	.word	0x08005355

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004718:	2b01      	cmp	r3, #1
 800471a:	d000      	beq.n	800471e <HAL_UART_IRQHandler+0x2ae>
 800471c:	e13b      	b.n	8004996 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800471e:	23a4      	movs	r3, #164	; 0xa4
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2210      	movs	r2, #16
 8004726:	4013      	ands	r3, r2
 8004728:	d100      	bne.n	800472c <HAL_UART_IRQHandler+0x2bc>
 800472a:	e134      	b.n	8004996 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800472c:	23a0      	movs	r3, #160	; 0xa0
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2210      	movs	r2, #16
 8004734:	4013      	ands	r3, r2
 8004736:	d100      	bne.n	800473a <HAL_UART_IRQHandler+0x2ca>
 8004738:	e12d      	b.n	8004996 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2210      	movs	r2, #16
 8004740:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2240      	movs	r2, #64	; 0x40
 800474a:	4013      	ands	r3, r2
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d000      	beq.n	8004752 <HAL_UART_IRQHandler+0x2e2>
 8004750:	e0a1      	b.n	8004896 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	217e      	movs	r1, #126	; 0x7e
 800475c:	187b      	adds	r3, r7, r1
 800475e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004760:	187b      	adds	r3, r7, r1
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d100      	bne.n	800476a <HAL_UART_IRQHandler+0x2fa>
 8004768:	e158      	b.n	8004a1c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2258      	movs	r2, #88	; 0x58
 800476e:	5a9b      	ldrh	r3, [r3, r2]
 8004770:	187a      	adds	r2, r7, r1
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d300      	bcc.n	800477a <HAL_UART_IRQHandler+0x30a>
 8004778:	e150      	b.n	8004a1c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	187a      	adds	r2, r7, r1
 800477e:	215a      	movs	r1, #90	; 0x5a
 8004780:	8812      	ldrh	r2, [r2, #0]
 8004782:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2220      	movs	r2, #32
 800478e:	4013      	ands	r3, r2
 8004790:	d16f      	bne.n	8004872 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004792:	f3ef 8310 	mrs	r3, PRIMASK
 8004796:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479a:	67bb      	str	r3, [r7, #120]	; 0x78
 800479c:	2301      	movs	r3, #1
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	499e      	ldr	r1, [pc, #632]	; (8004a2c <HAL_UART_IRQHandler+0x5bc>)
 80047b4:	400a      	ands	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c4:	f3ef 8310 	mrs	r3, PRIMASK
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	677b      	str	r3, [r7, #116]	; 0x74
 80047ce:	2301      	movs	r3, #1
 80047d0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d4:	f383 8810 	msr	PRIMASK, r3
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2101      	movs	r1, #1
 80047e6:	438a      	bics	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]
 80047ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ec:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f0:	f383 8810 	msr	PRIMASK, r3
}
 80047f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f6:	f3ef 8310 	mrs	r3, PRIMASK
 80047fa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80047fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004800:	2301      	movs	r3, #1
 8004802:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	438a      	bics	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800481e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004822:	f383 8810 	msr	PRIMASK, r3
}
 8004826:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2280      	movs	r2, #128	; 0x80
 800482c:	2120      	movs	r1, #32
 800482e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004836:	f3ef 8310 	mrs	r3, PRIMASK
 800483a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004840:	2301      	movs	r3, #1
 8004842:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2110      	movs	r1, #16
 8004858:	438a      	bics	r2, r1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004862:	f383 8810 	msr	PRIMASK, r3
}
 8004866:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	0018      	movs	r0, r3
 800486e:	f7fe fb1b 	bl	8002ea8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2258      	movs	r2, #88	; 0x58
 800487c:	5a9a      	ldrh	r2, [r3, r2]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	215a      	movs	r1, #90	; 0x5a
 8004882:	5a5b      	ldrh	r3, [r3, r1]
 8004884:	b29b      	uxth	r3, r3
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	b29a      	uxth	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0011      	movs	r1, r2
 800488e:	0018      	movs	r0, r3
 8004890:	f000 f8e0 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004894:	e0c2      	b.n	8004a1c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2258      	movs	r2, #88	; 0x58
 800489a:	5a99      	ldrh	r1, [r3, r2]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	225a      	movs	r2, #90	; 0x5a
 80048a0:	5a9b      	ldrh	r3, [r3, r2]
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	208e      	movs	r0, #142	; 0x8e
 80048a6:	183b      	adds	r3, r7, r0
 80048a8:	1a8a      	subs	r2, r1, r2
 80048aa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	225a      	movs	r2, #90	; 0x5a
 80048b0:	5a9b      	ldrh	r3, [r3, r2]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d100      	bne.n	80048ba <HAL_UART_IRQHandler+0x44a>
 80048b8:	e0b2      	b.n	8004a20 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80048ba:	183b      	adds	r3, r7, r0
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d100      	bne.n	80048c4 <HAL_UART_IRQHandler+0x454>
 80048c2:	e0ad      	b.n	8004a20 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048cc:	2488      	movs	r4, #136	; 0x88
 80048ce:	193a      	adds	r2, r7, r4
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	2301      	movs	r3, #1
 80048d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f383 8810 	msr	PRIMASK, r3
}
 80048dc:	46c0      	nop			; (mov r8, r8)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4951      	ldr	r1, [pc, #324]	; (8004a30 <HAL_UART_IRQHandler+0x5c0>)
 80048ea:	400a      	ands	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	193b      	adds	r3, r7, r4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004900:	61bb      	str	r3, [r7, #24]
  return(result);
 8004902:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004904:	2484      	movs	r4, #132	; 0x84
 8004906:	193a      	adds	r2, r7, r4
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	2301      	movs	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	438a      	bics	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
 8004926:	193b      	adds	r3, r7, r4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	2120      	movs	r1, #32
 800493a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004948:	f3ef 8310 	mrs	r3, PRIMASK
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004950:	2480      	movs	r4, #128	; 0x80
 8004952:	193a      	adds	r2, r7, r4
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	2301      	movs	r3, #1
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	f383 8810 	msr	PRIMASK, r3
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2110      	movs	r1, #16
 800496e:	438a      	bics	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	193b      	adds	r3, r7, r4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	f383 8810 	msr	PRIMASK, r3
}
 800497e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004986:	183b      	adds	r3, r7, r0
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0011      	movs	r1, r2
 800498e:	0018      	movs	r0, r3
 8004990:	f000 f860 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004994:	e044      	b.n	8004a20 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004996:	23a4      	movs	r3, #164	; 0xa4
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	035b      	lsls	r3, r3, #13
 80049a0:	4013      	ands	r3, r2
 80049a2:	d010      	beq.n	80049c6 <HAL_UART_IRQHandler+0x556>
 80049a4:	239c      	movs	r3, #156	; 0x9c
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	2380      	movs	r3, #128	; 0x80
 80049ac:	03db      	lsls	r3, r3, #15
 80049ae:	4013      	ands	r3, r2
 80049b0:	d009      	beq.n	80049c6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	0352      	lsls	r2, r2, #13
 80049ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	0018      	movs	r0, r3
 80049c0:	f000 fd0a 	bl	80053d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049c4:	e02f      	b.n	8004a26 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049c6:	23a4      	movs	r3, #164	; 0xa4
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2280      	movs	r2, #128	; 0x80
 80049ce:	4013      	ands	r3, r2
 80049d0:	d00f      	beq.n	80049f2 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049d2:	23a0      	movs	r3, #160	; 0xa0
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2280      	movs	r2, #128	; 0x80
 80049da:	4013      	ands	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01e      	beq.n	8004a24 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	0010      	movs	r0, r2
 80049ee:	4798      	blx	r3
    }
    return;
 80049f0:	e018      	b.n	8004a24 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049f2:	23a4      	movs	r3, #164	; 0xa4
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	4013      	ands	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_UART_IRQHandler+0x5b6>
 80049fe:	23a0      	movs	r3, #160	; 0xa0
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2240      	movs	r2, #64	; 0x40
 8004a06:	4013      	ands	r3, r2
 8004a08:	d00d      	beq.n	8004a26 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 fcb8 	bl	8005382 <UART_EndTransmit_IT>
    return;
 8004a12:	e008      	b.n	8004a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	e006      	b.n	8004a26 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	e004      	b.n	8004a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	e002      	b.n	8004a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	e000      	b.n	8004a26 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004a24:	46c0      	nop			; (mov r8, r8)
  }

}
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b02b      	add	sp, #172	; 0xac
 8004a2a:	bd90      	pop	{r4, r7, pc}
 8004a2c:	fffffeff 	.word	0xfffffeff
 8004a30:	fffffedf 	.word	0xfffffedf

08004a34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b002      	add	sp, #8
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b002      	add	sp, #8
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	000a      	movs	r2, r1
 8004a5e:	1cbb      	adds	r3, r7, #2
 8004a60:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b002      	add	sp, #8
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b5b0      	push	{r4, r5, r7, lr}
 8004a6e:	b08e      	sub	sp, #56	; 0x38
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a74:	231a      	movs	r3, #26
 8004a76:	2218      	movs	r2, #24
 8004a78:	189b      	adds	r3, r3, r2
 8004a7a:	19db      	adds	r3, r3, r7
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4ab4      	ldr	r2, [pc, #720]	; (8004d70 <UART_SetConfig+0x304>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4aaf      	ldr	r2, [pc, #700]	; (8004d74 <UART_SetConfig+0x308>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4aa9      	ldr	r2, [pc, #676]	; (8004d78 <UART_SetConfig+0x30c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004adc:	4313      	orrs	r3, r2
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4aa5      	ldr	r2, [pc, #660]	; (8004d7c <UART_SetConfig+0x310>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af2:	430a      	orrs	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4aa1      	ldr	r2, [pc, #644]	; (8004d80 <UART_SetConfig+0x314>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d131      	bne.n	8004b64 <UART_SetConfig+0xf8>
 8004b00:	4ba0      	ldr	r3, [pc, #640]	; (8004d84 <UART_SetConfig+0x318>)
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	220c      	movs	r2, #12
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d01d      	beq.n	8004b48 <UART_SetConfig+0xdc>
 8004b0c:	d823      	bhi.n	8004b56 <UART_SetConfig+0xea>
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d00c      	beq.n	8004b2c <UART_SetConfig+0xc0>
 8004b12:	d820      	bhi.n	8004b56 <UART_SetConfig+0xea>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <UART_SetConfig+0xb2>
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d00e      	beq.n	8004b3a <UART_SetConfig+0xce>
 8004b1c:	e01b      	b.n	8004b56 <UART_SetConfig+0xea>
 8004b1e:	231b      	movs	r3, #27
 8004b20:	2218      	movs	r2, #24
 8004b22:	189b      	adds	r3, r3, r2
 8004b24:	19db      	adds	r3, r3, r7
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e065      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004b2c:	231b      	movs	r3, #27
 8004b2e:	2218      	movs	r2, #24
 8004b30:	189b      	adds	r3, r3, r2
 8004b32:	19db      	adds	r3, r3, r7
 8004b34:	2202      	movs	r2, #2
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	e05e      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004b3a:	231b      	movs	r3, #27
 8004b3c:	2218      	movs	r2, #24
 8004b3e:	189b      	adds	r3, r3, r2
 8004b40:	19db      	adds	r3, r3, r7
 8004b42:	2204      	movs	r2, #4
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e057      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004b48:	231b      	movs	r3, #27
 8004b4a:	2218      	movs	r2, #24
 8004b4c:	189b      	adds	r3, r3, r2
 8004b4e:	19db      	adds	r3, r3, r7
 8004b50:	2208      	movs	r2, #8
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e050      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004b56:	231b      	movs	r3, #27
 8004b58:	2218      	movs	r2, #24
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	19db      	adds	r3, r3, r7
 8004b5e:	2210      	movs	r2, #16
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e049      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a83      	ldr	r2, [pc, #524]	; (8004d78 <UART_SetConfig+0x30c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d13e      	bne.n	8004bec <UART_SetConfig+0x180>
 8004b6e:	4b85      	ldr	r3, [pc, #532]	; (8004d84 <UART_SetConfig+0x318>)
 8004b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b72:	23c0      	movs	r3, #192	; 0xc0
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	4013      	ands	r3, r2
 8004b78:	22c0      	movs	r2, #192	; 0xc0
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d027      	beq.n	8004bd0 <UART_SetConfig+0x164>
 8004b80:	22c0      	movs	r2, #192	; 0xc0
 8004b82:	0112      	lsls	r2, r2, #4
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d82a      	bhi.n	8004bde <UART_SetConfig+0x172>
 8004b88:	2280      	movs	r2, #128	; 0x80
 8004b8a:	0112      	lsls	r2, r2, #4
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d011      	beq.n	8004bb4 <UART_SetConfig+0x148>
 8004b90:	2280      	movs	r2, #128	; 0x80
 8004b92:	0112      	lsls	r2, r2, #4
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d822      	bhi.n	8004bde <UART_SetConfig+0x172>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <UART_SetConfig+0x13a>
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	00d2      	lsls	r2, r2, #3
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <UART_SetConfig+0x156>
 8004ba4:	e01b      	b.n	8004bde <UART_SetConfig+0x172>
 8004ba6:	231b      	movs	r3, #27
 8004ba8:	2218      	movs	r2, #24
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	19db      	adds	r3, r3, r7
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e021      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004bb4:	231b      	movs	r3, #27
 8004bb6:	2218      	movs	r2, #24
 8004bb8:	189b      	adds	r3, r3, r2
 8004bba:	19db      	adds	r3, r3, r7
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e01a      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004bc2:	231b      	movs	r3, #27
 8004bc4:	2218      	movs	r2, #24
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	19db      	adds	r3, r3, r7
 8004bca:	2204      	movs	r2, #4
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e013      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004bd0:	231b      	movs	r3, #27
 8004bd2:	2218      	movs	r2, #24
 8004bd4:	189b      	adds	r3, r3, r2
 8004bd6:	19db      	adds	r3, r3, r7
 8004bd8:	2208      	movs	r2, #8
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e00c      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004bde:	231b      	movs	r3, #27
 8004be0:	2218      	movs	r2, #24
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	19db      	adds	r3, r3, r7
 8004be6:	2210      	movs	r2, #16
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	e005      	b.n	8004bf8 <UART_SetConfig+0x18c>
 8004bec:	231b      	movs	r3, #27
 8004bee:	2218      	movs	r2, #24
 8004bf0:	189b      	adds	r3, r3, r2
 8004bf2:	19db      	adds	r3, r3, r7
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5e      	ldr	r2, [pc, #376]	; (8004d78 <UART_SetConfig+0x30c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d000      	beq.n	8004c04 <UART_SetConfig+0x198>
 8004c02:	e084      	b.n	8004d0e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c04:	231b      	movs	r3, #27
 8004c06:	2218      	movs	r2, #24
 8004c08:	189b      	adds	r3, r3, r2
 8004c0a:	19db      	adds	r3, r3, r7
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d01d      	beq.n	8004c4e <UART_SetConfig+0x1e2>
 8004c12:	dc20      	bgt.n	8004c56 <UART_SetConfig+0x1ea>
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d015      	beq.n	8004c44 <UART_SetConfig+0x1d8>
 8004c18:	dc1d      	bgt.n	8004c56 <UART_SetConfig+0x1ea>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <UART_SetConfig+0x1b8>
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d005      	beq.n	8004c2e <UART_SetConfig+0x1c2>
 8004c22:	e018      	b.n	8004c56 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7ff f8f2 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c2c:	e01c      	b.n	8004c68 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c2e:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <UART_SetConfig+0x318>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	4013      	ands	r3, r2
 8004c36:	d002      	beq.n	8004c3e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c38:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <UART_SetConfig+0x31c>)
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c3c:	e014      	b.n	8004c68 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004c3e:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <UART_SetConfig+0x320>)
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c42:	e011      	b.n	8004c68 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c44:	f7ff f832 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c4c:	e00c      	b.n	8004c68 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c54:	e008      	b.n	8004c68 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c5a:	231a      	movs	r3, #26
 8004c5c:	2218      	movs	r2, #24
 8004c5e:	189b      	adds	r3, r3, r2
 8004c60:	19db      	adds	r3, r3, r7
 8004c62:	2201      	movs	r2, #1
 8004c64:	701a      	strb	r2, [r3, #0]
        break;
 8004c66:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d100      	bne.n	8004c70 <UART_SetConfig+0x204>
 8004c6e:	e12f      	b.n	8004ed0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	0013      	movs	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	189b      	adds	r3, r3, r2
 8004c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d305      	bcc.n	8004c8c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d906      	bls.n	8004c9a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004c8c:	231a      	movs	r3, #26
 8004c8e:	2218      	movs	r2, #24
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	19db      	adds	r3, r3, r7
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e11a      	b.n	8004ed0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	6939      	ldr	r1, [r7, #16]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	000b      	movs	r3, r1
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	0010      	movs	r0, r2
 8004cac:	0205      	lsls	r5, r0, #8
 8004cae:	431d      	orrs	r5, r3
 8004cb0:	000b      	movs	r3, r1
 8004cb2:	021c      	lsls	r4, r3, #8
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	60bb      	str	r3, [r7, #8]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68b8      	ldr	r0, [r7, #8]
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	1900      	adds	r0, r0, r4
 8004cc6:	4169      	adcs	r1, r5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f7fb fbe7 	bl	80004a8 <__aeabi_uldivmod>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	000b      	movs	r3, r1
 8004cde:	0013      	movs	r3, r2
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce4:	23c0      	movs	r3, #192	; 0xc0
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d309      	bcc.n	8004d00 <UART_SetConfig+0x294>
 8004cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	035b      	lsls	r3, r3, #13
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d204      	bcs.n	8004d00 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	e0e7      	b.n	8004ed0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004d00:	231a      	movs	r3, #26
 8004d02:	2218      	movs	r2, #24
 8004d04:	189b      	adds	r3, r3, r2
 8004d06:	19db      	adds	r3, r3, r7
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e0e0      	b.n	8004ed0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d000      	beq.n	8004d1c <UART_SetConfig+0x2b0>
 8004d1a:	e082      	b.n	8004e22 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004d1c:	231b      	movs	r3, #27
 8004d1e:	2218      	movs	r2, #24
 8004d20:	189b      	adds	r3, r3, r2
 8004d22:	19db      	adds	r3, r3, r7
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d834      	bhi.n	8004d94 <UART_SetConfig+0x328>
 8004d2a:	009a      	lsls	r2, r3, #2
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <UART_SetConfig+0x324>)
 8004d2e:	18d3      	adds	r3, r2, r3
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d34:	f7ff f86a 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d3c:	e033      	b.n	8004da6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d3e:	f7ff f87b 	bl	8003e38 <HAL_RCC_GetPCLK2Freq>
 8004d42:	0003      	movs	r3, r0
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d46:	e02e      	b.n	8004da6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d48:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <UART_SetConfig+0x318>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d002      	beq.n	8004d58 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d52:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <UART_SetConfig+0x31c>)
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d56:	e026      	b.n	8004da6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <UART_SetConfig+0x320>)
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d5c:	e023      	b.n	8004da6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5e:	f7fe ffa5 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8004d62:	0003      	movs	r3, r0
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d66:	e01e      	b.n	8004da6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d6e:	e01a      	b.n	8004da6 <UART_SetConfig+0x33a>
 8004d70:	efff69f3 	.word	0xefff69f3
 8004d74:	ffffcfff 	.word	0xffffcfff
 8004d78:	40004800 	.word	0x40004800
 8004d7c:	fffff4ff 	.word	0xfffff4ff
 8004d80:	40004400 	.word	0x40004400
 8004d84:	40021000 	.word	0x40021000
 8004d88:	003d0900 	.word	0x003d0900
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	08008c64 	.word	0x08008c64
      default:
        pclk = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d98:	231a      	movs	r3, #26
 8004d9a:	2218      	movs	r2, #24
 8004d9c:	189b      	adds	r3, r3, r2
 8004d9e:	19db      	adds	r3, r3, r7
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
        break;
 8004da4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d100      	bne.n	8004dae <UART_SetConfig+0x342>
 8004dac:	e090      	b.n	8004ed0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	005a      	lsls	r2, r3, #1
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	18d2      	adds	r2, r2, r3
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	0010      	movs	r0, r2
 8004dc2:	f7fb f9bd 	bl	8000140 <__udivsi3>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	2b0f      	cmp	r3, #15
 8004dce:	d921      	bls.n	8004e14 <UART_SetConfig+0x3a8>
 8004dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	025b      	lsls	r3, r3, #9
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d21c      	bcs.n	8004e14 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	200e      	movs	r0, #14
 8004de0:	2418      	movs	r4, #24
 8004de2:	1903      	adds	r3, r0, r4
 8004de4:	19db      	adds	r3, r3, r7
 8004de6:	210f      	movs	r1, #15
 8004de8:	438a      	bics	r2, r1
 8004dea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2207      	movs	r2, #7
 8004df4:	4013      	ands	r3, r2
 8004df6:	b299      	uxth	r1, r3
 8004df8:	1903      	adds	r3, r0, r4
 8004dfa:	19db      	adds	r3, r3, r7
 8004dfc:	1902      	adds	r2, r0, r4
 8004dfe:	19d2      	adds	r2, r2, r7
 8004e00:	8812      	ldrh	r2, [r2, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	1902      	adds	r2, r0, r4
 8004e0c:	19d2      	adds	r2, r2, r7
 8004e0e:	8812      	ldrh	r2, [r2, #0]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	e05d      	b.n	8004ed0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004e14:	231a      	movs	r3, #26
 8004e16:	2218      	movs	r2, #24
 8004e18:	189b      	adds	r3, r3, r2
 8004e1a:	19db      	adds	r3, r3, r7
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
 8004e20:	e056      	b.n	8004ed0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e22:	231b      	movs	r3, #27
 8004e24:	2218      	movs	r2, #24
 8004e26:	189b      	adds	r3, r3, r2
 8004e28:	19db      	adds	r3, r3, r7
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d822      	bhi.n	8004e76 <UART_SetConfig+0x40a>
 8004e30:	009a      	lsls	r2, r3, #2
 8004e32:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <UART_SetConfig+0x484>)
 8004e34:	18d3      	adds	r3, r2, r3
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3a:	f7fe ffe7 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e42:	e021      	b.n	8004e88 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fe fff8 	bl	8003e38 <HAL_RCC_GetPCLK2Freq>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e4c:	e01c      	b.n	8004e88 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4e:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <UART_SetConfig+0x488>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2210      	movs	r2, #16
 8004e54:	4013      	ands	r3, r2
 8004e56:	d002      	beq.n	8004e5e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e58:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <UART_SetConfig+0x48c>)
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e5c:	e014      	b.n	8004e88 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8004e5e:	4b27      	ldr	r3, [pc, #156]	; (8004efc <UART_SetConfig+0x490>)
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e62:	e011      	b.n	8004e88 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e64:	f7fe ff22 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e6c:	e00c      	b.n	8004e88 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e74:	e008      	b.n	8004e88 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e7a:	231a      	movs	r3, #26
 8004e7c:	2218      	movs	r2, #24
 8004e7e:	189b      	adds	r3, r3, r2
 8004e80:	19db      	adds	r3, r3, r7
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
        break;
 8004e86:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d020      	beq.n	8004ed0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	085a      	lsrs	r2, r3, #1
 8004e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e96:	18d2      	adds	r2, r2, r3
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	0010      	movs	r0, r2
 8004ea0:	f7fb f94e 	bl	8000140 <__udivsi3>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d90a      	bls.n	8004ec4 <UART_SetConfig+0x458>
 8004eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	025b      	lsls	r3, r3, #9
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d205      	bcs.n	8004ec4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	e005      	b.n	8004ed0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec4:	231a      	movs	r3, #26
 8004ec6:	2218      	movs	r2, #24
 8004ec8:	189b      	adds	r3, r3, r2
 8004eca:	19db      	adds	r3, r3, r7
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004edc:	231a      	movs	r3, #26
 8004ede:	2218      	movs	r2, #24
 8004ee0:	189b      	adds	r3, r3, r2
 8004ee2:	19db      	adds	r3, r3, r7
 8004ee4:	781b      	ldrb	r3, [r3, #0]
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b00e      	add	sp, #56	; 0x38
 8004eec:	bdb0      	pop	{r4, r5, r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	08008c88 	.word	0x08008c88
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	003d0900 	.word	0x003d0900
 8004efc:	00f42400 	.word	0x00f42400

08004f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4a4a      	ldr	r2, [pc, #296]	; (8005044 <UART_AdvFeatureConfig+0x144>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	0019      	movs	r1, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2202      	movs	r2, #2
 8004f30:	4013      	ands	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	4a43      	ldr	r2, [pc, #268]	; (8005048 <UART_AdvFeatureConfig+0x148>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	0019      	movs	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2204      	movs	r2, #4
 8004f52:	4013      	ands	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4a3b      	ldr	r2, [pc, #236]	; (800504c <UART_AdvFeatureConfig+0x14c>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2208      	movs	r2, #8
 8004f74:	4013      	ands	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	4a34      	ldr	r2, [pc, #208]	; (8005050 <UART_AdvFeatureConfig+0x150>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2210      	movs	r2, #16
 8004f96:	4013      	ands	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a2c      	ldr	r2, [pc, #176]	; (8005054 <UART_AdvFeatureConfig+0x154>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	4a25      	ldr	r2, [pc, #148]	; (8005058 <UART_AdvFeatureConfig+0x158>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2240      	movs	r2, #64	; 0x40
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d01d      	beq.n	800501a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <UART_AdvFeatureConfig+0x15c>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	035b      	lsls	r3, r3, #13
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d10b      	bne.n	800501a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4a15      	ldr	r2, [pc, #84]	; (8005060 <UART_AdvFeatureConfig+0x160>)
 800500a:	4013      	ands	r3, r2
 800500c:	0019      	movs	r1, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	4013      	ands	r3, r2
 8005022:	d00b      	beq.n	800503c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4a0e      	ldr	r2, [pc, #56]	; (8005064 <UART_AdvFeatureConfig+0x164>)
 800502c:	4013      	ands	r3, r2
 800502e:	0019      	movs	r1, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	605a      	str	r2, [r3, #4]
  }
}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	b002      	add	sp, #8
 8005042:	bd80      	pop	{r7, pc}
 8005044:	fffdffff 	.word	0xfffdffff
 8005048:	fffeffff 	.word	0xfffeffff
 800504c:	fffbffff 	.word	0xfffbffff
 8005050:	ffff7fff 	.word	0xffff7fff
 8005054:	ffffefff 	.word	0xffffefff
 8005058:	ffffdfff 	.word	0xffffdfff
 800505c:	ffefffff 	.word	0xffefffff
 8005060:	ff9fffff 	.word	0xff9fffff
 8005064:	fff7ffff 	.word	0xfff7ffff

08005068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b092      	sub	sp, #72	; 0x48
 800506c:	af02      	add	r7, sp, #8
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2284      	movs	r2, #132	; 0x84
 8005074:	2100      	movs	r1, #0
 8005076:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005078:	f7fd fe0a 	bl	8002c90 <HAL_GetTick>
 800507c:	0003      	movs	r3, r0
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2208      	movs	r2, #8
 8005088:	4013      	ands	r3, r2
 800508a:	2b08      	cmp	r3, #8
 800508c:	d12c      	bne.n	80050e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800508e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005090:	2280      	movs	r2, #128	; 0x80
 8005092:	0391      	lsls	r1, r2, #14
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	4a46      	ldr	r2, [pc, #280]	; (80051b0 <UART_CheckIdleState+0x148>)
 8005098:	9200      	str	r2, [sp, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	f000 f88c 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 80050a0:	1e03      	subs	r3, r0, #0
 80050a2:	d021      	beq.n	80050e8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a4:	f3ef 8310 	mrs	r3, PRIMASK
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ae:	2301      	movs	r3, #1
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2180      	movs	r1, #128	; 0x80
 80050c6:	438a      	bics	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	f383 8810 	msr	PRIMASK, r3
}
 80050d4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2278      	movs	r2, #120	; 0x78
 80050e0:	2100      	movs	r1, #0
 80050e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e05f      	b.n	80051a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2204      	movs	r2, #4
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d146      	bne.n	8005184 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	2280      	movs	r2, #128	; 0x80
 80050fa:	03d1      	lsls	r1, r2, #15
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4a2c      	ldr	r2, [pc, #176]	; (80051b0 <UART_CheckIdleState+0x148>)
 8005100:	9200      	str	r2, [sp, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	f000 f858 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8005108:	1e03      	subs	r3, r0, #0
 800510a:	d03b      	beq.n	8005184 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800510c:	f3ef 8310 	mrs	r3, PRIMASK
 8005110:	60fb      	str	r3, [r7, #12]
  return(result);
 8005112:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
 8005116:	2301      	movs	r3, #1
 8005118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f383 8810 	msr	PRIMASK, r3
}
 8005120:	46c0      	nop			; (mov r8, r8)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4921      	ldr	r1, [pc, #132]	; (80051b4 <UART_CheckIdleState+0x14c>)
 800512e:	400a      	ands	r2, r1
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f383 8810 	msr	PRIMASK, r3
}
 800513c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513e:	f3ef 8310 	mrs	r3, PRIMASK
 8005142:	61bb      	str	r3, [r7, #24]
  return(result);
 8005144:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005146:	633b      	str	r3, [r7, #48]	; 0x30
 8005148:	2301      	movs	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f383 8810 	msr	PRIMASK, r3
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2101      	movs	r1, #1
 8005160:	438a      	bics	r2, r1
 8005162:	609a      	str	r2, [r3, #8]
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	f383 8810 	msr	PRIMASK, r3
}
 800516e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2280      	movs	r2, #128	; 0x80
 8005174:	2120      	movs	r1, #32
 8005176:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2278      	movs	r2, #120	; 0x78
 800517c:	2100      	movs	r1, #0
 800517e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e011      	b.n	80051a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2280      	movs	r2, #128	; 0x80
 800518e:	2120      	movs	r1, #32
 8005190:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2278      	movs	r2, #120	; 0x78
 80051a2:	2100      	movs	r1, #0
 80051a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	0018      	movs	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b010      	add	sp, #64	; 0x40
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	01ffffff 	.word	0x01ffffff
 80051b4:	fffffedf 	.word	0xfffffedf

080051b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	1dfb      	adds	r3, r7, #7
 80051c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c8:	e04b      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	3301      	adds	r3, #1
 80051ce:	d048      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d0:	f7fd fd5e 	bl	8002c90 <HAL_GetTick>
 80051d4:	0002      	movs	r2, r0
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d302      	bcc.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e04b      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2204      	movs	r2, #4
 80051f2:	4013      	ands	r3, r2
 80051f4:	d035      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2208      	movs	r2, #8
 80051fe:	4013      	ands	r3, r2
 8005200:	2b08      	cmp	r3, #8
 8005202:	d111      	bne.n	8005228 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2208      	movs	r2, #8
 800520a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	0018      	movs	r0, r3
 8005210:	f000 f83c 	bl	800528c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2284      	movs	r2, #132	; 0x84
 8005218:	2108      	movs	r1, #8
 800521a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2278      	movs	r2, #120	; 0x78
 8005220:	2100      	movs	r1, #0
 8005222:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e02c      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	401a      	ands	r2, r3
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	429a      	cmp	r2, r3
 800523a:	d112      	bne.n	8005262 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	0112      	lsls	r2, r2, #4
 8005244:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	0018      	movs	r0, r3
 800524a:	f000 f81f 	bl	800528c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2284      	movs	r2, #132	; 0x84
 8005252:	2120      	movs	r1, #32
 8005254:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2278      	movs	r2, #120	; 0x78
 800525a:	2100      	movs	r1, #0
 800525c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e00f      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	425a      	negs	r2, r3
 8005272:	4153      	adcs	r3, r2
 8005274:	b2db      	uxtb	r3, r3
 8005276:	001a      	movs	r2, r3
 8005278:	1dfb      	adds	r3, r7, #7
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d0a4      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b004      	add	sp, #16
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08e      	sub	sp, #56	; 0x38
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005294:	f3ef 8310 	mrs	r3, PRIMASK
 8005298:	617b      	str	r3, [r7, #20]
  return(result);
 800529a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
 800529e:	2301      	movs	r3, #1
 80052a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	f383 8810 	msr	PRIMASK, r3
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4926      	ldr	r1, [pc, #152]	; (8005350 <UART_EndRxTransfer+0xc4>)
 80052b6:	400a      	ands	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f383 8810 	msr	PRIMASK, r3
}
 80052c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ca:	623b      	str	r3, [r7, #32]
  return(result);
 80052cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
 80052d0:	2301      	movs	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	f383 8810 	msr	PRIMASK, r3
}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2101      	movs	r1, #1
 80052e8:	438a      	bics	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d118      	bne.n	8005332 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005300:	f3ef 8310 	mrs	r3, PRIMASK
 8005304:	60bb      	str	r3, [r7, #8]
  return(result);
 8005306:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530a:	2301      	movs	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f383 8810 	msr	PRIMASK, r3
}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2110      	movs	r1, #16
 8005322:	438a      	bics	r2, r1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f383 8810 	msr	PRIMASK, r3
}
 8005330:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2280      	movs	r2, #128	; 0x80
 8005336:	2120      	movs	r1, #32
 8005338:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	46bd      	mov	sp, r7
 800534a:	b00e      	add	sp, #56	; 0x38
 800534c:	bd80      	pop	{r7, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	fffffedf 	.word	0xfffffedf

08005354 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	225a      	movs	r2, #90	; 0x5a
 8005366:	2100      	movs	r1, #0
 8005368:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2252      	movs	r2, #82	; 0x52
 800536e:	2100      	movs	r1, #0
 8005370:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	0018      	movs	r0, r3
 8005376:	f7ff fb65 	bl	8004a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	46bd      	mov	sp, r7
 800537e:	b004      	add	sp, #16
 8005380:	bd80      	pop	{r7, pc}

08005382 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b086      	sub	sp, #24
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538a:	f3ef 8310 	mrs	r3, PRIMASK
 800538e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005390:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	2301      	movs	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f383 8810 	msr	PRIMASK, r3
}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2140      	movs	r1, #64	; 0x40
 80053ac:	438a      	bics	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f383 8810 	msr	PRIMASK, r3
}
 80053ba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0018      	movs	r0, r3
 80053cc:	f7ff fb32 	bl	8004a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b006      	add	sp, #24
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053e0:	46c0      	nop			; (mov r8, r8)
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b002      	add	sp, #8
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <__errno>:
 80053e8:	4b01      	ldr	r3, [pc, #4]	; (80053f0 <__errno+0x8>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	4770      	bx	lr
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	2000000c 	.word	0x2000000c

080053f4 <__libc_init_array>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	2600      	movs	r6, #0
 80053f8:	4d0c      	ldr	r5, [pc, #48]	; (800542c <__libc_init_array+0x38>)
 80053fa:	4c0d      	ldr	r4, [pc, #52]	; (8005430 <__libc_init_array+0x3c>)
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	42a6      	cmp	r6, r4
 8005402:	d109      	bne.n	8005418 <__libc_init_array+0x24>
 8005404:	2600      	movs	r6, #0
 8005406:	f003 fbcb 	bl	8008ba0 <_init>
 800540a:	4d0a      	ldr	r5, [pc, #40]	; (8005434 <__libc_init_array+0x40>)
 800540c:	4c0a      	ldr	r4, [pc, #40]	; (8005438 <__libc_init_array+0x44>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	42a6      	cmp	r6, r4
 8005414:	d105      	bne.n	8005422 <__libc_init_array+0x2e>
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	00b3      	lsls	r3, r6, #2
 800541a:	58eb      	ldr	r3, [r5, r3]
 800541c:	4798      	blx	r3
 800541e:	3601      	adds	r6, #1
 8005420:	e7ee      	b.n	8005400 <__libc_init_array+0xc>
 8005422:	00b3      	lsls	r3, r6, #2
 8005424:	58eb      	ldr	r3, [r5, r3]
 8005426:	4798      	blx	r3
 8005428:	3601      	adds	r6, #1
 800542a:	e7f2      	b.n	8005412 <__libc_init_array+0x1e>
 800542c:	080090f4 	.word	0x080090f4
 8005430:	080090f4 	.word	0x080090f4
 8005434:	080090f4 	.word	0x080090f4
 8005438:	080090f8 	.word	0x080090f8

0800543c <memset>:
 800543c:	0003      	movs	r3, r0
 800543e:	1882      	adds	r2, r0, r2
 8005440:	4293      	cmp	r3, r2
 8005442:	d100      	bne.n	8005446 <memset+0xa>
 8005444:	4770      	bx	lr
 8005446:	7019      	strb	r1, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	e7f9      	b.n	8005440 <memset+0x4>

0800544c <_scanf_float>:
 800544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544e:	b08b      	sub	sp, #44	; 0x2c
 8005450:	0015      	movs	r5, r2
 8005452:	9001      	str	r0, [sp, #4]
 8005454:	22ae      	movs	r2, #174	; 0xae
 8005456:	2000      	movs	r0, #0
 8005458:	9306      	str	r3, [sp, #24]
 800545a:	688b      	ldr	r3, [r1, #8]
 800545c:	000e      	movs	r6, r1
 800545e:	1e59      	subs	r1, r3, #1
 8005460:	0052      	lsls	r2, r2, #1
 8005462:	9005      	str	r0, [sp, #20]
 8005464:	4291      	cmp	r1, r2
 8005466:	d905      	bls.n	8005474 <_scanf_float+0x28>
 8005468:	3b5e      	subs	r3, #94	; 0x5e
 800546a:	3bff      	subs	r3, #255	; 0xff
 800546c:	9305      	str	r3, [sp, #20]
 800546e:	235e      	movs	r3, #94	; 0x5e
 8005470:	33ff      	adds	r3, #255	; 0xff
 8005472:	60b3      	str	r3, [r6, #8]
 8005474:	23f0      	movs	r3, #240	; 0xf0
 8005476:	6832      	ldr	r2, [r6, #0]
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4313      	orrs	r3, r2
 800547c:	6033      	str	r3, [r6, #0]
 800547e:	0033      	movs	r3, r6
 8005480:	2400      	movs	r4, #0
 8005482:	331c      	adds	r3, #28
 8005484:	001f      	movs	r7, r3
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	9402      	str	r4, [sp, #8]
 800548a:	9408      	str	r4, [sp, #32]
 800548c:	9407      	str	r4, [sp, #28]
 800548e:	9400      	str	r4, [sp, #0]
 8005490:	9404      	str	r4, [sp, #16]
 8005492:	68b2      	ldr	r2, [r6, #8]
 8005494:	2a00      	cmp	r2, #0
 8005496:	d00a      	beq.n	80054ae <_scanf_float+0x62>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b4e      	cmp	r3, #78	; 0x4e
 800549e:	d844      	bhi.n	800552a <_scanf_float+0xde>
 80054a0:	0018      	movs	r0, r3
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d82c      	bhi.n	8005500 <_scanf_float+0xb4>
 80054a6:	382b      	subs	r0, #43	; 0x2b
 80054a8:	b2c1      	uxtb	r1, r0
 80054aa:	290e      	cmp	r1, #14
 80054ac:	d92a      	bls.n	8005504 <_scanf_float+0xb8>
 80054ae:	9b00      	ldr	r3, [sp, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <_scanf_float+0x70>
 80054b4:	6832      	ldr	r2, [r6, #0]
 80054b6:	4ba4      	ldr	r3, [pc, #656]	; (8005748 <_scanf_float+0x2fc>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	6033      	str	r3, [r6, #0]
 80054bc:	9b02      	ldr	r3, [sp, #8]
 80054be:	3b01      	subs	r3, #1
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d900      	bls.n	80054c6 <_scanf_float+0x7a>
 80054c4:	e0f9      	b.n	80056ba <_scanf_float+0x26e>
 80054c6:	24be      	movs	r4, #190	; 0xbe
 80054c8:	0064      	lsls	r4, r4, #1
 80054ca:	9b03      	ldr	r3, [sp, #12]
 80054cc:	429f      	cmp	r7, r3
 80054ce:	d900      	bls.n	80054d2 <_scanf_float+0x86>
 80054d0:	e0e9      	b.n	80056a6 <_scanf_float+0x25a>
 80054d2:	2301      	movs	r3, #1
 80054d4:	9302      	str	r3, [sp, #8]
 80054d6:	e185      	b.n	80057e4 <_scanf_float+0x398>
 80054d8:	0018      	movs	r0, r3
 80054da:	3861      	subs	r0, #97	; 0x61
 80054dc:	280d      	cmp	r0, #13
 80054de:	d8e6      	bhi.n	80054ae <_scanf_float+0x62>
 80054e0:	f7fa fe24 	bl	800012c <__gnu_thumb1_case_shi>
 80054e4:	ffe50083 	.word	0xffe50083
 80054e8:	ffe5ffe5 	.word	0xffe5ffe5
 80054ec:	00a200b6 	.word	0x00a200b6
 80054f0:	ffe5ffe5 	.word	0xffe5ffe5
 80054f4:	ffe50089 	.word	0xffe50089
 80054f8:	ffe5ffe5 	.word	0xffe5ffe5
 80054fc:	0065ffe5 	.word	0x0065ffe5
 8005500:	3841      	subs	r0, #65	; 0x41
 8005502:	e7eb      	b.n	80054dc <_scanf_float+0x90>
 8005504:	280e      	cmp	r0, #14
 8005506:	d8d2      	bhi.n	80054ae <_scanf_float+0x62>
 8005508:	f7fa fe10 	bl	800012c <__gnu_thumb1_case_shi>
 800550c:	ffd1004b 	.word	0xffd1004b
 8005510:	0098004b 	.word	0x0098004b
 8005514:	0020ffd1 	.word	0x0020ffd1
 8005518:	00400040 	.word	0x00400040
 800551c:	00400040 	.word	0x00400040
 8005520:	00400040 	.word	0x00400040
 8005524:	00400040 	.word	0x00400040
 8005528:	0040      	.short	0x0040
 800552a:	2b6e      	cmp	r3, #110	; 0x6e
 800552c:	d809      	bhi.n	8005542 <_scanf_float+0xf6>
 800552e:	2b60      	cmp	r3, #96	; 0x60
 8005530:	d8d2      	bhi.n	80054d8 <_scanf_float+0x8c>
 8005532:	2b54      	cmp	r3, #84	; 0x54
 8005534:	d07d      	beq.n	8005632 <_scanf_float+0x1e6>
 8005536:	2b59      	cmp	r3, #89	; 0x59
 8005538:	d1b9      	bne.n	80054ae <_scanf_float+0x62>
 800553a:	2c07      	cmp	r4, #7
 800553c:	d1b7      	bne.n	80054ae <_scanf_float+0x62>
 800553e:	2408      	movs	r4, #8
 8005540:	e02c      	b.n	800559c <_scanf_float+0x150>
 8005542:	2b74      	cmp	r3, #116	; 0x74
 8005544:	d075      	beq.n	8005632 <_scanf_float+0x1e6>
 8005546:	2b79      	cmp	r3, #121	; 0x79
 8005548:	d0f7      	beq.n	800553a <_scanf_float+0xee>
 800554a:	e7b0      	b.n	80054ae <_scanf_float+0x62>
 800554c:	6831      	ldr	r1, [r6, #0]
 800554e:	05c8      	lsls	r0, r1, #23
 8005550:	d51c      	bpl.n	800558c <_scanf_float+0x140>
 8005552:	2380      	movs	r3, #128	; 0x80
 8005554:	4399      	bics	r1, r3
 8005556:	9b00      	ldr	r3, [sp, #0]
 8005558:	6031      	str	r1, [r6, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	9b05      	ldr	r3, [sp, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <_scanf_float+0x120>
 8005564:	3b01      	subs	r3, #1
 8005566:	3201      	adds	r2, #1
 8005568:	9305      	str	r3, [sp, #20]
 800556a:	60b2      	str	r2, [r6, #8]
 800556c:	68b3      	ldr	r3, [r6, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	60b3      	str	r3, [r6, #8]
 8005572:	6933      	ldr	r3, [r6, #16]
 8005574:	3301      	adds	r3, #1
 8005576:	6133      	str	r3, [r6, #16]
 8005578:	686b      	ldr	r3, [r5, #4]
 800557a:	3b01      	subs	r3, #1
 800557c:	606b      	str	r3, [r5, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	dc00      	bgt.n	8005584 <_scanf_float+0x138>
 8005582:	e086      	b.n	8005692 <_scanf_float+0x246>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	e782      	b.n	8005492 <_scanf_float+0x46>
 800558c:	9a02      	ldr	r2, [sp, #8]
 800558e:	1912      	adds	r2, r2, r4
 8005590:	2a00      	cmp	r2, #0
 8005592:	d18c      	bne.n	80054ae <_scanf_float+0x62>
 8005594:	4a6d      	ldr	r2, [pc, #436]	; (800574c <_scanf_float+0x300>)
 8005596:	6831      	ldr	r1, [r6, #0]
 8005598:	400a      	ands	r2, r1
 800559a:	6032      	str	r2, [r6, #0]
 800559c:	703b      	strb	r3, [r7, #0]
 800559e:	3701      	adds	r7, #1
 80055a0:	e7e4      	b.n	800556c <_scanf_float+0x120>
 80055a2:	2180      	movs	r1, #128	; 0x80
 80055a4:	6832      	ldr	r2, [r6, #0]
 80055a6:	420a      	tst	r2, r1
 80055a8:	d081      	beq.n	80054ae <_scanf_float+0x62>
 80055aa:	438a      	bics	r2, r1
 80055ac:	e7f5      	b.n	800559a <_scanf_float+0x14e>
 80055ae:	9a02      	ldr	r2, [sp, #8]
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	d10f      	bne.n	80055d4 <_scanf_float+0x188>
 80055b4:	9a00      	ldr	r2, [sp, #0]
 80055b6:	2a00      	cmp	r2, #0
 80055b8:	d10f      	bne.n	80055da <_scanf_float+0x18e>
 80055ba:	6832      	ldr	r2, [r6, #0]
 80055bc:	21e0      	movs	r1, #224	; 0xe0
 80055be:	0010      	movs	r0, r2
 80055c0:	00c9      	lsls	r1, r1, #3
 80055c2:	4008      	ands	r0, r1
 80055c4:	4288      	cmp	r0, r1
 80055c6:	d108      	bne.n	80055da <_scanf_float+0x18e>
 80055c8:	4961      	ldr	r1, [pc, #388]	; (8005750 <_scanf_float+0x304>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	6032      	str	r2, [r6, #0]
 80055ce:	2201      	movs	r2, #1
 80055d0:	9202      	str	r2, [sp, #8]
 80055d2:	e7e3      	b.n	800559c <_scanf_float+0x150>
 80055d4:	9a02      	ldr	r2, [sp, #8]
 80055d6:	2a02      	cmp	r2, #2
 80055d8:	d059      	beq.n	800568e <_scanf_float+0x242>
 80055da:	2c01      	cmp	r4, #1
 80055dc:	d002      	beq.n	80055e4 <_scanf_float+0x198>
 80055de:	2c04      	cmp	r4, #4
 80055e0:	d000      	beq.n	80055e4 <_scanf_float+0x198>
 80055e2:	e764      	b.n	80054ae <_scanf_float+0x62>
 80055e4:	3401      	adds	r4, #1
 80055e6:	b2e4      	uxtb	r4, r4
 80055e8:	e7d8      	b.n	800559c <_scanf_float+0x150>
 80055ea:	9a02      	ldr	r2, [sp, #8]
 80055ec:	2a01      	cmp	r2, #1
 80055ee:	d000      	beq.n	80055f2 <_scanf_float+0x1a6>
 80055f0:	e75d      	b.n	80054ae <_scanf_float+0x62>
 80055f2:	2202      	movs	r2, #2
 80055f4:	e7ec      	b.n	80055d0 <_scanf_float+0x184>
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	d110      	bne.n	800561c <_scanf_float+0x1d0>
 80055fa:	9a00      	ldr	r2, [sp, #0]
 80055fc:	2a00      	cmp	r2, #0
 80055fe:	d000      	beq.n	8005602 <_scanf_float+0x1b6>
 8005600:	e758      	b.n	80054b4 <_scanf_float+0x68>
 8005602:	6832      	ldr	r2, [r6, #0]
 8005604:	21e0      	movs	r1, #224	; 0xe0
 8005606:	0010      	movs	r0, r2
 8005608:	00c9      	lsls	r1, r1, #3
 800560a:	4008      	ands	r0, r1
 800560c:	4288      	cmp	r0, r1
 800560e:	d000      	beq.n	8005612 <_scanf_float+0x1c6>
 8005610:	e754      	b.n	80054bc <_scanf_float+0x70>
 8005612:	494f      	ldr	r1, [pc, #316]	; (8005750 <_scanf_float+0x304>)
 8005614:	3401      	adds	r4, #1
 8005616:	400a      	ands	r2, r1
 8005618:	6032      	str	r2, [r6, #0]
 800561a:	e7bf      	b.n	800559c <_scanf_float+0x150>
 800561c:	21fd      	movs	r1, #253	; 0xfd
 800561e:	1ee2      	subs	r2, r4, #3
 8005620:	420a      	tst	r2, r1
 8005622:	d000      	beq.n	8005626 <_scanf_float+0x1da>
 8005624:	e743      	b.n	80054ae <_scanf_float+0x62>
 8005626:	e7dd      	b.n	80055e4 <_scanf_float+0x198>
 8005628:	2c02      	cmp	r4, #2
 800562a:	d000      	beq.n	800562e <_scanf_float+0x1e2>
 800562c:	e73f      	b.n	80054ae <_scanf_float+0x62>
 800562e:	2403      	movs	r4, #3
 8005630:	e7b4      	b.n	800559c <_scanf_float+0x150>
 8005632:	2c06      	cmp	r4, #6
 8005634:	d000      	beq.n	8005638 <_scanf_float+0x1ec>
 8005636:	e73a      	b.n	80054ae <_scanf_float+0x62>
 8005638:	2407      	movs	r4, #7
 800563a:	e7af      	b.n	800559c <_scanf_float+0x150>
 800563c:	6832      	ldr	r2, [r6, #0]
 800563e:	0591      	lsls	r1, r2, #22
 8005640:	d400      	bmi.n	8005644 <_scanf_float+0x1f8>
 8005642:	e734      	b.n	80054ae <_scanf_float+0x62>
 8005644:	4943      	ldr	r1, [pc, #268]	; (8005754 <_scanf_float+0x308>)
 8005646:	400a      	ands	r2, r1
 8005648:	6032      	str	r2, [r6, #0]
 800564a:	9a00      	ldr	r2, [sp, #0]
 800564c:	9204      	str	r2, [sp, #16]
 800564e:	e7a5      	b.n	800559c <_scanf_float+0x150>
 8005650:	21a0      	movs	r1, #160	; 0xa0
 8005652:	2080      	movs	r0, #128	; 0x80
 8005654:	6832      	ldr	r2, [r6, #0]
 8005656:	00c9      	lsls	r1, r1, #3
 8005658:	4011      	ands	r1, r2
 800565a:	00c0      	lsls	r0, r0, #3
 800565c:	4281      	cmp	r1, r0
 800565e:	d006      	beq.n	800566e <_scanf_float+0x222>
 8005660:	4202      	tst	r2, r0
 8005662:	d100      	bne.n	8005666 <_scanf_float+0x21a>
 8005664:	e723      	b.n	80054ae <_scanf_float+0x62>
 8005666:	9900      	ldr	r1, [sp, #0]
 8005668:	2900      	cmp	r1, #0
 800566a:	d100      	bne.n	800566e <_scanf_float+0x222>
 800566c:	e726      	b.n	80054bc <_scanf_float+0x70>
 800566e:	0591      	lsls	r1, r2, #22
 8005670:	d404      	bmi.n	800567c <_scanf_float+0x230>
 8005672:	9900      	ldr	r1, [sp, #0]
 8005674:	9804      	ldr	r0, [sp, #16]
 8005676:	9708      	str	r7, [sp, #32]
 8005678:	1a09      	subs	r1, r1, r0
 800567a:	9107      	str	r1, [sp, #28]
 800567c:	4934      	ldr	r1, [pc, #208]	; (8005750 <_scanf_float+0x304>)
 800567e:	400a      	ands	r2, r1
 8005680:	21c0      	movs	r1, #192	; 0xc0
 8005682:	0049      	lsls	r1, r1, #1
 8005684:	430a      	orrs	r2, r1
 8005686:	6032      	str	r2, [r6, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	9200      	str	r2, [sp, #0]
 800568c:	e786      	b.n	800559c <_scanf_float+0x150>
 800568e:	2203      	movs	r2, #3
 8005690:	e79e      	b.n	80055d0 <_scanf_float+0x184>
 8005692:	23c0      	movs	r3, #192	; 0xc0
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	0029      	movs	r1, r5
 8005698:	58f3      	ldr	r3, [r6, r3]
 800569a:	9801      	ldr	r0, [sp, #4]
 800569c:	4798      	blx	r3
 800569e:	2800      	cmp	r0, #0
 80056a0:	d100      	bne.n	80056a4 <_scanf_float+0x258>
 80056a2:	e6f6      	b.n	8005492 <_scanf_float+0x46>
 80056a4:	e703      	b.n	80054ae <_scanf_float+0x62>
 80056a6:	3f01      	subs	r7, #1
 80056a8:	5933      	ldr	r3, [r6, r4]
 80056aa:	002a      	movs	r2, r5
 80056ac:	7839      	ldrb	r1, [r7, #0]
 80056ae:	9801      	ldr	r0, [sp, #4]
 80056b0:	4798      	blx	r3
 80056b2:	6933      	ldr	r3, [r6, #16]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	6133      	str	r3, [r6, #16]
 80056b8:	e707      	b.n	80054ca <_scanf_float+0x7e>
 80056ba:	1e63      	subs	r3, r4, #1
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d80e      	bhi.n	80056de <_scanf_float+0x292>
 80056c0:	9702      	str	r7, [sp, #8]
 80056c2:	2c02      	cmp	r4, #2
 80056c4:	d920      	bls.n	8005708 <_scanf_float+0x2bc>
 80056c6:	1be3      	subs	r3, r4, r7
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	9305      	str	r3, [sp, #20]
 80056cc:	9b02      	ldr	r3, [sp, #8]
 80056ce:	9a05      	ldr	r2, [sp, #20]
 80056d0:	189b      	adds	r3, r3, r2
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d827      	bhi.n	8005728 <_scanf_float+0x2dc>
 80056d8:	3c03      	subs	r4, #3
 80056da:	b2e4      	uxtb	r4, r4
 80056dc:	1b3f      	subs	r7, r7, r4
 80056de:	6833      	ldr	r3, [r6, #0]
 80056e0:	05da      	lsls	r2, r3, #23
 80056e2:	d554      	bpl.n	800578e <_scanf_float+0x342>
 80056e4:	055b      	lsls	r3, r3, #21
 80056e6:	d537      	bpl.n	8005758 <_scanf_float+0x30c>
 80056e8:	24be      	movs	r4, #190	; 0xbe
 80056ea:	0064      	lsls	r4, r4, #1
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	429f      	cmp	r7, r3
 80056f0:	d800      	bhi.n	80056f4 <_scanf_float+0x2a8>
 80056f2:	e6ee      	b.n	80054d2 <_scanf_float+0x86>
 80056f4:	3f01      	subs	r7, #1
 80056f6:	5933      	ldr	r3, [r6, r4]
 80056f8:	002a      	movs	r2, r5
 80056fa:	7839      	ldrb	r1, [r7, #0]
 80056fc:	9801      	ldr	r0, [sp, #4]
 80056fe:	4798      	blx	r3
 8005700:	6933      	ldr	r3, [r6, #16]
 8005702:	3b01      	subs	r3, #1
 8005704:	6133      	str	r3, [r6, #16]
 8005706:	e7f1      	b.n	80056ec <_scanf_float+0x2a0>
 8005708:	24be      	movs	r4, #190	; 0xbe
 800570a:	0064      	lsls	r4, r4, #1
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	429f      	cmp	r7, r3
 8005710:	d800      	bhi.n	8005714 <_scanf_float+0x2c8>
 8005712:	e6de      	b.n	80054d2 <_scanf_float+0x86>
 8005714:	3f01      	subs	r7, #1
 8005716:	5933      	ldr	r3, [r6, r4]
 8005718:	002a      	movs	r2, r5
 800571a:	7839      	ldrb	r1, [r7, #0]
 800571c:	9801      	ldr	r0, [sp, #4]
 800571e:	4798      	blx	r3
 8005720:	6933      	ldr	r3, [r6, #16]
 8005722:	3b01      	subs	r3, #1
 8005724:	6133      	str	r3, [r6, #16]
 8005726:	e7f1      	b.n	800570c <_scanf_float+0x2c0>
 8005728:	9b02      	ldr	r3, [sp, #8]
 800572a:	002a      	movs	r2, r5
 800572c:	3b01      	subs	r3, #1
 800572e:	7819      	ldrb	r1, [r3, #0]
 8005730:	9302      	str	r3, [sp, #8]
 8005732:	23be      	movs	r3, #190	; 0xbe
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	58f3      	ldr	r3, [r6, r3]
 8005738:	9801      	ldr	r0, [sp, #4]
 800573a:	9309      	str	r3, [sp, #36]	; 0x24
 800573c:	4798      	blx	r3
 800573e:	6933      	ldr	r3, [r6, #16]
 8005740:	3b01      	subs	r3, #1
 8005742:	6133      	str	r3, [r6, #16]
 8005744:	e7c2      	b.n	80056cc <_scanf_float+0x280>
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	fffffeff 	.word	0xfffffeff
 800574c:	fffffe7f 	.word	0xfffffe7f
 8005750:	fffff87f 	.word	0xfffff87f
 8005754:	fffffd7f 	.word	0xfffffd7f
 8005758:	6933      	ldr	r3, [r6, #16]
 800575a:	1e7c      	subs	r4, r7, #1
 800575c:	7821      	ldrb	r1, [r4, #0]
 800575e:	3b01      	subs	r3, #1
 8005760:	6133      	str	r3, [r6, #16]
 8005762:	2965      	cmp	r1, #101	; 0x65
 8005764:	d00c      	beq.n	8005780 <_scanf_float+0x334>
 8005766:	2945      	cmp	r1, #69	; 0x45
 8005768:	d00a      	beq.n	8005780 <_scanf_float+0x334>
 800576a:	23be      	movs	r3, #190	; 0xbe
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	58f3      	ldr	r3, [r6, r3]
 8005770:	002a      	movs	r2, r5
 8005772:	9801      	ldr	r0, [sp, #4]
 8005774:	4798      	blx	r3
 8005776:	6933      	ldr	r3, [r6, #16]
 8005778:	1ebc      	subs	r4, r7, #2
 800577a:	3b01      	subs	r3, #1
 800577c:	7821      	ldrb	r1, [r4, #0]
 800577e:	6133      	str	r3, [r6, #16]
 8005780:	23be      	movs	r3, #190	; 0xbe
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	002a      	movs	r2, r5
 8005786:	58f3      	ldr	r3, [r6, r3]
 8005788:	9801      	ldr	r0, [sp, #4]
 800578a:	4798      	blx	r3
 800578c:	0027      	movs	r7, r4
 800578e:	6832      	ldr	r2, [r6, #0]
 8005790:	2310      	movs	r3, #16
 8005792:	0011      	movs	r1, r2
 8005794:	4019      	ands	r1, r3
 8005796:	9102      	str	r1, [sp, #8]
 8005798:	421a      	tst	r2, r3
 800579a:	d158      	bne.n	800584e <_scanf_float+0x402>
 800579c:	23c0      	movs	r3, #192	; 0xc0
 800579e:	7039      	strb	r1, [r7, #0]
 80057a0:	6832      	ldr	r2, [r6, #0]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4013      	ands	r3, r2
 80057a6:	2280      	movs	r2, #128	; 0x80
 80057a8:	00d2      	lsls	r2, r2, #3
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d11d      	bne.n	80057ea <_scanf_float+0x39e>
 80057ae:	9b04      	ldr	r3, [sp, #16]
 80057b0:	9a00      	ldr	r2, [sp, #0]
 80057b2:	9900      	ldr	r1, [sp, #0]
 80057b4:	1a9a      	subs	r2, r3, r2
 80057b6:	428b      	cmp	r3, r1
 80057b8:	d124      	bne.n	8005804 <_scanf_float+0x3b8>
 80057ba:	2200      	movs	r2, #0
 80057bc:	9903      	ldr	r1, [sp, #12]
 80057be:	9801      	ldr	r0, [sp, #4]
 80057c0:	f000 feb6 	bl	8006530 <_strtod_r>
 80057c4:	9b06      	ldr	r3, [sp, #24]
 80057c6:	000d      	movs	r5, r1
 80057c8:	6831      	ldr	r1, [r6, #0]
 80057ca:	0004      	movs	r4, r0
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	078a      	lsls	r2, r1, #30
 80057d0:	d525      	bpl.n	800581e <_scanf_float+0x3d2>
 80057d2:	1d1a      	adds	r2, r3, #4
 80057d4:	9906      	ldr	r1, [sp, #24]
 80057d6:	600a      	str	r2, [r1, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	601c      	str	r4, [r3, #0]
 80057dc:	605d      	str	r5, [r3, #4]
 80057de:	68f3      	ldr	r3, [r6, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60f3      	str	r3, [r6, #12]
 80057e4:	9802      	ldr	r0, [sp, #8]
 80057e6:	b00b      	add	sp, #44	; 0x2c
 80057e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ea:	9b07      	ldr	r3, [sp, #28]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0e4      	beq.n	80057ba <_scanf_float+0x36e>
 80057f0:	9b08      	ldr	r3, [sp, #32]
 80057f2:	9a02      	ldr	r2, [sp, #8]
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	9801      	ldr	r0, [sp, #4]
 80057f8:	230a      	movs	r3, #10
 80057fa:	f000 ff2f 	bl	800665c <_strtol_r>
 80057fe:	9b07      	ldr	r3, [sp, #28]
 8005800:	9f08      	ldr	r7, [sp, #32]
 8005802:	1ac2      	subs	r2, r0, r3
 8005804:	0033      	movs	r3, r6
 8005806:	3370      	adds	r3, #112	; 0x70
 8005808:	33ff      	adds	r3, #255	; 0xff
 800580a:	429f      	cmp	r7, r3
 800580c:	d302      	bcc.n	8005814 <_scanf_float+0x3c8>
 800580e:	0037      	movs	r7, r6
 8005810:	376f      	adds	r7, #111	; 0x6f
 8005812:	37ff      	adds	r7, #255	; 0xff
 8005814:	0038      	movs	r0, r7
 8005816:	490f      	ldr	r1, [pc, #60]	; (8005854 <_scanf_float+0x408>)
 8005818:	f000 f83e 	bl	8005898 <siprintf>
 800581c:	e7cd      	b.n	80057ba <_scanf_float+0x36e>
 800581e:	1d1a      	adds	r2, r3, #4
 8005820:	0749      	lsls	r1, r1, #29
 8005822:	d4d7      	bmi.n	80057d4 <_scanf_float+0x388>
 8005824:	9906      	ldr	r1, [sp, #24]
 8005826:	0020      	movs	r0, r4
 8005828:	600a      	str	r2, [r1, #0]
 800582a:	681f      	ldr	r7, [r3, #0]
 800582c:	0022      	movs	r2, r4
 800582e:	002b      	movs	r3, r5
 8005830:	0029      	movs	r1, r5
 8005832:	f7fc fcff 	bl	8002234 <__aeabi_dcmpun>
 8005836:	2800      	cmp	r0, #0
 8005838:	d004      	beq.n	8005844 <_scanf_float+0x3f8>
 800583a:	4807      	ldr	r0, [pc, #28]	; (8005858 <_scanf_float+0x40c>)
 800583c:	f000 f828 	bl	8005890 <nanf>
 8005840:	6038      	str	r0, [r7, #0]
 8005842:	e7cc      	b.n	80057de <_scanf_float+0x392>
 8005844:	0020      	movs	r0, r4
 8005846:	0029      	movs	r1, r5
 8005848:	f7fc fd9e 	bl	8002388 <__aeabi_d2f>
 800584c:	e7f8      	b.n	8005840 <_scanf_float+0x3f4>
 800584e:	2300      	movs	r3, #0
 8005850:	e640      	b.n	80054d4 <_scanf_float+0x88>
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	08008cb0 	.word	0x08008cb0
 8005858:	080090ea 	.word	0x080090ea

0800585c <iprintf>:
 800585c:	b40f      	push	{r0, r1, r2, r3}
 800585e:	4b0b      	ldr	r3, [pc, #44]	; (800588c <iprintf+0x30>)
 8005860:	b513      	push	{r0, r1, r4, lr}
 8005862:	681c      	ldr	r4, [r3, #0]
 8005864:	2c00      	cmp	r4, #0
 8005866:	d005      	beq.n	8005874 <iprintf+0x18>
 8005868:	69a3      	ldr	r3, [r4, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <iprintf+0x18>
 800586e:	0020      	movs	r0, r4
 8005870:	f000 ff5a 	bl	8006728 <__sinit>
 8005874:	ab05      	add	r3, sp, #20
 8005876:	0020      	movs	r0, r4
 8005878:	9a04      	ldr	r2, [sp, #16]
 800587a:	68a1      	ldr	r1, [r4, #8]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	f002 fa9d 	bl	8007dbc <_vfiprintf_r>
 8005882:	bc16      	pop	{r1, r2, r4}
 8005884:	bc08      	pop	{r3}
 8005886:	b004      	add	sp, #16
 8005888:	4718      	bx	r3
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	2000000c 	.word	0x2000000c

08005890 <nanf>:
 8005890:	4800      	ldr	r0, [pc, #0]	; (8005894 <nanf+0x4>)
 8005892:	4770      	bx	lr
 8005894:	7fc00000 	.word	0x7fc00000

08005898 <siprintf>:
 8005898:	b40e      	push	{r1, r2, r3}
 800589a:	b500      	push	{lr}
 800589c:	490b      	ldr	r1, [pc, #44]	; (80058cc <siprintf+0x34>)
 800589e:	b09c      	sub	sp, #112	; 0x70
 80058a0:	ab1d      	add	r3, sp, #116	; 0x74
 80058a2:	9002      	str	r0, [sp, #8]
 80058a4:	9006      	str	r0, [sp, #24]
 80058a6:	9107      	str	r1, [sp, #28]
 80058a8:	9104      	str	r1, [sp, #16]
 80058aa:	4809      	ldr	r0, [pc, #36]	; (80058d0 <siprintf+0x38>)
 80058ac:	4909      	ldr	r1, [pc, #36]	; (80058d4 <siprintf+0x3c>)
 80058ae:	cb04      	ldmia	r3!, {r2}
 80058b0:	9105      	str	r1, [sp, #20]
 80058b2:	6800      	ldr	r0, [r0, #0]
 80058b4:	a902      	add	r1, sp, #8
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	f002 f958 	bl	8007b6c <_svfiprintf_r>
 80058bc:	2300      	movs	r3, #0
 80058be:	9a02      	ldr	r2, [sp, #8]
 80058c0:	7013      	strb	r3, [r2, #0]
 80058c2:	b01c      	add	sp, #112	; 0x70
 80058c4:	bc08      	pop	{r3}
 80058c6:	b003      	add	sp, #12
 80058c8:	4718      	bx	r3
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	7fffffff 	.word	0x7fffffff
 80058d0:	2000000c 	.word	0x2000000c
 80058d4:	ffff0208 	.word	0xffff0208

080058d8 <sulp>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	0016      	movs	r6, r2
 80058dc:	000d      	movs	r5, r1
 80058de:	f001 fed9 	bl	8007694 <__ulp>
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	d00d      	beq.n	8005902 <sulp+0x2a>
 80058e6:	236b      	movs	r3, #107	; 0x6b
 80058e8:	006a      	lsls	r2, r5, #1
 80058ea:	0d52      	lsrs	r2, r2, #21
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd07      	ble.n	8005902 <sulp+0x2a>
 80058f2:	2400      	movs	r4, #0
 80058f4:	4a03      	ldr	r2, [pc, #12]	; (8005904 <sulp+0x2c>)
 80058f6:	051b      	lsls	r3, r3, #20
 80058f8:	189d      	adds	r5, r3, r2
 80058fa:	002b      	movs	r3, r5
 80058fc:	0022      	movs	r2, r4
 80058fe:	f7fb fe9b 	bl	8001638 <__aeabi_dmul>
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	3ff00000 	.word	0x3ff00000

08005908 <_strtod_l>:
 8005908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590a:	001d      	movs	r5, r3
 800590c:	2300      	movs	r3, #0
 800590e:	b0a5      	sub	sp, #148	; 0x94
 8005910:	9320      	str	r3, [sp, #128]	; 0x80
 8005912:	4bac      	ldr	r3, [pc, #688]	; (8005bc4 <_strtod_l+0x2bc>)
 8005914:	9005      	str	r0, [sp, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	9108      	str	r1, [sp, #32]
 800591a:	0018      	movs	r0, r3
 800591c:	9307      	str	r3, [sp, #28]
 800591e:	921b      	str	r2, [sp, #108]	; 0x6c
 8005920:	f7fa fbf2 	bl	8000108 <strlen>
 8005924:	2600      	movs	r6, #0
 8005926:	0004      	movs	r4, r0
 8005928:	2700      	movs	r7, #0
 800592a:	9b08      	ldr	r3, [sp, #32]
 800592c:	931f      	str	r3, [sp, #124]	; 0x7c
 800592e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005930:	7813      	ldrb	r3, [r2, #0]
 8005932:	2b2b      	cmp	r3, #43	; 0x2b
 8005934:	d058      	beq.n	80059e8 <_strtod_l+0xe0>
 8005936:	d844      	bhi.n	80059c2 <_strtod_l+0xba>
 8005938:	2b0d      	cmp	r3, #13
 800593a:	d83d      	bhi.n	80059b8 <_strtod_l+0xb0>
 800593c:	2b08      	cmp	r3, #8
 800593e:	d83d      	bhi.n	80059bc <_strtod_l+0xb4>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d047      	beq.n	80059d4 <_strtod_l+0xcc>
 8005944:	2300      	movs	r3, #0
 8005946:	930e      	str	r3, [sp, #56]	; 0x38
 8005948:	2200      	movs	r2, #0
 800594a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800594c:	920a      	str	r2, [sp, #40]	; 0x28
 800594e:	9306      	str	r3, [sp, #24]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b30      	cmp	r3, #48	; 0x30
 8005954:	d000      	beq.n	8005958 <_strtod_l+0x50>
 8005956:	e07f      	b.n	8005a58 <_strtod_l+0x150>
 8005958:	9b06      	ldr	r3, [sp, #24]
 800595a:	3220      	adds	r2, #32
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	4393      	bics	r3, r2
 8005960:	2b58      	cmp	r3, #88	; 0x58
 8005962:	d000      	beq.n	8005966 <_strtod_l+0x5e>
 8005964:	e06e      	b.n	8005a44 <_strtod_l+0x13c>
 8005966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005968:	9502      	str	r5, [sp, #8]
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	ab20      	add	r3, sp, #128	; 0x80
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	4a95      	ldr	r2, [pc, #596]	; (8005bc8 <_strtod_l+0x2c0>)
 8005972:	ab21      	add	r3, sp, #132	; 0x84
 8005974:	9805      	ldr	r0, [sp, #20]
 8005976:	a91f      	add	r1, sp, #124	; 0x7c
 8005978:	f000 ffe0 	bl	800693c <__gethex>
 800597c:	2307      	movs	r3, #7
 800597e:	0005      	movs	r5, r0
 8005980:	0004      	movs	r4, r0
 8005982:	401d      	ands	r5, r3
 8005984:	4218      	tst	r0, r3
 8005986:	d006      	beq.n	8005996 <_strtod_l+0x8e>
 8005988:	2d06      	cmp	r5, #6
 800598a:	d12f      	bne.n	80059ec <_strtod_l+0xe4>
 800598c:	9b06      	ldr	r3, [sp, #24]
 800598e:	3301      	adds	r3, #1
 8005990:	931f      	str	r3, [sp, #124]	; 0x7c
 8005992:	2300      	movs	r3, #0
 8005994:	930e      	str	r3, [sp, #56]	; 0x38
 8005996:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <_strtod_l+0x9a>
 800599c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800599e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01c      	beq.n	80059e2 <_strtod_l+0xda>
 80059a8:	2380      	movs	r3, #128	; 0x80
 80059aa:	0032      	movs	r2, r6
 80059ac:	061b      	lsls	r3, r3, #24
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	0010      	movs	r0, r2
 80059b2:	0019      	movs	r1, r3
 80059b4:	b025      	add	sp, #148	; 0x94
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d1c3      	bne.n	8005944 <_strtod_l+0x3c>
 80059bc:	3201      	adds	r2, #1
 80059be:	921f      	str	r2, [sp, #124]	; 0x7c
 80059c0:	e7b5      	b.n	800592e <_strtod_l+0x26>
 80059c2:	2b2d      	cmp	r3, #45	; 0x2d
 80059c4:	d1be      	bne.n	8005944 <_strtod_l+0x3c>
 80059c6:	3b2c      	subs	r3, #44	; 0x2c
 80059c8:	930e      	str	r3, [sp, #56]	; 0x38
 80059ca:	1c53      	adds	r3, r2, #1
 80059cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80059ce:	7853      	ldrb	r3, [r2, #1]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1b9      	bne.n	8005948 <_strtod_l+0x40>
 80059d4:	9b08      	ldr	r3, [sp, #32]
 80059d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80059d8:	2300      	movs	r3, #0
 80059da:	930e      	str	r3, [sp, #56]	; 0x38
 80059dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1dc      	bne.n	800599c <_strtod_l+0x94>
 80059e2:	0032      	movs	r2, r6
 80059e4:	003b      	movs	r3, r7
 80059e6:	e7e3      	b.n	80059b0 <_strtod_l+0xa8>
 80059e8:	2300      	movs	r3, #0
 80059ea:	e7ed      	b.n	80059c8 <_strtod_l+0xc0>
 80059ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	d007      	beq.n	8005a02 <_strtod_l+0xfa>
 80059f2:	2135      	movs	r1, #53	; 0x35
 80059f4:	a822      	add	r0, sp, #136	; 0x88
 80059f6:	f001 ff4e 	bl	8007896 <__copybits>
 80059fa:	9920      	ldr	r1, [sp, #128]	; 0x80
 80059fc:	9805      	ldr	r0, [sp, #20]
 80059fe:	f001 fb09 	bl	8007014 <_Bfree>
 8005a02:	1e68      	subs	r0, r5, #1
 8005a04:	2804      	cmp	r0, #4
 8005a06:	d806      	bhi.n	8005a16 <_strtod_l+0x10e>
 8005a08:	f7fa fb86 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005a0c:	1816030b 	.word	0x1816030b
 8005a10:	0b          	.byte	0x0b
 8005a11:	00          	.byte	0x00
 8005a12:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8005a14:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8005a16:	0723      	lsls	r3, r4, #28
 8005a18:	d5bd      	bpl.n	8005996 <_strtod_l+0x8e>
 8005a1a:	2380      	movs	r3, #128	; 0x80
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	431f      	orrs	r7, r3
 8005a20:	e7b9      	b.n	8005996 <_strtod_l+0x8e>
 8005a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a24:	4a69      	ldr	r2, [pc, #420]	; (8005bcc <_strtod_l+0x2c4>)
 8005a26:	496a      	ldr	r1, [pc, #424]	; (8005bd0 <_strtod_l+0x2c8>)
 8005a28:	401a      	ands	r2, r3
 8005a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a2c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8005a2e:	185b      	adds	r3, r3, r1
 8005a30:	051b      	lsls	r3, r3, #20
 8005a32:	431a      	orrs	r2, r3
 8005a34:	0017      	movs	r7, r2
 8005a36:	e7ee      	b.n	8005a16 <_strtod_l+0x10e>
 8005a38:	4f66      	ldr	r7, [pc, #408]	; (8005bd4 <_strtod_l+0x2cc>)
 8005a3a:	e7ec      	b.n	8005a16 <_strtod_l+0x10e>
 8005a3c:	2601      	movs	r6, #1
 8005a3e:	4f66      	ldr	r7, [pc, #408]	; (8005bd8 <_strtod_l+0x2d0>)
 8005a40:	4276      	negs	r6, r6
 8005a42:	e7e8      	b.n	8005a16 <_strtod_l+0x10e>
 8005a44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	921f      	str	r2, [sp, #124]	; 0x7c
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b30      	cmp	r3, #48	; 0x30
 8005a4e:	d0f9      	beq.n	8005a44 <_strtod_l+0x13c>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0a0      	beq.n	8005996 <_strtod_l+0x8e>
 8005a54:	2301      	movs	r3, #1
 8005a56:	930a      	str	r3, [sp, #40]	; 0x28
 8005a58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a5a:	220a      	movs	r2, #10
 8005a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8005a5e:	2300      	movs	r3, #0
 8005a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a64:	9309      	str	r3, [sp, #36]	; 0x24
 8005a66:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8005a68:	7805      	ldrb	r5, [r0, #0]
 8005a6a:	002b      	movs	r3, r5
 8005a6c:	3b30      	subs	r3, #48	; 0x30
 8005a6e:	b2d9      	uxtb	r1, r3
 8005a70:	2909      	cmp	r1, #9
 8005a72:	d927      	bls.n	8005ac4 <_strtod_l+0x1bc>
 8005a74:	0022      	movs	r2, r4
 8005a76:	9907      	ldr	r1, [sp, #28]
 8005a78:	f002 fcc0 	bl	80083fc <strncmp>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d033      	beq.n	8005ae8 <_strtod_l+0x1e0>
 8005a80:	2000      	movs	r0, #0
 8005a82:	002b      	movs	r3, r5
 8005a84:	4684      	mov	ip, r0
 8005a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a88:	900c      	str	r0, [sp, #48]	; 0x30
 8005a8a:	9206      	str	r2, [sp, #24]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	0019      	movs	r1, r3
 8005a90:	4391      	bics	r1, r2
 8005a92:	000a      	movs	r2, r1
 8005a94:	2100      	movs	r1, #0
 8005a96:	9107      	str	r1, [sp, #28]
 8005a98:	2a45      	cmp	r2, #69	; 0x45
 8005a9a:	d000      	beq.n	8005a9e <_strtod_l+0x196>
 8005a9c:	e0c5      	b.n	8005c2a <_strtod_l+0x322>
 8005a9e:	9b06      	ldr	r3, [sp, #24]
 8005aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa2:	4303      	orrs	r3, r0
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	428b      	cmp	r3, r1
 8005aa8:	d094      	beq.n	80059d4 <_strtod_l+0xcc>
 8005aaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005aac:	9308      	str	r3, [sp, #32]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	931f      	str	r3, [sp, #124]	; 0x7c
 8005ab2:	9b08      	ldr	r3, [sp, #32]
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b2b      	cmp	r3, #43	; 0x2b
 8005ab8:	d076      	beq.n	8005ba8 <_strtod_l+0x2a0>
 8005aba:	000c      	movs	r4, r1
 8005abc:	2b2d      	cmp	r3, #45	; 0x2d
 8005abe:	d179      	bne.n	8005bb4 <_strtod_l+0x2ac>
 8005ac0:	2401      	movs	r4, #1
 8005ac2:	e072      	b.n	8005baa <_strtod_l+0x2a2>
 8005ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ac6:	2908      	cmp	r1, #8
 8005ac8:	dc09      	bgt.n	8005ade <_strtod_l+0x1d6>
 8005aca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005acc:	4351      	muls	r1, r2
 8005ace:	185b      	adds	r3, r3, r1
 8005ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ada:	901f      	str	r0, [sp, #124]	; 0x7c
 8005adc:	e7c3      	b.n	8005a66 <_strtod_l+0x15e>
 8005ade:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ae0:	4351      	muls	r1, r2
 8005ae2:	185b      	adds	r3, r3, r1
 8005ae4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ae6:	e7f4      	b.n	8005ad2 <_strtod_l+0x1ca>
 8005ae8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aec:	191c      	adds	r4, r3, r4
 8005aee:	941f      	str	r4, [sp, #124]	; 0x7c
 8005af0:	7823      	ldrb	r3, [r4, #0]
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	d039      	beq.n	8005b6a <_strtod_l+0x262>
 8005af6:	900c      	str	r0, [sp, #48]	; 0x30
 8005af8:	9206      	str	r2, [sp, #24]
 8005afa:	001a      	movs	r2, r3
 8005afc:	3a30      	subs	r2, #48	; 0x30
 8005afe:	2a09      	cmp	r2, #9
 8005b00:	d912      	bls.n	8005b28 <_strtod_l+0x220>
 8005b02:	2201      	movs	r2, #1
 8005b04:	4694      	mov	ip, r2
 8005b06:	e7c1      	b.n	8005a8c <_strtod_l+0x184>
 8005b08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	921f      	str	r2, [sp, #124]	; 0x7c
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	2b30      	cmp	r3, #48	; 0x30
 8005b14:	d0f8      	beq.n	8005b08 <_strtod_l+0x200>
 8005b16:	001a      	movs	r2, r3
 8005b18:	3a31      	subs	r2, #49	; 0x31
 8005b1a:	2a08      	cmp	r2, #8
 8005b1c:	d83f      	bhi.n	8005b9e <_strtod_l+0x296>
 8005b1e:	900c      	str	r0, [sp, #48]	; 0x30
 8005b20:	2000      	movs	r0, #0
 8005b22:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005b24:	9006      	str	r0, [sp, #24]
 8005b26:	9210      	str	r2, [sp, #64]	; 0x40
 8005b28:	001a      	movs	r2, r3
 8005b2a:	1c41      	adds	r1, r0, #1
 8005b2c:	3a30      	subs	r2, #48	; 0x30
 8005b2e:	2b30      	cmp	r3, #48	; 0x30
 8005b30:	d015      	beq.n	8005b5e <_strtod_l+0x256>
 8005b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b34:	185b      	adds	r3, r3, r1
 8005b36:	210a      	movs	r1, #10
 8005b38:	930c      	str	r3, [sp, #48]	; 0x30
 8005b3a:	9b06      	ldr	r3, [sp, #24]
 8005b3c:	18c4      	adds	r4, r0, r3
 8005b3e:	42a3      	cmp	r3, r4
 8005b40:	d115      	bne.n	8005b6e <_strtod_l+0x266>
 8005b42:	9906      	ldr	r1, [sp, #24]
 8005b44:	9b06      	ldr	r3, [sp, #24]
 8005b46:	3101      	adds	r1, #1
 8005b48:	1809      	adds	r1, r1, r0
 8005b4a:	181b      	adds	r3, r3, r0
 8005b4c:	9106      	str	r1, [sp, #24]
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	dc1b      	bgt.n	8005b8a <_strtod_l+0x282>
 8005b52:	230a      	movs	r3, #10
 8005b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b56:	434b      	muls	r3, r1
 8005b58:	2100      	movs	r1, #0
 8005b5a:	18d3      	adds	r3, r2, r3
 8005b5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b60:	0008      	movs	r0, r1
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	921f      	str	r2, [sp, #124]	; 0x7c
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	e7c7      	b.n	8005afa <_strtod_l+0x1f2>
 8005b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b6c:	e7d1      	b.n	8005b12 <_strtod_l+0x20a>
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	dc04      	bgt.n	8005b7c <_strtod_l+0x274>
 8005b72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005b74:	434d      	muls	r5, r1
 8005b76:	950b      	str	r5, [sp, #44]	; 0x2c
 8005b78:	3301      	adds	r3, #1
 8005b7a:	e7e0      	b.n	8005b3e <_strtod_l+0x236>
 8005b7c:	1c5d      	adds	r5, r3, #1
 8005b7e:	2d10      	cmp	r5, #16
 8005b80:	dcfa      	bgt.n	8005b78 <_strtod_l+0x270>
 8005b82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b84:	434d      	muls	r5, r1
 8005b86:	950f      	str	r5, [sp, #60]	; 0x3c
 8005b88:	e7f6      	b.n	8005b78 <_strtod_l+0x270>
 8005b8a:	9b06      	ldr	r3, [sp, #24]
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	dce5      	bgt.n	8005b5e <_strtod_l+0x256>
 8005b92:	230a      	movs	r3, #10
 8005b94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005b96:	4343      	muls	r3, r0
 8005b98:	18d3      	adds	r3, r2, r3
 8005b9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b9c:	e7df      	b.n	8005b5e <_strtod_l+0x256>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	920c      	str	r2, [sp, #48]	; 0x30
 8005ba2:	9206      	str	r2, [sp, #24]
 8005ba4:	3201      	adds	r2, #1
 8005ba6:	e7ad      	b.n	8005b04 <_strtod_l+0x1fc>
 8005ba8:	2400      	movs	r4, #0
 8005baa:	9b08      	ldr	r3, [sp, #32]
 8005bac:	3302      	adds	r3, #2
 8005bae:	931f      	str	r3, [sp, #124]	; 0x7c
 8005bb0:	9b08      	ldr	r3, [sp, #32]
 8005bb2:	789b      	ldrb	r3, [r3, #2]
 8005bb4:	001a      	movs	r2, r3
 8005bb6:	3a30      	subs	r2, #48	; 0x30
 8005bb8:	2a09      	cmp	r2, #9
 8005bba:	d913      	bls.n	8005be4 <_strtod_l+0x2dc>
 8005bbc:	9a08      	ldr	r2, [sp, #32]
 8005bbe:	921f      	str	r2, [sp, #124]	; 0x7c
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	e031      	b.n	8005c28 <_strtod_l+0x320>
 8005bc4:	08008ef4 	.word	0x08008ef4
 8005bc8:	08008cc4 	.word	0x08008cc4
 8005bcc:	ffefffff 	.word	0xffefffff
 8005bd0:	00000433 	.word	0x00000433
 8005bd4:	7ff00000 	.word	0x7ff00000
 8005bd8:	7fffffff 	.word	0x7fffffff
 8005bdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	921f      	str	r2, [sp, #124]	; 0x7c
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d0f9      	beq.n	8005bdc <_strtod_l+0x2d4>
 8005be8:	2200      	movs	r2, #0
 8005bea:	9207      	str	r2, [sp, #28]
 8005bec:	001a      	movs	r2, r3
 8005bee:	3a31      	subs	r2, #49	; 0x31
 8005bf0:	2a08      	cmp	r2, #8
 8005bf2:	d81a      	bhi.n	8005c2a <_strtod_l+0x322>
 8005bf4:	3b30      	subs	r3, #48	; 0x30
 8005bf6:	001a      	movs	r2, r3
 8005bf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bfa:	9307      	str	r3, [sp, #28]
 8005bfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	911f      	str	r1, [sp, #124]	; 0x7c
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	001d      	movs	r5, r3
 8005c06:	3d30      	subs	r5, #48	; 0x30
 8005c08:	2d09      	cmp	r5, #9
 8005c0a:	d939      	bls.n	8005c80 <_strtod_l+0x378>
 8005c0c:	9d07      	ldr	r5, [sp, #28]
 8005c0e:	1b49      	subs	r1, r1, r5
 8005c10:	4db0      	ldr	r5, [pc, #704]	; (8005ed4 <_strtod_l+0x5cc>)
 8005c12:	9507      	str	r5, [sp, #28]
 8005c14:	2908      	cmp	r1, #8
 8005c16:	dc03      	bgt.n	8005c20 <_strtod_l+0x318>
 8005c18:	9207      	str	r2, [sp, #28]
 8005c1a:	42aa      	cmp	r2, r5
 8005c1c:	dd00      	ble.n	8005c20 <_strtod_l+0x318>
 8005c1e:	9507      	str	r5, [sp, #28]
 8005c20:	2c00      	cmp	r4, #0
 8005c22:	d002      	beq.n	8005c2a <_strtod_l+0x322>
 8005c24:	9a07      	ldr	r2, [sp, #28]
 8005c26:	4252      	negs	r2, r2
 8005c28:	9207      	str	r2, [sp, #28]
 8005c2a:	9a06      	ldr	r2, [sp, #24]
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	d14b      	bne.n	8005cc8 <_strtod_l+0x3c0>
 8005c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c32:	4310      	orrs	r0, r2
 8005c34:	d000      	beq.n	8005c38 <_strtod_l+0x330>
 8005c36:	e6ae      	b.n	8005996 <_strtod_l+0x8e>
 8005c38:	4662      	mov	r2, ip
 8005c3a:	2a00      	cmp	r2, #0
 8005c3c:	d000      	beq.n	8005c40 <_strtod_l+0x338>
 8005c3e:	e6c9      	b.n	80059d4 <_strtod_l+0xcc>
 8005c40:	2b69      	cmp	r3, #105	; 0x69
 8005c42:	d025      	beq.n	8005c90 <_strtod_l+0x388>
 8005c44:	dc21      	bgt.n	8005c8a <_strtod_l+0x382>
 8005c46:	2b49      	cmp	r3, #73	; 0x49
 8005c48:	d022      	beq.n	8005c90 <_strtod_l+0x388>
 8005c4a:	2b4e      	cmp	r3, #78	; 0x4e
 8005c4c:	d000      	beq.n	8005c50 <_strtod_l+0x348>
 8005c4e:	e6c1      	b.n	80059d4 <_strtod_l+0xcc>
 8005c50:	49a1      	ldr	r1, [pc, #644]	; (8005ed8 <_strtod_l+0x5d0>)
 8005c52:	a81f      	add	r0, sp, #124	; 0x7c
 8005c54:	f001 f8c0 	bl	8006dd8 <__match>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d100      	bne.n	8005c5e <_strtod_l+0x356>
 8005c5c:	e6ba      	b.n	80059d4 <_strtod_l+0xcc>
 8005c5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b28      	cmp	r3, #40	; 0x28
 8005c64:	d12a      	bne.n	8005cbc <_strtod_l+0x3b4>
 8005c66:	499d      	ldr	r1, [pc, #628]	; (8005edc <_strtod_l+0x5d4>)
 8005c68:	aa22      	add	r2, sp, #136	; 0x88
 8005c6a:	a81f      	add	r0, sp, #124	; 0x7c
 8005c6c:	f001 f8c8 	bl	8006e00 <__hexnan>
 8005c70:	2805      	cmp	r0, #5
 8005c72:	d123      	bne.n	8005cbc <_strtod_l+0x3b4>
 8005c74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c76:	4a9a      	ldr	r2, [pc, #616]	; (8005ee0 <_strtod_l+0x5d8>)
 8005c78:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	0017      	movs	r7, r2
 8005c7e:	e68a      	b.n	8005996 <_strtod_l+0x8e>
 8005c80:	210a      	movs	r1, #10
 8005c82:	434a      	muls	r2, r1
 8005c84:	18d2      	adds	r2, r2, r3
 8005c86:	3a30      	subs	r2, #48	; 0x30
 8005c88:	e7b8      	b.n	8005bfc <_strtod_l+0x2f4>
 8005c8a:	2b6e      	cmp	r3, #110	; 0x6e
 8005c8c:	d0e0      	beq.n	8005c50 <_strtod_l+0x348>
 8005c8e:	e6a1      	b.n	80059d4 <_strtod_l+0xcc>
 8005c90:	4994      	ldr	r1, [pc, #592]	; (8005ee4 <_strtod_l+0x5dc>)
 8005c92:	a81f      	add	r0, sp, #124	; 0x7c
 8005c94:	f001 f8a0 	bl	8006dd8 <__match>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d100      	bne.n	8005c9e <_strtod_l+0x396>
 8005c9c:	e69a      	b.n	80059d4 <_strtod_l+0xcc>
 8005c9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ca0:	4991      	ldr	r1, [pc, #580]	; (8005ee8 <_strtod_l+0x5e0>)
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	a81f      	add	r0, sp, #124	; 0x7c
 8005ca6:	931f      	str	r3, [sp, #124]	; 0x7c
 8005ca8:	f001 f896 	bl	8006dd8 <__match>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d102      	bne.n	8005cb6 <_strtod_l+0x3ae>
 8005cb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	931f      	str	r3, [sp, #124]	; 0x7c
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	4f89      	ldr	r7, [pc, #548]	; (8005ee0 <_strtod_l+0x5d8>)
 8005cba:	e66c      	b.n	8005996 <_strtod_l+0x8e>
 8005cbc:	488b      	ldr	r0, [pc, #556]	; (8005eec <_strtod_l+0x5e4>)
 8005cbe:	f002 fb39 	bl	8008334 <nan>
 8005cc2:	0006      	movs	r6, r0
 8005cc4:	000f      	movs	r7, r1
 8005cc6:	e666      	b.n	8005996 <_strtod_l+0x8e>
 8005cc8:	9b07      	ldr	r3, [sp, #28]
 8005cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	930a      	str	r3, [sp, #40]	; 0x28
 8005cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <_strtod_l+0x3d2>
 8005cd6:	9b06      	ldr	r3, [sp, #24]
 8005cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cda:	9c06      	ldr	r4, [sp, #24]
 8005cdc:	2c10      	cmp	r4, #16
 8005cde:	dd00      	ble.n	8005ce2 <_strtod_l+0x3da>
 8005ce0:	2410      	movs	r4, #16
 8005ce2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005ce4:	f7fc fb2a 	bl	800233c <__aeabi_ui2d>
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	0006      	movs	r6, r0
 8005cec:	000f      	movs	r7, r1
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	dd15      	ble.n	8005d1e <_strtod_l+0x416>
 8005cf2:	0022      	movs	r2, r4
 8005cf4:	4b7e      	ldr	r3, [pc, #504]	; (8005ef0 <_strtod_l+0x5e8>)
 8005cf6:	3a09      	subs	r2, #9
 8005cf8:	00d2      	lsls	r2, r2, #3
 8005cfa:	189b      	adds	r3, r3, r2
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f7fb fc9a 	bl	8001638 <__aeabi_dmul>
 8005d04:	0006      	movs	r6, r0
 8005d06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d08:	000f      	movs	r7, r1
 8005d0a:	f7fc fb17 	bl	800233c <__aeabi_ui2d>
 8005d0e:	0002      	movs	r2, r0
 8005d10:	000b      	movs	r3, r1
 8005d12:	0030      	movs	r0, r6
 8005d14:	0039      	movs	r1, r7
 8005d16:	f7fa fd51 	bl	80007bc <__aeabi_dadd>
 8005d1a:	0006      	movs	r6, r0
 8005d1c:	000f      	movs	r7, r1
 8005d1e:	9b06      	ldr	r3, [sp, #24]
 8005d20:	2b0f      	cmp	r3, #15
 8005d22:	dc39      	bgt.n	8005d98 <_strtod_l+0x490>
 8005d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d100      	bne.n	8005d2c <_strtod_l+0x424>
 8005d2a:	e634      	b.n	8005996 <_strtod_l+0x8e>
 8005d2c:	dd24      	ble.n	8005d78 <_strtod_l+0x470>
 8005d2e:	2b16      	cmp	r3, #22
 8005d30:	dc09      	bgt.n	8005d46 <_strtod_l+0x43e>
 8005d32:	496f      	ldr	r1, [pc, #444]	; (8005ef0 <_strtod_l+0x5e8>)
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	18c9      	adds	r1, r1, r3
 8005d38:	0032      	movs	r2, r6
 8005d3a:	6808      	ldr	r0, [r1, #0]
 8005d3c:	6849      	ldr	r1, [r1, #4]
 8005d3e:	003b      	movs	r3, r7
 8005d40:	f7fb fc7a 	bl	8001638 <__aeabi_dmul>
 8005d44:	e7bd      	b.n	8005cc2 <_strtod_l+0x3ba>
 8005d46:	2325      	movs	r3, #37	; 0x25
 8005d48:	9a06      	ldr	r2, [sp, #24]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	db22      	blt.n	8005d98 <_strtod_l+0x490>
 8005d52:	240f      	movs	r4, #15
 8005d54:	9b06      	ldr	r3, [sp, #24]
 8005d56:	4d66      	ldr	r5, [pc, #408]	; (8005ef0 <_strtod_l+0x5e8>)
 8005d58:	1ae4      	subs	r4, r4, r3
 8005d5a:	00e1      	lsls	r1, r4, #3
 8005d5c:	1869      	adds	r1, r5, r1
 8005d5e:	0032      	movs	r2, r6
 8005d60:	6808      	ldr	r0, [r1, #0]
 8005d62:	6849      	ldr	r1, [r1, #4]
 8005d64:	003b      	movs	r3, r7
 8005d66:	f7fb fc67 	bl	8001638 <__aeabi_dmul>
 8005d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d6c:	1b1c      	subs	r4, r3, r4
 8005d6e:	00e4      	lsls	r4, r4, #3
 8005d70:	192c      	adds	r4, r5, r4
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	e7e3      	b.n	8005d40 <_strtod_l+0x438>
 8005d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7a:	3316      	adds	r3, #22
 8005d7c:	db0c      	blt.n	8005d98 <_strtod_l+0x490>
 8005d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d80:	9a07      	ldr	r2, [sp, #28]
 8005d82:	0030      	movs	r0, r6
 8005d84:	1a9a      	subs	r2, r3, r2
 8005d86:	4b5a      	ldr	r3, [pc, #360]	; (8005ef0 <_strtod_l+0x5e8>)
 8005d88:	00d2      	lsls	r2, r2, #3
 8005d8a:	189b      	adds	r3, r3, r2
 8005d8c:	0039      	movs	r1, r7
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f7fb f84f 	bl	8000e34 <__aeabi_ddiv>
 8005d96:	e794      	b.n	8005cc2 <_strtod_l+0x3ba>
 8005d98:	9b06      	ldr	r3, [sp, #24]
 8005d9a:	1b1c      	subs	r4, r3, r4
 8005d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d9e:	18e4      	adds	r4, r4, r3
 8005da0:	2c00      	cmp	r4, #0
 8005da2:	dd72      	ble.n	8005e8a <_strtod_l+0x582>
 8005da4:	230f      	movs	r3, #15
 8005da6:	0021      	movs	r1, r4
 8005da8:	4019      	ands	r1, r3
 8005daa:	421c      	tst	r4, r3
 8005dac:	d00a      	beq.n	8005dc4 <_strtod_l+0x4bc>
 8005dae:	00cb      	lsls	r3, r1, #3
 8005db0:	494f      	ldr	r1, [pc, #316]	; (8005ef0 <_strtod_l+0x5e8>)
 8005db2:	0032      	movs	r2, r6
 8005db4:	18c9      	adds	r1, r1, r3
 8005db6:	6808      	ldr	r0, [r1, #0]
 8005db8:	6849      	ldr	r1, [r1, #4]
 8005dba:	003b      	movs	r3, r7
 8005dbc:	f7fb fc3c 	bl	8001638 <__aeabi_dmul>
 8005dc0:	0006      	movs	r6, r0
 8005dc2:	000f      	movs	r7, r1
 8005dc4:	230f      	movs	r3, #15
 8005dc6:	439c      	bics	r4, r3
 8005dc8:	d04a      	beq.n	8005e60 <_strtod_l+0x558>
 8005dca:	3326      	adds	r3, #38	; 0x26
 8005dcc:	33ff      	adds	r3, #255	; 0xff
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	dd22      	ble.n	8005e18 <_strtod_l+0x510>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9306      	str	r3, [sp, #24]
 8005dd6:	9307      	str	r3, [sp, #28]
 8005dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dda:	9309      	str	r3, [sp, #36]	; 0x24
 8005ddc:	2322      	movs	r3, #34	; 0x22
 8005dde:	2600      	movs	r6, #0
 8005de0:	9a05      	ldr	r2, [sp, #20]
 8005de2:	4f3f      	ldr	r7, [pc, #252]	; (8005ee0 <_strtod_l+0x5d8>)
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de8:	42b3      	cmp	r3, r6
 8005dea:	d100      	bne.n	8005dee <_strtod_l+0x4e6>
 8005dec:	e5d3      	b.n	8005996 <_strtod_l+0x8e>
 8005dee:	9920      	ldr	r1, [sp, #128]	; 0x80
 8005df0:	9805      	ldr	r0, [sp, #20]
 8005df2:	f001 f90f 	bl	8007014 <_Bfree>
 8005df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005df8:	9805      	ldr	r0, [sp, #20]
 8005dfa:	f001 f90b 	bl	8007014 <_Bfree>
 8005dfe:	9907      	ldr	r1, [sp, #28]
 8005e00:	9805      	ldr	r0, [sp, #20]
 8005e02:	f001 f907 	bl	8007014 <_Bfree>
 8005e06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e08:	9805      	ldr	r0, [sp, #20]
 8005e0a:	f001 f903 	bl	8007014 <_Bfree>
 8005e0e:	9906      	ldr	r1, [sp, #24]
 8005e10:	9805      	ldr	r0, [sp, #20]
 8005e12:	f001 f8ff 	bl	8007014 <_Bfree>
 8005e16:	e5be      	b.n	8005996 <_strtod_l+0x8e>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	0030      	movs	r0, r6
 8005e1c:	0039      	movs	r1, r7
 8005e1e:	4d35      	ldr	r5, [pc, #212]	; (8005ef4 <_strtod_l+0x5ec>)
 8005e20:	1124      	asrs	r4, r4, #4
 8005e22:	9308      	str	r3, [sp, #32]
 8005e24:	2c01      	cmp	r4, #1
 8005e26:	dc1e      	bgt.n	8005e66 <_strtod_l+0x55e>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <_strtod_l+0x528>
 8005e2c:	0006      	movs	r6, r0
 8005e2e:	000f      	movs	r7, r1
 8005e30:	4b31      	ldr	r3, [pc, #196]	; (8005ef8 <_strtod_l+0x5f0>)
 8005e32:	0032      	movs	r2, r6
 8005e34:	18ff      	adds	r7, r7, r3
 8005e36:	9b08      	ldr	r3, [sp, #32]
 8005e38:	00dd      	lsls	r5, r3, #3
 8005e3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <_strtod_l+0x5ec>)
 8005e3c:	195d      	adds	r5, r3, r5
 8005e3e:	6828      	ldr	r0, [r5, #0]
 8005e40:	6869      	ldr	r1, [r5, #4]
 8005e42:	003b      	movs	r3, r7
 8005e44:	f7fb fbf8 	bl	8001638 <__aeabi_dmul>
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <_strtod_l+0x5d8>)
 8005e4a:	4a2c      	ldr	r2, [pc, #176]	; (8005efc <_strtod_l+0x5f4>)
 8005e4c:	0006      	movs	r6, r0
 8005e4e:	400b      	ands	r3, r1
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d8be      	bhi.n	8005dd2 <_strtod_l+0x4ca>
 8005e54:	4a2a      	ldr	r2, [pc, #168]	; (8005f00 <_strtod_l+0x5f8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d913      	bls.n	8005e82 <_strtod_l+0x57a>
 8005e5a:	2601      	movs	r6, #1
 8005e5c:	4f29      	ldr	r7, [pc, #164]	; (8005f04 <_strtod_l+0x5fc>)
 8005e5e:	4276      	negs	r6, r6
 8005e60:	2300      	movs	r3, #0
 8005e62:	9308      	str	r3, [sp, #32]
 8005e64:	e087      	b.n	8005f76 <_strtod_l+0x66e>
 8005e66:	2201      	movs	r2, #1
 8005e68:	4214      	tst	r4, r2
 8005e6a:	d004      	beq.n	8005e76 <_strtod_l+0x56e>
 8005e6c:	682a      	ldr	r2, [r5, #0]
 8005e6e:	686b      	ldr	r3, [r5, #4]
 8005e70:	f7fb fbe2 	bl	8001638 <__aeabi_dmul>
 8005e74:	2301      	movs	r3, #1
 8005e76:	9a08      	ldr	r2, [sp, #32]
 8005e78:	1064      	asrs	r4, r4, #1
 8005e7a:	3201      	adds	r2, #1
 8005e7c:	9208      	str	r2, [sp, #32]
 8005e7e:	3508      	adds	r5, #8
 8005e80:	e7d0      	b.n	8005e24 <_strtod_l+0x51c>
 8005e82:	23d4      	movs	r3, #212	; 0xd4
 8005e84:	049b      	lsls	r3, r3, #18
 8005e86:	18cf      	adds	r7, r1, r3
 8005e88:	e7ea      	b.n	8005e60 <_strtod_l+0x558>
 8005e8a:	2c00      	cmp	r4, #0
 8005e8c:	d0e8      	beq.n	8005e60 <_strtod_l+0x558>
 8005e8e:	4264      	negs	r4, r4
 8005e90:	220f      	movs	r2, #15
 8005e92:	0023      	movs	r3, r4
 8005e94:	4013      	ands	r3, r2
 8005e96:	4214      	tst	r4, r2
 8005e98:	d00a      	beq.n	8005eb0 <_strtod_l+0x5a8>
 8005e9a:	00da      	lsls	r2, r3, #3
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <_strtod_l+0x5e8>)
 8005e9e:	0030      	movs	r0, r6
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	0039      	movs	r1, r7
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f7fa ffc4 	bl	8000e34 <__aeabi_ddiv>
 8005eac:	0006      	movs	r6, r0
 8005eae:	000f      	movs	r7, r1
 8005eb0:	1124      	asrs	r4, r4, #4
 8005eb2:	d0d5      	beq.n	8005e60 <_strtod_l+0x558>
 8005eb4:	2c1f      	cmp	r4, #31
 8005eb6:	dd27      	ble.n	8005f08 <_strtod_l+0x600>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9306      	str	r3, [sp, #24]
 8005ebc:	9307      	str	r3, [sp, #28]
 8005ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec2:	2322      	movs	r3, #34	; 0x22
 8005ec4:	9a05      	ldr	r2, [sp, #20]
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ecc:	2700      	movs	r7, #0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d18d      	bne.n	8005dee <_strtod_l+0x4e6>
 8005ed2:	e560      	b.n	8005996 <_strtod_l+0x8e>
 8005ed4:	00004e1f 	.word	0x00004e1f
 8005ed8:	08008cbe 	.word	0x08008cbe
 8005edc:	08008cd8 	.word	0x08008cd8
 8005ee0:	7ff00000 	.word	0x7ff00000
 8005ee4:	08008cb5 	.word	0x08008cb5
 8005ee8:	08008cb8 	.word	0x08008cb8
 8005eec:	080090ea 	.word	0x080090ea
 8005ef0:	08008fa8 	.word	0x08008fa8
 8005ef4:	08008f80 	.word	0x08008f80
 8005ef8:	fcb00000 	.word	0xfcb00000
 8005efc:	7ca00000 	.word	0x7ca00000
 8005f00:	7c900000 	.word	0x7c900000
 8005f04:	7fefffff 	.word	0x7fefffff
 8005f08:	2310      	movs	r3, #16
 8005f0a:	0022      	movs	r2, r4
 8005f0c:	401a      	ands	r2, r3
 8005f0e:	9208      	str	r2, [sp, #32]
 8005f10:	421c      	tst	r4, r3
 8005f12:	d001      	beq.n	8005f18 <_strtod_l+0x610>
 8005f14:	335a      	adds	r3, #90	; 0x5a
 8005f16:	9308      	str	r3, [sp, #32]
 8005f18:	0030      	movs	r0, r6
 8005f1a:	0039      	movs	r1, r7
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4dc5      	ldr	r5, [pc, #788]	; (8006234 <_strtod_l+0x92c>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	4214      	tst	r4, r2
 8005f24:	d004      	beq.n	8005f30 <_strtod_l+0x628>
 8005f26:	682a      	ldr	r2, [r5, #0]
 8005f28:	686b      	ldr	r3, [r5, #4]
 8005f2a:	f7fb fb85 	bl	8001638 <__aeabi_dmul>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	1064      	asrs	r4, r4, #1
 8005f32:	3508      	adds	r5, #8
 8005f34:	2c00      	cmp	r4, #0
 8005f36:	d1f3      	bne.n	8005f20 <_strtod_l+0x618>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <_strtod_l+0x638>
 8005f3c:	0006      	movs	r6, r0
 8005f3e:	000f      	movs	r7, r1
 8005f40:	9b08      	ldr	r3, [sp, #32]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00f      	beq.n	8005f66 <_strtod_l+0x65e>
 8005f46:	236b      	movs	r3, #107	; 0x6b
 8005f48:	007a      	lsls	r2, r7, #1
 8005f4a:	0d52      	lsrs	r2, r2, #21
 8005f4c:	0039      	movs	r1, r7
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dd08      	ble.n	8005f66 <_strtod_l+0x65e>
 8005f54:	2b1f      	cmp	r3, #31
 8005f56:	dc00      	bgt.n	8005f5a <_strtod_l+0x652>
 8005f58:	e124      	b.n	80061a4 <_strtod_l+0x89c>
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	2b34      	cmp	r3, #52	; 0x34
 8005f5e:	dc00      	bgt.n	8005f62 <_strtod_l+0x65a>
 8005f60:	e119      	b.n	8006196 <_strtod_l+0x88e>
 8005f62:	27dc      	movs	r7, #220	; 0xdc
 8005f64:	04bf      	lsls	r7, r7, #18
 8005f66:	2200      	movs	r2, #0
 8005f68:	2300      	movs	r3, #0
 8005f6a:	0030      	movs	r0, r6
 8005f6c:	0039      	movs	r1, r7
 8005f6e:	f7fa fa6d 	bl	800044c <__aeabi_dcmpeq>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d1a0      	bne.n	8005eb8 <_strtod_l+0x5b0>
 8005f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005f7e:	9b06      	ldr	r3, [sp, #24]
 8005f80:	9805      	ldr	r0, [sp, #20]
 8005f82:	f001 f8af 	bl	80070e4 <__s2b>
 8005f86:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d100      	bne.n	8005f8e <_strtod_l+0x686>
 8005f8c:	e721      	b.n	8005dd2 <_strtod_l+0x4ca>
 8005f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f90:	9907      	ldr	r1, [sp, #28]
 8005f92:	17da      	asrs	r2, r3, #31
 8005f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	401a      	ands	r2, r3
 8005f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9c:	9215      	str	r2, [sp, #84]	; 0x54
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fa2:	17db      	asrs	r3, r3, #31
 8005fa4:	401a      	ands	r2, r3
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	921a      	str	r2, [sp, #104]	; 0x68
 8005faa:	9306      	str	r3, [sp, #24]
 8005fac:	9307      	str	r3, [sp, #28]
 8005fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fb0:	9805      	ldr	r0, [sp, #20]
 8005fb2:	6859      	ldr	r1, [r3, #4]
 8005fb4:	f000 ffea 	bl	8006f8c <_Balloc>
 8005fb8:	9009      	str	r0, [sp, #36]	; 0x24
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d100      	bne.n	8005fc0 <_strtod_l+0x6b8>
 8005fbe:	e70d      	b.n	8005ddc <_strtod_l+0x4d4>
 8005fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	310c      	adds	r1, #12
 8005fc8:	1c9a      	adds	r2, r3, #2
 8005fca:	0092      	lsls	r2, r2, #2
 8005fcc:	300c      	adds	r0, #12
 8005fce:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd0:	f000 ffd3 	bl	8006f7a <memcpy>
 8005fd4:	ab22      	add	r3, sp, #136	; 0x88
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	ab21      	add	r3, sp, #132	; 0x84
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	0032      	movs	r2, r6
 8005fde:	003b      	movs	r3, r7
 8005fe0:	9805      	ldr	r0, [sp, #20]
 8005fe2:	9612      	str	r6, [sp, #72]	; 0x48
 8005fe4:	9713      	str	r7, [sp, #76]	; 0x4c
 8005fe6:	f001 fbc9 	bl	800777c <__d2b>
 8005fea:	9020      	str	r0, [sp, #128]	; 0x80
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d100      	bne.n	8005ff2 <_strtod_l+0x6ea>
 8005ff0:	e6f4      	b.n	8005ddc <_strtod_l+0x4d4>
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	9805      	ldr	r0, [sp, #20]
 8005ff6:	f001 f909 	bl	800720c <__i2b>
 8005ffa:	9007      	str	r0, [sp, #28]
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d100      	bne.n	8006002 <_strtod_l+0x6fa>
 8006000:	e6ec      	b.n	8005ddc <_strtod_l+0x4d4>
 8006002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006004:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006006:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006008:	1ad4      	subs	r4, r2, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	db01      	blt.n	8006012 <_strtod_l+0x70a>
 800600e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006010:	195d      	adds	r5, r3, r5
 8006012:	9908      	ldr	r1, [sp, #32]
 8006014:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006016:	1a5b      	subs	r3, r3, r1
 8006018:	2136      	movs	r1, #54	; 0x36
 800601a:	189b      	adds	r3, r3, r2
 800601c:	1a8a      	subs	r2, r1, r2
 800601e:	4986      	ldr	r1, [pc, #536]	; (8006238 <_strtod_l+0x930>)
 8006020:	2001      	movs	r0, #1
 8006022:	468c      	mov	ip, r1
 8006024:	2100      	movs	r1, #0
 8006026:	3b01      	subs	r3, #1
 8006028:	9110      	str	r1, [sp, #64]	; 0x40
 800602a:	9014      	str	r0, [sp, #80]	; 0x50
 800602c:	4563      	cmp	r3, ip
 800602e:	da07      	bge.n	8006040 <_strtod_l+0x738>
 8006030:	4661      	mov	r1, ip
 8006032:	1ac9      	subs	r1, r1, r3
 8006034:	1a52      	subs	r2, r2, r1
 8006036:	291f      	cmp	r1, #31
 8006038:	dd00      	ble.n	800603c <_strtod_l+0x734>
 800603a:	e0b8      	b.n	80061ae <_strtod_l+0x8a6>
 800603c:	4088      	lsls	r0, r1
 800603e:	9014      	str	r0, [sp, #80]	; 0x50
 8006040:	18ab      	adds	r3, r5, r2
 8006042:	930c      	str	r3, [sp, #48]	; 0x30
 8006044:	18a4      	adds	r4, r4, r2
 8006046:	9b08      	ldr	r3, [sp, #32]
 8006048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800604a:	191c      	adds	r4, r3, r4
 800604c:	002b      	movs	r3, r5
 800604e:	4295      	cmp	r5, r2
 8006050:	dd00      	ble.n	8006054 <_strtod_l+0x74c>
 8006052:	0013      	movs	r3, r2
 8006054:	42a3      	cmp	r3, r4
 8006056:	dd00      	ble.n	800605a <_strtod_l+0x752>
 8006058:	0023      	movs	r3, r4
 800605a:	2b00      	cmp	r3, #0
 800605c:	dd04      	ble.n	8006068 <_strtod_l+0x760>
 800605e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006060:	1ae4      	subs	r4, r4, r3
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	920c      	str	r2, [sp, #48]	; 0x30
 8006066:	1aed      	subs	r5, r5, r3
 8006068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800606a:	2b00      	cmp	r3, #0
 800606c:	dd17      	ble.n	800609e <_strtod_l+0x796>
 800606e:	001a      	movs	r2, r3
 8006070:	9907      	ldr	r1, [sp, #28]
 8006072:	9805      	ldr	r0, [sp, #20]
 8006074:	f001 f990 	bl	8007398 <__pow5mult>
 8006078:	9007      	str	r0, [sp, #28]
 800607a:	2800      	cmp	r0, #0
 800607c:	d100      	bne.n	8006080 <_strtod_l+0x778>
 800607e:	e6ad      	b.n	8005ddc <_strtod_l+0x4d4>
 8006080:	0001      	movs	r1, r0
 8006082:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006084:	9805      	ldr	r0, [sp, #20]
 8006086:	f001 f8d7 	bl	8007238 <__multiply>
 800608a:	900f      	str	r0, [sp, #60]	; 0x3c
 800608c:	2800      	cmp	r0, #0
 800608e:	d100      	bne.n	8006092 <_strtod_l+0x78a>
 8006090:	e6a4      	b.n	8005ddc <_strtod_l+0x4d4>
 8006092:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006094:	9805      	ldr	r0, [sp, #20]
 8006096:	f000 ffbd 	bl	8007014 <_Bfree>
 800609a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800609c:	9320      	str	r3, [sp, #128]	; 0x80
 800609e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	dd00      	ble.n	80060a6 <_strtod_l+0x79e>
 80060a4:	e089      	b.n	80061ba <_strtod_l+0x8b2>
 80060a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dd08      	ble.n	80060be <_strtod_l+0x7b6>
 80060ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80060ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b0:	9805      	ldr	r0, [sp, #20]
 80060b2:	f001 f971 	bl	8007398 <__pow5mult>
 80060b6:	9009      	str	r0, [sp, #36]	; 0x24
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d100      	bne.n	80060be <_strtod_l+0x7b6>
 80060bc:	e68e      	b.n	8005ddc <_strtod_l+0x4d4>
 80060be:	2c00      	cmp	r4, #0
 80060c0:	dd08      	ble.n	80060d4 <_strtod_l+0x7cc>
 80060c2:	0022      	movs	r2, r4
 80060c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060c6:	9805      	ldr	r0, [sp, #20]
 80060c8:	f001 f9c2 	bl	8007450 <__lshift>
 80060cc:	9009      	str	r0, [sp, #36]	; 0x24
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d100      	bne.n	80060d4 <_strtod_l+0x7cc>
 80060d2:	e683      	b.n	8005ddc <_strtod_l+0x4d4>
 80060d4:	2d00      	cmp	r5, #0
 80060d6:	dd08      	ble.n	80060ea <_strtod_l+0x7e2>
 80060d8:	002a      	movs	r2, r5
 80060da:	9907      	ldr	r1, [sp, #28]
 80060dc:	9805      	ldr	r0, [sp, #20]
 80060de:	f001 f9b7 	bl	8007450 <__lshift>
 80060e2:	9007      	str	r0, [sp, #28]
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d100      	bne.n	80060ea <_strtod_l+0x7e2>
 80060e8:	e678      	b.n	8005ddc <_strtod_l+0x4d4>
 80060ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ec:	9920      	ldr	r1, [sp, #128]	; 0x80
 80060ee:	9805      	ldr	r0, [sp, #20]
 80060f0:	f001 fa38 	bl	8007564 <__mdiff>
 80060f4:	9006      	str	r0, [sp, #24]
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d100      	bne.n	80060fc <_strtod_l+0x7f4>
 80060fa:	e66f      	b.n	8005ddc <_strtod_l+0x4d4>
 80060fc:	2200      	movs	r2, #0
 80060fe:	68c3      	ldr	r3, [r0, #12]
 8006100:	9907      	ldr	r1, [sp, #28]
 8006102:	60c2      	str	r2, [r0, #12]
 8006104:	930f      	str	r3, [sp, #60]	; 0x3c
 8006106:	f001 fa11 	bl	800752c <__mcmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	da5f      	bge.n	80061ce <_strtod_l+0x8c6>
 800610e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006110:	4333      	orrs	r3, r6
 8006112:	d000      	beq.n	8006116 <_strtod_l+0x80e>
 8006114:	e08a      	b.n	800622c <_strtod_l+0x924>
 8006116:	033b      	lsls	r3, r7, #12
 8006118:	d000      	beq.n	800611c <_strtod_l+0x814>
 800611a:	e087      	b.n	800622c <_strtod_l+0x924>
 800611c:	22d6      	movs	r2, #214	; 0xd6
 800611e:	4b47      	ldr	r3, [pc, #284]	; (800623c <_strtod_l+0x934>)
 8006120:	04d2      	lsls	r2, r2, #19
 8006122:	403b      	ands	r3, r7
 8006124:	4293      	cmp	r3, r2
 8006126:	d800      	bhi.n	800612a <_strtod_l+0x822>
 8006128:	e080      	b.n	800622c <_strtod_l+0x924>
 800612a:	9b06      	ldr	r3, [sp, #24]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	930a      	str	r3, [sp, #40]	; 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <_strtod_l+0x836>
 8006134:	9b06      	ldr	r3, [sp, #24]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	930a      	str	r3, [sp, #40]	; 0x28
 800613a:	2b01      	cmp	r3, #1
 800613c:	dd76      	ble.n	800622c <_strtod_l+0x924>
 800613e:	9906      	ldr	r1, [sp, #24]
 8006140:	2201      	movs	r2, #1
 8006142:	9805      	ldr	r0, [sp, #20]
 8006144:	f001 f984 	bl	8007450 <__lshift>
 8006148:	9907      	ldr	r1, [sp, #28]
 800614a:	9006      	str	r0, [sp, #24]
 800614c:	f001 f9ee 	bl	800752c <__mcmp>
 8006150:	2800      	cmp	r0, #0
 8006152:	dd6b      	ble.n	800622c <_strtod_l+0x924>
 8006154:	9908      	ldr	r1, [sp, #32]
 8006156:	003b      	movs	r3, r7
 8006158:	4a38      	ldr	r2, [pc, #224]	; (800623c <_strtod_l+0x934>)
 800615a:	2900      	cmp	r1, #0
 800615c:	d100      	bne.n	8006160 <_strtod_l+0x858>
 800615e:	e092      	b.n	8006286 <_strtod_l+0x97e>
 8006160:	0011      	movs	r1, r2
 8006162:	20d6      	movs	r0, #214	; 0xd6
 8006164:	4039      	ands	r1, r7
 8006166:	04c0      	lsls	r0, r0, #19
 8006168:	4281      	cmp	r1, r0
 800616a:	dd00      	ble.n	800616e <_strtod_l+0x866>
 800616c:	e08b      	b.n	8006286 <_strtod_l+0x97e>
 800616e:	23dc      	movs	r3, #220	; 0xdc
 8006170:	049b      	lsls	r3, r3, #18
 8006172:	4299      	cmp	r1, r3
 8006174:	dc00      	bgt.n	8006178 <_strtod_l+0x870>
 8006176:	e6a4      	b.n	8005ec2 <_strtod_l+0x5ba>
 8006178:	0030      	movs	r0, r6
 800617a:	0039      	movs	r1, r7
 800617c:	2200      	movs	r2, #0
 800617e:	4b30      	ldr	r3, [pc, #192]	; (8006240 <_strtod_l+0x938>)
 8006180:	f7fb fa5a 	bl	8001638 <__aeabi_dmul>
 8006184:	0006      	movs	r6, r0
 8006186:	000f      	movs	r7, r1
 8006188:	4308      	orrs	r0, r1
 800618a:	d000      	beq.n	800618e <_strtod_l+0x886>
 800618c:	e62f      	b.n	8005dee <_strtod_l+0x4e6>
 800618e:	2322      	movs	r3, #34	; 0x22
 8006190:	9a05      	ldr	r2, [sp, #20]
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	e62b      	b.n	8005dee <_strtod_l+0x4e6>
 8006196:	234b      	movs	r3, #75	; 0x4b
 8006198:	1a9a      	subs	r2, r3, r2
 800619a:	3b4c      	subs	r3, #76	; 0x4c
 800619c:	4093      	lsls	r3, r2
 800619e:	4019      	ands	r1, r3
 80061a0:	000f      	movs	r7, r1
 80061a2:	e6e0      	b.n	8005f66 <_strtod_l+0x65e>
 80061a4:	2201      	movs	r2, #1
 80061a6:	4252      	negs	r2, r2
 80061a8:	409a      	lsls	r2, r3
 80061aa:	4016      	ands	r6, r2
 80061ac:	e6db      	b.n	8005f66 <_strtod_l+0x65e>
 80061ae:	4925      	ldr	r1, [pc, #148]	; (8006244 <_strtod_l+0x93c>)
 80061b0:	1acb      	subs	r3, r1, r3
 80061b2:	0001      	movs	r1, r0
 80061b4:	4099      	lsls	r1, r3
 80061b6:	9110      	str	r1, [sp, #64]	; 0x40
 80061b8:	e741      	b.n	800603e <_strtod_l+0x736>
 80061ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061bc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80061be:	9805      	ldr	r0, [sp, #20]
 80061c0:	f001 f946 	bl	8007450 <__lshift>
 80061c4:	9020      	str	r0, [sp, #128]	; 0x80
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d000      	beq.n	80061cc <_strtod_l+0x8c4>
 80061ca:	e76c      	b.n	80060a6 <_strtod_l+0x79e>
 80061cc:	e606      	b.n	8005ddc <_strtod_l+0x4d4>
 80061ce:	970c      	str	r7, [sp, #48]	; 0x30
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d176      	bne.n	80062c2 <_strtod_l+0x9ba>
 80061d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061d6:	033b      	lsls	r3, r7, #12
 80061d8:	0b1b      	lsrs	r3, r3, #12
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d038      	beq.n	8006250 <_strtod_l+0x948>
 80061de:	4a1a      	ldr	r2, [pc, #104]	; (8006248 <_strtod_l+0x940>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d138      	bne.n	8006256 <_strtod_l+0x94e>
 80061e4:	2201      	movs	r2, #1
 80061e6:	9b08      	ldr	r3, [sp, #32]
 80061e8:	4252      	negs	r2, r2
 80061ea:	0031      	movs	r1, r6
 80061ec:	0010      	movs	r0, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <_strtod_l+0x902>
 80061f2:	24d4      	movs	r4, #212	; 0xd4
 80061f4:	4b11      	ldr	r3, [pc, #68]	; (800623c <_strtod_l+0x934>)
 80061f6:	0010      	movs	r0, r2
 80061f8:	403b      	ands	r3, r7
 80061fa:	04e4      	lsls	r4, r4, #19
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d804      	bhi.n	800620a <_strtod_l+0x902>
 8006200:	306c      	adds	r0, #108	; 0x6c
 8006202:	0d1b      	lsrs	r3, r3, #20
 8006204:	1ac3      	subs	r3, r0, r3
 8006206:	409a      	lsls	r2, r3
 8006208:	0010      	movs	r0, r2
 800620a:	4281      	cmp	r1, r0
 800620c:	d123      	bne.n	8006256 <_strtod_l+0x94e>
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <_strtod_l+0x944>)
 8006210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006212:	429a      	cmp	r2, r3
 8006214:	d102      	bne.n	800621c <_strtod_l+0x914>
 8006216:	1c4b      	adds	r3, r1, #1
 8006218:	d100      	bne.n	800621c <_strtod_l+0x914>
 800621a:	e5df      	b.n	8005ddc <_strtod_l+0x4d4>
 800621c:	4b07      	ldr	r3, [pc, #28]	; (800623c <_strtod_l+0x934>)
 800621e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006220:	2600      	movs	r6, #0
 8006222:	401a      	ands	r2, r3
 8006224:	0013      	movs	r3, r2
 8006226:	2280      	movs	r2, #128	; 0x80
 8006228:	0352      	lsls	r2, r2, #13
 800622a:	189f      	adds	r7, r3, r2
 800622c:	9b08      	ldr	r3, [sp, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1a2      	bne.n	8006178 <_strtod_l+0x870>
 8006232:	e5dc      	b.n	8005dee <_strtod_l+0x4e6>
 8006234:	08008cf0 	.word	0x08008cf0
 8006238:	fffffc02 	.word	0xfffffc02
 800623c:	7ff00000 	.word	0x7ff00000
 8006240:	39500000 	.word	0x39500000
 8006244:	fffffbe2 	.word	0xfffffbe2
 8006248:	000fffff 	.word	0x000fffff
 800624c:	7fefffff 	.word	0x7fefffff
 8006250:	4333      	orrs	r3, r6
 8006252:	d100      	bne.n	8006256 <_strtod_l+0x94e>
 8006254:	e77e      	b.n	8006154 <_strtod_l+0x84c>
 8006256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01d      	beq.n	8006298 <_strtod_l+0x990>
 800625c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800625e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006260:	4213      	tst	r3, r2
 8006262:	d0e3      	beq.n	800622c <_strtod_l+0x924>
 8006264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006266:	0030      	movs	r0, r6
 8006268:	0039      	movs	r1, r7
 800626a:	9a08      	ldr	r2, [sp, #32]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d017      	beq.n	80062a0 <_strtod_l+0x998>
 8006270:	f7ff fb32 	bl	80058d8 <sulp>
 8006274:	0002      	movs	r2, r0
 8006276:	000b      	movs	r3, r1
 8006278:	9812      	ldr	r0, [sp, #72]	; 0x48
 800627a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800627c:	f7fa fa9e 	bl	80007bc <__aeabi_dadd>
 8006280:	0006      	movs	r6, r0
 8006282:	000f      	movs	r7, r1
 8006284:	e7d2      	b.n	800622c <_strtod_l+0x924>
 8006286:	2601      	movs	r6, #1
 8006288:	4013      	ands	r3, r2
 800628a:	4a99      	ldr	r2, [pc, #612]	; (80064f0 <_strtod_l+0xbe8>)
 800628c:	4276      	negs	r6, r6
 800628e:	189b      	adds	r3, r3, r2
 8006290:	4a98      	ldr	r2, [pc, #608]	; (80064f4 <_strtod_l+0xbec>)
 8006292:	431a      	orrs	r2, r3
 8006294:	0017      	movs	r7, r2
 8006296:	e7c9      	b.n	800622c <_strtod_l+0x924>
 8006298:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800629a:	4233      	tst	r3, r6
 800629c:	d0c6      	beq.n	800622c <_strtod_l+0x924>
 800629e:	e7e1      	b.n	8006264 <_strtod_l+0x95c>
 80062a0:	f7ff fb1a 	bl	80058d8 <sulp>
 80062a4:	0002      	movs	r2, r0
 80062a6:	000b      	movs	r3, r1
 80062a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80062aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80062ac:	f7fb fc30 	bl	8001b10 <__aeabi_dsub>
 80062b0:	2200      	movs	r2, #0
 80062b2:	2300      	movs	r3, #0
 80062b4:	0006      	movs	r6, r0
 80062b6:	000f      	movs	r7, r1
 80062b8:	f7fa f8c8 	bl	800044c <__aeabi_dcmpeq>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d0b5      	beq.n	800622c <_strtod_l+0x924>
 80062c0:	e5ff      	b.n	8005ec2 <_strtod_l+0x5ba>
 80062c2:	9907      	ldr	r1, [sp, #28]
 80062c4:	9806      	ldr	r0, [sp, #24]
 80062c6:	f001 fabd 	bl	8007844 <__ratio>
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	2200      	movs	r2, #0
 80062ce:	05db      	lsls	r3, r3, #23
 80062d0:	0004      	movs	r4, r0
 80062d2:	000d      	movs	r5, r1
 80062d4:	f7fa f8ca 	bl	800046c <__aeabi_dcmple>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d075      	beq.n	80063c8 <_strtod_l+0xac0>
 80062dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d047      	beq.n	8006372 <_strtod_l+0xa6a>
 80062e2:	2300      	movs	r3, #0
 80062e4:	4c84      	ldr	r4, [pc, #528]	; (80064f8 <_strtod_l+0xbf0>)
 80062e6:	2500      	movs	r5, #0
 80062e8:	9310      	str	r3, [sp, #64]	; 0x40
 80062ea:	9411      	str	r4, [sp, #68]	; 0x44
 80062ec:	4c82      	ldr	r4, [pc, #520]	; (80064f8 <_strtod_l+0xbf0>)
 80062ee:	4a83      	ldr	r2, [pc, #524]	; (80064fc <_strtod_l+0xbf4>)
 80062f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062f2:	4013      	ands	r3, r2
 80062f4:	9314      	str	r3, [sp, #80]	; 0x50
 80062f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062f8:	4b81      	ldr	r3, [pc, #516]	; (8006500 <_strtod_l+0xbf8>)
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d000      	beq.n	8006300 <_strtod_l+0x9f8>
 80062fe:	e0ac      	b.n	800645a <_strtod_l+0xb52>
 8006300:	4a80      	ldr	r2, [pc, #512]	; (8006504 <_strtod_l+0xbfc>)
 8006302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006304:	4694      	mov	ip, r2
 8006306:	4463      	add	r3, ip
 8006308:	001f      	movs	r7, r3
 800630a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800630c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800630e:	0030      	movs	r0, r6
 8006310:	0039      	movs	r1, r7
 8006312:	920c      	str	r2, [sp, #48]	; 0x30
 8006314:	930d      	str	r3, [sp, #52]	; 0x34
 8006316:	f001 f9bd 	bl	8007694 <__ulp>
 800631a:	0002      	movs	r2, r0
 800631c:	000b      	movs	r3, r1
 800631e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006320:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006322:	f7fb f989 	bl	8001638 <__aeabi_dmul>
 8006326:	0032      	movs	r2, r6
 8006328:	003b      	movs	r3, r7
 800632a:	f7fa fa47 	bl	80007bc <__aeabi_dadd>
 800632e:	4a73      	ldr	r2, [pc, #460]	; (80064fc <_strtod_l+0xbf4>)
 8006330:	4b75      	ldr	r3, [pc, #468]	; (8006508 <_strtod_l+0xc00>)
 8006332:	0006      	movs	r6, r0
 8006334:	400a      	ands	r2, r1
 8006336:	429a      	cmp	r2, r3
 8006338:	d95e      	bls.n	80063f8 <_strtod_l+0xaf0>
 800633a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800633c:	4b73      	ldr	r3, [pc, #460]	; (800650c <_strtod_l+0xc04>)
 800633e:	429a      	cmp	r2, r3
 8006340:	d103      	bne.n	800634a <_strtod_l+0xa42>
 8006342:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006344:	3301      	adds	r3, #1
 8006346:	d100      	bne.n	800634a <_strtod_l+0xa42>
 8006348:	e548      	b.n	8005ddc <_strtod_l+0x4d4>
 800634a:	2601      	movs	r6, #1
 800634c:	4f6f      	ldr	r7, [pc, #444]	; (800650c <_strtod_l+0xc04>)
 800634e:	4276      	negs	r6, r6
 8006350:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006352:	9805      	ldr	r0, [sp, #20]
 8006354:	f000 fe5e 	bl	8007014 <_Bfree>
 8006358:	9909      	ldr	r1, [sp, #36]	; 0x24
 800635a:	9805      	ldr	r0, [sp, #20]
 800635c:	f000 fe5a 	bl	8007014 <_Bfree>
 8006360:	9907      	ldr	r1, [sp, #28]
 8006362:	9805      	ldr	r0, [sp, #20]
 8006364:	f000 fe56 	bl	8007014 <_Bfree>
 8006368:	9906      	ldr	r1, [sp, #24]
 800636a:	9805      	ldr	r0, [sp, #20]
 800636c:	f000 fe52 	bl	8007014 <_Bfree>
 8006370:	e61d      	b.n	8005fae <_strtod_l+0x6a6>
 8006372:	2e00      	cmp	r6, #0
 8006374:	d11c      	bne.n	80063b0 <_strtod_l+0xaa8>
 8006376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006378:	031b      	lsls	r3, r3, #12
 800637a:	d11f      	bne.n	80063bc <_strtod_l+0xab4>
 800637c:	2200      	movs	r2, #0
 800637e:	0020      	movs	r0, r4
 8006380:	0029      	movs	r1, r5
 8006382:	4b5d      	ldr	r3, [pc, #372]	; (80064f8 <_strtod_l+0xbf0>)
 8006384:	f7fa f868 	bl	8000458 <__aeabi_dcmplt>
 8006388:	2800      	cmp	r0, #0
 800638a:	d11a      	bne.n	80063c2 <_strtod_l+0xaba>
 800638c:	0020      	movs	r0, r4
 800638e:	0029      	movs	r1, r5
 8006390:	2200      	movs	r2, #0
 8006392:	4b5f      	ldr	r3, [pc, #380]	; (8006510 <_strtod_l+0xc08>)
 8006394:	f7fb f950 	bl	8001638 <__aeabi_dmul>
 8006398:	0005      	movs	r5, r0
 800639a:	000c      	movs	r4, r1
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	061b      	lsls	r3, r3, #24
 80063a0:	18e3      	adds	r3, r4, r3
 80063a2:	951c      	str	r5, [sp, #112]	; 0x70
 80063a4:	931d      	str	r3, [sp, #116]	; 0x74
 80063a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80063a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063aa:	9210      	str	r2, [sp, #64]	; 0x40
 80063ac:	9311      	str	r3, [sp, #68]	; 0x44
 80063ae:	e79e      	b.n	80062ee <_strtod_l+0x9e6>
 80063b0:	2e01      	cmp	r6, #1
 80063b2:	d103      	bne.n	80063bc <_strtod_l+0xab4>
 80063b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d100      	bne.n	80063bc <_strtod_l+0xab4>
 80063ba:	e582      	b.n	8005ec2 <_strtod_l+0x5ba>
 80063bc:	2300      	movs	r3, #0
 80063be:	4c55      	ldr	r4, [pc, #340]	; (8006514 <_strtod_l+0xc0c>)
 80063c0:	e791      	b.n	80062e6 <_strtod_l+0x9de>
 80063c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063c4:	4c52      	ldr	r4, [pc, #328]	; (8006510 <_strtod_l+0xc08>)
 80063c6:	e7e9      	b.n	800639c <_strtod_l+0xa94>
 80063c8:	2200      	movs	r2, #0
 80063ca:	0020      	movs	r0, r4
 80063cc:	0029      	movs	r1, r5
 80063ce:	4b50      	ldr	r3, [pc, #320]	; (8006510 <_strtod_l+0xc08>)
 80063d0:	f7fb f932 	bl	8001638 <__aeabi_dmul>
 80063d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063d6:	0005      	movs	r5, r0
 80063d8:	000b      	movs	r3, r1
 80063da:	000c      	movs	r4, r1
 80063dc:	2a00      	cmp	r2, #0
 80063de:	d107      	bne.n	80063f0 <_strtod_l+0xae8>
 80063e0:	2280      	movs	r2, #128	; 0x80
 80063e2:	0612      	lsls	r2, r2, #24
 80063e4:	188b      	adds	r3, r1, r2
 80063e6:	9016      	str	r0, [sp, #88]	; 0x58
 80063e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80063ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063ee:	e7dc      	b.n	80063aa <_strtod_l+0xaa2>
 80063f0:	0002      	movs	r2, r0
 80063f2:	9216      	str	r2, [sp, #88]	; 0x58
 80063f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80063f6:	e7f8      	b.n	80063ea <_strtod_l+0xae2>
 80063f8:	23d4      	movs	r3, #212	; 0xd4
 80063fa:	049b      	lsls	r3, r3, #18
 80063fc:	18cf      	adds	r7, r1, r3
 80063fe:	9b08      	ldr	r3, [sp, #32]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1a5      	bne.n	8006350 <_strtod_l+0xa48>
 8006404:	4b3d      	ldr	r3, [pc, #244]	; (80064fc <_strtod_l+0xbf4>)
 8006406:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006408:	403b      	ands	r3, r7
 800640a:	429a      	cmp	r2, r3
 800640c:	d1a0      	bne.n	8006350 <_strtod_l+0xa48>
 800640e:	0028      	movs	r0, r5
 8006410:	0021      	movs	r1, r4
 8006412:	f7fa f8b5 	bl	8000580 <__aeabi_d2lz>
 8006416:	f7fa f8ef 	bl	80005f8 <__aeabi_l2d>
 800641a:	0002      	movs	r2, r0
 800641c:	000b      	movs	r3, r1
 800641e:	0028      	movs	r0, r5
 8006420:	0021      	movs	r1, r4
 8006422:	f7fb fb75 	bl	8001b10 <__aeabi_dsub>
 8006426:	033b      	lsls	r3, r7, #12
 8006428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800642a:	0b1b      	lsrs	r3, r3, #12
 800642c:	4333      	orrs	r3, r6
 800642e:	4313      	orrs	r3, r2
 8006430:	0004      	movs	r4, r0
 8006432:	000d      	movs	r5, r1
 8006434:	4a38      	ldr	r2, [pc, #224]	; (8006518 <_strtod_l+0xc10>)
 8006436:	2b00      	cmp	r3, #0
 8006438:	d055      	beq.n	80064e6 <_strtod_l+0xbde>
 800643a:	4b38      	ldr	r3, [pc, #224]	; (800651c <_strtod_l+0xc14>)
 800643c:	f7fa f80c 	bl	8000458 <__aeabi_dcmplt>
 8006440:	2800      	cmp	r0, #0
 8006442:	d000      	beq.n	8006446 <_strtod_l+0xb3e>
 8006444:	e4d3      	b.n	8005dee <_strtod_l+0x4e6>
 8006446:	0020      	movs	r0, r4
 8006448:	0029      	movs	r1, r5
 800644a:	4a35      	ldr	r2, [pc, #212]	; (8006520 <_strtod_l+0xc18>)
 800644c:	4b30      	ldr	r3, [pc, #192]	; (8006510 <_strtod_l+0xc08>)
 800644e:	f7fa f817 	bl	8000480 <__aeabi_dcmpgt>
 8006452:	2800      	cmp	r0, #0
 8006454:	d100      	bne.n	8006458 <_strtod_l+0xb50>
 8006456:	e77b      	b.n	8006350 <_strtod_l+0xa48>
 8006458:	e4c9      	b.n	8005dee <_strtod_l+0x4e6>
 800645a:	9b08      	ldr	r3, [sp, #32]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d02b      	beq.n	80064b8 <_strtod_l+0xbb0>
 8006460:	23d4      	movs	r3, #212	; 0xd4
 8006462:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006464:	04db      	lsls	r3, r3, #19
 8006466:	429a      	cmp	r2, r3
 8006468:	d826      	bhi.n	80064b8 <_strtod_l+0xbb0>
 800646a:	0028      	movs	r0, r5
 800646c:	0021      	movs	r1, r4
 800646e:	4a2d      	ldr	r2, [pc, #180]	; (8006524 <_strtod_l+0xc1c>)
 8006470:	4b2d      	ldr	r3, [pc, #180]	; (8006528 <_strtod_l+0xc20>)
 8006472:	f7f9 fffb 	bl	800046c <__aeabi_dcmple>
 8006476:	2800      	cmp	r0, #0
 8006478:	d017      	beq.n	80064aa <_strtod_l+0xba2>
 800647a:	0028      	movs	r0, r5
 800647c:	0021      	movs	r1, r4
 800647e:	f7fa f861 	bl	8000544 <__aeabi_d2uiz>
 8006482:	2800      	cmp	r0, #0
 8006484:	d100      	bne.n	8006488 <_strtod_l+0xb80>
 8006486:	3001      	adds	r0, #1
 8006488:	f7fb ff58 	bl	800233c <__aeabi_ui2d>
 800648c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800648e:	0005      	movs	r5, r0
 8006490:	000b      	movs	r3, r1
 8006492:	000c      	movs	r4, r1
 8006494:	2a00      	cmp	r2, #0
 8006496:	d122      	bne.n	80064de <_strtod_l+0xbd6>
 8006498:	2280      	movs	r2, #128	; 0x80
 800649a:	0612      	lsls	r2, r2, #24
 800649c:	188b      	adds	r3, r1, r2
 800649e:	9018      	str	r0, [sp, #96]	; 0x60
 80064a0:	9319      	str	r3, [sp, #100]	; 0x64
 80064a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80064a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064a6:	9210      	str	r2, [sp, #64]	; 0x40
 80064a8:	9311      	str	r3, [sp, #68]	; 0x44
 80064aa:	22d6      	movs	r2, #214	; 0xd6
 80064ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064ae:	04d2      	lsls	r2, r2, #19
 80064b0:	189b      	adds	r3, r3, r2
 80064b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	9311      	str	r3, [sp, #68]	; 0x44
 80064b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80064ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80064bc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80064be:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80064c0:	f001 f8e8 	bl	8007694 <__ulp>
 80064c4:	0002      	movs	r2, r0
 80064c6:	000b      	movs	r3, r1
 80064c8:	0030      	movs	r0, r6
 80064ca:	0039      	movs	r1, r7
 80064cc:	f7fb f8b4 	bl	8001638 <__aeabi_dmul>
 80064d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064d4:	f7fa f972 	bl	80007bc <__aeabi_dadd>
 80064d8:	0006      	movs	r6, r0
 80064da:	000f      	movs	r7, r1
 80064dc:	e78f      	b.n	80063fe <_strtod_l+0xaf6>
 80064de:	0002      	movs	r2, r0
 80064e0:	9218      	str	r2, [sp, #96]	; 0x60
 80064e2:	9319      	str	r3, [sp, #100]	; 0x64
 80064e4:	e7dd      	b.n	80064a2 <_strtod_l+0xb9a>
 80064e6:	4b11      	ldr	r3, [pc, #68]	; (800652c <_strtod_l+0xc24>)
 80064e8:	f7f9 ffb6 	bl	8000458 <__aeabi_dcmplt>
 80064ec:	e7b1      	b.n	8006452 <_strtod_l+0xb4a>
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	fff00000 	.word	0xfff00000
 80064f4:	000fffff 	.word	0x000fffff
 80064f8:	3ff00000 	.word	0x3ff00000
 80064fc:	7ff00000 	.word	0x7ff00000
 8006500:	7fe00000 	.word	0x7fe00000
 8006504:	fcb00000 	.word	0xfcb00000
 8006508:	7c9fffff 	.word	0x7c9fffff
 800650c:	7fefffff 	.word	0x7fefffff
 8006510:	3fe00000 	.word	0x3fe00000
 8006514:	bff00000 	.word	0xbff00000
 8006518:	94a03595 	.word	0x94a03595
 800651c:	3fdfffff 	.word	0x3fdfffff
 8006520:	35afe535 	.word	0x35afe535
 8006524:	ffc00000 	.word	0xffc00000
 8006528:	41dfffff 	.word	0x41dfffff
 800652c:	3fcfffff 	.word	0x3fcfffff

08006530 <_strtod_r>:
 8006530:	b510      	push	{r4, lr}
 8006532:	4b02      	ldr	r3, [pc, #8]	; (800653c <_strtod_r+0xc>)
 8006534:	f7ff f9e8 	bl	8005908 <_strtod_l>
 8006538:	bd10      	pop	{r4, pc}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	20000074 	.word	0x20000074

08006540 <_strtol_l.constprop.0>:
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006542:	b087      	sub	sp, #28
 8006544:	001e      	movs	r6, r3
 8006546:	9005      	str	r0, [sp, #20]
 8006548:	9101      	str	r1, [sp, #4]
 800654a:	9202      	str	r2, [sp, #8]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d045      	beq.n	80065dc <_strtol_l.constprop.0+0x9c>
 8006550:	000b      	movs	r3, r1
 8006552:	2e24      	cmp	r6, #36	; 0x24
 8006554:	d842      	bhi.n	80065dc <_strtol_l.constprop.0+0x9c>
 8006556:	4a3f      	ldr	r2, [pc, #252]	; (8006654 <_strtol_l.constprop.0+0x114>)
 8006558:	2108      	movs	r1, #8
 800655a:	4694      	mov	ip, r2
 800655c:	001a      	movs	r2, r3
 800655e:	4660      	mov	r0, ip
 8006560:	7814      	ldrb	r4, [r2, #0]
 8006562:	3301      	adds	r3, #1
 8006564:	5d00      	ldrb	r0, [r0, r4]
 8006566:	001d      	movs	r5, r3
 8006568:	0007      	movs	r7, r0
 800656a:	400f      	ands	r7, r1
 800656c:	4208      	tst	r0, r1
 800656e:	d1f5      	bne.n	800655c <_strtol_l.constprop.0+0x1c>
 8006570:	2c2d      	cmp	r4, #45	; 0x2d
 8006572:	d13a      	bne.n	80065ea <_strtol_l.constprop.0+0xaa>
 8006574:	2701      	movs	r7, #1
 8006576:	781c      	ldrb	r4, [r3, #0]
 8006578:	1c95      	adds	r5, r2, #2
 800657a:	2e00      	cmp	r6, #0
 800657c:	d065      	beq.n	800664a <_strtol_l.constprop.0+0x10a>
 800657e:	2e10      	cmp	r6, #16
 8006580:	d109      	bne.n	8006596 <_strtol_l.constprop.0+0x56>
 8006582:	2c30      	cmp	r4, #48	; 0x30
 8006584:	d107      	bne.n	8006596 <_strtol_l.constprop.0+0x56>
 8006586:	2220      	movs	r2, #32
 8006588:	782b      	ldrb	r3, [r5, #0]
 800658a:	4393      	bics	r3, r2
 800658c:	2b58      	cmp	r3, #88	; 0x58
 800658e:	d157      	bne.n	8006640 <_strtol_l.constprop.0+0x100>
 8006590:	2610      	movs	r6, #16
 8006592:	786c      	ldrb	r4, [r5, #1]
 8006594:	3502      	adds	r5, #2
 8006596:	4b30      	ldr	r3, [pc, #192]	; (8006658 <_strtol_l.constprop.0+0x118>)
 8006598:	0031      	movs	r1, r6
 800659a:	18fb      	adds	r3, r7, r3
 800659c:	0018      	movs	r0, r3
 800659e:	9303      	str	r3, [sp, #12]
 80065a0:	f7f9 fe54 	bl	800024c <__aeabi_uidivmod>
 80065a4:	2300      	movs	r3, #0
 80065a6:	2201      	movs	r2, #1
 80065a8:	4684      	mov	ip, r0
 80065aa:	0018      	movs	r0, r3
 80065ac:	9104      	str	r1, [sp, #16]
 80065ae:	4252      	negs	r2, r2
 80065b0:	0021      	movs	r1, r4
 80065b2:	3930      	subs	r1, #48	; 0x30
 80065b4:	2909      	cmp	r1, #9
 80065b6:	d81d      	bhi.n	80065f4 <_strtol_l.constprop.0+0xb4>
 80065b8:	000c      	movs	r4, r1
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	dd28      	ble.n	8006610 <_strtol_l.constprop.0+0xd0>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	db24      	blt.n	800660c <_strtol_l.constprop.0+0xcc>
 80065c2:	0013      	movs	r3, r2
 80065c4:	4584      	cmp	ip, r0
 80065c6:	d306      	bcc.n	80065d6 <_strtol_l.constprop.0+0x96>
 80065c8:	d102      	bne.n	80065d0 <_strtol_l.constprop.0+0x90>
 80065ca:	9904      	ldr	r1, [sp, #16]
 80065cc:	42a1      	cmp	r1, r4
 80065ce:	db02      	blt.n	80065d6 <_strtol_l.constprop.0+0x96>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4370      	muls	r0, r6
 80065d4:	1820      	adds	r0, r4, r0
 80065d6:	782c      	ldrb	r4, [r5, #0]
 80065d8:	3501      	adds	r5, #1
 80065da:	e7e9      	b.n	80065b0 <_strtol_l.constprop.0+0x70>
 80065dc:	f7fe ff04 	bl	80053e8 <__errno>
 80065e0:	2316      	movs	r3, #22
 80065e2:	6003      	str	r3, [r0, #0]
 80065e4:	2000      	movs	r0, #0
 80065e6:	b007      	add	sp, #28
 80065e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ea:	2c2b      	cmp	r4, #43	; 0x2b
 80065ec:	d1c5      	bne.n	800657a <_strtol_l.constprop.0+0x3a>
 80065ee:	781c      	ldrb	r4, [r3, #0]
 80065f0:	1c95      	adds	r5, r2, #2
 80065f2:	e7c2      	b.n	800657a <_strtol_l.constprop.0+0x3a>
 80065f4:	0021      	movs	r1, r4
 80065f6:	3941      	subs	r1, #65	; 0x41
 80065f8:	2919      	cmp	r1, #25
 80065fa:	d801      	bhi.n	8006600 <_strtol_l.constprop.0+0xc0>
 80065fc:	3c37      	subs	r4, #55	; 0x37
 80065fe:	e7dc      	b.n	80065ba <_strtol_l.constprop.0+0x7a>
 8006600:	0021      	movs	r1, r4
 8006602:	3961      	subs	r1, #97	; 0x61
 8006604:	2919      	cmp	r1, #25
 8006606:	d803      	bhi.n	8006610 <_strtol_l.constprop.0+0xd0>
 8006608:	3c57      	subs	r4, #87	; 0x57
 800660a:	e7d6      	b.n	80065ba <_strtol_l.constprop.0+0x7a>
 800660c:	0013      	movs	r3, r2
 800660e:	e7e2      	b.n	80065d6 <_strtol_l.constprop.0+0x96>
 8006610:	2b00      	cmp	r3, #0
 8006612:	da09      	bge.n	8006628 <_strtol_l.constprop.0+0xe8>
 8006614:	2322      	movs	r3, #34	; 0x22
 8006616:	9a05      	ldr	r2, [sp, #20]
 8006618:	9803      	ldr	r0, [sp, #12]
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	9b02      	ldr	r3, [sp, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0e1      	beq.n	80065e6 <_strtol_l.constprop.0+0xa6>
 8006622:	1e6b      	subs	r3, r5, #1
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	e007      	b.n	8006638 <_strtol_l.constprop.0+0xf8>
 8006628:	2f00      	cmp	r7, #0
 800662a:	d000      	beq.n	800662e <_strtol_l.constprop.0+0xee>
 800662c:	4240      	negs	r0, r0
 800662e:	9a02      	ldr	r2, [sp, #8]
 8006630:	2a00      	cmp	r2, #0
 8006632:	d0d8      	beq.n	80065e6 <_strtol_l.constprop.0+0xa6>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f4      	bne.n	8006622 <_strtol_l.constprop.0+0xe2>
 8006638:	9b02      	ldr	r3, [sp, #8]
 800663a:	9a01      	ldr	r2, [sp, #4]
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e7d2      	b.n	80065e6 <_strtol_l.constprop.0+0xa6>
 8006640:	2430      	movs	r4, #48	; 0x30
 8006642:	2e00      	cmp	r6, #0
 8006644:	d1a7      	bne.n	8006596 <_strtol_l.constprop.0+0x56>
 8006646:	3608      	adds	r6, #8
 8006648:	e7a5      	b.n	8006596 <_strtol_l.constprop.0+0x56>
 800664a:	2c30      	cmp	r4, #48	; 0x30
 800664c:	d09b      	beq.n	8006586 <_strtol_l.constprop.0+0x46>
 800664e:	260a      	movs	r6, #10
 8006650:	e7a1      	b.n	8006596 <_strtol_l.constprop.0+0x56>
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	08008d19 	.word	0x08008d19
 8006658:	7fffffff 	.word	0x7fffffff

0800665c <_strtol_r>:
 800665c:	b510      	push	{r4, lr}
 800665e:	f7ff ff6f 	bl	8006540 <_strtol_l.constprop.0>
 8006662:	bd10      	pop	{r4, pc}

08006664 <std>:
 8006664:	2300      	movs	r3, #0
 8006666:	b510      	push	{r4, lr}
 8006668:	0004      	movs	r4, r0
 800666a:	6003      	str	r3, [r0, #0]
 800666c:	6043      	str	r3, [r0, #4]
 800666e:	6083      	str	r3, [r0, #8]
 8006670:	8181      	strh	r1, [r0, #12]
 8006672:	6643      	str	r3, [r0, #100]	; 0x64
 8006674:	0019      	movs	r1, r3
 8006676:	81c2      	strh	r2, [r0, #14]
 8006678:	6103      	str	r3, [r0, #16]
 800667a:	6143      	str	r3, [r0, #20]
 800667c:	6183      	str	r3, [r0, #24]
 800667e:	2208      	movs	r2, #8
 8006680:	305c      	adds	r0, #92	; 0x5c
 8006682:	f7fe fedb 	bl	800543c <memset>
 8006686:	4b05      	ldr	r3, [pc, #20]	; (800669c <std+0x38>)
 8006688:	6224      	str	r4, [r4, #32]
 800668a:	6263      	str	r3, [r4, #36]	; 0x24
 800668c:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <std+0x3c>)
 800668e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006690:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <std+0x40>)
 8006692:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006694:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <std+0x44>)
 8006696:	6323      	str	r3, [r4, #48]	; 0x30
 8006698:	bd10      	pop	{r4, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	08008365 	.word	0x08008365
 80066a0:	0800838d 	.word	0x0800838d
 80066a4:	080083c5 	.word	0x080083c5
 80066a8:	080083f1 	.word	0x080083f1

080066ac <_cleanup_r>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	4902      	ldr	r1, [pc, #8]	; (80066b8 <_cleanup_r+0xc>)
 80066b0:	f000 f8ba 	bl	8006828 <_fwalk_reent>
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	08008779 	.word	0x08008779

080066bc <__sfmoreglue>:
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	2568      	movs	r5, #104	; 0x68
 80066c0:	1e4a      	subs	r2, r1, #1
 80066c2:	4355      	muls	r5, r2
 80066c4:	000e      	movs	r6, r1
 80066c6:	0029      	movs	r1, r5
 80066c8:	3174      	adds	r1, #116	; 0x74
 80066ca:	f001 f977 	bl	80079bc <_malloc_r>
 80066ce:	1e04      	subs	r4, r0, #0
 80066d0:	d008      	beq.n	80066e4 <__sfmoreglue+0x28>
 80066d2:	2100      	movs	r1, #0
 80066d4:	002a      	movs	r2, r5
 80066d6:	6001      	str	r1, [r0, #0]
 80066d8:	6046      	str	r6, [r0, #4]
 80066da:	300c      	adds	r0, #12
 80066dc:	60a0      	str	r0, [r4, #8]
 80066de:	3268      	adds	r2, #104	; 0x68
 80066e0:	f7fe feac 	bl	800543c <memset>
 80066e4:	0020      	movs	r0, r4
 80066e6:	bd70      	pop	{r4, r5, r6, pc}

080066e8 <__sfp_lock_acquire>:
 80066e8:	b510      	push	{r4, lr}
 80066ea:	4802      	ldr	r0, [pc, #8]	; (80066f4 <__sfp_lock_acquire+0xc>)
 80066ec:	f000 fc31 	bl	8006f52 <__retarget_lock_acquire_recursive>
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	20000315 	.word	0x20000315

080066f8 <__sfp_lock_release>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4802      	ldr	r0, [pc, #8]	; (8006704 <__sfp_lock_release+0xc>)
 80066fc:	f000 fc2a 	bl	8006f54 <__retarget_lock_release_recursive>
 8006700:	bd10      	pop	{r4, pc}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	20000315 	.word	0x20000315

08006708 <__sinit_lock_acquire>:
 8006708:	b510      	push	{r4, lr}
 800670a:	4802      	ldr	r0, [pc, #8]	; (8006714 <__sinit_lock_acquire+0xc>)
 800670c:	f000 fc21 	bl	8006f52 <__retarget_lock_acquire_recursive>
 8006710:	bd10      	pop	{r4, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	20000316 	.word	0x20000316

08006718 <__sinit_lock_release>:
 8006718:	b510      	push	{r4, lr}
 800671a:	4802      	ldr	r0, [pc, #8]	; (8006724 <__sinit_lock_release+0xc>)
 800671c:	f000 fc1a 	bl	8006f54 <__retarget_lock_release_recursive>
 8006720:	bd10      	pop	{r4, pc}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	20000316 	.word	0x20000316

08006728 <__sinit>:
 8006728:	b513      	push	{r0, r1, r4, lr}
 800672a:	0004      	movs	r4, r0
 800672c:	f7ff ffec 	bl	8006708 <__sinit_lock_acquire>
 8006730:	69a3      	ldr	r3, [r4, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <__sinit+0x14>
 8006736:	f7ff ffef 	bl	8006718 <__sinit_lock_release>
 800673a:	bd13      	pop	{r0, r1, r4, pc}
 800673c:	64a3      	str	r3, [r4, #72]	; 0x48
 800673e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006740:	6523      	str	r3, [r4, #80]	; 0x50
 8006742:	4b13      	ldr	r3, [pc, #76]	; (8006790 <__sinit+0x68>)
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <__sinit+0x6c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	62a2      	str	r2, [r4, #40]	; 0x28
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	42a3      	cmp	r3, r4
 800674e:	d101      	bne.n	8006754 <__sinit+0x2c>
 8006750:	2301      	movs	r3, #1
 8006752:	61a3      	str	r3, [r4, #24]
 8006754:	0020      	movs	r0, r4
 8006756:	f000 f81f 	bl	8006798 <__sfp>
 800675a:	6060      	str	r0, [r4, #4]
 800675c:	0020      	movs	r0, r4
 800675e:	f000 f81b 	bl	8006798 <__sfp>
 8006762:	60a0      	str	r0, [r4, #8]
 8006764:	0020      	movs	r0, r4
 8006766:	f000 f817 	bl	8006798 <__sfp>
 800676a:	2200      	movs	r2, #0
 800676c:	2104      	movs	r1, #4
 800676e:	60e0      	str	r0, [r4, #12]
 8006770:	6860      	ldr	r0, [r4, #4]
 8006772:	f7ff ff77 	bl	8006664 <std>
 8006776:	2201      	movs	r2, #1
 8006778:	2109      	movs	r1, #9
 800677a:	68a0      	ldr	r0, [r4, #8]
 800677c:	f7ff ff72 	bl	8006664 <std>
 8006780:	2202      	movs	r2, #2
 8006782:	2112      	movs	r1, #18
 8006784:	68e0      	ldr	r0, [r4, #12]
 8006786:	f7ff ff6d 	bl	8006664 <std>
 800678a:	2301      	movs	r3, #1
 800678c:	61a3      	str	r3, [r4, #24]
 800678e:	e7d2      	b.n	8006736 <__sinit+0xe>
 8006790:	08008cac 	.word	0x08008cac
 8006794:	080066ad 	.word	0x080066ad

08006798 <__sfp>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	0007      	movs	r7, r0
 800679c:	f7ff ffa4 	bl	80066e8 <__sfp_lock_acquire>
 80067a0:	4b1f      	ldr	r3, [pc, #124]	; (8006820 <__sfp+0x88>)
 80067a2:	681e      	ldr	r6, [r3, #0]
 80067a4:	69b3      	ldr	r3, [r6, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d102      	bne.n	80067b0 <__sfp+0x18>
 80067aa:	0030      	movs	r0, r6
 80067ac:	f7ff ffbc 	bl	8006728 <__sinit>
 80067b0:	3648      	adds	r6, #72	; 0x48
 80067b2:	68b4      	ldr	r4, [r6, #8]
 80067b4:	6873      	ldr	r3, [r6, #4]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	d504      	bpl.n	80067c4 <__sfp+0x2c>
 80067ba:	6833      	ldr	r3, [r6, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d022      	beq.n	8006806 <__sfp+0x6e>
 80067c0:	6836      	ldr	r6, [r6, #0]
 80067c2:	e7f6      	b.n	80067b2 <__sfp+0x1a>
 80067c4:	220c      	movs	r2, #12
 80067c6:	5ea5      	ldrsh	r5, [r4, r2]
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	d11a      	bne.n	8006802 <__sfp+0x6a>
 80067cc:	0020      	movs	r0, r4
 80067ce:	4b15      	ldr	r3, [pc, #84]	; (8006824 <__sfp+0x8c>)
 80067d0:	3058      	adds	r0, #88	; 0x58
 80067d2:	60e3      	str	r3, [r4, #12]
 80067d4:	6665      	str	r5, [r4, #100]	; 0x64
 80067d6:	f000 fbbb 	bl	8006f50 <__retarget_lock_init_recursive>
 80067da:	f7ff ff8d 	bl	80066f8 <__sfp_lock_release>
 80067de:	0020      	movs	r0, r4
 80067e0:	2208      	movs	r2, #8
 80067e2:	0029      	movs	r1, r5
 80067e4:	6025      	str	r5, [r4, #0]
 80067e6:	60a5      	str	r5, [r4, #8]
 80067e8:	6065      	str	r5, [r4, #4]
 80067ea:	6125      	str	r5, [r4, #16]
 80067ec:	6165      	str	r5, [r4, #20]
 80067ee:	61a5      	str	r5, [r4, #24]
 80067f0:	305c      	adds	r0, #92	; 0x5c
 80067f2:	f7fe fe23 	bl	800543c <memset>
 80067f6:	6365      	str	r5, [r4, #52]	; 0x34
 80067f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80067fa:	64a5      	str	r5, [r4, #72]	; 0x48
 80067fc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80067fe:	0020      	movs	r0, r4
 8006800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006802:	3468      	adds	r4, #104	; 0x68
 8006804:	e7d7      	b.n	80067b6 <__sfp+0x1e>
 8006806:	2104      	movs	r1, #4
 8006808:	0038      	movs	r0, r7
 800680a:	f7ff ff57 	bl	80066bc <__sfmoreglue>
 800680e:	1e04      	subs	r4, r0, #0
 8006810:	6030      	str	r0, [r6, #0]
 8006812:	d1d5      	bne.n	80067c0 <__sfp+0x28>
 8006814:	f7ff ff70 	bl	80066f8 <__sfp_lock_release>
 8006818:	230c      	movs	r3, #12
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	e7ef      	b.n	80067fe <__sfp+0x66>
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	08008cac 	.word	0x08008cac
 8006824:	ffff0001 	.word	0xffff0001

08006828 <_fwalk_reent>:
 8006828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800682a:	0004      	movs	r4, r0
 800682c:	0006      	movs	r6, r0
 800682e:	2700      	movs	r7, #0
 8006830:	9101      	str	r1, [sp, #4]
 8006832:	3448      	adds	r4, #72	; 0x48
 8006834:	6863      	ldr	r3, [r4, #4]
 8006836:	68a5      	ldr	r5, [r4, #8]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	9b00      	ldr	r3, [sp, #0]
 800683c:	3b01      	subs	r3, #1
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	d504      	bpl.n	800684c <_fwalk_reent+0x24>
 8006842:	6824      	ldr	r4, [r4, #0]
 8006844:	2c00      	cmp	r4, #0
 8006846:	d1f5      	bne.n	8006834 <_fwalk_reent+0xc>
 8006848:	0038      	movs	r0, r7
 800684a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800684c:	89ab      	ldrh	r3, [r5, #12]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d908      	bls.n	8006864 <_fwalk_reent+0x3c>
 8006852:	220e      	movs	r2, #14
 8006854:	5eab      	ldrsh	r3, [r5, r2]
 8006856:	3301      	adds	r3, #1
 8006858:	d004      	beq.n	8006864 <_fwalk_reent+0x3c>
 800685a:	0029      	movs	r1, r5
 800685c:	0030      	movs	r0, r6
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	4798      	blx	r3
 8006862:	4307      	orrs	r7, r0
 8006864:	3568      	adds	r5, #104	; 0x68
 8006866:	e7e8      	b.n	800683a <_fwalk_reent+0x12>

08006868 <rshift>:
 8006868:	0002      	movs	r2, r0
 800686a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686c:	6904      	ldr	r4, [r0, #16]
 800686e:	3214      	adds	r2, #20
 8006870:	0013      	movs	r3, r2
 8006872:	b085      	sub	sp, #20
 8006874:	114f      	asrs	r7, r1, #5
 8006876:	42bc      	cmp	r4, r7
 8006878:	dd31      	ble.n	80068de <rshift+0x76>
 800687a:	00bb      	lsls	r3, r7, #2
 800687c:	18d3      	adds	r3, r2, r3
 800687e:	261f      	movs	r6, #31
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	000b      	movs	r3, r1
 8006884:	00a5      	lsls	r5, r4, #2
 8006886:	4033      	ands	r3, r6
 8006888:	1955      	adds	r5, r2, r5
 800688a:	9302      	str	r3, [sp, #8]
 800688c:	4231      	tst	r1, r6
 800688e:	d10c      	bne.n	80068aa <rshift+0x42>
 8006890:	0016      	movs	r6, r2
 8006892:	9901      	ldr	r1, [sp, #4]
 8006894:	428d      	cmp	r5, r1
 8006896:	d838      	bhi.n	800690a <rshift+0xa2>
 8006898:	9901      	ldr	r1, [sp, #4]
 800689a:	2300      	movs	r3, #0
 800689c:	3903      	subs	r1, #3
 800689e:	428d      	cmp	r5, r1
 80068a0:	d301      	bcc.n	80068a6 <rshift+0x3e>
 80068a2:	1be3      	subs	r3, r4, r7
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	18d3      	adds	r3, r2, r3
 80068a8:	e019      	b.n	80068de <rshift+0x76>
 80068aa:	2120      	movs	r1, #32
 80068ac:	9b02      	ldr	r3, [sp, #8]
 80068ae:	9e01      	ldr	r6, [sp, #4]
 80068b0:	1acb      	subs	r3, r1, r3
 80068b2:	9303      	str	r3, [sp, #12]
 80068b4:	ce02      	ldmia	r6!, {r1}
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	4694      	mov	ip, r2
 80068ba:	40d9      	lsrs	r1, r3
 80068bc:	9100      	str	r1, [sp, #0]
 80068be:	42b5      	cmp	r5, r6
 80068c0:	d816      	bhi.n	80068f0 <rshift+0x88>
 80068c2:	9e01      	ldr	r6, [sp, #4]
 80068c4:	2300      	movs	r3, #0
 80068c6:	3601      	adds	r6, #1
 80068c8:	42b5      	cmp	r5, r6
 80068ca:	d302      	bcc.n	80068d2 <rshift+0x6a>
 80068cc:	1be3      	subs	r3, r4, r7
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	3b04      	subs	r3, #4
 80068d2:	9900      	ldr	r1, [sp, #0]
 80068d4:	18d3      	adds	r3, r2, r3
 80068d6:	6019      	str	r1, [r3, #0]
 80068d8:	2900      	cmp	r1, #0
 80068da:	d000      	beq.n	80068de <rshift+0x76>
 80068dc:	3304      	adds	r3, #4
 80068de:	1a99      	subs	r1, r3, r2
 80068e0:	1089      	asrs	r1, r1, #2
 80068e2:	6101      	str	r1, [r0, #16]
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d101      	bne.n	80068ec <rshift+0x84>
 80068e8:	2300      	movs	r3, #0
 80068ea:	6143      	str	r3, [r0, #20]
 80068ec:	b005      	add	sp, #20
 80068ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f0:	6833      	ldr	r3, [r6, #0]
 80068f2:	9903      	ldr	r1, [sp, #12]
 80068f4:	408b      	lsls	r3, r1
 80068f6:	9900      	ldr	r1, [sp, #0]
 80068f8:	4319      	orrs	r1, r3
 80068fa:	4663      	mov	r3, ip
 80068fc:	c302      	stmia	r3!, {r1}
 80068fe:	469c      	mov	ip, r3
 8006900:	ce02      	ldmia	r6!, {r1}
 8006902:	9b02      	ldr	r3, [sp, #8]
 8006904:	40d9      	lsrs	r1, r3
 8006906:	9100      	str	r1, [sp, #0]
 8006908:	e7d9      	b.n	80068be <rshift+0x56>
 800690a:	c908      	ldmia	r1!, {r3}
 800690c:	c608      	stmia	r6!, {r3}
 800690e:	e7c1      	b.n	8006894 <rshift+0x2c>

08006910 <__hexdig_fun>:
 8006910:	0002      	movs	r2, r0
 8006912:	3a30      	subs	r2, #48	; 0x30
 8006914:	0003      	movs	r3, r0
 8006916:	2a09      	cmp	r2, #9
 8006918:	d802      	bhi.n	8006920 <__hexdig_fun+0x10>
 800691a:	3b20      	subs	r3, #32
 800691c:	b2d8      	uxtb	r0, r3
 800691e:	4770      	bx	lr
 8006920:	0002      	movs	r2, r0
 8006922:	3a61      	subs	r2, #97	; 0x61
 8006924:	2a05      	cmp	r2, #5
 8006926:	d801      	bhi.n	800692c <__hexdig_fun+0x1c>
 8006928:	3b47      	subs	r3, #71	; 0x47
 800692a:	e7f7      	b.n	800691c <__hexdig_fun+0xc>
 800692c:	001a      	movs	r2, r3
 800692e:	3a41      	subs	r2, #65	; 0x41
 8006930:	2000      	movs	r0, #0
 8006932:	2a05      	cmp	r2, #5
 8006934:	d8f3      	bhi.n	800691e <__hexdig_fun+0xe>
 8006936:	3b27      	subs	r3, #39	; 0x27
 8006938:	e7f0      	b.n	800691c <__hexdig_fun+0xc>
	...

0800693c <__gethex>:
 800693c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693e:	b08d      	sub	sp, #52	; 0x34
 8006940:	930a      	str	r3, [sp, #40]	; 0x28
 8006942:	4bbf      	ldr	r3, [pc, #764]	; (8006c40 <__gethex+0x304>)
 8006944:	9005      	str	r0, [sp, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	9109      	str	r1, [sp, #36]	; 0x24
 800694a:	0018      	movs	r0, r3
 800694c:	9202      	str	r2, [sp, #8]
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	f7f9 fbda 	bl	8000108 <strlen>
 8006954:	2202      	movs	r2, #2
 8006956:	9b07      	ldr	r3, [sp, #28]
 8006958:	4252      	negs	r2, r2
 800695a:	181b      	adds	r3, r3, r0
 800695c:	3b01      	subs	r3, #1
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	9003      	str	r0, [sp, #12]
 8006962:	930b      	str	r3, [sp, #44]	; 0x2c
 8006964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006966:	6819      	ldr	r1, [r3, #0]
 8006968:	1c8b      	adds	r3, r1, #2
 800696a:	1a52      	subs	r2, r2, r1
 800696c:	18d1      	adds	r1, r2, r3
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	9108      	str	r1, [sp, #32]
 8006972:	9901      	ldr	r1, [sp, #4]
 8006974:	3301      	adds	r3, #1
 8006976:	7808      	ldrb	r0, [r1, #0]
 8006978:	2830      	cmp	r0, #48	; 0x30
 800697a:	d0f7      	beq.n	800696c <__gethex+0x30>
 800697c:	f7ff ffc8 	bl	8006910 <__hexdig_fun>
 8006980:	2300      	movs	r3, #0
 8006982:	001c      	movs	r4, r3
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	4298      	cmp	r0, r3
 8006988:	d11f      	bne.n	80069ca <__gethex+0x8e>
 800698a:	9a03      	ldr	r2, [sp, #12]
 800698c:	9907      	ldr	r1, [sp, #28]
 800698e:	9801      	ldr	r0, [sp, #4]
 8006990:	f001 fd34 	bl	80083fc <strncmp>
 8006994:	0007      	movs	r7, r0
 8006996:	42a0      	cmp	r0, r4
 8006998:	d000      	beq.n	800699c <__gethex+0x60>
 800699a:	e06b      	b.n	8006a74 <__gethex+0x138>
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	9a03      	ldr	r2, [sp, #12]
 80069a0:	5c98      	ldrb	r0, [r3, r2]
 80069a2:	189d      	adds	r5, r3, r2
 80069a4:	f7ff ffb4 	bl	8006910 <__hexdig_fun>
 80069a8:	2301      	movs	r3, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	42a0      	cmp	r0, r4
 80069ae:	d030      	beq.n	8006a12 <__gethex+0xd6>
 80069b0:	9501      	str	r5, [sp, #4]
 80069b2:	9b01      	ldr	r3, [sp, #4]
 80069b4:	7818      	ldrb	r0, [r3, #0]
 80069b6:	2830      	cmp	r0, #48	; 0x30
 80069b8:	d009      	beq.n	80069ce <__gethex+0x92>
 80069ba:	f7ff ffa9 	bl	8006910 <__hexdig_fun>
 80069be:	4242      	negs	r2, r0
 80069c0:	4142      	adcs	r2, r0
 80069c2:	2301      	movs	r3, #1
 80069c4:	002c      	movs	r4, r5
 80069c6:	9204      	str	r2, [sp, #16]
 80069c8:	9308      	str	r3, [sp, #32]
 80069ca:	9d01      	ldr	r5, [sp, #4]
 80069cc:	e004      	b.n	80069d8 <__gethex+0x9c>
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	3301      	adds	r3, #1
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	e7ed      	b.n	80069b2 <__gethex+0x76>
 80069d6:	3501      	adds	r5, #1
 80069d8:	7828      	ldrb	r0, [r5, #0]
 80069da:	f7ff ff99 	bl	8006910 <__hexdig_fun>
 80069de:	1e07      	subs	r7, r0, #0
 80069e0:	d1f9      	bne.n	80069d6 <__gethex+0x9a>
 80069e2:	0028      	movs	r0, r5
 80069e4:	9a03      	ldr	r2, [sp, #12]
 80069e6:	9907      	ldr	r1, [sp, #28]
 80069e8:	f001 fd08 	bl	80083fc <strncmp>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d10e      	bne.n	8006a0e <__gethex+0xd2>
 80069f0:	2c00      	cmp	r4, #0
 80069f2:	d107      	bne.n	8006a04 <__gethex+0xc8>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	18ed      	adds	r5, r5, r3
 80069f8:	002c      	movs	r4, r5
 80069fa:	7828      	ldrb	r0, [r5, #0]
 80069fc:	f7ff ff88 	bl	8006910 <__hexdig_fun>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d102      	bne.n	8006a0a <__gethex+0xce>
 8006a04:	1b64      	subs	r4, r4, r5
 8006a06:	00a7      	lsls	r7, r4, #2
 8006a08:	e003      	b.n	8006a12 <__gethex+0xd6>
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	e7f5      	b.n	80069fa <__gethex+0xbe>
 8006a0e:	2c00      	cmp	r4, #0
 8006a10:	d1f8      	bne.n	8006a04 <__gethex+0xc8>
 8006a12:	2220      	movs	r2, #32
 8006a14:	782b      	ldrb	r3, [r5, #0]
 8006a16:	002e      	movs	r6, r5
 8006a18:	4393      	bics	r3, r2
 8006a1a:	2b50      	cmp	r3, #80	; 0x50
 8006a1c:	d11d      	bne.n	8006a5a <__gethex+0x11e>
 8006a1e:	786b      	ldrb	r3, [r5, #1]
 8006a20:	2b2b      	cmp	r3, #43	; 0x2b
 8006a22:	d02c      	beq.n	8006a7e <__gethex+0x142>
 8006a24:	2b2d      	cmp	r3, #45	; 0x2d
 8006a26:	d02e      	beq.n	8006a86 <__gethex+0x14a>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	1c6e      	adds	r6, r5, #1
 8006a2c:	9306      	str	r3, [sp, #24]
 8006a2e:	7830      	ldrb	r0, [r6, #0]
 8006a30:	f7ff ff6e 	bl	8006910 <__hexdig_fun>
 8006a34:	1e43      	subs	r3, r0, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b18      	cmp	r3, #24
 8006a3a:	d82b      	bhi.n	8006a94 <__gethex+0x158>
 8006a3c:	3810      	subs	r0, #16
 8006a3e:	0004      	movs	r4, r0
 8006a40:	7870      	ldrb	r0, [r6, #1]
 8006a42:	f7ff ff65 	bl	8006910 <__hexdig_fun>
 8006a46:	1e43      	subs	r3, r0, #1
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	2b18      	cmp	r3, #24
 8006a4e:	d91c      	bls.n	8006a8a <__gethex+0x14e>
 8006a50:	9b06      	ldr	r3, [sp, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d000      	beq.n	8006a58 <__gethex+0x11c>
 8006a56:	4264      	negs	r4, r4
 8006a58:	193f      	adds	r7, r7, r4
 8006a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5c:	601e      	str	r6, [r3, #0]
 8006a5e:	9b04      	ldr	r3, [sp, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d019      	beq.n	8006a98 <__gethex+0x15c>
 8006a64:	2600      	movs	r6, #0
 8006a66:	9b08      	ldr	r3, [sp, #32]
 8006a68:	42b3      	cmp	r3, r6
 8006a6a:	d100      	bne.n	8006a6e <__gethex+0x132>
 8006a6c:	3606      	adds	r6, #6
 8006a6e:	0030      	movs	r0, r6
 8006a70:	b00d      	add	sp, #52	; 0x34
 8006a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a74:	2301      	movs	r3, #1
 8006a76:	2700      	movs	r7, #0
 8006a78:	9d01      	ldr	r5, [sp, #4]
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	e7c9      	b.n	8006a12 <__gethex+0xd6>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9306      	str	r3, [sp, #24]
 8006a82:	1cae      	adds	r6, r5, #2
 8006a84:	e7d3      	b.n	8006a2e <__gethex+0xf2>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e7fa      	b.n	8006a80 <__gethex+0x144>
 8006a8a:	230a      	movs	r3, #10
 8006a8c:	435c      	muls	r4, r3
 8006a8e:	1824      	adds	r4, r4, r0
 8006a90:	3c10      	subs	r4, #16
 8006a92:	e7d5      	b.n	8006a40 <__gethex+0x104>
 8006a94:	002e      	movs	r6, r5
 8006a96:	e7e0      	b.n	8006a5a <__gethex+0x11e>
 8006a98:	9b01      	ldr	r3, [sp, #4]
 8006a9a:	9904      	ldr	r1, [sp, #16]
 8006a9c:	1aeb      	subs	r3, r5, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	2b07      	cmp	r3, #7
 8006aa2:	dc0a      	bgt.n	8006aba <__gethex+0x17e>
 8006aa4:	9805      	ldr	r0, [sp, #20]
 8006aa6:	f000 fa71 	bl	8006f8c <_Balloc>
 8006aaa:	1e04      	subs	r4, r0, #0
 8006aac:	d108      	bne.n	8006ac0 <__gethex+0x184>
 8006aae:	0002      	movs	r2, r0
 8006ab0:	21de      	movs	r1, #222	; 0xde
 8006ab2:	4b64      	ldr	r3, [pc, #400]	; (8006c44 <__gethex+0x308>)
 8006ab4:	4864      	ldr	r0, [pc, #400]	; (8006c48 <__gethex+0x30c>)
 8006ab6:	f001 fda3 	bl	8008600 <__assert_func>
 8006aba:	3101      	adds	r1, #1
 8006abc:	105b      	asrs	r3, r3, #1
 8006abe:	e7ef      	b.n	8006aa0 <__gethex+0x164>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ac8:	2300      	movs	r3, #0
 8006aca:	001e      	movs	r6, r3
 8006acc:	9306      	str	r3, [sp, #24]
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	d340      	bcc.n	8006b56 <__gethex+0x21a>
 8006ad4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	c540      	stmia	r5!, {r6}
 8006ada:	1aed      	subs	r5, r5, r3
 8006adc:	10ad      	asrs	r5, r5, #2
 8006ade:	0030      	movs	r0, r6
 8006ae0:	6125      	str	r5, [r4, #16]
 8006ae2:	f000 fb4b 	bl	800717c <__hi0bits>
 8006ae6:	9b02      	ldr	r3, [sp, #8]
 8006ae8:	016d      	lsls	r5, r5, #5
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	1a2e      	subs	r6, r5, r0
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	429e      	cmp	r6, r3
 8006af2:	dd5a      	ble.n	8006baa <__gethex+0x26e>
 8006af4:	1af6      	subs	r6, r6, r3
 8006af6:	0031      	movs	r1, r6
 8006af8:	0020      	movs	r0, r4
 8006afa:	f000 feed 	bl	80078d8 <__any_on>
 8006afe:	1e05      	subs	r5, r0, #0
 8006b00:	d016      	beq.n	8006b30 <__gethex+0x1f4>
 8006b02:	2501      	movs	r5, #1
 8006b04:	211f      	movs	r1, #31
 8006b06:	0028      	movs	r0, r5
 8006b08:	1e73      	subs	r3, r6, #1
 8006b0a:	4019      	ands	r1, r3
 8006b0c:	4088      	lsls	r0, r1
 8006b0e:	0001      	movs	r1, r0
 8006b10:	115a      	asrs	r2, r3, #5
 8006b12:	9804      	ldr	r0, [sp, #16]
 8006b14:	0092      	lsls	r2, r2, #2
 8006b16:	5812      	ldr	r2, [r2, r0]
 8006b18:	420a      	tst	r2, r1
 8006b1a:	d009      	beq.n	8006b30 <__gethex+0x1f4>
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dd06      	ble.n	8006b2e <__gethex+0x1f2>
 8006b20:	0020      	movs	r0, r4
 8006b22:	1eb1      	subs	r1, r6, #2
 8006b24:	f000 fed8 	bl	80078d8 <__any_on>
 8006b28:	3502      	adds	r5, #2
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d100      	bne.n	8006b30 <__gethex+0x1f4>
 8006b2e:	2502      	movs	r5, #2
 8006b30:	0031      	movs	r1, r6
 8006b32:	0020      	movs	r0, r4
 8006b34:	f7ff fe98 	bl	8006868 <rshift>
 8006b38:	19bf      	adds	r7, r7, r6
 8006b3a:	9b02      	ldr	r3, [sp, #8]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	9303      	str	r3, [sp, #12]
 8006b40:	42bb      	cmp	r3, r7
 8006b42:	da42      	bge.n	8006bca <__gethex+0x28e>
 8006b44:	0021      	movs	r1, r4
 8006b46:	9805      	ldr	r0, [sp, #20]
 8006b48:	f000 fa64 	bl	8007014 <_Bfree>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b50:	26a3      	movs	r6, #163	; 0xa3
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	e78b      	b.n	8006a6e <__gethex+0x132>
 8006b56:	1e6b      	subs	r3, r5, #1
 8006b58:	9308      	str	r3, [sp, #32]
 8006b5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d014      	beq.n	8006b8c <__gethex+0x250>
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d104      	bne.n	8006b72 <__gethex+0x236>
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	c340      	stmia	r3!, {r6}
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b70:	9606      	str	r6, [sp, #24]
 8006b72:	9b08      	ldr	r3, [sp, #32]
 8006b74:	7818      	ldrb	r0, [r3, #0]
 8006b76:	f7ff fecb 	bl	8006910 <__hexdig_fun>
 8006b7a:	230f      	movs	r3, #15
 8006b7c:	4018      	ands	r0, r3
 8006b7e:	9b06      	ldr	r3, [sp, #24]
 8006b80:	9d08      	ldr	r5, [sp, #32]
 8006b82:	4098      	lsls	r0, r3
 8006b84:	3304      	adds	r3, #4
 8006b86:	4306      	orrs	r6, r0
 8006b88:	9306      	str	r3, [sp, #24]
 8006b8a:	e7a0      	b.n	8006ace <__gethex+0x192>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	9a03      	ldr	r2, [sp, #12]
 8006b90:	1a9d      	subs	r5, r3, r2
 8006b92:	9b08      	ldr	r3, [sp, #32]
 8006b94:	195d      	adds	r5, r3, r5
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	429d      	cmp	r5, r3
 8006b9a:	d3e2      	bcc.n	8006b62 <__gethex+0x226>
 8006b9c:	0028      	movs	r0, r5
 8006b9e:	9907      	ldr	r1, [sp, #28]
 8006ba0:	f001 fc2c 	bl	80083fc <strncmp>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d1dc      	bne.n	8006b62 <__gethex+0x226>
 8006ba8:	e791      	b.n	8006ace <__gethex+0x192>
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	2500      	movs	r5, #0
 8006bae:	429e      	cmp	r6, r3
 8006bb0:	dac3      	bge.n	8006b3a <__gethex+0x1fe>
 8006bb2:	1b9e      	subs	r6, r3, r6
 8006bb4:	0021      	movs	r1, r4
 8006bb6:	0032      	movs	r2, r6
 8006bb8:	9805      	ldr	r0, [sp, #20]
 8006bba:	f000 fc49 	bl	8007450 <__lshift>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	3314      	adds	r3, #20
 8006bc2:	0004      	movs	r4, r0
 8006bc4:	1bbf      	subs	r7, r7, r6
 8006bc6:	9304      	str	r3, [sp, #16]
 8006bc8:	e7b7      	b.n	8006b3a <__gethex+0x1fe>
 8006bca:	9b02      	ldr	r3, [sp, #8]
 8006bcc:	685e      	ldr	r6, [r3, #4]
 8006bce:	42be      	cmp	r6, r7
 8006bd0:	dd71      	ble.n	8006cb6 <__gethex+0x37a>
 8006bd2:	9b01      	ldr	r3, [sp, #4]
 8006bd4:	1bf6      	subs	r6, r6, r7
 8006bd6:	42b3      	cmp	r3, r6
 8006bd8:	dc38      	bgt.n	8006c4c <__gethex+0x310>
 8006bda:	9b02      	ldr	r3, [sp, #8]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d026      	beq.n	8006c30 <__gethex+0x2f4>
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d028      	beq.n	8006c38 <__gethex+0x2fc>
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d119      	bne.n	8006c1e <__gethex+0x2e2>
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	42b3      	cmp	r3, r6
 8006bee:	d116      	bne.n	8006c1e <__gethex+0x2e2>
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10d      	bne.n	8006c10 <__gethex+0x2d4>
 8006bf4:	9b02      	ldr	r3, [sp, #8]
 8006bf6:	2662      	movs	r6, #98	; 0x62
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	9a01      	ldr	r2, [sp, #4]
 8006bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	2301      	movs	r3, #1
 8006c04:	9a04      	ldr	r2, [sp, #16]
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c0c:	601c      	str	r4, [r3, #0]
 8006c0e:	e72e      	b.n	8006a6e <__gethex+0x132>
 8006c10:	9901      	ldr	r1, [sp, #4]
 8006c12:	0020      	movs	r0, r4
 8006c14:	3901      	subs	r1, #1
 8006c16:	f000 fe5f 	bl	80078d8 <__any_on>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d1ea      	bne.n	8006bf4 <__gethex+0x2b8>
 8006c1e:	0021      	movs	r1, r4
 8006c20:	9805      	ldr	r0, [sp, #20]
 8006c22:	f000 f9f7 	bl	8007014 <_Bfree>
 8006c26:	2300      	movs	r3, #0
 8006c28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c2a:	2650      	movs	r6, #80	; 0x50
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e71e      	b.n	8006a6e <__gethex+0x132>
 8006c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f3      	bne.n	8006c1e <__gethex+0x2e2>
 8006c36:	e7dd      	b.n	8006bf4 <__gethex+0x2b8>
 8006c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1da      	bne.n	8006bf4 <__gethex+0x2b8>
 8006c3e:	e7ee      	b.n	8006c1e <__gethex+0x2e2>
 8006c40:	08008ef4 	.word	0x08008ef4
 8006c44:	08008e7c 	.word	0x08008e7c
 8006c48:	08008e8d 	.word	0x08008e8d
 8006c4c:	1e77      	subs	r7, r6, #1
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	d12f      	bne.n	8006cb2 <__gethex+0x376>
 8006c52:	2f00      	cmp	r7, #0
 8006c54:	d004      	beq.n	8006c60 <__gethex+0x324>
 8006c56:	0039      	movs	r1, r7
 8006c58:	0020      	movs	r0, r4
 8006c5a:	f000 fe3d 	bl	80078d8 <__any_on>
 8006c5e:	0005      	movs	r5, r0
 8006c60:	231f      	movs	r3, #31
 8006c62:	117a      	asrs	r2, r7, #5
 8006c64:	401f      	ands	r7, r3
 8006c66:	3b1e      	subs	r3, #30
 8006c68:	40bb      	lsls	r3, r7
 8006c6a:	9904      	ldr	r1, [sp, #16]
 8006c6c:	0092      	lsls	r2, r2, #2
 8006c6e:	5852      	ldr	r2, [r2, r1]
 8006c70:	421a      	tst	r2, r3
 8006c72:	d001      	beq.n	8006c78 <__gethex+0x33c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	431d      	orrs	r5, r3
 8006c78:	9b01      	ldr	r3, [sp, #4]
 8006c7a:	0031      	movs	r1, r6
 8006c7c:	1b9b      	subs	r3, r3, r6
 8006c7e:	2602      	movs	r6, #2
 8006c80:	0020      	movs	r0, r4
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	f7ff fdf0 	bl	8006868 <rshift>
 8006c88:	9b02      	ldr	r3, [sp, #8]
 8006c8a:	685f      	ldr	r7, [r3, #4]
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	d041      	beq.n	8006d14 <__gethex+0x3d8>
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d010      	beq.n	8006cba <__gethex+0x37e>
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d012      	beq.n	8006cc2 <__gethex+0x386>
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d106      	bne.n	8006cae <__gethex+0x372>
 8006ca0:	07aa      	lsls	r2, r5, #30
 8006ca2:	d504      	bpl.n	8006cae <__gethex+0x372>
 8006ca4:	9a04      	ldr	r2, [sp, #16]
 8006ca6:	6810      	ldr	r0, [r2, #0]
 8006ca8:	4305      	orrs	r5, r0
 8006caa:	421d      	tst	r5, r3
 8006cac:	d10c      	bne.n	8006cc8 <__gethex+0x38c>
 8006cae:	2310      	movs	r3, #16
 8006cb0:	e02f      	b.n	8006d12 <__gethex+0x3d6>
 8006cb2:	2501      	movs	r5, #1
 8006cb4:	e7d4      	b.n	8006c60 <__gethex+0x324>
 8006cb6:	2601      	movs	r6, #1
 8006cb8:	e7e8      	b.n	8006c8c <__gethex+0x350>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cbe:	1a9b      	subs	r3, r3, r2
 8006cc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f2      	beq.n	8006cae <__gethex+0x372>
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	2000      	movs	r0, #0
 8006ccc:	9303      	str	r3, [sp, #12]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	0023      	movs	r3, r4
 8006cd4:	9a04      	ldr	r2, [sp, #16]
 8006cd6:	3314      	adds	r3, #20
 8006cd8:	1899      	adds	r1, r3, r2
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	1c55      	adds	r5, r2, #1
 8006cde:	d01e      	beq.n	8006d1e <__gethex+0x3e2>
 8006ce0:	3201      	adds	r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	0023      	movs	r3, r4
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	2e02      	cmp	r6, #2
 8006cea:	d140      	bne.n	8006d6e <__gethex+0x432>
 8006cec:	9a02      	ldr	r2, [sp, #8]
 8006cee:	9901      	ldr	r1, [sp, #4]
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	3a01      	subs	r2, #1
 8006cf4:	428a      	cmp	r2, r1
 8006cf6:	d10b      	bne.n	8006d10 <__gethex+0x3d4>
 8006cf8:	114a      	asrs	r2, r1, #5
 8006cfa:	211f      	movs	r1, #31
 8006cfc:	9801      	ldr	r0, [sp, #4]
 8006cfe:	0092      	lsls	r2, r2, #2
 8006d00:	4001      	ands	r1, r0
 8006d02:	2001      	movs	r0, #1
 8006d04:	0005      	movs	r5, r0
 8006d06:	408d      	lsls	r5, r1
 8006d08:	58d3      	ldr	r3, [r2, r3]
 8006d0a:	422b      	tst	r3, r5
 8006d0c:	d000      	beq.n	8006d10 <__gethex+0x3d4>
 8006d0e:	2601      	movs	r6, #1
 8006d10:	2320      	movs	r3, #32
 8006d12:	431e      	orrs	r6, r3
 8006d14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d16:	601c      	str	r4, [r3, #0]
 8006d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1a:	601f      	str	r7, [r3, #0]
 8006d1c:	e6a7      	b.n	8006a6e <__gethex+0x132>
 8006d1e:	c301      	stmia	r3!, {r0}
 8006d20:	4299      	cmp	r1, r3
 8006d22:	d8da      	bhi.n	8006cda <__gethex+0x39e>
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	68a2      	ldr	r2, [r4, #8]
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	db17      	blt.n	8006d5c <__gethex+0x420>
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	9805      	ldr	r0, [sp, #20]
 8006d30:	1c59      	adds	r1, r3, #1
 8006d32:	f000 f92b 	bl	8006f8c <_Balloc>
 8006d36:	1e05      	subs	r5, r0, #0
 8006d38:	d103      	bne.n	8006d42 <__gethex+0x406>
 8006d3a:	0002      	movs	r2, r0
 8006d3c:	2184      	movs	r1, #132	; 0x84
 8006d3e:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <__gethex+0x474>)
 8006d40:	e6b8      	b.n	8006ab4 <__gethex+0x178>
 8006d42:	0021      	movs	r1, r4
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	310c      	adds	r1, #12
 8006d48:	1c9a      	adds	r2, r3, #2
 8006d4a:	0092      	lsls	r2, r2, #2
 8006d4c:	300c      	adds	r0, #12
 8006d4e:	f000 f914 	bl	8006f7a <memcpy>
 8006d52:	0021      	movs	r1, r4
 8006d54:	9805      	ldr	r0, [sp, #20]
 8006d56:	f000 f95d 	bl	8007014 <_Bfree>
 8006d5a:	002c      	movs	r4, r5
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	6122      	str	r2, [r4, #16]
 8006d62:	2201      	movs	r2, #1
 8006d64:	3304      	adds	r3, #4
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	18e3      	adds	r3, r4, r3
 8006d6a:	605a      	str	r2, [r3, #4]
 8006d6c:	e7ba      	b.n	8006ce4 <__gethex+0x3a8>
 8006d6e:	6922      	ldr	r2, [r4, #16]
 8006d70:	9903      	ldr	r1, [sp, #12]
 8006d72:	428a      	cmp	r2, r1
 8006d74:	dd09      	ble.n	8006d8a <__gethex+0x44e>
 8006d76:	2101      	movs	r1, #1
 8006d78:	0020      	movs	r0, r4
 8006d7a:	f7ff fd75 	bl	8006868 <rshift>
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	3701      	adds	r7, #1
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	42bb      	cmp	r3, r7
 8006d86:	dac2      	bge.n	8006d0e <__gethex+0x3d2>
 8006d88:	e6dc      	b.n	8006b44 <__gethex+0x208>
 8006d8a:	221f      	movs	r2, #31
 8006d8c:	9d01      	ldr	r5, [sp, #4]
 8006d8e:	9901      	ldr	r1, [sp, #4]
 8006d90:	2601      	movs	r6, #1
 8006d92:	4015      	ands	r5, r2
 8006d94:	4211      	tst	r1, r2
 8006d96:	d0bb      	beq.n	8006d10 <__gethex+0x3d4>
 8006d98:	9a04      	ldr	r2, [sp, #16]
 8006d9a:	189b      	adds	r3, r3, r2
 8006d9c:	3b04      	subs	r3, #4
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	f000 f9ec 	bl	800717c <__hi0bits>
 8006da4:	2320      	movs	r3, #32
 8006da6:	1b5d      	subs	r5, r3, r5
 8006da8:	42a8      	cmp	r0, r5
 8006daa:	dbe4      	blt.n	8006d76 <__gethex+0x43a>
 8006dac:	e7b0      	b.n	8006d10 <__gethex+0x3d4>
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	08008e7c 	.word	0x08008e7c

08006db4 <L_shift>:
 8006db4:	2308      	movs	r3, #8
 8006db6:	b570      	push	{r4, r5, r6, lr}
 8006db8:	2520      	movs	r5, #32
 8006dba:	1a9a      	subs	r2, r3, r2
 8006dbc:	0092      	lsls	r2, r2, #2
 8006dbe:	1aad      	subs	r5, r5, r2
 8006dc0:	6843      	ldr	r3, [r0, #4]
 8006dc2:	6806      	ldr	r6, [r0, #0]
 8006dc4:	001c      	movs	r4, r3
 8006dc6:	40ac      	lsls	r4, r5
 8006dc8:	40d3      	lsrs	r3, r2
 8006dca:	4334      	orrs	r4, r6
 8006dcc:	6004      	str	r4, [r0, #0]
 8006dce:	6043      	str	r3, [r0, #4]
 8006dd0:	3004      	adds	r0, #4
 8006dd2:	4288      	cmp	r0, r1
 8006dd4:	d3f4      	bcc.n	8006dc0 <L_shift+0xc>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}

08006dd8 <__match>:
 8006dd8:	b530      	push	{r4, r5, lr}
 8006dda:	6803      	ldr	r3, [r0, #0]
 8006ddc:	780c      	ldrb	r4, [r1, #0]
 8006dde:	3301      	adds	r3, #1
 8006de0:	2c00      	cmp	r4, #0
 8006de2:	d102      	bne.n	8006dea <__match+0x12>
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	2001      	movs	r0, #1
 8006de8:	bd30      	pop	{r4, r5, pc}
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	0015      	movs	r5, r2
 8006dee:	3d41      	subs	r5, #65	; 0x41
 8006df0:	2d19      	cmp	r5, #25
 8006df2:	d800      	bhi.n	8006df6 <__match+0x1e>
 8006df4:	3220      	adds	r2, #32
 8006df6:	3101      	adds	r1, #1
 8006df8:	42a2      	cmp	r2, r4
 8006dfa:	d0ef      	beq.n	8006ddc <__match+0x4>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	e7f3      	b.n	8006de8 <__match+0x10>

08006e00 <__hexnan>:
 8006e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e02:	680b      	ldr	r3, [r1, #0]
 8006e04:	b08b      	sub	sp, #44	; 0x2c
 8006e06:	9201      	str	r2, [sp, #4]
 8006e08:	9901      	ldr	r1, [sp, #4]
 8006e0a:	115a      	asrs	r2, r3, #5
 8006e0c:	0092      	lsls	r2, r2, #2
 8006e0e:	188a      	adds	r2, r1, r2
 8006e10:	9202      	str	r2, [sp, #8]
 8006e12:	0019      	movs	r1, r3
 8006e14:	221f      	movs	r2, #31
 8006e16:	4011      	ands	r1, r2
 8006e18:	9008      	str	r0, [sp, #32]
 8006e1a:	9106      	str	r1, [sp, #24]
 8006e1c:	4213      	tst	r3, r2
 8006e1e:	d002      	beq.n	8006e26 <__hexnan+0x26>
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	3304      	adds	r3, #4
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	9b02      	ldr	r3, [sp, #8]
 8006e28:	2500      	movs	r5, #0
 8006e2a:	1f1e      	subs	r6, r3, #4
 8006e2c:	0037      	movs	r7, r6
 8006e2e:	0034      	movs	r4, r6
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	6035      	str	r5, [r6, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	9507      	str	r5, [sp, #28]
 8006e38:	9305      	str	r3, [sp, #20]
 8006e3a:	9503      	str	r5, [sp, #12]
 8006e3c:	9b05      	ldr	r3, [sp, #20]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	9309      	str	r3, [sp, #36]	; 0x24
 8006e42:	9b05      	ldr	r3, [sp, #20]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	9304      	str	r3, [sp, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d028      	beq.n	8006e9e <__hexnan+0x9e>
 8006e4c:	9804      	ldr	r0, [sp, #16]
 8006e4e:	f7ff fd5f 	bl	8006910 <__hexdig_fun>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d154      	bne.n	8006f00 <__hexnan+0x100>
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d819      	bhi.n	8006e90 <__hexnan+0x90>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	9a07      	ldr	r2, [sp, #28]
 8006e60:	4293      	cmp	r3, r2
 8006e62:	dd12      	ble.n	8006e8a <__hexnan+0x8a>
 8006e64:	42bc      	cmp	r4, r7
 8006e66:	d206      	bcs.n	8006e76 <__hexnan+0x76>
 8006e68:	2d07      	cmp	r5, #7
 8006e6a:	dc04      	bgt.n	8006e76 <__hexnan+0x76>
 8006e6c:	002a      	movs	r2, r5
 8006e6e:	0039      	movs	r1, r7
 8006e70:	0020      	movs	r0, r4
 8006e72:	f7ff ff9f 	bl	8006db4 <L_shift>
 8006e76:	9b01      	ldr	r3, [sp, #4]
 8006e78:	2508      	movs	r5, #8
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	d905      	bls.n	8006e8a <__hexnan+0x8a>
 8006e7e:	1f27      	subs	r7, r4, #4
 8006e80:	2500      	movs	r5, #0
 8006e82:	003c      	movs	r4, r7
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	603d      	str	r5, [r7, #0]
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	e7d5      	b.n	8006e3c <__hexnan+0x3c>
 8006e90:	9b04      	ldr	r3, [sp, #16]
 8006e92:	2b29      	cmp	r3, #41	; 0x29
 8006e94:	d159      	bne.n	8006f4a <__hexnan+0x14a>
 8006e96:	9b05      	ldr	r3, [sp, #20]
 8006e98:	9a08      	ldr	r2, [sp, #32]
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d052      	beq.n	8006f4a <__hexnan+0x14a>
 8006ea4:	42bc      	cmp	r4, r7
 8006ea6:	d206      	bcs.n	8006eb6 <__hexnan+0xb6>
 8006ea8:	2d07      	cmp	r5, #7
 8006eaa:	dc04      	bgt.n	8006eb6 <__hexnan+0xb6>
 8006eac:	002a      	movs	r2, r5
 8006eae:	0039      	movs	r1, r7
 8006eb0:	0020      	movs	r0, r4
 8006eb2:	f7ff ff7f 	bl	8006db4 <L_shift>
 8006eb6:	9b01      	ldr	r3, [sp, #4]
 8006eb8:	429c      	cmp	r4, r3
 8006eba:	d935      	bls.n	8006f28 <__hexnan+0x128>
 8006ebc:	001a      	movs	r2, r3
 8006ebe:	0023      	movs	r3, r4
 8006ec0:	cb02      	ldmia	r3!, {r1}
 8006ec2:	c202      	stmia	r2!, {r1}
 8006ec4:	429e      	cmp	r6, r3
 8006ec6:	d2fb      	bcs.n	8006ec0 <__hexnan+0xc0>
 8006ec8:	9b02      	ldr	r3, [sp, #8]
 8006eca:	1c61      	adds	r1, r4, #1
 8006ecc:	1eda      	subs	r2, r3, #3
 8006ece:	2304      	movs	r3, #4
 8006ed0:	4291      	cmp	r1, r2
 8006ed2:	d805      	bhi.n	8006ee0 <__hexnan+0xe0>
 8006ed4:	9b02      	ldr	r3, [sp, #8]
 8006ed6:	3b04      	subs	r3, #4
 8006ed8:	1b1b      	subs	r3, r3, r4
 8006eda:	089b      	lsrs	r3, r3, #2
 8006edc:	3301      	adds	r3, #1
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	9a01      	ldr	r2, [sp, #4]
 8006ee2:	18d3      	adds	r3, r2, r3
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	c304      	stmia	r3!, {r2}
 8006ee8:	429e      	cmp	r6, r3
 8006eea:	d2fc      	bcs.n	8006ee6 <__hexnan+0xe6>
 8006eec:	6833      	ldr	r3, [r6, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <__hexnan+0xfc>
 8006ef2:	9b01      	ldr	r3, [sp, #4]
 8006ef4:	429e      	cmp	r6, r3
 8006ef6:	d126      	bne.n	8006f46 <__hexnan+0x146>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	2005      	movs	r0, #5
 8006efe:	e025      	b.n	8006f4c <__hexnan+0x14c>
 8006f00:	9b03      	ldr	r3, [sp, #12]
 8006f02:	3501      	adds	r5, #1
 8006f04:	3301      	adds	r3, #1
 8006f06:	9303      	str	r3, [sp, #12]
 8006f08:	2d08      	cmp	r5, #8
 8006f0a:	dd06      	ble.n	8006f1a <__hexnan+0x11a>
 8006f0c:	9b01      	ldr	r3, [sp, #4]
 8006f0e:	429c      	cmp	r4, r3
 8006f10:	d9bb      	bls.n	8006e8a <__hexnan+0x8a>
 8006f12:	2300      	movs	r3, #0
 8006f14:	2501      	movs	r5, #1
 8006f16:	3c04      	subs	r4, #4
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	220f      	movs	r2, #15
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	4010      	ands	r0, r2
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	4318      	orrs	r0, r3
 8006f24:	6020      	str	r0, [r4, #0]
 8006f26:	e7b0      	b.n	8006e8a <__hexnan+0x8a>
 8006f28:	9b06      	ldr	r3, [sp, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0de      	beq.n	8006eec <__hexnan+0xec>
 8006f2e:	2120      	movs	r1, #32
 8006f30:	9a06      	ldr	r2, [sp, #24]
 8006f32:	9b02      	ldr	r3, [sp, #8]
 8006f34:	1a89      	subs	r1, r1, r2
 8006f36:	2201      	movs	r2, #1
 8006f38:	4252      	negs	r2, r2
 8006f3a:	40ca      	lsrs	r2, r1
 8006f3c:	3b04      	subs	r3, #4
 8006f3e:	6819      	ldr	r1, [r3, #0]
 8006f40:	400a      	ands	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e7d2      	b.n	8006eec <__hexnan+0xec>
 8006f46:	3e04      	subs	r6, #4
 8006f48:	e7d0      	b.n	8006eec <__hexnan+0xec>
 8006f4a:	2004      	movs	r0, #4
 8006f4c:	b00b      	add	sp, #44	; 0x2c
 8006f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f50 <__retarget_lock_init_recursive>:
 8006f50:	4770      	bx	lr

08006f52 <__retarget_lock_acquire_recursive>:
 8006f52:	4770      	bx	lr

08006f54 <__retarget_lock_release_recursive>:
 8006f54:	4770      	bx	lr

08006f56 <__ascii_mbtowc>:
 8006f56:	b082      	sub	sp, #8
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	d100      	bne.n	8006f5e <__ascii_mbtowc+0x8>
 8006f5c:	a901      	add	r1, sp, #4
 8006f5e:	1e10      	subs	r0, r2, #0
 8006f60:	d006      	beq.n	8006f70 <__ascii_mbtowc+0x1a>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d006      	beq.n	8006f74 <__ascii_mbtowc+0x1e>
 8006f66:	7813      	ldrb	r3, [r2, #0]
 8006f68:	600b      	str	r3, [r1, #0]
 8006f6a:	7810      	ldrb	r0, [r2, #0]
 8006f6c:	1e43      	subs	r3, r0, #1
 8006f6e:	4198      	sbcs	r0, r3
 8006f70:	b002      	add	sp, #8
 8006f72:	4770      	bx	lr
 8006f74:	2002      	movs	r0, #2
 8006f76:	4240      	negs	r0, r0
 8006f78:	e7fa      	b.n	8006f70 <__ascii_mbtowc+0x1a>

08006f7a <memcpy>:
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d100      	bne.n	8006f84 <memcpy+0xa>
 8006f82:	bd10      	pop	{r4, pc}
 8006f84:	5ccc      	ldrb	r4, [r1, r3]
 8006f86:	54c4      	strb	r4, [r0, r3]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	e7f8      	b.n	8006f7e <memcpy+0x4>

08006f8c <_Balloc>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f90:	0006      	movs	r6, r0
 8006f92:	000c      	movs	r4, r1
 8006f94:	2d00      	cmp	r5, #0
 8006f96:	d10e      	bne.n	8006fb6 <_Balloc+0x2a>
 8006f98:	2010      	movs	r0, #16
 8006f9a:	f001 fcbd 	bl	8008918 <malloc>
 8006f9e:	1e02      	subs	r2, r0, #0
 8006fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8006fa2:	d104      	bne.n	8006fae <_Balloc+0x22>
 8006fa4:	2166      	movs	r1, #102	; 0x66
 8006fa6:	4b19      	ldr	r3, [pc, #100]	; (800700c <_Balloc+0x80>)
 8006fa8:	4819      	ldr	r0, [pc, #100]	; (8007010 <_Balloc+0x84>)
 8006faa:	f001 fb29 	bl	8008600 <__assert_func>
 8006fae:	6045      	str	r5, [r0, #4]
 8006fb0:	6085      	str	r5, [r0, #8]
 8006fb2:	6005      	str	r5, [r0, #0]
 8006fb4:	60c5      	str	r5, [r0, #12]
 8006fb6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006fb8:	68eb      	ldr	r3, [r5, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d013      	beq.n	8006fe6 <_Balloc+0x5a>
 8006fbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006fc0:	00a2      	lsls	r2, r4, #2
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	189b      	adds	r3, r3, r2
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d118      	bne.n	8006ffe <_Balloc+0x72>
 8006fcc:	2101      	movs	r1, #1
 8006fce:	000d      	movs	r5, r1
 8006fd0:	40a5      	lsls	r5, r4
 8006fd2:	1d6a      	adds	r2, r5, #5
 8006fd4:	0030      	movs	r0, r6
 8006fd6:	0092      	lsls	r2, r2, #2
 8006fd8:	f000 fca1 	bl	800791e <_calloc_r>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d00c      	beq.n	8006ffa <_Balloc+0x6e>
 8006fe0:	6044      	str	r4, [r0, #4]
 8006fe2:	6085      	str	r5, [r0, #8]
 8006fe4:	e00d      	b.n	8007002 <_Balloc+0x76>
 8006fe6:	2221      	movs	r2, #33	; 0x21
 8006fe8:	2104      	movs	r1, #4
 8006fea:	0030      	movs	r0, r6
 8006fec:	f000 fc97 	bl	800791e <_calloc_r>
 8006ff0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ff2:	60e8      	str	r0, [r5, #12]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e1      	bne.n	8006fbe <_Balloc+0x32>
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	6802      	ldr	r2, [r0, #0]
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	6103      	str	r3, [r0, #16]
 8007006:	60c3      	str	r3, [r0, #12]
 8007008:	e7f8      	b.n	8006ffc <_Balloc+0x70>
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	08008f08 	.word	0x08008f08
 8007010:	08008f1f 	.word	0x08008f1f

08007014 <_Bfree>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007018:	0005      	movs	r5, r0
 800701a:	000c      	movs	r4, r1
 800701c:	2e00      	cmp	r6, #0
 800701e:	d10e      	bne.n	800703e <_Bfree+0x2a>
 8007020:	2010      	movs	r0, #16
 8007022:	f001 fc79 	bl	8008918 <malloc>
 8007026:	1e02      	subs	r2, r0, #0
 8007028:	6268      	str	r0, [r5, #36]	; 0x24
 800702a:	d104      	bne.n	8007036 <_Bfree+0x22>
 800702c:	218a      	movs	r1, #138	; 0x8a
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <_Bfree+0x40>)
 8007030:	4809      	ldr	r0, [pc, #36]	; (8007058 <_Bfree+0x44>)
 8007032:	f001 fae5 	bl	8008600 <__assert_func>
 8007036:	6046      	str	r6, [r0, #4]
 8007038:	6086      	str	r6, [r0, #8]
 800703a:	6006      	str	r6, [r0, #0]
 800703c:	60c6      	str	r6, [r0, #12]
 800703e:	2c00      	cmp	r4, #0
 8007040:	d007      	beq.n	8007052 <_Bfree+0x3e>
 8007042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007044:	6862      	ldr	r2, [r4, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	0092      	lsls	r2, r2, #2
 800704a:	189b      	adds	r3, r3, r2
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	6022      	str	r2, [r4, #0]
 8007050:	601c      	str	r4, [r3, #0]
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	08008f08 	.word	0x08008f08
 8007058:	08008f1f 	.word	0x08008f1f

0800705c <__multadd>:
 800705c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705e:	000e      	movs	r6, r1
 8007060:	9001      	str	r0, [sp, #4]
 8007062:	000c      	movs	r4, r1
 8007064:	001d      	movs	r5, r3
 8007066:	2000      	movs	r0, #0
 8007068:	690f      	ldr	r7, [r1, #16]
 800706a:	3614      	adds	r6, #20
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	3001      	adds	r0, #1
 8007070:	b299      	uxth	r1, r3
 8007072:	4351      	muls	r1, r2
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	4353      	muls	r3, r2
 8007078:	1949      	adds	r1, r1, r5
 800707a:	0c0d      	lsrs	r5, r1, #16
 800707c:	195b      	adds	r3, r3, r5
 800707e:	0c1d      	lsrs	r5, r3, #16
 8007080:	b289      	uxth	r1, r1
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	185b      	adds	r3, r3, r1
 8007086:	c608      	stmia	r6!, {r3}
 8007088:	4287      	cmp	r7, r0
 800708a:	dcef      	bgt.n	800706c <__multadd+0x10>
 800708c:	2d00      	cmp	r5, #0
 800708e:	d022      	beq.n	80070d6 <__multadd+0x7a>
 8007090:	68a3      	ldr	r3, [r4, #8]
 8007092:	42bb      	cmp	r3, r7
 8007094:	dc19      	bgt.n	80070ca <__multadd+0x6e>
 8007096:	6863      	ldr	r3, [r4, #4]
 8007098:	9801      	ldr	r0, [sp, #4]
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	f7ff ff76 	bl	8006f8c <_Balloc>
 80070a0:	1e06      	subs	r6, r0, #0
 80070a2:	d105      	bne.n	80070b0 <__multadd+0x54>
 80070a4:	0002      	movs	r2, r0
 80070a6:	21b5      	movs	r1, #181	; 0xb5
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <__multadd+0x80>)
 80070aa:	480d      	ldr	r0, [pc, #52]	; (80070e0 <__multadd+0x84>)
 80070ac:	f001 faa8 	bl	8008600 <__assert_func>
 80070b0:	0021      	movs	r1, r4
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	310c      	adds	r1, #12
 80070b6:	1c9a      	adds	r2, r3, #2
 80070b8:	0092      	lsls	r2, r2, #2
 80070ba:	300c      	adds	r0, #12
 80070bc:	f7ff ff5d 	bl	8006f7a <memcpy>
 80070c0:	0021      	movs	r1, r4
 80070c2:	9801      	ldr	r0, [sp, #4]
 80070c4:	f7ff ffa6 	bl	8007014 <_Bfree>
 80070c8:	0034      	movs	r4, r6
 80070ca:	1d3b      	adds	r3, r7, #4
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	18e3      	adds	r3, r4, r3
 80070d0:	605d      	str	r5, [r3, #4]
 80070d2:	1c7b      	adds	r3, r7, #1
 80070d4:	6123      	str	r3, [r4, #16]
 80070d6:	0020      	movs	r0, r4
 80070d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	08008e7c 	.word	0x08008e7c
 80070e0:	08008f1f 	.word	0x08008f1f

080070e4 <__s2b>:
 80070e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070e6:	0006      	movs	r6, r0
 80070e8:	0018      	movs	r0, r3
 80070ea:	000c      	movs	r4, r1
 80070ec:	3008      	adds	r0, #8
 80070ee:	2109      	movs	r1, #9
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	0015      	movs	r5, r2
 80070f4:	f7f9 f8ae 	bl	8000254 <__divsi3>
 80070f8:	2301      	movs	r3, #1
 80070fa:	2100      	movs	r1, #0
 80070fc:	4283      	cmp	r3, r0
 80070fe:	db0a      	blt.n	8007116 <__s2b+0x32>
 8007100:	0030      	movs	r0, r6
 8007102:	f7ff ff43 	bl	8006f8c <_Balloc>
 8007106:	1e01      	subs	r1, r0, #0
 8007108:	d108      	bne.n	800711c <__s2b+0x38>
 800710a:	0002      	movs	r2, r0
 800710c:	4b19      	ldr	r3, [pc, #100]	; (8007174 <__s2b+0x90>)
 800710e:	481a      	ldr	r0, [pc, #104]	; (8007178 <__s2b+0x94>)
 8007110:	31ce      	adds	r1, #206	; 0xce
 8007112:	f001 fa75 	bl	8008600 <__assert_func>
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	3101      	adds	r1, #1
 800711a:	e7ef      	b.n	80070fc <__s2b+0x18>
 800711c:	9b08      	ldr	r3, [sp, #32]
 800711e:	6143      	str	r3, [r0, #20]
 8007120:	2301      	movs	r3, #1
 8007122:	6103      	str	r3, [r0, #16]
 8007124:	2d09      	cmp	r5, #9
 8007126:	dd18      	ble.n	800715a <__s2b+0x76>
 8007128:	0023      	movs	r3, r4
 800712a:	3309      	adds	r3, #9
 800712c:	001f      	movs	r7, r3
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	1964      	adds	r4, r4, r5
 8007132:	783b      	ldrb	r3, [r7, #0]
 8007134:	220a      	movs	r2, #10
 8007136:	0030      	movs	r0, r6
 8007138:	3b30      	subs	r3, #48	; 0x30
 800713a:	f7ff ff8f 	bl	800705c <__multadd>
 800713e:	3701      	adds	r7, #1
 8007140:	0001      	movs	r1, r0
 8007142:	42a7      	cmp	r7, r4
 8007144:	d1f5      	bne.n	8007132 <__s2b+0x4e>
 8007146:	002c      	movs	r4, r5
 8007148:	9b00      	ldr	r3, [sp, #0]
 800714a:	3c08      	subs	r4, #8
 800714c:	191c      	adds	r4, r3, r4
 800714e:	002f      	movs	r7, r5
 8007150:	9b01      	ldr	r3, [sp, #4]
 8007152:	429f      	cmp	r7, r3
 8007154:	db04      	blt.n	8007160 <__s2b+0x7c>
 8007156:	0008      	movs	r0, r1
 8007158:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800715a:	2509      	movs	r5, #9
 800715c:	340a      	adds	r4, #10
 800715e:	e7f6      	b.n	800714e <__s2b+0x6a>
 8007160:	1b63      	subs	r3, r4, r5
 8007162:	5ddb      	ldrb	r3, [r3, r7]
 8007164:	220a      	movs	r2, #10
 8007166:	0030      	movs	r0, r6
 8007168:	3b30      	subs	r3, #48	; 0x30
 800716a:	f7ff ff77 	bl	800705c <__multadd>
 800716e:	3701      	adds	r7, #1
 8007170:	0001      	movs	r1, r0
 8007172:	e7ed      	b.n	8007150 <__s2b+0x6c>
 8007174:	08008e7c 	.word	0x08008e7c
 8007178:	08008f1f 	.word	0x08008f1f

0800717c <__hi0bits>:
 800717c:	0003      	movs	r3, r0
 800717e:	0c02      	lsrs	r2, r0, #16
 8007180:	2000      	movs	r0, #0
 8007182:	4282      	cmp	r2, r0
 8007184:	d101      	bne.n	800718a <__hi0bits+0xe>
 8007186:	041b      	lsls	r3, r3, #16
 8007188:	3010      	adds	r0, #16
 800718a:	0e1a      	lsrs	r2, r3, #24
 800718c:	d101      	bne.n	8007192 <__hi0bits+0x16>
 800718e:	3008      	adds	r0, #8
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	0f1a      	lsrs	r2, r3, #28
 8007194:	d101      	bne.n	800719a <__hi0bits+0x1e>
 8007196:	3004      	adds	r0, #4
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	0f9a      	lsrs	r2, r3, #30
 800719c:	d101      	bne.n	80071a2 <__hi0bits+0x26>
 800719e:	3002      	adds	r0, #2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	db03      	blt.n	80071ae <__hi0bits+0x32>
 80071a6:	3001      	adds	r0, #1
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	d400      	bmi.n	80071ae <__hi0bits+0x32>
 80071ac:	2020      	movs	r0, #32
 80071ae:	4770      	bx	lr

080071b0 <__lo0bits>:
 80071b0:	6803      	ldr	r3, [r0, #0]
 80071b2:	0002      	movs	r2, r0
 80071b4:	2107      	movs	r1, #7
 80071b6:	0018      	movs	r0, r3
 80071b8:	4008      	ands	r0, r1
 80071ba:	420b      	tst	r3, r1
 80071bc:	d00d      	beq.n	80071da <__lo0bits+0x2a>
 80071be:	3906      	subs	r1, #6
 80071c0:	2000      	movs	r0, #0
 80071c2:	420b      	tst	r3, r1
 80071c4:	d105      	bne.n	80071d2 <__lo0bits+0x22>
 80071c6:	3002      	adds	r0, #2
 80071c8:	4203      	tst	r3, r0
 80071ca:	d003      	beq.n	80071d4 <__lo0bits+0x24>
 80071cc:	40cb      	lsrs	r3, r1
 80071ce:	0008      	movs	r0, r1
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	4770      	bx	lr
 80071d4:	089b      	lsrs	r3, r3, #2
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e7fb      	b.n	80071d2 <__lo0bits+0x22>
 80071da:	b299      	uxth	r1, r3
 80071dc:	2900      	cmp	r1, #0
 80071de:	d101      	bne.n	80071e4 <__lo0bits+0x34>
 80071e0:	2010      	movs	r0, #16
 80071e2:	0c1b      	lsrs	r3, r3, #16
 80071e4:	b2d9      	uxtb	r1, r3
 80071e6:	2900      	cmp	r1, #0
 80071e8:	d101      	bne.n	80071ee <__lo0bits+0x3e>
 80071ea:	3008      	adds	r0, #8
 80071ec:	0a1b      	lsrs	r3, r3, #8
 80071ee:	0719      	lsls	r1, r3, #28
 80071f0:	d101      	bne.n	80071f6 <__lo0bits+0x46>
 80071f2:	3004      	adds	r0, #4
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	0799      	lsls	r1, r3, #30
 80071f8:	d101      	bne.n	80071fe <__lo0bits+0x4e>
 80071fa:	3002      	adds	r0, #2
 80071fc:	089b      	lsrs	r3, r3, #2
 80071fe:	07d9      	lsls	r1, r3, #31
 8007200:	d4e9      	bmi.n	80071d6 <__lo0bits+0x26>
 8007202:	3001      	adds	r0, #1
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	d1e6      	bne.n	80071d6 <__lo0bits+0x26>
 8007208:	2020      	movs	r0, #32
 800720a:	e7e2      	b.n	80071d2 <__lo0bits+0x22>

0800720c <__i2b>:
 800720c:	b510      	push	{r4, lr}
 800720e:	000c      	movs	r4, r1
 8007210:	2101      	movs	r1, #1
 8007212:	f7ff febb 	bl	8006f8c <_Balloc>
 8007216:	2800      	cmp	r0, #0
 8007218:	d106      	bne.n	8007228 <__i2b+0x1c>
 800721a:	21a0      	movs	r1, #160	; 0xa0
 800721c:	0002      	movs	r2, r0
 800721e:	4b04      	ldr	r3, [pc, #16]	; (8007230 <__i2b+0x24>)
 8007220:	4804      	ldr	r0, [pc, #16]	; (8007234 <__i2b+0x28>)
 8007222:	0049      	lsls	r1, r1, #1
 8007224:	f001 f9ec 	bl	8008600 <__assert_func>
 8007228:	2301      	movs	r3, #1
 800722a:	6144      	str	r4, [r0, #20]
 800722c:	6103      	str	r3, [r0, #16]
 800722e:	bd10      	pop	{r4, pc}
 8007230:	08008e7c 	.word	0x08008e7c
 8007234:	08008f1f 	.word	0x08008f1f

08007238 <__multiply>:
 8007238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	0014      	movs	r4, r2
 800723e:	6912      	ldr	r2, [r2, #16]
 8007240:	000d      	movs	r5, r1
 8007242:	b089      	sub	sp, #36	; 0x24
 8007244:	4293      	cmp	r3, r2
 8007246:	da01      	bge.n	800724c <__multiply+0x14>
 8007248:	0025      	movs	r5, r4
 800724a:	000c      	movs	r4, r1
 800724c:	692f      	ldr	r7, [r5, #16]
 800724e:	6926      	ldr	r6, [r4, #16]
 8007250:	6869      	ldr	r1, [r5, #4]
 8007252:	19bb      	adds	r3, r7, r6
 8007254:	9302      	str	r3, [sp, #8]
 8007256:	68ab      	ldr	r3, [r5, #8]
 8007258:	19ba      	adds	r2, r7, r6
 800725a:	4293      	cmp	r3, r2
 800725c:	da00      	bge.n	8007260 <__multiply+0x28>
 800725e:	3101      	adds	r1, #1
 8007260:	f7ff fe94 	bl	8006f8c <_Balloc>
 8007264:	9001      	str	r0, [sp, #4]
 8007266:	2800      	cmp	r0, #0
 8007268:	d106      	bne.n	8007278 <__multiply+0x40>
 800726a:	215e      	movs	r1, #94	; 0x5e
 800726c:	0002      	movs	r2, r0
 800726e:	4b48      	ldr	r3, [pc, #288]	; (8007390 <__multiply+0x158>)
 8007270:	4848      	ldr	r0, [pc, #288]	; (8007394 <__multiply+0x15c>)
 8007272:	31ff      	adds	r1, #255	; 0xff
 8007274:	f001 f9c4 	bl	8008600 <__assert_func>
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	3314      	adds	r3, #20
 800727e:	469c      	mov	ip, r3
 8007280:	19bb      	adds	r3, r7, r6
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4463      	add	r3, ip
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	4663      	mov	r3, ip
 800728a:	9903      	ldr	r1, [sp, #12]
 800728c:	428b      	cmp	r3, r1
 800728e:	d32c      	bcc.n	80072ea <__multiply+0xb2>
 8007290:	002b      	movs	r3, r5
 8007292:	0022      	movs	r2, r4
 8007294:	3314      	adds	r3, #20
 8007296:	00bf      	lsls	r7, r7, #2
 8007298:	3214      	adds	r2, #20
 800729a:	9306      	str	r3, [sp, #24]
 800729c:	00b6      	lsls	r6, r6, #2
 800729e:	19db      	adds	r3, r3, r7
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	1993      	adds	r3, r2, r6
 80072a4:	9307      	str	r3, [sp, #28]
 80072a6:	2304      	movs	r3, #4
 80072a8:	9305      	str	r3, [sp, #20]
 80072aa:	002b      	movs	r3, r5
 80072ac:	9904      	ldr	r1, [sp, #16]
 80072ae:	3315      	adds	r3, #21
 80072b0:	9200      	str	r2, [sp, #0]
 80072b2:	4299      	cmp	r1, r3
 80072b4:	d305      	bcc.n	80072c2 <__multiply+0x8a>
 80072b6:	1b4b      	subs	r3, r1, r5
 80072b8:	3b15      	subs	r3, #21
 80072ba:	089b      	lsrs	r3, r3, #2
 80072bc:	3301      	adds	r3, #1
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	9305      	str	r3, [sp, #20]
 80072c2:	9b07      	ldr	r3, [sp, #28]
 80072c4:	9a00      	ldr	r2, [sp, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d311      	bcc.n	80072ee <__multiply+0xb6>
 80072ca:	9b02      	ldr	r3, [sp, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd06      	ble.n	80072de <__multiply+0xa6>
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	3b04      	subs	r3, #4
 80072d4:	9303      	str	r3, [sp, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d053      	beq.n	8007386 <__multiply+0x14e>
 80072de:	9b01      	ldr	r3, [sp, #4]
 80072e0:	9a02      	ldr	r2, [sp, #8]
 80072e2:	0018      	movs	r0, r3
 80072e4:	611a      	str	r2, [r3, #16]
 80072e6:	b009      	add	sp, #36	; 0x24
 80072e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ea:	c304      	stmia	r3!, {r2}
 80072ec:	e7cd      	b.n	800728a <__multiply+0x52>
 80072ee:	9b00      	ldr	r3, [sp, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	b298      	uxth	r0, r3
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d01b      	beq.n	8007330 <__multiply+0xf8>
 80072f8:	4667      	mov	r7, ip
 80072fa:	2400      	movs	r4, #0
 80072fc:	9e06      	ldr	r6, [sp, #24]
 80072fe:	ce02      	ldmia	r6!, {r1}
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	b28b      	uxth	r3, r1
 8007304:	4343      	muls	r3, r0
 8007306:	b292      	uxth	r2, r2
 8007308:	189b      	adds	r3, r3, r2
 800730a:	191b      	adds	r3, r3, r4
 800730c:	0c0c      	lsrs	r4, r1, #16
 800730e:	4344      	muls	r4, r0
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	0c11      	lsrs	r1, r2, #16
 8007314:	1861      	adds	r1, r4, r1
 8007316:	0c1c      	lsrs	r4, r3, #16
 8007318:	1909      	adds	r1, r1, r4
 800731a:	0c0c      	lsrs	r4, r1, #16
 800731c:	b29b      	uxth	r3, r3
 800731e:	0409      	lsls	r1, r1, #16
 8007320:	430b      	orrs	r3, r1
 8007322:	c708      	stmia	r7!, {r3}
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	42b3      	cmp	r3, r6
 8007328:	d8e9      	bhi.n	80072fe <__multiply+0xc6>
 800732a:	4663      	mov	r3, ip
 800732c:	9a05      	ldr	r2, [sp, #20]
 800732e:	509c      	str	r4, [r3, r2]
 8007330:	9b00      	ldr	r3, [sp, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	0c1e      	lsrs	r6, r3, #16
 8007336:	d020      	beq.n	800737a <__multiply+0x142>
 8007338:	4663      	mov	r3, ip
 800733a:	002c      	movs	r4, r5
 800733c:	4660      	mov	r0, ip
 800733e:	2700      	movs	r7, #0
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3414      	adds	r4, #20
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	b291      	uxth	r1, r2
 800734a:	4371      	muls	r1, r6
 800734c:	6802      	ldr	r2, [r0, #0]
 800734e:	0c12      	lsrs	r2, r2, #16
 8007350:	1889      	adds	r1, r1, r2
 8007352:	19cf      	adds	r7, r1, r7
 8007354:	0439      	lsls	r1, r7, #16
 8007356:	430b      	orrs	r3, r1
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	cc02      	ldmia	r4!, {r1}
 800735c:	6843      	ldr	r3, [r0, #4]
 800735e:	0c09      	lsrs	r1, r1, #16
 8007360:	4371      	muls	r1, r6
 8007362:	b29b      	uxth	r3, r3
 8007364:	0c3f      	lsrs	r7, r7, #16
 8007366:	18cb      	adds	r3, r1, r3
 8007368:	9a04      	ldr	r2, [sp, #16]
 800736a:	19db      	adds	r3, r3, r7
 800736c:	0c1f      	lsrs	r7, r3, #16
 800736e:	3004      	adds	r0, #4
 8007370:	42a2      	cmp	r2, r4
 8007372:	d8e7      	bhi.n	8007344 <__multiply+0x10c>
 8007374:	4662      	mov	r2, ip
 8007376:	9905      	ldr	r1, [sp, #20]
 8007378:	5053      	str	r3, [r2, r1]
 800737a:	9b00      	ldr	r3, [sp, #0]
 800737c:	3304      	adds	r3, #4
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	2304      	movs	r3, #4
 8007382:	449c      	add	ip, r3
 8007384:	e79d      	b.n	80072c2 <__multiply+0x8a>
 8007386:	9b02      	ldr	r3, [sp, #8]
 8007388:	3b01      	subs	r3, #1
 800738a:	9302      	str	r3, [sp, #8]
 800738c:	e79d      	b.n	80072ca <__multiply+0x92>
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	08008e7c 	.word	0x08008e7c
 8007394:	08008f1f 	.word	0x08008f1f

08007398 <__pow5mult>:
 8007398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800739a:	2303      	movs	r3, #3
 800739c:	0015      	movs	r5, r2
 800739e:	0007      	movs	r7, r0
 80073a0:	000e      	movs	r6, r1
 80073a2:	401a      	ands	r2, r3
 80073a4:	421d      	tst	r5, r3
 80073a6:	d008      	beq.n	80073ba <__pow5mult+0x22>
 80073a8:	4925      	ldr	r1, [pc, #148]	; (8007440 <__pow5mult+0xa8>)
 80073aa:	3a01      	subs	r2, #1
 80073ac:	0092      	lsls	r2, r2, #2
 80073ae:	5852      	ldr	r2, [r2, r1]
 80073b0:	2300      	movs	r3, #0
 80073b2:	0031      	movs	r1, r6
 80073b4:	f7ff fe52 	bl	800705c <__multadd>
 80073b8:	0006      	movs	r6, r0
 80073ba:	10ad      	asrs	r5, r5, #2
 80073bc:	d03d      	beq.n	800743a <__pow5mult+0xa2>
 80073be:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80073c0:	2c00      	cmp	r4, #0
 80073c2:	d10f      	bne.n	80073e4 <__pow5mult+0x4c>
 80073c4:	2010      	movs	r0, #16
 80073c6:	f001 faa7 	bl	8008918 <malloc>
 80073ca:	1e02      	subs	r2, r0, #0
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24
 80073ce:	d105      	bne.n	80073dc <__pow5mult+0x44>
 80073d0:	21d7      	movs	r1, #215	; 0xd7
 80073d2:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <__pow5mult+0xac>)
 80073d4:	481c      	ldr	r0, [pc, #112]	; (8007448 <__pow5mult+0xb0>)
 80073d6:	0049      	lsls	r1, r1, #1
 80073d8:	f001 f912 	bl	8008600 <__assert_func>
 80073dc:	6044      	str	r4, [r0, #4]
 80073de:	6084      	str	r4, [r0, #8]
 80073e0:	6004      	str	r4, [r0, #0]
 80073e2:	60c4      	str	r4, [r0, #12]
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	689c      	ldr	r4, [r3, #8]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	2c00      	cmp	r4, #0
 80073ec:	d108      	bne.n	8007400 <__pow5mult+0x68>
 80073ee:	0038      	movs	r0, r7
 80073f0:	4916      	ldr	r1, [pc, #88]	; (800744c <__pow5mult+0xb4>)
 80073f2:	f7ff ff0b 	bl	800720c <__i2b>
 80073f6:	9b01      	ldr	r3, [sp, #4]
 80073f8:	0004      	movs	r4, r0
 80073fa:	6098      	str	r0, [r3, #8]
 80073fc:	2300      	movs	r3, #0
 80073fe:	6003      	str	r3, [r0, #0]
 8007400:	2301      	movs	r3, #1
 8007402:	421d      	tst	r5, r3
 8007404:	d00a      	beq.n	800741c <__pow5mult+0x84>
 8007406:	0031      	movs	r1, r6
 8007408:	0022      	movs	r2, r4
 800740a:	0038      	movs	r0, r7
 800740c:	f7ff ff14 	bl	8007238 <__multiply>
 8007410:	0031      	movs	r1, r6
 8007412:	9001      	str	r0, [sp, #4]
 8007414:	0038      	movs	r0, r7
 8007416:	f7ff fdfd 	bl	8007014 <_Bfree>
 800741a:	9e01      	ldr	r6, [sp, #4]
 800741c:	106d      	asrs	r5, r5, #1
 800741e:	d00c      	beq.n	800743a <__pow5mult+0xa2>
 8007420:	6820      	ldr	r0, [r4, #0]
 8007422:	2800      	cmp	r0, #0
 8007424:	d107      	bne.n	8007436 <__pow5mult+0x9e>
 8007426:	0022      	movs	r2, r4
 8007428:	0021      	movs	r1, r4
 800742a:	0038      	movs	r0, r7
 800742c:	f7ff ff04 	bl	8007238 <__multiply>
 8007430:	2300      	movs	r3, #0
 8007432:	6020      	str	r0, [r4, #0]
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	0004      	movs	r4, r0
 8007438:	e7e2      	b.n	8007400 <__pow5mult+0x68>
 800743a:	0030      	movs	r0, r6
 800743c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	08009070 	.word	0x08009070
 8007444:	08008f08 	.word	0x08008f08
 8007448:	08008f1f 	.word	0x08008f1f
 800744c:	00000271 	.word	0x00000271

08007450 <__lshift>:
 8007450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007452:	000c      	movs	r4, r1
 8007454:	0017      	movs	r7, r2
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	1155      	asrs	r5, r2, #5
 800745a:	b087      	sub	sp, #28
 800745c:	18eb      	adds	r3, r5, r3
 800745e:	9302      	str	r3, [sp, #8]
 8007460:	3301      	adds	r3, #1
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	6849      	ldr	r1, [r1, #4]
 8007466:	68a3      	ldr	r3, [r4, #8]
 8007468:	9004      	str	r0, [sp, #16]
 800746a:	9a01      	ldr	r2, [sp, #4]
 800746c:	4293      	cmp	r3, r2
 800746e:	db10      	blt.n	8007492 <__lshift+0x42>
 8007470:	9804      	ldr	r0, [sp, #16]
 8007472:	f7ff fd8b 	bl	8006f8c <_Balloc>
 8007476:	2300      	movs	r3, #0
 8007478:	0002      	movs	r2, r0
 800747a:	0006      	movs	r6, r0
 800747c:	0019      	movs	r1, r3
 800747e:	3214      	adds	r2, #20
 8007480:	4298      	cmp	r0, r3
 8007482:	d10c      	bne.n	800749e <__lshift+0x4e>
 8007484:	21da      	movs	r1, #218	; 0xda
 8007486:	0002      	movs	r2, r0
 8007488:	4b26      	ldr	r3, [pc, #152]	; (8007524 <__lshift+0xd4>)
 800748a:	4827      	ldr	r0, [pc, #156]	; (8007528 <__lshift+0xd8>)
 800748c:	31ff      	adds	r1, #255	; 0xff
 800748e:	f001 f8b7 	bl	8008600 <__assert_func>
 8007492:	3101      	adds	r1, #1
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	e7e8      	b.n	800746a <__lshift+0x1a>
 8007498:	0098      	lsls	r0, r3, #2
 800749a:	5011      	str	r1, [r2, r0]
 800749c:	3301      	adds	r3, #1
 800749e:	42ab      	cmp	r3, r5
 80074a0:	dbfa      	blt.n	8007498 <__lshift+0x48>
 80074a2:	43eb      	mvns	r3, r5
 80074a4:	17db      	asrs	r3, r3, #31
 80074a6:	401d      	ands	r5, r3
 80074a8:	211f      	movs	r1, #31
 80074aa:	0023      	movs	r3, r4
 80074ac:	0038      	movs	r0, r7
 80074ae:	00ad      	lsls	r5, r5, #2
 80074b0:	1955      	adds	r5, r2, r5
 80074b2:	6922      	ldr	r2, [r4, #16]
 80074b4:	3314      	adds	r3, #20
 80074b6:	0092      	lsls	r2, r2, #2
 80074b8:	4008      	ands	r0, r1
 80074ba:	4684      	mov	ip, r0
 80074bc:	189a      	adds	r2, r3, r2
 80074be:	420f      	tst	r7, r1
 80074c0:	d02a      	beq.n	8007518 <__lshift+0xc8>
 80074c2:	3101      	adds	r1, #1
 80074c4:	1a09      	subs	r1, r1, r0
 80074c6:	9105      	str	r1, [sp, #20]
 80074c8:	2100      	movs	r1, #0
 80074ca:	9503      	str	r5, [sp, #12]
 80074cc:	4667      	mov	r7, ip
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	40b8      	lsls	r0, r7
 80074d2:	4301      	orrs	r1, r0
 80074d4:	9803      	ldr	r0, [sp, #12]
 80074d6:	c002      	stmia	r0!, {r1}
 80074d8:	cb02      	ldmia	r3!, {r1}
 80074da:	9003      	str	r0, [sp, #12]
 80074dc:	9805      	ldr	r0, [sp, #20]
 80074de:	40c1      	lsrs	r1, r0
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d8f3      	bhi.n	80074cc <__lshift+0x7c>
 80074e4:	0020      	movs	r0, r4
 80074e6:	3015      	adds	r0, #21
 80074e8:	2304      	movs	r3, #4
 80074ea:	4282      	cmp	r2, r0
 80074ec:	d304      	bcc.n	80074f8 <__lshift+0xa8>
 80074ee:	1b13      	subs	r3, r2, r4
 80074f0:	3b15      	subs	r3, #21
 80074f2:	089b      	lsrs	r3, r3, #2
 80074f4:	3301      	adds	r3, #1
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	50e9      	str	r1, [r5, r3]
 80074fa:	2900      	cmp	r1, #0
 80074fc:	d002      	beq.n	8007504 <__lshift+0xb4>
 80074fe:	9b02      	ldr	r3, [sp, #8]
 8007500:	3302      	adds	r3, #2
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	9b01      	ldr	r3, [sp, #4]
 8007506:	9804      	ldr	r0, [sp, #16]
 8007508:	3b01      	subs	r3, #1
 800750a:	0021      	movs	r1, r4
 800750c:	6133      	str	r3, [r6, #16]
 800750e:	f7ff fd81 	bl	8007014 <_Bfree>
 8007512:	0030      	movs	r0, r6
 8007514:	b007      	add	sp, #28
 8007516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007518:	cb02      	ldmia	r3!, {r1}
 800751a:	c502      	stmia	r5!, {r1}
 800751c:	429a      	cmp	r2, r3
 800751e:	d8fb      	bhi.n	8007518 <__lshift+0xc8>
 8007520:	e7f0      	b.n	8007504 <__lshift+0xb4>
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	08008e7c 	.word	0x08008e7c
 8007528:	08008f1f 	.word	0x08008f1f

0800752c <__mcmp>:
 800752c:	6902      	ldr	r2, [r0, #16]
 800752e:	690b      	ldr	r3, [r1, #16]
 8007530:	b530      	push	{r4, r5, lr}
 8007532:	0004      	movs	r4, r0
 8007534:	1ad0      	subs	r0, r2, r3
 8007536:	429a      	cmp	r2, r3
 8007538:	d10d      	bne.n	8007556 <__mcmp+0x2a>
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	3414      	adds	r4, #20
 800753e:	3114      	adds	r1, #20
 8007540:	18e2      	adds	r2, r4, r3
 8007542:	18c9      	adds	r1, r1, r3
 8007544:	3a04      	subs	r2, #4
 8007546:	3904      	subs	r1, #4
 8007548:	6815      	ldr	r5, [r2, #0]
 800754a:	680b      	ldr	r3, [r1, #0]
 800754c:	429d      	cmp	r5, r3
 800754e:	d003      	beq.n	8007558 <__mcmp+0x2c>
 8007550:	2001      	movs	r0, #1
 8007552:	429d      	cmp	r5, r3
 8007554:	d303      	bcc.n	800755e <__mcmp+0x32>
 8007556:	bd30      	pop	{r4, r5, pc}
 8007558:	4294      	cmp	r4, r2
 800755a:	d3f3      	bcc.n	8007544 <__mcmp+0x18>
 800755c:	e7fb      	b.n	8007556 <__mcmp+0x2a>
 800755e:	4240      	negs	r0, r0
 8007560:	e7f9      	b.n	8007556 <__mcmp+0x2a>
	...

08007564 <__mdiff>:
 8007564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007566:	000e      	movs	r6, r1
 8007568:	0007      	movs	r7, r0
 800756a:	0011      	movs	r1, r2
 800756c:	0030      	movs	r0, r6
 800756e:	b087      	sub	sp, #28
 8007570:	0014      	movs	r4, r2
 8007572:	f7ff ffdb 	bl	800752c <__mcmp>
 8007576:	1e05      	subs	r5, r0, #0
 8007578:	d110      	bne.n	800759c <__mdiff+0x38>
 800757a:	0001      	movs	r1, r0
 800757c:	0038      	movs	r0, r7
 800757e:	f7ff fd05 	bl	8006f8c <_Balloc>
 8007582:	1e02      	subs	r2, r0, #0
 8007584:	d104      	bne.n	8007590 <__mdiff+0x2c>
 8007586:	4b40      	ldr	r3, [pc, #256]	; (8007688 <__mdiff+0x124>)
 8007588:	4940      	ldr	r1, [pc, #256]	; (800768c <__mdiff+0x128>)
 800758a:	4841      	ldr	r0, [pc, #260]	; (8007690 <__mdiff+0x12c>)
 800758c:	f001 f838 	bl	8008600 <__assert_func>
 8007590:	2301      	movs	r3, #1
 8007592:	6145      	str	r5, [r0, #20]
 8007594:	6103      	str	r3, [r0, #16]
 8007596:	0010      	movs	r0, r2
 8007598:	b007      	add	sp, #28
 800759a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800759c:	2301      	movs	r3, #1
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	2800      	cmp	r0, #0
 80075a2:	db04      	blt.n	80075ae <__mdiff+0x4a>
 80075a4:	0023      	movs	r3, r4
 80075a6:	0034      	movs	r4, r6
 80075a8:	001e      	movs	r6, r3
 80075aa:	2300      	movs	r3, #0
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	0038      	movs	r0, r7
 80075b0:	6861      	ldr	r1, [r4, #4]
 80075b2:	f7ff fceb 	bl	8006f8c <_Balloc>
 80075b6:	1e02      	subs	r2, r0, #0
 80075b8:	d103      	bne.n	80075c2 <__mdiff+0x5e>
 80075ba:	2190      	movs	r1, #144	; 0x90
 80075bc:	4b32      	ldr	r3, [pc, #200]	; (8007688 <__mdiff+0x124>)
 80075be:	0089      	lsls	r1, r1, #2
 80075c0:	e7e3      	b.n	800758a <__mdiff+0x26>
 80075c2:	9b01      	ldr	r3, [sp, #4]
 80075c4:	2700      	movs	r7, #0
 80075c6:	60c3      	str	r3, [r0, #12]
 80075c8:	6920      	ldr	r0, [r4, #16]
 80075ca:	3414      	adds	r4, #20
 80075cc:	9401      	str	r4, [sp, #4]
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	0084      	lsls	r4, r0, #2
 80075d2:	191b      	adds	r3, r3, r4
 80075d4:	0034      	movs	r4, r6
 80075d6:	9302      	str	r3, [sp, #8]
 80075d8:	6933      	ldr	r3, [r6, #16]
 80075da:	3414      	adds	r4, #20
 80075dc:	0099      	lsls	r1, r3, #2
 80075de:	1863      	adds	r3, r4, r1
 80075e0:	9303      	str	r3, [sp, #12]
 80075e2:	0013      	movs	r3, r2
 80075e4:	3314      	adds	r3, #20
 80075e6:	469c      	mov	ip, r3
 80075e8:	9305      	str	r3, [sp, #20]
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	cc02      	ldmia	r4!, {r1}
 80075f2:	cb20      	ldmia	r3!, {r5}
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	b2ab      	uxth	r3, r5
 80075f8:	19df      	adds	r7, r3, r7
 80075fa:	b28b      	uxth	r3, r1
 80075fc:	1afb      	subs	r3, r7, r3
 80075fe:	0c09      	lsrs	r1, r1, #16
 8007600:	0c2d      	lsrs	r5, r5, #16
 8007602:	1a6d      	subs	r5, r5, r1
 8007604:	1419      	asrs	r1, r3, #16
 8007606:	186d      	adds	r5, r5, r1
 8007608:	4661      	mov	r1, ip
 800760a:	142f      	asrs	r7, r5, #16
 800760c:	b29b      	uxth	r3, r3
 800760e:	042d      	lsls	r5, r5, #16
 8007610:	432b      	orrs	r3, r5
 8007612:	c108      	stmia	r1!, {r3}
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	468c      	mov	ip, r1
 8007618:	42a3      	cmp	r3, r4
 800761a:	d8e8      	bhi.n	80075ee <__mdiff+0x8a>
 800761c:	0031      	movs	r1, r6
 800761e:	9c03      	ldr	r4, [sp, #12]
 8007620:	3115      	adds	r1, #21
 8007622:	2304      	movs	r3, #4
 8007624:	428c      	cmp	r4, r1
 8007626:	d304      	bcc.n	8007632 <__mdiff+0xce>
 8007628:	1ba3      	subs	r3, r4, r6
 800762a:	3b15      	subs	r3, #21
 800762c:	089b      	lsrs	r3, r3, #2
 800762e:	3301      	adds	r3, #1
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	9901      	ldr	r1, [sp, #4]
 8007634:	18cc      	adds	r4, r1, r3
 8007636:	9905      	ldr	r1, [sp, #20]
 8007638:	0026      	movs	r6, r4
 800763a:	18cb      	adds	r3, r1, r3
 800763c:	469c      	mov	ip, r3
 800763e:	9902      	ldr	r1, [sp, #8]
 8007640:	428e      	cmp	r6, r1
 8007642:	d310      	bcc.n	8007666 <__mdiff+0x102>
 8007644:	9e02      	ldr	r6, [sp, #8]
 8007646:	1ee1      	subs	r1, r4, #3
 8007648:	2500      	movs	r5, #0
 800764a:	428e      	cmp	r6, r1
 800764c:	d304      	bcc.n	8007658 <__mdiff+0xf4>
 800764e:	0031      	movs	r1, r6
 8007650:	3103      	adds	r1, #3
 8007652:	1b0c      	subs	r4, r1, r4
 8007654:	08a4      	lsrs	r4, r4, #2
 8007656:	00a5      	lsls	r5, r4, #2
 8007658:	195b      	adds	r3, r3, r5
 800765a:	3b04      	subs	r3, #4
 800765c:	6819      	ldr	r1, [r3, #0]
 800765e:	2900      	cmp	r1, #0
 8007660:	d00f      	beq.n	8007682 <__mdiff+0x11e>
 8007662:	6110      	str	r0, [r2, #16]
 8007664:	e797      	b.n	8007596 <__mdiff+0x32>
 8007666:	ce02      	ldmia	r6!, {r1}
 8007668:	b28d      	uxth	r5, r1
 800766a:	19ed      	adds	r5, r5, r7
 800766c:	0c0f      	lsrs	r7, r1, #16
 800766e:	1429      	asrs	r1, r5, #16
 8007670:	1879      	adds	r1, r7, r1
 8007672:	140f      	asrs	r7, r1, #16
 8007674:	b2ad      	uxth	r5, r5
 8007676:	0409      	lsls	r1, r1, #16
 8007678:	430d      	orrs	r5, r1
 800767a:	4661      	mov	r1, ip
 800767c:	c120      	stmia	r1!, {r5}
 800767e:	468c      	mov	ip, r1
 8007680:	e7dd      	b.n	800763e <__mdiff+0xda>
 8007682:	3801      	subs	r0, #1
 8007684:	e7e9      	b.n	800765a <__mdiff+0xf6>
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	08008e7c 	.word	0x08008e7c
 800768c:	00000232 	.word	0x00000232
 8007690:	08008f1f 	.word	0x08008f1f

08007694 <__ulp>:
 8007694:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <__ulp+0x40>)
 8007696:	4019      	ands	r1, r3
 8007698:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <__ulp+0x44>)
 800769a:	18c9      	adds	r1, r1, r3
 800769c:	2900      	cmp	r1, #0
 800769e:	dd04      	ble.n	80076aa <__ulp+0x16>
 80076a0:	2200      	movs	r2, #0
 80076a2:	000b      	movs	r3, r1
 80076a4:	0010      	movs	r0, r2
 80076a6:	0019      	movs	r1, r3
 80076a8:	4770      	bx	lr
 80076aa:	4249      	negs	r1, r1
 80076ac:	2200      	movs	r2, #0
 80076ae:	2300      	movs	r3, #0
 80076b0:	1509      	asrs	r1, r1, #20
 80076b2:	2913      	cmp	r1, #19
 80076b4:	dc04      	bgt.n	80076c0 <__ulp+0x2c>
 80076b6:	2080      	movs	r0, #128	; 0x80
 80076b8:	0300      	lsls	r0, r0, #12
 80076ba:	4108      	asrs	r0, r1
 80076bc:	0003      	movs	r3, r0
 80076be:	e7f1      	b.n	80076a4 <__ulp+0x10>
 80076c0:	3914      	subs	r1, #20
 80076c2:	2001      	movs	r0, #1
 80076c4:	291e      	cmp	r1, #30
 80076c6:	dc02      	bgt.n	80076ce <__ulp+0x3a>
 80076c8:	2080      	movs	r0, #128	; 0x80
 80076ca:	0600      	lsls	r0, r0, #24
 80076cc:	40c8      	lsrs	r0, r1
 80076ce:	0002      	movs	r2, r0
 80076d0:	e7e8      	b.n	80076a4 <__ulp+0x10>
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	7ff00000 	.word	0x7ff00000
 80076d8:	fcc00000 	.word	0xfcc00000

080076dc <__b2d>:
 80076dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076de:	0006      	movs	r6, r0
 80076e0:	6903      	ldr	r3, [r0, #16]
 80076e2:	3614      	adds	r6, #20
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	18f3      	adds	r3, r6, r3
 80076e8:	1f1d      	subs	r5, r3, #4
 80076ea:	682c      	ldr	r4, [r5, #0]
 80076ec:	000f      	movs	r7, r1
 80076ee:	0020      	movs	r0, r4
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	f7ff fd43 	bl	800717c <__hi0bits>
 80076f6:	2320      	movs	r3, #32
 80076f8:	1a1b      	subs	r3, r3, r0
 80076fa:	491f      	ldr	r1, [pc, #124]	; (8007778 <__b2d+0x9c>)
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	280a      	cmp	r0, #10
 8007700:	dc16      	bgt.n	8007730 <__b2d+0x54>
 8007702:	230b      	movs	r3, #11
 8007704:	0027      	movs	r7, r4
 8007706:	1a1b      	subs	r3, r3, r0
 8007708:	40df      	lsrs	r7, r3
 800770a:	4339      	orrs	r1, r7
 800770c:	469c      	mov	ip, r3
 800770e:	000b      	movs	r3, r1
 8007710:	2100      	movs	r1, #0
 8007712:	42ae      	cmp	r6, r5
 8007714:	d202      	bcs.n	800771c <__b2d+0x40>
 8007716:	9901      	ldr	r1, [sp, #4]
 8007718:	3908      	subs	r1, #8
 800771a:	6809      	ldr	r1, [r1, #0]
 800771c:	3015      	adds	r0, #21
 800771e:	4084      	lsls	r4, r0
 8007720:	4660      	mov	r0, ip
 8007722:	40c1      	lsrs	r1, r0
 8007724:	430c      	orrs	r4, r1
 8007726:	0022      	movs	r2, r4
 8007728:	0010      	movs	r0, r2
 800772a:	0019      	movs	r1, r3
 800772c:	b003      	add	sp, #12
 800772e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007730:	2700      	movs	r7, #0
 8007732:	42ae      	cmp	r6, r5
 8007734:	d202      	bcs.n	800773c <__b2d+0x60>
 8007736:	9d01      	ldr	r5, [sp, #4]
 8007738:	3d08      	subs	r5, #8
 800773a:	682f      	ldr	r7, [r5, #0]
 800773c:	230b      	movs	r3, #11
 800773e:	425b      	negs	r3, r3
 8007740:	469c      	mov	ip, r3
 8007742:	4484      	add	ip, r0
 8007744:	280b      	cmp	r0, #11
 8007746:	d013      	beq.n	8007770 <__b2d+0x94>
 8007748:	4663      	mov	r3, ip
 800774a:	2020      	movs	r0, #32
 800774c:	409c      	lsls	r4, r3
 800774e:	1ac0      	subs	r0, r0, r3
 8007750:	003b      	movs	r3, r7
 8007752:	40c3      	lsrs	r3, r0
 8007754:	431c      	orrs	r4, r3
 8007756:	4321      	orrs	r1, r4
 8007758:	000b      	movs	r3, r1
 800775a:	2100      	movs	r1, #0
 800775c:	42b5      	cmp	r5, r6
 800775e:	d901      	bls.n	8007764 <__b2d+0x88>
 8007760:	3d04      	subs	r5, #4
 8007762:	6829      	ldr	r1, [r5, #0]
 8007764:	4664      	mov	r4, ip
 8007766:	40c1      	lsrs	r1, r0
 8007768:	40a7      	lsls	r7, r4
 800776a:	430f      	orrs	r7, r1
 800776c:	003a      	movs	r2, r7
 800776e:	e7db      	b.n	8007728 <__b2d+0x4c>
 8007770:	4321      	orrs	r1, r4
 8007772:	000b      	movs	r3, r1
 8007774:	e7fa      	b.n	800776c <__b2d+0x90>
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	3ff00000 	.word	0x3ff00000

0800777c <__d2b>:
 800777c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800777e:	2101      	movs	r1, #1
 8007780:	0014      	movs	r4, r2
 8007782:	001e      	movs	r6, r3
 8007784:	9f08      	ldr	r7, [sp, #32]
 8007786:	f7ff fc01 	bl	8006f8c <_Balloc>
 800778a:	1e05      	subs	r5, r0, #0
 800778c:	d105      	bne.n	800779a <__d2b+0x1e>
 800778e:	0002      	movs	r2, r0
 8007790:	4b26      	ldr	r3, [pc, #152]	; (800782c <__d2b+0xb0>)
 8007792:	4927      	ldr	r1, [pc, #156]	; (8007830 <__d2b+0xb4>)
 8007794:	4827      	ldr	r0, [pc, #156]	; (8007834 <__d2b+0xb8>)
 8007796:	f000 ff33 	bl	8008600 <__assert_func>
 800779a:	0333      	lsls	r3, r6, #12
 800779c:	0076      	lsls	r6, r6, #1
 800779e:	0b1b      	lsrs	r3, r3, #12
 80077a0:	0d76      	lsrs	r6, r6, #21
 80077a2:	d124      	bne.n	80077ee <__d2b+0x72>
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	2c00      	cmp	r4, #0
 80077a8:	d027      	beq.n	80077fa <__d2b+0x7e>
 80077aa:	4668      	mov	r0, sp
 80077ac:	9400      	str	r4, [sp, #0]
 80077ae:	f7ff fcff 	bl	80071b0 <__lo0bits>
 80077b2:	9c00      	ldr	r4, [sp, #0]
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d01e      	beq.n	80077f6 <__d2b+0x7a>
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	2120      	movs	r1, #32
 80077bc:	001a      	movs	r2, r3
 80077be:	1a09      	subs	r1, r1, r0
 80077c0:	408a      	lsls	r2, r1
 80077c2:	40c3      	lsrs	r3, r0
 80077c4:	4322      	orrs	r2, r4
 80077c6:	616a      	str	r2, [r5, #20]
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	9c01      	ldr	r4, [sp, #4]
 80077cc:	61ac      	str	r4, [r5, #24]
 80077ce:	1e63      	subs	r3, r4, #1
 80077d0:	419c      	sbcs	r4, r3
 80077d2:	3401      	adds	r4, #1
 80077d4:	612c      	str	r4, [r5, #16]
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d018      	beq.n	800780c <__d2b+0x90>
 80077da:	4b17      	ldr	r3, [pc, #92]	; (8007838 <__d2b+0xbc>)
 80077dc:	18f6      	adds	r6, r6, r3
 80077de:	2335      	movs	r3, #53	; 0x35
 80077e0:	1836      	adds	r6, r6, r0
 80077e2:	1a18      	subs	r0, r3, r0
 80077e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e6:	603e      	str	r6, [r7, #0]
 80077e8:	6018      	str	r0, [r3, #0]
 80077ea:	0028      	movs	r0, r5
 80077ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077ee:	2280      	movs	r2, #128	; 0x80
 80077f0:	0352      	lsls	r2, r2, #13
 80077f2:	4313      	orrs	r3, r2
 80077f4:	e7d6      	b.n	80077a4 <__d2b+0x28>
 80077f6:	616c      	str	r4, [r5, #20]
 80077f8:	e7e7      	b.n	80077ca <__d2b+0x4e>
 80077fa:	a801      	add	r0, sp, #4
 80077fc:	f7ff fcd8 	bl	80071b0 <__lo0bits>
 8007800:	2401      	movs	r4, #1
 8007802:	9b01      	ldr	r3, [sp, #4]
 8007804:	612c      	str	r4, [r5, #16]
 8007806:	616b      	str	r3, [r5, #20]
 8007808:	3020      	adds	r0, #32
 800780a:	e7e4      	b.n	80077d6 <__d2b+0x5a>
 800780c:	4b0b      	ldr	r3, [pc, #44]	; (800783c <__d2b+0xc0>)
 800780e:	18c0      	adds	r0, r0, r3
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <__d2b+0xc4>)
 8007812:	6038      	str	r0, [r7, #0]
 8007814:	18e3      	adds	r3, r4, r3
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	18eb      	adds	r3, r5, r3
 800781a:	6958      	ldr	r0, [r3, #20]
 800781c:	f7ff fcae 	bl	800717c <__hi0bits>
 8007820:	0164      	lsls	r4, r4, #5
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	1a24      	subs	r4, r4, r0
 8007826:	601c      	str	r4, [r3, #0]
 8007828:	e7df      	b.n	80077ea <__d2b+0x6e>
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	08008e7c 	.word	0x08008e7c
 8007830:	0000030a 	.word	0x0000030a
 8007834:	08008f1f 	.word	0x08008f1f
 8007838:	fffffbcd 	.word	0xfffffbcd
 800783c:	fffffbce 	.word	0xfffffbce
 8007840:	3fffffff 	.word	0x3fffffff

08007844 <__ratio>:
 8007844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007846:	b087      	sub	sp, #28
 8007848:	000f      	movs	r7, r1
 800784a:	a904      	add	r1, sp, #16
 800784c:	0006      	movs	r6, r0
 800784e:	f7ff ff45 	bl	80076dc <__b2d>
 8007852:	9000      	str	r0, [sp, #0]
 8007854:	9101      	str	r1, [sp, #4]
 8007856:	9c00      	ldr	r4, [sp, #0]
 8007858:	9d01      	ldr	r5, [sp, #4]
 800785a:	0038      	movs	r0, r7
 800785c:	a905      	add	r1, sp, #20
 800785e:	f7ff ff3d 	bl	80076dc <__b2d>
 8007862:	9002      	str	r0, [sp, #8]
 8007864:	9103      	str	r1, [sp, #12]
 8007866:	9a02      	ldr	r2, [sp, #8]
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	6931      	ldr	r1, [r6, #16]
 800786c:	6938      	ldr	r0, [r7, #16]
 800786e:	9e05      	ldr	r6, [sp, #20]
 8007870:	1a08      	subs	r0, r1, r0
 8007872:	9904      	ldr	r1, [sp, #16]
 8007874:	0140      	lsls	r0, r0, #5
 8007876:	1b89      	subs	r1, r1, r6
 8007878:	1841      	adds	r1, r0, r1
 800787a:	0508      	lsls	r0, r1, #20
 800787c:	2900      	cmp	r1, #0
 800787e:	dd07      	ble.n	8007890 <__ratio+0x4c>
 8007880:	9901      	ldr	r1, [sp, #4]
 8007882:	1845      	adds	r5, r0, r1
 8007884:	0020      	movs	r0, r4
 8007886:	0029      	movs	r1, r5
 8007888:	f7f9 fad4 	bl	8000e34 <__aeabi_ddiv>
 800788c:	b007      	add	sp, #28
 800788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007890:	9903      	ldr	r1, [sp, #12]
 8007892:	1a0b      	subs	r3, r1, r0
 8007894:	e7f6      	b.n	8007884 <__ratio+0x40>

08007896 <__copybits>:
 8007896:	b570      	push	{r4, r5, r6, lr}
 8007898:	0014      	movs	r4, r2
 800789a:	0005      	movs	r5, r0
 800789c:	3901      	subs	r1, #1
 800789e:	6913      	ldr	r3, [r2, #16]
 80078a0:	1149      	asrs	r1, r1, #5
 80078a2:	3101      	adds	r1, #1
 80078a4:	0089      	lsls	r1, r1, #2
 80078a6:	3414      	adds	r4, #20
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	1841      	adds	r1, r0, r1
 80078ac:	18e3      	adds	r3, r4, r3
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	d80d      	bhi.n	80078ce <__copybits+0x38>
 80078b2:	0014      	movs	r4, r2
 80078b4:	3411      	adds	r4, #17
 80078b6:	2500      	movs	r5, #0
 80078b8:	429c      	cmp	r4, r3
 80078ba:	d803      	bhi.n	80078c4 <__copybits+0x2e>
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	3b11      	subs	r3, #17
 80078c0:	089b      	lsrs	r3, r3, #2
 80078c2:	009d      	lsls	r5, r3, #2
 80078c4:	2300      	movs	r3, #0
 80078c6:	1940      	adds	r0, r0, r5
 80078c8:	4281      	cmp	r1, r0
 80078ca:	d803      	bhi.n	80078d4 <__copybits+0x3e>
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
 80078ce:	cc40      	ldmia	r4!, {r6}
 80078d0:	c540      	stmia	r5!, {r6}
 80078d2:	e7ec      	b.n	80078ae <__copybits+0x18>
 80078d4:	c008      	stmia	r0!, {r3}
 80078d6:	e7f7      	b.n	80078c8 <__copybits+0x32>

080078d8 <__any_on>:
 80078d8:	0002      	movs	r2, r0
 80078da:	6900      	ldr	r0, [r0, #16]
 80078dc:	b510      	push	{r4, lr}
 80078de:	3214      	adds	r2, #20
 80078e0:	114b      	asrs	r3, r1, #5
 80078e2:	4298      	cmp	r0, r3
 80078e4:	db13      	blt.n	800790e <__any_on+0x36>
 80078e6:	dd0c      	ble.n	8007902 <__any_on+0x2a>
 80078e8:	241f      	movs	r4, #31
 80078ea:	0008      	movs	r0, r1
 80078ec:	4020      	ands	r0, r4
 80078ee:	4221      	tst	r1, r4
 80078f0:	d007      	beq.n	8007902 <__any_on+0x2a>
 80078f2:	0099      	lsls	r1, r3, #2
 80078f4:	588c      	ldr	r4, [r1, r2]
 80078f6:	0021      	movs	r1, r4
 80078f8:	40c1      	lsrs	r1, r0
 80078fa:	4081      	lsls	r1, r0
 80078fc:	2001      	movs	r0, #1
 80078fe:	428c      	cmp	r4, r1
 8007900:	d104      	bne.n	800790c <__any_on+0x34>
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	18d3      	adds	r3, r2, r3
 8007906:	4293      	cmp	r3, r2
 8007908:	d803      	bhi.n	8007912 <__any_on+0x3a>
 800790a:	2000      	movs	r0, #0
 800790c:	bd10      	pop	{r4, pc}
 800790e:	0003      	movs	r3, r0
 8007910:	e7f7      	b.n	8007902 <__any_on+0x2a>
 8007912:	3b04      	subs	r3, #4
 8007914:	6819      	ldr	r1, [r3, #0]
 8007916:	2900      	cmp	r1, #0
 8007918:	d0f5      	beq.n	8007906 <__any_on+0x2e>
 800791a:	2001      	movs	r0, #1
 800791c:	e7f6      	b.n	800790c <__any_on+0x34>

0800791e <_calloc_r>:
 800791e:	b570      	push	{r4, r5, r6, lr}
 8007920:	0c13      	lsrs	r3, r2, #16
 8007922:	0c0d      	lsrs	r5, r1, #16
 8007924:	d11e      	bne.n	8007964 <_calloc_r+0x46>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10c      	bne.n	8007944 <_calloc_r+0x26>
 800792a:	b289      	uxth	r1, r1
 800792c:	b294      	uxth	r4, r2
 800792e:	434c      	muls	r4, r1
 8007930:	0021      	movs	r1, r4
 8007932:	f000 f843 	bl	80079bc <_malloc_r>
 8007936:	1e05      	subs	r5, r0, #0
 8007938:	d01b      	beq.n	8007972 <_calloc_r+0x54>
 800793a:	0022      	movs	r2, r4
 800793c:	2100      	movs	r1, #0
 800793e:	f7fd fd7d 	bl	800543c <memset>
 8007942:	e016      	b.n	8007972 <_calloc_r+0x54>
 8007944:	1c1d      	adds	r5, r3, #0
 8007946:	1c0b      	adds	r3, r1, #0
 8007948:	b292      	uxth	r2, r2
 800794a:	b289      	uxth	r1, r1
 800794c:	b29c      	uxth	r4, r3
 800794e:	4351      	muls	r1, r2
 8007950:	b2ab      	uxth	r3, r5
 8007952:	4363      	muls	r3, r4
 8007954:	0c0c      	lsrs	r4, r1, #16
 8007956:	191c      	adds	r4, r3, r4
 8007958:	0c22      	lsrs	r2, r4, #16
 800795a:	d107      	bne.n	800796c <_calloc_r+0x4e>
 800795c:	0424      	lsls	r4, r4, #16
 800795e:	b289      	uxth	r1, r1
 8007960:	430c      	orrs	r4, r1
 8007962:	e7e5      	b.n	8007930 <_calloc_r+0x12>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <_calloc_r+0x4e>
 8007968:	1c13      	adds	r3, r2, #0
 800796a:	e7ed      	b.n	8007948 <_calloc_r+0x2a>
 800796c:	230c      	movs	r3, #12
 800796e:	2500      	movs	r5, #0
 8007970:	6003      	str	r3, [r0, #0]
 8007972:	0028      	movs	r0, r5
 8007974:	bd70      	pop	{r4, r5, r6, pc}
	...

08007978 <sbrk_aligned>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4e0f      	ldr	r6, [pc, #60]	; (80079b8 <sbrk_aligned+0x40>)
 800797c:	000d      	movs	r5, r1
 800797e:	6831      	ldr	r1, [r6, #0]
 8007980:	0004      	movs	r4, r0
 8007982:	2900      	cmp	r1, #0
 8007984:	d102      	bne.n	800798c <sbrk_aligned+0x14>
 8007986:	f000 fcdb 	bl	8008340 <_sbrk_r>
 800798a:	6030      	str	r0, [r6, #0]
 800798c:	0029      	movs	r1, r5
 800798e:	0020      	movs	r0, r4
 8007990:	f000 fcd6 	bl	8008340 <_sbrk_r>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d00a      	beq.n	80079ae <sbrk_aligned+0x36>
 8007998:	2303      	movs	r3, #3
 800799a:	1cc5      	adds	r5, r0, #3
 800799c:	439d      	bics	r5, r3
 800799e:	42a8      	cmp	r0, r5
 80079a0:	d007      	beq.n	80079b2 <sbrk_aligned+0x3a>
 80079a2:	1a29      	subs	r1, r5, r0
 80079a4:	0020      	movs	r0, r4
 80079a6:	f000 fccb 	bl	8008340 <_sbrk_r>
 80079aa:	1c43      	adds	r3, r0, #1
 80079ac:	d101      	bne.n	80079b2 <sbrk_aligned+0x3a>
 80079ae:	2501      	movs	r5, #1
 80079b0:	426d      	negs	r5, r5
 80079b2:	0028      	movs	r0, r5
 80079b4:	bd70      	pop	{r4, r5, r6, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	2000031c 	.word	0x2000031c

080079bc <_malloc_r>:
 80079bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079be:	2203      	movs	r2, #3
 80079c0:	1ccb      	adds	r3, r1, #3
 80079c2:	4393      	bics	r3, r2
 80079c4:	3308      	adds	r3, #8
 80079c6:	0006      	movs	r6, r0
 80079c8:	001f      	movs	r7, r3
 80079ca:	2b0c      	cmp	r3, #12
 80079cc:	d232      	bcs.n	8007a34 <_malloc_r+0x78>
 80079ce:	270c      	movs	r7, #12
 80079d0:	42b9      	cmp	r1, r7
 80079d2:	d831      	bhi.n	8007a38 <_malloc_r+0x7c>
 80079d4:	0030      	movs	r0, r6
 80079d6:	f000 ffc7 	bl	8008968 <__malloc_lock>
 80079da:	4d32      	ldr	r5, [pc, #200]	; (8007aa4 <_malloc_r+0xe8>)
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	001c      	movs	r4, r3
 80079e0:	2c00      	cmp	r4, #0
 80079e2:	d12e      	bne.n	8007a42 <_malloc_r+0x86>
 80079e4:	0039      	movs	r1, r7
 80079e6:	0030      	movs	r0, r6
 80079e8:	f7ff ffc6 	bl	8007978 <sbrk_aligned>
 80079ec:	0004      	movs	r4, r0
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	d11e      	bne.n	8007a30 <_malloc_r+0x74>
 80079f2:	682c      	ldr	r4, [r5, #0]
 80079f4:	0025      	movs	r5, r4
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	d14a      	bne.n	8007a90 <_malloc_r+0xd4>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	0029      	movs	r1, r5
 80079fe:	18e3      	adds	r3, r4, r3
 8007a00:	0030      	movs	r0, r6
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	f000 fc9c 	bl	8008340 <_sbrk_r>
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	4283      	cmp	r3, r0
 8007a0c:	d143      	bne.n	8007a96 <_malloc_r+0xda>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	3703      	adds	r7, #3
 8007a12:	1aff      	subs	r7, r7, r3
 8007a14:	2303      	movs	r3, #3
 8007a16:	439f      	bics	r7, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	2f0c      	cmp	r7, #12
 8007a1c:	d200      	bcs.n	8007a20 <_malloc_r+0x64>
 8007a1e:	270c      	movs	r7, #12
 8007a20:	0039      	movs	r1, r7
 8007a22:	0030      	movs	r0, r6
 8007a24:	f7ff ffa8 	bl	8007978 <sbrk_aligned>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d034      	beq.n	8007a96 <_malloc_r+0xda>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	19df      	adds	r7, r3, r7
 8007a30:	6027      	str	r7, [r4, #0]
 8007a32:	e013      	b.n	8007a5c <_malloc_r+0xa0>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dacb      	bge.n	80079d0 <_malloc_r+0x14>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	2500      	movs	r5, #0
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	0028      	movs	r0, r5
 8007a40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a42:	6822      	ldr	r2, [r4, #0]
 8007a44:	1bd1      	subs	r1, r2, r7
 8007a46:	d420      	bmi.n	8007a8a <_malloc_r+0xce>
 8007a48:	290b      	cmp	r1, #11
 8007a4a:	d917      	bls.n	8007a7c <_malloc_r+0xc0>
 8007a4c:	19e2      	adds	r2, r4, r7
 8007a4e:	6027      	str	r7, [r4, #0]
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	d111      	bne.n	8007a78 <_malloc_r+0xbc>
 8007a54:	602a      	str	r2, [r5, #0]
 8007a56:	6863      	ldr	r3, [r4, #4]
 8007a58:	6011      	str	r1, [r2, #0]
 8007a5a:	6053      	str	r3, [r2, #4]
 8007a5c:	0030      	movs	r0, r6
 8007a5e:	0025      	movs	r5, r4
 8007a60:	f000 ff8a 	bl	8008978 <__malloc_unlock>
 8007a64:	2207      	movs	r2, #7
 8007a66:	350b      	adds	r5, #11
 8007a68:	1d23      	adds	r3, r4, #4
 8007a6a:	4395      	bics	r5, r2
 8007a6c:	1aea      	subs	r2, r5, r3
 8007a6e:	429d      	cmp	r5, r3
 8007a70:	d0e5      	beq.n	8007a3e <_malloc_r+0x82>
 8007a72:	1b5b      	subs	r3, r3, r5
 8007a74:	50a3      	str	r3, [r4, r2]
 8007a76:	e7e2      	b.n	8007a3e <_malloc_r+0x82>
 8007a78:	605a      	str	r2, [r3, #4]
 8007a7a:	e7ec      	b.n	8007a56 <_malloc_r+0x9a>
 8007a7c:	6862      	ldr	r2, [r4, #4]
 8007a7e:	42a3      	cmp	r3, r4
 8007a80:	d101      	bne.n	8007a86 <_malloc_r+0xca>
 8007a82:	602a      	str	r2, [r5, #0]
 8007a84:	e7ea      	b.n	8007a5c <_malloc_r+0xa0>
 8007a86:	605a      	str	r2, [r3, #4]
 8007a88:	e7e8      	b.n	8007a5c <_malloc_r+0xa0>
 8007a8a:	0023      	movs	r3, r4
 8007a8c:	6864      	ldr	r4, [r4, #4]
 8007a8e:	e7a7      	b.n	80079e0 <_malloc_r+0x24>
 8007a90:	002c      	movs	r4, r5
 8007a92:	686d      	ldr	r5, [r5, #4]
 8007a94:	e7af      	b.n	80079f6 <_malloc_r+0x3a>
 8007a96:	230c      	movs	r3, #12
 8007a98:	0030      	movs	r0, r6
 8007a9a:	6033      	str	r3, [r6, #0]
 8007a9c:	f000 ff6c 	bl	8008978 <__malloc_unlock>
 8007aa0:	e7cd      	b.n	8007a3e <_malloc_r+0x82>
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	20000318 	.word	0x20000318

08007aa8 <__ssputs_r>:
 8007aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aaa:	688e      	ldr	r6, [r1, #8]
 8007aac:	b085      	sub	sp, #20
 8007aae:	0007      	movs	r7, r0
 8007ab0:	000c      	movs	r4, r1
 8007ab2:	9203      	str	r2, [sp, #12]
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	429e      	cmp	r6, r3
 8007ab8:	d83c      	bhi.n	8007b34 <__ssputs_r+0x8c>
 8007aba:	2390      	movs	r3, #144	; 0x90
 8007abc:	898a      	ldrh	r2, [r1, #12]
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	421a      	tst	r2, r3
 8007ac2:	d034      	beq.n	8007b2e <__ssputs_r+0x86>
 8007ac4:	6909      	ldr	r1, [r1, #16]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	6960      	ldr	r0, [r4, #20]
 8007aca:	1a5b      	subs	r3, r3, r1
 8007acc:	9302      	str	r3, [sp, #8]
 8007ace:	2303      	movs	r3, #3
 8007ad0:	4343      	muls	r3, r0
 8007ad2:	0fdd      	lsrs	r5, r3, #31
 8007ad4:	18ed      	adds	r5, r5, r3
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	9802      	ldr	r0, [sp, #8]
 8007ada:	3301      	adds	r3, #1
 8007adc:	181b      	adds	r3, r3, r0
 8007ade:	106d      	asrs	r5, r5, #1
 8007ae0:	42ab      	cmp	r3, r5
 8007ae2:	d900      	bls.n	8007ae6 <__ssputs_r+0x3e>
 8007ae4:	001d      	movs	r5, r3
 8007ae6:	0553      	lsls	r3, r2, #21
 8007ae8:	d532      	bpl.n	8007b50 <__ssputs_r+0xa8>
 8007aea:	0029      	movs	r1, r5
 8007aec:	0038      	movs	r0, r7
 8007aee:	f7ff ff65 	bl	80079bc <_malloc_r>
 8007af2:	1e06      	subs	r6, r0, #0
 8007af4:	d109      	bne.n	8007b0a <__ssputs_r+0x62>
 8007af6:	230c      	movs	r3, #12
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	2340      	movs	r3, #64	; 0x40
 8007afc:	2001      	movs	r0, #1
 8007afe:	89a2      	ldrh	r2, [r4, #12]
 8007b00:	4240      	negs	r0, r0
 8007b02:	4313      	orrs	r3, r2
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	b005      	add	sp, #20
 8007b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b0a:	9a02      	ldr	r2, [sp, #8]
 8007b0c:	6921      	ldr	r1, [r4, #16]
 8007b0e:	f7ff fa34 	bl	8006f7a <memcpy>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <__ssputs_r+0xc0>)
 8007b16:	401a      	ands	r2, r3
 8007b18:	2380      	movs	r3, #128	; 0x80
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	9b02      	ldr	r3, [sp, #8]
 8007b20:	6126      	str	r6, [r4, #16]
 8007b22:	18f6      	adds	r6, r6, r3
 8007b24:	6026      	str	r6, [r4, #0]
 8007b26:	6165      	str	r5, [r4, #20]
 8007b28:	9e01      	ldr	r6, [sp, #4]
 8007b2a:	1aed      	subs	r5, r5, r3
 8007b2c:	60a5      	str	r5, [r4, #8]
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	429e      	cmp	r6, r3
 8007b32:	d900      	bls.n	8007b36 <__ssputs_r+0x8e>
 8007b34:	9e01      	ldr	r6, [sp, #4]
 8007b36:	0032      	movs	r2, r6
 8007b38:	9903      	ldr	r1, [sp, #12]
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	f000 ff01 	bl	8008942 <memmove>
 8007b40:	68a3      	ldr	r3, [r4, #8]
 8007b42:	2000      	movs	r0, #0
 8007b44:	1b9b      	subs	r3, r3, r6
 8007b46:	60a3      	str	r3, [r4, #8]
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	199e      	adds	r6, r3, r6
 8007b4c:	6026      	str	r6, [r4, #0]
 8007b4e:	e7da      	b.n	8007b06 <__ssputs_r+0x5e>
 8007b50:	002a      	movs	r2, r5
 8007b52:	0038      	movs	r0, r7
 8007b54:	f000 ff62 	bl	8008a1c <_realloc_r>
 8007b58:	1e06      	subs	r6, r0, #0
 8007b5a:	d1e0      	bne.n	8007b1e <__ssputs_r+0x76>
 8007b5c:	0038      	movs	r0, r7
 8007b5e:	6921      	ldr	r1, [r4, #16]
 8007b60:	f000 ff12 	bl	8008988 <_free_r>
 8007b64:	e7c7      	b.n	8007af6 <__ssputs_r+0x4e>
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	fffffb7f 	.word	0xfffffb7f

08007b6c <_svfiprintf_r>:
 8007b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b6e:	b0a1      	sub	sp, #132	; 0x84
 8007b70:	9003      	str	r0, [sp, #12]
 8007b72:	001d      	movs	r5, r3
 8007b74:	898b      	ldrh	r3, [r1, #12]
 8007b76:	000f      	movs	r7, r1
 8007b78:	0016      	movs	r6, r2
 8007b7a:	061b      	lsls	r3, r3, #24
 8007b7c:	d511      	bpl.n	8007ba2 <_svfiprintf_r+0x36>
 8007b7e:	690b      	ldr	r3, [r1, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10e      	bne.n	8007ba2 <_svfiprintf_r+0x36>
 8007b84:	2140      	movs	r1, #64	; 0x40
 8007b86:	f7ff ff19 	bl	80079bc <_malloc_r>
 8007b8a:	6038      	str	r0, [r7, #0]
 8007b8c:	6138      	str	r0, [r7, #16]
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d105      	bne.n	8007b9e <_svfiprintf_r+0x32>
 8007b92:	230c      	movs	r3, #12
 8007b94:	9a03      	ldr	r2, [sp, #12]
 8007b96:	3801      	subs	r0, #1
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	b021      	add	sp, #132	; 0x84
 8007b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b9e:	2340      	movs	r3, #64	; 0x40
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	ac08      	add	r4, sp, #32
 8007ba6:	6163      	str	r3, [r4, #20]
 8007ba8:	3320      	adds	r3, #32
 8007baa:	7663      	strb	r3, [r4, #25]
 8007bac:	3310      	adds	r3, #16
 8007bae:	76a3      	strb	r3, [r4, #26]
 8007bb0:	9507      	str	r5, [sp, #28]
 8007bb2:	0035      	movs	r5, r6
 8007bb4:	782b      	ldrb	r3, [r5, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <_svfiprintf_r+0x52>
 8007bba:	2b25      	cmp	r3, #37	; 0x25
 8007bbc:	d147      	bne.n	8007c4e <_svfiprintf_r+0xe2>
 8007bbe:	1bab      	subs	r3, r5, r6
 8007bc0:	9305      	str	r3, [sp, #20]
 8007bc2:	42b5      	cmp	r5, r6
 8007bc4:	d00c      	beq.n	8007be0 <_svfiprintf_r+0x74>
 8007bc6:	0032      	movs	r2, r6
 8007bc8:	0039      	movs	r1, r7
 8007bca:	9803      	ldr	r0, [sp, #12]
 8007bcc:	f7ff ff6c 	bl	8007aa8 <__ssputs_r>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d100      	bne.n	8007bd6 <_svfiprintf_r+0x6a>
 8007bd4:	e0ae      	b.n	8007d34 <_svfiprintf_r+0x1c8>
 8007bd6:	6962      	ldr	r2, [r4, #20]
 8007bd8:	9b05      	ldr	r3, [sp, #20]
 8007bda:	4694      	mov	ip, r2
 8007bdc:	4463      	add	r3, ip
 8007bde:	6163      	str	r3, [r4, #20]
 8007be0:	782b      	ldrb	r3, [r5, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d100      	bne.n	8007be8 <_svfiprintf_r+0x7c>
 8007be6:	e0a5      	b.n	8007d34 <_svfiprintf_r+0x1c8>
 8007be8:	2201      	movs	r2, #1
 8007bea:	2300      	movs	r3, #0
 8007bec:	4252      	negs	r2, r2
 8007bee:	6062      	str	r2, [r4, #4]
 8007bf0:	a904      	add	r1, sp, #16
 8007bf2:	3254      	adds	r2, #84	; 0x54
 8007bf4:	1852      	adds	r2, r2, r1
 8007bf6:	1c6e      	adds	r6, r5, #1
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	60e3      	str	r3, [r4, #12]
 8007bfc:	60a3      	str	r3, [r4, #8]
 8007bfe:	7013      	strb	r3, [r2, #0]
 8007c00:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c02:	2205      	movs	r2, #5
 8007c04:	7831      	ldrb	r1, [r6, #0]
 8007c06:	4854      	ldr	r0, [pc, #336]	; (8007d58 <_svfiprintf_r+0x1ec>)
 8007c08:	f000 fe90 	bl	800892c <memchr>
 8007c0c:	1c75      	adds	r5, r6, #1
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d11f      	bne.n	8007c52 <_svfiprintf_r+0xe6>
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	06d3      	lsls	r3, r2, #27
 8007c16:	d504      	bpl.n	8007c22 <_svfiprintf_r+0xb6>
 8007c18:	2353      	movs	r3, #83	; 0x53
 8007c1a:	a904      	add	r1, sp, #16
 8007c1c:	185b      	adds	r3, r3, r1
 8007c1e:	2120      	movs	r1, #32
 8007c20:	7019      	strb	r1, [r3, #0]
 8007c22:	0713      	lsls	r3, r2, #28
 8007c24:	d504      	bpl.n	8007c30 <_svfiprintf_r+0xc4>
 8007c26:	2353      	movs	r3, #83	; 0x53
 8007c28:	a904      	add	r1, sp, #16
 8007c2a:	185b      	adds	r3, r3, r1
 8007c2c:	212b      	movs	r1, #43	; 0x2b
 8007c2e:	7019      	strb	r1, [r3, #0]
 8007c30:	7833      	ldrb	r3, [r6, #0]
 8007c32:	2b2a      	cmp	r3, #42	; 0x2a
 8007c34:	d016      	beq.n	8007c64 <_svfiprintf_r+0xf8>
 8007c36:	0035      	movs	r5, r6
 8007c38:	2100      	movs	r1, #0
 8007c3a:	200a      	movs	r0, #10
 8007c3c:	68e3      	ldr	r3, [r4, #12]
 8007c3e:	782a      	ldrb	r2, [r5, #0]
 8007c40:	1c6e      	adds	r6, r5, #1
 8007c42:	3a30      	subs	r2, #48	; 0x30
 8007c44:	2a09      	cmp	r2, #9
 8007c46:	d94e      	bls.n	8007ce6 <_svfiprintf_r+0x17a>
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	d111      	bne.n	8007c70 <_svfiprintf_r+0x104>
 8007c4c:	e017      	b.n	8007c7e <_svfiprintf_r+0x112>
 8007c4e:	3501      	adds	r5, #1
 8007c50:	e7b0      	b.n	8007bb4 <_svfiprintf_r+0x48>
 8007c52:	4b41      	ldr	r3, [pc, #260]	; (8007d58 <_svfiprintf_r+0x1ec>)
 8007c54:	6822      	ldr	r2, [r4, #0]
 8007c56:	1ac0      	subs	r0, r0, r3
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4083      	lsls	r3, r0
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	002e      	movs	r6, r5
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	e7ce      	b.n	8007c02 <_svfiprintf_r+0x96>
 8007c64:	9b07      	ldr	r3, [sp, #28]
 8007c66:	1d19      	adds	r1, r3, #4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	9107      	str	r1, [sp, #28]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	db01      	blt.n	8007c74 <_svfiprintf_r+0x108>
 8007c70:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c72:	e004      	b.n	8007c7e <_svfiprintf_r+0x112>
 8007c74:	425b      	negs	r3, r3
 8007c76:	60e3      	str	r3, [r4, #12]
 8007c78:	2302      	movs	r3, #2
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	782b      	ldrb	r3, [r5, #0]
 8007c80:	2b2e      	cmp	r3, #46	; 0x2e
 8007c82:	d10a      	bne.n	8007c9a <_svfiprintf_r+0x12e>
 8007c84:	786b      	ldrb	r3, [r5, #1]
 8007c86:	2b2a      	cmp	r3, #42	; 0x2a
 8007c88:	d135      	bne.n	8007cf6 <_svfiprintf_r+0x18a>
 8007c8a:	9b07      	ldr	r3, [sp, #28]
 8007c8c:	3502      	adds	r5, #2
 8007c8e:	1d1a      	adds	r2, r3, #4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	9207      	str	r2, [sp, #28]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	db2b      	blt.n	8007cf0 <_svfiprintf_r+0x184>
 8007c98:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9a:	4e30      	ldr	r6, [pc, #192]	; (8007d5c <_svfiprintf_r+0x1f0>)
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	0030      	movs	r0, r6
 8007ca0:	7829      	ldrb	r1, [r5, #0]
 8007ca2:	f000 fe43 	bl	800892c <memchr>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d006      	beq.n	8007cb8 <_svfiprintf_r+0x14c>
 8007caa:	2340      	movs	r3, #64	; 0x40
 8007cac:	1b80      	subs	r0, r0, r6
 8007cae:	4083      	lsls	r3, r0
 8007cb0:	6822      	ldr	r2, [r4, #0]
 8007cb2:	3501      	adds	r5, #1
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	7829      	ldrb	r1, [r5, #0]
 8007cba:	2206      	movs	r2, #6
 8007cbc:	4828      	ldr	r0, [pc, #160]	; (8007d60 <_svfiprintf_r+0x1f4>)
 8007cbe:	1c6e      	adds	r6, r5, #1
 8007cc0:	7621      	strb	r1, [r4, #24]
 8007cc2:	f000 fe33 	bl	800892c <memchr>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d03c      	beq.n	8007d44 <_svfiprintf_r+0x1d8>
 8007cca:	4b26      	ldr	r3, [pc, #152]	; (8007d64 <_svfiprintf_r+0x1f8>)
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d125      	bne.n	8007d1c <_svfiprintf_r+0x1b0>
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	9b07      	ldr	r3, [sp, #28]
 8007cd4:	3307      	adds	r3, #7
 8007cd6:	4393      	bics	r3, r2
 8007cd8:	3308      	adds	r3, #8
 8007cda:	9307      	str	r3, [sp, #28]
 8007cdc:	6963      	ldr	r3, [r4, #20]
 8007cde:	9a04      	ldr	r2, [sp, #16]
 8007ce0:	189b      	adds	r3, r3, r2
 8007ce2:	6163      	str	r3, [r4, #20]
 8007ce4:	e765      	b.n	8007bb2 <_svfiprintf_r+0x46>
 8007ce6:	4343      	muls	r3, r0
 8007ce8:	0035      	movs	r5, r6
 8007cea:	2101      	movs	r1, #1
 8007cec:	189b      	adds	r3, r3, r2
 8007cee:	e7a6      	b.n	8007c3e <_svfiprintf_r+0xd2>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	425b      	negs	r3, r3
 8007cf4:	e7d0      	b.n	8007c98 <_svfiprintf_r+0x12c>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	200a      	movs	r0, #10
 8007cfa:	001a      	movs	r2, r3
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	7829      	ldrb	r1, [r5, #0]
 8007d02:	1c6e      	adds	r6, r5, #1
 8007d04:	3930      	subs	r1, #48	; 0x30
 8007d06:	2909      	cmp	r1, #9
 8007d08:	d903      	bls.n	8007d12 <_svfiprintf_r+0x1a6>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0c5      	beq.n	8007c9a <_svfiprintf_r+0x12e>
 8007d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d10:	e7c3      	b.n	8007c9a <_svfiprintf_r+0x12e>
 8007d12:	4342      	muls	r2, r0
 8007d14:	0035      	movs	r5, r6
 8007d16:	2301      	movs	r3, #1
 8007d18:	1852      	adds	r2, r2, r1
 8007d1a:	e7f1      	b.n	8007d00 <_svfiprintf_r+0x194>
 8007d1c:	ab07      	add	r3, sp, #28
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	003a      	movs	r2, r7
 8007d22:	0021      	movs	r1, r4
 8007d24:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <_svfiprintf_r+0x1fc>)
 8007d26:	9803      	ldr	r0, [sp, #12]
 8007d28:	e000      	b.n	8007d2c <_svfiprintf_r+0x1c0>
 8007d2a:	bf00      	nop
 8007d2c:	9004      	str	r0, [sp, #16]
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	3301      	adds	r3, #1
 8007d32:	d1d3      	bne.n	8007cdc <_svfiprintf_r+0x170>
 8007d34:	89bb      	ldrh	r3, [r7, #12]
 8007d36:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d38:	065b      	lsls	r3, r3, #25
 8007d3a:	d400      	bmi.n	8007d3e <_svfiprintf_r+0x1d2>
 8007d3c:	e72d      	b.n	8007b9a <_svfiprintf_r+0x2e>
 8007d3e:	2001      	movs	r0, #1
 8007d40:	4240      	negs	r0, r0
 8007d42:	e72a      	b.n	8007b9a <_svfiprintf_r+0x2e>
 8007d44:	ab07      	add	r3, sp, #28
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	003a      	movs	r2, r7
 8007d4a:	0021      	movs	r1, r4
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <_svfiprintf_r+0x1fc>)
 8007d4e:	9803      	ldr	r0, [sp, #12]
 8007d50:	f000 f9de 	bl	8008110 <_printf_i>
 8007d54:	e7ea      	b.n	8007d2c <_svfiprintf_r+0x1c0>
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	0800907c 	.word	0x0800907c
 8007d5c:	08009082 	.word	0x08009082
 8007d60:	08009086 	.word	0x08009086
 8007d64:	00000000 	.word	0x00000000
 8007d68:	08007aa9 	.word	0x08007aa9

08007d6c <__sfputc_r>:
 8007d6c:	6893      	ldr	r3, [r2, #8]
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	3b01      	subs	r3, #1
 8007d72:	6093      	str	r3, [r2, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da04      	bge.n	8007d82 <__sfputc_r+0x16>
 8007d78:	6994      	ldr	r4, [r2, #24]
 8007d7a:	42a3      	cmp	r3, r4
 8007d7c:	db07      	blt.n	8007d8e <__sfputc_r+0x22>
 8007d7e:	290a      	cmp	r1, #10
 8007d80:	d005      	beq.n	8007d8e <__sfputc_r+0x22>
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	1c58      	adds	r0, r3, #1
 8007d86:	6010      	str	r0, [r2, #0]
 8007d88:	7019      	strb	r1, [r3, #0]
 8007d8a:	0008      	movs	r0, r1
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	f000 fb47 	bl	8008420 <__swbuf_r>
 8007d92:	0001      	movs	r1, r0
 8007d94:	e7f9      	b.n	8007d8a <__sfputc_r+0x1e>

08007d96 <__sfputs_r>:
 8007d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d98:	0006      	movs	r6, r0
 8007d9a:	000f      	movs	r7, r1
 8007d9c:	0014      	movs	r4, r2
 8007d9e:	18d5      	adds	r5, r2, r3
 8007da0:	42ac      	cmp	r4, r5
 8007da2:	d101      	bne.n	8007da8 <__sfputs_r+0x12>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e007      	b.n	8007db8 <__sfputs_r+0x22>
 8007da8:	7821      	ldrb	r1, [r4, #0]
 8007daa:	003a      	movs	r2, r7
 8007dac:	0030      	movs	r0, r6
 8007dae:	f7ff ffdd 	bl	8007d6c <__sfputc_r>
 8007db2:	3401      	adds	r4, #1
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d1f3      	bne.n	8007da0 <__sfputs_r+0xa>
 8007db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dbc <_vfiprintf_r>:
 8007dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dbe:	b0a1      	sub	sp, #132	; 0x84
 8007dc0:	0006      	movs	r6, r0
 8007dc2:	000c      	movs	r4, r1
 8007dc4:	001f      	movs	r7, r3
 8007dc6:	9203      	str	r2, [sp, #12]
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d004      	beq.n	8007dd6 <_vfiprintf_r+0x1a>
 8007dcc:	6983      	ldr	r3, [r0, #24]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <_vfiprintf_r+0x1a>
 8007dd2:	f7fe fca9 	bl	8006728 <__sinit>
 8007dd6:	4b8e      	ldr	r3, [pc, #568]	; (8008010 <_vfiprintf_r+0x254>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d11c      	bne.n	8007e16 <_vfiprintf_r+0x5a>
 8007ddc:	6874      	ldr	r4, [r6, #4]
 8007dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de0:	07db      	lsls	r3, r3, #31
 8007de2:	d405      	bmi.n	8007df0 <_vfiprintf_r+0x34>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	059b      	lsls	r3, r3, #22
 8007de8:	d402      	bmi.n	8007df0 <_vfiprintf_r+0x34>
 8007dea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dec:	f7ff f8b1 	bl	8006f52 <__retarget_lock_acquire_recursive>
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	071b      	lsls	r3, r3, #28
 8007df4:	d502      	bpl.n	8007dfc <_vfiprintf_r+0x40>
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d11d      	bne.n	8007e38 <_vfiprintf_r+0x7c>
 8007dfc:	0021      	movs	r1, r4
 8007dfe:	0030      	movs	r0, r6
 8007e00:	f000 fb86 	bl	8008510 <__swsetup_r>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d017      	beq.n	8007e38 <_vfiprintf_r+0x7c>
 8007e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e0a:	07db      	lsls	r3, r3, #31
 8007e0c:	d50d      	bpl.n	8007e2a <_vfiprintf_r+0x6e>
 8007e0e:	2001      	movs	r0, #1
 8007e10:	4240      	negs	r0, r0
 8007e12:	b021      	add	sp, #132	; 0x84
 8007e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e16:	4b7f      	ldr	r3, [pc, #508]	; (8008014 <_vfiprintf_r+0x258>)
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	d101      	bne.n	8007e20 <_vfiprintf_r+0x64>
 8007e1c:	68b4      	ldr	r4, [r6, #8]
 8007e1e:	e7de      	b.n	8007dde <_vfiprintf_r+0x22>
 8007e20:	4b7d      	ldr	r3, [pc, #500]	; (8008018 <_vfiprintf_r+0x25c>)
 8007e22:	429c      	cmp	r4, r3
 8007e24:	d1db      	bne.n	8007dde <_vfiprintf_r+0x22>
 8007e26:	68f4      	ldr	r4, [r6, #12]
 8007e28:	e7d9      	b.n	8007dde <_vfiprintf_r+0x22>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	059b      	lsls	r3, r3, #22
 8007e2e:	d4ee      	bmi.n	8007e0e <_vfiprintf_r+0x52>
 8007e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e32:	f7ff f88f 	bl	8006f54 <__retarget_lock_release_recursive>
 8007e36:	e7ea      	b.n	8007e0e <_vfiprintf_r+0x52>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	ad08      	add	r5, sp, #32
 8007e3c:	616b      	str	r3, [r5, #20]
 8007e3e:	3320      	adds	r3, #32
 8007e40:	766b      	strb	r3, [r5, #25]
 8007e42:	3310      	adds	r3, #16
 8007e44:	76ab      	strb	r3, [r5, #26]
 8007e46:	9707      	str	r7, [sp, #28]
 8007e48:	9f03      	ldr	r7, [sp, #12]
 8007e4a:	783b      	ldrb	r3, [r7, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <_vfiprintf_r+0x98>
 8007e50:	2b25      	cmp	r3, #37	; 0x25
 8007e52:	d14e      	bne.n	8007ef2 <_vfiprintf_r+0x136>
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	1afb      	subs	r3, r7, r3
 8007e58:	9305      	str	r3, [sp, #20]
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	429f      	cmp	r7, r3
 8007e5e:	d00d      	beq.n	8007e7c <_vfiprintf_r+0xc0>
 8007e60:	9b05      	ldr	r3, [sp, #20]
 8007e62:	0021      	movs	r1, r4
 8007e64:	0030      	movs	r0, r6
 8007e66:	9a03      	ldr	r2, [sp, #12]
 8007e68:	f7ff ff95 	bl	8007d96 <__sfputs_r>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d100      	bne.n	8007e72 <_vfiprintf_r+0xb6>
 8007e70:	e0b5      	b.n	8007fde <_vfiprintf_r+0x222>
 8007e72:	696a      	ldr	r2, [r5, #20]
 8007e74:	9b05      	ldr	r3, [sp, #20]
 8007e76:	4694      	mov	ip, r2
 8007e78:	4463      	add	r3, ip
 8007e7a:	616b      	str	r3, [r5, #20]
 8007e7c:	783b      	ldrb	r3, [r7, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d100      	bne.n	8007e84 <_vfiprintf_r+0xc8>
 8007e82:	e0ac      	b.n	8007fde <_vfiprintf_r+0x222>
 8007e84:	2201      	movs	r2, #1
 8007e86:	1c7b      	adds	r3, r7, #1
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4252      	negs	r2, r2
 8007e8e:	606a      	str	r2, [r5, #4]
 8007e90:	a904      	add	r1, sp, #16
 8007e92:	3254      	adds	r2, #84	; 0x54
 8007e94:	1852      	adds	r2, r2, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	60eb      	str	r3, [r5, #12]
 8007e9a:	60ab      	str	r3, [r5, #8]
 8007e9c:	7013      	strb	r3, [r2, #0]
 8007e9e:	65ab      	str	r3, [r5, #88]	; 0x58
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	2205      	movs	r2, #5
 8007ea4:	7819      	ldrb	r1, [r3, #0]
 8007ea6:	485d      	ldr	r0, [pc, #372]	; (800801c <_vfiprintf_r+0x260>)
 8007ea8:	f000 fd40 	bl	800892c <memchr>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	1c5f      	adds	r7, r3, #1
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d120      	bne.n	8007ef6 <_vfiprintf_r+0x13a>
 8007eb4:	682a      	ldr	r2, [r5, #0]
 8007eb6:	06d3      	lsls	r3, r2, #27
 8007eb8:	d504      	bpl.n	8007ec4 <_vfiprintf_r+0x108>
 8007eba:	2353      	movs	r3, #83	; 0x53
 8007ebc:	a904      	add	r1, sp, #16
 8007ebe:	185b      	adds	r3, r3, r1
 8007ec0:	2120      	movs	r1, #32
 8007ec2:	7019      	strb	r1, [r3, #0]
 8007ec4:	0713      	lsls	r3, r2, #28
 8007ec6:	d504      	bpl.n	8007ed2 <_vfiprintf_r+0x116>
 8007ec8:	2353      	movs	r3, #83	; 0x53
 8007eca:	a904      	add	r1, sp, #16
 8007ecc:	185b      	adds	r3, r3, r1
 8007ece:	212b      	movs	r1, #43	; 0x2b
 8007ed0:	7019      	strb	r1, [r3, #0]
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed8:	d016      	beq.n	8007f08 <_vfiprintf_r+0x14c>
 8007eda:	2100      	movs	r1, #0
 8007edc:	68eb      	ldr	r3, [r5, #12]
 8007ede:	9f03      	ldr	r7, [sp, #12]
 8007ee0:	783a      	ldrb	r2, [r7, #0]
 8007ee2:	1c78      	adds	r0, r7, #1
 8007ee4:	3a30      	subs	r2, #48	; 0x30
 8007ee6:	4684      	mov	ip, r0
 8007ee8:	2a09      	cmp	r2, #9
 8007eea:	d94f      	bls.n	8007f8c <_vfiprintf_r+0x1d0>
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d111      	bne.n	8007f14 <_vfiprintf_r+0x158>
 8007ef0:	e017      	b.n	8007f22 <_vfiprintf_r+0x166>
 8007ef2:	3701      	adds	r7, #1
 8007ef4:	e7a9      	b.n	8007e4a <_vfiprintf_r+0x8e>
 8007ef6:	4b49      	ldr	r3, [pc, #292]	; (800801c <_vfiprintf_r+0x260>)
 8007ef8:	682a      	ldr	r2, [r5, #0]
 8007efa:	1ac0      	subs	r0, r0, r3
 8007efc:	2301      	movs	r3, #1
 8007efe:	4083      	lsls	r3, r0
 8007f00:	4313      	orrs	r3, r2
 8007f02:	602b      	str	r3, [r5, #0]
 8007f04:	9703      	str	r7, [sp, #12]
 8007f06:	e7cb      	b.n	8007ea0 <_vfiprintf_r+0xe4>
 8007f08:	9b07      	ldr	r3, [sp, #28]
 8007f0a:	1d19      	adds	r1, r3, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	9107      	str	r1, [sp, #28]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	db01      	blt.n	8007f18 <_vfiprintf_r+0x15c>
 8007f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f16:	e004      	b.n	8007f22 <_vfiprintf_r+0x166>
 8007f18:	425b      	negs	r3, r3
 8007f1a:	60eb      	str	r3, [r5, #12]
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	783b      	ldrb	r3, [r7, #0]
 8007f24:	2b2e      	cmp	r3, #46	; 0x2e
 8007f26:	d10a      	bne.n	8007f3e <_vfiprintf_r+0x182>
 8007f28:	787b      	ldrb	r3, [r7, #1]
 8007f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2c:	d137      	bne.n	8007f9e <_vfiprintf_r+0x1e2>
 8007f2e:	9b07      	ldr	r3, [sp, #28]
 8007f30:	3702      	adds	r7, #2
 8007f32:	1d1a      	adds	r2, r3, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	9207      	str	r2, [sp, #28]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	db2d      	blt.n	8007f98 <_vfiprintf_r+0x1dc>
 8007f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3e:	2203      	movs	r2, #3
 8007f40:	7839      	ldrb	r1, [r7, #0]
 8007f42:	4837      	ldr	r0, [pc, #220]	; (8008020 <_vfiprintf_r+0x264>)
 8007f44:	f000 fcf2 	bl	800892c <memchr>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d007      	beq.n	8007f5c <_vfiprintf_r+0x1a0>
 8007f4c:	4b34      	ldr	r3, [pc, #208]	; (8008020 <_vfiprintf_r+0x264>)
 8007f4e:	682a      	ldr	r2, [r5, #0]
 8007f50:	1ac0      	subs	r0, r0, r3
 8007f52:	2340      	movs	r3, #64	; 0x40
 8007f54:	4083      	lsls	r3, r0
 8007f56:	4313      	orrs	r3, r2
 8007f58:	3701      	adds	r7, #1
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	7839      	ldrb	r1, [r7, #0]
 8007f5e:	1c7b      	adds	r3, r7, #1
 8007f60:	2206      	movs	r2, #6
 8007f62:	4830      	ldr	r0, [pc, #192]	; (8008024 <_vfiprintf_r+0x268>)
 8007f64:	9303      	str	r3, [sp, #12]
 8007f66:	7629      	strb	r1, [r5, #24]
 8007f68:	f000 fce0 	bl	800892c <memchr>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d045      	beq.n	8007ffc <_vfiprintf_r+0x240>
 8007f70:	4b2d      	ldr	r3, [pc, #180]	; (8008028 <_vfiprintf_r+0x26c>)
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d127      	bne.n	8007fc6 <_vfiprintf_r+0x20a>
 8007f76:	2207      	movs	r2, #7
 8007f78:	9b07      	ldr	r3, [sp, #28]
 8007f7a:	3307      	adds	r3, #7
 8007f7c:	4393      	bics	r3, r2
 8007f7e:	3308      	adds	r3, #8
 8007f80:	9307      	str	r3, [sp, #28]
 8007f82:	696b      	ldr	r3, [r5, #20]
 8007f84:	9a04      	ldr	r2, [sp, #16]
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	616b      	str	r3, [r5, #20]
 8007f8a:	e75d      	b.n	8007e48 <_vfiprintf_r+0x8c>
 8007f8c:	210a      	movs	r1, #10
 8007f8e:	434b      	muls	r3, r1
 8007f90:	4667      	mov	r7, ip
 8007f92:	189b      	adds	r3, r3, r2
 8007f94:	3909      	subs	r1, #9
 8007f96:	e7a3      	b.n	8007ee0 <_vfiprintf_r+0x124>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	425b      	negs	r3, r3
 8007f9c:	e7ce      	b.n	8007f3c <_vfiprintf_r+0x180>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	001a      	movs	r2, r3
 8007fa2:	3701      	adds	r7, #1
 8007fa4:	606b      	str	r3, [r5, #4]
 8007fa6:	7839      	ldrb	r1, [r7, #0]
 8007fa8:	1c78      	adds	r0, r7, #1
 8007faa:	3930      	subs	r1, #48	; 0x30
 8007fac:	4684      	mov	ip, r0
 8007fae:	2909      	cmp	r1, #9
 8007fb0:	d903      	bls.n	8007fba <_vfiprintf_r+0x1fe>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0c3      	beq.n	8007f3e <_vfiprintf_r+0x182>
 8007fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb8:	e7c1      	b.n	8007f3e <_vfiprintf_r+0x182>
 8007fba:	230a      	movs	r3, #10
 8007fbc:	435a      	muls	r2, r3
 8007fbe:	4667      	mov	r7, ip
 8007fc0:	1852      	adds	r2, r2, r1
 8007fc2:	3b09      	subs	r3, #9
 8007fc4:	e7ef      	b.n	8007fa6 <_vfiprintf_r+0x1ea>
 8007fc6:	ab07      	add	r3, sp, #28
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	0022      	movs	r2, r4
 8007fcc:	0029      	movs	r1, r5
 8007fce:	0030      	movs	r0, r6
 8007fd0:	4b16      	ldr	r3, [pc, #88]	; (800802c <_vfiprintf_r+0x270>)
 8007fd2:	e000      	b.n	8007fd6 <_vfiprintf_r+0x21a>
 8007fd4:	bf00      	nop
 8007fd6:	9004      	str	r0, [sp, #16]
 8007fd8:	9b04      	ldr	r3, [sp, #16]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	d1d1      	bne.n	8007f82 <_vfiprintf_r+0x1c6>
 8007fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fe0:	07db      	lsls	r3, r3, #31
 8007fe2:	d405      	bmi.n	8007ff0 <_vfiprintf_r+0x234>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	059b      	lsls	r3, r3, #22
 8007fe8:	d402      	bmi.n	8007ff0 <_vfiprintf_r+0x234>
 8007fea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fec:	f7fe ffb2 	bl	8006f54 <__retarget_lock_release_recursive>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	065b      	lsls	r3, r3, #25
 8007ff4:	d500      	bpl.n	8007ff8 <_vfiprintf_r+0x23c>
 8007ff6:	e70a      	b.n	8007e0e <_vfiprintf_r+0x52>
 8007ff8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007ffa:	e70a      	b.n	8007e12 <_vfiprintf_r+0x56>
 8007ffc:	ab07      	add	r3, sp, #28
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	0022      	movs	r2, r4
 8008002:	0029      	movs	r1, r5
 8008004:	0030      	movs	r0, r6
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <_vfiprintf_r+0x270>)
 8008008:	f000 f882 	bl	8008110 <_printf_i>
 800800c:	e7e3      	b.n	8007fd6 <_vfiprintf_r+0x21a>
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	08008e3c 	.word	0x08008e3c
 8008014:	08008e5c 	.word	0x08008e5c
 8008018:	08008e1c 	.word	0x08008e1c
 800801c:	0800907c 	.word	0x0800907c
 8008020:	08009082 	.word	0x08009082
 8008024:	08009086 	.word	0x08009086
 8008028:	00000000 	.word	0x00000000
 800802c:	08007d97 	.word	0x08007d97

08008030 <_printf_common>:
 8008030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008032:	0015      	movs	r5, r2
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	688a      	ldr	r2, [r1, #8]
 8008038:	690b      	ldr	r3, [r1, #16]
 800803a:	000c      	movs	r4, r1
 800803c:	9000      	str	r0, [sp, #0]
 800803e:	4293      	cmp	r3, r2
 8008040:	da00      	bge.n	8008044 <_printf_common+0x14>
 8008042:	0013      	movs	r3, r2
 8008044:	0022      	movs	r2, r4
 8008046:	602b      	str	r3, [r5, #0]
 8008048:	3243      	adds	r2, #67	; 0x43
 800804a:	7812      	ldrb	r2, [r2, #0]
 800804c:	2a00      	cmp	r2, #0
 800804e:	d001      	beq.n	8008054 <_printf_common+0x24>
 8008050:	3301      	adds	r3, #1
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	069b      	lsls	r3, r3, #26
 8008058:	d502      	bpl.n	8008060 <_printf_common+0x30>
 800805a:	682b      	ldr	r3, [r5, #0]
 800805c:	3302      	adds	r3, #2
 800805e:	602b      	str	r3, [r5, #0]
 8008060:	6822      	ldr	r2, [r4, #0]
 8008062:	2306      	movs	r3, #6
 8008064:	0017      	movs	r7, r2
 8008066:	401f      	ands	r7, r3
 8008068:	421a      	tst	r2, r3
 800806a:	d027      	beq.n	80080bc <_printf_common+0x8c>
 800806c:	0023      	movs	r3, r4
 800806e:	3343      	adds	r3, #67	; 0x43
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	1e5a      	subs	r2, r3, #1
 8008074:	4193      	sbcs	r3, r2
 8008076:	6822      	ldr	r2, [r4, #0]
 8008078:	0692      	lsls	r2, r2, #26
 800807a:	d430      	bmi.n	80080de <_printf_common+0xae>
 800807c:	0022      	movs	r2, r4
 800807e:	9901      	ldr	r1, [sp, #4]
 8008080:	9800      	ldr	r0, [sp, #0]
 8008082:	9e08      	ldr	r6, [sp, #32]
 8008084:	3243      	adds	r2, #67	; 0x43
 8008086:	47b0      	blx	r6
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d025      	beq.n	80080d8 <_printf_common+0xa8>
 800808c:	2306      	movs	r3, #6
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	682a      	ldr	r2, [r5, #0]
 8008092:	68e1      	ldr	r1, [r4, #12]
 8008094:	2500      	movs	r5, #0
 8008096:	4003      	ands	r3, r0
 8008098:	2b04      	cmp	r3, #4
 800809a:	d103      	bne.n	80080a4 <_printf_common+0x74>
 800809c:	1a8d      	subs	r5, r1, r2
 800809e:	43eb      	mvns	r3, r5
 80080a0:	17db      	asrs	r3, r3, #31
 80080a2:	401d      	ands	r5, r3
 80080a4:	68a3      	ldr	r3, [r4, #8]
 80080a6:	6922      	ldr	r2, [r4, #16]
 80080a8:	4293      	cmp	r3, r2
 80080aa:	dd01      	ble.n	80080b0 <_printf_common+0x80>
 80080ac:	1a9b      	subs	r3, r3, r2
 80080ae:	18ed      	adds	r5, r5, r3
 80080b0:	2700      	movs	r7, #0
 80080b2:	42bd      	cmp	r5, r7
 80080b4:	d120      	bne.n	80080f8 <_printf_common+0xc8>
 80080b6:	2000      	movs	r0, #0
 80080b8:	e010      	b.n	80080dc <_printf_common+0xac>
 80080ba:	3701      	adds	r7, #1
 80080bc:	68e3      	ldr	r3, [r4, #12]
 80080be:	682a      	ldr	r2, [r5, #0]
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	42bb      	cmp	r3, r7
 80080c4:	ddd2      	ble.n	800806c <_printf_common+0x3c>
 80080c6:	0022      	movs	r2, r4
 80080c8:	2301      	movs	r3, #1
 80080ca:	9901      	ldr	r1, [sp, #4]
 80080cc:	9800      	ldr	r0, [sp, #0]
 80080ce:	9e08      	ldr	r6, [sp, #32]
 80080d0:	3219      	adds	r2, #25
 80080d2:	47b0      	blx	r6
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d1f0      	bne.n	80080ba <_printf_common+0x8a>
 80080d8:	2001      	movs	r0, #1
 80080da:	4240      	negs	r0, r0
 80080dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080de:	2030      	movs	r0, #48	; 0x30
 80080e0:	18e1      	adds	r1, r4, r3
 80080e2:	3143      	adds	r1, #67	; 0x43
 80080e4:	7008      	strb	r0, [r1, #0]
 80080e6:	0021      	movs	r1, r4
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	3145      	adds	r1, #69	; 0x45
 80080ec:	7809      	ldrb	r1, [r1, #0]
 80080ee:	18a2      	adds	r2, r4, r2
 80080f0:	3243      	adds	r2, #67	; 0x43
 80080f2:	3302      	adds	r3, #2
 80080f4:	7011      	strb	r1, [r2, #0]
 80080f6:	e7c1      	b.n	800807c <_printf_common+0x4c>
 80080f8:	0022      	movs	r2, r4
 80080fa:	2301      	movs	r3, #1
 80080fc:	9901      	ldr	r1, [sp, #4]
 80080fe:	9800      	ldr	r0, [sp, #0]
 8008100:	9e08      	ldr	r6, [sp, #32]
 8008102:	321a      	adds	r2, #26
 8008104:	47b0      	blx	r6
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d0e6      	beq.n	80080d8 <_printf_common+0xa8>
 800810a:	3701      	adds	r7, #1
 800810c:	e7d1      	b.n	80080b2 <_printf_common+0x82>
	...

08008110 <_printf_i>:
 8008110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008112:	b08b      	sub	sp, #44	; 0x2c
 8008114:	9206      	str	r2, [sp, #24]
 8008116:	000a      	movs	r2, r1
 8008118:	3243      	adds	r2, #67	; 0x43
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	9005      	str	r0, [sp, #20]
 800811e:	9204      	str	r2, [sp, #16]
 8008120:	7e0a      	ldrb	r2, [r1, #24]
 8008122:	000c      	movs	r4, r1
 8008124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008126:	2a78      	cmp	r2, #120	; 0x78
 8008128:	d807      	bhi.n	800813a <_printf_i+0x2a>
 800812a:	2a62      	cmp	r2, #98	; 0x62
 800812c:	d809      	bhi.n	8008142 <_printf_i+0x32>
 800812e:	2a00      	cmp	r2, #0
 8008130:	d100      	bne.n	8008134 <_printf_i+0x24>
 8008132:	e0c1      	b.n	80082b8 <_printf_i+0x1a8>
 8008134:	2a58      	cmp	r2, #88	; 0x58
 8008136:	d100      	bne.n	800813a <_printf_i+0x2a>
 8008138:	e08c      	b.n	8008254 <_printf_i+0x144>
 800813a:	0026      	movs	r6, r4
 800813c:	3642      	adds	r6, #66	; 0x42
 800813e:	7032      	strb	r2, [r6, #0]
 8008140:	e022      	b.n	8008188 <_printf_i+0x78>
 8008142:	0010      	movs	r0, r2
 8008144:	3863      	subs	r0, #99	; 0x63
 8008146:	2815      	cmp	r0, #21
 8008148:	d8f7      	bhi.n	800813a <_printf_i+0x2a>
 800814a:	f7f7 ffef 	bl	800012c <__gnu_thumb1_case_shi>
 800814e:	0016      	.short	0x0016
 8008150:	fff6001f 	.word	0xfff6001f
 8008154:	fff6fff6 	.word	0xfff6fff6
 8008158:	001ffff6 	.word	0x001ffff6
 800815c:	fff6fff6 	.word	0xfff6fff6
 8008160:	fff6fff6 	.word	0xfff6fff6
 8008164:	003600a8 	.word	0x003600a8
 8008168:	fff6009a 	.word	0xfff6009a
 800816c:	00b9fff6 	.word	0x00b9fff6
 8008170:	0036fff6 	.word	0x0036fff6
 8008174:	fff6fff6 	.word	0xfff6fff6
 8008178:	009e      	.short	0x009e
 800817a:	0026      	movs	r6, r4
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	3642      	adds	r6, #66	; 0x42
 8008180:	1d11      	adds	r1, r2, #4
 8008182:	6019      	str	r1, [r3, #0]
 8008184:	6813      	ldr	r3, [r2, #0]
 8008186:	7033      	strb	r3, [r6, #0]
 8008188:	2301      	movs	r3, #1
 800818a:	e0a7      	b.n	80082dc <_printf_i+0x1cc>
 800818c:	6808      	ldr	r0, [r1, #0]
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	1d0a      	adds	r2, r1, #4
 8008192:	0605      	lsls	r5, r0, #24
 8008194:	d50b      	bpl.n	80081ae <_printf_i+0x9e>
 8008196:	680d      	ldr	r5, [r1, #0]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	2d00      	cmp	r5, #0
 800819c:	da03      	bge.n	80081a6 <_printf_i+0x96>
 800819e:	232d      	movs	r3, #45	; 0x2d
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	426d      	negs	r5, r5
 80081a4:	7013      	strb	r3, [r2, #0]
 80081a6:	4b61      	ldr	r3, [pc, #388]	; (800832c <_printf_i+0x21c>)
 80081a8:	270a      	movs	r7, #10
 80081aa:	9303      	str	r3, [sp, #12]
 80081ac:	e01b      	b.n	80081e6 <_printf_i+0xd6>
 80081ae:	680d      	ldr	r5, [r1, #0]
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	0641      	lsls	r1, r0, #25
 80081b4:	d5f1      	bpl.n	800819a <_printf_i+0x8a>
 80081b6:	b22d      	sxth	r5, r5
 80081b8:	e7ef      	b.n	800819a <_printf_i+0x8a>
 80081ba:	680d      	ldr	r5, [r1, #0]
 80081bc:	6819      	ldr	r1, [r3, #0]
 80081be:	1d08      	adds	r0, r1, #4
 80081c0:	6018      	str	r0, [r3, #0]
 80081c2:	062e      	lsls	r6, r5, #24
 80081c4:	d501      	bpl.n	80081ca <_printf_i+0xba>
 80081c6:	680d      	ldr	r5, [r1, #0]
 80081c8:	e003      	b.n	80081d2 <_printf_i+0xc2>
 80081ca:	066d      	lsls	r5, r5, #25
 80081cc:	d5fb      	bpl.n	80081c6 <_printf_i+0xb6>
 80081ce:	680d      	ldr	r5, [r1, #0]
 80081d0:	b2ad      	uxth	r5, r5
 80081d2:	4b56      	ldr	r3, [pc, #344]	; (800832c <_printf_i+0x21c>)
 80081d4:	2708      	movs	r7, #8
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	2a6f      	cmp	r2, #111	; 0x6f
 80081da:	d000      	beq.n	80081de <_printf_i+0xce>
 80081dc:	3702      	adds	r7, #2
 80081de:	0023      	movs	r3, r4
 80081e0:	2200      	movs	r2, #0
 80081e2:	3343      	adds	r3, #67	; 0x43
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	6863      	ldr	r3, [r4, #4]
 80081e8:	60a3      	str	r3, [r4, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	db03      	blt.n	80081f6 <_printf_i+0xe6>
 80081ee:	2204      	movs	r2, #4
 80081f0:	6821      	ldr	r1, [r4, #0]
 80081f2:	4391      	bics	r1, r2
 80081f4:	6021      	str	r1, [r4, #0]
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	d102      	bne.n	8008200 <_printf_i+0xf0>
 80081fa:	9e04      	ldr	r6, [sp, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <_printf_i+0x10a>
 8008200:	9e04      	ldr	r6, [sp, #16]
 8008202:	0028      	movs	r0, r5
 8008204:	0039      	movs	r1, r7
 8008206:	f7f8 f821 	bl	800024c <__aeabi_uidivmod>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	3e01      	subs	r6, #1
 800820e:	5c5b      	ldrb	r3, [r3, r1]
 8008210:	7033      	strb	r3, [r6, #0]
 8008212:	002b      	movs	r3, r5
 8008214:	0005      	movs	r5, r0
 8008216:	429f      	cmp	r7, r3
 8008218:	d9f3      	bls.n	8008202 <_printf_i+0xf2>
 800821a:	2f08      	cmp	r7, #8
 800821c:	d109      	bne.n	8008232 <_printf_i+0x122>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	07db      	lsls	r3, r3, #31
 8008222:	d506      	bpl.n	8008232 <_printf_i+0x122>
 8008224:	6863      	ldr	r3, [r4, #4]
 8008226:	6922      	ldr	r2, [r4, #16]
 8008228:	4293      	cmp	r3, r2
 800822a:	dc02      	bgt.n	8008232 <_printf_i+0x122>
 800822c:	2330      	movs	r3, #48	; 0x30
 800822e:	3e01      	subs	r6, #1
 8008230:	7033      	strb	r3, [r6, #0]
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	1b9b      	subs	r3, r3, r6
 8008236:	6123      	str	r3, [r4, #16]
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	0021      	movs	r1, r4
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	9805      	ldr	r0, [sp, #20]
 8008240:	9b06      	ldr	r3, [sp, #24]
 8008242:	aa09      	add	r2, sp, #36	; 0x24
 8008244:	f7ff fef4 	bl	8008030 <_printf_common>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d14c      	bne.n	80082e6 <_printf_i+0x1d6>
 800824c:	2001      	movs	r0, #1
 800824e:	4240      	negs	r0, r0
 8008250:	b00b      	add	sp, #44	; 0x2c
 8008252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008254:	3145      	adds	r1, #69	; 0x45
 8008256:	700a      	strb	r2, [r1, #0]
 8008258:	4a34      	ldr	r2, [pc, #208]	; (800832c <_printf_i+0x21c>)
 800825a:	9203      	str	r2, [sp, #12]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	6821      	ldr	r1, [r4, #0]
 8008260:	ca20      	ldmia	r2!, {r5}
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	0608      	lsls	r0, r1, #24
 8008266:	d516      	bpl.n	8008296 <_printf_i+0x186>
 8008268:	07cb      	lsls	r3, r1, #31
 800826a:	d502      	bpl.n	8008272 <_printf_i+0x162>
 800826c:	2320      	movs	r3, #32
 800826e:	4319      	orrs	r1, r3
 8008270:	6021      	str	r1, [r4, #0]
 8008272:	2710      	movs	r7, #16
 8008274:	2d00      	cmp	r5, #0
 8008276:	d1b2      	bne.n	80081de <_printf_i+0xce>
 8008278:	2320      	movs	r3, #32
 800827a:	6822      	ldr	r2, [r4, #0]
 800827c:	439a      	bics	r2, r3
 800827e:	6022      	str	r2, [r4, #0]
 8008280:	e7ad      	b.n	80081de <_printf_i+0xce>
 8008282:	2220      	movs	r2, #32
 8008284:	6809      	ldr	r1, [r1, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	6022      	str	r2, [r4, #0]
 800828a:	0022      	movs	r2, r4
 800828c:	2178      	movs	r1, #120	; 0x78
 800828e:	3245      	adds	r2, #69	; 0x45
 8008290:	7011      	strb	r1, [r2, #0]
 8008292:	4a27      	ldr	r2, [pc, #156]	; (8008330 <_printf_i+0x220>)
 8008294:	e7e1      	b.n	800825a <_printf_i+0x14a>
 8008296:	0648      	lsls	r0, r1, #25
 8008298:	d5e6      	bpl.n	8008268 <_printf_i+0x158>
 800829a:	b2ad      	uxth	r5, r5
 800829c:	e7e4      	b.n	8008268 <_printf_i+0x158>
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	680d      	ldr	r5, [r1, #0]
 80082a2:	1d10      	adds	r0, r2, #4
 80082a4:	6949      	ldr	r1, [r1, #20]
 80082a6:	6018      	str	r0, [r3, #0]
 80082a8:	6813      	ldr	r3, [r2, #0]
 80082aa:	062e      	lsls	r6, r5, #24
 80082ac:	d501      	bpl.n	80082b2 <_printf_i+0x1a2>
 80082ae:	6019      	str	r1, [r3, #0]
 80082b0:	e002      	b.n	80082b8 <_printf_i+0x1a8>
 80082b2:	066d      	lsls	r5, r5, #25
 80082b4:	d5fb      	bpl.n	80082ae <_printf_i+0x19e>
 80082b6:	8019      	strh	r1, [r3, #0]
 80082b8:	2300      	movs	r3, #0
 80082ba:	9e04      	ldr	r6, [sp, #16]
 80082bc:	6123      	str	r3, [r4, #16]
 80082be:	e7bb      	b.n	8008238 <_printf_i+0x128>
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	1d11      	adds	r1, r2, #4
 80082c4:	6019      	str	r1, [r3, #0]
 80082c6:	6816      	ldr	r6, [r2, #0]
 80082c8:	2100      	movs	r1, #0
 80082ca:	0030      	movs	r0, r6
 80082cc:	6862      	ldr	r2, [r4, #4]
 80082ce:	f000 fb2d 	bl	800892c <memchr>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d001      	beq.n	80082da <_printf_i+0x1ca>
 80082d6:	1b80      	subs	r0, r0, r6
 80082d8:	6060      	str	r0, [r4, #4]
 80082da:	6863      	ldr	r3, [r4, #4]
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	2300      	movs	r3, #0
 80082e0:	9a04      	ldr	r2, [sp, #16]
 80082e2:	7013      	strb	r3, [r2, #0]
 80082e4:	e7a8      	b.n	8008238 <_printf_i+0x128>
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	0032      	movs	r2, r6
 80082ea:	9906      	ldr	r1, [sp, #24]
 80082ec:	9805      	ldr	r0, [sp, #20]
 80082ee:	9d07      	ldr	r5, [sp, #28]
 80082f0:	47a8      	blx	r5
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d0aa      	beq.n	800824c <_printf_i+0x13c>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	079b      	lsls	r3, r3, #30
 80082fa:	d415      	bmi.n	8008328 <_printf_i+0x218>
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	68e0      	ldr	r0, [r4, #12]
 8008300:	4298      	cmp	r0, r3
 8008302:	daa5      	bge.n	8008250 <_printf_i+0x140>
 8008304:	0018      	movs	r0, r3
 8008306:	e7a3      	b.n	8008250 <_printf_i+0x140>
 8008308:	0022      	movs	r2, r4
 800830a:	2301      	movs	r3, #1
 800830c:	9906      	ldr	r1, [sp, #24]
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	9e07      	ldr	r6, [sp, #28]
 8008312:	3219      	adds	r2, #25
 8008314:	47b0      	blx	r6
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d098      	beq.n	800824c <_printf_i+0x13c>
 800831a:	3501      	adds	r5, #1
 800831c:	68e3      	ldr	r3, [r4, #12]
 800831e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	42ab      	cmp	r3, r5
 8008324:	dcf0      	bgt.n	8008308 <_printf_i+0x1f8>
 8008326:	e7e9      	b.n	80082fc <_printf_i+0x1ec>
 8008328:	2500      	movs	r5, #0
 800832a:	e7f7      	b.n	800831c <_printf_i+0x20c>
 800832c:	0800908d 	.word	0x0800908d
 8008330:	0800909e 	.word	0x0800909e

08008334 <nan>:
 8008334:	2000      	movs	r0, #0
 8008336:	4901      	ldr	r1, [pc, #4]	; (800833c <nan+0x8>)
 8008338:	4770      	bx	lr
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	7ff80000 	.word	0x7ff80000

08008340 <_sbrk_r>:
 8008340:	2300      	movs	r3, #0
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	4d06      	ldr	r5, [pc, #24]	; (8008360 <_sbrk_r+0x20>)
 8008346:	0004      	movs	r4, r0
 8008348:	0008      	movs	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7fa fae0 	bl	8002910 <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d103      	bne.n	800835c <_sbrk_r+0x1c>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d000      	beq.n	800835c <_sbrk_r+0x1c>
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	bd70      	pop	{r4, r5, r6, pc}
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	20000320 	.word	0x20000320

08008364 <__sread>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	000c      	movs	r4, r1
 8008368:	250e      	movs	r5, #14
 800836a:	5f49      	ldrsh	r1, [r1, r5]
 800836c:	f000 fb86 	bl	8008a7c <_read_r>
 8008370:	2800      	cmp	r0, #0
 8008372:	db03      	blt.n	800837c <__sread+0x18>
 8008374:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008376:	181b      	adds	r3, r3, r0
 8008378:	6563      	str	r3, [r4, #84]	; 0x54
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	4a02      	ldr	r2, [pc, #8]	; (8008388 <__sread+0x24>)
 8008380:	4013      	ands	r3, r2
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	e7f9      	b.n	800837a <__sread+0x16>
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	ffffefff 	.word	0xffffefff

0800838c <__swrite>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	001f      	movs	r7, r3
 8008390:	898b      	ldrh	r3, [r1, #12]
 8008392:	0005      	movs	r5, r0
 8008394:	000c      	movs	r4, r1
 8008396:	0016      	movs	r6, r2
 8008398:	05db      	lsls	r3, r3, #23
 800839a:	d505      	bpl.n	80083a8 <__swrite+0x1c>
 800839c:	230e      	movs	r3, #14
 800839e:	5ec9      	ldrsh	r1, [r1, r3]
 80083a0:	2200      	movs	r2, #0
 80083a2:	2302      	movs	r3, #2
 80083a4:	f000 fa38 	bl	8008818 <_lseek_r>
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	4a05      	ldr	r2, [pc, #20]	; (80083c0 <__swrite+0x34>)
 80083ac:	0028      	movs	r0, r5
 80083ae:	4013      	ands	r3, r2
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	0032      	movs	r2, r6
 80083b4:	230e      	movs	r3, #14
 80083b6:	5ee1      	ldrsh	r1, [r4, r3]
 80083b8:	003b      	movs	r3, r7
 80083ba:	f000 f895 	bl	80084e8 <_write_r>
 80083be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c0:	ffffefff 	.word	0xffffefff

080083c4 <__sseek>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	000c      	movs	r4, r1
 80083c8:	250e      	movs	r5, #14
 80083ca:	5f49      	ldrsh	r1, [r1, r5]
 80083cc:	f000 fa24 	bl	8008818 <_lseek_r>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	1c42      	adds	r2, r0, #1
 80083d4:	d103      	bne.n	80083de <__sseek+0x1a>
 80083d6:	4a05      	ldr	r2, [pc, #20]	; (80083ec <__sseek+0x28>)
 80083d8:	4013      	ands	r3, r2
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	bd70      	pop	{r4, r5, r6, pc}
 80083de:	2280      	movs	r2, #128	; 0x80
 80083e0:	0152      	lsls	r2, r2, #5
 80083e2:	4313      	orrs	r3, r2
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	6560      	str	r0, [r4, #84]	; 0x54
 80083e8:	e7f8      	b.n	80083dc <__sseek+0x18>
 80083ea:	46c0      	nop			; (mov r8, r8)
 80083ec:	ffffefff 	.word	0xffffefff

080083f0 <__sclose>:
 80083f0:	b510      	push	{r4, lr}
 80083f2:	230e      	movs	r3, #14
 80083f4:	5ec9      	ldrsh	r1, [r1, r3]
 80083f6:	f000 f921 	bl	800863c <_close_r>
 80083fa:	bd10      	pop	{r4, pc}

080083fc <strncmp>:
 80083fc:	b530      	push	{r4, r5, lr}
 80083fe:	0005      	movs	r5, r0
 8008400:	1e10      	subs	r0, r2, #0
 8008402:	d008      	beq.n	8008416 <strncmp+0x1a>
 8008404:	2400      	movs	r4, #0
 8008406:	3a01      	subs	r2, #1
 8008408:	5d2b      	ldrb	r3, [r5, r4]
 800840a:	5d08      	ldrb	r0, [r1, r4]
 800840c:	4283      	cmp	r3, r0
 800840e:	d101      	bne.n	8008414 <strncmp+0x18>
 8008410:	4294      	cmp	r4, r2
 8008412:	d101      	bne.n	8008418 <strncmp+0x1c>
 8008414:	1a18      	subs	r0, r3, r0
 8008416:	bd30      	pop	{r4, r5, pc}
 8008418:	3401      	adds	r4, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1f4      	bne.n	8008408 <strncmp+0xc>
 800841e:	e7f9      	b.n	8008414 <strncmp+0x18>

08008420 <__swbuf_r>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	0005      	movs	r5, r0
 8008424:	000e      	movs	r6, r1
 8008426:	0014      	movs	r4, r2
 8008428:	2800      	cmp	r0, #0
 800842a:	d004      	beq.n	8008436 <__swbuf_r+0x16>
 800842c:	6983      	ldr	r3, [r0, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <__swbuf_r+0x16>
 8008432:	f7fe f979 	bl	8006728 <__sinit>
 8008436:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <__swbuf_r+0xa0>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d12e      	bne.n	800849a <__swbuf_r+0x7a>
 800843c:	686c      	ldr	r4, [r5, #4]
 800843e:	69a3      	ldr	r3, [r4, #24]
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	071b      	lsls	r3, r3, #28
 8008446:	d532      	bpl.n	80084ae <__swbuf_r+0x8e>
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d02f      	beq.n	80084ae <__swbuf_r+0x8e>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	6922      	ldr	r2, [r4, #16]
 8008452:	b2f7      	uxtb	r7, r6
 8008454:	1a98      	subs	r0, r3, r2
 8008456:	6963      	ldr	r3, [r4, #20]
 8008458:	b2f6      	uxtb	r6, r6
 800845a:	4283      	cmp	r3, r0
 800845c:	dc05      	bgt.n	800846a <__swbuf_r+0x4a>
 800845e:	0021      	movs	r1, r4
 8008460:	0028      	movs	r0, r5
 8008462:	f000 f989 	bl	8008778 <_fflush_r>
 8008466:	2800      	cmp	r0, #0
 8008468:	d127      	bne.n	80084ba <__swbuf_r+0x9a>
 800846a:	68a3      	ldr	r3, [r4, #8]
 800846c:	3001      	adds	r0, #1
 800846e:	3b01      	subs	r3, #1
 8008470:	60a3      	str	r3, [r4, #8]
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	1c5a      	adds	r2, r3, #1
 8008476:	6022      	str	r2, [r4, #0]
 8008478:	701f      	strb	r7, [r3, #0]
 800847a:	6963      	ldr	r3, [r4, #20]
 800847c:	4283      	cmp	r3, r0
 800847e:	d004      	beq.n	800848a <__swbuf_r+0x6a>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	07db      	lsls	r3, r3, #31
 8008484:	d507      	bpl.n	8008496 <__swbuf_r+0x76>
 8008486:	2e0a      	cmp	r6, #10
 8008488:	d105      	bne.n	8008496 <__swbuf_r+0x76>
 800848a:	0021      	movs	r1, r4
 800848c:	0028      	movs	r0, r5
 800848e:	f000 f973 	bl	8008778 <_fflush_r>
 8008492:	2800      	cmp	r0, #0
 8008494:	d111      	bne.n	80084ba <__swbuf_r+0x9a>
 8008496:	0030      	movs	r0, r6
 8008498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <__swbuf_r+0xa4>)
 800849c:	429c      	cmp	r4, r3
 800849e:	d101      	bne.n	80084a4 <__swbuf_r+0x84>
 80084a0:	68ac      	ldr	r4, [r5, #8]
 80084a2:	e7cc      	b.n	800843e <__swbuf_r+0x1e>
 80084a4:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <__swbuf_r+0xa8>)
 80084a6:	429c      	cmp	r4, r3
 80084a8:	d1c9      	bne.n	800843e <__swbuf_r+0x1e>
 80084aa:	68ec      	ldr	r4, [r5, #12]
 80084ac:	e7c7      	b.n	800843e <__swbuf_r+0x1e>
 80084ae:	0021      	movs	r1, r4
 80084b0:	0028      	movs	r0, r5
 80084b2:	f000 f82d 	bl	8008510 <__swsetup_r>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d0c9      	beq.n	800844e <__swbuf_r+0x2e>
 80084ba:	2601      	movs	r6, #1
 80084bc:	4276      	negs	r6, r6
 80084be:	e7ea      	b.n	8008496 <__swbuf_r+0x76>
 80084c0:	08008e3c 	.word	0x08008e3c
 80084c4:	08008e5c 	.word	0x08008e5c
 80084c8:	08008e1c 	.word	0x08008e1c

080084cc <__ascii_wctomb>:
 80084cc:	0003      	movs	r3, r0
 80084ce:	1e08      	subs	r0, r1, #0
 80084d0:	d005      	beq.n	80084de <__ascii_wctomb+0x12>
 80084d2:	2aff      	cmp	r2, #255	; 0xff
 80084d4:	d904      	bls.n	80084e0 <__ascii_wctomb+0x14>
 80084d6:	228a      	movs	r2, #138	; 0x8a
 80084d8:	2001      	movs	r0, #1
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	4240      	negs	r0, r0
 80084de:	4770      	bx	lr
 80084e0:	2001      	movs	r0, #1
 80084e2:	700a      	strb	r2, [r1, #0]
 80084e4:	e7fb      	b.n	80084de <__ascii_wctomb+0x12>
	...

080084e8 <_write_r>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	0004      	movs	r4, r0
 80084ec:	0008      	movs	r0, r1
 80084ee:	0011      	movs	r1, r2
 80084f0:	001a      	movs	r2, r3
 80084f2:	2300      	movs	r3, #0
 80084f4:	4d05      	ldr	r5, [pc, #20]	; (800850c <_write_r+0x24>)
 80084f6:	602b      	str	r3, [r5, #0]
 80084f8:	f7fa f9c1 	bl	800287e <_write>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d103      	bne.n	8008508 <_write_r+0x20>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d000      	beq.n	8008508 <_write_r+0x20>
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	20000320 	.word	0x20000320

08008510 <__swsetup_r>:
 8008510:	4b37      	ldr	r3, [pc, #220]	; (80085f0 <__swsetup_r+0xe0>)
 8008512:	b570      	push	{r4, r5, r6, lr}
 8008514:	681d      	ldr	r5, [r3, #0]
 8008516:	0006      	movs	r6, r0
 8008518:	000c      	movs	r4, r1
 800851a:	2d00      	cmp	r5, #0
 800851c:	d005      	beq.n	800852a <__swsetup_r+0x1a>
 800851e:	69ab      	ldr	r3, [r5, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d102      	bne.n	800852a <__swsetup_r+0x1a>
 8008524:	0028      	movs	r0, r5
 8008526:	f7fe f8ff 	bl	8006728 <__sinit>
 800852a:	4b32      	ldr	r3, [pc, #200]	; (80085f4 <__swsetup_r+0xe4>)
 800852c:	429c      	cmp	r4, r3
 800852e:	d10f      	bne.n	8008550 <__swsetup_r+0x40>
 8008530:	686c      	ldr	r4, [r5, #4]
 8008532:	230c      	movs	r3, #12
 8008534:	5ee2      	ldrsh	r2, [r4, r3]
 8008536:	b293      	uxth	r3, r2
 8008538:	0711      	lsls	r1, r2, #28
 800853a:	d42d      	bmi.n	8008598 <__swsetup_r+0x88>
 800853c:	06d9      	lsls	r1, r3, #27
 800853e:	d411      	bmi.n	8008564 <__swsetup_r+0x54>
 8008540:	2309      	movs	r3, #9
 8008542:	2001      	movs	r0, #1
 8008544:	6033      	str	r3, [r6, #0]
 8008546:	3337      	adds	r3, #55	; 0x37
 8008548:	4313      	orrs	r3, r2
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	4240      	negs	r0, r0
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	4b29      	ldr	r3, [pc, #164]	; (80085f8 <__swsetup_r+0xe8>)
 8008552:	429c      	cmp	r4, r3
 8008554:	d101      	bne.n	800855a <__swsetup_r+0x4a>
 8008556:	68ac      	ldr	r4, [r5, #8]
 8008558:	e7eb      	b.n	8008532 <__swsetup_r+0x22>
 800855a:	4b28      	ldr	r3, [pc, #160]	; (80085fc <__swsetup_r+0xec>)
 800855c:	429c      	cmp	r4, r3
 800855e:	d1e8      	bne.n	8008532 <__swsetup_r+0x22>
 8008560:	68ec      	ldr	r4, [r5, #12]
 8008562:	e7e6      	b.n	8008532 <__swsetup_r+0x22>
 8008564:	075b      	lsls	r3, r3, #29
 8008566:	d513      	bpl.n	8008590 <__swsetup_r+0x80>
 8008568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800856a:	2900      	cmp	r1, #0
 800856c:	d008      	beq.n	8008580 <__swsetup_r+0x70>
 800856e:	0023      	movs	r3, r4
 8008570:	3344      	adds	r3, #68	; 0x44
 8008572:	4299      	cmp	r1, r3
 8008574:	d002      	beq.n	800857c <__swsetup_r+0x6c>
 8008576:	0030      	movs	r0, r6
 8008578:	f000 fa06 	bl	8008988 <_free_r>
 800857c:	2300      	movs	r3, #0
 800857e:	6363      	str	r3, [r4, #52]	; 0x34
 8008580:	2224      	movs	r2, #36	; 0x24
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	4393      	bics	r3, r2
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	2300      	movs	r3, #0
 800858a:	6063      	str	r3, [r4, #4]
 800858c:	6923      	ldr	r3, [r4, #16]
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	2308      	movs	r3, #8
 8008592:	89a2      	ldrh	r2, [r4, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10b      	bne.n	80085b6 <__swsetup_r+0xa6>
 800859e:	21a0      	movs	r1, #160	; 0xa0
 80085a0:	2280      	movs	r2, #128	; 0x80
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	0089      	lsls	r1, r1, #2
 80085a6:	0092      	lsls	r2, r2, #2
 80085a8:	400b      	ands	r3, r1
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d003      	beq.n	80085b6 <__swsetup_r+0xa6>
 80085ae:	0021      	movs	r1, r4
 80085b0:	0030      	movs	r0, r6
 80085b2:	f000 f96d 	bl	8008890 <__smakebuf_r>
 80085b6:	220c      	movs	r2, #12
 80085b8:	5ea3      	ldrsh	r3, [r4, r2]
 80085ba:	2001      	movs	r0, #1
 80085bc:	001a      	movs	r2, r3
 80085be:	b299      	uxth	r1, r3
 80085c0:	4002      	ands	r2, r0
 80085c2:	4203      	tst	r3, r0
 80085c4:	d00f      	beq.n	80085e6 <__swsetup_r+0xd6>
 80085c6:	2200      	movs	r2, #0
 80085c8:	60a2      	str	r2, [r4, #8]
 80085ca:	6962      	ldr	r2, [r4, #20]
 80085cc:	4252      	negs	r2, r2
 80085ce:	61a2      	str	r2, [r4, #24]
 80085d0:	2000      	movs	r0, #0
 80085d2:	6922      	ldr	r2, [r4, #16]
 80085d4:	4282      	cmp	r2, r0
 80085d6:	d1ba      	bne.n	800854e <__swsetup_r+0x3e>
 80085d8:	060a      	lsls	r2, r1, #24
 80085da:	d5b8      	bpl.n	800854e <__swsetup_r+0x3e>
 80085dc:	2240      	movs	r2, #64	; 0x40
 80085de:	4313      	orrs	r3, r2
 80085e0:	81a3      	strh	r3, [r4, #12]
 80085e2:	3801      	subs	r0, #1
 80085e4:	e7b3      	b.n	800854e <__swsetup_r+0x3e>
 80085e6:	0788      	lsls	r0, r1, #30
 80085e8:	d400      	bmi.n	80085ec <__swsetup_r+0xdc>
 80085ea:	6962      	ldr	r2, [r4, #20]
 80085ec:	60a2      	str	r2, [r4, #8]
 80085ee:	e7ef      	b.n	80085d0 <__swsetup_r+0xc0>
 80085f0:	2000000c 	.word	0x2000000c
 80085f4:	08008e3c 	.word	0x08008e3c
 80085f8:	08008e5c 	.word	0x08008e5c
 80085fc:	08008e1c 	.word	0x08008e1c

08008600 <__assert_func>:
 8008600:	b530      	push	{r4, r5, lr}
 8008602:	0014      	movs	r4, r2
 8008604:	001a      	movs	r2, r3
 8008606:	4b09      	ldr	r3, [pc, #36]	; (800862c <__assert_func+0x2c>)
 8008608:	0005      	movs	r5, r0
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	b085      	sub	sp, #20
 800860e:	68d8      	ldr	r0, [r3, #12]
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <__assert_func+0x30>)
 8008612:	2c00      	cmp	r4, #0
 8008614:	d101      	bne.n	800861a <__assert_func+0x1a>
 8008616:	4b07      	ldr	r3, [pc, #28]	; (8008634 <__assert_func+0x34>)
 8008618:	001c      	movs	r4, r3
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	9100      	str	r1, [sp, #0]
 800861e:	002b      	movs	r3, r5
 8008620:	4905      	ldr	r1, [pc, #20]	; (8008638 <__assert_func+0x38>)
 8008622:	9402      	str	r4, [sp, #8]
 8008624:	f000 f8e8 	bl	80087f8 <fiprintf>
 8008628:	f000 fa3c 	bl	8008aa4 <abort>
 800862c:	2000000c 	.word	0x2000000c
 8008630:	080090af 	.word	0x080090af
 8008634:	080090ea 	.word	0x080090ea
 8008638:	080090bc 	.word	0x080090bc

0800863c <_close_r>:
 800863c:	2300      	movs	r3, #0
 800863e:	b570      	push	{r4, r5, r6, lr}
 8008640:	4d06      	ldr	r5, [pc, #24]	; (800865c <_close_r+0x20>)
 8008642:	0004      	movs	r4, r0
 8008644:	0008      	movs	r0, r1
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	f7fa f935 	bl	80028b6 <_close>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d103      	bne.n	8008658 <_close_r+0x1c>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d000      	beq.n	8008658 <_close_r+0x1c>
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	20000320 	.word	0x20000320

08008660 <__sflush_r>:
 8008660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008662:	898b      	ldrh	r3, [r1, #12]
 8008664:	0005      	movs	r5, r0
 8008666:	000c      	movs	r4, r1
 8008668:	071a      	lsls	r2, r3, #28
 800866a:	d45f      	bmi.n	800872c <__sflush_r+0xcc>
 800866c:	684a      	ldr	r2, [r1, #4]
 800866e:	2a00      	cmp	r2, #0
 8008670:	dc04      	bgt.n	800867c <__sflush_r+0x1c>
 8008672:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008674:	2a00      	cmp	r2, #0
 8008676:	dc01      	bgt.n	800867c <__sflush_r+0x1c>
 8008678:	2000      	movs	r0, #0
 800867a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800867c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800867e:	2f00      	cmp	r7, #0
 8008680:	d0fa      	beq.n	8008678 <__sflush_r+0x18>
 8008682:	2200      	movs	r2, #0
 8008684:	2180      	movs	r1, #128	; 0x80
 8008686:	682e      	ldr	r6, [r5, #0]
 8008688:	602a      	str	r2, [r5, #0]
 800868a:	001a      	movs	r2, r3
 800868c:	0149      	lsls	r1, r1, #5
 800868e:	400a      	ands	r2, r1
 8008690:	420b      	tst	r3, r1
 8008692:	d034      	beq.n	80086fe <__sflush_r+0x9e>
 8008694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	075b      	lsls	r3, r3, #29
 800869a:	d506      	bpl.n	80086aa <__sflush_r+0x4a>
 800869c:	6863      	ldr	r3, [r4, #4]
 800869e:	1ac0      	subs	r0, r0, r3
 80086a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <__sflush_r+0x4a>
 80086a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086a8:	1ac0      	subs	r0, r0, r3
 80086aa:	0002      	movs	r2, r0
 80086ac:	6a21      	ldr	r1, [r4, #32]
 80086ae:	2300      	movs	r3, #0
 80086b0:	0028      	movs	r0, r5
 80086b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80086b4:	47b8      	blx	r7
 80086b6:	89a1      	ldrh	r1, [r4, #12]
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d106      	bne.n	80086ca <__sflush_r+0x6a>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	2b1d      	cmp	r3, #29
 80086c0:	d831      	bhi.n	8008726 <__sflush_r+0xc6>
 80086c2:	4a2c      	ldr	r2, [pc, #176]	; (8008774 <__sflush_r+0x114>)
 80086c4:	40da      	lsrs	r2, r3
 80086c6:	07d3      	lsls	r3, r2, #31
 80086c8:	d52d      	bpl.n	8008726 <__sflush_r+0xc6>
 80086ca:	2300      	movs	r3, #0
 80086cc:	6063      	str	r3, [r4, #4]
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	04cb      	lsls	r3, r1, #19
 80086d4:	d505      	bpl.n	80086e2 <__sflush_r+0x82>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d102      	bne.n	80086e0 <__sflush_r+0x80>
 80086da:	682b      	ldr	r3, [r5, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d100      	bne.n	80086e2 <__sflush_r+0x82>
 80086e0:	6560      	str	r0, [r4, #84]	; 0x54
 80086e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086e4:	602e      	str	r6, [r5, #0]
 80086e6:	2900      	cmp	r1, #0
 80086e8:	d0c6      	beq.n	8008678 <__sflush_r+0x18>
 80086ea:	0023      	movs	r3, r4
 80086ec:	3344      	adds	r3, #68	; 0x44
 80086ee:	4299      	cmp	r1, r3
 80086f0:	d002      	beq.n	80086f8 <__sflush_r+0x98>
 80086f2:	0028      	movs	r0, r5
 80086f4:	f000 f948 	bl	8008988 <_free_r>
 80086f8:	2000      	movs	r0, #0
 80086fa:	6360      	str	r0, [r4, #52]	; 0x34
 80086fc:	e7bd      	b.n	800867a <__sflush_r+0x1a>
 80086fe:	2301      	movs	r3, #1
 8008700:	0028      	movs	r0, r5
 8008702:	6a21      	ldr	r1, [r4, #32]
 8008704:	47b8      	blx	r7
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	d1c5      	bne.n	8008696 <__sflush_r+0x36>
 800870a:	682b      	ldr	r3, [r5, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0c2      	beq.n	8008696 <__sflush_r+0x36>
 8008710:	2b1d      	cmp	r3, #29
 8008712:	d001      	beq.n	8008718 <__sflush_r+0xb8>
 8008714:	2b16      	cmp	r3, #22
 8008716:	d101      	bne.n	800871c <__sflush_r+0xbc>
 8008718:	602e      	str	r6, [r5, #0]
 800871a:	e7ad      	b.n	8008678 <__sflush_r+0x18>
 800871c:	2340      	movs	r3, #64	; 0x40
 800871e:	89a2      	ldrh	r2, [r4, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	e7a9      	b.n	800867a <__sflush_r+0x1a>
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	430b      	orrs	r3, r1
 800872a:	e7fa      	b.n	8008722 <__sflush_r+0xc2>
 800872c:	690f      	ldr	r7, [r1, #16]
 800872e:	2f00      	cmp	r7, #0
 8008730:	d0a2      	beq.n	8008678 <__sflush_r+0x18>
 8008732:	680a      	ldr	r2, [r1, #0]
 8008734:	600f      	str	r7, [r1, #0]
 8008736:	1bd2      	subs	r2, r2, r7
 8008738:	9201      	str	r2, [sp, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	079b      	lsls	r3, r3, #30
 800873e:	d100      	bne.n	8008742 <__sflush_r+0xe2>
 8008740:	694a      	ldr	r2, [r1, #20]
 8008742:	60a2      	str	r2, [r4, #8]
 8008744:	9b01      	ldr	r3, [sp, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	dc00      	bgt.n	800874c <__sflush_r+0xec>
 800874a:	e795      	b.n	8008678 <__sflush_r+0x18>
 800874c:	003a      	movs	r2, r7
 800874e:	0028      	movs	r0, r5
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	6a21      	ldr	r1, [r4, #32]
 8008754:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008756:	47b0      	blx	r6
 8008758:	2800      	cmp	r0, #0
 800875a:	dc06      	bgt.n	800876a <__sflush_r+0x10a>
 800875c:	2340      	movs	r3, #64	; 0x40
 800875e:	2001      	movs	r0, #1
 8008760:	89a2      	ldrh	r2, [r4, #12]
 8008762:	4240      	negs	r0, r0
 8008764:	4313      	orrs	r3, r2
 8008766:	81a3      	strh	r3, [r4, #12]
 8008768:	e787      	b.n	800867a <__sflush_r+0x1a>
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	183f      	adds	r7, r7, r0
 800876e:	1a1b      	subs	r3, r3, r0
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	e7e7      	b.n	8008744 <__sflush_r+0xe4>
 8008774:	20400001 	.word	0x20400001

08008778 <_fflush_r>:
 8008778:	690b      	ldr	r3, [r1, #16]
 800877a:	b570      	push	{r4, r5, r6, lr}
 800877c:	0005      	movs	r5, r0
 800877e:	000c      	movs	r4, r1
 8008780:	2b00      	cmp	r3, #0
 8008782:	d102      	bne.n	800878a <_fflush_r+0x12>
 8008784:	2500      	movs	r5, #0
 8008786:	0028      	movs	r0, r5
 8008788:	bd70      	pop	{r4, r5, r6, pc}
 800878a:	2800      	cmp	r0, #0
 800878c:	d004      	beq.n	8008798 <_fflush_r+0x20>
 800878e:	6983      	ldr	r3, [r0, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <_fflush_r+0x20>
 8008794:	f7fd ffc8 	bl	8006728 <__sinit>
 8008798:	4b14      	ldr	r3, [pc, #80]	; (80087ec <_fflush_r+0x74>)
 800879a:	429c      	cmp	r4, r3
 800879c:	d11b      	bne.n	80087d6 <_fflush_r+0x5e>
 800879e:	686c      	ldr	r4, [r5, #4]
 80087a0:	220c      	movs	r2, #12
 80087a2:	5ea3      	ldrsh	r3, [r4, r2]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0ed      	beq.n	8008784 <_fflush_r+0xc>
 80087a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087aa:	07d2      	lsls	r2, r2, #31
 80087ac:	d404      	bmi.n	80087b8 <_fflush_r+0x40>
 80087ae:	059b      	lsls	r3, r3, #22
 80087b0:	d402      	bmi.n	80087b8 <_fflush_r+0x40>
 80087b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b4:	f7fe fbcd 	bl	8006f52 <__retarget_lock_acquire_recursive>
 80087b8:	0028      	movs	r0, r5
 80087ba:	0021      	movs	r1, r4
 80087bc:	f7ff ff50 	bl	8008660 <__sflush_r>
 80087c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087c2:	0005      	movs	r5, r0
 80087c4:	07db      	lsls	r3, r3, #31
 80087c6:	d4de      	bmi.n	8008786 <_fflush_r+0xe>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	059b      	lsls	r3, r3, #22
 80087cc:	d4db      	bmi.n	8008786 <_fflush_r+0xe>
 80087ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087d0:	f7fe fbc0 	bl	8006f54 <__retarget_lock_release_recursive>
 80087d4:	e7d7      	b.n	8008786 <_fflush_r+0xe>
 80087d6:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <_fflush_r+0x78>)
 80087d8:	429c      	cmp	r4, r3
 80087da:	d101      	bne.n	80087e0 <_fflush_r+0x68>
 80087dc:	68ac      	ldr	r4, [r5, #8]
 80087de:	e7df      	b.n	80087a0 <_fflush_r+0x28>
 80087e0:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <_fflush_r+0x7c>)
 80087e2:	429c      	cmp	r4, r3
 80087e4:	d1dc      	bne.n	80087a0 <_fflush_r+0x28>
 80087e6:	68ec      	ldr	r4, [r5, #12]
 80087e8:	e7da      	b.n	80087a0 <_fflush_r+0x28>
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	08008e3c 	.word	0x08008e3c
 80087f0:	08008e5c 	.word	0x08008e5c
 80087f4:	08008e1c 	.word	0x08008e1c

080087f8 <fiprintf>:
 80087f8:	b40e      	push	{r1, r2, r3}
 80087fa:	b503      	push	{r0, r1, lr}
 80087fc:	0001      	movs	r1, r0
 80087fe:	ab03      	add	r3, sp, #12
 8008800:	4804      	ldr	r0, [pc, #16]	; (8008814 <fiprintf+0x1c>)
 8008802:	cb04      	ldmia	r3!, {r2}
 8008804:	6800      	ldr	r0, [r0, #0]
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	f7ff fad8 	bl	8007dbc <_vfiprintf_r>
 800880c:	b002      	add	sp, #8
 800880e:	bc08      	pop	{r3}
 8008810:	b003      	add	sp, #12
 8008812:	4718      	bx	r3
 8008814:	2000000c 	.word	0x2000000c

08008818 <_lseek_r>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	0004      	movs	r4, r0
 800881c:	0008      	movs	r0, r1
 800881e:	0011      	movs	r1, r2
 8008820:	001a      	movs	r2, r3
 8008822:	2300      	movs	r3, #0
 8008824:	4d05      	ldr	r5, [pc, #20]	; (800883c <_lseek_r+0x24>)
 8008826:	602b      	str	r3, [r5, #0]
 8008828:	f7fa f866 	bl	80028f8 <_lseek>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d103      	bne.n	8008838 <_lseek_r+0x20>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d000      	beq.n	8008838 <_lseek_r+0x20>
 8008836:	6023      	str	r3, [r4, #0]
 8008838:	bd70      	pop	{r4, r5, r6, pc}
 800883a:	46c0      	nop			; (mov r8, r8)
 800883c:	20000320 	.word	0x20000320

08008840 <__swhatbuf_r>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	000e      	movs	r6, r1
 8008844:	001d      	movs	r5, r3
 8008846:	230e      	movs	r3, #14
 8008848:	5ec9      	ldrsh	r1, [r1, r3]
 800884a:	0014      	movs	r4, r2
 800884c:	b096      	sub	sp, #88	; 0x58
 800884e:	2900      	cmp	r1, #0
 8008850:	da08      	bge.n	8008864 <__swhatbuf_r+0x24>
 8008852:	220c      	movs	r2, #12
 8008854:	5eb3      	ldrsh	r3, [r6, r2]
 8008856:	2200      	movs	r2, #0
 8008858:	602a      	str	r2, [r5, #0]
 800885a:	061b      	lsls	r3, r3, #24
 800885c:	d411      	bmi.n	8008882 <__swhatbuf_r+0x42>
 800885e:	2380      	movs	r3, #128	; 0x80
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	e00f      	b.n	8008884 <__swhatbuf_r+0x44>
 8008864:	466a      	mov	r2, sp
 8008866:	f000 f925 	bl	8008ab4 <_fstat_r>
 800886a:	2800      	cmp	r0, #0
 800886c:	dbf1      	blt.n	8008852 <__swhatbuf_r+0x12>
 800886e:	23f0      	movs	r3, #240	; 0xf0
 8008870:	9901      	ldr	r1, [sp, #4]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	4019      	ands	r1, r3
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <__swhatbuf_r+0x4c>)
 8008878:	18c9      	adds	r1, r1, r3
 800887a:	424b      	negs	r3, r1
 800887c:	4159      	adcs	r1, r3
 800887e:	6029      	str	r1, [r5, #0]
 8008880:	e7ed      	b.n	800885e <__swhatbuf_r+0x1e>
 8008882:	2340      	movs	r3, #64	; 0x40
 8008884:	2000      	movs	r0, #0
 8008886:	6023      	str	r3, [r4, #0]
 8008888:	b016      	add	sp, #88	; 0x58
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	ffffe000 	.word	0xffffe000

08008890 <__smakebuf_r>:
 8008890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008892:	2602      	movs	r6, #2
 8008894:	898b      	ldrh	r3, [r1, #12]
 8008896:	0005      	movs	r5, r0
 8008898:	000c      	movs	r4, r1
 800889a:	4233      	tst	r3, r6
 800889c:	d006      	beq.n	80088ac <__smakebuf_r+0x1c>
 800889e:	0023      	movs	r3, r4
 80088a0:	3347      	adds	r3, #71	; 0x47
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	6123      	str	r3, [r4, #16]
 80088a6:	2301      	movs	r3, #1
 80088a8:	6163      	str	r3, [r4, #20]
 80088aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80088ac:	466a      	mov	r2, sp
 80088ae:	ab01      	add	r3, sp, #4
 80088b0:	f7ff ffc6 	bl	8008840 <__swhatbuf_r>
 80088b4:	9900      	ldr	r1, [sp, #0]
 80088b6:	0007      	movs	r7, r0
 80088b8:	0028      	movs	r0, r5
 80088ba:	f7ff f87f 	bl	80079bc <_malloc_r>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d108      	bne.n	80088d4 <__smakebuf_r+0x44>
 80088c2:	220c      	movs	r2, #12
 80088c4:	5ea3      	ldrsh	r3, [r4, r2]
 80088c6:	059a      	lsls	r2, r3, #22
 80088c8:	d4ef      	bmi.n	80088aa <__smakebuf_r+0x1a>
 80088ca:	2203      	movs	r2, #3
 80088cc:	4393      	bics	r3, r2
 80088ce:	431e      	orrs	r6, r3
 80088d0:	81a6      	strh	r6, [r4, #12]
 80088d2:	e7e4      	b.n	800889e <__smakebuf_r+0xe>
 80088d4:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <__smakebuf_r+0x84>)
 80088d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	89a2      	ldrh	r2, [r4, #12]
 80088dc:	6020      	str	r0, [r4, #0]
 80088de:	4313      	orrs	r3, r2
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	9b00      	ldr	r3, [sp, #0]
 80088e4:	6120      	str	r0, [r4, #16]
 80088e6:	6163      	str	r3, [r4, #20]
 80088e8:	9b01      	ldr	r3, [sp, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00d      	beq.n	800890a <__smakebuf_r+0x7a>
 80088ee:	0028      	movs	r0, r5
 80088f0:	230e      	movs	r3, #14
 80088f2:	5ee1      	ldrsh	r1, [r4, r3]
 80088f4:	f000 f8f0 	bl	8008ad8 <_isatty_r>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d006      	beq.n	800890a <__smakebuf_r+0x7a>
 80088fc:	2203      	movs	r2, #3
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	4393      	bics	r3, r2
 8008902:	001a      	movs	r2, r3
 8008904:	2301      	movs	r3, #1
 8008906:	4313      	orrs	r3, r2
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	89a0      	ldrh	r0, [r4, #12]
 800890c:	4307      	orrs	r7, r0
 800890e:	81a7      	strh	r7, [r4, #12]
 8008910:	e7cb      	b.n	80088aa <__smakebuf_r+0x1a>
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	080066ad 	.word	0x080066ad

08008918 <malloc>:
 8008918:	b510      	push	{r4, lr}
 800891a:	4b03      	ldr	r3, [pc, #12]	; (8008928 <malloc+0x10>)
 800891c:	0001      	movs	r1, r0
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	f7ff f84c 	bl	80079bc <_malloc_r>
 8008924:	bd10      	pop	{r4, pc}
 8008926:	46c0      	nop			; (mov r8, r8)
 8008928:	2000000c 	.word	0x2000000c

0800892c <memchr>:
 800892c:	b2c9      	uxtb	r1, r1
 800892e:	1882      	adds	r2, r0, r2
 8008930:	4290      	cmp	r0, r2
 8008932:	d101      	bne.n	8008938 <memchr+0xc>
 8008934:	2000      	movs	r0, #0
 8008936:	4770      	bx	lr
 8008938:	7803      	ldrb	r3, [r0, #0]
 800893a:	428b      	cmp	r3, r1
 800893c:	d0fb      	beq.n	8008936 <memchr+0xa>
 800893e:	3001      	adds	r0, #1
 8008940:	e7f6      	b.n	8008930 <memchr+0x4>

08008942 <memmove>:
 8008942:	b510      	push	{r4, lr}
 8008944:	4288      	cmp	r0, r1
 8008946:	d902      	bls.n	800894e <memmove+0xc>
 8008948:	188b      	adds	r3, r1, r2
 800894a:	4298      	cmp	r0, r3
 800894c:	d303      	bcc.n	8008956 <memmove+0x14>
 800894e:	2300      	movs	r3, #0
 8008950:	e007      	b.n	8008962 <memmove+0x20>
 8008952:	5c8b      	ldrb	r3, [r1, r2]
 8008954:	5483      	strb	r3, [r0, r2]
 8008956:	3a01      	subs	r2, #1
 8008958:	d2fb      	bcs.n	8008952 <memmove+0x10>
 800895a:	bd10      	pop	{r4, pc}
 800895c:	5ccc      	ldrb	r4, [r1, r3]
 800895e:	54c4      	strb	r4, [r0, r3]
 8008960:	3301      	adds	r3, #1
 8008962:	429a      	cmp	r2, r3
 8008964:	d1fa      	bne.n	800895c <memmove+0x1a>
 8008966:	e7f8      	b.n	800895a <memmove+0x18>

08008968 <__malloc_lock>:
 8008968:	b510      	push	{r4, lr}
 800896a:	4802      	ldr	r0, [pc, #8]	; (8008974 <__malloc_lock+0xc>)
 800896c:	f7fe faf1 	bl	8006f52 <__retarget_lock_acquire_recursive>
 8008970:	bd10      	pop	{r4, pc}
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	20000314 	.word	0x20000314

08008978 <__malloc_unlock>:
 8008978:	b510      	push	{r4, lr}
 800897a:	4802      	ldr	r0, [pc, #8]	; (8008984 <__malloc_unlock+0xc>)
 800897c:	f7fe faea 	bl	8006f54 <__retarget_lock_release_recursive>
 8008980:	bd10      	pop	{r4, pc}
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	20000314 	.word	0x20000314

08008988 <_free_r>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	0005      	movs	r5, r0
 800898c:	2900      	cmp	r1, #0
 800898e:	d010      	beq.n	80089b2 <_free_r+0x2a>
 8008990:	1f0c      	subs	r4, r1, #4
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	da00      	bge.n	800899a <_free_r+0x12>
 8008998:	18e4      	adds	r4, r4, r3
 800899a:	0028      	movs	r0, r5
 800899c:	f7ff ffe4 	bl	8008968 <__malloc_lock>
 80089a0:	4a1d      	ldr	r2, [pc, #116]	; (8008a18 <_free_r+0x90>)
 80089a2:	6813      	ldr	r3, [r2, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d105      	bne.n	80089b4 <_free_r+0x2c>
 80089a8:	6063      	str	r3, [r4, #4]
 80089aa:	6014      	str	r4, [r2, #0]
 80089ac:	0028      	movs	r0, r5
 80089ae:	f7ff ffe3 	bl	8008978 <__malloc_unlock>
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	d908      	bls.n	80089ca <_free_r+0x42>
 80089b8:	6821      	ldr	r1, [r4, #0]
 80089ba:	1860      	adds	r0, r4, r1
 80089bc:	4283      	cmp	r3, r0
 80089be:	d1f3      	bne.n	80089a8 <_free_r+0x20>
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	1841      	adds	r1, r0, r1
 80089c6:	6021      	str	r1, [r4, #0]
 80089c8:	e7ee      	b.n	80089a8 <_free_r+0x20>
 80089ca:	001a      	movs	r2, r3
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <_free_r+0x4e>
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	d9f9      	bls.n	80089ca <_free_r+0x42>
 80089d6:	6811      	ldr	r1, [r2, #0]
 80089d8:	1850      	adds	r0, r2, r1
 80089da:	42a0      	cmp	r0, r4
 80089dc:	d10b      	bne.n	80089f6 <_free_r+0x6e>
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	1809      	adds	r1, r1, r0
 80089e2:	1850      	adds	r0, r2, r1
 80089e4:	6011      	str	r1, [r2, #0]
 80089e6:	4283      	cmp	r3, r0
 80089e8:	d1e0      	bne.n	80089ac <_free_r+0x24>
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	1841      	adds	r1, r0, r1
 80089f0:	6011      	str	r1, [r2, #0]
 80089f2:	6053      	str	r3, [r2, #4]
 80089f4:	e7da      	b.n	80089ac <_free_r+0x24>
 80089f6:	42a0      	cmp	r0, r4
 80089f8:	d902      	bls.n	8008a00 <_free_r+0x78>
 80089fa:	230c      	movs	r3, #12
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	e7d5      	b.n	80089ac <_free_r+0x24>
 8008a00:	6821      	ldr	r1, [r4, #0]
 8008a02:	1860      	adds	r0, r4, r1
 8008a04:	4283      	cmp	r3, r0
 8008a06:	d103      	bne.n	8008a10 <_free_r+0x88>
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	1841      	adds	r1, r0, r1
 8008a0e:	6021      	str	r1, [r4, #0]
 8008a10:	6063      	str	r3, [r4, #4]
 8008a12:	6054      	str	r4, [r2, #4]
 8008a14:	e7ca      	b.n	80089ac <_free_r+0x24>
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	20000318 	.word	0x20000318

08008a1c <_realloc_r>:
 8008a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a1e:	0007      	movs	r7, r0
 8008a20:	000e      	movs	r6, r1
 8008a22:	0014      	movs	r4, r2
 8008a24:	2900      	cmp	r1, #0
 8008a26:	d105      	bne.n	8008a34 <_realloc_r+0x18>
 8008a28:	0011      	movs	r1, r2
 8008a2a:	f7fe ffc7 	bl	80079bc <_malloc_r>
 8008a2e:	0005      	movs	r5, r0
 8008a30:	0028      	movs	r0, r5
 8008a32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	d103      	bne.n	8008a40 <_realloc_r+0x24>
 8008a38:	f7ff ffa6 	bl	8008988 <_free_r>
 8008a3c:	0025      	movs	r5, r4
 8008a3e:	e7f7      	b.n	8008a30 <_realloc_r+0x14>
 8008a40:	f000 f85c 	bl	8008afc <_malloc_usable_size_r>
 8008a44:	9001      	str	r0, [sp, #4]
 8008a46:	4284      	cmp	r4, r0
 8008a48:	d803      	bhi.n	8008a52 <_realloc_r+0x36>
 8008a4a:	0035      	movs	r5, r6
 8008a4c:	0843      	lsrs	r3, r0, #1
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	d3ee      	bcc.n	8008a30 <_realloc_r+0x14>
 8008a52:	0021      	movs	r1, r4
 8008a54:	0038      	movs	r0, r7
 8008a56:	f7fe ffb1 	bl	80079bc <_malloc_r>
 8008a5a:	1e05      	subs	r5, r0, #0
 8008a5c:	d0e8      	beq.n	8008a30 <_realloc_r+0x14>
 8008a5e:	9b01      	ldr	r3, [sp, #4]
 8008a60:	0022      	movs	r2, r4
 8008a62:	429c      	cmp	r4, r3
 8008a64:	d900      	bls.n	8008a68 <_realloc_r+0x4c>
 8008a66:	001a      	movs	r2, r3
 8008a68:	0031      	movs	r1, r6
 8008a6a:	0028      	movs	r0, r5
 8008a6c:	f7fe fa85 	bl	8006f7a <memcpy>
 8008a70:	0031      	movs	r1, r6
 8008a72:	0038      	movs	r0, r7
 8008a74:	f7ff ff88 	bl	8008988 <_free_r>
 8008a78:	e7da      	b.n	8008a30 <_realloc_r+0x14>
	...

08008a7c <_read_r>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	0004      	movs	r4, r0
 8008a80:	0008      	movs	r0, r1
 8008a82:	0011      	movs	r1, r2
 8008a84:	001a      	movs	r2, r3
 8008a86:	2300      	movs	r3, #0
 8008a88:	4d05      	ldr	r5, [pc, #20]	; (8008aa0 <_read_r+0x24>)
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7f9 feda 	bl	8002844 <_read>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d103      	bne.n	8008a9c <_read_r+0x20>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d000      	beq.n	8008a9c <_read_r+0x20>
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	bd70      	pop	{r4, r5, r6, pc}
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	20000320 	.word	0x20000320

08008aa4 <abort>:
 8008aa4:	2006      	movs	r0, #6
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	f000 f85a 	bl	8008b60 <raise>
 8008aac:	2001      	movs	r0, #1
 8008aae:	f7f9 febd 	bl	800282c <_exit>
	...

08008ab4 <_fstat_r>:
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	b570      	push	{r4, r5, r6, lr}
 8008ab8:	4d06      	ldr	r5, [pc, #24]	; (8008ad4 <_fstat_r+0x20>)
 8008aba:	0004      	movs	r4, r0
 8008abc:	0008      	movs	r0, r1
 8008abe:	0011      	movs	r1, r2
 8008ac0:	602b      	str	r3, [r5, #0]
 8008ac2:	f7f9 ff02 	bl	80028ca <_fstat>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d103      	bne.n	8008ad2 <_fstat_r+0x1e>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d000      	beq.n	8008ad2 <_fstat_r+0x1e>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	20000320 	.word	0x20000320

08008ad8 <_isatty_r>:
 8008ad8:	2300      	movs	r3, #0
 8008ada:	b570      	push	{r4, r5, r6, lr}
 8008adc:	4d06      	ldr	r5, [pc, #24]	; (8008af8 <_isatty_r+0x20>)
 8008ade:	0004      	movs	r4, r0
 8008ae0:	0008      	movs	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7f9 feff 	bl	80028e6 <_isatty>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d103      	bne.n	8008af4 <_isatty_r+0x1c>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d000      	beq.n	8008af4 <_isatty_r+0x1c>
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	bd70      	pop	{r4, r5, r6, pc}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	20000320 	.word	0x20000320

08008afc <_malloc_usable_size_r>:
 8008afc:	1f0b      	subs	r3, r1, #4
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	1f18      	subs	r0, r3, #4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	da01      	bge.n	8008b0a <_malloc_usable_size_r+0xe>
 8008b06:	580b      	ldr	r3, [r1, r0]
 8008b08:	18c0      	adds	r0, r0, r3
 8008b0a:	4770      	bx	lr

08008b0c <_raise_r>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	0004      	movs	r4, r0
 8008b10:	000d      	movs	r5, r1
 8008b12:	291f      	cmp	r1, #31
 8008b14:	d904      	bls.n	8008b20 <_raise_r+0x14>
 8008b16:	2316      	movs	r3, #22
 8008b18:	6003      	str	r3, [r0, #0]
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	4240      	negs	r0, r0
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <_raise_r+0x24>
 8008b26:	008a      	lsls	r2, r1, #2
 8008b28:	189b      	adds	r3, r3, r2
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	d108      	bne.n	8008b42 <_raise_r+0x36>
 8008b30:	0020      	movs	r0, r4
 8008b32:	f000 f831 	bl	8008b98 <_getpid_r>
 8008b36:	002a      	movs	r2, r5
 8008b38:	0001      	movs	r1, r0
 8008b3a:	0020      	movs	r0, r4
 8008b3c:	f000 f81a 	bl	8008b74 <_kill_r>
 8008b40:	e7ed      	b.n	8008b1e <_raise_r+0x12>
 8008b42:	2000      	movs	r0, #0
 8008b44:	2a01      	cmp	r2, #1
 8008b46:	d0ea      	beq.n	8008b1e <_raise_r+0x12>
 8008b48:	1c51      	adds	r1, r2, #1
 8008b4a:	d103      	bne.n	8008b54 <_raise_r+0x48>
 8008b4c:	2316      	movs	r3, #22
 8008b4e:	3001      	adds	r0, #1
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	e7e4      	b.n	8008b1e <_raise_r+0x12>
 8008b54:	2400      	movs	r4, #0
 8008b56:	0028      	movs	r0, r5
 8008b58:	601c      	str	r4, [r3, #0]
 8008b5a:	4790      	blx	r2
 8008b5c:	0020      	movs	r0, r4
 8008b5e:	e7de      	b.n	8008b1e <_raise_r+0x12>

08008b60 <raise>:
 8008b60:	b510      	push	{r4, lr}
 8008b62:	4b03      	ldr	r3, [pc, #12]	; (8008b70 <raise+0x10>)
 8008b64:	0001      	movs	r1, r0
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	f7ff ffd0 	bl	8008b0c <_raise_r>
 8008b6c:	bd10      	pop	{r4, pc}
 8008b6e:	46c0      	nop			; (mov r8, r8)
 8008b70:	2000000c 	.word	0x2000000c

08008b74 <_kill_r>:
 8008b74:	2300      	movs	r3, #0
 8008b76:	b570      	push	{r4, r5, r6, lr}
 8008b78:	4d06      	ldr	r5, [pc, #24]	; (8008b94 <_kill_r+0x20>)
 8008b7a:	0004      	movs	r4, r0
 8008b7c:	0008      	movs	r0, r1
 8008b7e:	0011      	movs	r1, r2
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	f7f9 fe43 	bl	800280c <_kill>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	d103      	bne.n	8008b92 <_kill_r+0x1e>
 8008b8a:	682b      	ldr	r3, [r5, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d000      	beq.n	8008b92 <_kill_r+0x1e>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	20000320 	.word	0x20000320

08008b98 <_getpid_r>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	f7f9 fe31 	bl	8002800 <_getpid>
 8008b9e:	bd10      	pop	{r4, pc}

08008ba0 <_init>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr

08008bac <_fini>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	46c0      	nop			; (mov r8, r8)
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr
