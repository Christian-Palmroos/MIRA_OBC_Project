
seve_test_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e74  08009e74  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e7c  08009e7c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e80  08009e80  00019e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  20000074  08009ef8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001424  08009ef8  00021424  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139f5  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e84  00000000  00000000  00033a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00036918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  000379f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140b8  00000000  00000000  00038990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016338  00000000  00000000  0004ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071cc0  00000000  00000000  00062d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4a40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004348  00000000  00000000  000d4a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800998c 	.word	0x0800998c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800998c 	.word	0x0800998c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	0010      	movs	r0, r2
 8000248:	4662      	mov	r2, ip
 800024a:	468c      	mov	ip, r1
 800024c:	0019      	movs	r1, r3
 800024e:	4663      	mov	r3, ip
 8000250:	e000      	b.n	8000254 <__aeabi_cdcmpeq>
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_cdcmpeq>:
 8000254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000256:	f001 fcfd 	bl	8001c54 <__ledf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	d401      	bmi.n	8000262 <__aeabi_cdcmpeq+0xe>
 800025e:	2100      	movs	r1, #0
 8000260:	42c8      	cmn	r0, r1
 8000262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000264 <__aeabi_dcmpeq>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f001 fc4d 	bl	8001b04 <__eqdf2>
 800026a:	4240      	negs	r0, r0
 800026c:	3001      	adds	r0, #1
 800026e:	bd10      	pop	{r4, pc}

08000270 <__aeabi_dcmplt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 fcef 	bl	8001c54 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	db01      	blt.n	800027e <__aeabi_dcmplt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmple>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 fce5 	bl	8001c54 <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dd01      	ble.n	8000292 <__aeabi_dcmple+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpgt>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 fc75 	bl	8001b88 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dc01      	bgt.n	80002a6 <__aeabi_dcmpgt+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_dcmpge>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f001 fc6b 	bl	8001b88 <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	da01      	bge.n	80002ba <__aeabi_dcmpge+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			; (mov r8, r8)

080002c0 <__aeabi_uldivmod>:
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d111      	bne.n	80002e8 <__aeabi_uldivmod+0x28>
 80002c4:	2a00      	cmp	r2, #0
 80002c6:	d10f      	bne.n	80002e8 <__aeabi_uldivmod+0x28>
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_uldivmod+0xe>
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d002      	beq.n	80002d6 <__aeabi_uldivmod+0x16>
 80002d0:	2100      	movs	r1, #0
 80002d2:	43c9      	mvns	r1, r1
 80002d4:	0008      	movs	r0, r1
 80002d6:	b407      	push	{r0, r1, r2}
 80002d8:	4802      	ldr	r0, [pc, #8]	; (80002e4 <__aeabi_uldivmod+0x24>)
 80002da:	a102      	add	r1, pc, #8	; (adr r1, 80002e4 <__aeabi_uldivmod+0x24>)
 80002dc:	1840      	adds	r0, r0, r1
 80002de:	9002      	str	r0, [sp, #8]
 80002e0:	bd03      	pop	{r0, r1, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	ffffff5d 	.word	0xffffff5d
 80002e8:	b403      	push	{r0, r1}
 80002ea:	4668      	mov	r0, sp
 80002ec:	b501      	push	{r0, lr}
 80002ee:	9802      	ldr	r0, [sp, #8]
 80002f0:	f000 f878 	bl	80003e4 <__udivmoddi4>
 80002f4:	9b01      	ldr	r3, [sp, #4]
 80002f6:	469e      	mov	lr, r3
 80002f8:	b002      	add	sp, #8
 80002fa:	bc0c      	pop	{r2, r3}
 80002fc:	4770      	bx	lr
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <__aeabi_lmul>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	46ce      	mov	lr, r9
 8000304:	4647      	mov	r7, r8
 8000306:	b580      	push	{r7, lr}
 8000308:	0007      	movs	r7, r0
 800030a:	4699      	mov	r9, r3
 800030c:	0c3b      	lsrs	r3, r7, #16
 800030e:	469c      	mov	ip, r3
 8000310:	0413      	lsls	r3, r2, #16
 8000312:	0c1b      	lsrs	r3, r3, #16
 8000314:	001d      	movs	r5, r3
 8000316:	000e      	movs	r6, r1
 8000318:	4661      	mov	r1, ip
 800031a:	0400      	lsls	r0, r0, #16
 800031c:	0c14      	lsrs	r4, r2, #16
 800031e:	0c00      	lsrs	r0, r0, #16
 8000320:	4345      	muls	r5, r0
 8000322:	434b      	muls	r3, r1
 8000324:	4360      	muls	r0, r4
 8000326:	4361      	muls	r1, r4
 8000328:	18c0      	adds	r0, r0, r3
 800032a:	0c2c      	lsrs	r4, r5, #16
 800032c:	1820      	adds	r0, r4, r0
 800032e:	468c      	mov	ip, r1
 8000330:	4283      	cmp	r3, r0
 8000332:	d903      	bls.n	800033c <__aeabi_lmul+0x3c>
 8000334:	2380      	movs	r3, #128	; 0x80
 8000336:	025b      	lsls	r3, r3, #9
 8000338:	4698      	mov	r8, r3
 800033a:	44c4      	add	ip, r8
 800033c:	4649      	mov	r1, r9
 800033e:	4379      	muls	r1, r7
 8000340:	4372      	muls	r2, r6
 8000342:	0c03      	lsrs	r3, r0, #16
 8000344:	4463      	add	r3, ip
 8000346:	042d      	lsls	r5, r5, #16
 8000348:	0c2d      	lsrs	r5, r5, #16
 800034a:	18c9      	adds	r1, r1, r3
 800034c:	0400      	lsls	r0, r0, #16
 800034e:	1940      	adds	r0, r0, r5
 8000350:	1889      	adds	r1, r1, r2
 8000352:	bcc0      	pop	{r6, r7}
 8000354:	46b9      	mov	r9, r7
 8000356:	46b0      	mov	r8, r6
 8000358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)

0800035c <__aeabi_f2uiz>:
 800035c:	219e      	movs	r1, #158	; 0x9e
 800035e:	b510      	push	{r4, lr}
 8000360:	05c9      	lsls	r1, r1, #23
 8000362:	1c04      	adds	r4, r0, #0
 8000364:	f002 fc2e 	bl	8002bc4 <__aeabi_fcmpge>
 8000368:	2800      	cmp	r0, #0
 800036a:	d103      	bne.n	8000374 <__aeabi_f2uiz+0x18>
 800036c:	1c20      	adds	r0, r4, #0
 800036e:	f000 fd77 	bl	8000e60 <__aeabi_f2iz>
 8000372:	bd10      	pop	{r4, pc}
 8000374:	219e      	movs	r1, #158	; 0x9e
 8000376:	1c20      	adds	r0, r4, #0
 8000378:	05c9      	lsls	r1, r1, #23
 800037a:	f000 fbc3 	bl	8000b04 <__aeabi_fsub>
 800037e:	f000 fd6f 	bl	8000e60 <__aeabi_f2iz>
 8000382:	2380      	movs	r3, #128	; 0x80
 8000384:	061b      	lsls	r3, r3, #24
 8000386:	469c      	mov	ip, r3
 8000388:	4460      	add	r0, ip
 800038a:	e7f2      	b.n	8000372 <__aeabi_f2uiz+0x16>

0800038c <__aeabi_l2d>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	0006      	movs	r6, r0
 8000390:	0008      	movs	r0, r1
 8000392:	f002 fac1 	bl	8002918 <__aeabi_i2d>
 8000396:	2200      	movs	r2, #0
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <__aeabi_l2d+0x28>)
 800039a:	f001 fcbf 	bl	8001d1c <__aeabi_dmul>
 800039e:	000d      	movs	r5, r1
 80003a0:	0004      	movs	r4, r0
 80003a2:	0030      	movs	r0, r6
 80003a4:	f002 fae8 	bl	8002978 <__aeabi_ui2d>
 80003a8:	002b      	movs	r3, r5
 80003aa:	0022      	movs	r2, r4
 80003ac:	f000 fd78 	bl	8000ea0 <__aeabi_dadd>
 80003b0:	bd70      	pop	{r4, r5, r6, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	41f00000 	.word	0x41f00000

080003b8 <__aeabi_ul2d>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	0006      	movs	r6, r0
 80003bc:	0008      	movs	r0, r1
 80003be:	f002 fadb 	bl	8002978 <__aeabi_ui2d>
 80003c2:	2200      	movs	r2, #0
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <__aeabi_ul2d+0x28>)
 80003c6:	f001 fca9 	bl	8001d1c <__aeabi_dmul>
 80003ca:	000d      	movs	r5, r1
 80003cc:	0004      	movs	r4, r0
 80003ce:	0030      	movs	r0, r6
 80003d0:	f002 fad2 	bl	8002978 <__aeabi_ui2d>
 80003d4:	002b      	movs	r3, r5
 80003d6:	0022      	movs	r2, r4
 80003d8:	f000 fd62 	bl	8000ea0 <__aeabi_dadd>
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	41f00000 	.word	0x41f00000

080003e4 <__udivmoddi4>:
 80003e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003e6:	4657      	mov	r7, sl
 80003e8:	464e      	mov	r6, r9
 80003ea:	4645      	mov	r5, r8
 80003ec:	46de      	mov	lr, fp
 80003ee:	b5e0      	push	{r5, r6, r7, lr}
 80003f0:	0004      	movs	r4, r0
 80003f2:	000d      	movs	r5, r1
 80003f4:	4692      	mov	sl, r2
 80003f6:	4699      	mov	r9, r3
 80003f8:	b083      	sub	sp, #12
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d830      	bhi.n	8000460 <__udivmoddi4+0x7c>
 80003fe:	d02d      	beq.n	800045c <__udivmoddi4+0x78>
 8000400:	4649      	mov	r1, r9
 8000402:	4650      	mov	r0, sl
 8000404:	f002 fc06 	bl	8002c14 <__clzdi2>
 8000408:	0029      	movs	r1, r5
 800040a:	0006      	movs	r6, r0
 800040c:	0020      	movs	r0, r4
 800040e:	f002 fc01 	bl	8002c14 <__clzdi2>
 8000412:	1a33      	subs	r3, r6, r0
 8000414:	4698      	mov	r8, r3
 8000416:	3b20      	subs	r3, #32
 8000418:	469b      	mov	fp, r3
 800041a:	d433      	bmi.n	8000484 <__udivmoddi4+0xa0>
 800041c:	465a      	mov	r2, fp
 800041e:	4653      	mov	r3, sl
 8000420:	4093      	lsls	r3, r2
 8000422:	4642      	mov	r2, r8
 8000424:	001f      	movs	r7, r3
 8000426:	4653      	mov	r3, sl
 8000428:	4093      	lsls	r3, r2
 800042a:	001e      	movs	r6, r3
 800042c:	42af      	cmp	r7, r5
 800042e:	d83a      	bhi.n	80004a6 <__udivmoddi4+0xc2>
 8000430:	42af      	cmp	r7, r5
 8000432:	d100      	bne.n	8000436 <__udivmoddi4+0x52>
 8000434:	e078      	b.n	8000528 <__udivmoddi4+0x144>
 8000436:	465b      	mov	r3, fp
 8000438:	1ba4      	subs	r4, r4, r6
 800043a:	41bd      	sbcs	r5, r7
 800043c:	2b00      	cmp	r3, #0
 800043e:	da00      	bge.n	8000442 <__udivmoddi4+0x5e>
 8000440:	e075      	b.n	800052e <__udivmoddi4+0x14a>
 8000442:	2200      	movs	r2, #0
 8000444:	2300      	movs	r3, #0
 8000446:	9200      	str	r2, [sp, #0]
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	2301      	movs	r3, #1
 800044c:	465a      	mov	r2, fp
 800044e:	4093      	lsls	r3, r2
 8000450:	9301      	str	r3, [sp, #4]
 8000452:	2301      	movs	r3, #1
 8000454:	4642      	mov	r2, r8
 8000456:	4093      	lsls	r3, r2
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	e028      	b.n	80004ae <__udivmoddi4+0xca>
 800045c:	4282      	cmp	r2, r0
 800045e:	d9cf      	bls.n	8000400 <__udivmoddi4+0x1c>
 8000460:	2200      	movs	r2, #0
 8000462:	2300      	movs	r3, #0
 8000464:	9200      	str	r2, [sp, #0]
 8000466:	9301      	str	r3, [sp, #4]
 8000468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <__udivmoddi4+0x8e>
 800046e:	601c      	str	r4, [r3, #0]
 8000470:	605d      	str	r5, [r3, #4]
 8000472:	9800      	ldr	r0, [sp, #0]
 8000474:	9901      	ldr	r1, [sp, #4]
 8000476:	b003      	add	sp, #12
 8000478:	bcf0      	pop	{r4, r5, r6, r7}
 800047a:	46bb      	mov	fp, r7
 800047c:	46b2      	mov	sl, r6
 800047e:	46a9      	mov	r9, r5
 8000480:	46a0      	mov	r8, r4
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000484:	4642      	mov	r2, r8
 8000486:	2320      	movs	r3, #32
 8000488:	1a9b      	subs	r3, r3, r2
 800048a:	4652      	mov	r2, sl
 800048c:	40da      	lsrs	r2, r3
 800048e:	4641      	mov	r1, r8
 8000490:	0013      	movs	r3, r2
 8000492:	464a      	mov	r2, r9
 8000494:	408a      	lsls	r2, r1
 8000496:	0017      	movs	r7, r2
 8000498:	4642      	mov	r2, r8
 800049a:	431f      	orrs	r7, r3
 800049c:	4653      	mov	r3, sl
 800049e:	4093      	lsls	r3, r2
 80004a0:	001e      	movs	r6, r3
 80004a2:	42af      	cmp	r7, r5
 80004a4:	d9c4      	bls.n	8000430 <__udivmoddi4+0x4c>
 80004a6:	2200      	movs	r2, #0
 80004a8:	2300      	movs	r3, #0
 80004aa:	9200      	str	r2, [sp, #0]
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	4643      	mov	r3, r8
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0d9      	beq.n	8000468 <__udivmoddi4+0x84>
 80004b4:	07fb      	lsls	r3, r7, #31
 80004b6:	0872      	lsrs	r2, r6, #1
 80004b8:	431a      	orrs	r2, r3
 80004ba:	4646      	mov	r6, r8
 80004bc:	087b      	lsrs	r3, r7, #1
 80004be:	e00e      	b.n	80004de <__udivmoddi4+0xfa>
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	d101      	bne.n	80004c8 <__udivmoddi4+0xe4>
 80004c4:	42a2      	cmp	r2, r4
 80004c6:	d80c      	bhi.n	80004e2 <__udivmoddi4+0xfe>
 80004c8:	1aa4      	subs	r4, r4, r2
 80004ca:	419d      	sbcs	r5, r3
 80004cc:	2001      	movs	r0, #1
 80004ce:	1924      	adds	r4, r4, r4
 80004d0:	416d      	adcs	r5, r5
 80004d2:	2100      	movs	r1, #0
 80004d4:	3e01      	subs	r6, #1
 80004d6:	1824      	adds	r4, r4, r0
 80004d8:	414d      	adcs	r5, r1
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d006      	beq.n	80004ec <__udivmoddi4+0x108>
 80004de:	42ab      	cmp	r3, r5
 80004e0:	d9ee      	bls.n	80004c0 <__udivmoddi4+0xdc>
 80004e2:	3e01      	subs	r6, #1
 80004e4:	1924      	adds	r4, r4, r4
 80004e6:	416d      	adcs	r5, r5
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d1f8      	bne.n	80004de <__udivmoddi4+0xfa>
 80004ec:	9800      	ldr	r0, [sp, #0]
 80004ee:	9901      	ldr	r1, [sp, #4]
 80004f0:	465b      	mov	r3, fp
 80004f2:	1900      	adds	r0, r0, r4
 80004f4:	4169      	adcs	r1, r5
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db24      	blt.n	8000544 <__udivmoddi4+0x160>
 80004fa:	002b      	movs	r3, r5
 80004fc:	465a      	mov	r2, fp
 80004fe:	4644      	mov	r4, r8
 8000500:	40d3      	lsrs	r3, r2
 8000502:	002a      	movs	r2, r5
 8000504:	40e2      	lsrs	r2, r4
 8000506:	001c      	movs	r4, r3
 8000508:	465b      	mov	r3, fp
 800050a:	0015      	movs	r5, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	db2a      	blt.n	8000566 <__udivmoddi4+0x182>
 8000510:	0026      	movs	r6, r4
 8000512:	409e      	lsls	r6, r3
 8000514:	0033      	movs	r3, r6
 8000516:	0026      	movs	r6, r4
 8000518:	4647      	mov	r7, r8
 800051a:	40be      	lsls	r6, r7
 800051c:	0032      	movs	r2, r6
 800051e:	1a80      	subs	r0, r0, r2
 8000520:	4199      	sbcs	r1, r3
 8000522:	9000      	str	r0, [sp, #0]
 8000524:	9101      	str	r1, [sp, #4]
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x84>
 8000528:	42a3      	cmp	r3, r4
 800052a:	d8bc      	bhi.n	80004a6 <__udivmoddi4+0xc2>
 800052c:	e783      	b.n	8000436 <__udivmoddi4+0x52>
 800052e:	4642      	mov	r2, r8
 8000530:	2320      	movs	r3, #32
 8000532:	2100      	movs	r1, #0
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	2200      	movs	r2, #0
 8000538:	9100      	str	r1, [sp, #0]
 800053a:	9201      	str	r2, [sp, #4]
 800053c:	2201      	movs	r2, #1
 800053e:	40da      	lsrs	r2, r3
 8000540:	9201      	str	r2, [sp, #4]
 8000542:	e786      	b.n	8000452 <__udivmoddi4+0x6e>
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	002a      	movs	r2, r5
 800054c:	4646      	mov	r6, r8
 800054e:	409a      	lsls	r2, r3
 8000550:	0023      	movs	r3, r4
 8000552:	40f3      	lsrs	r3, r6
 8000554:	4644      	mov	r4, r8
 8000556:	4313      	orrs	r3, r2
 8000558:	002a      	movs	r2, r5
 800055a:	40e2      	lsrs	r2, r4
 800055c:	001c      	movs	r4, r3
 800055e:	465b      	mov	r3, fp
 8000560:	0015      	movs	r5, r2
 8000562:	2b00      	cmp	r3, #0
 8000564:	dad4      	bge.n	8000510 <__udivmoddi4+0x12c>
 8000566:	4642      	mov	r2, r8
 8000568:	002f      	movs	r7, r5
 800056a:	2320      	movs	r3, #32
 800056c:	0026      	movs	r6, r4
 800056e:	4097      	lsls	r7, r2
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	40de      	lsrs	r6, r3
 8000574:	003b      	movs	r3, r7
 8000576:	4333      	orrs	r3, r6
 8000578:	e7cd      	b.n	8000516 <__udivmoddi4+0x132>
 800057a:	46c0      	nop			; (mov r8, r8)

0800057c <__aeabi_fadd>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	46c6      	mov	lr, r8
 8000580:	0243      	lsls	r3, r0, #9
 8000582:	0a5b      	lsrs	r3, r3, #9
 8000584:	024e      	lsls	r6, r1, #9
 8000586:	0045      	lsls	r5, r0, #1
 8000588:	004f      	lsls	r7, r1, #1
 800058a:	00da      	lsls	r2, r3, #3
 800058c:	0fc4      	lsrs	r4, r0, #31
 800058e:	469c      	mov	ip, r3
 8000590:	0a70      	lsrs	r0, r6, #9
 8000592:	4690      	mov	r8, r2
 8000594:	b500      	push	{lr}
 8000596:	0e2d      	lsrs	r5, r5, #24
 8000598:	0e3f      	lsrs	r7, r7, #24
 800059a:	0fc9      	lsrs	r1, r1, #31
 800059c:	09b6      	lsrs	r6, r6, #6
 800059e:	428c      	cmp	r4, r1
 80005a0:	d04b      	beq.n	800063a <__aeabi_fadd+0xbe>
 80005a2:	1bea      	subs	r2, r5, r7
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	dd36      	ble.n	8000616 <__aeabi_fadd+0x9a>
 80005a8:	2f00      	cmp	r7, #0
 80005aa:	d061      	beq.n	8000670 <__aeabi_fadd+0xf4>
 80005ac:	2dff      	cmp	r5, #255	; 0xff
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x36>
 80005b0:	e0ad      	b.n	800070e <__aeabi_fadd+0x192>
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	04db      	lsls	r3, r3, #19
 80005b6:	431e      	orrs	r6, r3
 80005b8:	2a1b      	cmp	r2, #27
 80005ba:	dc00      	bgt.n	80005be <__aeabi_fadd+0x42>
 80005bc:	e0d3      	b.n	8000766 <__aeabi_fadd+0x1ea>
 80005be:	2001      	movs	r0, #1
 80005c0:	4643      	mov	r3, r8
 80005c2:	1a18      	subs	r0, r3, r0
 80005c4:	0143      	lsls	r3, r0, #5
 80005c6:	d400      	bmi.n	80005ca <__aeabi_fadd+0x4e>
 80005c8:	e08c      	b.n	80006e4 <__aeabi_fadd+0x168>
 80005ca:	0180      	lsls	r0, r0, #6
 80005cc:	0987      	lsrs	r7, r0, #6
 80005ce:	0038      	movs	r0, r7
 80005d0:	f002 fb02 	bl	8002bd8 <__clzsi2>
 80005d4:	3805      	subs	r0, #5
 80005d6:	4087      	lsls	r7, r0
 80005d8:	4285      	cmp	r5, r0
 80005da:	dc00      	bgt.n	80005de <__aeabi_fadd+0x62>
 80005dc:	e0b6      	b.n	800074c <__aeabi_fadd+0x1d0>
 80005de:	1a2d      	subs	r5, r5, r0
 80005e0:	48b3      	ldr	r0, [pc, #716]	; (80008b0 <__aeabi_fadd+0x334>)
 80005e2:	4038      	ands	r0, r7
 80005e4:	0743      	lsls	r3, r0, #29
 80005e6:	d004      	beq.n	80005f2 <__aeabi_fadd+0x76>
 80005e8:	230f      	movs	r3, #15
 80005ea:	4003      	ands	r3, r0
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0x76>
 80005f0:	3004      	adds	r0, #4
 80005f2:	0143      	lsls	r3, r0, #5
 80005f4:	d400      	bmi.n	80005f8 <__aeabi_fadd+0x7c>
 80005f6:	e078      	b.n	80006ea <__aeabi_fadd+0x16e>
 80005f8:	1c6a      	adds	r2, r5, #1
 80005fa:	2dfe      	cmp	r5, #254	; 0xfe
 80005fc:	d065      	beq.n	80006ca <__aeabi_fadd+0x14e>
 80005fe:	0180      	lsls	r0, r0, #6
 8000600:	0a43      	lsrs	r3, r0, #9
 8000602:	469c      	mov	ip, r3
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	4663      	mov	r3, ip
 8000608:	05d0      	lsls	r0, r2, #23
 800060a:	4318      	orrs	r0, r3
 800060c:	07e4      	lsls	r4, r4, #31
 800060e:	4320      	orrs	r0, r4
 8000610:	bc80      	pop	{r7}
 8000612:	46b8      	mov	r8, r7
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	2a00      	cmp	r2, #0
 8000618:	d035      	beq.n	8000686 <__aeabi_fadd+0x10a>
 800061a:	1b7a      	subs	r2, r7, r5
 800061c:	2d00      	cmp	r5, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0xa6>
 8000620:	e0af      	b.n	8000782 <__aeabi_fadd+0x206>
 8000622:	4643      	mov	r3, r8
 8000624:	2b00      	cmp	r3, #0
 8000626:	d100      	bne.n	800062a <__aeabi_fadd+0xae>
 8000628:	e0a7      	b.n	800077a <__aeabi_fadd+0x1fe>
 800062a:	1e53      	subs	r3, r2, #1
 800062c:	2a01      	cmp	r2, #1
 800062e:	d100      	bne.n	8000632 <__aeabi_fadd+0xb6>
 8000630:	e12f      	b.n	8000892 <__aeabi_fadd+0x316>
 8000632:	2aff      	cmp	r2, #255	; 0xff
 8000634:	d069      	beq.n	800070a <__aeabi_fadd+0x18e>
 8000636:	001a      	movs	r2, r3
 8000638:	e0aa      	b.n	8000790 <__aeabi_fadd+0x214>
 800063a:	1be9      	subs	r1, r5, r7
 800063c:	2900      	cmp	r1, #0
 800063e:	dd70      	ble.n	8000722 <__aeabi_fadd+0x1a6>
 8000640:	2f00      	cmp	r7, #0
 8000642:	d037      	beq.n	80006b4 <__aeabi_fadd+0x138>
 8000644:	2dff      	cmp	r5, #255	; 0xff
 8000646:	d062      	beq.n	800070e <__aeabi_fadd+0x192>
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	04db      	lsls	r3, r3, #19
 800064c:	431e      	orrs	r6, r3
 800064e:	291b      	cmp	r1, #27
 8000650:	dc00      	bgt.n	8000654 <__aeabi_fadd+0xd8>
 8000652:	e0b0      	b.n	80007b6 <__aeabi_fadd+0x23a>
 8000654:	2001      	movs	r0, #1
 8000656:	4440      	add	r0, r8
 8000658:	0143      	lsls	r3, r0, #5
 800065a:	d543      	bpl.n	80006e4 <__aeabi_fadd+0x168>
 800065c:	3501      	adds	r5, #1
 800065e:	2dff      	cmp	r5, #255	; 0xff
 8000660:	d033      	beq.n	80006ca <__aeabi_fadd+0x14e>
 8000662:	2301      	movs	r3, #1
 8000664:	4a93      	ldr	r2, [pc, #588]	; (80008b4 <__aeabi_fadd+0x338>)
 8000666:	4003      	ands	r3, r0
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	4010      	ands	r0, r2
 800066c:	4318      	orrs	r0, r3
 800066e:	e7b9      	b.n	80005e4 <__aeabi_fadd+0x68>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0xfa>
 8000674:	e083      	b.n	800077e <__aeabi_fadd+0x202>
 8000676:	1e51      	subs	r1, r2, #1
 8000678:	2a01      	cmp	r2, #1
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0x102>
 800067c:	e0d8      	b.n	8000830 <__aeabi_fadd+0x2b4>
 800067e:	2aff      	cmp	r2, #255	; 0xff
 8000680:	d045      	beq.n	800070e <__aeabi_fadd+0x192>
 8000682:	000a      	movs	r2, r1
 8000684:	e798      	b.n	80005b8 <__aeabi_fadd+0x3c>
 8000686:	27fe      	movs	r7, #254	; 0xfe
 8000688:	1c6a      	adds	r2, r5, #1
 800068a:	4217      	tst	r7, r2
 800068c:	d000      	beq.n	8000690 <__aeabi_fadd+0x114>
 800068e:	e086      	b.n	800079e <__aeabi_fadd+0x222>
 8000690:	2d00      	cmp	r5, #0
 8000692:	d000      	beq.n	8000696 <__aeabi_fadd+0x11a>
 8000694:	e0b7      	b.n	8000806 <__aeabi_fadd+0x28a>
 8000696:	4643      	mov	r3, r8
 8000698:	2b00      	cmp	r3, #0
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x122>
 800069c:	e0f3      	b.n	8000886 <__aeabi_fadd+0x30a>
 800069e:	2200      	movs	r2, #0
 80006a0:	2e00      	cmp	r6, #0
 80006a2:	d0b0      	beq.n	8000606 <__aeabi_fadd+0x8a>
 80006a4:	1b98      	subs	r0, r3, r6
 80006a6:	0143      	lsls	r3, r0, #5
 80006a8:	d400      	bmi.n	80006ac <__aeabi_fadd+0x130>
 80006aa:	e0fa      	b.n	80008a2 <__aeabi_fadd+0x326>
 80006ac:	4643      	mov	r3, r8
 80006ae:	000c      	movs	r4, r1
 80006b0:	1af0      	subs	r0, r6, r3
 80006b2:	e797      	b.n	80005e4 <__aeabi_fadd+0x68>
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_fadd+0x13e>
 80006b8:	e0c8      	b.n	800084c <__aeabi_fadd+0x2d0>
 80006ba:	1e4a      	subs	r2, r1, #1
 80006bc:	2901      	cmp	r1, #1
 80006be:	d100      	bne.n	80006c2 <__aeabi_fadd+0x146>
 80006c0:	e0ae      	b.n	8000820 <__aeabi_fadd+0x2a4>
 80006c2:	29ff      	cmp	r1, #255	; 0xff
 80006c4:	d023      	beq.n	800070e <__aeabi_fadd+0x192>
 80006c6:	0011      	movs	r1, r2
 80006c8:	e7c1      	b.n	800064e <__aeabi_fadd+0xd2>
 80006ca:	2300      	movs	r3, #0
 80006cc:	22ff      	movs	r2, #255	; 0xff
 80006ce:	469c      	mov	ip, r3
 80006d0:	e799      	b.n	8000606 <__aeabi_fadd+0x8a>
 80006d2:	21fe      	movs	r1, #254	; 0xfe
 80006d4:	1c6a      	adds	r2, r5, #1
 80006d6:	4211      	tst	r1, r2
 80006d8:	d077      	beq.n	80007ca <__aeabi_fadd+0x24e>
 80006da:	2aff      	cmp	r2, #255	; 0xff
 80006dc:	d0f5      	beq.n	80006ca <__aeabi_fadd+0x14e>
 80006de:	0015      	movs	r5, r2
 80006e0:	4446      	add	r6, r8
 80006e2:	0870      	lsrs	r0, r6, #1
 80006e4:	0743      	lsls	r3, r0, #29
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0x16e>
 80006e8:	e77e      	b.n	80005e8 <__aeabi_fadd+0x6c>
 80006ea:	08c3      	lsrs	r3, r0, #3
 80006ec:	2dff      	cmp	r5, #255	; 0xff
 80006ee:	d00e      	beq.n	800070e <__aeabi_fadd+0x192>
 80006f0:	025b      	lsls	r3, r3, #9
 80006f2:	0a5b      	lsrs	r3, r3, #9
 80006f4:	469c      	mov	ip, r3
 80006f6:	b2ea      	uxtb	r2, r5
 80006f8:	e785      	b.n	8000606 <__aeabi_fadd+0x8a>
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d007      	beq.n	800070e <__aeabi_fadd+0x192>
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	03d2      	lsls	r2, r2, #15
 8000702:	4213      	tst	r3, r2
 8000704:	d003      	beq.n	800070e <__aeabi_fadd+0x192>
 8000706:	4210      	tst	r0, r2
 8000708:	d101      	bne.n	800070e <__aeabi_fadd+0x192>
 800070a:	000c      	movs	r4, r1
 800070c:	0003      	movs	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0db      	beq.n	80006ca <__aeabi_fadd+0x14e>
 8000712:	2080      	movs	r0, #128	; 0x80
 8000714:	03c0      	lsls	r0, r0, #15
 8000716:	4318      	orrs	r0, r3
 8000718:	0240      	lsls	r0, r0, #9
 800071a:	0a43      	lsrs	r3, r0, #9
 800071c:	469c      	mov	ip, r3
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	e771      	b.n	8000606 <__aeabi_fadd+0x8a>
 8000722:	2900      	cmp	r1, #0
 8000724:	d0d5      	beq.n	80006d2 <__aeabi_fadd+0x156>
 8000726:	1b7a      	subs	r2, r7, r5
 8000728:	2d00      	cmp	r5, #0
 800072a:	d160      	bne.n	80007ee <__aeabi_fadd+0x272>
 800072c:	4643      	mov	r3, r8
 800072e:	2b00      	cmp	r3, #0
 8000730:	d024      	beq.n	800077c <__aeabi_fadd+0x200>
 8000732:	1e53      	subs	r3, r2, #1
 8000734:	2a01      	cmp	r2, #1
 8000736:	d073      	beq.n	8000820 <__aeabi_fadd+0x2a4>
 8000738:	2aff      	cmp	r2, #255	; 0xff
 800073a:	d0e7      	beq.n	800070c <__aeabi_fadd+0x190>
 800073c:	001a      	movs	r2, r3
 800073e:	2a1b      	cmp	r2, #27
 8000740:	dc00      	bgt.n	8000744 <__aeabi_fadd+0x1c8>
 8000742:	e085      	b.n	8000850 <__aeabi_fadd+0x2d4>
 8000744:	2001      	movs	r0, #1
 8000746:	003d      	movs	r5, r7
 8000748:	1980      	adds	r0, r0, r6
 800074a:	e785      	b.n	8000658 <__aeabi_fadd+0xdc>
 800074c:	2320      	movs	r3, #32
 800074e:	003a      	movs	r2, r7
 8000750:	1b45      	subs	r5, r0, r5
 8000752:	0038      	movs	r0, r7
 8000754:	3501      	adds	r5, #1
 8000756:	40ea      	lsrs	r2, r5
 8000758:	1b5d      	subs	r5, r3, r5
 800075a:	40a8      	lsls	r0, r5
 800075c:	1e43      	subs	r3, r0, #1
 800075e:	4198      	sbcs	r0, r3
 8000760:	2500      	movs	r5, #0
 8000762:	4310      	orrs	r0, r2
 8000764:	e73e      	b.n	80005e4 <__aeabi_fadd+0x68>
 8000766:	2320      	movs	r3, #32
 8000768:	0030      	movs	r0, r6
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	0031      	movs	r1, r6
 800076e:	4098      	lsls	r0, r3
 8000770:	40d1      	lsrs	r1, r2
 8000772:	1e43      	subs	r3, r0, #1
 8000774:	4198      	sbcs	r0, r3
 8000776:	4308      	orrs	r0, r1
 8000778:	e722      	b.n	80005c0 <__aeabi_fadd+0x44>
 800077a:	000c      	movs	r4, r1
 800077c:	0003      	movs	r3, r0
 800077e:	0015      	movs	r5, r2
 8000780:	e7b4      	b.n	80006ec <__aeabi_fadd+0x170>
 8000782:	2fff      	cmp	r7, #255	; 0xff
 8000784:	d0c1      	beq.n	800070a <__aeabi_fadd+0x18e>
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	4640      	mov	r0, r8
 800078a:	04db      	lsls	r3, r3, #19
 800078c:	4318      	orrs	r0, r3
 800078e:	4680      	mov	r8, r0
 8000790:	2a1b      	cmp	r2, #27
 8000792:	dd51      	ble.n	8000838 <__aeabi_fadd+0x2bc>
 8000794:	2001      	movs	r0, #1
 8000796:	000c      	movs	r4, r1
 8000798:	003d      	movs	r5, r7
 800079a:	1a30      	subs	r0, r6, r0
 800079c:	e712      	b.n	80005c4 <__aeabi_fadd+0x48>
 800079e:	4643      	mov	r3, r8
 80007a0:	1b9f      	subs	r7, r3, r6
 80007a2:	017b      	lsls	r3, r7, #5
 80007a4:	d42b      	bmi.n	80007fe <__aeabi_fadd+0x282>
 80007a6:	2f00      	cmp	r7, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x230>
 80007aa:	e710      	b.n	80005ce <__aeabi_fadd+0x52>
 80007ac:	2300      	movs	r3, #0
 80007ae:	2400      	movs	r4, #0
 80007b0:	2200      	movs	r2, #0
 80007b2:	469c      	mov	ip, r3
 80007b4:	e727      	b.n	8000606 <__aeabi_fadd+0x8a>
 80007b6:	2320      	movs	r3, #32
 80007b8:	0032      	movs	r2, r6
 80007ba:	0030      	movs	r0, r6
 80007bc:	40ca      	lsrs	r2, r1
 80007be:	1a59      	subs	r1, r3, r1
 80007c0:	4088      	lsls	r0, r1
 80007c2:	1e43      	subs	r3, r0, #1
 80007c4:	4198      	sbcs	r0, r3
 80007c6:	4310      	orrs	r0, r2
 80007c8:	e745      	b.n	8000656 <__aeabi_fadd+0xda>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d14a      	bne.n	8000864 <__aeabi_fadd+0x2e8>
 80007ce:	4643      	mov	r3, r8
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d063      	beq.n	800089c <__aeabi_fadd+0x320>
 80007d4:	2200      	movs	r2, #0
 80007d6:	2e00      	cmp	r6, #0
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x260>
 80007da:	e714      	b.n	8000606 <__aeabi_fadd+0x8a>
 80007dc:	0030      	movs	r0, r6
 80007de:	4440      	add	r0, r8
 80007e0:	0143      	lsls	r3, r0, #5
 80007e2:	d400      	bmi.n	80007e6 <__aeabi_fadd+0x26a>
 80007e4:	e77e      	b.n	80006e4 <__aeabi_fadd+0x168>
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <__aeabi_fadd+0x334>)
 80007e8:	3501      	adds	r5, #1
 80007ea:	4018      	ands	r0, r3
 80007ec:	e77a      	b.n	80006e4 <__aeabi_fadd+0x168>
 80007ee:	2fff      	cmp	r7, #255	; 0xff
 80007f0:	d08c      	beq.n	800070c <__aeabi_fadd+0x190>
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	4641      	mov	r1, r8
 80007f6:	04db      	lsls	r3, r3, #19
 80007f8:	4319      	orrs	r1, r3
 80007fa:	4688      	mov	r8, r1
 80007fc:	e79f      	b.n	800073e <__aeabi_fadd+0x1c2>
 80007fe:	4643      	mov	r3, r8
 8000800:	000c      	movs	r4, r1
 8000802:	1af7      	subs	r7, r6, r3
 8000804:	e6e3      	b.n	80005ce <__aeabi_fadd+0x52>
 8000806:	4642      	mov	r2, r8
 8000808:	2a00      	cmp	r2, #0
 800080a:	d000      	beq.n	800080e <__aeabi_fadd+0x292>
 800080c:	e775      	b.n	80006fa <__aeabi_fadd+0x17e>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d000      	beq.n	8000814 <__aeabi_fadd+0x298>
 8000812:	e77a      	b.n	800070a <__aeabi_fadd+0x18e>
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	03db      	lsls	r3, r3, #15
 8000818:	2400      	movs	r4, #0
 800081a:	469c      	mov	ip, r3
 800081c:	22ff      	movs	r2, #255	; 0xff
 800081e:	e6f2      	b.n	8000606 <__aeabi_fadd+0x8a>
 8000820:	0030      	movs	r0, r6
 8000822:	4440      	add	r0, r8
 8000824:	2501      	movs	r5, #1
 8000826:	0143      	lsls	r3, r0, #5
 8000828:	d400      	bmi.n	800082c <__aeabi_fadd+0x2b0>
 800082a:	e75b      	b.n	80006e4 <__aeabi_fadd+0x168>
 800082c:	2502      	movs	r5, #2
 800082e:	e718      	b.n	8000662 <__aeabi_fadd+0xe6>
 8000830:	4643      	mov	r3, r8
 8000832:	2501      	movs	r5, #1
 8000834:	1b98      	subs	r0, r3, r6
 8000836:	e6c5      	b.n	80005c4 <__aeabi_fadd+0x48>
 8000838:	2320      	movs	r3, #32
 800083a:	4644      	mov	r4, r8
 800083c:	4640      	mov	r0, r8
 800083e:	40d4      	lsrs	r4, r2
 8000840:	1a9a      	subs	r2, r3, r2
 8000842:	4090      	lsls	r0, r2
 8000844:	1e43      	subs	r3, r0, #1
 8000846:	4198      	sbcs	r0, r3
 8000848:	4320      	orrs	r0, r4
 800084a:	e7a4      	b.n	8000796 <__aeabi_fadd+0x21a>
 800084c:	000d      	movs	r5, r1
 800084e:	e74d      	b.n	80006ec <__aeabi_fadd+0x170>
 8000850:	2320      	movs	r3, #32
 8000852:	4641      	mov	r1, r8
 8000854:	4640      	mov	r0, r8
 8000856:	40d1      	lsrs	r1, r2
 8000858:	1a9a      	subs	r2, r3, r2
 800085a:	4090      	lsls	r0, r2
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	4308      	orrs	r0, r1
 8000862:	e770      	b.n	8000746 <__aeabi_fadd+0x1ca>
 8000864:	4642      	mov	r2, r8
 8000866:	2a00      	cmp	r2, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x2f0>
 800086a:	e74f      	b.n	800070c <__aeabi_fadd+0x190>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x2f6>
 8000870:	e74d      	b.n	800070e <__aeabi_fadd+0x192>
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	03d2      	lsls	r2, r2, #15
 8000876:	4213      	tst	r3, r2
 8000878:	d100      	bne.n	800087c <__aeabi_fadd+0x300>
 800087a:	e748      	b.n	800070e <__aeabi_fadd+0x192>
 800087c:	4210      	tst	r0, r2
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x306>
 8000880:	e745      	b.n	800070e <__aeabi_fadd+0x192>
 8000882:	0003      	movs	r3, r0
 8000884:	e743      	b.n	800070e <__aeabi_fadd+0x192>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d090      	beq.n	80007ac <__aeabi_fadd+0x230>
 800088a:	000c      	movs	r4, r1
 800088c:	4684      	mov	ip, r0
 800088e:	2200      	movs	r2, #0
 8000890:	e6b9      	b.n	8000606 <__aeabi_fadd+0x8a>
 8000892:	4643      	mov	r3, r8
 8000894:	000c      	movs	r4, r1
 8000896:	1af0      	subs	r0, r6, r3
 8000898:	3501      	adds	r5, #1
 800089a:	e693      	b.n	80005c4 <__aeabi_fadd+0x48>
 800089c:	4684      	mov	ip, r0
 800089e:	2200      	movs	r2, #0
 80008a0:	e6b1      	b.n	8000606 <__aeabi_fadd+0x8a>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	d000      	beq.n	80008a8 <__aeabi_fadd+0x32c>
 80008a6:	e71d      	b.n	80006e4 <__aeabi_fadd+0x168>
 80008a8:	2300      	movs	r3, #0
 80008aa:	2400      	movs	r4, #0
 80008ac:	469c      	mov	ip, r3
 80008ae:	e6aa      	b.n	8000606 <__aeabi_fadd+0x8a>
 80008b0:	fbffffff 	.word	0xfbffffff
 80008b4:	7dffffff 	.word	0x7dffffff

080008b8 <__aeabi_fmul>:
 80008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ba:	464f      	mov	r7, r9
 80008bc:	4646      	mov	r6, r8
 80008be:	46d6      	mov	lr, sl
 80008c0:	0244      	lsls	r4, r0, #9
 80008c2:	0045      	lsls	r5, r0, #1
 80008c4:	b5c0      	push	{r6, r7, lr}
 80008c6:	0a64      	lsrs	r4, r4, #9
 80008c8:	1c0f      	adds	r7, r1, #0
 80008ca:	0e2d      	lsrs	r5, r5, #24
 80008cc:	0fc6      	lsrs	r6, r0, #31
 80008ce:	2d00      	cmp	r5, #0
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fmul+0x1c>
 80008d2:	e08d      	b.n	80009f0 <__aeabi_fmul+0x138>
 80008d4:	2dff      	cmp	r5, #255	; 0xff
 80008d6:	d100      	bne.n	80008da <__aeabi_fmul+0x22>
 80008d8:	e092      	b.n	8000a00 <__aeabi_fmul+0x148>
 80008da:	2300      	movs	r3, #0
 80008dc:	2080      	movs	r0, #128	; 0x80
 80008de:	4699      	mov	r9, r3
 80008e0:	469a      	mov	sl, r3
 80008e2:	00e4      	lsls	r4, r4, #3
 80008e4:	04c0      	lsls	r0, r0, #19
 80008e6:	4304      	orrs	r4, r0
 80008e8:	3d7f      	subs	r5, #127	; 0x7f
 80008ea:	0278      	lsls	r0, r7, #9
 80008ec:	0a43      	lsrs	r3, r0, #9
 80008ee:	4698      	mov	r8, r3
 80008f0:	007b      	lsls	r3, r7, #1
 80008f2:	0e1b      	lsrs	r3, r3, #24
 80008f4:	0fff      	lsrs	r7, r7, #31
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d100      	bne.n	80008fc <__aeabi_fmul+0x44>
 80008fa:	e070      	b.n	80009de <__aeabi_fmul+0x126>
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d100      	bne.n	8000902 <__aeabi_fmul+0x4a>
 8000900:	e086      	b.n	8000a10 <__aeabi_fmul+0x158>
 8000902:	4642      	mov	r2, r8
 8000904:	00d0      	lsls	r0, r2, #3
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	3b7f      	subs	r3, #127	; 0x7f
 800090a:	18ed      	adds	r5, r5, r3
 800090c:	2300      	movs	r3, #0
 800090e:	04d2      	lsls	r2, r2, #19
 8000910:	4302      	orrs	r2, r0
 8000912:	4690      	mov	r8, r2
 8000914:	469c      	mov	ip, r3
 8000916:	0031      	movs	r1, r6
 8000918:	464b      	mov	r3, r9
 800091a:	4079      	eors	r1, r7
 800091c:	1c68      	adds	r0, r5, #1
 800091e:	2b0f      	cmp	r3, #15
 8000920:	d81c      	bhi.n	800095c <__aeabi_fmul+0xa4>
 8000922:	4a76      	ldr	r2, [pc, #472]	; (8000afc <__aeabi_fmul+0x244>)
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	58d3      	ldr	r3, [r2, r3]
 8000928:	469f      	mov	pc, r3
 800092a:	0039      	movs	r1, r7
 800092c:	4644      	mov	r4, r8
 800092e:	46e2      	mov	sl, ip
 8000930:	4653      	mov	r3, sl
 8000932:	2b02      	cmp	r3, #2
 8000934:	d00f      	beq.n	8000956 <__aeabi_fmul+0x9e>
 8000936:	2b03      	cmp	r3, #3
 8000938:	d100      	bne.n	800093c <__aeabi_fmul+0x84>
 800093a:	e0d7      	b.n	8000aec <__aeabi_fmul+0x234>
 800093c:	2b01      	cmp	r3, #1
 800093e:	d137      	bne.n	80009b0 <__aeabi_fmul+0xf8>
 8000940:	2000      	movs	r0, #0
 8000942:	2400      	movs	r4, #0
 8000944:	05c0      	lsls	r0, r0, #23
 8000946:	4320      	orrs	r0, r4
 8000948:	07c9      	lsls	r1, r1, #31
 800094a:	4308      	orrs	r0, r1
 800094c:	bce0      	pop	{r5, r6, r7}
 800094e:	46ba      	mov	sl, r7
 8000950:	46b1      	mov	r9, r6
 8000952:	46a8      	mov	r8, r5
 8000954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000956:	20ff      	movs	r0, #255	; 0xff
 8000958:	2400      	movs	r4, #0
 800095a:	e7f3      	b.n	8000944 <__aeabi_fmul+0x8c>
 800095c:	0c26      	lsrs	r6, r4, #16
 800095e:	0424      	lsls	r4, r4, #16
 8000960:	0c22      	lsrs	r2, r4, #16
 8000962:	4644      	mov	r4, r8
 8000964:	0424      	lsls	r4, r4, #16
 8000966:	0c24      	lsrs	r4, r4, #16
 8000968:	4643      	mov	r3, r8
 800096a:	0027      	movs	r7, r4
 800096c:	0c1b      	lsrs	r3, r3, #16
 800096e:	4357      	muls	r7, r2
 8000970:	4374      	muls	r4, r6
 8000972:	435a      	muls	r2, r3
 8000974:	435e      	muls	r6, r3
 8000976:	1912      	adds	r2, r2, r4
 8000978:	0c3b      	lsrs	r3, r7, #16
 800097a:	189b      	adds	r3, r3, r2
 800097c:	429c      	cmp	r4, r3
 800097e:	d903      	bls.n	8000988 <__aeabi_fmul+0xd0>
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	0252      	lsls	r2, r2, #9
 8000984:	4694      	mov	ip, r2
 8000986:	4466      	add	r6, ip
 8000988:	043f      	lsls	r7, r7, #16
 800098a:	041a      	lsls	r2, r3, #16
 800098c:	0c3f      	lsrs	r7, r7, #16
 800098e:	19d2      	adds	r2, r2, r7
 8000990:	0194      	lsls	r4, r2, #6
 8000992:	1e67      	subs	r7, r4, #1
 8000994:	41bc      	sbcs	r4, r7
 8000996:	0c1b      	lsrs	r3, r3, #16
 8000998:	0e92      	lsrs	r2, r2, #26
 800099a:	199b      	adds	r3, r3, r6
 800099c:	4314      	orrs	r4, r2
 800099e:	019b      	lsls	r3, r3, #6
 80009a0:	431c      	orrs	r4, r3
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	d400      	bmi.n	80009a8 <__aeabi_fmul+0xf0>
 80009a6:	e09b      	b.n	8000ae0 <__aeabi_fmul+0x228>
 80009a8:	2301      	movs	r3, #1
 80009aa:	0862      	lsrs	r2, r4, #1
 80009ac:	401c      	ands	r4, r3
 80009ae:	4314      	orrs	r4, r2
 80009b0:	0002      	movs	r2, r0
 80009b2:	327f      	adds	r2, #127	; 0x7f
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	dd64      	ble.n	8000a82 <__aeabi_fmul+0x1ca>
 80009b8:	0763      	lsls	r3, r4, #29
 80009ba:	d004      	beq.n	80009c6 <__aeabi_fmul+0x10e>
 80009bc:	230f      	movs	r3, #15
 80009be:	4023      	ands	r3, r4
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d000      	beq.n	80009c6 <__aeabi_fmul+0x10e>
 80009c4:	3404      	adds	r4, #4
 80009c6:	0123      	lsls	r3, r4, #4
 80009c8:	d503      	bpl.n	80009d2 <__aeabi_fmul+0x11a>
 80009ca:	0002      	movs	r2, r0
 80009cc:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <__aeabi_fmul+0x248>)
 80009ce:	3280      	adds	r2, #128	; 0x80
 80009d0:	401c      	ands	r4, r3
 80009d2:	2afe      	cmp	r2, #254	; 0xfe
 80009d4:	dcbf      	bgt.n	8000956 <__aeabi_fmul+0x9e>
 80009d6:	01a4      	lsls	r4, r4, #6
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	b2d0      	uxtb	r0, r2
 80009dc:	e7b2      	b.n	8000944 <__aeabi_fmul+0x8c>
 80009de:	4643      	mov	r3, r8
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d13d      	bne.n	8000a60 <__aeabi_fmul+0x1a8>
 80009e4:	464a      	mov	r2, r9
 80009e6:	3301      	adds	r3, #1
 80009e8:	431a      	orrs	r2, r3
 80009ea:	4691      	mov	r9, r2
 80009ec:	469c      	mov	ip, r3
 80009ee:	e792      	b.n	8000916 <__aeabi_fmul+0x5e>
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d129      	bne.n	8000a48 <__aeabi_fmul+0x190>
 80009f4:	2304      	movs	r3, #4
 80009f6:	4699      	mov	r9, r3
 80009f8:	3b03      	subs	r3, #3
 80009fa:	2500      	movs	r5, #0
 80009fc:	469a      	mov	sl, r3
 80009fe:	e774      	b.n	80008ea <__aeabi_fmul+0x32>
 8000a00:	2c00      	cmp	r4, #0
 8000a02:	d11b      	bne.n	8000a3c <__aeabi_fmul+0x184>
 8000a04:	2308      	movs	r3, #8
 8000a06:	4699      	mov	r9, r3
 8000a08:	3b06      	subs	r3, #6
 8000a0a:	25ff      	movs	r5, #255	; 0xff
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	e76c      	b.n	80008ea <__aeabi_fmul+0x32>
 8000a10:	4643      	mov	r3, r8
 8000a12:	35ff      	adds	r5, #255	; 0xff
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10b      	bne.n	8000a30 <__aeabi_fmul+0x178>
 8000a18:	2302      	movs	r3, #2
 8000a1a:	464a      	mov	r2, r9
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	4691      	mov	r9, r2
 8000a20:	469c      	mov	ip, r3
 8000a22:	e778      	b.n	8000916 <__aeabi_fmul+0x5e>
 8000a24:	4653      	mov	r3, sl
 8000a26:	0031      	movs	r1, r6
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fmul+0x176>
 8000a2c:	e783      	b.n	8000936 <__aeabi_fmul+0x7e>
 8000a2e:	e792      	b.n	8000956 <__aeabi_fmul+0x9e>
 8000a30:	2303      	movs	r3, #3
 8000a32:	464a      	mov	r2, r9
 8000a34:	431a      	orrs	r2, r3
 8000a36:	4691      	mov	r9, r2
 8000a38:	469c      	mov	ip, r3
 8000a3a:	e76c      	b.n	8000916 <__aeabi_fmul+0x5e>
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b09      	subs	r3, #9
 8000a42:	25ff      	movs	r5, #255	; 0xff
 8000a44:	469a      	mov	sl, r3
 8000a46:	e750      	b.n	80008ea <__aeabi_fmul+0x32>
 8000a48:	0020      	movs	r0, r4
 8000a4a:	f002 f8c5 	bl	8002bd8 <__clzsi2>
 8000a4e:	2576      	movs	r5, #118	; 0x76
 8000a50:	1f43      	subs	r3, r0, #5
 8000a52:	409c      	lsls	r4, r3
 8000a54:	2300      	movs	r3, #0
 8000a56:	426d      	negs	r5, r5
 8000a58:	4699      	mov	r9, r3
 8000a5a:	469a      	mov	sl, r3
 8000a5c:	1a2d      	subs	r5, r5, r0
 8000a5e:	e744      	b.n	80008ea <__aeabi_fmul+0x32>
 8000a60:	4640      	mov	r0, r8
 8000a62:	f002 f8b9 	bl	8002bd8 <__clzsi2>
 8000a66:	4642      	mov	r2, r8
 8000a68:	1f43      	subs	r3, r0, #5
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	1a2d      	subs	r5, r5, r0
 8000a70:	4690      	mov	r8, r2
 8000a72:	469c      	mov	ip, r3
 8000a74:	3d76      	subs	r5, #118	; 0x76
 8000a76:	e74e      	b.n	8000916 <__aeabi_fmul+0x5e>
 8000a78:	2480      	movs	r4, #128	; 0x80
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	03e4      	lsls	r4, r4, #15
 8000a80:	e760      	b.n	8000944 <__aeabi_fmul+0x8c>
 8000a82:	2301      	movs	r3, #1
 8000a84:	1a9b      	subs	r3, r3, r2
 8000a86:	2b1b      	cmp	r3, #27
 8000a88:	dd00      	ble.n	8000a8c <__aeabi_fmul+0x1d4>
 8000a8a:	e759      	b.n	8000940 <__aeabi_fmul+0x88>
 8000a8c:	0022      	movs	r2, r4
 8000a8e:	309e      	adds	r0, #158	; 0x9e
 8000a90:	40da      	lsrs	r2, r3
 8000a92:	4084      	lsls	r4, r0
 8000a94:	0013      	movs	r3, r2
 8000a96:	1e62      	subs	r2, r4, #1
 8000a98:	4194      	sbcs	r4, r2
 8000a9a:	431c      	orrs	r4, r3
 8000a9c:	0763      	lsls	r3, r4, #29
 8000a9e:	d004      	beq.n	8000aaa <__aeabi_fmul+0x1f2>
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	4023      	ands	r3, r4
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_fmul+0x1f2>
 8000aa8:	3404      	adds	r4, #4
 8000aaa:	0163      	lsls	r3, r4, #5
 8000aac:	d51a      	bpl.n	8000ae4 <__aeabi_fmul+0x22c>
 8000aae:	2001      	movs	r0, #1
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	e747      	b.n	8000944 <__aeabi_fmul+0x8c>
 8000ab4:	2080      	movs	r0, #128	; 0x80
 8000ab6:	03c0      	lsls	r0, r0, #15
 8000ab8:	4204      	tst	r4, r0
 8000aba:	d009      	beq.n	8000ad0 <__aeabi_fmul+0x218>
 8000abc:	4643      	mov	r3, r8
 8000abe:	4203      	tst	r3, r0
 8000ac0:	d106      	bne.n	8000ad0 <__aeabi_fmul+0x218>
 8000ac2:	4644      	mov	r4, r8
 8000ac4:	4304      	orrs	r4, r0
 8000ac6:	0264      	lsls	r4, r4, #9
 8000ac8:	0039      	movs	r1, r7
 8000aca:	20ff      	movs	r0, #255	; 0xff
 8000acc:	0a64      	lsrs	r4, r4, #9
 8000ace:	e739      	b.n	8000944 <__aeabi_fmul+0x8c>
 8000ad0:	2080      	movs	r0, #128	; 0x80
 8000ad2:	03c0      	lsls	r0, r0, #15
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	0264      	lsls	r4, r4, #9
 8000ad8:	0031      	movs	r1, r6
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	0a64      	lsrs	r4, r4, #9
 8000ade:	e731      	b.n	8000944 <__aeabi_fmul+0x8c>
 8000ae0:	0028      	movs	r0, r5
 8000ae2:	e765      	b.n	80009b0 <__aeabi_fmul+0xf8>
 8000ae4:	01a4      	lsls	r4, r4, #6
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	e72b      	b.n	8000944 <__aeabi_fmul+0x8c>
 8000aec:	2080      	movs	r0, #128	; 0x80
 8000aee:	03c0      	lsls	r0, r0, #15
 8000af0:	4304      	orrs	r4, r0
 8000af2:	0264      	lsls	r4, r4, #9
 8000af4:	20ff      	movs	r0, #255	; 0xff
 8000af6:	0a64      	lsrs	r4, r4, #9
 8000af8:	e724      	b.n	8000944 <__aeabi_fmul+0x8c>
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	08009cec 	.word	0x08009cec
 8000b00:	f7ffffff 	.word	0xf7ffffff

08000b04 <__aeabi_fsub>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	46ce      	mov	lr, r9
 8000b08:	4647      	mov	r7, r8
 8000b0a:	0243      	lsls	r3, r0, #9
 8000b0c:	0a5b      	lsrs	r3, r3, #9
 8000b0e:	024e      	lsls	r6, r1, #9
 8000b10:	00da      	lsls	r2, r3, #3
 8000b12:	4694      	mov	ip, r2
 8000b14:	0a72      	lsrs	r2, r6, #9
 8000b16:	4691      	mov	r9, r2
 8000b18:	0045      	lsls	r5, r0, #1
 8000b1a:	004a      	lsls	r2, r1, #1
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	0e2d      	lsrs	r5, r5, #24
 8000b20:	001f      	movs	r7, r3
 8000b22:	0fc4      	lsrs	r4, r0, #31
 8000b24:	0e12      	lsrs	r2, r2, #24
 8000b26:	0fc9      	lsrs	r1, r1, #31
 8000b28:	09b6      	lsrs	r6, r6, #6
 8000b2a:	2aff      	cmp	r2, #255	; 0xff
 8000b2c:	d05b      	beq.n	8000be6 <__aeabi_fsub+0xe2>
 8000b2e:	2001      	movs	r0, #1
 8000b30:	4041      	eors	r1, r0
 8000b32:	428c      	cmp	r4, r1
 8000b34:	d039      	beq.n	8000baa <__aeabi_fsub+0xa6>
 8000b36:	1aa8      	subs	r0, r5, r2
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	dd5a      	ble.n	8000bf2 <__aeabi_fsub+0xee>
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d06a      	beq.n	8000c16 <__aeabi_fsub+0x112>
 8000b40:	2dff      	cmp	r5, #255	; 0xff
 8000b42:	d100      	bne.n	8000b46 <__aeabi_fsub+0x42>
 8000b44:	e0d9      	b.n	8000cfa <__aeabi_fsub+0x1f6>
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	04d2      	lsls	r2, r2, #19
 8000b4a:	4316      	orrs	r6, r2
 8000b4c:	281b      	cmp	r0, #27
 8000b4e:	dc00      	bgt.n	8000b52 <__aeabi_fsub+0x4e>
 8000b50:	e0e9      	b.n	8000d26 <__aeabi_fsub+0x222>
 8000b52:	2001      	movs	r0, #1
 8000b54:	4663      	mov	r3, ip
 8000b56:	1a18      	subs	r0, r3, r0
 8000b58:	0143      	lsls	r3, r0, #5
 8000b5a:	d400      	bmi.n	8000b5e <__aeabi_fsub+0x5a>
 8000b5c:	e0b4      	b.n	8000cc8 <__aeabi_fsub+0x1c4>
 8000b5e:	0180      	lsls	r0, r0, #6
 8000b60:	0987      	lsrs	r7, r0, #6
 8000b62:	0038      	movs	r0, r7
 8000b64:	f002 f838 	bl	8002bd8 <__clzsi2>
 8000b68:	3805      	subs	r0, #5
 8000b6a:	4087      	lsls	r7, r0
 8000b6c:	4285      	cmp	r5, r0
 8000b6e:	dc00      	bgt.n	8000b72 <__aeabi_fsub+0x6e>
 8000b70:	e0cc      	b.n	8000d0c <__aeabi_fsub+0x208>
 8000b72:	1a2d      	subs	r5, r5, r0
 8000b74:	48b5      	ldr	r0, [pc, #724]	; (8000e4c <__aeabi_fsub+0x348>)
 8000b76:	4038      	ands	r0, r7
 8000b78:	0743      	lsls	r3, r0, #29
 8000b7a:	d004      	beq.n	8000b86 <__aeabi_fsub+0x82>
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	4003      	ands	r3, r0
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d000      	beq.n	8000b86 <__aeabi_fsub+0x82>
 8000b84:	3004      	adds	r0, #4
 8000b86:	0143      	lsls	r3, r0, #5
 8000b88:	d400      	bmi.n	8000b8c <__aeabi_fsub+0x88>
 8000b8a:	e0a0      	b.n	8000cce <__aeabi_fsub+0x1ca>
 8000b8c:	1c6a      	adds	r2, r5, #1
 8000b8e:	2dfe      	cmp	r5, #254	; 0xfe
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fsub+0x90>
 8000b92:	e08d      	b.n	8000cb0 <__aeabi_fsub+0x1ac>
 8000b94:	0180      	lsls	r0, r0, #6
 8000b96:	0a47      	lsrs	r7, r0, #9
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	05d0      	lsls	r0, r2, #23
 8000b9c:	4338      	orrs	r0, r7
 8000b9e:	07e4      	lsls	r4, r4, #31
 8000ba0:	4320      	orrs	r0, r4
 8000ba2:	bcc0      	pop	{r6, r7}
 8000ba4:	46b9      	mov	r9, r7
 8000ba6:	46b0      	mov	r8, r6
 8000ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000baa:	1aa8      	subs	r0, r5, r2
 8000bac:	4680      	mov	r8, r0
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	dd45      	ble.n	8000c3e <__aeabi_fsub+0x13a>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d070      	beq.n	8000c98 <__aeabi_fsub+0x194>
 8000bb6:	2dff      	cmp	r5, #255	; 0xff
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fsub+0xb8>
 8000bba:	e09e      	b.n	8000cfa <__aeabi_fsub+0x1f6>
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	04db      	lsls	r3, r3, #19
 8000bc0:	431e      	orrs	r6, r3
 8000bc2:	4643      	mov	r3, r8
 8000bc4:	2b1b      	cmp	r3, #27
 8000bc6:	dc00      	bgt.n	8000bca <__aeabi_fsub+0xc6>
 8000bc8:	e0d2      	b.n	8000d70 <__aeabi_fsub+0x26c>
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4460      	add	r0, ip
 8000bce:	0143      	lsls	r3, r0, #5
 8000bd0:	d57a      	bpl.n	8000cc8 <__aeabi_fsub+0x1c4>
 8000bd2:	3501      	adds	r5, #1
 8000bd4:	2dff      	cmp	r5, #255	; 0xff
 8000bd6:	d06b      	beq.n	8000cb0 <__aeabi_fsub+0x1ac>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	4a9d      	ldr	r2, [pc, #628]	; (8000e50 <__aeabi_fsub+0x34c>)
 8000bdc:	4003      	ands	r3, r0
 8000bde:	0840      	lsrs	r0, r0, #1
 8000be0:	4010      	ands	r0, r2
 8000be2:	4318      	orrs	r0, r3
 8000be4:	e7c8      	b.n	8000b78 <__aeabi_fsub+0x74>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d020      	beq.n	8000c2c <__aeabi_fsub+0x128>
 8000bea:	428c      	cmp	r4, r1
 8000bec:	d023      	beq.n	8000c36 <__aeabi_fsub+0x132>
 8000bee:	0028      	movs	r0, r5
 8000bf0:	38ff      	subs	r0, #255	; 0xff
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d039      	beq.n	8000c6a <__aeabi_fsub+0x166>
 8000bf6:	1b57      	subs	r7, r2, r5
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_fsub+0xfa>
 8000bfc:	e09d      	b.n	8000d3a <__aeabi_fsub+0x236>
 8000bfe:	4663      	mov	r3, ip
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fsub+0x102>
 8000c04:	e0db      	b.n	8000dbe <__aeabi_fsub+0x2ba>
 8000c06:	1e7b      	subs	r3, r7, #1
 8000c08:	2f01      	cmp	r7, #1
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fsub+0x10a>
 8000c0c:	e10d      	b.n	8000e2a <__aeabi_fsub+0x326>
 8000c0e:	2fff      	cmp	r7, #255	; 0xff
 8000c10:	d071      	beq.n	8000cf6 <__aeabi_fsub+0x1f2>
 8000c12:	001f      	movs	r7, r3
 8000c14:	e098      	b.n	8000d48 <__aeabi_fsub+0x244>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fsub+0x118>
 8000c1a:	e0a7      	b.n	8000d6c <__aeabi_fsub+0x268>
 8000c1c:	1e42      	subs	r2, r0, #1
 8000c1e:	2801      	cmp	r0, #1
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x120>
 8000c22:	e0e6      	b.n	8000df2 <__aeabi_fsub+0x2ee>
 8000c24:	28ff      	cmp	r0, #255	; 0xff
 8000c26:	d068      	beq.n	8000cfa <__aeabi_fsub+0x1f6>
 8000c28:	0010      	movs	r0, r2
 8000c2a:	e78f      	b.n	8000b4c <__aeabi_fsub+0x48>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	4041      	eors	r1, r0
 8000c30:	42a1      	cmp	r1, r4
 8000c32:	d000      	beq.n	8000c36 <__aeabi_fsub+0x132>
 8000c34:	e77f      	b.n	8000b36 <__aeabi_fsub+0x32>
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	4240      	negs	r0, r0
 8000c3a:	4680      	mov	r8, r0
 8000c3c:	44a8      	add	r8, r5
 8000c3e:	4640      	mov	r0, r8
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d038      	beq.n	8000cb6 <__aeabi_fsub+0x1b2>
 8000c44:	1b51      	subs	r1, r2, r5
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fsub+0x148>
 8000c4a:	e0ae      	b.n	8000daa <__aeabi_fsub+0x2a6>
 8000c4c:	2aff      	cmp	r2, #255	; 0xff
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x14e>
 8000c50:	e0df      	b.n	8000e12 <__aeabi_fsub+0x30e>
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	4660      	mov	r0, ip
 8000c56:	04db      	lsls	r3, r3, #19
 8000c58:	4318      	orrs	r0, r3
 8000c5a:	4684      	mov	ip, r0
 8000c5c:	291b      	cmp	r1, #27
 8000c5e:	dc00      	bgt.n	8000c62 <__aeabi_fsub+0x15e>
 8000c60:	e0d9      	b.n	8000e16 <__aeabi_fsub+0x312>
 8000c62:	2001      	movs	r0, #1
 8000c64:	0015      	movs	r5, r2
 8000c66:	1980      	adds	r0, r0, r6
 8000c68:	e7b1      	b.n	8000bce <__aeabi_fsub+0xca>
 8000c6a:	20fe      	movs	r0, #254	; 0xfe
 8000c6c:	1c6a      	adds	r2, r5, #1
 8000c6e:	4210      	tst	r0, r2
 8000c70:	d171      	bne.n	8000d56 <__aeabi_fsub+0x252>
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d000      	beq.n	8000c78 <__aeabi_fsub+0x174>
 8000c76:	e0a6      	b.n	8000dc6 <__aeabi_fsub+0x2c2>
 8000c78:	4663      	mov	r3, ip
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_fsub+0x17c>
 8000c7e:	e0d9      	b.n	8000e34 <__aeabi_fsub+0x330>
 8000c80:	2200      	movs	r2, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x184>
 8000c86:	e788      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000c88:	1b98      	subs	r0, r3, r6
 8000c8a:	0143      	lsls	r3, r0, #5
 8000c8c:	d400      	bmi.n	8000c90 <__aeabi_fsub+0x18c>
 8000c8e:	e0e1      	b.n	8000e54 <__aeabi_fsub+0x350>
 8000c90:	4663      	mov	r3, ip
 8000c92:	000c      	movs	r4, r1
 8000c94:	1af0      	subs	r0, r6, r3
 8000c96:	e76f      	b.n	8000b78 <__aeabi_fsub+0x74>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_fsub+0x19a>
 8000c9c:	e0b7      	b.n	8000e0e <__aeabi_fsub+0x30a>
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_fsub+0x1a4>
 8000ca6:	e09c      	b.n	8000de2 <__aeabi_fsub+0x2de>
 8000ca8:	28ff      	cmp	r0, #255	; 0xff
 8000caa:	d026      	beq.n	8000cfa <__aeabi_fsub+0x1f6>
 8000cac:	4690      	mov	r8, r2
 8000cae:	e788      	b.n	8000bc2 <__aeabi_fsub+0xbe>
 8000cb0:	22ff      	movs	r2, #255	; 0xff
 8000cb2:	2700      	movs	r7, #0
 8000cb4:	e771      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000cb6:	20fe      	movs	r0, #254	; 0xfe
 8000cb8:	1c6a      	adds	r2, r5, #1
 8000cba:	4210      	tst	r0, r2
 8000cbc:	d064      	beq.n	8000d88 <__aeabi_fsub+0x284>
 8000cbe:	2aff      	cmp	r2, #255	; 0xff
 8000cc0:	d0f6      	beq.n	8000cb0 <__aeabi_fsub+0x1ac>
 8000cc2:	0015      	movs	r5, r2
 8000cc4:	4466      	add	r6, ip
 8000cc6:	0870      	lsrs	r0, r6, #1
 8000cc8:	0743      	lsls	r3, r0, #29
 8000cca:	d000      	beq.n	8000cce <__aeabi_fsub+0x1ca>
 8000ccc:	e756      	b.n	8000b7c <__aeabi_fsub+0x78>
 8000cce:	08c3      	lsrs	r3, r0, #3
 8000cd0:	2dff      	cmp	r5, #255	; 0xff
 8000cd2:	d012      	beq.n	8000cfa <__aeabi_fsub+0x1f6>
 8000cd4:	025b      	lsls	r3, r3, #9
 8000cd6:	0a5f      	lsrs	r7, r3, #9
 8000cd8:	b2ea      	uxtb	r2, r5
 8000cda:	e75e      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000cdc:	4662      	mov	r2, ip
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fsub+0x1e0>
 8000ce2:	e096      	b.n	8000e12 <__aeabi_fsub+0x30e>
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d008      	beq.n	8000cfa <__aeabi_fsub+0x1f6>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	03d2      	lsls	r2, r2, #15
 8000cec:	4213      	tst	r3, r2
 8000cee:	d004      	beq.n	8000cfa <__aeabi_fsub+0x1f6>
 8000cf0:	4648      	mov	r0, r9
 8000cf2:	4210      	tst	r0, r2
 8000cf4:	d101      	bne.n	8000cfa <__aeabi_fsub+0x1f6>
 8000cf6:	000c      	movs	r4, r1
 8000cf8:	464b      	mov	r3, r9
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0d8      	beq.n	8000cb0 <__aeabi_fsub+0x1ac>
 8000cfe:	2780      	movs	r7, #128	; 0x80
 8000d00:	03ff      	lsls	r7, r7, #15
 8000d02:	431f      	orrs	r7, r3
 8000d04:	027f      	lsls	r7, r7, #9
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	0a7f      	lsrs	r7, r7, #9
 8000d0a:	e746      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000d0c:	2320      	movs	r3, #32
 8000d0e:	003a      	movs	r2, r7
 8000d10:	1b45      	subs	r5, r0, r5
 8000d12:	0038      	movs	r0, r7
 8000d14:	3501      	adds	r5, #1
 8000d16:	40ea      	lsrs	r2, r5
 8000d18:	1b5d      	subs	r5, r3, r5
 8000d1a:	40a8      	lsls	r0, r5
 8000d1c:	1e43      	subs	r3, r0, #1
 8000d1e:	4198      	sbcs	r0, r3
 8000d20:	2500      	movs	r5, #0
 8000d22:	4310      	orrs	r0, r2
 8000d24:	e728      	b.n	8000b78 <__aeabi_fsub+0x74>
 8000d26:	2320      	movs	r3, #32
 8000d28:	1a1b      	subs	r3, r3, r0
 8000d2a:	0032      	movs	r2, r6
 8000d2c:	409e      	lsls	r6, r3
 8000d2e:	40c2      	lsrs	r2, r0
 8000d30:	0030      	movs	r0, r6
 8000d32:	1e43      	subs	r3, r0, #1
 8000d34:	4198      	sbcs	r0, r3
 8000d36:	4310      	orrs	r0, r2
 8000d38:	e70c      	b.n	8000b54 <__aeabi_fsub+0x50>
 8000d3a:	2aff      	cmp	r2, #255	; 0xff
 8000d3c:	d0db      	beq.n	8000cf6 <__aeabi_fsub+0x1f2>
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	4660      	mov	r0, ip
 8000d42:	04db      	lsls	r3, r3, #19
 8000d44:	4318      	orrs	r0, r3
 8000d46:	4684      	mov	ip, r0
 8000d48:	2f1b      	cmp	r7, #27
 8000d4a:	dd56      	ble.n	8000dfa <__aeabi_fsub+0x2f6>
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	000c      	movs	r4, r1
 8000d50:	0015      	movs	r5, r2
 8000d52:	1a30      	subs	r0, r6, r0
 8000d54:	e700      	b.n	8000b58 <__aeabi_fsub+0x54>
 8000d56:	4663      	mov	r3, ip
 8000d58:	1b9f      	subs	r7, r3, r6
 8000d5a:	017b      	lsls	r3, r7, #5
 8000d5c:	d43d      	bmi.n	8000dda <__aeabi_fsub+0x2d6>
 8000d5e:	2f00      	cmp	r7, #0
 8000d60:	d000      	beq.n	8000d64 <__aeabi_fsub+0x260>
 8000d62:	e6fe      	b.n	8000b62 <__aeabi_fsub+0x5e>
 8000d64:	2400      	movs	r4, #0
 8000d66:	2200      	movs	r2, #0
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e716      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000d6c:	0005      	movs	r5, r0
 8000d6e:	e7af      	b.n	8000cd0 <__aeabi_fsub+0x1cc>
 8000d70:	0032      	movs	r2, r6
 8000d72:	4643      	mov	r3, r8
 8000d74:	4641      	mov	r1, r8
 8000d76:	40da      	lsrs	r2, r3
 8000d78:	2320      	movs	r3, #32
 8000d7a:	1a5b      	subs	r3, r3, r1
 8000d7c:	409e      	lsls	r6, r3
 8000d7e:	0030      	movs	r0, r6
 8000d80:	1e43      	subs	r3, r0, #1
 8000d82:	4198      	sbcs	r0, r3
 8000d84:	4310      	orrs	r0, r2
 8000d86:	e721      	b.n	8000bcc <__aeabi_fsub+0xc8>
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d1a7      	bne.n	8000cdc <__aeabi_fsub+0x1d8>
 8000d8c:	4663      	mov	r3, ip
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d059      	beq.n	8000e46 <__aeabi_fsub+0x342>
 8000d92:	2200      	movs	r2, #0
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d100      	bne.n	8000d9a <__aeabi_fsub+0x296>
 8000d98:	e6ff      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000d9a:	0030      	movs	r0, r6
 8000d9c:	4460      	add	r0, ip
 8000d9e:	0143      	lsls	r3, r0, #5
 8000da0:	d592      	bpl.n	8000cc8 <__aeabi_fsub+0x1c4>
 8000da2:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <__aeabi_fsub+0x348>)
 8000da4:	3501      	adds	r5, #1
 8000da6:	4018      	ands	r0, r3
 8000da8:	e78e      	b.n	8000cc8 <__aeabi_fsub+0x1c4>
 8000daa:	4663      	mov	r3, ip
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d047      	beq.n	8000e40 <__aeabi_fsub+0x33c>
 8000db0:	1e4b      	subs	r3, r1, #1
 8000db2:	2901      	cmp	r1, #1
 8000db4:	d015      	beq.n	8000de2 <__aeabi_fsub+0x2de>
 8000db6:	29ff      	cmp	r1, #255	; 0xff
 8000db8:	d02b      	beq.n	8000e12 <__aeabi_fsub+0x30e>
 8000dba:	0019      	movs	r1, r3
 8000dbc:	e74e      	b.n	8000c5c <__aeabi_fsub+0x158>
 8000dbe:	000c      	movs	r4, r1
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	003d      	movs	r5, r7
 8000dc4:	e784      	b.n	8000cd0 <__aeabi_fsub+0x1cc>
 8000dc6:	4662      	mov	r2, ip
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d18b      	bne.n	8000ce4 <__aeabi_fsub+0x1e0>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d192      	bne.n	8000cf6 <__aeabi_fsub+0x1f2>
 8000dd0:	2780      	movs	r7, #128	; 0x80
 8000dd2:	2400      	movs	r4, #0
 8000dd4:	22ff      	movs	r2, #255	; 0xff
 8000dd6:	03ff      	lsls	r7, r7, #15
 8000dd8:	e6df      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000dda:	4663      	mov	r3, ip
 8000ddc:	000c      	movs	r4, r1
 8000dde:	1af7      	subs	r7, r6, r3
 8000de0:	e6bf      	b.n	8000b62 <__aeabi_fsub+0x5e>
 8000de2:	0030      	movs	r0, r6
 8000de4:	4460      	add	r0, ip
 8000de6:	2501      	movs	r5, #1
 8000de8:	0143      	lsls	r3, r0, #5
 8000dea:	d400      	bmi.n	8000dee <__aeabi_fsub+0x2ea>
 8000dec:	e76c      	b.n	8000cc8 <__aeabi_fsub+0x1c4>
 8000dee:	2502      	movs	r5, #2
 8000df0:	e6f2      	b.n	8000bd8 <__aeabi_fsub+0xd4>
 8000df2:	4663      	mov	r3, ip
 8000df4:	2501      	movs	r5, #1
 8000df6:	1b98      	subs	r0, r3, r6
 8000df8:	e6ae      	b.n	8000b58 <__aeabi_fsub+0x54>
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	4664      	mov	r4, ip
 8000dfe:	4660      	mov	r0, ip
 8000e00:	40fc      	lsrs	r4, r7
 8000e02:	1bdf      	subs	r7, r3, r7
 8000e04:	40b8      	lsls	r0, r7
 8000e06:	1e43      	subs	r3, r0, #1
 8000e08:	4198      	sbcs	r0, r3
 8000e0a:	4320      	orrs	r0, r4
 8000e0c:	e79f      	b.n	8000d4e <__aeabi_fsub+0x24a>
 8000e0e:	0005      	movs	r5, r0
 8000e10:	e75e      	b.n	8000cd0 <__aeabi_fsub+0x1cc>
 8000e12:	464b      	mov	r3, r9
 8000e14:	e771      	b.n	8000cfa <__aeabi_fsub+0x1f6>
 8000e16:	2320      	movs	r3, #32
 8000e18:	4665      	mov	r5, ip
 8000e1a:	4660      	mov	r0, ip
 8000e1c:	40cd      	lsrs	r5, r1
 8000e1e:	1a59      	subs	r1, r3, r1
 8000e20:	4088      	lsls	r0, r1
 8000e22:	1e43      	subs	r3, r0, #1
 8000e24:	4198      	sbcs	r0, r3
 8000e26:	4328      	orrs	r0, r5
 8000e28:	e71c      	b.n	8000c64 <__aeabi_fsub+0x160>
 8000e2a:	4663      	mov	r3, ip
 8000e2c:	000c      	movs	r4, r1
 8000e2e:	2501      	movs	r5, #1
 8000e30:	1af0      	subs	r0, r6, r3
 8000e32:	e691      	b.n	8000b58 <__aeabi_fsub+0x54>
 8000e34:	2e00      	cmp	r6, #0
 8000e36:	d095      	beq.n	8000d64 <__aeabi_fsub+0x260>
 8000e38:	000c      	movs	r4, r1
 8000e3a:	464f      	mov	r7, r9
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	e6ac      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000e40:	464b      	mov	r3, r9
 8000e42:	000d      	movs	r5, r1
 8000e44:	e744      	b.n	8000cd0 <__aeabi_fsub+0x1cc>
 8000e46:	464f      	mov	r7, r9
 8000e48:	2200      	movs	r2, #0
 8000e4a:	e6a6      	b.n	8000b9a <__aeabi_fsub+0x96>
 8000e4c:	fbffffff 	.word	0xfbffffff
 8000e50:	7dffffff 	.word	0x7dffffff
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x356>
 8000e58:	e736      	b.n	8000cc8 <__aeabi_fsub+0x1c4>
 8000e5a:	2400      	movs	r4, #0
 8000e5c:	2700      	movs	r7, #0
 8000e5e:	e69c      	b.n	8000b9a <__aeabi_fsub+0x96>

08000e60 <__aeabi_f2iz>:
 8000e60:	0241      	lsls	r1, r0, #9
 8000e62:	0042      	lsls	r2, r0, #1
 8000e64:	0fc3      	lsrs	r3, r0, #31
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	2000      	movs	r0, #0
 8000e6a:	0e12      	lsrs	r2, r2, #24
 8000e6c:	2a7e      	cmp	r2, #126	; 0x7e
 8000e6e:	dd03      	ble.n	8000e78 <__aeabi_f2iz+0x18>
 8000e70:	2a9d      	cmp	r2, #157	; 0x9d
 8000e72:	dd02      	ble.n	8000e7a <__aeabi_f2iz+0x1a>
 8000e74:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <__aeabi_f2iz+0x3c>)
 8000e76:	1898      	adds	r0, r3, r2
 8000e78:	4770      	bx	lr
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	0400      	lsls	r0, r0, #16
 8000e7e:	4301      	orrs	r1, r0
 8000e80:	2a95      	cmp	r2, #149	; 0x95
 8000e82:	dc07      	bgt.n	8000e94 <__aeabi_f2iz+0x34>
 8000e84:	2096      	movs	r0, #150	; 0x96
 8000e86:	1a82      	subs	r2, r0, r2
 8000e88:	40d1      	lsrs	r1, r2
 8000e8a:	4248      	negs	r0, r1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f3      	bne.n	8000e78 <__aeabi_f2iz+0x18>
 8000e90:	0008      	movs	r0, r1
 8000e92:	e7f1      	b.n	8000e78 <__aeabi_f2iz+0x18>
 8000e94:	3a96      	subs	r2, #150	; 0x96
 8000e96:	4091      	lsls	r1, r2
 8000e98:	e7f7      	b.n	8000e8a <__aeabi_f2iz+0x2a>
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	7fffffff 	.word	0x7fffffff

08000ea0 <__aeabi_dadd>:
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	464f      	mov	r7, r9
 8000ea4:	4646      	mov	r6, r8
 8000ea6:	46d6      	mov	lr, sl
 8000ea8:	000d      	movs	r5, r1
 8000eaa:	0004      	movs	r4, r0
 8000eac:	b5c0      	push	{r6, r7, lr}
 8000eae:	001f      	movs	r7, r3
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0328      	lsls	r0, r5, #12
 8000eb4:	0f62      	lsrs	r2, r4, #29
 8000eb6:	0a40      	lsrs	r0, r0, #9
 8000eb8:	4310      	orrs	r0, r2
 8000eba:	007a      	lsls	r2, r7, #1
 8000ebc:	0d52      	lsrs	r2, r2, #21
 8000ebe:	00e3      	lsls	r3, r4, #3
 8000ec0:	033c      	lsls	r4, r7, #12
 8000ec2:	4691      	mov	r9, r2
 8000ec4:	0a64      	lsrs	r4, r4, #9
 8000ec6:	0ffa      	lsrs	r2, r7, #31
 8000ec8:	0f4f      	lsrs	r7, r1, #29
 8000eca:	006e      	lsls	r6, r5, #1
 8000ecc:	4327      	orrs	r7, r4
 8000ece:	4692      	mov	sl, r2
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	0d76      	lsrs	r6, r6, #21
 8000ed4:	0fed      	lsrs	r5, r5, #31
 8000ed6:	00c9      	lsls	r1, r1, #3
 8000ed8:	4295      	cmp	r5, r2
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x3e>
 8000edc:	e099      	b.n	8001012 <__aeabi_dadd+0x172>
 8000ede:	464c      	mov	r4, r9
 8000ee0:	1b34      	subs	r4, r6, r4
 8000ee2:	46a4      	mov	ip, r4
 8000ee4:	2c00      	cmp	r4, #0
 8000ee6:	dc00      	bgt.n	8000eea <__aeabi_dadd+0x4a>
 8000ee8:	e07c      	b.n	8000fe4 <__aeabi_dadd+0x144>
 8000eea:	464a      	mov	r2, r9
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dadd+0x52>
 8000ef0:	e0b8      	b.n	8001064 <__aeabi_dadd+0x1c4>
 8000ef2:	4ac5      	ldr	r2, [pc, #788]	; (8001208 <__aeabi_dadd+0x368>)
 8000ef4:	4296      	cmp	r6, r2
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dadd+0x5a>
 8000ef8:	e11c      	b.n	8001134 <__aeabi_dadd+0x294>
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	003c      	movs	r4, r7
 8000efe:	0412      	lsls	r2, r2, #16
 8000f00:	4314      	orrs	r4, r2
 8000f02:	46a0      	mov	r8, r4
 8000f04:	4662      	mov	r2, ip
 8000f06:	2a38      	cmp	r2, #56	; 0x38
 8000f08:	dd00      	ble.n	8000f0c <__aeabi_dadd+0x6c>
 8000f0a:	e161      	b.n	80011d0 <__aeabi_dadd+0x330>
 8000f0c:	2a1f      	cmp	r2, #31
 8000f0e:	dd00      	ble.n	8000f12 <__aeabi_dadd+0x72>
 8000f10:	e1cc      	b.n	80012ac <__aeabi_dadd+0x40c>
 8000f12:	4664      	mov	r4, ip
 8000f14:	2220      	movs	r2, #32
 8000f16:	1b12      	subs	r2, r2, r4
 8000f18:	4644      	mov	r4, r8
 8000f1a:	4094      	lsls	r4, r2
 8000f1c:	000f      	movs	r7, r1
 8000f1e:	46a1      	mov	r9, r4
 8000f20:	4664      	mov	r4, ip
 8000f22:	4091      	lsls	r1, r2
 8000f24:	40e7      	lsrs	r7, r4
 8000f26:	464c      	mov	r4, r9
 8000f28:	1e4a      	subs	r2, r1, #1
 8000f2a:	4191      	sbcs	r1, r2
 8000f2c:	433c      	orrs	r4, r7
 8000f2e:	4642      	mov	r2, r8
 8000f30:	4321      	orrs	r1, r4
 8000f32:	4664      	mov	r4, ip
 8000f34:	40e2      	lsrs	r2, r4
 8000f36:	1a80      	subs	r0, r0, r2
 8000f38:	1a5c      	subs	r4, r3, r1
 8000f3a:	42a3      	cmp	r3, r4
 8000f3c:	419b      	sbcs	r3, r3
 8000f3e:	425f      	negs	r7, r3
 8000f40:	1bc7      	subs	r7, r0, r7
 8000f42:	023b      	lsls	r3, r7, #8
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_dadd+0xa8>
 8000f46:	e0d0      	b.n	80010ea <__aeabi_dadd+0x24a>
 8000f48:	027f      	lsls	r7, r7, #9
 8000f4a:	0a7f      	lsrs	r7, r7, #9
 8000f4c:	2f00      	cmp	r7, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0xb2>
 8000f50:	e0ff      	b.n	8001152 <__aeabi_dadd+0x2b2>
 8000f52:	0038      	movs	r0, r7
 8000f54:	f001 fe40 	bl	8002bd8 <__clzsi2>
 8000f58:	0001      	movs	r1, r0
 8000f5a:	3908      	subs	r1, #8
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	0022      	movs	r2, r4
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	408f      	lsls	r7, r1
 8000f64:	40da      	lsrs	r2, r3
 8000f66:	408c      	lsls	r4, r1
 8000f68:	4317      	orrs	r7, r2
 8000f6a:	42b1      	cmp	r1, r6
 8000f6c:	da00      	bge.n	8000f70 <__aeabi_dadd+0xd0>
 8000f6e:	e0ff      	b.n	8001170 <__aeabi_dadd+0x2d0>
 8000f70:	1b89      	subs	r1, r1, r6
 8000f72:	1c4b      	adds	r3, r1, #1
 8000f74:	2b1f      	cmp	r3, #31
 8000f76:	dd00      	ble.n	8000f7a <__aeabi_dadd+0xda>
 8000f78:	e0a8      	b.n	80010cc <__aeabi_dadd+0x22c>
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	0039      	movs	r1, r7
 8000f7e:	1ad2      	subs	r2, r2, r3
 8000f80:	0020      	movs	r0, r4
 8000f82:	4094      	lsls	r4, r2
 8000f84:	4091      	lsls	r1, r2
 8000f86:	40d8      	lsrs	r0, r3
 8000f88:	1e62      	subs	r2, r4, #1
 8000f8a:	4194      	sbcs	r4, r2
 8000f8c:	40df      	lsrs	r7, r3
 8000f8e:	2600      	movs	r6, #0
 8000f90:	4301      	orrs	r1, r0
 8000f92:	430c      	orrs	r4, r1
 8000f94:	0763      	lsls	r3, r4, #29
 8000f96:	d009      	beq.n	8000fac <__aeabi_dadd+0x10c>
 8000f98:	230f      	movs	r3, #15
 8000f9a:	4023      	ands	r3, r4
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d005      	beq.n	8000fac <__aeabi_dadd+0x10c>
 8000fa0:	1d23      	adds	r3, r4, #4
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	41a4      	sbcs	r4, r4
 8000fa6:	4264      	negs	r4, r4
 8000fa8:	193f      	adds	r7, r7, r4
 8000faa:	001c      	movs	r4, r3
 8000fac:	023b      	lsls	r3, r7, #8
 8000fae:	d400      	bmi.n	8000fb2 <__aeabi_dadd+0x112>
 8000fb0:	e09e      	b.n	80010f0 <__aeabi_dadd+0x250>
 8000fb2:	4b95      	ldr	r3, [pc, #596]	; (8001208 <__aeabi_dadd+0x368>)
 8000fb4:	3601      	adds	r6, #1
 8000fb6:	429e      	cmp	r6, r3
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dadd+0x11c>
 8000fba:	e0b7      	b.n	800112c <__aeabi_dadd+0x28c>
 8000fbc:	4a93      	ldr	r2, [pc, #588]	; (800120c <__aeabi_dadd+0x36c>)
 8000fbe:	08e4      	lsrs	r4, r4, #3
 8000fc0:	4017      	ands	r7, r2
 8000fc2:	077b      	lsls	r3, r7, #29
 8000fc4:	0571      	lsls	r1, r6, #21
 8000fc6:	027f      	lsls	r7, r7, #9
 8000fc8:	4323      	orrs	r3, r4
 8000fca:	0b3f      	lsrs	r7, r7, #12
 8000fcc:	0d4a      	lsrs	r2, r1, #21
 8000fce:	0512      	lsls	r2, r2, #20
 8000fd0:	433a      	orrs	r2, r7
 8000fd2:	07ed      	lsls	r5, r5, #31
 8000fd4:	432a      	orrs	r2, r5
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	0011      	movs	r1, r2
 8000fda:	bce0      	pop	{r5, r6, r7}
 8000fdc:	46ba      	mov	sl, r7
 8000fde:	46b1      	mov	r9, r6
 8000fe0:	46a8      	mov	r8, r5
 8000fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe4:	2c00      	cmp	r4, #0
 8000fe6:	d04b      	beq.n	8001080 <__aeabi_dadd+0x1e0>
 8000fe8:	464c      	mov	r4, r9
 8000fea:	1ba4      	subs	r4, r4, r6
 8000fec:	46a4      	mov	ip, r4
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_dadd+0x154>
 8000ff2:	e123      	b.n	800123c <__aeabi_dadd+0x39c>
 8000ff4:	0004      	movs	r4, r0
 8000ff6:	431c      	orrs	r4, r3
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dadd+0x15c>
 8000ffa:	e1af      	b.n	800135c <__aeabi_dadd+0x4bc>
 8000ffc:	4662      	mov	r2, ip
 8000ffe:	1e54      	subs	r4, r2, #1
 8001000:	2a01      	cmp	r2, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x166>
 8001004:	e215      	b.n	8001432 <__aeabi_dadd+0x592>
 8001006:	4d80      	ldr	r5, [pc, #512]	; (8001208 <__aeabi_dadd+0x368>)
 8001008:	45ac      	cmp	ip, r5
 800100a:	d100      	bne.n	800100e <__aeabi_dadd+0x16e>
 800100c:	e1c8      	b.n	80013a0 <__aeabi_dadd+0x500>
 800100e:	46a4      	mov	ip, r4
 8001010:	e11b      	b.n	800124a <__aeabi_dadd+0x3aa>
 8001012:	464a      	mov	r2, r9
 8001014:	1ab2      	subs	r2, r6, r2
 8001016:	4694      	mov	ip, r2
 8001018:	2a00      	cmp	r2, #0
 800101a:	dc00      	bgt.n	800101e <__aeabi_dadd+0x17e>
 800101c:	e0ac      	b.n	8001178 <__aeabi_dadd+0x2d8>
 800101e:	464a      	mov	r2, r9
 8001020:	2a00      	cmp	r2, #0
 8001022:	d043      	beq.n	80010ac <__aeabi_dadd+0x20c>
 8001024:	4a78      	ldr	r2, [pc, #480]	; (8001208 <__aeabi_dadd+0x368>)
 8001026:	4296      	cmp	r6, r2
 8001028:	d100      	bne.n	800102c <__aeabi_dadd+0x18c>
 800102a:	e1af      	b.n	800138c <__aeabi_dadd+0x4ec>
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	003c      	movs	r4, r7
 8001030:	0412      	lsls	r2, r2, #16
 8001032:	4314      	orrs	r4, r2
 8001034:	46a0      	mov	r8, r4
 8001036:	4662      	mov	r2, ip
 8001038:	2a38      	cmp	r2, #56	; 0x38
 800103a:	dc67      	bgt.n	800110c <__aeabi_dadd+0x26c>
 800103c:	2a1f      	cmp	r2, #31
 800103e:	dc00      	bgt.n	8001042 <__aeabi_dadd+0x1a2>
 8001040:	e15f      	b.n	8001302 <__aeabi_dadd+0x462>
 8001042:	4647      	mov	r7, r8
 8001044:	3a20      	subs	r2, #32
 8001046:	40d7      	lsrs	r7, r2
 8001048:	4662      	mov	r2, ip
 800104a:	2a20      	cmp	r2, #32
 800104c:	d005      	beq.n	800105a <__aeabi_dadd+0x1ba>
 800104e:	4664      	mov	r4, ip
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	1b12      	subs	r2, r2, r4
 8001054:	4644      	mov	r4, r8
 8001056:	4094      	lsls	r4, r2
 8001058:	4321      	orrs	r1, r4
 800105a:	1e4a      	subs	r2, r1, #1
 800105c:	4191      	sbcs	r1, r2
 800105e:	000c      	movs	r4, r1
 8001060:	433c      	orrs	r4, r7
 8001062:	e057      	b.n	8001114 <__aeabi_dadd+0x274>
 8001064:	003a      	movs	r2, r7
 8001066:	430a      	orrs	r2, r1
 8001068:	d100      	bne.n	800106c <__aeabi_dadd+0x1cc>
 800106a:	e105      	b.n	8001278 <__aeabi_dadd+0x3d8>
 800106c:	0022      	movs	r2, r4
 800106e:	3a01      	subs	r2, #1
 8001070:	2c01      	cmp	r4, #1
 8001072:	d100      	bne.n	8001076 <__aeabi_dadd+0x1d6>
 8001074:	e182      	b.n	800137c <__aeabi_dadd+0x4dc>
 8001076:	4c64      	ldr	r4, [pc, #400]	; (8001208 <__aeabi_dadd+0x368>)
 8001078:	45a4      	cmp	ip, r4
 800107a:	d05b      	beq.n	8001134 <__aeabi_dadd+0x294>
 800107c:	4694      	mov	ip, r2
 800107e:	e741      	b.n	8000f04 <__aeabi_dadd+0x64>
 8001080:	4c63      	ldr	r4, [pc, #396]	; (8001210 <__aeabi_dadd+0x370>)
 8001082:	1c77      	adds	r7, r6, #1
 8001084:	4227      	tst	r7, r4
 8001086:	d000      	beq.n	800108a <__aeabi_dadd+0x1ea>
 8001088:	e0c4      	b.n	8001214 <__aeabi_dadd+0x374>
 800108a:	0004      	movs	r4, r0
 800108c:	431c      	orrs	r4, r3
 800108e:	2e00      	cmp	r6, #0
 8001090:	d000      	beq.n	8001094 <__aeabi_dadd+0x1f4>
 8001092:	e169      	b.n	8001368 <__aeabi_dadd+0x4c8>
 8001094:	2c00      	cmp	r4, #0
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x1fa>
 8001098:	e1bf      	b.n	800141a <__aeabi_dadd+0x57a>
 800109a:	4644      	mov	r4, r8
 800109c:	430c      	orrs	r4, r1
 800109e:	d000      	beq.n	80010a2 <__aeabi_dadd+0x202>
 80010a0:	e1d0      	b.n	8001444 <__aeabi_dadd+0x5a4>
 80010a2:	0742      	lsls	r2, r0, #29
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	08c0      	lsrs	r0, r0, #3
 80010aa:	e029      	b.n	8001100 <__aeabi_dadd+0x260>
 80010ac:	003a      	movs	r2, r7
 80010ae:	430a      	orrs	r2, r1
 80010b0:	d100      	bne.n	80010b4 <__aeabi_dadd+0x214>
 80010b2:	e170      	b.n	8001396 <__aeabi_dadd+0x4f6>
 80010b4:	4662      	mov	r2, ip
 80010b6:	4664      	mov	r4, ip
 80010b8:	3a01      	subs	r2, #1
 80010ba:	2c01      	cmp	r4, #1
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dadd+0x220>
 80010be:	e0e0      	b.n	8001282 <__aeabi_dadd+0x3e2>
 80010c0:	4c51      	ldr	r4, [pc, #324]	; (8001208 <__aeabi_dadd+0x368>)
 80010c2:	45a4      	cmp	ip, r4
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x228>
 80010c6:	e161      	b.n	800138c <__aeabi_dadd+0x4ec>
 80010c8:	4694      	mov	ip, r2
 80010ca:	e7b4      	b.n	8001036 <__aeabi_dadd+0x196>
 80010cc:	003a      	movs	r2, r7
 80010ce:	391f      	subs	r1, #31
 80010d0:	40ca      	lsrs	r2, r1
 80010d2:	0011      	movs	r1, r2
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d003      	beq.n	80010e0 <__aeabi_dadd+0x240>
 80010d8:	2240      	movs	r2, #64	; 0x40
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	409f      	lsls	r7, r3
 80010de:	433c      	orrs	r4, r7
 80010e0:	1e63      	subs	r3, r4, #1
 80010e2:	419c      	sbcs	r4, r3
 80010e4:	2700      	movs	r7, #0
 80010e6:	2600      	movs	r6, #0
 80010e8:	430c      	orrs	r4, r1
 80010ea:	0763      	lsls	r3, r4, #29
 80010ec:	d000      	beq.n	80010f0 <__aeabi_dadd+0x250>
 80010ee:	e753      	b.n	8000f98 <__aeabi_dadd+0xf8>
 80010f0:	46b4      	mov	ip, r6
 80010f2:	08e4      	lsrs	r4, r4, #3
 80010f4:	077b      	lsls	r3, r7, #29
 80010f6:	4323      	orrs	r3, r4
 80010f8:	08f8      	lsrs	r0, r7, #3
 80010fa:	4a43      	ldr	r2, [pc, #268]	; (8001208 <__aeabi_dadd+0x368>)
 80010fc:	4594      	cmp	ip, r2
 80010fe:	d01d      	beq.n	800113c <__aeabi_dadd+0x29c>
 8001100:	4662      	mov	r2, ip
 8001102:	0307      	lsls	r7, r0, #12
 8001104:	0552      	lsls	r2, r2, #21
 8001106:	0b3f      	lsrs	r7, r7, #12
 8001108:	0d52      	lsrs	r2, r2, #21
 800110a:	e760      	b.n	8000fce <__aeabi_dadd+0x12e>
 800110c:	4644      	mov	r4, r8
 800110e:	430c      	orrs	r4, r1
 8001110:	1e62      	subs	r2, r4, #1
 8001112:	4194      	sbcs	r4, r2
 8001114:	18e4      	adds	r4, r4, r3
 8001116:	429c      	cmp	r4, r3
 8001118:	419b      	sbcs	r3, r3
 800111a:	425f      	negs	r7, r3
 800111c:	183f      	adds	r7, r7, r0
 800111e:	023b      	lsls	r3, r7, #8
 8001120:	d5e3      	bpl.n	80010ea <__aeabi_dadd+0x24a>
 8001122:	4b39      	ldr	r3, [pc, #228]	; (8001208 <__aeabi_dadd+0x368>)
 8001124:	3601      	adds	r6, #1
 8001126:	429e      	cmp	r6, r3
 8001128:	d000      	beq.n	800112c <__aeabi_dadd+0x28c>
 800112a:	e0b5      	b.n	8001298 <__aeabi_dadd+0x3f8>
 800112c:	0032      	movs	r2, r6
 800112e:	2700      	movs	r7, #0
 8001130:	2300      	movs	r3, #0
 8001132:	e74c      	b.n	8000fce <__aeabi_dadd+0x12e>
 8001134:	0742      	lsls	r2, r0, #29
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	4313      	orrs	r3, r2
 800113a:	08c0      	lsrs	r0, r0, #3
 800113c:	001a      	movs	r2, r3
 800113e:	4302      	orrs	r2, r0
 8001140:	d100      	bne.n	8001144 <__aeabi_dadd+0x2a4>
 8001142:	e1e1      	b.n	8001508 <__aeabi_dadd+0x668>
 8001144:	2780      	movs	r7, #128	; 0x80
 8001146:	033f      	lsls	r7, r7, #12
 8001148:	4307      	orrs	r7, r0
 800114a:	033f      	lsls	r7, r7, #12
 800114c:	4a2e      	ldr	r2, [pc, #184]	; (8001208 <__aeabi_dadd+0x368>)
 800114e:	0b3f      	lsrs	r7, r7, #12
 8001150:	e73d      	b.n	8000fce <__aeabi_dadd+0x12e>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 fd40 	bl	8002bd8 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	3118      	adds	r1, #24
 800115c:	291f      	cmp	r1, #31
 800115e:	dc00      	bgt.n	8001162 <__aeabi_dadd+0x2c2>
 8001160:	e6fc      	b.n	8000f5c <__aeabi_dadd+0xbc>
 8001162:	3808      	subs	r0, #8
 8001164:	4084      	lsls	r4, r0
 8001166:	0027      	movs	r7, r4
 8001168:	2400      	movs	r4, #0
 800116a:	42b1      	cmp	r1, r6
 800116c:	db00      	blt.n	8001170 <__aeabi_dadd+0x2d0>
 800116e:	e6ff      	b.n	8000f70 <__aeabi_dadd+0xd0>
 8001170:	4a26      	ldr	r2, [pc, #152]	; (800120c <__aeabi_dadd+0x36c>)
 8001172:	1a76      	subs	r6, r6, r1
 8001174:	4017      	ands	r7, r2
 8001176:	e70d      	b.n	8000f94 <__aeabi_dadd+0xf4>
 8001178:	2a00      	cmp	r2, #0
 800117a:	d02f      	beq.n	80011dc <__aeabi_dadd+0x33c>
 800117c:	464a      	mov	r2, r9
 800117e:	1b92      	subs	r2, r2, r6
 8001180:	4694      	mov	ip, r2
 8001182:	2e00      	cmp	r6, #0
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x2e8>
 8001186:	e0ad      	b.n	80012e4 <__aeabi_dadd+0x444>
 8001188:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <__aeabi_dadd+0x368>)
 800118a:	4591      	cmp	r9, r2
 800118c:	d100      	bne.n	8001190 <__aeabi_dadd+0x2f0>
 800118e:	e10f      	b.n	80013b0 <__aeabi_dadd+0x510>
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	0412      	lsls	r2, r2, #16
 8001194:	4310      	orrs	r0, r2
 8001196:	4662      	mov	r2, ip
 8001198:	2a38      	cmp	r2, #56	; 0x38
 800119a:	dd00      	ble.n	800119e <__aeabi_dadd+0x2fe>
 800119c:	e10f      	b.n	80013be <__aeabi_dadd+0x51e>
 800119e:	2a1f      	cmp	r2, #31
 80011a0:	dd00      	ble.n	80011a4 <__aeabi_dadd+0x304>
 80011a2:	e180      	b.n	80014a6 <__aeabi_dadd+0x606>
 80011a4:	4664      	mov	r4, ip
 80011a6:	2220      	movs	r2, #32
 80011a8:	001e      	movs	r6, r3
 80011aa:	1b12      	subs	r2, r2, r4
 80011ac:	4667      	mov	r7, ip
 80011ae:	0004      	movs	r4, r0
 80011b0:	4093      	lsls	r3, r2
 80011b2:	4094      	lsls	r4, r2
 80011b4:	40fe      	lsrs	r6, r7
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	4193      	sbcs	r3, r2
 80011ba:	40f8      	lsrs	r0, r7
 80011bc:	4334      	orrs	r4, r6
 80011be:	431c      	orrs	r4, r3
 80011c0:	4480      	add	r8, r0
 80011c2:	1864      	adds	r4, r4, r1
 80011c4:	428c      	cmp	r4, r1
 80011c6:	41bf      	sbcs	r7, r7
 80011c8:	427f      	negs	r7, r7
 80011ca:	464e      	mov	r6, r9
 80011cc:	4447      	add	r7, r8
 80011ce:	e7a6      	b.n	800111e <__aeabi_dadd+0x27e>
 80011d0:	4642      	mov	r2, r8
 80011d2:	430a      	orrs	r2, r1
 80011d4:	0011      	movs	r1, r2
 80011d6:	1e4a      	subs	r2, r1, #1
 80011d8:	4191      	sbcs	r1, r2
 80011da:	e6ad      	b.n	8000f38 <__aeabi_dadd+0x98>
 80011dc:	4c0c      	ldr	r4, [pc, #48]	; (8001210 <__aeabi_dadd+0x370>)
 80011de:	1c72      	adds	r2, r6, #1
 80011e0:	4222      	tst	r2, r4
 80011e2:	d000      	beq.n	80011e6 <__aeabi_dadd+0x346>
 80011e4:	e0a1      	b.n	800132a <__aeabi_dadd+0x48a>
 80011e6:	0002      	movs	r2, r0
 80011e8:	431a      	orrs	r2, r3
 80011ea:	2e00      	cmp	r6, #0
 80011ec:	d000      	beq.n	80011f0 <__aeabi_dadd+0x350>
 80011ee:	e0fa      	b.n	80013e6 <__aeabi_dadd+0x546>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x356>
 80011f4:	e145      	b.n	8001482 <__aeabi_dadd+0x5e2>
 80011f6:	003a      	movs	r2, r7
 80011f8:	430a      	orrs	r2, r1
 80011fa:	d000      	beq.n	80011fe <__aeabi_dadd+0x35e>
 80011fc:	e146      	b.n	800148c <__aeabi_dadd+0x5ec>
 80011fe:	0742      	lsls	r2, r0, #29
 8001200:	08db      	lsrs	r3, r3, #3
 8001202:	4313      	orrs	r3, r2
 8001204:	08c0      	lsrs	r0, r0, #3
 8001206:	e77b      	b.n	8001100 <__aeabi_dadd+0x260>
 8001208:	000007ff 	.word	0x000007ff
 800120c:	ff7fffff 	.word	0xff7fffff
 8001210:	000007fe 	.word	0x000007fe
 8001214:	4647      	mov	r7, r8
 8001216:	1a5c      	subs	r4, r3, r1
 8001218:	1bc2      	subs	r2, r0, r7
 800121a:	42a3      	cmp	r3, r4
 800121c:	41bf      	sbcs	r7, r7
 800121e:	427f      	negs	r7, r7
 8001220:	46b9      	mov	r9, r7
 8001222:	0017      	movs	r7, r2
 8001224:	464a      	mov	r2, r9
 8001226:	1abf      	subs	r7, r7, r2
 8001228:	023a      	lsls	r2, r7, #8
 800122a:	d500      	bpl.n	800122e <__aeabi_dadd+0x38e>
 800122c:	e08d      	b.n	800134a <__aeabi_dadd+0x4aa>
 800122e:	0023      	movs	r3, r4
 8001230:	433b      	orrs	r3, r7
 8001232:	d000      	beq.n	8001236 <__aeabi_dadd+0x396>
 8001234:	e68a      	b.n	8000f4c <__aeabi_dadd+0xac>
 8001236:	2000      	movs	r0, #0
 8001238:	2500      	movs	r5, #0
 800123a:	e761      	b.n	8001100 <__aeabi_dadd+0x260>
 800123c:	4cb4      	ldr	r4, [pc, #720]	; (8001510 <__aeabi_dadd+0x670>)
 800123e:	45a1      	cmp	r9, r4
 8001240:	d100      	bne.n	8001244 <__aeabi_dadd+0x3a4>
 8001242:	e0ad      	b.n	80013a0 <__aeabi_dadd+0x500>
 8001244:	2480      	movs	r4, #128	; 0x80
 8001246:	0424      	lsls	r4, r4, #16
 8001248:	4320      	orrs	r0, r4
 800124a:	4664      	mov	r4, ip
 800124c:	2c38      	cmp	r4, #56	; 0x38
 800124e:	dc3d      	bgt.n	80012cc <__aeabi_dadd+0x42c>
 8001250:	4662      	mov	r2, ip
 8001252:	2c1f      	cmp	r4, #31
 8001254:	dd00      	ble.n	8001258 <__aeabi_dadd+0x3b8>
 8001256:	e0b7      	b.n	80013c8 <__aeabi_dadd+0x528>
 8001258:	2520      	movs	r5, #32
 800125a:	001e      	movs	r6, r3
 800125c:	1b2d      	subs	r5, r5, r4
 800125e:	0004      	movs	r4, r0
 8001260:	40ab      	lsls	r3, r5
 8001262:	40ac      	lsls	r4, r5
 8001264:	40d6      	lsrs	r6, r2
 8001266:	40d0      	lsrs	r0, r2
 8001268:	4642      	mov	r2, r8
 800126a:	1e5d      	subs	r5, r3, #1
 800126c:	41ab      	sbcs	r3, r5
 800126e:	4334      	orrs	r4, r6
 8001270:	1a12      	subs	r2, r2, r0
 8001272:	4690      	mov	r8, r2
 8001274:	4323      	orrs	r3, r4
 8001276:	e02c      	b.n	80012d2 <__aeabi_dadd+0x432>
 8001278:	0742      	lsls	r2, r0, #29
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	4313      	orrs	r3, r2
 800127e:	08c0      	lsrs	r0, r0, #3
 8001280:	e73b      	b.n	80010fa <__aeabi_dadd+0x25a>
 8001282:	185c      	adds	r4, r3, r1
 8001284:	429c      	cmp	r4, r3
 8001286:	419b      	sbcs	r3, r3
 8001288:	4440      	add	r0, r8
 800128a:	425b      	negs	r3, r3
 800128c:	18c7      	adds	r7, r0, r3
 800128e:	2601      	movs	r6, #1
 8001290:	023b      	lsls	r3, r7, #8
 8001292:	d400      	bmi.n	8001296 <__aeabi_dadd+0x3f6>
 8001294:	e729      	b.n	80010ea <__aeabi_dadd+0x24a>
 8001296:	2602      	movs	r6, #2
 8001298:	4a9e      	ldr	r2, [pc, #632]	; (8001514 <__aeabi_dadd+0x674>)
 800129a:	0863      	lsrs	r3, r4, #1
 800129c:	4017      	ands	r7, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	4014      	ands	r4, r2
 80012a2:	431c      	orrs	r4, r3
 80012a4:	07fb      	lsls	r3, r7, #31
 80012a6:	431c      	orrs	r4, r3
 80012a8:	087f      	lsrs	r7, r7, #1
 80012aa:	e673      	b.n	8000f94 <__aeabi_dadd+0xf4>
 80012ac:	4644      	mov	r4, r8
 80012ae:	3a20      	subs	r2, #32
 80012b0:	40d4      	lsrs	r4, r2
 80012b2:	4662      	mov	r2, ip
 80012b4:	2a20      	cmp	r2, #32
 80012b6:	d005      	beq.n	80012c4 <__aeabi_dadd+0x424>
 80012b8:	4667      	mov	r7, ip
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	1bd2      	subs	r2, r2, r7
 80012be:	4647      	mov	r7, r8
 80012c0:	4097      	lsls	r7, r2
 80012c2:	4339      	orrs	r1, r7
 80012c4:	1e4a      	subs	r2, r1, #1
 80012c6:	4191      	sbcs	r1, r2
 80012c8:	4321      	orrs	r1, r4
 80012ca:	e635      	b.n	8000f38 <__aeabi_dadd+0x98>
 80012cc:	4303      	orrs	r3, r0
 80012ce:	1e58      	subs	r0, r3, #1
 80012d0:	4183      	sbcs	r3, r0
 80012d2:	1acc      	subs	r4, r1, r3
 80012d4:	42a1      	cmp	r1, r4
 80012d6:	41bf      	sbcs	r7, r7
 80012d8:	4643      	mov	r3, r8
 80012da:	427f      	negs	r7, r7
 80012dc:	4655      	mov	r5, sl
 80012de:	464e      	mov	r6, r9
 80012e0:	1bdf      	subs	r7, r3, r7
 80012e2:	e62e      	b.n	8000f42 <__aeabi_dadd+0xa2>
 80012e4:	0002      	movs	r2, r0
 80012e6:	431a      	orrs	r2, r3
 80012e8:	d100      	bne.n	80012ec <__aeabi_dadd+0x44c>
 80012ea:	e0bd      	b.n	8001468 <__aeabi_dadd+0x5c8>
 80012ec:	4662      	mov	r2, ip
 80012ee:	4664      	mov	r4, ip
 80012f0:	3a01      	subs	r2, #1
 80012f2:	2c01      	cmp	r4, #1
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x458>
 80012f6:	e0e5      	b.n	80014c4 <__aeabi_dadd+0x624>
 80012f8:	4c85      	ldr	r4, [pc, #532]	; (8001510 <__aeabi_dadd+0x670>)
 80012fa:	45a4      	cmp	ip, r4
 80012fc:	d058      	beq.n	80013b0 <__aeabi_dadd+0x510>
 80012fe:	4694      	mov	ip, r2
 8001300:	e749      	b.n	8001196 <__aeabi_dadd+0x2f6>
 8001302:	4664      	mov	r4, ip
 8001304:	2220      	movs	r2, #32
 8001306:	1b12      	subs	r2, r2, r4
 8001308:	4644      	mov	r4, r8
 800130a:	4094      	lsls	r4, r2
 800130c:	000f      	movs	r7, r1
 800130e:	46a1      	mov	r9, r4
 8001310:	4664      	mov	r4, ip
 8001312:	4091      	lsls	r1, r2
 8001314:	40e7      	lsrs	r7, r4
 8001316:	464c      	mov	r4, r9
 8001318:	1e4a      	subs	r2, r1, #1
 800131a:	4191      	sbcs	r1, r2
 800131c:	433c      	orrs	r4, r7
 800131e:	4642      	mov	r2, r8
 8001320:	430c      	orrs	r4, r1
 8001322:	4661      	mov	r1, ip
 8001324:	40ca      	lsrs	r2, r1
 8001326:	1880      	adds	r0, r0, r2
 8001328:	e6f4      	b.n	8001114 <__aeabi_dadd+0x274>
 800132a:	4c79      	ldr	r4, [pc, #484]	; (8001510 <__aeabi_dadd+0x670>)
 800132c:	42a2      	cmp	r2, r4
 800132e:	d100      	bne.n	8001332 <__aeabi_dadd+0x492>
 8001330:	e6fd      	b.n	800112e <__aeabi_dadd+0x28e>
 8001332:	1859      	adds	r1, r3, r1
 8001334:	4299      	cmp	r1, r3
 8001336:	419b      	sbcs	r3, r3
 8001338:	4440      	add	r0, r8
 800133a:	425f      	negs	r7, r3
 800133c:	19c7      	adds	r7, r0, r7
 800133e:	07fc      	lsls	r4, r7, #31
 8001340:	0849      	lsrs	r1, r1, #1
 8001342:	0016      	movs	r6, r2
 8001344:	430c      	orrs	r4, r1
 8001346:	087f      	lsrs	r7, r7, #1
 8001348:	e6cf      	b.n	80010ea <__aeabi_dadd+0x24a>
 800134a:	1acc      	subs	r4, r1, r3
 800134c:	42a1      	cmp	r1, r4
 800134e:	41bf      	sbcs	r7, r7
 8001350:	4643      	mov	r3, r8
 8001352:	427f      	negs	r7, r7
 8001354:	1a18      	subs	r0, r3, r0
 8001356:	4655      	mov	r5, sl
 8001358:	1bc7      	subs	r7, r0, r7
 800135a:	e5f7      	b.n	8000f4c <__aeabi_dadd+0xac>
 800135c:	08c9      	lsrs	r1, r1, #3
 800135e:	077b      	lsls	r3, r7, #29
 8001360:	4655      	mov	r5, sl
 8001362:	430b      	orrs	r3, r1
 8001364:	08f8      	lsrs	r0, r7, #3
 8001366:	e6c8      	b.n	80010fa <__aeabi_dadd+0x25a>
 8001368:	2c00      	cmp	r4, #0
 800136a:	d000      	beq.n	800136e <__aeabi_dadd+0x4ce>
 800136c:	e081      	b.n	8001472 <__aeabi_dadd+0x5d2>
 800136e:	4643      	mov	r3, r8
 8001370:	430b      	orrs	r3, r1
 8001372:	d115      	bne.n	80013a0 <__aeabi_dadd+0x500>
 8001374:	2080      	movs	r0, #128	; 0x80
 8001376:	2500      	movs	r5, #0
 8001378:	0300      	lsls	r0, r0, #12
 800137a:	e6e3      	b.n	8001144 <__aeabi_dadd+0x2a4>
 800137c:	1a5c      	subs	r4, r3, r1
 800137e:	42a3      	cmp	r3, r4
 8001380:	419b      	sbcs	r3, r3
 8001382:	1bc7      	subs	r7, r0, r7
 8001384:	425b      	negs	r3, r3
 8001386:	2601      	movs	r6, #1
 8001388:	1aff      	subs	r7, r7, r3
 800138a:	e5da      	b.n	8000f42 <__aeabi_dadd+0xa2>
 800138c:	0742      	lsls	r2, r0, #29
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	4313      	orrs	r3, r2
 8001392:	08c0      	lsrs	r0, r0, #3
 8001394:	e6d2      	b.n	800113c <__aeabi_dadd+0x29c>
 8001396:	0742      	lsls	r2, r0, #29
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	4313      	orrs	r3, r2
 800139c:	08c0      	lsrs	r0, r0, #3
 800139e:	e6ac      	b.n	80010fa <__aeabi_dadd+0x25a>
 80013a0:	4643      	mov	r3, r8
 80013a2:	4642      	mov	r2, r8
 80013a4:	08c9      	lsrs	r1, r1, #3
 80013a6:	075b      	lsls	r3, r3, #29
 80013a8:	4655      	mov	r5, sl
 80013aa:	430b      	orrs	r3, r1
 80013ac:	08d0      	lsrs	r0, r2, #3
 80013ae:	e6c5      	b.n	800113c <__aeabi_dadd+0x29c>
 80013b0:	4643      	mov	r3, r8
 80013b2:	4642      	mov	r2, r8
 80013b4:	075b      	lsls	r3, r3, #29
 80013b6:	08c9      	lsrs	r1, r1, #3
 80013b8:	430b      	orrs	r3, r1
 80013ba:	08d0      	lsrs	r0, r2, #3
 80013bc:	e6be      	b.n	800113c <__aeabi_dadd+0x29c>
 80013be:	4303      	orrs	r3, r0
 80013c0:	001c      	movs	r4, r3
 80013c2:	1e63      	subs	r3, r4, #1
 80013c4:	419c      	sbcs	r4, r3
 80013c6:	e6fc      	b.n	80011c2 <__aeabi_dadd+0x322>
 80013c8:	0002      	movs	r2, r0
 80013ca:	3c20      	subs	r4, #32
 80013cc:	40e2      	lsrs	r2, r4
 80013ce:	0014      	movs	r4, r2
 80013d0:	4662      	mov	r2, ip
 80013d2:	2a20      	cmp	r2, #32
 80013d4:	d003      	beq.n	80013de <__aeabi_dadd+0x53e>
 80013d6:	2540      	movs	r5, #64	; 0x40
 80013d8:	1aad      	subs	r5, r5, r2
 80013da:	40a8      	lsls	r0, r5
 80013dc:	4303      	orrs	r3, r0
 80013de:	1e58      	subs	r0, r3, #1
 80013e0:	4183      	sbcs	r3, r0
 80013e2:	4323      	orrs	r3, r4
 80013e4:	e775      	b.n	80012d2 <__aeabi_dadd+0x432>
 80013e6:	2a00      	cmp	r2, #0
 80013e8:	d0e2      	beq.n	80013b0 <__aeabi_dadd+0x510>
 80013ea:	003a      	movs	r2, r7
 80013ec:	430a      	orrs	r2, r1
 80013ee:	d0cd      	beq.n	800138c <__aeabi_dadd+0x4ec>
 80013f0:	0742      	lsls	r2, r0, #29
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	08c0      	lsrs	r0, r0, #3
 80013fa:	0312      	lsls	r2, r2, #12
 80013fc:	4210      	tst	r0, r2
 80013fe:	d006      	beq.n	800140e <__aeabi_dadd+0x56e>
 8001400:	08fc      	lsrs	r4, r7, #3
 8001402:	4214      	tst	r4, r2
 8001404:	d103      	bne.n	800140e <__aeabi_dadd+0x56e>
 8001406:	0020      	movs	r0, r4
 8001408:	08cb      	lsrs	r3, r1, #3
 800140a:	077a      	lsls	r2, r7, #29
 800140c:	4313      	orrs	r3, r2
 800140e:	0f5a      	lsrs	r2, r3, #29
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	0752      	lsls	r2, r2, #29
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	4313      	orrs	r3, r2
 8001418:	e690      	b.n	800113c <__aeabi_dadd+0x29c>
 800141a:	4643      	mov	r3, r8
 800141c:	430b      	orrs	r3, r1
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x582>
 8001420:	e709      	b.n	8001236 <__aeabi_dadd+0x396>
 8001422:	4643      	mov	r3, r8
 8001424:	4642      	mov	r2, r8
 8001426:	08c9      	lsrs	r1, r1, #3
 8001428:	075b      	lsls	r3, r3, #29
 800142a:	4655      	mov	r5, sl
 800142c:	430b      	orrs	r3, r1
 800142e:	08d0      	lsrs	r0, r2, #3
 8001430:	e666      	b.n	8001100 <__aeabi_dadd+0x260>
 8001432:	1acc      	subs	r4, r1, r3
 8001434:	42a1      	cmp	r1, r4
 8001436:	4189      	sbcs	r1, r1
 8001438:	1a3f      	subs	r7, r7, r0
 800143a:	4249      	negs	r1, r1
 800143c:	4655      	mov	r5, sl
 800143e:	2601      	movs	r6, #1
 8001440:	1a7f      	subs	r7, r7, r1
 8001442:	e57e      	b.n	8000f42 <__aeabi_dadd+0xa2>
 8001444:	4642      	mov	r2, r8
 8001446:	1a5c      	subs	r4, r3, r1
 8001448:	1a87      	subs	r7, r0, r2
 800144a:	42a3      	cmp	r3, r4
 800144c:	4192      	sbcs	r2, r2
 800144e:	4252      	negs	r2, r2
 8001450:	1abf      	subs	r7, r7, r2
 8001452:	023a      	lsls	r2, r7, #8
 8001454:	d53d      	bpl.n	80014d2 <__aeabi_dadd+0x632>
 8001456:	1acc      	subs	r4, r1, r3
 8001458:	42a1      	cmp	r1, r4
 800145a:	4189      	sbcs	r1, r1
 800145c:	4643      	mov	r3, r8
 800145e:	4249      	negs	r1, r1
 8001460:	1a1f      	subs	r7, r3, r0
 8001462:	4655      	mov	r5, sl
 8001464:	1a7f      	subs	r7, r7, r1
 8001466:	e595      	b.n	8000f94 <__aeabi_dadd+0xf4>
 8001468:	077b      	lsls	r3, r7, #29
 800146a:	08c9      	lsrs	r1, r1, #3
 800146c:	430b      	orrs	r3, r1
 800146e:	08f8      	lsrs	r0, r7, #3
 8001470:	e643      	b.n	80010fa <__aeabi_dadd+0x25a>
 8001472:	4644      	mov	r4, r8
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	430c      	orrs	r4, r1
 8001478:	d130      	bne.n	80014dc <__aeabi_dadd+0x63c>
 800147a:	0742      	lsls	r2, r0, #29
 800147c:	4313      	orrs	r3, r2
 800147e:	08c0      	lsrs	r0, r0, #3
 8001480:	e65c      	b.n	800113c <__aeabi_dadd+0x29c>
 8001482:	077b      	lsls	r3, r7, #29
 8001484:	08c9      	lsrs	r1, r1, #3
 8001486:	430b      	orrs	r3, r1
 8001488:	08f8      	lsrs	r0, r7, #3
 800148a:	e639      	b.n	8001100 <__aeabi_dadd+0x260>
 800148c:	185c      	adds	r4, r3, r1
 800148e:	429c      	cmp	r4, r3
 8001490:	419b      	sbcs	r3, r3
 8001492:	4440      	add	r0, r8
 8001494:	425b      	negs	r3, r3
 8001496:	18c7      	adds	r7, r0, r3
 8001498:	023b      	lsls	r3, r7, #8
 800149a:	d400      	bmi.n	800149e <__aeabi_dadd+0x5fe>
 800149c:	e625      	b.n	80010ea <__aeabi_dadd+0x24a>
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <__aeabi_dadd+0x674>)
 80014a0:	2601      	movs	r6, #1
 80014a2:	401f      	ands	r7, r3
 80014a4:	e621      	b.n	80010ea <__aeabi_dadd+0x24a>
 80014a6:	0004      	movs	r4, r0
 80014a8:	3a20      	subs	r2, #32
 80014aa:	40d4      	lsrs	r4, r2
 80014ac:	4662      	mov	r2, ip
 80014ae:	2a20      	cmp	r2, #32
 80014b0:	d004      	beq.n	80014bc <__aeabi_dadd+0x61c>
 80014b2:	2240      	movs	r2, #64	; 0x40
 80014b4:	4666      	mov	r6, ip
 80014b6:	1b92      	subs	r2, r2, r6
 80014b8:	4090      	lsls	r0, r2
 80014ba:	4303      	orrs	r3, r0
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	4193      	sbcs	r3, r2
 80014c0:	431c      	orrs	r4, r3
 80014c2:	e67e      	b.n	80011c2 <__aeabi_dadd+0x322>
 80014c4:	185c      	adds	r4, r3, r1
 80014c6:	428c      	cmp	r4, r1
 80014c8:	4189      	sbcs	r1, r1
 80014ca:	4440      	add	r0, r8
 80014cc:	4249      	negs	r1, r1
 80014ce:	1847      	adds	r7, r0, r1
 80014d0:	e6dd      	b.n	800128e <__aeabi_dadd+0x3ee>
 80014d2:	0023      	movs	r3, r4
 80014d4:	433b      	orrs	r3, r7
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x63a>
 80014d8:	e6ad      	b.n	8001236 <__aeabi_dadd+0x396>
 80014da:	e606      	b.n	80010ea <__aeabi_dadd+0x24a>
 80014dc:	0744      	lsls	r4, r0, #29
 80014de:	4323      	orrs	r3, r4
 80014e0:	2480      	movs	r4, #128	; 0x80
 80014e2:	08c0      	lsrs	r0, r0, #3
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	4220      	tst	r0, r4
 80014e8:	d008      	beq.n	80014fc <__aeabi_dadd+0x65c>
 80014ea:	4642      	mov	r2, r8
 80014ec:	08d6      	lsrs	r6, r2, #3
 80014ee:	4226      	tst	r6, r4
 80014f0:	d104      	bne.n	80014fc <__aeabi_dadd+0x65c>
 80014f2:	4655      	mov	r5, sl
 80014f4:	0030      	movs	r0, r6
 80014f6:	08cb      	lsrs	r3, r1, #3
 80014f8:	0751      	lsls	r1, r2, #29
 80014fa:	430b      	orrs	r3, r1
 80014fc:	0f5a      	lsrs	r2, r3, #29
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	0752      	lsls	r2, r2, #29
 8001504:	4313      	orrs	r3, r2
 8001506:	e619      	b.n	800113c <__aeabi_dadd+0x29c>
 8001508:	2300      	movs	r3, #0
 800150a:	4a01      	ldr	r2, [pc, #4]	; (8001510 <__aeabi_dadd+0x670>)
 800150c:	001f      	movs	r7, r3
 800150e:	e55e      	b.n	8000fce <__aeabi_dadd+0x12e>
 8001510:	000007ff 	.word	0x000007ff
 8001514:	ff7fffff 	.word	0xff7fffff

08001518 <__aeabi_ddiv>:
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	4657      	mov	r7, sl
 800151c:	464e      	mov	r6, r9
 800151e:	4645      	mov	r5, r8
 8001520:	46de      	mov	lr, fp
 8001522:	b5e0      	push	{r5, r6, r7, lr}
 8001524:	4681      	mov	r9, r0
 8001526:	0005      	movs	r5, r0
 8001528:	030c      	lsls	r4, r1, #12
 800152a:	0048      	lsls	r0, r1, #1
 800152c:	4692      	mov	sl, r2
 800152e:	001f      	movs	r7, r3
 8001530:	b085      	sub	sp, #20
 8001532:	0b24      	lsrs	r4, r4, #12
 8001534:	0d40      	lsrs	r0, r0, #21
 8001536:	0fce      	lsrs	r6, r1, #31
 8001538:	2800      	cmp	r0, #0
 800153a:	d100      	bne.n	800153e <__aeabi_ddiv+0x26>
 800153c:	e156      	b.n	80017ec <__aeabi_ddiv+0x2d4>
 800153e:	4bd4      	ldr	r3, [pc, #848]	; (8001890 <__aeabi_ddiv+0x378>)
 8001540:	4298      	cmp	r0, r3
 8001542:	d100      	bne.n	8001546 <__aeabi_ddiv+0x2e>
 8001544:	e172      	b.n	800182c <__aeabi_ddiv+0x314>
 8001546:	0f6b      	lsrs	r3, r5, #29
 8001548:	00e4      	lsls	r4, r4, #3
 800154a:	431c      	orrs	r4, r3
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	4323      	orrs	r3, r4
 8001552:	4698      	mov	r8, r3
 8001554:	4bcf      	ldr	r3, [pc, #828]	; (8001894 <__aeabi_ddiv+0x37c>)
 8001556:	00ed      	lsls	r5, r5, #3
 8001558:	469b      	mov	fp, r3
 800155a:	2300      	movs	r3, #0
 800155c:	4699      	mov	r9, r3
 800155e:	4483      	add	fp, r0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	033c      	lsls	r4, r7, #12
 8001564:	007b      	lsls	r3, r7, #1
 8001566:	4650      	mov	r0, sl
 8001568:	0b24      	lsrs	r4, r4, #12
 800156a:	0d5b      	lsrs	r3, r3, #21
 800156c:	0fff      	lsrs	r7, r7, #31
 800156e:	2b00      	cmp	r3, #0
 8001570:	d100      	bne.n	8001574 <__aeabi_ddiv+0x5c>
 8001572:	e11f      	b.n	80017b4 <__aeabi_ddiv+0x29c>
 8001574:	4ac6      	ldr	r2, [pc, #792]	; (8001890 <__aeabi_ddiv+0x378>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d100      	bne.n	800157c <__aeabi_ddiv+0x64>
 800157a:	e162      	b.n	8001842 <__aeabi_ddiv+0x32a>
 800157c:	49c5      	ldr	r1, [pc, #788]	; (8001894 <__aeabi_ddiv+0x37c>)
 800157e:	0f42      	lsrs	r2, r0, #29
 8001580:	468c      	mov	ip, r1
 8001582:	00e4      	lsls	r4, r4, #3
 8001584:	4659      	mov	r1, fp
 8001586:	4314      	orrs	r4, r2
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	4463      	add	r3, ip
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	1acb      	subs	r3, r1, r3
 8001590:	4314      	orrs	r4, r2
 8001592:	469b      	mov	fp, r3
 8001594:	00c2      	lsls	r2, r0, #3
 8001596:	2000      	movs	r0, #0
 8001598:	0033      	movs	r3, r6
 800159a:	407b      	eors	r3, r7
 800159c:	469a      	mov	sl, r3
 800159e:	464b      	mov	r3, r9
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d827      	bhi.n	80015f4 <__aeabi_ddiv+0xdc>
 80015a4:	49bc      	ldr	r1, [pc, #752]	; (8001898 <__aeabi_ddiv+0x380>)
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	58cb      	ldr	r3, [r1, r3]
 80015aa:	469f      	mov	pc, r3
 80015ac:	46b2      	mov	sl, r6
 80015ae:	9b00      	ldr	r3, [sp, #0]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d016      	beq.n	80015e2 <__aeabi_ddiv+0xca>
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d100      	bne.n	80015ba <__aeabi_ddiv+0xa2>
 80015b8:	e28e      	b.n	8001ad8 <__aeabi_ddiv+0x5c0>
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d000      	beq.n	80015c0 <__aeabi_ddiv+0xa8>
 80015be:	e0d9      	b.n	8001774 <__aeabi_ddiv+0x25c>
 80015c0:	2300      	movs	r3, #0
 80015c2:	2400      	movs	r4, #0
 80015c4:	2500      	movs	r5, #0
 80015c6:	4652      	mov	r2, sl
 80015c8:	051b      	lsls	r3, r3, #20
 80015ca:	4323      	orrs	r3, r4
 80015cc:	07d2      	lsls	r2, r2, #31
 80015ce:	4313      	orrs	r3, r2
 80015d0:	0028      	movs	r0, r5
 80015d2:	0019      	movs	r1, r3
 80015d4:	b005      	add	sp, #20
 80015d6:	bcf0      	pop	{r4, r5, r6, r7}
 80015d8:	46bb      	mov	fp, r7
 80015da:	46b2      	mov	sl, r6
 80015dc:	46a9      	mov	r9, r5
 80015de:	46a0      	mov	r8, r4
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e2:	2400      	movs	r4, #0
 80015e4:	2500      	movs	r5, #0
 80015e6:	4baa      	ldr	r3, [pc, #680]	; (8001890 <__aeabi_ddiv+0x378>)
 80015e8:	e7ed      	b.n	80015c6 <__aeabi_ddiv+0xae>
 80015ea:	46ba      	mov	sl, r7
 80015ec:	46a0      	mov	r8, r4
 80015ee:	0015      	movs	r5, r2
 80015f0:	9000      	str	r0, [sp, #0]
 80015f2:	e7dc      	b.n	80015ae <__aeabi_ddiv+0x96>
 80015f4:	4544      	cmp	r4, r8
 80015f6:	d200      	bcs.n	80015fa <__aeabi_ddiv+0xe2>
 80015f8:	e1c7      	b.n	800198a <__aeabi_ddiv+0x472>
 80015fa:	d100      	bne.n	80015fe <__aeabi_ddiv+0xe6>
 80015fc:	e1c2      	b.n	8001984 <__aeabi_ddiv+0x46c>
 80015fe:	2301      	movs	r3, #1
 8001600:	425b      	negs	r3, r3
 8001602:	469c      	mov	ip, r3
 8001604:	002e      	movs	r6, r5
 8001606:	4640      	mov	r0, r8
 8001608:	2500      	movs	r5, #0
 800160a:	44e3      	add	fp, ip
 800160c:	0223      	lsls	r3, r4, #8
 800160e:	0e14      	lsrs	r4, r2, #24
 8001610:	431c      	orrs	r4, r3
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	4699      	mov	r9, r3
 8001616:	0423      	lsls	r3, r4, #16
 8001618:	0c1f      	lsrs	r7, r3, #16
 800161a:	0212      	lsls	r2, r2, #8
 800161c:	4649      	mov	r1, r9
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	9701      	str	r7, [sp, #4]
 8001622:	f7fe fe09 	bl	8000238 <__aeabi_uidivmod>
 8001626:	0002      	movs	r2, r0
 8001628:	437a      	muls	r2, r7
 800162a:	040b      	lsls	r3, r1, #16
 800162c:	0c31      	lsrs	r1, r6, #16
 800162e:	4680      	mov	r8, r0
 8001630:	4319      	orrs	r1, r3
 8001632:	428a      	cmp	r2, r1
 8001634:	d907      	bls.n	8001646 <__aeabi_ddiv+0x12e>
 8001636:	2301      	movs	r3, #1
 8001638:	425b      	negs	r3, r3
 800163a:	469c      	mov	ip, r3
 800163c:	1909      	adds	r1, r1, r4
 800163e:	44e0      	add	r8, ip
 8001640:	428c      	cmp	r4, r1
 8001642:	d800      	bhi.n	8001646 <__aeabi_ddiv+0x12e>
 8001644:	e207      	b.n	8001a56 <__aeabi_ddiv+0x53e>
 8001646:	1a88      	subs	r0, r1, r2
 8001648:	4649      	mov	r1, r9
 800164a:	f7fe fdf5 	bl	8000238 <__aeabi_uidivmod>
 800164e:	0409      	lsls	r1, r1, #16
 8001650:	468c      	mov	ip, r1
 8001652:	0431      	lsls	r1, r6, #16
 8001654:	4666      	mov	r6, ip
 8001656:	9a01      	ldr	r2, [sp, #4]
 8001658:	0c09      	lsrs	r1, r1, #16
 800165a:	4342      	muls	r2, r0
 800165c:	0003      	movs	r3, r0
 800165e:	4331      	orrs	r1, r6
 8001660:	428a      	cmp	r2, r1
 8001662:	d904      	bls.n	800166e <__aeabi_ddiv+0x156>
 8001664:	1909      	adds	r1, r1, r4
 8001666:	3b01      	subs	r3, #1
 8001668:	428c      	cmp	r4, r1
 800166a:	d800      	bhi.n	800166e <__aeabi_ddiv+0x156>
 800166c:	e1ed      	b.n	8001a4a <__aeabi_ddiv+0x532>
 800166e:	1a88      	subs	r0, r1, r2
 8001670:	4642      	mov	r2, r8
 8001672:	0412      	lsls	r2, r2, #16
 8001674:	431a      	orrs	r2, r3
 8001676:	4690      	mov	r8, r2
 8001678:	4641      	mov	r1, r8
 800167a:	9b00      	ldr	r3, [sp, #0]
 800167c:	040e      	lsls	r6, r1, #16
 800167e:	0c1b      	lsrs	r3, r3, #16
 8001680:	001f      	movs	r7, r3
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	9b00      	ldr	r3, [sp, #0]
 8001686:	0c36      	lsrs	r6, r6, #16
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	0c19      	lsrs	r1, r3, #16
 800168c:	000b      	movs	r3, r1
 800168e:	4373      	muls	r3, r6
 8001690:	0c12      	lsrs	r2, r2, #16
 8001692:	437e      	muls	r6, r7
 8001694:	9103      	str	r1, [sp, #12]
 8001696:	4351      	muls	r1, r2
 8001698:	437a      	muls	r2, r7
 800169a:	0c1f      	lsrs	r7, r3, #16
 800169c:	46bc      	mov	ip, r7
 800169e:	1876      	adds	r6, r6, r1
 80016a0:	4466      	add	r6, ip
 80016a2:	42b1      	cmp	r1, r6
 80016a4:	d903      	bls.n	80016ae <__aeabi_ddiv+0x196>
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0249      	lsls	r1, r1, #9
 80016aa:	468c      	mov	ip, r1
 80016ac:	4462      	add	r2, ip
 80016ae:	0c31      	lsrs	r1, r6, #16
 80016b0:	188a      	adds	r2, r1, r2
 80016b2:	0431      	lsls	r1, r6, #16
 80016b4:	041e      	lsls	r6, r3, #16
 80016b6:	0c36      	lsrs	r6, r6, #16
 80016b8:	198e      	adds	r6, r1, r6
 80016ba:	4290      	cmp	r0, r2
 80016bc:	d302      	bcc.n	80016c4 <__aeabi_ddiv+0x1ac>
 80016be:	d112      	bne.n	80016e6 <__aeabi_ddiv+0x1ce>
 80016c0:	42b5      	cmp	r5, r6
 80016c2:	d210      	bcs.n	80016e6 <__aeabi_ddiv+0x1ce>
 80016c4:	4643      	mov	r3, r8
 80016c6:	1e59      	subs	r1, r3, #1
 80016c8:	9b00      	ldr	r3, [sp, #0]
 80016ca:	469c      	mov	ip, r3
 80016cc:	4465      	add	r5, ip
 80016ce:	001f      	movs	r7, r3
 80016d0:	429d      	cmp	r5, r3
 80016d2:	419b      	sbcs	r3, r3
 80016d4:	425b      	negs	r3, r3
 80016d6:	191b      	adds	r3, r3, r4
 80016d8:	18c0      	adds	r0, r0, r3
 80016da:	4284      	cmp	r4, r0
 80016dc:	d200      	bcs.n	80016e0 <__aeabi_ddiv+0x1c8>
 80016de:	e1a0      	b.n	8001a22 <__aeabi_ddiv+0x50a>
 80016e0:	d100      	bne.n	80016e4 <__aeabi_ddiv+0x1cc>
 80016e2:	e19b      	b.n	8001a1c <__aeabi_ddiv+0x504>
 80016e4:	4688      	mov	r8, r1
 80016e6:	1bae      	subs	r6, r5, r6
 80016e8:	42b5      	cmp	r5, r6
 80016ea:	41ad      	sbcs	r5, r5
 80016ec:	1a80      	subs	r0, r0, r2
 80016ee:	426d      	negs	r5, r5
 80016f0:	1b40      	subs	r0, r0, r5
 80016f2:	4284      	cmp	r4, r0
 80016f4:	d100      	bne.n	80016f8 <__aeabi_ddiv+0x1e0>
 80016f6:	e1d5      	b.n	8001aa4 <__aeabi_ddiv+0x58c>
 80016f8:	4649      	mov	r1, r9
 80016fa:	f7fe fd9d 	bl	8000238 <__aeabi_uidivmod>
 80016fe:	9a01      	ldr	r2, [sp, #4]
 8001700:	040b      	lsls	r3, r1, #16
 8001702:	4342      	muls	r2, r0
 8001704:	0c31      	lsrs	r1, r6, #16
 8001706:	0005      	movs	r5, r0
 8001708:	4319      	orrs	r1, r3
 800170a:	428a      	cmp	r2, r1
 800170c:	d900      	bls.n	8001710 <__aeabi_ddiv+0x1f8>
 800170e:	e16c      	b.n	80019ea <__aeabi_ddiv+0x4d2>
 8001710:	1a88      	subs	r0, r1, r2
 8001712:	4649      	mov	r1, r9
 8001714:	f7fe fd90 	bl	8000238 <__aeabi_uidivmod>
 8001718:	9a01      	ldr	r2, [sp, #4]
 800171a:	0436      	lsls	r6, r6, #16
 800171c:	4342      	muls	r2, r0
 800171e:	0409      	lsls	r1, r1, #16
 8001720:	0c36      	lsrs	r6, r6, #16
 8001722:	0003      	movs	r3, r0
 8001724:	430e      	orrs	r6, r1
 8001726:	42b2      	cmp	r2, r6
 8001728:	d900      	bls.n	800172c <__aeabi_ddiv+0x214>
 800172a:	e153      	b.n	80019d4 <__aeabi_ddiv+0x4bc>
 800172c:	9803      	ldr	r0, [sp, #12]
 800172e:	1ab6      	subs	r6, r6, r2
 8001730:	0002      	movs	r2, r0
 8001732:	042d      	lsls	r5, r5, #16
 8001734:	431d      	orrs	r5, r3
 8001736:	9f02      	ldr	r7, [sp, #8]
 8001738:	042b      	lsls	r3, r5, #16
 800173a:	0c1b      	lsrs	r3, r3, #16
 800173c:	435a      	muls	r2, r3
 800173e:	437b      	muls	r3, r7
 8001740:	469c      	mov	ip, r3
 8001742:	0c29      	lsrs	r1, r5, #16
 8001744:	4348      	muls	r0, r1
 8001746:	0c13      	lsrs	r3, r2, #16
 8001748:	4484      	add	ip, r0
 800174a:	4463      	add	r3, ip
 800174c:	4379      	muls	r1, r7
 800174e:	4298      	cmp	r0, r3
 8001750:	d903      	bls.n	800175a <__aeabi_ddiv+0x242>
 8001752:	2080      	movs	r0, #128	; 0x80
 8001754:	0240      	lsls	r0, r0, #9
 8001756:	4684      	mov	ip, r0
 8001758:	4461      	add	r1, ip
 800175a:	0c18      	lsrs	r0, r3, #16
 800175c:	0412      	lsls	r2, r2, #16
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	0c12      	lsrs	r2, r2, #16
 8001762:	1841      	adds	r1, r0, r1
 8001764:	189b      	adds	r3, r3, r2
 8001766:	428e      	cmp	r6, r1
 8001768:	d200      	bcs.n	800176c <__aeabi_ddiv+0x254>
 800176a:	e0ff      	b.n	800196c <__aeabi_ddiv+0x454>
 800176c:	d100      	bne.n	8001770 <__aeabi_ddiv+0x258>
 800176e:	e0fa      	b.n	8001966 <__aeabi_ddiv+0x44e>
 8001770:	2301      	movs	r3, #1
 8001772:	431d      	orrs	r5, r3
 8001774:	4a49      	ldr	r2, [pc, #292]	; (800189c <__aeabi_ddiv+0x384>)
 8001776:	445a      	add	r2, fp
 8001778:	2a00      	cmp	r2, #0
 800177a:	dc00      	bgt.n	800177e <__aeabi_ddiv+0x266>
 800177c:	e0aa      	b.n	80018d4 <__aeabi_ddiv+0x3bc>
 800177e:	076b      	lsls	r3, r5, #29
 8001780:	d000      	beq.n	8001784 <__aeabi_ddiv+0x26c>
 8001782:	e13d      	b.n	8001a00 <__aeabi_ddiv+0x4e8>
 8001784:	08ed      	lsrs	r5, r5, #3
 8001786:	4643      	mov	r3, r8
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	d506      	bpl.n	800179a <__aeabi_ddiv+0x282>
 800178c:	4642      	mov	r2, r8
 800178e:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <__aeabi_ddiv+0x388>)
 8001790:	401a      	ands	r2, r3
 8001792:	4690      	mov	r8, r2
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	00d2      	lsls	r2, r2, #3
 8001798:	445a      	add	r2, fp
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <__aeabi_ddiv+0x38c>)
 800179c:	429a      	cmp	r2, r3
 800179e:	dd00      	ble.n	80017a2 <__aeabi_ddiv+0x28a>
 80017a0:	e71f      	b.n	80015e2 <__aeabi_ddiv+0xca>
 80017a2:	4643      	mov	r3, r8
 80017a4:	075b      	lsls	r3, r3, #29
 80017a6:	431d      	orrs	r5, r3
 80017a8:	4643      	mov	r3, r8
 80017aa:	0552      	lsls	r2, r2, #21
 80017ac:	025c      	lsls	r4, r3, #9
 80017ae:	0b24      	lsrs	r4, r4, #12
 80017b0:	0d53      	lsrs	r3, r2, #21
 80017b2:	e708      	b.n	80015c6 <__aeabi_ddiv+0xae>
 80017b4:	4652      	mov	r2, sl
 80017b6:	4322      	orrs	r2, r4
 80017b8:	d100      	bne.n	80017bc <__aeabi_ddiv+0x2a4>
 80017ba:	e07b      	b.n	80018b4 <__aeabi_ddiv+0x39c>
 80017bc:	2c00      	cmp	r4, #0
 80017be:	d100      	bne.n	80017c2 <__aeabi_ddiv+0x2aa>
 80017c0:	e0fa      	b.n	80019b8 <__aeabi_ddiv+0x4a0>
 80017c2:	0020      	movs	r0, r4
 80017c4:	f001 fa08 	bl	8002bd8 <__clzsi2>
 80017c8:	0002      	movs	r2, r0
 80017ca:	3a0b      	subs	r2, #11
 80017cc:	231d      	movs	r3, #29
 80017ce:	0001      	movs	r1, r0
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	4652      	mov	r2, sl
 80017d4:	3908      	subs	r1, #8
 80017d6:	40da      	lsrs	r2, r3
 80017d8:	408c      	lsls	r4, r1
 80017da:	4314      	orrs	r4, r2
 80017dc:	4652      	mov	r2, sl
 80017de:	408a      	lsls	r2, r1
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <__aeabi_ddiv+0x390>)
 80017e2:	4458      	add	r0, fp
 80017e4:	469b      	mov	fp, r3
 80017e6:	4483      	add	fp, r0
 80017e8:	2000      	movs	r0, #0
 80017ea:	e6d5      	b.n	8001598 <__aeabi_ddiv+0x80>
 80017ec:	464b      	mov	r3, r9
 80017ee:	4323      	orrs	r3, r4
 80017f0:	4698      	mov	r8, r3
 80017f2:	d044      	beq.n	800187e <__aeabi_ddiv+0x366>
 80017f4:	2c00      	cmp	r4, #0
 80017f6:	d100      	bne.n	80017fa <__aeabi_ddiv+0x2e2>
 80017f8:	e0ce      	b.n	8001998 <__aeabi_ddiv+0x480>
 80017fa:	0020      	movs	r0, r4
 80017fc:	f001 f9ec 	bl	8002bd8 <__clzsi2>
 8001800:	0001      	movs	r1, r0
 8001802:	0002      	movs	r2, r0
 8001804:	390b      	subs	r1, #11
 8001806:	231d      	movs	r3, #29
 8001808:	1a5b      	subs	r3, r3, r1
 800180a:	4649      	mov	r1, r9
 800180c:	0010      	movs	r0, r2
 800180e:	40d9      	lsrs	r1, r3
 8001810:	3808      	subs	r0, #8
 8001812:	4084      	lsls	r4, r0
 8001814:	000b      	movs	r3, r1
 8001816:	464d      	mov	r5, r9
 8001818:	4323      	orrs	r3, r4
 800181a:	4698      	mov	r8, r3
 800181c:	4085      	lsls	r5, r0
 800181e:	4823      	ldr	r0, [pc, #140]	; (80018ac <__aeabi_ddiv+0x394>)
 8001820:	1a83      	subs	r3, r0, r2
 8001822:	469b      	mov	fp, r3
 8001824:	2300      	movs	r3, #0
 8001826:	4699      	mov	r9, r3
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	e69a      	b.n	8001562 <__aeabi_ddiv+0x4a>
 800182c:	464b      	mov	r3, r9
 800182e:	4323      	orrs	r3, r4
 8001830:	4698      	mov	r8, r3
 8001832:	d11d      	bne.n	8001870 <__aeabi_ddiv+0x358>
 8001834:	2308      	movs	r3, #8
 8001836:	4699      	mov	r9, r3
 8001838:	3b06      	subs	r3, #6
 800183a:	2500      	movs	r5, #0
 800183c:	4683      	mov	fp, r0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	e68f      	b.n	8001562 <__aeabi_ddiv+0x4a>
 8001842:	4652      	mov	r2, sl
 8001844:	4322      	orrs	r2, r4
 8001846:	d109      	bne.n	800185c <__aeabi_ddiv+0x344>
 8001848:	2302      	movs	r3, #2
 800184a:	4649      	mov	r1, r9
 800184c:	4319      	orrs	r1, r3
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <__aeabi_ddiv+0x398>)
 8001850:	4689      	mov	r9, r1
 8001852:	469c      	mov	ip, r3
 8001854:	2400      	movs	r4, #0
 8001856:	2002      	movs	r0, #2
 8001858:	44e3      	add	fp, ip
 800185a:	e69d      	b.n	8001598 <__aeabi_ddiv+0x80>
 800185c:	2303      	movs	r3, #3
 800185e:	464a      	mov	r2, r9
 8001860:	431a      	orrs	r2, r3
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <__aeabi_ddiv+0x398>)
 8001864:	4691      	mov	r9, r2
 8001866:	469c      	mov	ip, r3
 8001868:	4652      	mov	r2, sl
 800186a:	2003      	movs	r0, #3
 800186c:	44e3      	add	fp, ip
 800186e:	e693      	b.n	8001598 <__aeabi_ddiv+0x80>
 8001870:	230c      	movs	r3, #12
 8001872:	4699      	mov	r9, r3
 8001874:	3b09      	subs	r3, #9
 8001876:	46a0      	mov	r8, r4
 8001878:	4683      	mov	fp, r0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	e671      	b.n	8001562 <__aeabi_ddiv+0x4a>
 800187e:	2304      	movs	r3, #4
 8001880:	4699      	mov	r9, r3
 8001882:	2300      	movs	r3, #0
 8001884:	469b      	mov	fp, r3
 8001886:	3301      	adds	r3, #1
 8001888:	2500      	movs	r5, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	e669      	b.n	8001562 <__aeabi_ddiv+0x4a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff
 8001894:	fffffc01 	.word	0xfffffc01
 8001898:	08009d2c 	.word	0x08009d2c
 800189c:	000003ff 	.word	0x000003ff
 80018a0:	feffffff 	.word	0xfeffffff
 80018a4:	000007fe 	.word	0x000007fe
 80018a8:	000003f3 	.word	0x000003f3
 80018ac:	fffffc0d 	.word	0xfffffc0d
 80018b0:	fffff801 	.word	0xfffff801
 80018b4:	4649      	mov	r1, r9
 80018b6:	2301      	movs	r3, #1
 80018b8:	4319      	orrs	r1, r3
 80018ba:	4689      	mov	r9, r1
 80018bc:	2400      	movs	r4, #0
 80018be:	2001      	movs	r0, #1
 80018c0:	e66a      	b.n	8001598 <__aeabi_ddiv+0x80>
 80018c2:	2300      	movs	r3, #0
 80018c4:	2480      	movs	r4, #128	; 0x80
 80018c6:	469a      	mov	sl, r3
 80018c8:	2500      	movs	r5, #0
 80018ca:	4b8a      	ldr	r3, [pc, #552]	; (8001af4 <__aeabi_ddiv+0x5dc>)
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	e67a      	b.n	80015c6 <__aeabi_ddiv+0xae>
 80018d0:	2501      	movs	r5, #1
 80018d2:	426d      	negs	r5, r5
 80018d4:	2301      	movs	r3, #1
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	2b38      	cmp	r3, #56	; 0x38
 80018da:	dd00      	ble.n	80018de <__aeabi_ddiv+0x3c6>
 80018dc:	e670      	b.n	80015c0 <__aeabi_ddiv+0xa8>
 80018de:	2b1f      	cmp	r3, #31
 80018e0:	dc00      	bgt.n	80018e4 <__aeabi_ddiv+0x3cc>
 80018e2:	e0bf      	b.n	8001a64 <__aeabi_ddiv+0x54c>
 80018e4:	211f      	movs	r1, #31
 80018e6:	4249      	negs	r1, r1
 80018e8:	1a8a      	subs	r2, r1, r2
 80018ea:	4641      	mov	r1, r8
 80018ec:	40d1      	lsrs	r1, r2
 80018ee:	000a      	movs	r2, r1
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d004      	beq.n	80018fe <__aeabi_ddiv+0x3e6>
 80018f4:	4641      	mov	r1, r8
 80018f6:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <__aeabi_ddiv+0x5e0>)
 80018f8:	445b      	add	r3, fp
 80018fa:	4099      	lsls	r1, r3
 80018fc:	430d      	orrs	r5, r1
 80018fe:	1e6b      	subs	r3, r5, #1
 8001900:	419d      	sbcs	r5, r3
 8001902:	2307      	movs	r3, #7
 8001904:	432a      	orrs	r2, r5
 8001906:	001d      	movs	r5, r3
 8001908:	2400      	movs	r4, #0
 800190a:	4015      	ands	r5, r2
 800190c:	4213      	tst	r3, r2
 800190e:	d100      	bne.n	8001912 <__aeabi_ddiv+0x3fa>
 8001910:	e0d4      	b.n	8001abc <__aeabi_ddiv+0x5a4>
 8001912:	210f      	movs	r1, #15
 8001914:	2300      	movs	r3, #0
 8001916:	4011      	ands	r1, r2
 8001918:	2904      	cmp	r1, #4
 800191a:	d100      	bne.n	800191e <__aeabi_ddiv+0x406>
 800191c:	e0cb      	b.n	8001ab6 <__aeabi_ddiv+0x59e>
 800191e:	1d11      	adds	r1, r2, #4
 8001920:	4291      	cmp	r1, r2
 8001922:	4192      	sbcs	r2, r2
 8001924:	4252      	negs	r2, r2
 8001926:	189b      	adds	r3, r3, r2
 8001928:	000a      	movs	r2, r1
 800192a:	0219      	lsls	r1, r3, #8
 800192c:	d400      	bmi.n	8001930 <__aeabi_ddiv+0x418>
 800192e:	e0c2      	b.n	8001ab6 <__aeabi_ddiv+0x59e>
 8001930:	2301      	movs	r3, #1
 8001932:	2400      	movs	r4, #0
 8001934:	2500      	movs	r5, #0
 8001936:	e646      	b.n	80015c6 <__aeabi_ddiv+0xae>
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	4641      	mov	r1, r8
 800193c:	031b      	lsls	r3, r3, #12
 800193e:	4219      	tst	r1, r3
 8001940:	d008      	beq.n	8001954 <__aeabi_ddiv+0x43c>
 8001942:	421c      	tst	r4, r3
 8001944:	d106      	bne.n	8001954 <__aeabi_ddiv+0x43c>
 8001946:	431c      	orrs	r4, r3
 8001948:	0324      	lsls	r4, r4, #12
 800194a:	46ba      	mov	sl, r7
 800194c:	0015      	movs	r5, r2
 800194e:	4b69      	ldr	r3, [pc, #420]	; (8001af4 <__aeabi_ddiv+0x5dc>)
 8001950:	0b24      	lsrs	r4, r4, #12
 8001952:	e638      	b.n	80015c6 <__aeabi_ddiv+0xae>
 8001954:	2480      	movs	r4, #128	; 0x80
 8001956:	4643      	mov	r3, r8
 8001958:	0324      	lsls	r4, r4, #12
 800195a:	431c      	orrs	r4, r3
 800195c:	0324      	lsls	r4, r4, #12
 800195e:	46b2      	mov	sl, r6
 8001960:	4b64      	ldr	r3, [pc, #400]	; (8001af4 <__aeabi_ddiv+0x5dc>)
 8001962:	0b24      	lsrs	r4, r4, #12
 8001964:	e62f      	b.n	80015c6 <__aeabi_ddiv+0xae>
 8001966:	2b00      	cmp	r3, #0
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x454>
 800196a:	e703      	b.n	8001774 <__aeabi_ddiv+0x25c>
 800196c:	19a6      	adds	r6, r4, r6
 800196e:	1e68      	subs	r0, r5, #1
 8001970:	42a6      	cmp	r6, r4
 8001972:	d200      	bcs.n	8001976 <__aeabi_ddiv+0x45e>
 8001974:	e08d      	b.n	8001a92 <__aeabi_ddiv+0x57a>
 8001976:	428e      	cmp	r6, r1
 8001978:	d200      	bcs.n	800197c <__aeabi_ddiv+0x464>
 800197a:	e0a3      	b.n	8001ac4 <__aeabi_ddiv+0x5ac>
 800197c:	d100      	bne.n	8001980 <__aeabi_ddiv+0x468>
 800197e:	e0b3      	b.n	8001ae8 <__aeabi_ddiv+0x5d0>
 8001980:	0005      	movs	r5, r0
 8001982:	e6f5      	b.n	8001770 <__aeabi_ddiv+0x258>
 8001984:	42aa      	cmp	r2, r5
 8001986:	d900      	bls.n	800198a <__aeabi_ddiv+0x472>
 8001988:	e639      	b.n	80015fe <__aeabi_ddiv+0xe6>
 800198a:	4643      	mov	r3, r8
 800198c:	07de      	lsls	r6, r3, #31
 800198e:	0858      	lsrs	r0, r3, #1
 8001990:	086b      	lsrs	r3, r5, #1
 8001992:	431e      	orrs	r6, r3
 8001994:	07ed      	lsls	r5, r5, #31
 8001996:	e639      	b.n	800160c <__aeabi_ddiv+0xf4>
 8001998:	4648      	mov	r0, r9
 800199a:	f001 f91d 	bl	8002bd8 <__clzsi2>
 800199e:	0001      	movs	r1, r0
 80019a0:	0002      	movs	r2, r0
 80019a2:	3115      	adds	r1, #21
 80019a4:	3220      	adds	r2, #32
 80019a6:	291c      	cmp	r1, #28
 80019a8:	dc00      	bgt.n	80019ac <__aeabi_ddiv+0x494>
 80019aa:	e72c      	b.n	8001806 <__aeabi_ddiv+0x2ee>
 80019ac:	464b      	mov	r3, r9
 80019ae:	3808      	subs	r0, #8
 80019b0:	4083      	lsls	r3, r0
 80019b2:	2500      	movs	r5, #0
 80019b4:	4698      	mov	r8, r3
 80019b6:	e732      	b.n	800181e <__aeabi_ddiv+0x306>
 80019b8:	f001 f90e 	bl	8002bd8 <__clzsi2>
 80019bc:	0003      	movs	r3, r0
 80019be:	001a      	movs	r2, r3
 80019c0:	3215      	adds	r2, #21
 80019c2:	3020      	adds	r0, #32
 80019c4:	2a1c      	cmp	r2, #28
 80019c6:	dc00      	bgt.n	80019ca <__aeabi_ddiv+0x4b2>
 80019c8:	e700      	b.n	80017cc <__aeabi_ddiv+0x2b4>
 80019ca:	4654      	mov	r4, sl
 80019cc:	3b08      	subs	r3, #8
 80019ce:	2200      	movs	r2, #0
 80019d0:	409c      	lsls	r4, r3
 80019d2:	e705      	b.n	80017e0 <__aeabi_ddiv+0x2c8>
 80019d4:	1936      	adds	r6, r6, r4
 80019d6:	3b01      	subs	r3, #1
 80019d8:	42b4      	cmp	r4, r6
 80019da:	d900      	bls.n	80019de <__aeabi_ddiv+0x4c6>
 80019dc:	e6a6      	b.n	800172c <__aeabi_ddiv+0x214>
 80019de:	42b2      	cmp	r2, r6
 80019e0:	d800      	bhi.n	80019e4 <__aeabi_ddiv+0x4cc>
 80019e2:	e6a3      	b.n	800172c <__aeabi_ddiv+0x214>
 80019e4:	1e83      	subs	r3, r0, #2
 80019e6:	1936      	adds	r6, r6, r4
 80019e8:	e6a0      	b.n	800172c <__aeabi_ddiv+0x214>
 80019ea:	1909      	adds	r1, r1, r4
 80019ec:	3d01      	subs	r5, #1
 80019ee:	428c      	cmp	r4, r1
 80019f0:	d900      	bls.n	80019f4 <__aeabi_ddiv+0x4dc>
 80019f2:	e68d      	b.n	8001710 <__aeabi_ddiv+0x1f8>
 80019f4:	428a      	cmp	r2, r1
 80019f6:	d800      	bhi.n	80019fa <__aeabi_ddiv+0x4e2>
 80019f8:	e68a      	b.n	8001710 <__aeabi_ddiv+0x1f8>
 80019fa:	1e85      	subs	r5, r0, #2
 80019fc:	1909      	adds	r1, r1, r4
 80019fe:	e687      	b.n	8001710 <__aeabi_ddiv+0x1f8>
 8001a00:	230f      	movs	r3, #15
 8001a02:	402b      	ands	r3, r5
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d100      	bne.n	8001a0a <__aeabi_ddiv+0x4f2>
 8001a08:	e6bc      	b.n	8001784 <__aeabi_ddiv+0x26c>
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	42ab      	cmp	r3, r5
 8001a10:	419b      	sbcs	r3, r3
 8001a12:	3504      	adds	r5, #4
 8001a14:	425b      	negs	r3, r3
 8001a16:	08ed      	lsrs	r5, r5, #3
 8001a18:	4498      	add	r8, r3
 8001a1a:	e6b4      	b.n	8001786 <__aeabi_ddiv+0x26e>
 8001a1c:	42af      	cmp	r7, r5
 8001a1e:	d900      	bls.n	8001a22 <__aeabi_ddiv+0x50a>
 8001a20:	e660      	b.n	80016e4 <__aeabi_ddiv+0x1cc>
 8001a22:	4282      	cmp	r2, r0
 8001a24:	d804      	bhi.n	8001a30 <__aeabi_ddiv+0x518>
 8001a26:	d000      	beq.n	8001a2a <__aeabi_ddiv+0x512>
 8001a28:	e65c      	b.n	80016e4 <__aeabi_ddiv+0x1cc>
 8001a2a:	42ae      	cmp	r6, r5
 8001a2c:	d800      	bhi.n	8001a30 <__aeabi_ddiv+0x518>
 8001a2e:	e659      	b.n	80016e4 <__aeabi_ddiv+0x1cc>
 8001a30:	2302      	movs	r3, #2
 8001a32:	425b      	negs	r3, r3
 8001a34:	469c      	mov	ip, r3
 8001a36:	9b00      	ldr	r3, [sp, #0]
 8001a38:	44e0      	add	r8, ip
 8001a3a:	469c      	mov	ip, r3
 8001a3c:	4465      	add	r5, ip
 8001a3e:	429d      	cmp	r5, r3
 8001a40:	419b      	sbcs	r3, r3
 8001a42:	425b      	negs	r3, r3
 8001a44:	191b      	adds	r3, r3, r4
 8001a46:	18c0      	adds	r0, r0, r3
 8001a48:	e64d      	b.n	80016e6 <__aeabi_ddiv+0x1ce>
 8001a4a:	428a      	cmp	r2, r1
 8001a4c:	d800      	bhi.n	8001a50 <__aeabi_ddiv+0x538>
 8001a4e:	e60e      	b.n	800166e <__aeabi_ddiv+0x156>
 8001a50:	1e83      	subs	r3, r0, #2
 8001a52:	1909      	adds	r1, r1, r4
 8001a54:	e60b      	b.n	800166e <__aeabi_ddiv+0x156>
 8001a56:	428a      	cmp	r2, r1
 8001a58:	d800      	bhi.n	8001a5c <__aeabi_ddiv+0x544>
 8001a5a:	e5f4      	b.n	8001646 <__aeabi_ddiv+0x12e>
 8001a5c:	1e83      	subs	r3, r0, #2
 8001a5e:	4698      	mov	r8, r3
 8001a60:	1909      	adds	r1, r1, r4
 8001a62:	e5f0      	b.n	8001646 <__aeabi_ddiv+0x12e>
 8001a64:	4925      	ldr	r1, [pc, #148]	; (8001afc <__aeabi_ddiv+0x5e4>)
 8001a66:	0028      	movs	r0, r5
 8001a68:	4459      	add	r1, fp
 8001a6a:	408d      	lsls	r5, r1
 8001a6c:	4642      	mov	r2, r8
 8001a6e:	408a      	lsls	r2, r1
 8001a70:	1e69      	subs	r1, r5, #1
 8001a72:	418d      	sbcs	r5, r1
 8001a74:	4641      	mov	r1, r8
 8001a76:	40d8      	lsrs	r0, r3
 8001a78:	40d9      	lsrs	r1, r3
 8001a7a:	4302      	orrs	r2, r0
 8001a7c:	432a      	orrs	r2, r5
 8001a7e:	000b      	movs	r3, r1
 8001a80:	0751      	lsls	r1, r2, #29
 8001a82:	d100      	bne.n	8001a86 <__aeabi_ddiv+0x56e>
 8001a84:	e751      	b.n	800192a <__aeabi_ddiv+0x412>
 8001a86:	210f      	movs	r1, #15
 8001a88:	4011      	ands	r1, r2
 8001a8a:	2904      	cmp	r1, #4
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_ddiv+0x578>
 8001a8e:	e746      	b.n	800191e <__aeabi_ddiv+0x406>
 8001a90:	e74b      	b.n	800192a <__aeabi_ddiv+0x412>
 8001a92:	0005      	movs	r5, r0
 8001a94:	428e      	cmp	r6, r1
 8001a96:	d000      	beq.n	8001a9a <__aeabi_ddiv+0x582>
 8001a98:	e66a      	b.n	8001770 <__aeabi_ddiv+0x258>
 8001a9a:	9a00      	ldr	r2, [sp, #0]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_ddiv+0x58a>
 8001aa0:	e666      	b.n	8001770 <__aeabi_ddiv+0x258>
 8001aa2:	e667      	b.n	8001774 <__aeabi_ddiv+0x25c>
 8001aa4:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <__aeabi_ddiv+0x5e8>)
 8001aa6:	445a      	add	r2, fp
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	dc00      	bgt.n	8001aae <__aeabi_ddiv+0x596>
 8001aac:	e710      	b.n	80018d0 <__aeabi_ddiv+0x3b8>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	4498      	add	r8, r3
 8001ab4:	e667      	b.n	8001786 <__aeabi_ddiv+0x26e>
 8001ab6:	075d      	lsls	r5, r3, #29
 8001ab8:	025b      	lsls	r3, r3, #9
 8001aba:	0b1c      	lsrs	r4, r3, #12
 8001abc:	08d2      	lsrs	r2, r2, #3
 8001abe:	2300      	movs	r3, #0
 8001ac0:	4315      	orrs	r5, r2
 8001ac2:	e580      	b.n	80015c6 <__aeabi_ddiv+0xae>
 8001ac4:	9800      	ldr	r0, [sp, #0]
 8001ac6:	3d02      	subs	r5, #2
 8001ac8:	0042      	lsls	r2, r0, #1
 8001aca:	4282      	cmp	r2, r0
 8001acc:	41bf      	sbcs	r7, r7
 8001ace:	427f      	negs	r7, r7
 8001ad0:	193c      	adds	r4, r7, r4
 8001ad2:	1936      	adds	r6, r6, r4
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	e7dd      	b.n	8001a94 <__aeabi_ddiv+0x57c>
 8001ad8:	2480      	movs	r4, #128	; 0x80
 8001ada:	4643      	mov	r3, r8
 8001adc:	0324      	lsls	r4, r4, #12
 8001ade:	431c      	orrs	r4, r3
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__aeabi_ddiv+0x5dc>)
 8001ae4:	0b24      	lsrs	r4, r4, #12
 8001ae6:	e56e      	b.n	80015c6 <__aeabi_ddiv+0xae>
 8001ae8:	9a00      	ldr	r2, [sp, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3ea      	bcc.n	8001ac4 <__aeabi_ddiv+0x5ac>
 8001aee:	0005      	movs	r5, r0
 8001af0:	e7d3      	b.n	8001a9a <__aeabi_ddiv+0x582>
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	000007ff 	.word	0x000007ff
 8001af8:	0000043e 	.word	0x0000043e
 8001afc:	0000041e 	.word	0x0000041e
 8001b00:	000003ff 	.word	0x000003ff

08001b04 <__eqdf2>:
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	464e      	mov	r6, r9
 8001b08:	4645      	mov	r5, r8
 8001b0a:	46de      	mov	lr, fp
 8001b0c:	4657      	mov	r7, sl
 8001b0e:	4690      	mov	r8, r2
 8001b10:	b5e0      	push	{r5, r6, r7, lr}
 8001b12:	0017      	movs	r7, r2
 8001b14:	031a      	lsls	r2, r3, #12
 8001b16:	0b12      	lsrs	r2, r2, #12
 8001b18:	0005      	movs	r5, r0
 8001b1a:	4684      	mov	ip, r0
 8001b1c:	4819      	ldr	r0, [pc, #100]	; (8001b84 <__eqdf2+0x80>)
 8001b1e:	030e      	lsls	r6, r1, #12
 8001b20:	004c      	lsls	r4, r1, #1
 8001b22:	4691      	mov	r9, r2
 8001b24:	005a      	lsls	r2, r3, #1
 8001b26:	0fdb      	lsrs	r3, r3, #31
 8001b28:	469b      	mov	fp, r3
 8001b2a:	0b36      	lsrs	r6, r6, #12
 8001b2c:	0d64      	lsrs	r4, r4, #21
 8001b2e:	0fc9      	lsrs	r1, r1, #31
 8001b30:	0d52      	lsrs	r2, r2, #21
 8001b32:	4284      	cmp	r4, r0
 8001b34:	d019      	beq.n	8001b6a <__eqdf2+0x66>
 8001b36:	4282      	cmp	r2, r0
 8001b38:	d010      	beq.n	8001b5c <__eqdf2+0x58>
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	4294      	cmp	r4, r2
 8001b3e:	d10e      	bne.n	8001b5e <__eqdf2+0x5a>
 8001b40:	454e      	cmp	r6, r9
 8001b42:	d10c      	bne.n	8001b5e <__eqdf2+0x5a>
 8001b44:	2001      	movs	r0, #1
 8001b46:	45c4      	cmp	ip, r8
 8001b48:	d109      	bne.n	8001b5e <__eqdf2+0x5a>
 8001b4a:	4559      	cmp	r1, fp
 8001b4c:	d017      	beq.n	8001b7e <__eqdf2+0x7a>
 8001b4e:	2c00      	cmp	r4, #0
 8001b50:	d105      	bne.n	8001b5e <__eqdf2+0x5a>
 8001b52:	0030      	movs	r0, r6
 8001b54:	4328      	orrs	r0, r5
 8001b56:	1e43      	subs	r3, r0, #1
 8001b58:	4198      	sbcs	r0, r3
 8001b5a:	e000      	b.n	8001b5e <__eqdf2+0x5a>
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b60:	46bb      	mov	fp, r7
 8001b62:	46b2      	mov	sl, r6
 8001b64:	46a9      	mov	r9, r5
 8001b66:	46a0      	mov	r8, r4
 8001b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b6a:	0033      	movs	r3, r6
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	432b      	orrs	r3, r5
 8001b70:	d1f5      	bne.n	8001b5e <__eqdf2+0x5a>
 8001b72:	42a2      	cmp	r2, r4
 8001b74:	d1f3      	bne.n	8001b5e <__eqdf2+0x5a>
 8001b76:	464b      	mov	r3, r9
 8001b78:	433b      	orrs	r3, r7
 8001b7a:	d1f0      	bne.n	8001b5e <__eqdf2+0x5a>
 8001b7c:	e7e2      	b.n	8001b44 <__eqdf2+0x40>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	e7ed      	b.n	8001b5e <__eqdf2+0x5a>
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	000007ff 	.word	0x000007ff

08001b88 <__gedf2>:
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8a:	4647      	mov	r7, r8
 8001b8c:	46ce      	mov	lr, r9
 8001b8e:	0004      	movs	r4, r0
 8001b90:	0018      	movs	r0, r3
 8001b92:	0016      	movs	r6, r2
 8001b94:	031b      	lsls	r3, r3, #12
 8001b96:	0b1b      	lsrs	r3, r3, #12
 8001b98:	4d2d      	ldr	r5, [pc, #180]	; (8001c50 <__gedf2+0xc8>)
 8001b9a:	004a      	lsls	r2, r1, #1
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	0043      	lsls	r3, r0, #1
 8001ba2:	030f      	lsls	r7, r1, #12
 8001ba4:	46a4      	mov	ip, r4
 8001ba6:	46b0      	mov	r8, r6
 8001ba8:	0b3f      	lsrs	r7, r7, #12
 8001baa:	0d52      	lsrs	r2, r2, #21
 8001bac:	0fc9      	lsrs	r1, r1, #31
 8001bae:	0d5b      	lsrs	r3, r3, #21
 8001bb0:	0fc0      	lsrs	r0, r0, #31
 8001bb2:	42aa      	cmp	r2, r5
 8001bb4:	d021      	beq.n	8001bfa <__gedf2+0x72>
 8001bb6:	42ab      	cmp	r3, r5
 8001bb8:	d013      	beq.n	8001be2 <__gedf2+0x5a>
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d122      	bne.n	8001c04 <__gedf2+0x7c>
 8001bbe:	433c      	orrs	r4, r7
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <__gedf2+0x42>
 8001bc4:	464d      	mov	r5, r9
 8001bc6:	432e      	orrs	r6, r5
 8001bc8:	d022      	beq.n	8001c10 <__gedf2+0x88>
 8001bca:	2c00      	cmp	r4, #0
 8001bcc:	d010      	beq.n	8001bf0 <__gedf2+0x68>
 8001bce:	4281      	cmp	r1, r0
 8001bd0:	d022      	beq.n	8001c18 <__gedf2+0x90>
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	3901      	subs	r1, #1
 8001bd6:	4008      	ands	r0, r1
 8001bd8:	3801      	subs	r0, #1
 8001bda:	bcc0      	pop	{r6, r7}
 8001bdc:	46b9      	mov	r9, r7
 8001bde:	46b0      	mov	r8, r6
 8001be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be2:	464d      	mov	r5, r9
 8001be4:	432e      	orrs	r6, r5
 8001be6:	d129      	bne.n	8001c3c <__gedf2+0xb4>
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	d1f0      	bne.n	8001bce <__gedf2+0x46>
 8001bec:	433c      	orrs	r4, r7
 8001bee:	d1ee      	bne.n	8001bce <__gedf2+0x46>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d1f2      	bne.n	8001bda <__gedf2+0x52>
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	4240      	negs	r0, r0
 8001bf8:	e7ef      	b.n	8001bda <__gedf2+0x52>
 8001bfa:	003d      	movs	r5, r7
 8001bfc:	4325      	orrs	r5, r4
 8001bfe:	d11d      	bne.n	8001c3c <__gedf2+0xb4>
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d0ee      	beq.n	8001be2 <__gedf2+0x5a>
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e2      	bne.n	8001bce <__gedf2+0x46>
 8001c08:	464c      	mov	r4, r9
 8001c0a:	4326      	orrs	r6, r4
 8001c0c:	d1df      	bne.n	8001bce <__gedf2+0x46>
 8001c0e:	e7e0      	b.n	8001bd2 <__gedf2+0x4a>
 8001c10:	2000      	movs	r0, #0
 8001c12:	2c00      	cmp	r4, #0
 8001c14:	d0e1      	beq.n	8001bda <__gedf2+0x52>
 8001c16:	e7dc      	b.n	8001bd2 <__gedf2+0x4a>
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dc0a      	bgt.n	8001c32 <__gedf2+0xaa>
 8001c1c:	dbe8      	blt.n	8001bf0 <__gedf2+0x68>
 8001c1e:	454f      	cmp	r7, r9
 8001c20:	d8d7      	bhi.n	8001bd2 <__gedf2+0x4a>
 8001c22:	d00e      	beq.n	8001c42 <__gedf2+0xba>
 8001c24:	2000      	movs	r0, #0
 8001c26:	454f      	cmp	r7, r9
 8001c28:	d2d7      	bcs.n	8001bda <__gedf2+0x52>
 8001c2a:	2900      	cmp	r1, #0
 8001c2c:	d0e2      	beq.n	8001bf4 <__gedf2+0x6c>
 8001c2e:	0008      	movs	r0, r1
 8001c30:	e7d3      	b.n	8001bda <__gedf2+0x52>
 8001c32:	4243      	negs	r3, r0
 8001c34:	4158      	adcs	r0, r3
 8001c36:	0040      	lsls	r0, r0, #1
 8001c38:	3801      	subs	r0, #1
 8001c3a:	e7ce      	b.n	8001bda <__gedf2+0x52>
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	4240      	negs	r0, r0
 8001c40:	e7cb      	b.n	8001bda <__gedf2+0x52>
 8001c42:	45c4      	cmp	ip, r8
 8001c44:	d8c5      	bhi.n	8001bd2 <__gedf2+0x4a>
 8001c46:	2000      	movs	r0, #0
 8001c48:	45c4      	cmp	ip, r8
 8001c4a:	d2c6      	bcs.n	8001bda <__gedf2+0x52>
 8001c4c:	e7ed      	b.n	8001c2a <__gedf2+0xa2>
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	000007ff 	.word	0x000007ff

08001c54 <__ledf2>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	4647      	mov	r7, r8
 8001c58:	46ce      	mov	lr, r9
 8001c5a:	0004      	movs	r4, r0
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	0016      	movs	r6, r2
 8001c60:	031b      	lsls	r3, r3, #12
 8001c62:	0b1b      	lsrs	r3, r3, #12
 8001c64:	4d2c      	ldr	r5, [pc, #176]	; (8001d18 <__ledf2+0xc4>)
 8001c66:	004a      	lsls	r2, r1, #1
 8001c68:	4699      	mov	r9, r3
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	0043      	lsls	r3, r0, #1
 8001c6e:	030f      	lsls	r7, r1, #12
 8001c70:	46a4      	mov	ip, r4
 8001c72:	46b0      	mov	r8, r6
 8001c74:	0b3f      	lsrs	r7, r7, #12
 8001c76:	0d52      	lsrs	r2, r2, #21
 8001c78:	0fc9      	lsrs	r1, r1, #31
 8001c7a:	0d5b      	lsrs	r3, r3, #21
 8001c7c:	0fc0      	lsrs	r0, r0, #31
 8001c7e:	42aa      	cmp	r2, r5
 8001c80:	d00d      	beq.n	8001c9e <__ledf2+0x4a>
 8001c82:	42ab      	cmp	r3, r5
 8001c84:	d010      	beq.n	8001ca8 <__ledf2+0x54>
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d127      	bne.n	8001cda <__ledf2+0x86>
 8001c8a:	433c      	orrs	r4, r7
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d111      	bne.n	8001cb4 <__ledf2+0x60>
 8001c90:	464d      	mov	r5, r9
 8001c92:	432e      	orrs	r6, r5
 8001c94:	d10e      	bne.n	8001cb4 <__ledf2+0x60>
 8001c96:	2000      	movs	r0, #0
 8001c98:	2c00      	cmp	r4, #0
 8001c9a:	d015      	beq.n	8001cc8 <__ledf2+0x74>
 8001c9c:	e00e      	b.n	8001cbc <__ledf2+0x68>
 8001c9e:	003d      	movs	r5, r7
 8001ca0:	4325      	orrs	r5, r4
 8001ca2:	d110      	bne.n	8001cc6 <__ledf2+0x72>
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d118      	bne.n	8001cda <__ledf2+0x86>
 8001ca8:	464d      	mov	r5, r9
 8001caa:	432e      	orrs	r6, r5
 8001cac:	d10b      	bne.n	8001cc6 <__ledf2+0x72>
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	d102      	bne.n	8001cb8 <__ledf2+0x64>
 8001cb2:	433c      	orrs	r4, r7
 8001cb4:	2c00      	cmp	r4, #0
 8001cb6:	d00b      	beq.n	8001cd0 <__ledf2+0x7c>
 8001cb8:	4281      	cmp	r1, r0
 8001cba:	d014      	beq.n	8001ce6 <__ledf2+0x92>
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	3901      	subs	r1, #1
 8001cc0:	4008      	ands	r0, r1
 8001cc2:	3801      	subs	r0, #1
 8001cc4:	e000      	b.n	8001cc8 <__ledf2+0x74>
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	bcc0      	pop	{r6, r7}
 8001cca:	46b9      	mov	r9, r7
 8001ccc:	46b0      	mov	r8, r6
 8001cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d1f9      	bne.n	8001cc8 <__ledf2+0x74>
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	4240      	negs	r0, r0
 8001cd8:	e7f6      	b.n	8001cc8 <__ledf2+0x74>
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ec      	bne.n	8001cb8 <__ledf2+0x64>
 8001cde:	464c      	mov	r4, r9
 8001ce0:	4326      	orrs	r6, r4
 8001ce2:	d1e9      	bne.n	8001cb8 <__ledf2+0x64>
 8001ce4:	e7ea      	b.n	8001cbc <__ledf2+0x68>
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dd04      	ble.n	8001cf4 <__ledf2+0xa0>
 8001cea:	4243      	negs	r3, r0
 8001cec:	4158      	adcs	r0, r3
 8001cee:	0040      	lsls	r0, r0, #1
 8001cf0:	3801      	subs	r0, #1
 8001cf2:	e7e9      	b.n	8001cc8 <__ledf2+0x74>
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbeb      	blt.n	8001cd0 <__ledf2+0x7c>
 8001cf8:	454f      	cmp	r7, r9
 8001cfa:	d8df      	bhi.n	8001cbc <__ledf2+0x68>
 8001cfc:	d006      	beq.n	8001d0c <__ledf2+0xb8>
 8001cfe:	2000      	movs	r0, #0
 8001d00:	454f      	cmp	r7, r9
 8001d02:	d2e1      	bcs.n	8001cc8 <__ledf2+0x74>
 8001d04:	2900      	cmp	r1, #0
 8001d06:	d0e5      	beq.n	8001cd4 <__ledf2+0x80>
 8001d08:	0008      	movs	r0, r1
 8001d0a:	e7dd      	b.n	8001cc8 <__ledf2+0x74>
 8001d0c:	45c4      	cmp	ip, r8
 8001d0e:	d8d5      	bhi.n	8001cbc <__ledf2+0x68>
 8001d10:	2000      	movs	r0, #0
 8001d12:	45c4      	cmp	ip, r8
 8001d14:	d2d8      	bcs.n	8001cc8 <__ledf2+0x74>
 8001d16:	e7f5      	b.n	8001d04 <__ledf2+0xb0>
 8001d18:	000007ff 	.word	0x000007ff

08001d1c <__aeabi_dmul>:
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	4657      	mov	r7, sl
 8001d20:	464e      	mov	r6, r9
 8001d22:	4645      	mov	r5, r8
 8001d24:	46de      	mov	lr, fp
 8001d26:	b5e0      	push	{r5, r6, r7, lr}
 8001d28:	4698      	mov	r8, r3
 8001d2a:	030c      	lsls	r4, r1, #12
 8001d2c:	004b      	lsls	r3, r1, #1
 8001d2e:	0006      	movs	r6, r0
 8001d30:	4692      	mov	sl, r2
 8001d32:	b087      	sub	sp, #28
 8001d34:	0b24      	lsrs	r4, r4, #12
 8001d36:	0d5b      	lsrs	r3, r3, #21
 8001d38:	0fcf      	lsrs	r7, r1, #31
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dmul+0x24>
 8001d3e:	e15c      	b.n	8001ffa <__aeabi_dmul+0x2de>
 8001d40:	4ad9      	ldr	r2, [pc, #868]	; (80020a8 <__aeabi_dmul+0x38c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dmul+0x2c>
 8001d46:	e175      	b.n	8002034 <__aeabi_dmul+0x318>
 8001d48:	0f42      	lsrs	r2, r0, #29
 8001d4a:	00e4      	lsls	r4, r4, #3
 8001d4c:	4314      	orrs	r4, r2
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0412      	lsls	r2, r2, #16
 8001d52:	4314      	orrs	r4, r2
 8001d54:	4ad5      	ldr	r2, [pc, #852]	; (80020ac <__aeabi_dmul+0x390>)
 8001d56:	00c5      	lsls	r5, r0, #3
 8001d58:	4694      	mov	ip, r2
 8001d5a:	4463      	add	r3, ip
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	4699      	mov	r9, r3
 8001d62:	469b      	mov	fp, r3
 8001d64:	4643      	mov	r3, r8
 8001d66:	4642      	mov	r2, r8
 8001d68:	031e      	lsls	r6, r3, #12
 8001d6a:	0fd2      	lsrs	r2, r2, #31
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4650      	mov	r0, sl
 8001d70:	4690      	mov	r8, r2
 8001d72:	0b36      	lsrs	r6, r6, #12
 8001d74:	0d5b      	lsrs	r3, r3, #21
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dmul+0x5e>
 8001d78:	e120      	b.n	8001fbc <__aeabi_dmul+0x2a0>
 8001d7a:	4acb      	ldr	r2, [pc, #812]	; (80020a8 <__aeabi_dmul+0x38c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dmul+0x66>
 8001d80:	e162      	b.n	8002048 <__aeabi_dmul+0x32c>
 8001d82:	49ca      	ldr	r1, [pc, #808]	; (80020ac <__aeabi_dmul+0x390>)
 8001d84:	0f42      	lsrs	r2, r0, #29
 8001d86:	468c      	mov	ip, r1
 8001d88:	9900      	ldr	r1, [sp, #0]
 8001d8a:	4463      	add	r3, ip
 8001d8c:	00f6      	lsls	r6, r6, #3
 8001d8e:	468c      	mov	ip, r1
 8001d90:	4316      	orrs	r6, r2
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	449c      	add	ip, r3
 8001d96:	0412      	lsls	r2, r2, #16
 8001d98:	4663      	mov	r3, ip
 8001d9a:	4316      	orrs	r6, r2
 8001d9c:	00c2      	lsls	r2, r0, #3
 8001d9e:	2000      	movs	r0, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	9900      	ldr	r1, [sp, #0]
 8001da4:	4643      	mov	r3, r8
 8001da6:	3101      	adds	r1, #1
 8001da8:	468c      	mov	ip, r1
 8001daa:	4649      	mov	r1, r9
 8001dac:	407b      	eors	r3, r7
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	290f      	cmp	r1, #15
 8001db2:	d826      	bhi.n	8001e02 <__aeabi_dmul+0xe6>
 8001db4:	4bbe      	ldr	r3, [pc, #760]	; (80020b0 <__aeabi_dmul+0x394>)
 8001db6:	0089      	lsls	r1, r1, #2
 8001db8:	5859      	ldr	r1, [r3, r1]
 8001dba:	468f      	mov	pc, r1
 8001dbc:	4643      	mov	r3, r8
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	0034      	movs	r4, r6
 8001dc2:	0015      	movs	r5, r2
 8001dc4:	4683      	mov	fp, r0
 8001dc6:	465b      	mov	r3, fp
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d016      	beq.n	8001dfa <__aeabi_dmul+0xde>
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dmul+0xb6>
 8001dd0:	e203      	b.n	80021da <__aeabi_dmul+0x4be>
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dmul+0xbc>
 8001dd6:	e0cd      	b.n	8001f74 <__aeabi_dmul+0x258>
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2500      	movs	r5, #0
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	0512      	lsls	r2, r2, #20
 8001de2:	4322      	orrs	r2, r4
 8001de4:	07db      	lsls	r3, r3, #31
 8001de6:	431a      	orrs	r2, r3
 8001de8:	0028      	movs	r0, r5
 8001dea:	0011      	movs	r1, r2
 8001dec:	b007      	add	sp, #28
 8001dee:	bcf0      	pop	{r4, r5, r6, r7}
 8001df0:	46bb      	mov	fp, r7
 8001df2:	46b2      	mov	sl, r6
 8001df4:	46a9      	mov	r9, r5
 8001df6:	46a0      	mov	r8, r4
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	2400      	movs	r4, #0
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	4aaa      	ldr	r2, [pc, #680]	; (80020a8 <__aeabi_dmul+0x38c>)
 8001e00:	e7ed      	b.n	8001dde <__aeabi_dmul+0xc2>
 8001e02:	0c28      	lsrs	r0, r5, #16
 8001e04:	042d      	lsls	r5, r5, #16
 8001e06:	0c2d      	lsrs	r5, r5, #16
 8001e08:	002b      	movs	r3, r5
 8001e0a:	0c11      	lsrs	r1, r2, #16
 8001e0c:	0412      	lsls	r2, r2, #16
 8001e0e:	0c12      	lsrs	r2, r2, #16
 8001e10:	4353      	muls	r3, r2
 8001e12:	4698      	mov	r8, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	002f      	movs	r7, r5
 8001e18:	4343      	muls	r3, r0
 8001e1a:	4699      	mov	r9, r3
 8001e1c:	434f      	muls	r7, r1
 8001e1e:	444f      	add	r7, r9
 8001e20:	46bb      	mov	fp, r7
 8001e22:	4647      	mov	r7, r8
 8001e24:	000b      	movs	r3, r1
 8001e26:	0c3f      	lsrs	r7, r7, #16
 8001e28:	46ba      	mov	sl, r7
 8001e2a:	4343      	muls	r3, r0
 8001e2c:	44da      	add	sl, fp
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	45d1      	cmp	r9, sl
 8001e32:	d904      	bls.n	8001e3e <__aeabi_dmul+0x122>
 8001e34:	2780      	movs	r7, #128	; 0x80
 8001e36:	027f      	lsls	r7, r7, #9
 8001e38:	46b9      	mov	r9, r7
 8001e3a:	444b      	add	r3, r9
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	4653      	mov	r3, sl
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	469b      	mov	fp, r3
 8001e44:	4653      	mov	r3, sl
 8001e46:	041f      	lsls	r7, r3, #16
 8001e48:	4643      	mov	r3, r8
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	4698      	mov	r8, r3
 8001e50:	003b      	movs	r3, r7
 8001e52:	4443      	add	r3, r8
 8001e54:	9304      	str	r3, [sp, #16]
 8001e56:	0c33      	lsrs	r3, r6, #16
 8001e58:	0436      	lsls	r6, r6, #16
 8001e5a:	0c36      	lsrs	r6, r6, #16
 8001e5c:	4698      	mov	r8, r3
 8001e5e:	0033      	movs	r3, r6
 8001e60:	4343      	muls	r3, r0
 8001e62:	4699      	mov	r9, r3
 8001e64:	4643      	mov	r3, r8
 8001e66:	4343      	muls	r3, r0
 8001e68:	002f      	movs	r7, r5
 8001e6a:	469a      	mov	sl, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4377      	muls	r7, r6
 8001e70:	435d      	muls	r5, r3
 8001e72:	0c38      	lsrs	r0, r7, #16
 8001e74:	444d      	add	r5, r9
 8001e76:	1945      	adds	r5, r0, r5
 8001e78:	45a9      	cmp	r9, r5
 8001e7a:	d903      	bls.n	8001e84 <__aeabi_dmul+0x168>
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	025b      	lsls	r3, r3, #9
 8001e80:	4699      	mov	r9, r3
 8001e82:	44ca      	add	sl, r9
 8001e84:	043f      	lsls	r7, r7, #16
 8001e86:	0c28      	lsrs	r0, r5, #16
 8001e88:	0c3f      	lsrs	r7, r7, #16
 8001e8a:	042d      	lsls	r5, r5, #16
 8001e8c:	19ed      	adds	r5, r5, r7
 8001e8e:	0c27      	lsrs	r7, r4, #16
 8001e90:	0424      	lsls	r4, r4, #16
 8001e92:	0c24      	lsrs	r4, r4, #16
 8001e94:	0003      	movs	r3, r0
 8001e96:	0020      	movs	r0, r4
 8001e98:	4350      	muls	r0, r2
 8001e9a:	437a      	muls	r2, r7
 8001e9c:	4691      	mov	r9, r2
 8001e9e:	003a      	movs	r2, r7
 8001ea0:	4453      	add	r3, sl
 8001ea2:	9305      	str	r3, [sp, #20]
 8001ea4:	0c03      	lsrs	r3, r0, #16
 8001ea6:	469a      	mov	sl, r3
 8001ea8:	434a      	muls	r2, r1
 8001eaa:	4361      	muls	r1, r4
 8001eac:	4449      	add	r1, r9
 8001eae:	4451      	add	r1, sl
 8001eb0:	44ab      	add	fp, r5
 8001eb2:	4589      	cmp	r9, r1
 8001eb4:	d903      	bls.n	8001ebe <__aeabi_dmul+0x1a2>
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	025b      	lsls	r3, r3, #9
 8001eba:	4699      	mov	r9, r3
 8001ebc:	444a      	add	r2, r9
 8001ebe:	0400      	lsls	r0, r0, #16
 8001ec0:	0c0b      	lsrs	r3, r1, #16
 8001ec2:	0c00      	lsrs	r0, r0, #16
 8001ec4:	0409      	lsls	r1, r1, #16
 8001ec6:	1809      	adds	r1, r1, r0
 8001ec8:	0020      	movs	r0, r4
 8001eca:	4699      	mov	r9, r3
 8001ecc:	4643      	mov	r3, r8
 8001ece:	4370      	muls	r0, r6
 8001ed0:	435c      	muls	r4, r3
 8001ed2:	437e      	muls	r6, r7
 8001ed4:	435f      	muls	r7, r3
 8001ed6:	0c03      	lsrs	r3, r0, #16
 8001ed8:	4698      	mov	r8, r3
 8001eda:	19a4      	adds	r4, r4, r6
 8001edc:	4444      	add	r4, r8
 8001ede:	444a      	add	r2, r9
 8001ee0:	9703      	str	r7, [sp, #12]
 8001ee2:	42a6      	cmp	r6, r4
 8001ee4:	d904      	bls.n	8001ef0 <__aeabi_dmul+0x1d4>
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	025b      	lsls	r3, r3, #9
 8001eea:	4698      	mov	r8, r3
 8001eec:	4447      	add	r7, r8
 8001eee:	9703      	str	r7, [sp, #12]
 8001ef0:	0423      	lsls	r3, r4, #16
 8001ef2:	9e02      	ldr	r6, [sp, #8]
 8001ef4:	469a      	mov	sl, r3
 8001ef6:	9b05      	ldr	r3, [sp, #20]
 8001ef8:	445e      	add	r6, fp
 8001efa:	4698      	mov	r8, r3
 8001efc:	42ae      	cmp	r6, r5
 8001efe:	41ad      	sbcs	r5, r5
 8001f00:	1876      	adds	r6, r6, r1
 8001f02:	428e      	cmp	r6, r1
 8001f04:	4189      	sbcs	r1, r1
 8001f06:	0400      	lsls	r0, r0, #16
 8001f08:	0c00      	lsrs	r0, r0, #16
 8001f0a:	4450      	add	r0, sl
 8001f0c:	4440      	add	r0, r8
 8001f0e:	426d      	negs	r5, r5
 8001f10:	1947      	adds	r7, r0, r5
 8001f12:	46b8      	mov	r8, r7
 8001f14:	4693      	mov	fp, r2
 8001f16:	4249      	negs	r1, r1
 8001f18:	4689      	mov	r9, r1
 8001f1a:	44c3      	add	fp, r8
 8001f1c:	44d9      	add	r9, fp
 8001f1e:	4298      	cmp	r0, r3
 8001f20:	4180      	sbcs	r0, r0
 8001f22:	45a8      	cmp	r8, r5
 8001f24:	41ad      	sbcs	r5, r5
 8001f26:	4593      	cmp	fp, r2
 8001f28:	4192      	sbcs	r2, r2
 8001f2a:	4589      	cmp	r9, r1
 8001f2c:	4189      	sbcs	r1, r1
 8001f2e:	426d      	negs	r5, r5
 8001f30:	4240      	negs	r0, r0
 8001f32:	4328      	orrs	r0, r5
 8001f34:	0c24      	lsrs	r4, r4, #16
 8001f36:	4252      	negs	r2, r2
 8001f38:	4249      	negs	r1, r1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	9b03      	ldr	r3, [sp, #12]
 8001f3e:	1900      	adds	r0, r0, r4
 8001f40:	1880      	adds	r0, r0, r2
 8001f42:	18c7      	adds	r7, r0, r3
 8001f44:	464b      	mov	r3, r9
 8001f46:	0ddc      	lsrs	r4, r3, #23
 8001f48:	9b04      	ldr	r3, [sp, #16]
 8001f4a:	0275      	lsls	r5, r6, #9
 8001f4c:	431d      	orrs	r5, r3
 8001f4e:	1e6a      	subs	r2, r5, #1
 8001f50:	4195      	sbcs	r5, r2
 8001f52:	464b      	mov	r3, r9
 8001f54:	0df6      	lsrs	r6, r6, #23
 8001f56:	027f      	lsls	r7, r7, #9
 8001f58:	4335      	orrs	r5, r6
 8001f5a:	025a      	lsls	r2, r3, #9
 8001f5c:	433c      	orrs	r4, r7
 8001f5e:	4315      	orrs	r5, r2
 8001f60:	01fb      	lsls	r3, r7, #7
 8001f62:	d400      	bmi.n	8001f66 <__aeabi_dmul+0x24a>
 8001f64:	e11c      	b.n	80021a0 <__aeabi_dmul+0x484>
 8001f66:	2101      	movs	r1, #1
 8001f68:	086a      	lsrs	r2, r5, #1
 8001f6a:	400d      	ands	r5, r1
 8001f6c:	4315      	orrs	r5, r2
 8001f6e:	07e2      	lsls	r2, r4, #31
 8001f70:	4315      	orrs	r5, r2
 8001f72:	0864      	lsrs	r4, r4, #1
 8001f74:	494f      	ldr	r1, [pc, #316]	; (80020b4 <__aeabi_dmul+0x398>)
 8001f76:	4461      	add	r1, ip
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	dc00      	bgt.n	8001f7e <__aeabi_dmul+0x262>
 8001f7c:	e0b0      	b.n	80020e0 <__aeabi_dmul+0x3c4>
 8001f7e:	076b      	lsls	r3, r5, #29
 8001f80:	d009      	beq.n	8001f96 <__aeabi_dmul+0x27a>
 8001f82:	220f      	movs	r2, #15
 8001f84:	402a      	ands	r2, r5
 8001f86:	2a04      	cmp	r2, #4
 8001f88:	d005      	beq.n	8001f96 <__aeabi_dmul+0x27a>
 8001f8a:	1d2a      	adds	r2, r5, #4
 8001f8c:	42aa      	cmp	r2, r5
 8001f8e:	41ad      	sbcs	r5, r5
 8001f90:	426d      	negs	r5, r5
 8001f92:	1964      	adds	r4, r4, r5
 8001f94:	0015      	movs	r5, r2
 8001f96:	01e3      	lsls	r3, r4, #7
 8001f98:	d504      	bpl.n	8001fa4 <__aeabi_dmul+0x288>
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	4a46      	ldr	r2, [pc, #280]	; (80020b8 <__aeabi_dmul+0x39c>)
 8001f9e:	00c9      	lsls	r1, r1, #3
 8001fa0:	4014      	ands	r4, r2
 8001fa2:	4461      	add	r1, ip
 8001fa4:	4a45      	ldr	r2, [pc, #276]	; (80020bc <__aeabi_dmul+0x3a0>)
 8001fa6:	4291      	cmp	r1, r2
 8001fa8:	dd00      	ble.n	8001fac <__aeabi_dmul+0x290>
 8001faa:	e726      	b.n	8001dfa <__aeabi_dmul+0xde>
 8001fac:	0762      	lsls	r2, r4, #29
 8001fae:	08ed      	lsrs	r5, r5, #3
 8001fb0:	0264      	lsls	r4, r4, #9
 8001fb2:	0549      	lsls	r1, r1, #21
 8001fb4:	4315      	orrs	r5, r2
 8001fb6:	0b24      	lsrs	r4, r4, #12
 8001fb8:	0d4a      	lsrs	r2, r1, #21
 8001fba:	e710      	b.n	8001dde <__aeabi_dmul+0xc2>
 8001fbc:	4652      	mov	r2, sl
 8001fbe:	4332      	orrs	r2, r6
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dmul+0x2a8>
 8001fc2:	e07f      	b.n	80020c4 <__aeabi_dmul+0x3a8>
 8001fc4:	2e00      	cmp	r6, #0
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dmul+0x2ae>
 8001fc8:	e0dc      	b.n	8002184 <__aeabi_dmul+0x468>
 8001fca:	0030      	movs	r0, r6
 8001fcc:	f000 fe04 	bl	8002bd8 <__clzsi2>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	3a0b      	subs	r2, #11
 8001fd4:	231d      	movs	r3, #29
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	4652      	mov	r2, sl
 8001fdc:	3908      	subs	r1, #8
 8001fde:	40da      	lsrs	r2, r3
 8001fe0:	408e      	lsls	r6, r1
 8001fe2:	4316      	orrs	r6, r2
 8001fe4:	4652      	mov	r2, sl
 8001fe6:	408a      	lsls	r2, r1
 8001fe8:	9b00      	ldr	r3, [sp, #0]
 8001fea:	4935      	ldr	r1, [pc, #212]	; (80020c0 <__aeabi_dmul+0x3a4>)
 8001fec:	1a18      	subs	r0, r3, r0
 8001fee:	0003      	movs	r3, r0
 8001ff0:	468c      	mov	ip, r1
 8001ff2:	4463      	add	r3, ip
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	e6d3      	b.n	8001da2 <__aeabi_dmul+0x86>
 8001ffa:	0025      	movs	r5, r4
 8001ffc:	4305      	orrs	r5, r0
 8001ffe:	d04a      	beq.n	8002096 <__aeabi_dmul+0x37a>
 8002000:	2c00      	cmp	r4, #0
 8002002:	d100      	bne.n	8002006 <__aeabi_dmul+0x2ea>
 8002004:	e0b0      	b.n	8002168 <__aeabi_dmul+0x44c>
 8002006:	0020      	movs	r0, r4
 8002008:	f000 fde6 	bl	8002bd8 <__clzsi2>
 800200c:	0001      	movs	r1, r0
 800200e:	0002      	movs	r2, r0
 8002010:	390b      	subs	r1, #11
 8002012:	231d      	movs	r3, #29
 8002014:	0010      	movs	r0, r2
 8002016:	1a5b      	subs	r3, r3, r1
 8002018:	0031      	movs	r1, r6
 800201a:	0035      	movs	r5, r6
 800201c:	3808      	subs	r0, #8
 800201e:	4084      	lsls	r4, r0
 8002020:	40d9      	lsrs	r1, r3
 8002022:	4085      	lsls	r5, r0
 8002024:	430c      	orrs	r4, r1
 8002026:	4826      	ldr	r0, [pc, #152]	; (80020c0 <__aeabi_dmul+0x3a4>)
 8002028:	1a83      	subs	r3, r0, r2
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2300      	movs	r3, #0
 800202e:	4699      	mov	r9, r3
 8002030:	469b      	mov	fp, r3
 8002032:	e697      	b.n	8001d64 <__aeabi_dmul+0x48>
 8002034:	0005      	movs	r5, r0
 8002036:	4325      	orrs	r5, r4
 8002038:	d126      	bne.n	8002088 <__aeabi_dmul+0x36c>
 800203a:	2208      	movs	r2, #8
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2302      	movs	r3, #2
 8002040:	2400      	movs	r4, #0
 8002042:	4691      	mov	r9, r2
 8002044:	469b      	mov	fp, r3
 8002046:	e68d      	b.n	8001d64 <__aeabi_dmul+0x48>
 8002048:	4652      	mov	r2, sl
 800204a:	9b00      	ldr	r3, [sp, #0]
 800204c:	4332      	orrs	r2, r6
 800204e:	d110      	bne.n	8002072 <__aeabi_dmul+0x356>
 8002050:	4915      	ldr	r1, [pc, #84]	; (80020a8 <__aeabi_dmul+0x38c>)
 8002052:	2600      	movs	r6, #0
 8002054:	468c      	mov	ip, r1
 8002056:	4463      	add	r3, ip
 8002058:	4649      	mov	r1, r9
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2302      	movs	r3, #2
 800205e:	4319      	orrs	r1, r3
 8002060:	4689      	mov	r9, r1
 8002062:	2002      	movs	r0, #2
 8002064:	e69d      	b.n	8001da2 <__aeabi_dmul+0x86>
 8002066:	465b      	mov	r3, fp
 8002068:	9701      	str	r7, [sp, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d000      	beq.n	8002070 <__aeabi_dmul+0x354>
 800206e:	e6ad      	b.n	8001dcc <__aeabi_dmul+0xb0>
 8002070:	e6c3      	b.n	8001dfa <__aeabi_dmul+0xde>
 8002072:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <__aeabi_dmul+0x38c>)
 8002074:	2003      	movs	r0, #3
 8002076:	4694      	mov	ip, r2
 8002078:	4463      	add	r3, ip
 800207a:	464a      	mov	r2, r9
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2303      	movs	r3, #3
 8002080:	431a      	orrs	r2, r3
 8002082:	4691      	mov	r9, r2
 8002084:	4652      	mov	r2, sl
 8002086:	e68c      	b.n	8001da2 <__aeabi_dmul+0x86>
 8002088:	220c      	movs	r2, #12
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2303      	movs	r3, #3
 800208e:	0005      	movs	r5, r0
 8002090:	4691      	mov	r9, r2
 8002092:	469b      	mov	fp, r3
 8002094:	e666      	b.n	8001d64 <__aeabi_dmul+0x48>
 8002096:	2304      	movs	r3, #4
 8002098:	4699      	mov	r9, r3
 800209a:	2300      	movs	r3, #0
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	2400      	movs	r4, #0
 80020a2:	469b      	mov	fp, r3
 80020a4:	e65e      	b.n	8001d64 <__aeabi_dmul+0x48>
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	000007ff 	.word	0x000007ff
 80020ac:	fffffc01 	.word	0xfffffc01
 80020b0:	08009d6c 	.word	0x08009d6c
 80020b4:	000003ff 	.word	0x000003ff
 80020b8:	feffffff 	.word	0xfeffffff
 80020bc:	000007fe 	.word	0x000007fe
 80020c0:	fffffc0d 	.word	0xfffffc0d
 80020c4:	4649      	mov	r1, r9
 80020c6:	2301      	movs	r3, #1
 80020c8:	4319      	orrs	r1, r3
 80020ca:	4689      	mov	r9, r1
 80020cc:	2600      	movs	r6, #0
 80020ce:	2001      	movs	r0, #1
 80020d0:	e667      	b.n	8001da2 <__aeabi_dmul+0x86>
 80020d2:	2300      	movs	r3, #0
 80020d4:	2480      	movs	r4, #128	; 0x80
 80020d6:	2500      	movs	r5, #0
 80020d8:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <__aeabi_dmul+0x4cc>)
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	0324      	lsls	r4, r4, #12
 80020de:	e67e      	b.n	8001dde <__aeabi_dmul+0xc2>
 80020e0:	2001      	movs	r0, #1
 80020e2:	1a40      	subs	r0, r0, r1
 80020e4:	2838      	cmp	r0, #56	; 0x38
 80020e6:	dd00      	ble.n	80020ea <__aeabi_dmul+0x3ce>
 80020e8:	e676      	b.n	8001dd8 <__aeabi_dmul+0xbc>
 80020ea:	281f      	cmp	r0, #31
 80020ec:	dd5b      	ble.n	80021a6 <__aeabi_dmul+0x48a>
 80020ee:	221f      	movs	r2, #31
 80020f0:	0023      	movs	r3, r4
 80020f2:	4252      	negs	r2, r2
 80020f4:	1a51      	subs	r1, r2, r1
 80020f6:	40cb      	lsrs	r3, r1
 80020f8:	0019      	movs	r1, r3
 80020fa:	2820      	cmp	r0, #32
 80020fc:	d003      	beq.n	8002106 <__aeabi_dmul+0x3ea>
 80020fe:	4a3b      	ldr	r2, [pc, #236]	; (80021ec <__aeabi_dmul+0x4d0>)
 8002100:	4462      	add	r2, ip
 8002102:	4094      	lsls	r4, r2
 8002104:	4325      	orrs	r5, r4
 8002106:	1e6a      	subs	r2, r5, #1
 8002108:	4195      	sbcs	r5, r2
 800210a:	002a      	movs	r2, r5
 800210c:	430a      	orrs	r2, r1
 800210e:	2107      	movs	r1, #7
 8002110:	000d      	movs	r5, r1
 8002112:	2400      	movs	r4, #0
 8002114:	4015      	ands	r5, r2
 8002116:	4211      	tst	r1, r2
 8002118:	d05b      	beq.n	80021d2 <__aeabi_dmul+0x4b6>
 800211a:	210f      	movs	r1, #15
 800211c:	2400      	movs	r4, #0
 800211e:	4011      	ands	r1, r2
 8002120:	2904      	cmp	r1, #4
 8002122:	d053      	beq.n	80021cc <__aeabi_dmul+0x4b0>
 8002124:	1d11      	adds	r1, r2, #4
 8002126:	4291      	cmp	r1, r2
 8002128:	4192      	sbcs	r2, r2
 800212a:	4252      	negs	r2, r2
 800212c:	18a4      	adds	r4, r4, r2
 800212e:	000a      	movs	r2, r1
 8002130:	0223      	lsls	r3, r4, #8
 8002132:	d54b      	bpl.n	80021cc <__aeabi_dmul+0x4b0>
 8002134:	2201      	movs	r2, #1
 8002136:	2400      	movs	r4, #0
 8002138:	2500      	movs	r5, #0
 800213a:	e650      	b.n	8001dde <__aeabi_dmul+0xc2>
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	031b      	lsls	r3, r3, #12
 8002140:	421c      	tst	r4, r3
 8002142:	d009      	beq.n	8002158 <__aeabi_dmul+0x43c>
 8002144:	421e      	tst	r6, r3
 8002146:	d107      	bne.n	8002158 <__aeabi_dmul+0x43c>
 8002148:	4333      	orrs	r3, r6
 800214a:	031c      	lsls	r4, r3, #12
 800214c:	4643      	mov	r3, r8
 800214e:	0015      	movs	r5, r2
 8002150:	0b24      	lsrs	r4, r4, #12
 8002152:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <__aeabi_dmul+0x4cc>)
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	e642      	b.n	8001dde <__aeabi_dmul+0xc2>
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	0312      	lsls	r2, r2, #12
 800215c:	4314      	orrs	r4, r2
 800215e:	0324      	lsls	r4, r4, #12
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <__aeabi_dmul+0x4cc>)
 8002162:	0b24      	lsrs	r4, r4, #12
 8002164:	9701      	str	r7, [sp, #4]
 8002166:	e63a      	b.n	8001dde <__aeabi_dmul+0xc2>
 8002168:	f000 fd36 	bl	8002bd8 <__clzsi2>
 800216c:	0001      	movs	r1, r0
 800216e:	0002      	movs	r2, r0
 8002170:	3115      	adds	r1, #21
 8002172:	3220      	adds	r2, #32
 8002174:	291c      	cmp	r1, #28
 8002176:	dc00      	bgt.n	800217a <__aeabi_dmul+0x45e>
 8002178:	e74b      	b.n	8002012 <__aeabi_dmul+0x2f6>
 800217a:	0034      	movs	r4, r6
 800217c:	3808      	subs	r0, #8
 800217e:	2500      	movs	r5, #0
 8002180:	4084      	lsls	r4, r0
 8002182:	e750      	b.n	8002026 <__aeabi_dmul+0x30a>
 8002184:	f000 fd28 	bl	8002bd8 <__clzsi2>
 8002188:	0003      	movs	r3, r0
 800218a:	001a      	movs	r2, r3
 800218c:	3215      	adds	r2, #21
 800218e:	3020      	adds	r0, #32
 8002190:	2a1c      	cmp	r2, #28
 8002192:	dc00      	bgt.n	8002196 <__aeabi_dmul+0x47a>
 8002194:	e71e      	b.n	8001fd4 <__aeabi_dmul+0x2b8>
 8002196:	4656      	mov	r6, sl
 8002198:	3b08      	subs	r3, #8
 800219a:	2200      	movs	r2, #0
 800219c:	409e      	lsls	r6, r3
 800219e:	e723      	b.n	8001fe8 <__aeabi_dmul+0x2cc>
 80021a0:	9b00      	ldr	r3, [sp, #0]
 80021a2:	469c      	mov	ip, r3
 80021a4:	e6e6      	b.n	8001f74 <__aeabi_dmul+0x258>
 80021a6:	4912      	ldr	r1, [pc, #72]	; (80021f0 <__aeabi_dmul+0x4d4>)
 80021a8:	0022      	movs	r2, r4
 80021aa:	4461      	add	r1, ip
 80021ac:	002e      	movs	r6, r5
 80021ae:	408d      	lsls	r5, r1
 80021b0:	408a      	lsls	r2, r1
 80021b2:	40c6      	lsrs	r6, r0
 80021b4:	1e69      	subs	r1, r5, #1
 80021b6:	418d      	sbcs	r5, r1
 80021b8:	4332      	orrs	r2, r6
 80021ba:	432a      	orrs	r2, r5
 80021bc:	40c4      	lsrs	r4, r0
 80021be:	0753      	lsls	r3, r2, #29
 80021c0:	d0b6      	beq.n	8002130 <__aeabi_dmul+0x414>
 80021c2:	210f      	movs	r1, #15
 80021c4:	4011      	ands	r1, r2
 80021c6:	2904      	cmp	r1, #4
 80021c8:	d1ac      	bne.n	8002124 <__aeabi_dmul+0x408>
 80021ca:	e7b1      	b.n	8002130 <__aeabi_dmul+0x414>
 80021cc:	0765      	lsls	r5, r4, #29
 80021ce:	0264      	lsls	r4, r4, #9
 80021d0:	0b24      	lsrs	r4, r4, #12
 80021d2:	08d2      	lsrs	r2, r2, #3
 80021d4:	4315      	orrs	r5, r2
 80021d6:	2200      	movs	r2, #0
 80021d8:	e601      	b.n	8001dde <__aeabi_dmul+0xc2>
 80021da:	2280      	movs	r2, #128	; 0x80
 80021dc:	0312      	lsls	r2, r2, #12
 80021de:	4314      	orrs	r4, r2
 80021e0:	0324      	lsls	r4, r4, #12
 80021e2:	4a01      	ldr	r2, [pc, #4]	; (80021e8 <__aeabi_dmul+0x4cc>)
 80021e4:	0b24      	lsrs	r4, r4, #12
 80021e6:	e5fa      	b.n	8001dde <__aeabi_dmul+0xc2>
 80021e8:	000007ff 	.word	0x000007ff
 80021ec:	0000043e 	.word	0x0000043e
 80021f0:	0000041e 	.word	0x0000041e

080021f4 <__aeabi_dsub>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	4657      	mov	r7, sl
 80021f8:	464e      	mov	r6, r9
 80021fa:	4645      	mov	r5, r8
 80021fc:	46de      	mov	lr, fp
 80021fe:	b5e0      	push	{r5, r6, r7, lr}
 8002200:	001e      	movs	r6, r3
 8002202:	0017      	movs	r7, r2
 8002204:	004a      	lsls	r2, r1, #1
 8002206:	030b      	lsls	r3, r1, #12
 8002208:	0d52      	lsrs	r2, r2, #21
 800220a:	0a5b      	lsrs	r3, r3, #9
 800220c:	4690      	mov	r8, r2
 800220e:	0f42      	lsrs	r2, r0, #29
 8002210:	431a      	orrs	r2, r3
 8002212:	0fcd      	lsrs	r5, r1, #31
 8002214:	4ccd      	ldr	r4, [pc, #820]	; (800254c <__aeabi_dsub+0x358>)
 8002216:	0331      	lsls	r1, r6, #12
 8002218:	00c3      	lsls	r3, r0, #3
 800221a:	4694      	mov	ip, r2
 800221c:	0070      	lsls	r0, r6, #1
 800221e:	0f7a      	lsrs	r2, r7, #29
 8002220:	0a49      	lsrs	r1, r1, #9
 8002222:	00ff      	lsls	r7, r7, #3
 8002224:	469a      	mov	sl, r3
 8002226:	46b9      	mov	r9, r7
 8002228:	0d40      	lsrs	r0, r0, #21
 800222a:	0ff6      	lsrs	r6, r6, #31
 800222c:	4311      	orrs	r1, r2
 800222e:	42a0      	cmp	r0, r4
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x40>
 8002232:	e0b1      	b.n	8002398 <__aeabi_dsub+0x1a4>
 8002234:	2201      	movs	r2, #1
 8002236:	4056      	eors	r6, r2
 8002238:	46b3      	mov	fp, r6
 800223a:	42b5      	cmp	r5, r6
 800223c:	d100      	bne.n	8002240 <__aeabi_dsub+0x4c>
 800223e:	e088      	b.n	8002352 <__aeabi_dsub+0x15e>
 8002240:	4642      	mov	r2, r8
 8002242:	1a12      	subs	r2, r2, r0
 8002244:	2a00      	cmp	r2, #0
 8002246:	dc00      	bgt.n	800224a <__aeabi_dsub+0x56>
 8002248:	e0ae      	b.n	80023a8 <__aeabi_dsub+0x1b4>
 800224a:	2800      	cmp	r0, #0
 800224c:	d100      	bne.n	8002250 <__aeabi_dsub+0x5c>
 800224e:	e0c1      	b.n	80023d4 <__aeabi_dsub+0x1e0>
 8002250:	48be      	ldr	r0, [pc, #760]	; (800254c <__aeabi_dsub+0x358>)
 8002252:	4580      	cmp	r8, r0
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x64>
 8002256:	e151      	b.n	80024fc <__aeabi_dsub+0x308>
 8002258:	2080      	movs	r0, #128	; 0x80
 800225a:	0400      	lsls	r0, r0, #16
 800225c:	4301      	orrs	r1, r0
 800225e:	2a38      	cmp	r2, #56	; 0x38
 8002260:	dd00      	ble.n	8002264 <__aeabi_dsub+0x70>
 8002262:	e17b      	b.n	800255c <__aeabi_dsub+0x368>
 8002264:	2a1f      	cmp	r2, #31
 8002266:	dd00      	ble.n	800226a <__aeabi_dsub+0x76>
 8002268:	e1ee      	b.n	8002648 <__aeabi_dsub+0x454>
 800226a:	2020      	movs	r0, #32
 800226c:	003e      	movs	r6, r7
 800226e:	1a80      	subs	r0, r0, r2
 8002270:	000c      	movs	r4, r1
 8002272:	40d6      	lsrs	r6, r2
 8002274:	40d1      	lsrs	r1, r2
 8002276:	4087      	lsls	r7, r0
 8002278:	4662      	mov	r2, ip
 800227a:	4084      	lsls	r4, r0
 800227c:	1a52      	subs	r2, r2, r1
 800227e:	1e78      	subs	r0, r7, #1
 8002280:	4187      	sbcs	r7, r0
 8002282:	4694      	mov	ip, r2
 8002284:	4334      	orrs	r4, r6
 8002286:	4327      	orrs	r7, r4
 8002288:	1bdc      	subs	r4, r3, r7
 800228a:	42a3      	cmp	r3, r4
 800228c:	419b      	sbcs	r3, r3
 800228e:	4662      	mov	r2, ip
 8002290:	425b      	negs	r3, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4699      	mov	r9, r3
 8002296:	464b      	mov	r3, r9
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	d400      	bmi.n	800229e <__aeabi_dsub+0xaa>
 800229c:	e118      	b.n	80024d0 <__aeabi_dsub+0x2dc>
 800229e:	464b      	mov	r3, r9
 80022a0:	0258      	lsls	r0, r3, #9
 80022a2:	0a43      	lsrs	r3, r0, #9
 80022a4:	4699      	mov	r9, r3
 80022a6:	464b      	mov	r3, r9
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d100      	bne.n	80022ae <__aeabi_dsub+0xba>
 80022ac:	e137      	b.n	800251e <__aeabi_dsub+0x32a>
 80022ae:	4648      	mov	r0, r9
 80022b0:	f000 fc92 	bl	8002bd8 <__clzsi2>
 80022b4:	0001      	movs	r1, r0
 80022b6:	3908      	subs	r1, #8
 80022b8:	2320      	movs	r3, #32
 80022ba:	0022      	movs	r2, r4
 80022bc:	4648      	mov	r0, r9
 80022be:	1a5b      	subs	r3, r3, r1
 80022c0:	40da      	lsrs	r2, r3
 80022c2:	4088      	lsls	r0, r1
 80022c4:	408c      	lsls	r4, r1
 80022c6:	4643      	mov	r3, r8
 80022c8:	4310      	orrs	r0, r2
 80022ca:	4588      	cmp	r8, r1
 80022cc:	dd00      	ble.n	80022d0 <__aeabi_dsub+0xdc>
 80022ce:	e136      	b.n	800253e <__aeabi_dsub+0x34a>
 80022d0:	1ac9      	subs	r1, r1, r3
 80022d2:	1c4b      	adds	r3, r1, #1
 80022d4:	2b1f      	cmp	r3, #31
 80022d6:	dd00      	ble.n	80022da <__aeabi_dsub+0xe6>
 80022d8:	e0ea      	b.n	80024b0 <__aeabi_dsub+0x2bc>
 80022da:	2220      	movs	r2, #32
 80022dc:	0026      	movs	r6, r4
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	0001      	movs	r1, r0
 80022e2:	4094      	lsls	r4, r2
 80022e4:	40de      	lsrs	r6, r3
 80022e6:	40d8      	lsrs	r0, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	4091      	lsls	r1, r2
 80022ec:	1e62      	subs	r2, r4, #1
 80022ee:	4194      	sbcs	r4, r2
 80022f0:	4681      	mov	r9, r0
 80022f2:	4698      	mov	r8, r3
 80022f4:	4331      	orrs	r1, r6
 80022f6:	430c      	orrs	r4, r1
 80022f8:	0763      	lsls	r3, r4, #29
 80022fa:	d009      	beq.n	8002310 <__aeabi_dsub+0x11c>
 80022fc:	230f      	movs	r3, #15
 80022fe:	4023      	ands	r3, r4
 8002300:	2b04      	cmp	r3, #4
 8002302:	d005      	beq.n	8002310 <__aeabi_dsub+0x11c>
 8002304:	1d23      	adds	r3, r4, #4
 8002306:	42a3      	cmp	r3, r4
 8002308:	41a4      	sbcs	r4, r4
 800230a:	4264      	negs	r4, r4
 800230c:	44a1      	add	r9, r4
 800230e:	001c      	movs	r4, r3
 8002310:	464b      	mov	r3, r9
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	d400      	bmi.n	8002318 <__aeabi_dsub+0x124>
 8002316:	e0de      	b.n	80024d6 <__aeabi_dsub+0x2e2>
 8002318:	4641      	mov	r1, r8
 800231a:	4b8c      	ldr	r3, [pc, #560]	; (800254c <__aeabi_dsub+0x358>)
 800231c:	3101      	adds	r1, #1
 800231e:	4299      	cmp	r1, r3
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x130>
 8002322:	e0e7      	b.n	80024f4 <__aeabi_dsub+0x300>
 8002324:	464b      	mov	r3, r9
 8002326:	488a      	ldr	r0, [pc, #552]	; (8002550 <__aeabi_dsub+0x35c>)
 8002328:	08e4      	lsrs	r4, r4, #3
 800232a:	4003      	ands	r3, r0
 800232c:	0018      	movs	r0, r3
 800232e:	0549      	lsls	r1, r1, #21
 8002330:	075b      	lsls	r3, r3, #29
 8002332:	0240      	lsls	r0, r0, #9
 8002334:	4323      	orrs	r3, r4
 8002336:	0d4a      	lsrs	r2, r1, #21
 8002338:	0b04      	lsrs	r4, r0, #12
 800233a:	0512      	lsls	r2, r2, #20
 800233c:	07ed      	lsls	r5, r5, #31
 800233e:	4322      	orrs	r2, r4
 8002340:	432a      	orrs	r2, r5
 8002342:	0018      	movs	r0, r3
 8002344:	0011      	movs	r1, r2
 8002346:	bcf0      	pop	{r4, r5, r6, r7}
 8002348:	46bb      	mov	fp, r7
 800234a:	46b2      	mov	sl, r6
 800234c:	46a9      	mov	r9, r5
 800234e:	46a0      	mov	r8, r4
 8002350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002352:	4642      	mov	r2, r8
 8002354:	1a12      	subs	r2, r2, r0
 8002356:	2a00      	cmp	r2, #0
 8002358:	dd52      	ble.n	8002400 <__aeabi_dsub+0x20c>
 800235a:	2800      	cmp	r0, #0
 800235c:	d100      	bne.n	8002360 <__aeabi_dsub+0x16c>
 800235e:	e09c      	b.n	800249a <__aeabi_dsub+0x2a6>
 8002360:	45a0      	cmp	r8, r4
 8002362:	d100      	bne.n	8002366 <__aeabi_dsub+0x172>
 8002364:	e0ca      	b.n	80024fc <__aeabi_dsub+0x308>
 8002366:	2080      	movs	r0, #128	; 0x80
 8002368:	0400      	lsls	r0, r0, #16
 800236a:	4301      	orrs	r1, r0
 800236c:	2a38      	cmp	r2, #56	; 0x38
 800236e:	dd00      	ble.n	8002372 <__aeabi_dsub+0x17e>
 8002370:	e149      	b.n	8002606 <__aeabi_dsub+0x412>
 8002372:	2a1f      	cmp	r2, #31
 8002374:	dc00      	bgt.n	8002378 <__aeabi_dsub+0x184>
 8002376:	e197      	b.n	80026a8 <__aeabi_dsub+0x4b4>
 8002378:	0010      	movs	r0, r2
 800237a:	000e      	movs	r6, r1
 800237c:	3820      	subs	r0, #32
 800237e:	40c6      	lsrs	r6, r0
 8002380:	2a20      	cmp	r2, #32
 8002382:	d004      	beq.n	800238e <__aeabi_dsub+0x19a>
 8002384:	2040      	movs	r0, #64	; 0x40
 8002386:	1a82      	subs	r2, r0, r2
 8002388:	4091      	lsls	r1, r2
 800238a:	430f      	orrs	r7, r1
 800238c:	46b9      	mov	r9, r7
 800238e:	464c      	mov	r4, r9
 8002390:	1e62      	subs	r2, r4, #1
 8002392:	4194      	sbcs	r4, r2
 8002394:	4334      	orrs	r4, r6
 8002396:	e13a      	b.n	800260e <__aeabi_dsub+0x41a>
 8002398:	000a      	movs	r2, r1
 800239a:	433a      	orrs	r2, r7
 800239c:	d028      	beq.n	80023f0 <__aeabi_dsub+0x1fc>
 800239e:	46b3      	mov	fp, r6
 80023a0:	42b5      	cmp	r5, r6
 80023a2:	d02b      	beq.n	80023fc <__aeabi_dsub+0x208>
 80023a4:	4a6b      	ldr	r2, [pc, #428]	; (8002554 <__aeabi_dsub+0x360>)
 80023a6:	4442      	add	r2, r8
 80023a8:	2a00      	cmp	r2, #0
 80023aa:	d05d      	beq.n	8002468 <__aeabi_dsub+0x274>
 80023ac:	4642      	mov	r2, r8
 80023ae:	4644      	mov	r4, r8
 80023b0:	1a82      	subs	r2, r0, r2
 80023b2:	2c00      	cmp	r4, #0
 80023b4:	d000      	beq.n	80023b8 <__aeabi_dsub+0x1c4>
 80023b6:	e0f5      	b.n	80025a4 <__aeabi_dsub+0x3b0>
 80023b8:	4665      	mov	r5, ip
 80023ba:	431d      	orrs	r5, r3
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dsub+0x1cc>
 80023be:	e19c      	b.n	80026fa <__aeabi_dsub+0x506>
 80023c0:	1e55      	subs	r5, r2, #1
 80023c2:	2a01      	cmp	r2, #1
 80023c4:	d100      	bne.n	80023c8 <__aeabi_dsub+0x1d4>
 80023c6:	e1fb      	b.n	80027c0 <__aeabi_dsub+0x5cc>
 80023c8:	4c60      	ldr	r4, [pc, #384]	; (800254c <__aeabi_dsub+0x358>)
 80023ca:	42a2      	cmp	r2, r4
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x1dc>
 80023ce:	e1bd      	b.n	800274c <__aeabi_dsub+0x558>
 80023d0:	002a      	movs	r2, r5
 80023d2:	e0f0      	b.n	80025b6 <__aeabi_dsub+0x3c2>
 80023d4:	0008      	movs	r0, r1
 80023d6:	4338      	orrs	r0, r7
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x1e8>
 80023da:	e0c3      	b.n	8002564 <__aeabi_dsub+0x370>
 80023dc:	1e50      	subs	r0, r2, #1
 80023de:	2a01      	cmp	r2, #1
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x1f0>
 80023e2:	e1a8      	b.n	8002736 <__aeabi_dsub+0x542>
 80023e4:	4c59      	ldr	r4, [pc, #356]	; (800254c <__aeabi_dsub+0x358>)
 80023e6:	42a2      	cmp	r2, r4
 80023e8:	d100      	bne.n	80023ec <__aeabi_dsub+0x1f8>
 80023ea:	e087      	b.n	80024fc <__aeabi_dsub+0x308>
 80023ec:	0002      	movs	r2, r0
 80023ee:	e736      	b.n	800225e <__aeabi_dsub+0x6a>
 80023f0:	2201      	movs	r2, #1
 80023f2:	4056      	eors	r6, r2
 80023f4:	46b3      	mov	fp, r6
 80023f6:	42b5      	cmp	r5, r6
 80023f8:	d000      	beq.n	80023fc <__aeabi_dsub+0x208>
 80023fa:	e721      	b.n	8002240 <__aeabi_dsub+0x4c>
 80023fc:	4a55      	ldr	r2, [pc, #340]	; (8002554 <__aeabi_dsub+0x360>)
 80023fe:	4442      	add	r2, r8
 8002400:	2a00      	cmp	r2, #0
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x212>
 8002404:	e0b5      	b.n	8002572 <__aeabi_dsub+0x37e>
 8002406:	4642      	mov	r2, r8
 8002408:	4644      	mov	r4, r8
 800240a:	1a82      	subs	r2, r0, r2
 800240c:	2c00      	cmp	r4, #0
 800240e:	d100      	bne.n	8002412 <__aeabi_dsub+0x21e>
 8002410:	e138      	b.n	8002684 <__aeabi_dsub+0x490>
 8002412:	4e4e      	ldr	r6, [pc, #312]	; (800254c <__aeabi_dsub+0x358>)
 8002414:	42b0      	cmp	r0, r6
 8002416:	d100      	bne.n	800241a <__aeabi_dsub+0x226>
 8002418:	e1de      	b.n	80027d8 <__aeabi_dsub+0x5e4>
 800241a:	2680      	movs	r6, #128	; 0x80
 800241c:	4664      	mov	r4, ip
 800241e:	0436      	lsls	r6, r6, #16
 8002420:	4334      	orrs	r4, r6
 8002422:	46a4      	mov	ip, r4
 8002424:	2a38      	cmp	r2, #56	; 0x38
 8002426:	dd00      	ble.n	800242a <__aeabi_dsub+0x236>
 8002428:	e196      	b.n	8002758 <__aeabi_dsub+0x564>
 800242a:	2a1f      	cmp	r2, #31
 800242c:	dd00      	ble.n	8002430 <__aeabi_dsub+0x23c>
 800242e:	e224      	b.n	800287a <__aeabi_dsub+0x686>
 8002430:	2620      	movs	r6, #32
 8002432:	1ab4      	subs	r4, r6, r2
 8002434:	46a2      	mov	sl, r4
 8002436:	4664      	mov	r4, ip
 8002438:	4656      	mov	r6, sl
 800243a:	40b4      	lsls	r4, r6
 800243c:	46a1      	mov	r9, r4
 800243e:	001c      	movs	r4, r3
 8002440:	464e      	mov	r6, r9
 8002442:	40d4      	lsrs	r4, r2
 8002444:	4326      	orrs	r6, r4
 8002446:	0034      	movs	r4, r6
 8002448:	4656      	mov	r6, sl
 800244a:	40b3      	lsls	r3, r6
 800244c:	1e5e      	subs	r6, r3, #1
 800244e:	41b3      	sbcs	r3, r6
 8002450:	431c      	orrs	r4, r3
 8002452:	4663      	mov	r3, ip
 8002454:	40d3      	lsrs	r3, r2
 8002456:	18c9      	adds	r1, r1, r3
 8002458:	19e4      	adds	r4, r4, r7
 800245a:	42bc      	cmp	r4, r7
 800245c:	41bf      	sbcs	r7, r7
 800245e:	427f      	negs	r7, r7
 8002460:	46b9      	mov	r9, r7
 8002462:	4680      	mov	r8, r0
 8002464:	4489      	add	r9, r1
 8002466:	e0d8      	b.n	800261a <__aeabi_dsub+0x426>
 8002468:	4640      	mov	r0, r8
 800246a:	4c3b      	ldr	r4, [pc, #236]	; (8002558 <__aeabi_dsub+0x364>)
 800246c:	3001      	adds	r0, #1
 800246e:	4220      	tst	r0, r4
 8002470:	d000      	beq.n	8002474 <__aeabi_dsub+0x280>
 8002472:	e0b4      	b.n	80025de <__aeabi_dsub+0x3ea>
 8002474:	4640      	mov	r0, r8
 8002476:	2800      	cmp	r0, #0
 8002478:	d000      	beq.n	800247c <__aeabi_dsub+0x288>
 800247a:	e144      	b.n	8002706 <__aeabi_dsub+0x512>
 800247c:	4660      	mov	r0, ip
 800247e:	4318      	orrs	r0, r3
 8002480:	d100      	bne.n	8002484 <__aeabi_dsub+0x290>
 8002482:	e190      	b.n	80027a6 <__aeabi_dsub+0x5b2>
 8002484:	0008      	movs	r0, r1
 8002486:	4338      	orrs	r0, r7
 8002488:	d000      	beq.n	800248c <__aeabi_dsub+0x298>
 800248a:	e1aa      	b.n	80027e2 <__aeabi_dsub+0x5ee>
 800248c:	4661      	mov	r1, ip
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	0749      	lsls	r1, r1, #29
 8002492:	430b      	orrs	r3, r1
 8002494:	4661      	mov	r1, ip
 8002496:	08cc      	lsrs	r4, r1, #3
 8002498:	e027      	b.n	80024ea <__aeabi_dsub+0x2f6>
 800249a:	0008      	movs	r0, r1
 800249c:	4338      	orrs	r0, r7
 800249e:	d061      	beq.n	8002564 <__aeabi_dsub+0x370>
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	2a01      	cmp	r2, #1
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dsub+0x2b4>
 80024a6:	e139      	b.n	800271c <__aeabi_dsub+0x528>
 80024a8:	42a2      	cmp	r2, r4
 80024aa:	d027      	beq.n	80024fc <__aeabi_dsub+0x308>
 80024ac:	0002      	movs	r2, r0
 80024ae:	e75d      	b.n	800236c <__aeabi_dsub+0x178>
 80024b0:	0002      	movs	r2, r0
 80024b2:	391f      	subs	r1, #31
 80024b4:	40ca      	lsrs	r2, r1
 80024b6:	0011      	movs	r1, r2
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d003      	beq.n	80024c4 <__aeabi_dsub+0x2d0>
 80024bc:	2240      	movs	r2, #64	; 0x40
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4098      	lsls	r0, r3
 80024c2:	4304      	orrs	r4, r0
 80024c4:	1e63      	subs	r3, r4, #1
 80024c6:	419c      	sbcs	r4, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	4699      	mov	r9, r3
 80024cc:	4698      	mov	r8, r3
 80024ce:	430c      	orrs	r4, r1
 80024d0:	0763      	lsls	r3, r4, #29
 80024d2:	d000      	beq.n	80024d6 <__aeabi_dsub+0x2e2>
 80024d4:	e712      	b.n	80022fc <__aeabi_dsub+0x108>
 80024d6:	464b      	mov	r3, r9
 80024d8:	464a      	mov	r2, r9
 80024da:	08e4      	lsrs	r4, r4, #3
 80024dc:	075b      	lsls	r3, r3, #29
 80024de:	4323      	orrs	r3, r4
 80024e0:	08d4      	lsrs	r4, r2, #3
 80024e2:	4642      	mov	r2, r8
 80024e4:	4919      	ldr	r1, [pc, #100]	; (800254c <__aeabi_dsub+0x358>)
 80024e6:	428a      	cmp	r2, r1
 80024e8:	d00e      	beq.n	8002508 <__aeabi_dsub+0x314>
 80024ea:	0324      	lsls	r4, r4, #12
 80024ec:	0552      	lsls	r2, r2, #21
 80024ee:	0b24      	lsrs	r4, r4, #12
 80024f0:	0d52      	lsrs	r2, r2, #21
 80024f2:	e722      	b.n	800233a <__aeabi_dsub+0x146>
 80024f4:	000a      	movs	r2, r1
 80024f6:	2400      	movs	r4, #0
 80024f8:	2300      	movs	r3, #0
 80024fa:	e71e      	b.n	800233a <__aeabi_dsub+0x146>
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	4662      	mov	r2, ip
 8002500:	0752      	lsls	r2, r2, #29
 8002502:	4313      	orrs	r3, r2
 8002504:	4662      	mov	r2, ip
 8002506:	08d4      	lsrs	r4, r2, #3
 8002508:	001a      	movs	r2, r3
 800250a:	4322      	orrs	r2, r4
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x31c>
 800250e:	e1fc      	b.n	800290a <__aeabi_dsub+0x716>
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	0312      	lsls	r2, r2, #12
 8002514:	4314      	orrs	r4, r2
 8002516:	0324      	lsls	r4, r4, #12
 8002518:	4a0c      	ldr	r2, [pc, #48]	; (800254c <__aeabi_dsub+0x358>)
 800251a:	0b24      	lsrs	r4, r4, #12
 800251c:	e70d      	b.n	800233a <__aeabi_dsub+0x146>
 800251e:	0020      	movs	r0, r4
 8002520:	f000 fb5a 	bl	8002bd8 <__clzsi2>
 8002524:	0001      	movs	r1, r0
 8002526:	3118      	adds	r1, #24
 8002528:	291f      	cmp	r1, #31
 800252a:	dc00      	bgt.n	800252e <__aeabi_dsub+0x33a>
 800252c:	e6c4      	b.n	80022b8 <__aeabi_dsub+0xc4>
 800252e:	3808      	subs	r0, #8
 8002530:	4084      	lsls	r4, r0
 8002532:	4643      	mov	r3, r8
 8002534:	0020      	movs	r0, r4
 8002536:	2400      	movs	r4, #0
 8002538:	4588      	cmp	r8, r1
 800253a:	dc00      	bgt.n	800253e <__aeabi_dsub+0x34a>
 800253c:	e6c8      	b.n	80022d0 <__aeabi_dsub+0xdc>
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <__aeabi_dsub+0x35c>)
 8002540:	1a5b      	subs	r3, r3, r1
 8002542:	4010      	ands	r0, r2
 8002544:	4698      	mov	r8, r3
 8002546:	4681      	mov	r9, r0
 8002548:	e6d6      	b.n	80022f8 <__aeabi_dsub+0x104>
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	000007ff 	.word	0x000007ff
 8002550:	ff7fffff 	.word	0xff7fffff
 8002554:	fffff801 	.word	0xfffff801
 8002558:	000007fe 	.word	0x000007fe
 800255c:	430f      	orrs	r7, r1
 800255e:	1e7a      	subs	r2, r7, #1
 8002560:	4197      	sbcs	r7, r2
 8002562:	e691      	b.n	8002288 <__aeabi_dsub+0x94>
 8002564:	4661      	mov	r1, ip
 8002566:	08db      	lsrs	r3, r3, #3
 8002568:	0749      	lsls	r1, r1, #29
 800256a:	430b      	orrs	r3, r1
 800256c:	4661      	mov	r1, ip
 800256e:	08cc      	lsrs	r4, r1, #3
 8002570:	e7b8      	b.n	80024e4 <__aeabi_dsub+0x2f0>
 8002572:	4640      	mov	r0, r8
 8002574:	4cd3      	ldr	r4, [pc, #844]	; (80028c4 <__aeabi_dsub+0x6d0>)
 8002576:	3001      	adds	r0, #1
 8002578:	4220      	tst	r0, r4
 800257a:	d000      	beq.n	800257e <__aeabi_dsub+0x38a>
 800257c:	e0a2      	b.n	80026c4 <__aeabi_dsub+0x4d0>
 800257e:	4640      	mov	r0, r8
 8002580:	2800      	cmp	r0, #0
 8002582:	d000      	beq.n	8002586 <__aeabi_dsub+0x392>
 8002584:	e101      	b.n	800278a <__aeabi_dsub+0x596>
 8002586:	4660      	mov	r0, ip
 8002588:	4318      	orrs	r0, r3
 800258a:	d100      	bne.n	800258e <__aeabi_dsub+0x39a>
 800258c:	e15e      	b.n	800284c <__aeabi_dsub+0x658>
 800258e:	0008      	movs	r0, r1
 8002590:	4338      	orrs	r0, r7
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x3a2>
 8002594:	e15f      	b.n	8002856 <__aeabi_dsub+0x662>
 8002596:	4661      	mov	r1, ip
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	0749      	lsls	r1, r1, #29
 800259c:	430b      	orrs	r3, r1
 800259e:	4661      	mov	r1, ip
 80025a0:	08cc      	lsrs	r4, r1, #3
 80025a2:	e7a2      	b.n	80024ea <__aeabi_dsub+0x2f6>
 80025a4:	4dc8      	ldr	r5, [pc, #800]	; (80028c8 <__aeabi_dsub+0x6d4>)
 80025a6:	42a8      	cmp	r0, r5
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x3b8>
 80025aa:	e0cf      	b.n	800274c <__aeabi_dsub+0x558>
 80025ac:	2580      	movs	r5, #128	; 0x80
 80025ae:	4664      	mov	r4, ip
 80025b0:	042d      	lsls	r5, r5, #16
 80025b2:	432c      	orrs	r4, r5
 80025b4:	46a4      	mov	ip, r4
 80025b6:	2a38      	cmp	r2, #56	; 0x38
 80025b8:	dc56      	bgt.n	8002668 <__aeabi_dsub+0x474>
 80025ba:	2a1f      	cmp	r2, #31
 80025bc:	dd00      	ble.n	80025c0 <__aeabi_dsub+0x3cc>
 80025be:	e0d1      	b.n	8002764 <__aeabi_dsub+0x570>
 80025c0:	2520      	movs	r5, #32
 80025c2:	001e      	movs	r6, r3
 80025c4:	1aad      	subs	r5, r5, r2
 80025c6:	4664      	mov	r4, ip
 80025c8:	40ab      	lsls	r3, r5
 80025ca:	40ac      	lsls	r4, r5
 80025cc:	40d6      	lsrs	r6, r2
 80025ce:	1e5d      	subs	r5, r3, #1
 80025d0:	41ab      	sbcs	r3, r5
 80025d2:	4334      	orrs	r4, r6
 80025d4:	4323      	orrs	r3, r4
 80025d6:	4664      	mov	r4, ip
 80025d8:	40d4      	lsrs	r4, r2
 80025da:	1b09      	subs	r1, r1, r4
 80025dc:	e049      	b.n	8002672 <__aeabi_dsub+0x47e>
 80025de:	4660      	mov	r0, ip
 80025e0:	1bdc      	subs	r4, r3, r7
 80025e2:	1a46      	subs	r6, r0, r1
 80025e4:	42a3      	cmp	r3, r4
 80025e6:	4180      	sbcs	r0, r0
 80025e8:	4240      	negs	r0, r0
 80025ea:	4681      	mov	r9, r0
 80025ec:	0030      	movs	r0, r6
 80025ee:	464e      	mov	r6, r9
 80025f0:	1b80      	subs	r0, r0, r6
 80025f2:	4681      	mov	r9, r0
 80025f4:	0200      	lsls	r0, r0, #8
 80025f6:	d476      	bmi.n	80026e6 <__aeabi_dsub+0x4f2>
 80025f8:	464b      	mov	r3, r9
 80025fa:	4323      	orrs	r3, r4
 80025fc:	d000      	beq.n	8002600 <__aeabi_dsub+0x40c>
 80025fe:	e652      	b.n	80022a6 <__aeabi_dsub+0xb2>
 8002600:	2400      	movs	r4, #0
 8002602:	2500      	movs	r5, #0
 8002604:	e771      	b.n	80024ea <__aeabi_dsub+0x2f6>
 8002606:	4339      	orrs	r1, r7
 8002608:	000c      	movs	r4, r1
 800260a:	1e62      	subs	r2, r4, #1
 800260c:	4194      	sbcs	r4, r2
 800260e:	18e4      	adds	r4, r4, r3
 8002610:	429c      	cmp	r4, r3
 8002612:	419b      	sbcs	r3, r3
 8002614:	425b      	negs	r3, r3
 8002616:	4463      	add	r3, ip
 8002618:	4699      	mov	r9, r3
 800261a:	464b      	mov	r3, r9
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	d400      	bmi.n	8002622 <__aeabi_dsub+0x42e>
 8002620:	e756      	b.n	80024d0 <__aeabi_dsub+0x2dc>
 8002622:	2301      	movs	r3, #1
 8002624:	469c      	mov	ip, r3
 8002626:	4ba8      	ldr	r3, [pc, #672]	; (80028c8 <__aeabi_dsub+0x6d4>)
 8002628:	44e0      	add	r8, ip
 800262a:	4598      	cmp	r8, r3
 800262c:	d038      	beq.n	80026a0 <__aeabi_dsub+0x4ac>
 800262e:	464b      	mov	r3, r9
 8002630:	48a6      	ldr	r0, [pc, #664]	; (80028cc <__aeabi_dsub+0x6d8>)
 8002632:	2201      	movs	r2, #1
 8002634:	4003      	ands	r3, r0
 8002636:	0018      	movs	r0, r3
 8002638:	0863      	lsrs	r3, r4, #1
 800263a:	4014      	ands	r4, r2
 800263c:	431c      	orrs	r4, r3
 800263e:	07c3      	lsls	r3, r0, #31
 8002640:	431c      	orrs	r4, r3
 8002642:	0843      	lsrs	r3, r0, #1
 8002644:	4699      	mov	r9, r3
 8002646:	e657      	b.n	80022f8 <__aeabi_dsub+0x104>
 8002648:	0010      	movs	r0, r2
 800264a:	000e      	movs	r6, r1
 800264c:	3820      	subs	r0, #32
 800264e:	40c6      	lsrs	r6, r0
 8002650:	2a20      	cmp	r2, #32
 8002652:	d004      	beq.n	800265e <__aeabi_dsub+0x46a>
 8002654:	2040      	movs	r0, #64	; 0x40
 8002656:	1a82      	subs	r2, r0, r2
 8002658:	4091      	lsls	r1, r2
 800265a:	430f      	orrs	r7, r1
 800265c:	46b9      	mov	r9, r7
 800265e:	464f      	mov	r7, r9
 8002660:	1e7a      	subs	r2, r7, #1
 8002662:	4197      	sbcs	r7, r2
 8002664:	4337      	orrs	r7, r6
 8002666:	e60f      	b.n	8002288 <__aeabi_dsub+0x94>
 8002668:	4662      	mov	r2, ip
 800266a:	431a      	orrs	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	1e5a      	subs	r2, r3, #1
 8002670:	4193      	sbcs	r3, r2
 8002672:	1afc      	subs	r4, r7, r3
 8002674:	42a7      	cmp	r7, r4
 8002676:	41bf      	sbcs	r7, r7
 8002678:	427f      	negs	r7, r7
 800267a:	1bcb      	subs	r3, r1, r7
 800267c:	4699      	mov	r9, r3
 800267e:	465d      	mov	r5, fp
 8002680:	4680      	mov	r8, r0
 8002682:	e608      	b.n	8002296 <__aeabi_dsub+0xa2>
 8002684:	4666      	mov	r6, ip
 8002686:	431e      	orrs	r6, r3
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x498>
 800268a:	e0be      	b.n	800280a <__aeabi_dsub+0x616>
 800268c:	1e56      	subs	r6, r2, #1
 800268e:	2a01      	cmp	r2, #1
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x4a0>
 8002692:	e109      	b.n	80028a8 <__aeabi_dsub+0x6b4>
 8002694:	4c8c      	ldr	r4, [pc, #560]	; (80028c8 <__aeabi_dsub+0x6d4>)
 8002696:	42a2      	cmp	r2, r4
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x4a8>
 800269a:	e119      	b.n	80028d0 <__aeabi_dsub+0x6dc>
 800269c:	0032      	movs	r2, r6
 800269e:	e6c1      	b.n	8002424 <__aeabi_dsub+0x230>
 80026a0:	4642      	mov	r2, r8
 80026a2:	2400      	movs	r4, #0
 80026a4:	2300      	movs	r3, #0
 80026a6:	e648      	b.n	800233a <__aeabi_dsub+0x146>
 80026a8:	2020      	movs	r0, #32
 80026aa:	000c      	movs	r4, r1
 80026ac:	1a80      	subs	r0, r0, r2
 80026ae:	003e      	movs	r6, r7
 80026b0:	4087      	lsls	r7, r0
 80026b2:	4084      	lsls	r4, r0
 80026b4:	40d6      	lsrs	r6, r2
 80026b6:	1e78      	subs	r0, r7, #1
 80026b8:	4187      	sbcs	r7, r0
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	4334      	orrs	r4, r6
 80026be:	433c      	orrs	r4, r7
 80026c0:	448c      	add	ip, r1
 80026c2:	e7a4      	b.n	800260e <__aeabi_dsub+0x41a>
 80026c4:	4a80      	ldr	r2, [pc, #512]	; (80028c8 <__aeabi_dsub+0x6d4>)
 80026c6:	4290      	cmp	r0, r2
 80026c8:	d100      	bne.n	80026cc <__aeabi_dsub+0x4d8>
 80026ca:	e0e9      	b.n	80028a0 <__aeabi_dsub+0x6ac>
 80026cc:	19df      	adds	r7, r3, r7
 80026ce:	429f      	cmp	r7, r3
 80026d0:	419b      	sbcs	r3, r3
 80026d2:	4461      	add	r1, ip
 80026d4:	425b      	negs	r3, r3
 80026d6:	18c9      	adds	r1, r1, r3
 80026d8:	07cc      	lsls	r4, r1, #31
 80026da:	087f      	lsrs	r7, r7, #1
 80026dc:	084b      	lsrs	r3, r1, #1
 80026de:	4699      	mov	r9, r3
 80026e0:	4680      	mov	r8, r0
 80026e2:	433c      	orrs	r4, r7
 80026e4:	e6f4      	b.n	80024d0 <__aeabi_dsub+0x2dc>
 80026e6:	1afc      	subs	r4, r7, r3
 80026e8:	42a7      	cmp	r7, r4
 80026ea:	41bf      	sbcs	r7, r7
 80026ec:	4663      	mov	r3, ip
 80026ee:	427f      	negs	r7, r7
 80026f0:	1ac9      	subs	r1, r1, r3
 80026f2:	1bcb      	subs	r3, r1, r7
 80026f4:	4699      	mov	r9, r3
 80026f6:	465d      	mov	r5, fp
 80026f8:	e5d5      	b.n	80022a6 <__aeabi_dsub+0xb2>
 80026fa:	08ff      	lsrs	r7, r7, #3
 80026fc:	074b      	lsls	r3, r1, #29
 80026fe:	465d      	mov	r5, fp
 8002700:	433b      	orrs	r3, r7
 8002702:	08cc      	lsrs	r4, r1, #3
 8002704:	e6ee      	b.n	80024e4 <__aeabi_dsub+0x2f0>
 8002706:	4662      	mov	r2, ip
 8002708:	431a      	orrs	r2, r3
 800270a:	d000      	beq.n	800270e <__aeabi_dsub+0x51a>
 800270c:	e082      	b.n	8002814 <__aeabi_dsub+0x620>
 800270e:	000b      	movs	r3, r1
 8002710:	433b      	orrs	r3, r7
 8002712:	d11b      	bne.n	800274c <__aeabi_dsub+0x558>
 8002714:	2480      	movs	r4, #128	; 0x80
 8002716:	2500      	movs	r5, #0
 8002718:	0324      	lsls	r4, r4, #12
 800271a:	e6f9      	b.n	8002510 <__aeabi_dsub+0x31c>
 800271c:	19dc      	adds	r4, r3, r7
 800271e:	429c      	cmp	r4, r3
 8002720:	419b      	sbcs	r3, r3
 8002722:	4461      	add	r1, ip
 8002724:	4689      	mov	r9, r1
 8002726:	425b      	negs	r3, r3
 8002728:	4499      	add	r9, r3
 800272a:	464b      	mov	r3, r9
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	d444      	bmi.n	80027ba <__aeabi_dsub+0x5c6>
 8002730:	2301      	movs	r3, #1
 8002732:	4698      	mov	r8, r3
 8002734:	e6cc      	b.n	80024d0 <__aeabi_dsub+0x2dc>
 8002736:	1bdc      	subs	r4, r3, r7
 8002738:	4662      	mov	r2, ip
 800273a:	42a3      	cmp	r3, r4
 800273c:	419b      	sbcs	r3, r3
 800273e:	1a51      	subs	r1, r2, r1
 8002740:	425b      	negs	r3, r3
 8002742:	1acb      	subs	r3, r1, r3
 8002744:	4699      	mov	r9, r3
 8002746:	2301      	movs	r3, #1
 8002748:	4698      	mov	r8, r3
 800274a:	e5a4      	b.n	8002296 <__aeabi_dsub+0xa2>
 800274c:	08ff      	lsrs	r7, r7, #3
 800274e:	074b      	lsls	r3, r1, #29
 8002750:	465d      	mov	r5, fp
 8002752:	433b      	orrs	r3, r7
 8002754:	08cc      	lsrs	r4, r1, #3
 8002756:	e6d7      	b.n	8002508 <__aeabi_dsub+0x314>
 8002758:	4662      	mov	r2, ip
 800275a:	431a      	orrs	r2, r3
 800275c:	0014      	movs	r4, r2
 800275e:	1e63      	subs	r3, r4, #1
 8002760:	419c      	sbcs	r4, r3
 8002762:	e679      	b.n	8002458 <__aeabi_dsub+0x264>
 8002764:	0015      	movs	r5, r2
 8002766:	4664      	mov	r4, ip
 8002768:	3d20      	subs	r5, #32
 800276a:	40ec      	lsrs	r4, r5
 800276c:	46a0      	mov	r8, r4
 800276e:	2a20      	cmp	r2, #32
 8002770:	d005      	beq.n	800277e <__aeabi_dsub+0x58a>
 8002772:	2540      	movs	r5, #64	; 0x40
 8002774:	4664      	mov	r4, ip
 8002776:	1aaa      	subs	r2, r5, r2
 8002778:	4094      	lsls	r4, r2
 800277a:	4323      	orrs	r3, r4
 800277c:	469a      	mov	sl, r3
 800277e:	4654      	mov	r4, sl
 8002780:	1e63      	subs	r3, r4, #1
 8002782:	419c      	sbcs	r4, r3
 8002784:	4643      	mov	r3, r8
 8002786:	4323      	orrs	r3, r4
 8002788:	e773      	b.n	8002672 <__aeabi_dsub+0x47e>
 800278a:	4662      	mov	r2, ip
 800278c:	431a      	orrs	r2, r3
 800278e:	d023      	beq.n	80027d8 <__aeabi_dsub+0x5e4>
 8002790:	000a      	movs	r2, r1
 8002792:	433a      	orrs	r2, r7
 8002794:	d000      	beq.n	8002798 <__aeabi_dsub+0x5a4>
 8002796:	e0a0      	b.n	80028da <__aeabi_dsub+0x6e6>
 8002798:	4662      	mov	r2, ip
 800279a:	08db      	lsrs	r3, r3, #3
 800279c:	0752      	lsls	r2, r2, #29
 800279e:	4313      	orrs	r3, r2
 80027a0:	4662      	mov	r2, ip
 80027a2:	08d4      	lsrs	r4, r2, #3
 80027a4:	e6b0      	b.n	8002508 <__aeabi_dsub+0x314>
 80027a6:	000b      	movs	r3, r1
 80027a8:	433b      	orrs	r3, r7
 80027aa:	d100      	bne.n	80027ae <__aeabi_dsub+0x5ba>
 80027ac:	e728      	b.n	8002600 <__aeabi_dsub+0x40c>
 80027ae:	08ff      	lsrs	r7, r7, #3
 80027b0:	074b      	lsls	r3, r1, #29
 80027b2:	465d      	mov	r5, fp
 80027b4:	433b      	orrs	r3, r7
 80027b6:	08cc      	lsrs	r4, r1, #3
 80027b8:	e697      	b.n	80024ea <__aeabi_dsub+0x2f6>
 80027ba:	2302      	movs	r3, #2
 80027bc:	4698      	mov	r8, r3
 80027be:	e736      	b.n	800262e <__aeabi_dsub+0x43a>
 80027c0:	1afc      	subs	r4, r7, r3
 80027c2:	42a7      	cmp	r7, r4
 80027c4:	41bf      	sbcs	r7, r7
 80027c6:	4663      	mov	r3, ip
 80027c8:	427f      	negs	r7, r7
 80027ca:	1ac9      	subs	r1, r1, r3
 80027cc:	1bcb      	subs	r3, r1, r7
 80027ce:	4699      	mov	r9, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	465d      	mov	r5, fp
 80027d4:	4698      	mov	r8, r3
 80027d6:	e55e      	b.n	8002296 <__aeabi_dsub+0xa2>
 80027d8:	074b      	lsls	r3, r1, #29
 80027da:	08ff      	lsrs	r7, r7, #3
 80027dc:	433b      	orrs	r3, r7
 80027de:	08cc      	lsrs	r4, r1, #3
 80027e0:	e692      	b.n	8002508 <__aeabi_dsub+0x314>
 80027e2:	1bdc      	subs	r4, r3, r7
 80027e4:	4660      	mov	r0, ip
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	41b6      	sbcs	r6, r6
 80027ea:	1a40      	subs	r0, r0, r1
 80027ec:	4276      	negs	r6, r6
 80027ee:	1b80      	subs	r0, r0, r6
 80027f0:	4681      	mov	r9, r0
 80027f2:	0200      	lsls	r0, r0, #8
 80027f4:	d560      	bpl.n	80028b8 <__aeabi_dsub+0x6c4>
 80027f6:	1afc      	subs	r4, r7, r3
 80027f8:	42a7      	cmp	r7, r4
 80027fa:	41bf      	sbcs	r7, r7
 80027fc:	4663      	mov	r3, ip
 80027fe:	427f      	negs	r7, r7
 8002800:	1ac9      	subs	r1, r1, r3
 8002802:	1bcb      	subs	r3, r1, r7
 8002804:	4699      	mov	r9, r3
 8002806:	465d      	mov	r5, fp
 8002808:	e576      	b.n	80022f8 <__aeabi_dsub+0x104>
 800280a:	08ff      	lsrs	r7, r7, #3
 800280c:	074b      	lsls	r3, r1, #29
 800280e:	433b      	orrs	r3, r7
 8002810:	08cc      	lsrs	r4, r1, #3
 8002812:	e667      	b.n	80024e4 <__aeabi_dsub+0x2f0>
 8002814:	000a      	movs	r2, r1
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	433a      	orrs	r2, r7
 800281a:	d100      	bne.n	800281e <__aeabi_dsub+0x62a>
 800281c:	e66f      	b.n	80024fe <__aeabi_dsub+0x30a>
 800281e:	4662      	mov	r2, ip
 8002820:	0752      	lsls	r2, r2, #29
 8002822:	4313      	orrs	r3, r2
 8002824:	4662      	mov	r2, ip
 8002826:	08d4      	lsrs	r4, r2, #3
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	0312      	lsls	r2, r2, #12
 800282c:	4214      	tst	r4, r2
 800282e:	d007      	beq.n	8002840 <__aeabi_dsub+0x64c>
 8002830:	08c8      	lsrs	r0, r1, #3
 8002832:	4210      	tst	r0, r2
 8002834:	d104      	bne.n	8002840 <__aeabi_dsub+0x64c>
 8002836:	465d      	mov	r5, fp
 8002838:	0004      	movs	r4, r0
 800283a:	08fb      	lsrs	r3, r7, #3
 800283c:	0749      	lsls	r1, r1, #29
 800283e:	430b      	orrs	r3, r1
 8002840:	0f5a      	lsrs	r2, r3, #29
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	08db      	lsrs	r3, r3, #3
 8002846:	0752      	lsls	r2, r2, #29
 8002848:	4313      	orrs	r3, r2
 800284a:	e65d      	b.n	8002508 <__aeabi_dsub+0x314>
 800284c:	074b      	lsls	r3, r1, #29
 800284e:	08ff      	lsrs	r7, r7, #3
 8002850:	433b      	orrs	r3, r7
 8002852:	08cc      	lsrs	r4, r1, #3
 8002854:	e649      	b.n	80024ea <__aeabi_dsub+0x2f6>
 8002856:	19dc      	adds	r4, r3, r7
 8002858:	429c      	cmp	r4, r3
 800285a:	419b      	sbcs	r3, r3
 800285c:	4461      	add	r1, ip
 800285e:	4689      	mov	r9, r1
 8002860:	425b      	negs	r3, r3
 8002862:	4499      	add	r9, r3
 8002864:	464b      	mov	r3, r9
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	d400      	bmi.n	800286c <__aeabi_dsub+0x678>
 800286a:	e631      	b.n	80024d0 <__aeabi_dsub+0x2dc>
 800286c:	464a      	mov	r2, r9
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <__aeabi_dsub+0x6d8>)
 8002870:	401a      	ands	r2, r3
 8002872:	2301      	movs	r3, #1
 8002874:	4691      	mov	r9, r2
 8002876:	4698      	mov	r8, r3
 8002878:	e62a      	b.n	80024d0 <__aeabi_dsub+0x2dc>
 800287a:	0016      	movs	r6, r2
 800287c:	4664      	mov	r4, ip
 800287e:	3e20      	subs	r6, #32
 8002880:	40f4      	lsrs	r4, r6
 8002882:	46a0      	mov	r8, r4
 8002884:	2a20      	cmp	r2, #32
 8002886:	d005      	beq.n	8002894 <__aeabi_dsub+0x6a0>
 8002888:	2640      	movs	r6, #64	; 0x40
 800288a:	4664      	mov	r4, ip
 800288c:	1ab2      	subs	r2, r6, r2
 800288e:	4094      	lsls	r4, r2
 8002890:	4323      	orrs	r3, r4
 8002892:	469a      	mov	sl, r3
 8002894:	4654      	mov	r4, sl
 8002896:	1e63      	subs	r3, r4, #1
 8002898:	419c      	sbcs	r4, r3
 800289a:	4643      	mov	r3, r8
 800289c:	431c      	orrs	r4, r3
 800289e:	e5db      	b.n	8002458 <__aeabi_dsub+0x264>
 80028a0:	0002      	movs	r2, r0
 80028a2:	2400      	movs	r4, #0
 80028a4:	2300      	movs	r3, #0
 80028a6:	e548      	b.n	800233a <__aeabi_dsub+0x146>
 80028a8:	19dc      	adds	r4, r3, r7
 80028aa:	42bc      	cmp	r4, r7
 80028ac:	41bf      	sbcs	r7, r7
 80028ae:	4461      	add	r1, ip
 80028b0:	4689      	mov	r9, r1
 80028b2:	427f      	negs	r7, r7
 80028b4:	44b9      	add	r9, r7
 80028b6:	e738      	b.n	800272a <__aeabi_dsub+0x536>
 80028b8:	464b      	mov	r3, r9
 80028ba:	4323      	orrs	r3, r4
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x6cc>
 80028be:	e69f      	b.n	8002600 <__aeabi_dsub+0x40c>
 80028c0:	e606      	b.n	80024d0 <__aeabi_dsub+0x2dc>
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	000007fe 	.word	0x000007fe
 80028c8:	000007ff 	.word	0x000007ff
 80028cc:	ff7fffff 	.word	0xff7fffff
 80028d0:	08ff      	lsrs	r7, r7, #3
 80028d2:	074b      	lsls	r3, r1, #29
 80028d4:	433b      	orrs	r3, r7
 80028d6:	08cc      	lsrs	r4, r1, #3
 80028d8:	e616      	b.n	8002508 <__aeabi_dsub+0x314>
 80028da:	4662      	mov	r2, ip
 80028dc:	08db      	lsrs	r3, r3, #3
 80028de:	0752      	lsls	r2, r2, #29
 80028e0:	4313      	orrs	r3, r2
 80028e2:	4662      	mov	r2, ip
 80028e4:	08d4      	lsrs	r4, r2, #3
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	0312      	lsls	r2, r2, #12
 80028ea:	4214      	tst	r4, r2
 80028ec:	d007      	beq.n	80028fe <__aeabi_dsub+0x70a>
 80028ee:	08c8      	lsrs	r0, r1, #3
 80028f0:	4210      	tst	r0, r2
 80028f2:	d104      	bne.n	80028fe <__aeabi_dsub+0x70a>
 80028f4:	465d      	mov	r5, fp
 80028f6:	0004      	movs	r4, r0
 80028f8:	08fb      	lsrs	r3, r7, #3
 80028fa:	0749      	lsls	r1, r1, #29
 80028fc:	430b      	orrs	r3, r1
 80028fe:	0f5a      	lsrs	r2, r3, #29
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	0752      	lsls	r2, r2, #29
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	4313      	orrs	r3, r2
 8002908:	e5fe      	b.n	8002508 <__aeabi_dsub+0x314>
 800290a:	2300      	movs	r3, #0
 800290c:	4a01      	ldr	r2, [pc, #4]	; (8002914 <__aeabi_dsub+0x720>)
 800290e:	001c      	movs	r4, r3
 8002910:	e513      	b.n	800233a <__aeabi_dsub+0x146>
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	000007ff 	.word	0x000007ff

08002918 <__aeabi_i2d>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	2800      	cmp	r0, #0
 800291c:	d016      	beq.n	800294c <__aeabi_i2d+0x34>
 800291e:	17c3      	asrs	r3, r0, #31
 8002920:	18c5      	adds	r5, r0, r3
 8002922:	405d      	eors	r5, r3
 8002924:	0fc4      	lsrs	r4, r0, #31
 8002926:	0028      	movs	r0, r5
 8002928:	f000 f956 	bl	8002bd8 <__clzsi2>
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <__aeabi_i2d+0x5c>)
 800292e:	1a12      	subs	r2, r2, r0
 8002930:	280a      	cmp	r0, #10
 8002932:	dc16      	bgt.n	8002962 <__aeabi_i2d+0x4a>
 8002934:	0003      	movs	r3, r0
 8002936:	002e      	movs	r6, r5
 8002938:	3315      	adds	r3, #21
 800293a:	409e      	lsls	r6, r3
 800293c:	230b      	movs	r3, #11
 800293e:	1a18      	subs	r0, r3, r0
 8002940:	40c5      	lsrs	r5, r0
 8002942:	0552      	lsls	r2, r2, #21
 8002944:	032d      	lsls	r5, r5, #12
 8002946:	0b2d      	lsrs	r5, r5, #12
 8002948:	0d53      	lsrs	r3, r2, #21
 800294a:	e003      	b.n	8002954 <__aeabi_i2d+0x3c>
 800294c:	2400      	movs	r4, #0
 800294e:	2300      	movs	r3, #0
 8002950:	2500      	movs	r5, #0
 8002952:	2600      	movs	r6, #0
 8002954:	051b      	lsls	r3, r3, #20
 8002956:	432b      	orrs	r3, r5
 8002958:	07e4      	lsls	r4, r4, #31
 800295a:	4323      	orrs	r3, r4
 800295c:	0030      	movs	r0, r6
 800295e:	0019      	movs	r1, r3
 8002960:	bd70      	pop	{r4, r5, r6, pc}
 8002962:	380b      	subs	r0, #11
 8002964:	4085      	lsls	r5, r0
 8002966:	0552      	lsls	r2, r2, #21
 8002968:	032d      	lsls	r5, r5, #12
 800296a:	2600      	movs	r6, #0
 800296c:	0b2d      	lsrs	r5, r5, #12
 800296e:	0d53      	lsrs	r3, r2, #21
 8002970:	e7f0      	b.n	8002954 <__aeabi_i2d+0x3c>
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	0000041e 	.word	0x0000041e

08002978 <__aeabi_ui2d>:
 8002978:	b510      	push	{r4, lr}
 800297a:	1e04      	subs	r4, r0, #0
 800297c:	d010      	beq.n	80029a0 <__aeabi_ui2d+0x28>
 800297e:	f000 f92b 	bl	8002bd8 <__clzsi2>
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <__aeabi_ui2d+0x48>)
 8002984:	1a1b      	subs	r3, r3, r0
 8002986:	280a      	cmp	r0, #10
 8002988:	dc11      	bgt.n	80029ae <__aeabi_ui2d+0x36>
 800298a:	220b      	movs	r2, #11
 800298c:	0021      	movs	r1, r4
 800298e:	1a12      	subs	r2, r2, r0
 8002990:	40d1      	lsrs	r1, r2
 8002992:	3015      	adds	r0, #21
 8002994:	030a      	lsls	r2, r1, #12
 8002996:	055b      	lsls	r3, r3, #21
 8002998:	4084      	lsls	r4, r0
 800299a:	0b12      	lsrs	r2, r2, #12
 800299c:	0d5b      	lsrs	r3, r3, #21
 800299e:	e001      	b.n	80029a4 <__aeabi_ui2d+0x2c>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2200      	movs	r2, #0
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	4313      	orrs	r3, r2
 80029a8:	0020      	movs	r0, r4
 80029aa:	0019      	movs	r1, r3
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	0022      	movs	r2, r4
 80029b0:	380b      	subs	r0, #11
 80029b2:	4082      	lsls	r2, r0
 80029b4:	055b      	lsls	r3, r3, #21
 80029b6:	0312      	lsls	r2, r2, #12
 80029b8:	2400      	movs	r4, #0
 80029ba:	0b12      	lsrs	r2, r2, #12
 80029bc:	0d5b      	lsrs	r3, r3, #21
 80029be:	e7f1      	b.n	80029a4 <__aeabi_ui2d+0x2c>
 80029c0:	0000041e 	.word	0x0000041e

080029c4 <__aeabi_f2d>:
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	0043      	lsls	r3, r0, #1
 80029c8:	0246      	lsls	r6, r0, #9
 80029ca:	0fc4      	lsrs	r4, r0, #31
 80029cc:	20fe      	movs	r0, #254	; 0xfe
 80029ce:	0e1b      	lsrs	r3, r3, #24
 80029d0:	1c59      	adds	r1, r3, #1
 80029d2:	0a75      	lsrs	r5, r6, #9
 80029d4:	4208      	tst	r0, r1
 80029d6:	d00c      	beq.n	80029f2 <__aeabi_f2d+0x2e>
 80029d8:	22e0      	movs	r2, #224	; 0xe0
 80029da:	0092      	lsls	r2, r2, #2
 80029dc:	4694      	mov	ip, r2
 80029de:	076d      	lsls	r5, r5, #29
 80029e0:	0b36      	lsrs	r6, r6, #12
 80029e2:	4463      	add	r3, ip
 80029e4:	051b      	lsls	r3, r3, #20
 80029e6:	4333      	orrs	r3, r6
 80029e8:	07e4      	lsls	r4, r4, #31
 80029ea:	4323      	orrs	r3, r4
 80029ec:	0028      	movs	r0, r5
 80029ee:	0019      	movs	r1, r3
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d114      	bne.n	8002a20 <__aeabi_f2d+0x5c>
 80029f6:	2d00      	cmp	r5, #0
 80029f8:	d01b      	beq.n	8002a32 <__aeabi_f2d+0x6e>
 80029fa:	0028      	movs	r0, r5
 80029fc:	f000 f8ec 	bl	8002bd8 <__clzsi2>
 8002a00:	280a      	cmp	r0, #10
 8002a02:	dc1c      	bgt.n	8002a3e <__aeabi_f2d+0x7a>
 8002a04:	230b      	movs	r3, #11
 8002a06:	002e      	movs	r6, r5
 8002a08:	1a1b      	subs	r3, r3, r0
 8002a0a:	40de      	lsrs	r6, r3
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	3315      	adds	r3, #21
 8002a10:	409d      	lsls	r5, r3
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <__aeabi_f2d+0x88>)
 8002a14:	0336      	lsls	r6, r6, #12
 8002a16:	1a12      	subs	r2, r2, r0
 8002a18:	0552      	lsls	r2, r2, #21
 8002a1a:	0b36      	lsrs	r6, r6, #12
 8002a1c:	0d53      	lsrs	r3, r2, #21
 8002a1e:	e7e1      	b.n	80029e4 <__aeabi_f2d+0x20>
 8002a20:	2d00      	cmp	r5, #0
 8002a22:	d009      	beq.n	8002a38 <__aeabi_f2d+0x74>
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	0b36      	lsrs	r6, r6, #12
 8002a28:	0312      	lsls	r2, r2, #12
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <__aeabi_f2d+0x8c>)
 8002a2c:	076d      	lsls	r5, r5, #29
 8002a2e:	4316      	orrs	r6, r2
 8002a30:	e7d8      	b.n	80029e4 <__aeabi_f2d+0x20>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2600      	movs	r6, #0
 8002a36:	e7d5      	b.n	80029e4 <__aeabi_f2d+0x20>
 8002a38:	2600      	movs	r6, #0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <__aeabi_f2d+0x8c>)
 8002a3c:	e7d2      	b.n	80029e4 <__aeabi_f2d+0x20>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	3b0b      	subs	r3, #11
 8002a42:	409d      	lsls	r5, r3
 8002a44:	002e      	movs	r6, r5
 8002a46:	2500      	movs	r5, #0
 8002a48:	e7e3      	b.n	8002a12 <__aeabi_f2d+0x4e>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	00000389 	.word	0x00000389
 8002a50:	000007ff 	.word	0x000007ff

08002a54 <__aeabi_d2f>:
 8002a54:	0002      	movs	r2, r0
 8002a56:	004b      	lsls	r3, r1, #1
 8002a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5a:	0d5b      	lsrs	r3, r3, #21
 8002a5c:	030c      	lsls	r4, r1, #12
 8002a5e:	4e3d      	ldr	r6, [pc, #244]	; (8002b54 <__aeabi_d2f+0x100>)
 8002a60:	0a64      	lsrs	r4, r4, #9
 8002a62:	0f40      	lsrs	r0, r0, #29
 8002a64:	1c5f      	adds	r7, r3, #1
 8002a66:	0fc9      	lsrs	r1, r1, #31
 8002a68:	4304      	orrs	r4, r0
 8002a6a:	00d5      	lsls	r5, r2, #3
 8002a6c:	4237      	tst	r7, r6
 8002a6e:	d00a      	beq.n	8002a86 <__aeabi_d2f+0x32>
 8002a70:	4839      	ldr	r0, [pc, #228]	; (8002b58 <__aeabi_d2f+0x104>)
 8002a72:	181e      	adds	r6, r3, r0
 8002a74:	2efe      	cmp	r6, #254	; 0xfe
 8002a76:	dd16      	ble.n	8002aa6 <__aeabi_d2f+0x52>
 8002a78:	20ff      	movs	r0, #255	; 0xff
 8002a7a:	2400      	movs	r4, #0
 8002a7c:	05c0      	lsls	r0, r0, #23
 8002a7e:	4320      	orrs	r0, r4
 8002a80:	07c9      	lsls	r1, r1, #31
 8002a82:	4308      	orrs	r0, r1
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <__aeabi_d2f+0x44>
 8002a8a:	432c      	orrs	r4, r5
 8002a8c:	d026      	beq.n	8002adc <__aeabi_d2f+0x88>
 8002a8e:	2205      	movs	r2, #5
 8002a90:	0192      	lsls	r2, r2, #6
 8002a92:	0a54      	lsrs	r4, r2, #9
 8002a94:	b2d8      	uxtb	r0, r3
 8002a96:	e7f1      	b.n	8002a7c <__aeabi_d2f+0x28>
 8002a98:	4325      	orrs	r5, r4
 8002a9a:	d0ed      	beq.n	8002a78 <__aeabi_d2f+0x24>
 8002a9c:	2080      	movs	r0, #128	; 0x80
 8002a9e:	03c0      	lsls	r0, r0, #15
 8002aa0:	4304      	orrs	r4, r0
 8002aa2:	20ff      	movs	r0, #255	; 0xff
 8002aa4:	e7ea      	b.n	8002a7c <__aeabi_d2f+0x28>
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	dd1b      	ble.n	8002ae2 <__aeabi_d2f+0x8e>
 8002aaa:	0192      	lsls	r2, r2, #6
 8002aac:	1e53      	subs	r3, r2, #1
 8002aae:	419a      	sbcs	r2, r3
 8002ab0:	00e4      	lsls	r4, r4, #3
 8002ab2:	0f6d      	lsrs	r5, r5, #29
 8002ab4:	4322      	orrs	r2, r4
 8002ab6:	432a      	orrs	r2, r5
 8002ab8:	0753      	lsls	r3, r2, #29
 8002aba:	d048      	beq.n	8002b4e <__aeabi_d2f+0xfa>
 8002abc:	230f      	movs	r3, #15
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d000      	beq.n	8002ac6 <__aeabi_d2f+0x72>
 8002ac4:	3204      	adds	r2, #4
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	04db      	lsls	r3, r3, #19
 8002aca:	4013      	ands	r3, r2
 8002acc:	d03f      	beq.n	8002b4e <__aeabi_d2f+0xfa>
 8002ace:	1c70      	adds	r0, r6, #1
 8002ad0:	2efe      	cmp	r6, #254	; 0xfe
 8002ad2:	d0d1      	beq.n	8002a78 <__aeabi_d2f+0x24>
 8002ad4:	0192      	lsls	r2, r2, #6
 8002ad6:	0a54      	lsrs	r4, r2, #9
 8002ad8:	b2c0      	uxtb	r0, r0
 8002ada:	e7cf      	b.n	8002a7c <__aeabi_d2f+0x28>
 8002adc:	2000      	movs	r0, #0
 8002ade:	2400      	movs	r4, #0
 8002ae0:	e7cc      	b.n	8002a7c <__aeabi_d2f+0x28>
 8002ae2:	0032      	movs	r2, r6
 8002ae4:	3217      	adds	r2, #23
 8002ae6:	db22      	blt.n	8002b2e <__aeabi_d2f+0xda>
 8002ae8:	2080      	movs	r0, #128	; 0x80
 8002aea:	0400      	lsls	r0, r0, #16
 8002aec:	4320      	orrs	r0, r4
 8002aee:	241e      	movs	r4, #30
 8002af0:	1ba4      	subs	r4, r4, r6
 8002af2:	2c1f      	cmp	r4, #31
 8002af4:	dd1d      	ble.n	8002b32 <__aeabi_d2f+0xde>
 8002af6:	2202      	movs	r2, #2
 8002af8:	4252      	negs	r2, r2
 8002afa:	1b96      	subs	r6, r2, r6
 8002afc:	0002      	movs	r2, r0
 8002afe:	40f2      	lsrs	r2, r6
 8002b00:	0016      	movs	r6, r2
 8002b02:	2c20      	cmp	r4, #32
 8002b04:	d004      	beq.n	8002b10 <__aeabi_d2f+0xbc>
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <__aeabi_d2f+0x108>)
 8002b08:	4694      	mov	ip, r2
 8002b0a:	4463      	add	r3, ip
 8002b0c:	4098      	lsls	r0, r3
 8002b0e:	4305      	orrs	r5, r0
 8002b10:	002a      	movs	r2, r5
 8002b12:	1e53      	subs	r3, r2, #1
 8002b14:	419a      	sbcs	r2, r3
 8002b16:	4332      	orrs	r2, r6
 8002b18:	2600      	movs	r6, #0
 8002b1a:	0753      	lsls	r3, r2, #29
 8002b1c:	d1ce      	bne.n	8002abc <__aeabi_d2f+0x68>
 8002b1e:	2480      	movs	r4, #128	; 0x80
 8002b20:	0013      	movs	r3, r2
 8002b22:	04e4      	lsls	r4, r4, #19
 8002b24:	2001      	movs	r0, #1
 8002b26:	4023      	ands	r3, r4
 8002b28:	4222      	tst	r2, r4
 8002b2a:	d1d3      	bne.n	8002ad4 <__aeabi_d2f+0x80>
 8002b2c:	e7b0      	b.n	8002a90 <__aeabi_d2f+0x3c>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e7ad      	b.n	8002a8e <__aeabi_d2f+0x3a>
 8002b32:	4a0b      	ldr	r2, [pc, #44]	; (8002b60 <__aeabi_d2f+0x10c>)
 8002b34:	4694      	mov	ip, r2
 8002b36:	002a      	movs	r2, r5
 8002b38:	40e2      	lsrs	r2, r4
 8002b3a:	0014      	movs	r4, r2
 8002b3c:	002a      	movs	r2, r5
 8002b3e:	4463      	add	r3, ip
 8002b40:	409a      	lsls	r2, r3
 8002b42:	4098      	lsls	r0, r3
 8002b44:	1e55      	subs	r5, r2, #1
 8002b46:	41aa      	sbcs	r2, r5
 8002b48:	4302      	orrs	r2, r0
 8002b4a:	4322      	orrs	r2, r4
 8002b4c:	e7e4      	b.n	8002b18 <__aeabi_d2f+0xc4>
 8002b4e:	0033      	movs	r3, r6
 8002b50:	e79e      	b.n	8002a90 <__aeabi_d2f+0x3c>
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	000007fe 	.word	0x000007fe
 8002b58:	fffffc80 	.word	0xfffffc80
 8002b5c:	fffffca2 	.word	0xfffffca2
 8002b60:	fffffc82 	.word	0xfffffc82

08002b64 <__aeabi_cfrcmple>:
 8002b64:	4684      	mov	ip, r0
 8002b66:	0008      	movs	r0, r1
 8002b68:	4661      	mov	r1, ip
 8002b6a:	e7ff      	b.n	8002b6c <__aeabi_cfcmpeq>

08002b6c <__aeabi_cfcmpeq>:
 8002b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b6e:	f000 f8c9 	bl	8002d04 <__lesf2>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d401      	bmi.n	8002b7a <__aeabi_cfcmpeq+0xe>
 8002b76:	2100      	movs	r1, #0
 8002b78:	42c8      	cmn	r0, r1
 8002b7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002b7c <__aeabi_fcmpeq>:
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	f000 f855 	bl	8002c2c <__eqsf2>
 8002b82:	4240      	negs	r0, r0
 8002b84:	3001      	adds	r0, #1
 8002b86:	bd10      	pop	{r4, pc}

08002b88 <__aeabi_fcmplt>:
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	f000 f8bb 	bl	8002d04 <__lesf2>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	db01      	blt.n	8002b96 <__aeabi_fcmplt+0xe>
 8002b92:	2000      	movs	r0, #0
 8002b94:	bd10      	pop	{r4, pc}
 8002b96:	2001      	movs	r0, #1
 8002b98:	bd10      	pop	{r4, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)

08002b9c <__aeabi_fcmple>:
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	f000 f8b1 	bl	8002d04 <__lesf2>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	dd01      	ble.n	8002baa <__aeabi_fcmple+0xe>
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	2001      	movs	r0, #1
 8002bac:	bd10      	pop	{r4, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)

08002bb0 <__aeabi_fcmpgt>:
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	f000 f861 	bl	8002c78 <__gesf2>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	dc01      	bgt.n	8002bbe <__aeabi_fcmpgt+0xe>
 8002bba:	2000      	movs	r0, #0
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	bd10      	pop	{r4, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)

08002bc4 <__aeabi_fcmpge>:
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	f000 f857 	bl	8002c78 <__gesf2>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	da01      	bge.n	8002bd2 <__aeabi_fcmpge+0xe>
 8002bce:	2000      	movs	r0, #0
 8002bd0:	bd10      	pop	{r4, pc}
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)

08002bd8 <__clzsi2>:
 8002bd8:	211c      	movs	r1, #28
 8002bda:	2301      	movs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	4298      	cmp	r0, r3
 8002be0:	d301      	bcc.n	8002be6 <__clzsi2+0xe>
 8002be2:	0c00      	lsrs	r0, r0, #16
 8002be4:	3910      	subs	r1, #16
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	4298      	cmp	r0, r3
 8002bea:	d301      	bcc.n	8002bf0 <__clzsi2+0x18>
 8002bec:	0a00      	lsrs	r0, r0, #8
 8002bee:	3908      	subs	r1, #8
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	4298      	cmp	r0, r3
 8002bf4:	d301      	bcc.n	8002bfa <__clzsi2+0x22>
 8002bf6:	0900      	lsrs	r0, r0, #4
 8002bf8:	3904      	subs	r1, #4
 8002bfa:	a202      	add	r2, pc, #8	; (adr r2, 8002c04 <__clzsi2+0x2c>)
 8002bfc:	5c10      	ldrb	r0, [r2, r0]
 8002bfe:	1840      	adds	r0, r0, r1
 8002c00:	4770      	bx	lr
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	02020304 	.word	0x02020304
 8002c08:	01010101 	.word	0x01010101
	...

08002c14 <__clzdi2>:
 8002c14:	b510      	push	{r4, lr}
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d103      	bne.n	8002c22 <__clzdi2+0xe>
 8002c1a:	f7ff ffdd 	bl	8002bd8 <__clzsi2>
 8002c1e:	3020      	adds	r0, #32
 8002c20:	e002      	b.n	8002c28 <__clzdi2+0x14>
 8002c22:	0008      	movs	r0, r1
 8002c24:	f7ff ffd8 	bl	8002bd8 <__clzsi2>
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)

08002c2c <__eqsf2>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	0042      	lsls	r2, r0, #1
 8002c30:	0245      	lsls	r5, r0, #9
 8002c32:	024e      	lsls	r6, r1, #9
 8002c34:	004c      	lsls	r4, r1, #1
 8002c36:	0fc3      	lsrs	r3, r0, #31
 8002c38:	0a6d      	lsrs	r5, r5, #9
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	0e12      	lsrs	r2, r2, #24
 8002c3e:	0a76      	lsrs	r6, r6, #9
 8002c40:	0e24      	lsrs	r4, r4, #24
 8002c42:	0fc9      	lsrs	r1, r1, #31
 8002c44:	2aff      	cmp	r2, #255	; 0xff
 8002c46:	d006      	beq.n	8002c56 <__eqsf2+0x2a>
 8002c48:	2cff      	cmp	r4, #255	; 0xff
 8002c4a:	d003      	beq.n	8002c54 <__eqsf2+0x28>
 8002c4c:	42a2      	cmp	r2, r4
 8002c4e:	d101      	bne.n	8002c54 <__eqsf2+0x28>
 8002c50:	42b5      	cmp	r5, r6
 8002c52:	d006      	beq.n	8002c62 <__eqsf2+0x36>
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
 8002c56:	2d00      	cmp	r5, #0
 8002c58:	d1fc      	bne.n	8002c54 <__eqsf2+0x28>
 8002c5a:	2cff      	cmp	r4, #255	; 0xff
 8002c5c:	d1fa      	bne.n	8002c54 <__eqsf2+0x28>
 8002c5e:	2e00      	cmp	r6, #0
 8002c60:	d1f8      	bne.n	8002c54 <__eqsf2+0x28>
 8002c62:	428b      	cmp	r3, r1
 8002c64:	d006      	beq.n	8002c74 <__eqsf2+0x48>
 8002c66:	2001      	movs	r0, #1
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	d1f3      	bne.n	8002c54 <__eqsf2+0x28>
 8002c6c:	0028      	movs	r0, r5
 8002c6e:	1e43      	subs	r3, r0, #1
 8002c70:	4198      	sbcs	r0, r3
 8002c72:	e7ef      	b.n	8002c54 <__eqsf2+0x28>
 8002c74:	2000      	movs	r0, #0
 8002c76:	e7ed      	b.n	8002c54 <__eqsf2+0x28>

08002c78 <__gesf2>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	0042      	lsls	r2, r0, #1
 8002c7c:	0245      	lsls	r5, r0, #9
 8002c7e:	024e      	lsls	r6, r1, #9
 8002c80:	004c      	lsls	r4, r1, #1
 8002c82:	0fc3      	lsrs	r3, r0, #31
 8002c84:	0a6d      	lsrs	r5, r5, #9
 8002c86:	0e12      	lsrs	r2, r2, #24
 8002c88:	0a76      	lsrs	r6, r6, #9
 8002c8a:	0e24      	lsrs	r4, r4, #24
 8002c8c:	0fc8      	lsrs	r0, r1, #31
 8002c8e:	2aff      	cmp	r2, #255	; 0xff
 8002c90:	d01b      	beq.n	8002cca <__gesf2+0x52>
 8002c92:	2cff      	cmp	r4, #255	; 0xff
 8002c94:	d00e      	beq.n	8002cb4 <__gesf2+0x3c>
 8002c96:	2a00      	cmp	r2, #0
 8002c98:	d11b      	bne.n	8002cd2 <__gesf2+0x5a>
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d101      	bne.n	8002ca2 <__gesf2+0x2a>
 8002c9e:	2e00      	cmp	r6, #0
 8002ca0:	d01c      	beq.n	8002cdc <__gesf2+0x64>
 8002ca2:	2d00      	cmp	r5, #0
 8002ca4:	d00c      	beq.n	8002cc0 <__gesf2+0x48>
 8002ca6:	4283      	cmp	r3, r0
 8002ca8:	d01c      	beq.n	8002ce4 <__gesf2+0x6c>
 8002caa:	2102      	movs	r1, #2
 8002cac:	1e58      	subs	r0, r3, #1
 8002cae:	4008      	ands	r0, r1
 8002cb0:	3801      	subs	r0, #1
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
 8002cb4:	2e00      	cmp	r6, #0
 8002cb6:	d122      	bne.n	8002cfe <__gesf2+0x86>
 8002cb8:	2a00      	cmp	r2, #0
 8002cba:	d1f4      	bne.n	8002ca6 <__gesf2+0x2e>
 8002cbc:	2d00      	cmp	r5, #0
 8002cbe:	d1f2      	bne.n	8002ca6 <__gesf2+0x2e>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d1f6      	bne.n	8002cb2 <__gesf2+0x3a>
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	4240      	negs	r0, r0
 8002cc8:	e7f3      	b.n	8002cb2 <__gesf2+0x3a>
 8002cca:	2d00      	cmp	r5, #0
 8002ccc:	d117      	bne.n	8002cfe <__gesf2+0x86>
 8002cce:	2cff      	cmp	r4, #255	; 0xff
 8002cd0:	d0f0      	beq.n	8002cb4 <__gesf2+0x3c>
 8002cd2:	2c00      	cmp	r4, #0
 8002cd4:	d1e7      	bne.n	8002ca6 <__gesf2+0x2e>
 8002cd6:	2e00      	cmp	r6, #0
 8002cd8:	d1e5      	bne.n	8002ca6 <__gesf2+0x2e>
 8002cda:	e7e6      	b.n	8002caa <__gesf2+0x32>
 8002cdc:	2000      	movs	r0, #0
 8002cde:	2d00      	cmp	r5, #0
 8002ce0:	d0e7      	beq.n	8002cb2 <__gesf2+0x3a>
 8002ce2:	e7e2      	b.n	8002caa <__gesf2+0x32>
 8002ce4:	42a2      	cmp	r2, r4
 8002ce6:	dc05      	bgt.n	8002cf4 <__gesf2+0x7c>
 8002ce8:	dbea      	blt.n	8002cc0 <__gesf2+0x48>
 8002cea:	42b5      	cmp	r5, r6
 8002cec:	d802      	bhi.n	8002cf4 <__gesf2+0x7c>
 8002cee:	d3e7      	bcc.n	8002cc0 <__gesf2+0x48>
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7de      	b.n	8002cb2 <__gesf2+0x3a>
 8002cf4:	4243      	negs	r3, r0
 8002cf6:	4158      	adcs	r0, r3
 8002cf8:	0040      	lsls	r0, r0, #1
 8002cfa:	3801      	subs	r0, #1
 8002cfc:	e7d9      	b.n	8002cb2 <__gesf2+0x3a>
 8002cfe:	2002      	movs	r0, #2
 8002d00:	4240      	negs	r0, r0
 8002d02:	e7d6      	b.n	8002cb2 <__gesf2+0x3a>

08002d04 <__lesf2>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	0042      	lsls	r2, r0, #1
 8002d08:	0245      	lsls	r5, r0, #9
 8002d0a:	024e      	lsls	r6, r1, #9
 8002d0c:	004c      	lsls	r4, r1, #1
 8002d0e:	0fc3      	lsrs	r3, r0, #31
 8002d10:	0a6d      	lsrs	r5, r5, #9
 8002d12:	0e12      	lsrs	r2, r2, #24
 8002d14:	0a76      	lsrs	r6, r6, #9
 8002d16:	0e24      	lsrs	r4, r4, #24
 8002d18:	0fc8      	lsrs	r0, r1, #31
 8002d1a:	2aff      	cmp	r2, #255	; 0xff
 8002d1c:	d00b      	beq.n	8002d36 <__lesf2+0x32>
 8002d1e:	2cff      	cmp	r4, #255	; 0xff
 8002d20:	d00d      	beq.n	8002d3e <__lesf2+0x3a>
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d11f      	bne.n	8002d66 <__lesf2+0x62>
 8002d26:	2c00      	cmp	r4, #0
 8002d28:	d116      	bne.n	8002d58 <__lesf2+0x54>
 8002d2a:	2e00      	cmp	r6, #0
 8002d2c:	d114      	bne.n	8002d58 <__lesf2+0x54>
 8002d2e:	2000      	movs	r0, #0
 8002d30:	2d00      	cmp	r5, #0
 8002d32:	d010      	beq.n	8002d56 <__lesf2+0x52>
 8002d34:	e009      	b.n	8002d4a <__lesf2+0x46>
 8002d36:	2d00      	cmp	r5, #0
 8002d38:	d10c      	bne.n	8002d54 <__lesf2+0x50>
 8002d3a:	2cff      	cmp	r4, #255	; 0xff
 8002d3c:	d113      	bne.n	8002d66 <__lesf2+0x62>
 8002d3e:	2e00      	cmp	r6, #0
 8002d40:	d108      	bne.n	8002d54 <__lesf2+0x50>
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d008      	beq.n	8002d58 <__lesf2+0x54>
 8002d46:	4283      	cmp	r3, r0
 8002d48:	d012      	beq.n	8002d70 <__lesf2+0x6c>
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	1e58      	subs	r0, r3, #1
 8002d4e:	4008      	ands	r0, r1
 8002d50:	3801      	subs	r0, #1
 8002d52:	e000      	b.n	8002d56 <__lesf2+0x52>
 8002d54:	2002      	movs	r0, #2
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	2d00      	cmp	r5, #0
 8002d5a:	d1f4      	bne.n	8002d46 <__lesf2+0x42>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d1fa      	bne.n	8002d56 <__lesf2+0x52>
 8002d60:	2001      	movs	r0, #1
 8002d62:	4240      	negs	r0, r0
 8002d64:	e7f7      	b.n	8002d56 <__lesf2+0x52>
 8002d66:	2c00      	cmp	r4, #0
 8002d68:	d1ed      	bne.n	8002d46 <__lesf2+0x42>
 8002d6a:	2e00      	cmp	r6, #0
 8002d6c:	d1eb      	bne.n	8002d46 <__lesf2+0x42>
 8002d6e:	e7ec      	b.n	8002d4a <__lesf2+0x46>
 8002d70:	42a2      	cmp	r2, r4
 8002d72:	dc05      	bgt.n	8002d80 <__lesf2+0x7c>
 8002d74:	dbf2      	blt.n	8002d5c <__lesf2+0x58>
 8002d76:	42b5      	cmp	r5, r6
 8002d78:	d802      	bhi.n	8002d80 <__lesf2+0x7c>
 8002d7a:	d3ef      	bcc.n	8002d5c <__lesf2+0x58>
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	e7ea      	b.n	8002d56 <__lesf2+0x52>
 8002d80:	4243      	negs	r3, r0
 8002d82:	4158      	adcs	r0, r3
 8002d84:	0040      	lsls	r0, r0, #1
 8002d86:	3801      	subs	r0, #1
 8002d88:	e7e5      	b.n	8002d56 <__lesf2+0x52>
 8002d8a:	46c0      	nop			; (mov r8, r8)

08002d8c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8002d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8002d94:	230e      	movs	r3, #14
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002d9c:	250f      	movs	r5, #15
 8002d9e:	197c      	adds	r4, r7, r5
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f001 fd32 	bl	800480c <null_ptr_check>
 8002da8:	0003      	movs	r3, r0
 8002daa:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8002dac:	197b      	adds	r3, r7, r5
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d140      	bne.n	8002e38 <bmp3_init+0xac>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7a1b      	ldrb	r3, [r3, #8]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d003      	beq.n	8002dc6 <bmp3_init+0x3a>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	729a      	strb	r2, [r3, #10]
 8002dc4:	e002      	b.n	8002dcc <bmp3_init+0x40>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8002dcc:	260f      	movs	r6, #15
 8002dce:	19bc      	adds	r4, r7, r6
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	250e      	movs	r5, #14
 8002dd4:	1979      	adds	r1, r7, r5
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f000 f835 	bl	8002e48 <bmp3_get_regs>
 8002dde:	0003      	movs	r3, r0
 8002de0:	7023      	strb	r3, [r4, #0]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8002de2:	19bb      	adds	r3, r7, r6
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d125      	bne.n	8002e38 <bmp3_init+0xac>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8002dec:	197b      	adds	r3, r7, r5
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b50      	cmp	r3, #80	; 0x50
 8002df2:	d003      	beq.n	8002dfc <bmp3_init+0x70>
 8002df4:	197b      	adds	r3, r7, r5
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b60      	cmp	r3, #96	; 0x60
 8002dfa:	d119      	bne.n	8002e30 <bmp3_init+0xa4>
            {
                dev->chip_id = chip_id;
 8002dfc:	230e      	movs	r3, #14
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8002e06:	250f      	movs	r5, #15
 8002e08:	197c      	adds	r4, r7, r5
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fa38 	bl	8003282 <bmp3_soft_reset>
 8002e12:	0003      	movs	r3, r0
 8002e14:	7023      	strb	r3, [r4, #0]
                if (rslt == BMP3_OK)
 8002e16:	197b      	adds	r3, r7, r5
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <bmp3_init+0xac>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8002e20:	197c      	adds	r4, r7, r5
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 fc47 	bl	80036b8 <get_calib_data>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	7023      	strb	r3, [r4, #0]
                if (rslt == BMP3_OK)
 8002e2e:	e003      	b.n	8002e38 <bmp3_init+0xac>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8002e30:	230f      	movs	r3, #15
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	22f9      	movs	r2, #249	; 0xf9
 8002e36:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8002e38:	230f      	movs	r3, #15
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b25b      	sxtb	r3, r3
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b005      	add	sp, #20
 8002e46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e48 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	b091      	sub	sp, #68	; 0x44
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6239      	str	r1, [r7, #32]
 8002e50:	61fa      	str	r2, [r7, #28]
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	230f      	movs	r3, #15
 8002e56:	2218      	movs	r2, #24
 8002e58:	189b      	adds	r3, r3, r2
 8002e5a:	19db      	adds	r3, r3, r7
 8002e5c:	1c02      	adds	r2, r0, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002e60:	2223      	movs	r2, #35	; 0x23
 8002e62:	2318      	movs	r3, #24
 8002e64:	18d3      	adds	r3, r2, r3
 8002e66:	19de      	adds	r6, r3, r7
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f001 fcce 	bl	800480c <null_ptr_check>
 8002e70:	0003      	movs	r3, r0
 8002e72:	7033      	strb	r3, [r6, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8002e74:	2223      	movs	r2, #35	; 0x23
 8002e76:	2318      	movs	r3, #24
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	19db      	adds	r3, r3, r7
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d000      	beq.n	8002e86 <bmp3_get_regs+0x3e>
 8002e84:	e090      	b.n	8002fa8 <bmp3_get_regs+0x160>
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d100      	bne.n	8002e8e <bmp3_get_regs+0x46>
 8002e8c:	e08c      	b.n	8002fa8 <bmp3_get_regs+0x160>
    {
 8002e8e:	466b      	mov	r3, sp
 8002e90:	001e      	movs	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	7a9b      	ldrb	r3, [r3, #10]
 8002e96:	001a      	movs	r2, r3
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t temp_buff[len + dev->dummy_byte];
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	7a9b      	ldrb	r3, [r3, #10]
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	18d3      	adds	r3, r2, r3
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	633a      	str	r2, [r7, #48]	; 0x30
 8002eae:	001c      	movs	r4, r3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	0015      	movs	r5, r2
 8002eb4:	0020      	movs	r0, r4
 8002eb6:	0029      	movs	r1, r5
 8002eb8:	0002      	movs	r2, r0
 8002eba:	0f52      	lsrs	r2, r2, #29
 8002ebc:	000c      	movs	r4, r1
 8002ebe:	00e4      	lsls	r4, r4, #3
 8002ec0:	617c      	str	r4, [r7, #20]
 8002ec2:	697c      	ldr	r4, [r7, #20]
 8002ec4:	4314      	orrs	r4, r2
 8002ec6:	617c      	str	r4, [r7, #20]
 8002ec8:	0002      	movs	r2, r0
 8002eca:	00d2      	lsls	r2, r2, #3
 8002ecc:	613a      	str	r2, [r7, #16]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	6838      	ldr	r0, [r7, #0]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	0002      	movs	r2, r0
 8002eda:	0f52      	lsrs	r2, r2, #29
 8002edc:	000c      	movs	r4, r1
 8002ede:	00e4      	lsls	r4, r4, #3
 8002ee0:	60fc      	str	r4, [r7, #12]
 8002ee2:	68fc      	ldr	r4, [r7, #12]
 8002ee4:	4314      	orrs	r4, r2
 8002ee6:	60fc      	str	r4, [r7, #12]
 8002ee8:	0002      	movs	r2, r0
 8002eea:	00d2      	lsls	r2, r2, #3
 8002eec:	60ba      	str	r2, [r7, #8]
 8002eee:	3307      	adds	r3, #7
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	466a      	mov	r2, sp
 8002ef6:	1ad2      	subs	r2, r2, r3
 8002ef8:	4695      	mov	sp, r2
 8002efa:	466b      	mov	r3, sp
 8002efc:	3300      	adds	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	7a1b      	ldrb	r3, [r3, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d031      	beq.n	8002f6c <bmp3_get_regs+0x124>
        {
            reg_addr = reg_addr | 0x80;
 8002f08:	200f      	movs	r0, #15
 8002f0a:	2318      	movs	r3, #24
 8002f0c:	18c3      	adds	r3, r0, r3
 8002f0e:	19db      	adds	r3, r3, r7
 8002f10:	2218      	movs	r2, #24
 8002f12:	1882      	adds	r2, r0, r2
 8002f14:	19d2      	adds	r2, r2, r7
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	4249      	negs	r1, r1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	701a      	strb	r2, [r3, #0]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	68dc      	ldr	r4, [r3, #12]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	685d      	ldr	r5, [r3, #4]
 8002f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f2c:	2318      	movs	r3, #24
 8002f2e:	18c3      	adds	r3, r0, r3
 8002f30:	19db      	adds	r3, r3, r7
 8002f32:	7818      	ldrb	r0, [r3, #0]
 8002f34:	002b      	movs	r3, r5
 8002f36:	47a0      	blx	r4
 8002f38:	0003      	movs	r3, r0
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f44:	e00d      	b.n	8002f62 <bmp3_get_regs+0x11a>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	7a9b      	ldrb	r3, [r3, #10]
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4e:	18d2      	adds	r2, r2, r3
 8002f50:	6a39      	ldr	r1, [r7, #32]
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	18cb      	adds	r3, r1, r3
 8002f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f58:	5c8a      	ldrb	r2, [r1, r2]
 8002f5a:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8002f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5e:	3301      	adds	r3, #1
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3ed      	bcc.n	8002f46 <bmp3_get_regs+0xfe>
 8002f6a:	e010      	b.n	8002f8e <bmp3_get_regs+0x146>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	68dc      	ldr	r4, [r3, #12]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	685d      	ldr	r5, [r3, #4]
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	6a39      	ldr	r1, [r7, #32]
 8002f78:	230f      	movs	r3, #15
 8002f7a:	2018      	movs	r0, #24
 8002f7c:	181b      	adds	r3, r3, r0
 8002f7e:	19db      	adds	r3, r3, r7
 8002f80:	7818      	ldrb	r0, [r3, #0]
 8002f82:	002b      	movs	r3, r5
 8002f84:	47a0      	blx	r4
 8002f86:	0003      	movs	r3, r0
 8002f88:	001a      	movs	r2, r3
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	7a5b      	ldrb	r3, [r3, #9]
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <bmp3_get_regs+0x15c>
        {
            rslt = BMP3_E_COMM_FAIL;
 8002f98:	2323      	movs	r3, #35	; 0x23
 8002f9a:	2218      	movs	r2, #24
 8002f9c:	189b      	adds	r3, r3, r2
 8002f9e:	19db      	adds	r3, r3, r7
 8002fa0:	22fe      	movs	r2, #254	; 0xfe
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	46b5      	mov	sp, r6
    {
 8002fa6:	e005      	b.n	8002fb4 <bmp3_get_regs+0x16c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8002fa8:	2323      	movs	r3, #35	; 0x23
 8002faa:	2218      	movs	r2, #24
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	19db      	adds	r3, r3, r7
 8002fb0:	22ff      	movs	r2, #255	; 0xff
 8002fb2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002fb4:	2323      	movs	r3, #35	; 0x23
 8002fb6:	2218      	movs	r2, #24
 8002fb8:	189b      	adds	r3, r3, r2
 8002fba:	19db      	adds	r3, r3, r7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b25b      	sxtb	r3, r3
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b011      	add	sp, #68	; 0x44
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fc8 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8002fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fca:	46c6      	mov	lr, r8
 8002fcc:	b500      	push	{lr}
 8002fce:	b08e      	sub	sp, #56	; 0x38
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8002fd4:	6239      	str	r1, [r7, #32]
 8002fd6:	61fa      	str	r2, [r7, #28]
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	466b      	mov	r3, sp
 8002fdc:	4698      	mov	r8, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	3a01      	subs	r2, #1
 8002fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	60fa      	str	r2, [r7, #12]
 8002fee:	68b8      	ldr	r0, [r7, #8]
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	0f52      	lsrs	r2, r2, #29
 8002ff6:	000e      	movs	r6, r1
 8002ff8:	00f6      	lsls	r6, r6, #3
 8002ffa:	617e      	str	r6, [r7, #20]
 8002ffc:	697e      	ldr	r6, [r7, #20]
 8002ffe:	4316      	orrs	r6, r2
 8003000:	617e      	str	r6, [r7, #20]
 8003002:	0002      	movs	r2, r0
 8003004:	00d2      	lsls	r2, r2, #3
 8003006:	613a      	str	r2, [r7, #16]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	6838      	ldr	r0, [r7, #0]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	0002      	movs	r2, r0
 8003014:	0f52      	lsrs	r2, r2, #29
 8003016:	000e      	movs	r6, r1
 8003018:	00f5      	lsls	r5, r6, #3
 800301a:	4315      	orrs	r5, r2
 800301c:	0002      	movs	r2, r0
 800301e:	00d4      	lsls	r4, r2, #3
 8003020:	3307      	adds	r3, #7
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	466a      	mov	r2, sp
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	469d      	mov	sp, r3
 800302c:	466b      	mov	r3, sp
 800302e:	3300      	adds	r3, #0
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003032:	251b      	movs	r5, #27
 8003034:	2618      	movs	r6, #24
 8003036:	19ab      	adds	r3, r5, r6
 8003038:	19dc      	adds	r4, r3, r7
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	0018      	movs	r0, r3
 800303e:	f001 fbe5 	bl	800480c <null_ptr_check>
 8003042:	0003      	movs	r3, r0
 8003044:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003046:	0031      	movs	r1, r6
 8003048:	186b      	adds	r3, r5, r1
 800304a:	19db      	adds	r3, r3, r7
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b25b      	sxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d165      	bne.n	8003120 <bmp3_set_regs+0x158>
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d062      	beq.n	8003120 <bmp3_set_regs+0x158>
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05f      	beq.n	8003120 <bmp3_set_regs+0x158>
    {
        if (len != 0)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d055      	beq.n	8003112 <bmp3_set_regs+0x14a>
        {
            temp_buff[0] = reg_data[0];
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	7a1b      	ldrb	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d125      	bne.n	80030c2 <bmp3_set_regs+0xfa>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003076:	231a      	movs	r3, #26
 8003078:	185b      	adds	r3, r3, r1
 800307a:	19db      	adds	r3, r3, r7
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e017      	b.n	80030b2 <bmp3_set_regs+0xea>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003082:	201a      	movs	r0, #26
 8003084:	2418      	movs	r4, #24
 8003086:	1903      	adds	r3, r0, r4
 8003088:	19db      	adds	r3, r3, r7
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308e:	18d3      	adds	r3, r2, r3
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	1903      	adds	r3, r0, r4
 8003094:	19db      	adds	r3, r3, r7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800309a:	18cb      	adds	r3, r1, r3
 800309c:	217f      	movs	r1, #127	; 0x7f
 800309e:	400a      	ands	r2, r1
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80030a4:	1903      	adds	r3, r0, r4
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	1903      	adds	r3, r0, r4
 80030ac:	19db      	adds	r3, r3, r7
 80030ae:	3201      	adds	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	231a      	movs	r3, #26
 80030b4:	2218      	movs	r2, #24
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	19db      	adds	r3, r3, r7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d8df      	bhi.n	8003082 <bmp3_set_regs+0xba>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d909      	bls.n	80030dc <bmp3_set_regs+0x114>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	6a3a      	ldr	r2, [r7, #32]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030d0:	f000 fb1e 	bl	8003710 <interleave_reg_addr>
                temp_len = len * 2;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
 80030da:	e001      	b.n	80030e0 <bmp3_set_regs+0x118>
            }
            else
            {
                temp_len = len;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	691c      	ldr	r4, [r3, #16]
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	7818      	ldrb	r0, [r3, #0]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f0:	47a0      	blx	r4
 80030f2:	0003      	movs	r3, r0
 80030f4:	001a      	movs	r2, r3
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	7a5b      	ldrb	r3, [r3, #9]
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d014      	beq.n	800312e <bmp3_set_regs+0x166>
            {
                rslt = BMP3_E_COMM_FAIL;
 8003104:	231b      	movs	r3, #27
 8003106:	2218      	movs	r2, #24
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19db      	adds	r3, r3, r7
 800310c:	22fe      	movs	r2, #254	; 0xfe
 800310e:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8003110:	e00d      	b.n	800312e <bmp3_set_regs+0x166>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8003112:	231b      	movs	r3, #27
 8003114:	2218      	movs	r2, #24
 8003116:	189b      	adds	r3, r3, r2
 8003118:	19db      	adds	r3, r3, r7
 800311a:	22fa      	movs	r2, #250	; 0xfa
 800311c:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 800311e:	e006      	b.n	800312e <bmp3_set_regs+0x166>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003120:	231b      	movs	r3, #27
 8003122:	2218      	movs	r2, #24
 8003124:	189b      	adds	r3, r3, r2
 8003126:	19db      	adds	r3, r3, r7
 8003128:	22ff      	movs	r2, #255	; 0xff
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e000      	b.n	8003130 <bmp3_set_regs+0x168>
        if (len != 0)
 800312e:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8003130:	231b      	movs	r3, #27
 8003132:	2218      	movs	r2, #24
 8003134:	189b      	adds	r3, r3, r2
 8003136:	19db      	adds	r3, r3, r7
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	b25b      	sxtb	r3, r3
 800313c:	46c5      	mov	sp, r8
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b00e      	add	sp, #56	; 0x38
 8003144:	bc80      	pop	{r7}
 8003146:	46b8      	mov	r8, r7
 8003148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800314a <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800314a:	b590      	push	{r4, r7, lr}
 800314c:	b087      	sub	sp, #28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8003156:	2417      	movs	r4, #23
 8003158:	193b      	adds	r3, r7, r4
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]

    if (settings != NULL)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d047      	beq.n	80031f4 <bmp3_set_sensor_settings+0xaa>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	0019      	movs	r1, r3
 8003168:	2006      	movs	r0, #6
 800316a:	f001 fb33 	bl	80047d4 <are_settings_changed>
 800316e:	1e03      	subs	r3, r0, #0
 8003170:	d008      	beq.n	8003184 <bmp3_set_sensor_settings+0x3a>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8003172:	193c      	adds	r4, r7, r4
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	0018      	movs	r0, r3
 800317c:	f000 fb34 	bl	80037e8 <set_pwr_ctrl_settings>
 8003180:	0003      	movs	r3, r0
 8003182:	7023      	strb	r3, [r4, #0]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	0019      	movs	r1, r3
 8003188:	20f0      	movs	r0, #240	; 0xf0
 800318a:	f001 fb23 	bl	80047d4 <are_settings_changed>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d009      	beq.n	80031a6 <bmp3_set_sensor_settings+0x5c>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8003192:	2317      	movs	r3, #23
 8003194:	18fc      	adds	r4, r7, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	0018      	movs	r0, r3
 800319e:	f000 fb7f 	bl	80038a0 <set_odr_filter_settings>
 80031a2:	0003      	movs	r3, r0
 80031a4:	7023      	strb	r3, [r4, #0]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	23e1      	movs	r3, #225	; 0xe1
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	0011      	movs	r1, r2
 80031ae:	0018      	movs	r0, r3
 80031b0:	f001 fb10 	bl	80047d4 <are_settings_changed>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d009      	beq.n	80031cc <bmp3_set_sensor_settings+0x82>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80031b8:	2317      	movs	r3, #23
 80031ba:	18fc      	adds	r4, r7, r3
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 fbea 	bl	800399c <set_int_ctrl_settings>
 80031c8:	0003      	movs	r3, r0
 80031ca:	7023      	strb	r3, [r4, #0]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	23c0      	movs	r3, #192	; 0xc0
 80031d0:	015b      	lsls	r3, r3, #5
 80031d2:	0011      	movs	r1, r2
 80031d4:	0018      	movs	r0, r3
 80031d6:	f001 fafd 	bl	80047d4 <are_settings_changed>
 80031da:	1e03      	subs	r3, r0, #0
 80031dc:	d00e      	beq.n	80031fc <bmp3_set_sensor_settings+0xb2>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80031de:	2317      	movs	r3, #23
 80031e0:	18fc      	adds	r4, r7, r3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 fc72 	bl	8003ad2 <set_advance_settings>
 80031ee:	0003      	movs	r3, r0
 80031f0:	7023      	strb	r3, [r4, #0]
 80031f2:	e003      	b.n	80031fc <bmp3_set_sensor_settings+0xb2>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80031f4:	2317      	movs	r3, #23
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	22ff      	movs	r2, #255	; 0xff
 80031fa:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80031fc:	2317      	movs	r3, #23
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b25b      	sxtb	r3, r3
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b007      	add	sp, #28
 800320a:	bd90      	pop	{r4, r7, pc}

0800320c <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800320c:	b5b0      	push	{r4, r5, r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d026      	beq.n	800326a <bmp3_get_status+0x5e>
    {
        rslt = get_sensor_status(status, dev);
 800321c:	250f      	movs	r5, #15
 800321e:	197c      	adds	r4, r7, r5
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0011      	movs	r1, r2
 8003226:	0018      	movs	r0, r3
 8003228:	f001 fb18 	bl	800485c <get_sensor_status>
 800322c:	0003      	movs	r3, r0
 800322e:	7023      	strb	r3, [r4, #0]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8003230:	197b      	adds	r3, r7, r5
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b25b      	sxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11b      	bne.n	8003272 <bmp3_get_status+0x66>
        {
            rslt = get_int_status(status, dev);
 800323a:	197c      	adds	r4, r7, r5
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f001 fb60 	bl	8004908 <get_int_status>
 8003248:	0003      	movs	r3, r0
 800324a:	7023      	strb	r3, [r4, #0]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 800324c:	197b      	adds	r3, r7, r5
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b25b      	sxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10d      	bne.n	8003272 <bmp3_get_status+0x66>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8003256:	197c      	adds	r4, r7, r5
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f001 fb89 	bl	8004976 <get_err_status>
 8003264:	0003      	movs	r3, r0
 8003266:	7023      	strb	r3, [r4, #0]
 8003268:	e003      	b.n	8003272 <bmp3_get_status+0x66>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800326a:	230f      	movs	r3, #15
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	22ff      	movs	r2, #255	; 0xff
 8003270:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003272:	230f      	movs	r3, #15
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b25b      	sxtb	r3, r3
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bdb0      	pop	{r4, r5, r7, pc}

08003282 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8003282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 800328a:	260e      	movs	r6, #14
 800328c:	19bb      	adds	r3, r7, r6
 800328e:	227e      	movs	r2, #126	; 0x7e
 8003290:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8003292:	230d      	movs	r3, #13
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	22b6      	movs	r2, #182	; 0xb6
 8003298:	701a      	strb	r2, [r3, #0]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800329a:	250f      	movs	r5, #15
 800329c:	197c      	adds	r4, r7, r5
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	210c      	movs	r1, #12
 80032a2:	1879      	adds	r1, r7, r1
 80032a4:	2201      	movs	r2, #1
 80032a6:	2003      	movs	r0, #3
 80032a8:	f7ff fdce 	bl	8002e48 <bmp3_get_regs>
 80032ac:	0003      	movs	r3, r0
 80032ae:	7023      	strb	r3, [r4, #0]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 80032b0:	210c      	movs	r1, #12
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	001a      	movs	r2, r3
 80032b8:	2310      	movs	r3, #16
 80032ba:	4013      	ands	r3, r2
 80032bc:	d034      	beq.n	8003328 <bmp3_soft_reset+0xa6>
 80032be:	197b      	adds	r3, r7, r5
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d12f      	bne.n	8003328 <bmp3_soft_reset+0xa6>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80032c8:	197c      	adds	r4, r7, r5
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	220d      	movs	r2, #13
 80032ce:	18b9      	adds	r1, r7, r2
 80032d0:	19b8      	adds	r0, r7, r6
 80032d2:	2201      	movs	r2, #1
 80032d4:	f7ff fe78 	bl	8002fc8 <bmp3_set_regs>
 80032d8:	0003      	movs	r3, r0
 80032da:	7023      	strb	r3, [r4, #0]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80032dc:	197b      	adds	r3, r7, r5
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d120      	bne.n	8003328 <bmp3_soft_reset+0xa6>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	23fa      	movs	r3, #250	; 0xfa
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	0018      	movs	r0, r3
 80032f4:	4790      	blx	r2

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 80032f6:	197c      	adds	r4, r7, r5
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	260b      	movs	r6, #11
 80032fc:	19b9      	adds	r1, r7, r6
 80032fe:	2201      	movs	r2, #1
 8003300:	2002      	movs	r0, #2
 8003302:	f7ff fda1 	bl	8002e48 <bmp3_get_regs>
 8003306:	0003      	movs	r3, r0
 8003308:	7023      	strb	r3, [r4, #0]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800330a:	19bb      	adds	r3, r7, r6
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	001a      	movs	r2, r3
 8003310:	237e      	movs	r3, #126	; 0x7e
 8003312:	4013      	ands	r3, r2
 8003314:	d104      	bne.n	8003320 <bmp3_soft_reset+0x9e>
 8003316:	197b      	adds	r3, r7, r5
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	b25b      	sxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <bmp3_soft_reset+0xa6>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	22fc      	movs	r2, #252	; 0xfc
 8003326:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8003328:	230f      	movs	r3, #15
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b25b      	sxtb	r3, r3
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b005      	add	sp, #20
 8003336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003338 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8003338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003342:	250f      	movs	r5, #15
 8003344:	197c      	adds	r4, r7, r5
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	0018      	movs	r0, r3
 800334a:	f001 fa5f 	bl	800480c <null_ptr_check>
 800334e:	0003      	movs	r3, r0
 8003350:	7023      	strb	r3, [r4, #0]

    if ((rslt == BMP3_OK) && (settings != NULL))
 8003352:	197b      	adds	r3, r7, r5
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b25b      	sxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d14d      	bne.n	80033f8 <bmp3_set_op_mode+0xc0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04a      	beq.n	80033f8 <bmp3_set_op_mode+0xc0>
    {
        uint8_t curr_mode = settings->op_mode;
 8003362:	230e      	movs	r3, #14
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	701a      	strb	r2, [r3, #0]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 800336c:	197c      	adds	r4, r7, r5
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	260d      	movs	r6, #13
 8003372:	19bb      	adds	r3, r7, r6
 8003374:	0011      	movs	r1, r2
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f84e 	bl	8003418 <bmp3_get_op_mode>
 800337c:	0003      	movs	r3, r0
 800337e:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 8003380:	19bb      	adds	r3, r7, r6
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <bmp3_set_op_mode+0x76>
 8003388:	197b      	adds	r3, r7, r5
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	b25b      	sxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <bmp3_set_op_mode+0x76>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8003392:	197c      	adds	r4, r7, r5
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 f939 	bl	800360e <put_device_to_sleep>
 800339c:	0003      	movs	r3, r0
 800339e:	7023      	strb	r3, [r4, #0]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	481a      	ldr	r0, [pc, #104]	; (8003414 <bmp3_set_op_mode+0xdc>)
 80033aa:	0019      	movs	r1, r3
 80033ac:	4790      	blx	r2
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 80033ae:	220f      	movs	r2, #15
 80033b0:	18bb      	adds	r3, r7, r2
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d123      	bne.n	8003402 <bmp3_set_op_mode+0xca>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 80033ba:	230e      	movs	r3, #14
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d109      	bne.n	80033d8 <bmp3_set_op_mode+0xa0>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 80033c4:	18bc      	adds	r4, r7, r2
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0011      	movs	r1, r2
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 f896 	bl	80034fe <set_normal_mode>
 80033d2:	0003      	movs	r3, r0
 80033d4:	7023      	strb	r3, [r4, #0]
    {
 80033d6:	e014      	b.n	8003402 <bmp3_set_op_mode+0xca>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 80033d8:	230e      	movs	r3, #14
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10f      	bne.n	8003402 <bmp3_set_op_mode+0xca>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 80033e2:	230f      	movs	r3, #15
 80033e4:	18fc      	adds	r4, r7, r3
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f000 f8c9 	bl	8003584 <write_power_mode>
 80033f2:	0003      	movs	r3, r0
 80033f4:	7023      	strb	r3, [r4, #0]
    {
 80033f6:	e004      	b.n	8003402 <bmp3_set_op_mode+0xca>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80033f8:	230f      	movs	r3, #15
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	22ff      	movs	r2, #255	; 0xff
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e000      	b.n	8003404 <bmp3_set_op_mode+0xcc>
    {
 8003402:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8003404:	230f      	movs	r3, #15
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b25b      	sxtb	r3, r3
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b005      	add	sp, #20
 8003412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003414:	00001388 	.word	0x00001388

08003418 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <bmp3_get_op_mode+0x38>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003428:	230f      	movs	r3, #15
 800342a:	18fc      	adds	r4, r7, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	201b      	movs	r0, #27
 8003434:	f7ff fd08 	bl	8002e48 <bmp3_get_regs>
 8003438:	0003      	movs	r3, r0
 800343a:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	111b      	asrs	r3, r3, #4
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2203      	movs	r2, #3
 8003446:	4013      	ands	r3, r2
 8003448:	b2da      	uxtb	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e003      	b.n	8003458 <bmp3_get_op_mode+0x40>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003450:	230f      	movs	r3, #15
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	22ff      	movs	r2, #255	; 0xff
 8003456:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b25b      	sxtb	r3, r3
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b005      	add	sp, #20
 8003466:	bd90      	pop	{r4, r7, pc}

08003468 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8003468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346a:	b08b      	sub	sp, #44	; 0x2c
 800346c:	af00      	add	r7, sp, #0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	230f      	movs	r3, #15
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	1c02      	adds	r2, r0, #0
 8003478:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 800347a:	2520      	movs	r5, #32
 800347c:	197b      	adds	r3, r7, r5
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	2200      	movs	r2, #0
 8003484:	809a      	strh	r2, [r3, #4]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 8003486:	2610      	movs	r6, #16
 8003488:	19bb      	adds	r3, r7, r6
 800348a:	0018      	movs	r0, r3
 800348c:	2310      	movs	r3, #16
 800348e:	001a      	movs	r2, r3
 8003490:	2100      	movs	r1, #0
 8003492:	f005 fdfc 	bl	800908e <memset>

    if (comp_data != NULL)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d024      	beq.n	80034e6 <bmp3_get_sensor_data+0x7e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 800349c:	2427      	movs	r4, #39	; 0x27
 800349e:	193c      	adds	r4, r7, r4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1979      	adds	r1, r7, r5
 80034a4:	2206      	movs	r2, #6
 80034a6:	2004      	movs	r0, #4
 80034a8:	f7ff fcce 	bl	8002e48 <bmp3_get_regs>
 80034ac:	0003      	movs	r3, r0
 80034ae:	7023      	strb	r3, [r4, #0]

        if (rslt == BMP3_OK)
 80034b0:	2427      	movs	r4, #39	; 0x27
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d118      	bne.n	80034ee <bmp3_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80034bc:	19ba      	adds	r2, r7, r6
 80034be:	197b      	adds	r3, r7, r5
 80034c0:	0011      	movs	r1, r2
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 fd21 	bl	8003f0a <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	001d      	movs	r5, r3
 80034cc:	3518      	adds	r5, #24
 80034ce:	193c      	adds	r4, r7, r4
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	19b9      	adds	r1, r7, r6
 80034d4:	230f      	movs	r3, #15
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	7818      	ldrb	r0, [r3, #0]
 80034da:	002b      	movs	r3, r5
 80034dc:	f000 fd4f 	bl	8003f7e <compensate_data>
 80034e0:	0003      	movs	r3, r0
 80034e2:	7023      	strb	r3, [r4, #0]
 80034e4:	e003      	b.n	80034ee <bmp3_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80034e6:	2327      	movs	r3, #39	; 0x27
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80034ee:	2327      	movs	r3, #39	; 0x27
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b25b      	sxtb	r3, r3
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b00b      	add	sp, #44	; 0x2c
 80034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034fe <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80034fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8003508:	250f      	movs	r5, #15
 800350a:	197c      	adds	r4, r7, r5
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0011      	movs	r1, r2
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f8ad 	bl	8003672 <validate_normal_mode_settings>
 8003518:	0003      	movs	r3, r0
 800351a:	7023      	strb	r3, [r4, #0]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 800351c:	197b      	adds	r3, r7, r5
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b25b      	sxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d126      	bne.n	8003574 <set_normal_mode+0x76>
    {
        rslt = write_power_mode(settings, dev);
 8003526:	197c      	adds	r4, r7, r5
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0011      	movs	r1, r2
 800352e:	0018      	movs	r0, r3
 8003530:	f000 f828 	bl	8003584 <write_power_mode>
 8003534:	0003      	movs	r3, r0
 8003536:	7023      	strb	r3, [r4, #0]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003538:	197b      	adds	r3, r7, r5
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b25b      	sxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <set_normal_mode+0x76>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8003542:	197c      	adds	r4, r7, r5
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	260e      	movs	r6, #14
 8003548:	19b9      	adds	r1, r7, r6
 800354a:	2201      	movs	r2, #1
 800354c:	2002      	movs	r0, #2
 800354e:	f7ff fc7b 	bl	8002e48 <bmp3_get_regs>
 8003552:	0003      	movs	r3, r0
 8003554:	7023      	strb	r3, [r4, #0]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8003556:	0029      	movs	r1, r5
 8003558:	187b      	adds	r3, r7, r1
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b25b      	sxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <set_normal_mode+0x76>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8003562:	19bb      	adds	r3, r7, r6
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	001a      	movs	r2, r3
 8003568:	2304      	movs	r3, #4
 800356a:	4013      	ands	r3, r2
 800356c:	d002      	beq.n	8003574 <set_normal_mode+0x76>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 800356e:	187b      	adds	r3, r7, r1
 8003570:	22fb      	movs	r2, #251	; 0xfb
 8003572:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 8003574:	230f      	movs	r3, #15
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b25b      	sxtb	r3, r3
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b005      	add	sp, #20
 8003582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003584 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8003584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800358e:	260d      	movs	r6, #13
 8003590:	19bb      	adds	r3, r7, r6
 8003592:	221b      	movs	r2, #27
 8003594:	701a      	strb	r2, [r3, #0]
    uint8_t op_mode = settings->op_mode;
 8003596:	230e      	movs	r3, #14
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	701a      	strb	r2, [r3, #0]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80035a0:	19bb      	adds	r3, r7, r6
 80035a2:	7818      	ldrb	r0, [r3, #0]
 80035a4:	240f      	movs	r4, #15
 80035a6:	193c      	adds	r4, r7, r4
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	250c      	movs	r5, #12
 80035ac:	1979      	adds	r1, r7, r5
 80035ae:	2201      	movs	r2, #1
 80035b0:	f7ff fc4a 	bl	8002e48 <bmp3_get_regs>
 80035b4:	0003      	movs	r3, r0
 80035b6:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80035b8:	240f      	movs	r4, #15
 80035ba:	193b      	adds	r3, r7, r4
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11c      	bne.n	80035fe <write_power_mode+0x7a>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80035c4:	0028      	movs	r0, r5
 80035c6:	183b      	adds	r3, r7, r0
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	2230      	movs	r2, #48	; 0x30
 80035ce:	4393      	bics	r3, r2
 80035d0:	b25a      	sxtb	r2, r3
 80035d2:	230e      	movs	r3, #14
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	2130      	movs	r1, #48	; 0x30
 80035de:	400b      	ands	r3, r1
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	183b      	adds	r3, r7, r0
 80035ea:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80035ec:	193c      	adds	r4, r7, r4
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1839      	adds	r1, r7, r0
 80035f2:	19b8      	adds	r0, r7, r6
 80035f4:	2201      	movs	r2, #1
 80035f6:	f7ff fce7 	bl	8002fc8 <bmp3_set_regs>
 80035fa:	0003      	movs	r3, r0
 80035fc:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80035fe:	230f      	movs	r3, #15
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b25b      	sxtb	r3, r3
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b005      	add	sp, #20
 800360c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800360e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800360e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003616:	230e      	movs	r3, #14
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	221b      	movs	r2, #27
 800361c:	701a      	strb	r2, [r3, #0]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 800361e:	260f      	movs	r6, #15
 8003620:	19bc      	adds	r4, r7, r6
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	250d      	movs	r5, #13
 8003626:	1979      	adds	r1, r7, r5
 8003628:	2201      	movs	r2, #1
 800362a:	201b      	movs	r0, #27
 800362c:	f7ff fc0c 	bl	8002e48 <bmp3_get_regs>
 8003630:	0003      	movs	r3, r0
 8003632:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 8003634:	0031      	movs	r1, r6
 8003636:	187b      	adds	r3, r7, r1
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b25b      	sxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d110      	bne.n	8003662 <put_device_to_sleep+0x54>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8003640:	197b      	adds	r3, r7, r5
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2230      	movs	r2, #48	; 0x30
 8003646:	4393      	bics	r3, r2
 8003648:	b2da      	uxtb	r2, r3
 800364a:	197b      	adds	r3, r7, r5
 800364c:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800364e:	187c      	adds	r4, r7, r1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	1979      	adds	r1, r7, r5
 8003654:	220e      	movs	r2, #14
 8003656:	18b8      	adds	r0, r7, r2
 8003658:	2201      	movs	r2, #1
 800365a:	f7ff fcb5 	bl	8002fc8 <bmp3_set_regs>
 800365e:	0003      	movs	r3, r0
 8003660:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003662:	230f      	movs	r3, #15
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b25b      	sxtb	r3, r3
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b005      	add	sp, #20
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003672 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8003672:	b5b0      	push	{r4, r5, r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 800367c:	250f      	movs	r5, #15
 800367e:	197c      	adds	r4, r7, r5
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0011      	movs	r1, r2
 8003686:	0018      	movs	r0, r3
 8003688:	f000 fa8e 	bl	8003ba8 <get_odr_filter_settings>
 800368c:	0003      	movs	r3, r0
 800368e:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 8003690:	197b      	adds	r3, r7, r5
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b25b      	sxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <validate_normal_mode_settings+0x36>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800369a:	197c      	adds	r4, r7, r5
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 faa0 	bl	8003be4 <validate_osr_and_odr_settings>
 80036a4:	0003      	movs	r3, r0
 80036a6:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80036a8:	230f      	movs	r3, #15
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	b25b      	sxtb	r3, r3
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b004      	add	sp, #16
 80036b6:	bdb0      	pop	{r4, r5, r7, pc}

080036b8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 80036b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 80036c0:	261f      	movs	r6, #31
 80036c2:	19bb      	adds	r3, r7, r6
 80036c4:	2231      	movs	r2, #49	; 0x31
 80036c6:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 80036c8:	2508      	movs	r5, #8
 80036ca:	197b      	adds	r3, r7, r5
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2211      	movs	r2, #17
 80036d4:	2100      	movs	r1, #0
 80036d6:	0018      	movs	r0, r3
 80036d8:	f005 fcd9 	bl	800908e <memset>

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80036dc:	231e      	movs	r3, #30
 80036de:	18fc      	adds	r4, r7, r3
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	1979      	adds	r1, r7, r5
 80036e4:	19bb      	adds	r3, r7, r6
 80036e6:	7818      	ldrb	r0, [r3, #0]
 80036e8:	0013      	movs	r3, r2
 80036ea:	2215      	movs	r2, #21
 80036ec:	f7ff fbac 	bl	8002e48 <bmp3_get_regs>
 80036f0:	0003      	movs	r3, r0
 80036f2:	7023      	strb	r3, [r4, #0]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	197b      	adds	r3, r7, r5
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fcc0 	bl	8004080 <parse_calib_data>

    return rslt;
 8003700:	231e      	movs	r3, #30
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	b25b      	sxtb	r3, r3
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b009      	add	sp, #36	; 0x24
 800370e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003710 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800371e:	2301      	movs	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e015      	b.n	8003750 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	18d2      	adds	r2, r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	3b01      	subs	r3, #1
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	18cb      	adds	r3, r1, r3
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	18d2      	adds	r2, r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	18cb      	adds	r3, r1, r3
 8003746:	7812      	ldrb	r2, [r2, #0]
 8003748:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d3e5      	bcc.n	8003724 <interleave_reg_addr+0x14>
    }
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b006      	add	sp, #24
 8003760:	bd80      	pop	{r7, pc}

08003762 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800376c:	210f      	movs	r1, #15
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8003774:	187b      	adds	r3, r7, r1
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2207      	movs	r2, #7
 8003780:	4013      	ands	r3, r2
 8003782:	b2da      	uxtb	r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8003788:	187b      	adds	r3, r7, r1
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	18d3      	adds	r3, r2, r3
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	10db      	asrs	r3, r3, #3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2207      	movs	r2, #7
 8003798:	4013      	ands	r3, r2
 800379a:	b2da      	uxtb	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	3201      	adds	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	221f      	movs	r2, #31
 80037b6:	4013      	ands	r3, r2
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	187a      	adds	r2, r7, r1
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	3202      	adds	r2, #2
 80037c6:	701a      	strb	r2, [r3, #0]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	18d3      	adds	r3, r2, r3
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	105b      	asrs	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2207      	movs	r2, #7
 80037d8:	4013      	ands	r3, r2
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	709a      	strb	r2, [r3, #2]
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b004      	add	sp, #16
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80037e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80037f4:	2116      	movs	r1, #22
 80037f6:	187b      	adds	r3, r7, r1
 80037f8:	221b      	movs	r2, #27
 80037fa:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	7818      	ldrb	r0, [r3, #0]
 8003800:	2617      	movs	r6, #23
 8003802:	19bc      	adds	r4, r7, r6
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2515      	movs	r5, #21
 8003808:	1979      	adds	r1, r7, r5
 800380a:	2201      	movs	r2, #1
 800380c:	f7ff fb1c 	bl	8002e48 <bmp3_get_regs>
 8003810:	0003      	movs	r3, r0
 8003812:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 8003814:	19bb      	adds	r3, r7, r6
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	b25b      	sxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d138      	bne.n	8003890 <set_pwr_ctrl_settings+0xa8>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	4013      	ands	r3, r2
 8003824:	d011      	beq.n	800384a <set_pwr_ctrl_settings+0x62>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 8003826:	0028      	movs	r0, r5
 8003828:	183b      	adds	r3, r7, r0
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b25b      	sxtb	r3, r3
 800382e:	2201      	movs	r2, #1
 8003830:	4393      	bics	r3, r2
 8003832:	b25a      	sxtb	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	785b      	ldrb	r3, [r3, #1]
 8003838:	b25b      	sxtb	r3, r3
 800383a:	2101      	movs	r1, #1
 800383c:	400b      	ands	r3, r1
 800383e:	b25b      	sxtb	r3, r3
 8003840:	4313      	orrs	r3, r2
 8003842:	b25b      	sxtb	r3, r3
 8003844:	b2da      	uxtb	r2, r3
 8003846:	183b      	adds	r3, r7, r0
 8003848:	701a      	strb	r2, [r3, #0]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2204      	movs	r2, #4
 800384e:	4013      	ands	r3, r2
 8003850:	d012      	beq.n	8003878 <set_pwr_ctrl_settings+0x90>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8003852:	2015      	movs	r0, #21
 8003854:	183b      	adds	r3, r7, r0
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b25b      	sxtb	r3, r3
 800385a:	2202      	movs	r2, #2
 800385c:	4393      	bics	r3, r2
 800385e:	b25a      	sxtb	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	789b      	ldrb	r3, [r3, #2]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	b25b      	sxtb	r3, r3
 8003868:	2102      	movs	r1, #2
 800386a:	400b      	ands	r3, r1
 800386c:	b25b      	sxtb	r3, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	b25b      	sxtb	r3, r3
 8003872:	b2da      	uxtb	r2, r3
 8003874:	183b      	adds	r3, r7, r0
 8003876:	701a      	strb	r2, [r3, #0]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003878:	2317      	movs	r3, #23
 800387a:	18fc      	adds	r4, r7, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2215      	movs	r2, #21
 8003880:	18b9      	adds	r1, r7, r2
 8003882:	2216      	movs	r2, #22
 8003884:	18b8      	adds	r0, r7, r2
 8003886:	2201      	movs	r2, #1
 8003888:	f7ff fb9e 	bl	8002fc8 <bmp3_set_regs>
 800388c:	0003      	movs	r3, r0
 800388e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003890:	2317      	movs	r3, #23
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	b25b      	sxtb	r3, r3
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b007      	add	sp, #28
 800389e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038a0 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b08b      	sub	sp, #44	; 0x2c
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 80038ac:	251c      	movs	r5, #28
 80038ae:	197b      	adds	r3, r7, r5
 80038b0:	4a39      	ldr	r2, [pc, #228]	; (8003998 <set_odr_filter_settings+0xf8>)
 80038b2:	8812      	ldrh	r2, [r2, #0]
 80038b4:	801a      	strh	r2, [r3, #0]
 80038b6:	2202      	movs	r2, #2
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 80038bc:	2617      	movs	r6, #23
 80038be:	19bb      	adds	r3, r7, r6
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80038c4:	231f      	movs	r3, #31
 80038c6:	18fc      	adds	r4, r7, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2218      	movs	r2, #24
 80038cc:	18b9      	adds	r1, r7, r2
 80038ce:	2204      	movs	r2, #4
 80038d0:	201c      	movs	r0, #28
 80038d2:	f7ff fab9 	bl	8002e48 <bmp3_get_regs>
 80038d6:	0003      	movs	r3, r0
 80038d8:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 80038da:	231f      	movs	r3, #31
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d150      	bne.n	8003988 <set_odr_filter_settings+0xe8>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	0019      	movs	r1, r3
 80038ea:	2030      	movs	r0, #48	; 0x30
 80038ec:	f000 ff72 	bl	80047d4 <are_settings_changed>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d009      	beq.n	8003908 <set_odr_filter_settings+0x68>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 80038f4:	19bc      	adds	r4, r7, r6
 80038f6:	2218      	movs	r2, #24
 80038f8:	18ba      	adds	r2, r7, r2
 80038fa:	1979      	adds	r1, r7, r5
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	0023      	movs	r3, r4
 8003904:	f000 fa36 	bl	8003d74 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	0019      	movs	r1, r3
 800390c:	2080      	movs	r0, #128	; 0x80
 800390e:	f000 ff61 	bl	80047d4 <are_settings_changed>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d008      	beq.n	8003928 <set_odr_filter_settings+0x88>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2217      	movs	r2, #23
 800391a:	18ba      	adds	r2, r7, r2
 800391c:	2118      	movs	r1, #24
 800391e:	1879      	adds	r1, r7, r1
 8003920:	201c      	movs	r0, #28
 8003922:	1838      	adds	r0, r7, r0
 8003924:	f000 fa80 	bl	8003e28 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	0019      	movs	r1, r3
 800392c:	2040      	movs	r0, #64	; 0x40
 800392e:	f000 ff51 	bl	80047d4 <are_settings_changed>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d008      	beq.n	8003948 <set_odr_filter_settings+0xa8>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2217      	movs	r2, #23
 800393a:	18ba      	adds	r2, r7, r2
 800393c:	2118      	movs	r1, #24
 800393e:	1879      	adds	r1, r7, r1
 8003940:	201c      	movs	r0, #28
 8003942:	1838      	adds	r0, r7, r0
 8003944:	f000 faa8 	bl	8003e98 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b03      	cmp	r3, #3
 800394e:	d107      	bne.n	8003960 <set_odr_filter_settings+0xc0>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 8003950:	231f      	movs	r3, #31
 8003952:	18fc      	adds	r4, r7, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f944 	bl	8003be4 <validate_osr_and_odr_settings>
 800395c:	0003      	movs	r3, r0
 800395e:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BMP3_OK)
 8003960:	211f      	movs	r1, #31
 8003962:	187b      	adds	r3, r7, r1
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <set_odr_filter_settings+0xe8>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 800396c:	2317      	movs	r3, #23
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	001a      	movs	r2, r3
 8003974:	187c      	adds	r4, r7, r1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2118      	movs	r1, #24
 800397a:	1879      	adds	r1, r7, r1
 800397c:	201c      	movs	r0, #28
 800397e:	1838      	adds	r0, r7, r0
 8003980:	f7ff fb22 	bl	8002fc8 <bmp3_set_regs>
 8003984:	0003      	movs	r3, r0
 8003986:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8003988:	231f      	movs	r3, #31
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b25b      	sxtb	r3, r3
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b009      	add	sp, #36	; 0x24
 8003996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003998:	080099a4 	.word	0x080099a4

0800399c <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 80039a8:	2115      	movs	r1, #21
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2219      	movs	r2, #25
 80039ae:	701a      	strb	r2, [r3, #0]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	7818      	ldrb	r0, [r3, #0]
 80039b4:	2617      	movs	r6, #23
 80039b6:	19bc      	adds	r4, r7, r6
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2516      	movs	r5, #22
 80039bc:	1979      	adds	r1, r7, r5
 80039be:	2201      	movs	r2, #1
 80039c0:	f7ff fa42 	bl	8002e48 <bmp3_get_regs>
 80039c4:	0003      	movs	r3, r0
 80039c6:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 80039c8:	19bb      	adds	r3, r7, r6
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d000      	beq.n	80039d4 <set_int_ctrl_settings+0x38>
 80039d2:	e076      	b.n	8003ac2 <set_int_ctrl_settings+0x126>
    {
        int_settings = settings->int_settings;
 80039d4:	2410      	movs	r4, #16
 80039d6:	1939      	adds	r1, r7, r4
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2207      	movs	r2, #7
 80039dc:	0008      	movs	r0, r1
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	2204      	movs	r2, #4
 80039e2:	0019      	movs	r1, r3
 80039e4:	f005 fb4a 	bl	800907c <memcpy>

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4013      	ands	r3, r2
 80039f0:	d011      	beq.n	8003a16 <set_int_ctrl_settings+0x7a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 80039f2:	0028      	movs	r0, r5
 80039f4:	183b      	adds	r3, r7, r0
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	b25b      	sxtb	r3, r3
 80039fa:	2201      	movs	r2, #1
 80039fc:	4393      	bics	r3, r2
 80039fe:	b25a      	sxtb	r2, r3
 8003a00:	193b      	adds	r3, r7, r4
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b25b      	sxtb	r3, r3
 8003a06:	2101      	movs	r1, #1
 8003a08:	400b      	ands	r3, r1
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	183b      	adds	r3, r7, r0
 8003a14:	701a      	strb	r2, [r3, #0]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8003a20:	2016      	movs	r0, #22
 8003a22:	183b      	adds	r3, r7, r0
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	2202      	movs	r2, #2
 8003a2a:	4393      	bics	r3, r2
 8003a2c:	b25a      	sxtb	r2, r3
 8003a2e:	2310      	movs	r3, #16
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	b25b      	sxtb	r3, r3
 8003a38:	2102      	movs	r1, #2
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	b25b      	sxtb	r3, r3
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	b25b      	sxtb	r3, r3
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	183b      	adds	r3, r7, r0
 8003a46:	701a      	strb	r2, [r3, #0]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d013      	beq.n	8003a7a <set_int_ctrl_settings+0xde>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8003a52:	2016      	movs	r0, #22
 8003a54:	183b      	adds	r3, r7, r0
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b25b      	sxtb	r3, r3
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	b25a      	sxtb	r2, r3
 8003a60:	2310      	movs	r3, #16
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	789b      	ldrb	r3, [r3, #2]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	b25b      	sxtb	r3, r3
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	4313      	orrs	r3, r2
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	183b      	adds	r3, r7, r0
 8003a78:	701a      	strb	r2, [r3, #0]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d013      	beq.n	8003aaa <set_int_ctrl_settings+0x10e>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8003a82:	2016      	movs	r0, #22
 8003a84:	183b      	adds	r3, r7, r0
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b25b      	sxtb	r3, r3
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	b25a      	sxtb	r2, r3
 8003a90:	2310      	movs	r3, #16
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	019b      	lsls	r3, r3, #6
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	2140      	movs	r1, #64	; 0x40
 8003a9c:	400b      	ands	r3, r1
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	183b      	adds	r3, r7, r0
 8003aa8:	701a      	strb	r2, [r3, #0]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003aaa:	2317      	movs	r3, #23
 8003aac:	18fc      	adds	r4, r7, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2216      	movs	r2, #22
 8003ab2:	18b9      	adds	r1, r7, r2
 8003ab4:	2215      	movs	r2, #21
 8003ab6:	18b8      	adds	r0, r7, r2
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f7ff fa85 	bl	8002fc8 <bmp3_set_regs>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003ac2:	2317      	movs	r3, #23
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	b25b      	sxtb	r3, r3
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b007      	add	sp, #28
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ad2 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8003ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8003ade:	2610      	movs	r6, #16
 8003ae0:	19b9      	adds	r1, r7, r6
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	220b      	movs	r2, #11
 8003ae6:	0008      	movs	r0, r1
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	2202      	movs	r2, #2
 8003aec:	0019      	movs	r1, r3
 8003aee:	f005 fac5 	bl	800907c <memcpy>

    reg_addr = BMP3_REG_IF_CONF;
 8003af2:	2116      	movs	r1, #22
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	221a      	movs	r2, #26
 8003af8:	701a      	strb	r2, [r3, #0]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	7818      	ldrb	r0, [r3, #0]
 8003afe:	2317      	movs	r3, #23
 8003b00:	18fc      	adds	r4, r7, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2515      	movs	r5, #21
 8003b06:	1979      	adds	r1, r7, r5
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f7ff f99d 	bl	8002e48 <bmp3_get_regs>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 8003b12:	2317      	movs	r3, #23
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b25b      	sxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d13c      	bne.n	8003b98 <set_advance_settings+0xc6>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4013      	ands	r3, r2
 8003b26:	d012      	beq.n	8003b4e <set_advance_settings+0x7c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8003b28:	0028      	movs	r0, r5
 8003b2a:	183b      	adds	r3, r7, r0
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	2202      	movs	r2, #2
 8003b32:	4393      	bics	r3, r2
 8003b34:	b25a      	sxtb	r2, r3
 8003b36:	19bb      	adds	r3, r7, r6
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	b25b      	sxtb	r3, r3
 8003b3e:	2102      	movs	r1, #2
 8003b40:	400b      	ands	r3, r1
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	183b      	adds	r3, r7, r0
 8003b4c:	701a      	strb	r2, [r3, #0]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	015b      	lsls	r3, r3, #5
 8003b54:	4013      	ands	r3, r2
 8003b56:	d013      	beq.n	8003b80 <set_advance_settings+0xae>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8003b58:	2015      	movs	r0, #21
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b25b      	sxtb	r3, r3
 8003b60:	2204      	movs	r2, #4
 8003b62:	4393      	bics	r3, r2
 8003b64:	b25a      	sxtb	r2, r3
 8003b66:	2310      	movs	r3, #16
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	2104      	movs	r1, #4
 8003b72:	400b      	ands	r3, r1
 8003b74:	b25b      	sxtb	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	701a      	strb	r2, [r3, #0]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003b80:	2317      	movs	r3, #23
 8003b82:	18fc      	adds	r4, r7, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2215      	movs	r2, #21
 8003b88:	18b9      	adds	r1, r7, r2
 8003b8a:	2216      	movs	r2, #22
 8003b8c:	18b8      	adds	r0, r7, r2
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f7ff fa1a 	bl	8002fc8 <bmp3_set_regs>
 8003b94:	0003      	movs	r3, r0
 8003b96:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003b98:	2317      	movs	r3, #23
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b25b      	sxtb	r3, r3
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b007      	add	sp, #28
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ba8 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8003ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003bb2:	250f      	movs	r5, #15
 8003bb4:	197c      	adds	r4, r7, r5
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2608      	movs	r6, #8
 8003bba:	19b9      	adds	r1, r7, r6
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	201c      	movs	r0, #28
 8003bc0:	f7ff f942 	bl	8002e48 <bmp3_get_regs>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	7023      	strb	r3, [r4, #0]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	1cda      	adds	r2, r3, #3
 8003bcc:	19bb      	adds	r3, r7, r6
 8003bce:	0011      	movs	r1, r2
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff fdc6 	bl	8003762 <parse_odr_filter_settings>

    return rslt;
 8003bd6:	197b      	adds	r3, r7, r5
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b25b      	sxtb	r3, r3
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b005      	add	sp, #20
 8003be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003be4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b098      	sub	sp, #96	; 0x60
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8003bec:	23ea      	movs	r3, #234	; 0xea
 8003bee:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8003bf4:	230c      	movs	r3, #12
 8003bf6:	18fa      	adds	r2, r7, r3
 8003bf8:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <validate_osr_and_odr_settings+0x88>)
 8003bfa:	0010      	movs	r0, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	2348      	movs	r3, #72	; 0x48
 8003c00:	001a      	movs	r2, r3
 8003c02:	f005 fa3b 	bl	800907c <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	785b      	ldrb	r3, [r3, #1]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <validate_osr_and_odr_settings+0x3a>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f000 f847 	bl	8003ca4 <calculate_press_meas_time>
 8003c16:	0002      	movs	r2, r0
 8003c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	789b      	ldrb	r3, [r3, #2]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <validate_osr_and_odr_settings+0x52>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 f86f 	bl	8003d0c <calculate_temp_meas_time>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8003c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3a:	18d3      	adds	r3, r2, r3
 8003c3c:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	799b      	ldrb	r3, [r3, #6]
 8003c42:	001a      	movs	r2, r3
 8003c44:	230c      	movs	r3, #12
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	0092      	lsls	r2, r2, #2
 8003c4a:	58d2      	ldr	r2, [r2, r3]
 8003c4c:	2557      	movs	r5, #87	; 0x57
 8003c4e:	197c      	adds	r4, r7, r5
 8003c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c52:	0011      	movs	r1, r2
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f80b 	bl	8003c70 <verify_meas_time_and_odr_duration>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	7023      	strb	r3, [r4, #0]

    return rslt;
 8003c5e:	197b      	adds	r3, r7, r5
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b25b      	sxtb	r3, r3
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b018      	add	sp, #96	; 0x60
 8003c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6c:	080099a8 	.word	0x080099a8

08003c70 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d204      	bcs.n	8003c8c <verify_meas_time_and_odr_duration+0x1c>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8003c82:	230f      	movs	r3, #15
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e003      	b.n	8003c94 <verify_meas_time_and_odr_duration+0x24>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8003c8c:	230f      	movs	r3, #15
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	22fd      	movs	r2, #253	; 0xfd
 8003c92:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003c94:	230f      	movs	r3, #15
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	b25b      	sxtb	r3, r3
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b004      	add	sp, #16
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8003cac:	240c      	movs	r4, #12
 8003cae:	1939      	adds	r1, r7, r4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	0008      	movs	r0, r1
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	2204      	movs	r2, #4
 8003cba:	0019      	movs	r1, r3
 8003cbc:	f005 f9de 	bl	800907c <memcpy>

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	05db      	lsls	r3, r3, #23
 8003cc6:	61ba      	str	r2, [r7, #24]
 8003cc8:	61fb      	str	r3, [r7, #28]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8003cca:	193b      	adds	r3, r7, r4
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	69b8      	ldr	r0, [r7, #24]
 8003cd0:	69f9      	ldr	r1, [r7, #28]
 8003cd2:	001a      	movs	r2, r3
 8003cd4:	f000 fd5a 	bl	800478c <pow_bmp3>
 8003cd8:	1c03      	adds	r3, r0, #0
 8003cda:	617b      	str	r3, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8003cdc:	4909      	ldr	r1, [pc, #36]	; (8003d04 <calculate_press_meas_time+0x60>)
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f7fc fdea 	bl	80008b8 <__aeabi_fmul>
 8003ce4:	1c03      	adds	r3, r0, #0
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <calculate_press_meas_time+0x64>)
 8003ce8:	1c18      	adds	r0, r3, #0
 8003cea:	f7fc fc47 	bl	800057c <__aeabi_fadd>
 8003cee:	1c03      	adds	r3, r0, #0
 8003cf0:	1c18      	adds	r0, r3, #0
 8003cf2:	f7fc fb33 	bl	800035c <__aeabi_f2uiz>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8003cfa:	693b      	ldr	r3, [r7, #16]
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b009      	add	sp, #36	; 0x24
 8003d02:	bd90      	pop	{r4, r7, pc}
 8003d04:	44fa0000 	.word	0x44fa0000
 8003d08:	43c40000 	.word	0x43c40000

08003d0c <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8003d14:	240c      	movs	r4, #12
 8003d16:	1939      	adds	r1, r7, r4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	0008      	movs	r0, r1
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	2204      	movs	r2, #4
 8003d22:	0019      	movs	r1, r3
 8003d24:	f005 f9aa 	bl	800907c <memcpy>

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	05db      	lsls	r3, r3, #23
 8003d2e:	61ba      	str	r2, [r7, #24]
 8003d30:	61fb      	str	r3, [r7, #28]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8003d32:	193b      	adds	r3, r7, r4
 8003d34:	785b      	ldrb	r3, [r3, #1]
 8003d36:	69b8      	ldr	r0, [r7, #24]
 8003d38:	69f9      	ldr	r1, [r7, #28]
 8003d3a:	001a      	movs	r2, r3
 8003d3c:	f000 fd26 	bl	800478c <pow_bmp3>
 8003d40:	1c03      	adds	r3, r0, #0
 8003d42:	617b      	str	r3, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8003d44:	4909      	ldr	r1, [pc, #36]	; (8003d6c <calculate_temp_meas_time+0x60>)
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7fc fdb6 	bl	80008b8 <__aeabi_fmul>
 8003d4c:	1c03      	adds	r3, r0, #0
 8003d4e:	4908      	ldr	r1, [pc, #32]	; (8003d70 <calculate_temp_meas_time+0x64>)
 8003d50:	1c18      	adds	r0, r3, #0
 8003d52:	f7fc fc13 	bl	800057c <__aeabi_fadd>
 8003d56:	1c03      	adds	r3, r0, #0
 8003d58:	1c18      	adds	r0, r3, #0
 8003d5a:	f7fc faff 	bl	800035c <__aeabi_f2uiz>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8003d62:	693b      	ldr	r3, [r7, #16]
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b009      	add	sp, #36	; 0x24
 8003d6a:	bd90      	pop	{r4, r7, pc}
 8003d6c:	44fa0000 	.word	0x44fa0000
 8003d70:	439c8000 	.word	0x439c8000

08003d74 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8003d82:	2414      	movs	r4, #20
 8003d84:	1939      	adds	r1, r7, r4
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	2203      	movs	r2, #3
 8003d8a:	0008      	movs	r0, r1
 8003d8c:	189b      	adds	r3, r3, r2
 8003d8e:	2204      	movs	r2, #4
 8003d90:	0019      	movs	r1, r3
 8003d92:	f005 f973 	bl	800907c <memcpy>

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2230      	movs	r2, #48	; 0x30
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d040      	beq.n	8003e20 <fill_osr_data+0xac>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2210      	movs	r2, #16
 8003da2:	4013      	ands	r3, r2
 8003da4:	d014      	beq.n	8003dd0 <fill_osr_data+0x5c>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	2207      	movs	r2, #7
 8003dae:	4393      	bics	r3, r2
 8003db0:	b25a      	sxtb	r2, r3
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	2107      	movs	r1, #7
 8003dba:	400b      	ands	r3, r1
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b25a      	sxtb	r2, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	0019      	movs	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	185b      	adds	r3, r3, r1
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d016      	beq.n	8003e06 <fill_osr_data+0x92>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	2238      	movs	r2, #56	; 0x38
 8003de0:	4393      	bics	r3, r2
 8003de2:	b25a      	sxtb	r2, r3
 8003de4:	2314      	movs	r3, #20
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	2138      	movs	r1, #56	; 0x38
 8003df0:	400b      	ands	r3, r1
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	4313      	orrs	r3, r2
 8003df6:	b25a      	sxtb	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	185b      	adds	r3, r3, r1
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	221c      	movs	r2, #28
 8003e12:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	701a      	strb	r2, [r3, #0]
    }
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b007      	add	sp, #28
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	3303      	adds	r3, #3
 8003e3a:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	78db      	ldrb	r3, [r3, #3]
 8003e40:	2b11      	cmp	r3, #17
 8003e42:	d902      	bls.n	8003e4a <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2211      	movs	r2, #17
 8003e48:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b25b      	sxtb	r3, r3
 8003e52:	221f      	movs	r2, #31
 8003e54:	4393      	bics	r3, r2
 8003e56:	b25a      	sxtb	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	78db      	ldrb	r3, [r3, #3]
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	211f      	movs	r1, #31
 8003e60:	400b      	ands	r3, r1
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	4313      	orrs	r3, r2
 8003e66:	b25a      	sxtb	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	185b      	adds	r3, r3, r1
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	221d      	movs	r2, #29
 8003e82:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	701a      	strb	r2, [r3, #0]
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b006      	add	sp, #24
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8003ea6:	2414      	movs	r4, #20
 8003ea8:	1939      	adds	r1, r7, r4
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2203      	movs	r2, #3
 8003eae:	0008      	movs	r0, r1
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	f005 f8e1 	bl	800907c <memcpy>

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3303      	adds	r3, #3
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	220e      	movs	r2, #14
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	b25a      	sxtb	r2, r3
 8003ec8:	193b      	adds	r3, r7, r4
 8003eca:	789b      	ldrb	r3, [r3, #2]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	210e      	movs	r1, #14
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b25a      	sxtb	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	0019      	movs	r1, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	185b      	adds	r3, r3, r1
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	001a      	movs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	189b      	adds	r3, r3, r2
 8003ef2:	221f      	movs	r2, #31
 8003ef4:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	701a      	strb	r2, [r3, #0]
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b007      	add	sp, #28
 8003f08:	bd90      	pop	{r4, r7, pc}

08003f0a <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8003f0a:	b5b0      	push	{r4, r5, r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	7809      	ldrb	r1, [r1, #0]
 8003f18:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	3101      	adds	r1, #1
 8003f1e:	7809      	ldrb	r1, [r1, #0]
 8003f20:	0209      	lsls	r1, r1, #8
 8003f22:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	3102      	adds	r1, #2
 8003f28:	7809      	ldrb	r1, [r1, #0]
 8003f2a:	0409      	lsls	r1, r1, #16
 8003f2c:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	6939      	ldr	r1, [r7, #16]
 8003f32:	4308      	orrs	r0, r1
 8003f34:	6979      	ldr	r1, [r7, #20]
 8003f36:	4301      	orrs	r1, r0
 8003f38:	000c      	movs	r4, r1
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	000d      	movs	r5, r1
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	600c      	str	r4, [r1, #0]
 8003f42:	604d      	str	r5, [r1, #4]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	3103      	adds	r1, #3
 8003f48:	7809      	ldrb	r1, [r1, #0]
 8003f4a:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	3104      	adds	r1, #4
 8003f50:	7809      	ldrb	r1, [r1, #0]
 8003f52:	0209      	lsls	r1, r1, #8
 8003f54:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	3105      	adds	r1, #5
 8003f5a:	7809      	ldrb	r1, [r1, #0]
 8003f5c:	0409      	lsls	r1, r1, #16
 8003f5e:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	6939      	ldr	r1, [r7, #16]
 8003f64:	4308      	orrs	r0, r1
 8003f66:	6979      	ldr	r1, [r7, #20]
 8003f68:	4301      	orrs	r1, r0
 8003f6a:	000a      	movs	r2, r1
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	000b      	movs	r3, r1
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	608a      	str	r2, [r1, #8]
 8003f74:	60cb      	str	r3, [r1, #12]
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b006      	add	sp, #24
 8003f7c:	bdb0      	pop	{r4, r5, r7, pc}

08003f7e <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8003f7e:	b5b0      	push	{r4, r5, r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	240f      	movs	r4, #15
 8003f8c:	193b      	adds	r3, r7, r4
 8003f8e:	1c02      	adds	r2, r0, #0
 8003f90:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BMP3_OK;
 8003f92:	2117      	movs	r1, #23
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d060      	beq.n	8004062 <compensate_data+0xe4>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d05d      	beq.n	8004062 <compensate_data+0xe4>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d05a      	beq.n	8004062 <compensate_data+0xe4>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8003fac:	193b      	adds	r3, r7, r4
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d11a      	bne.n	8003fea <compensate_data+0x6c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	000d      	movs	r5, r1
 8003fb8:	187c      	adds	r4, r7, r1
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 fa1a 	bl	80043f8 <compensate_temperature>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	7023      	strb	r3, [r4, #0]

            if (rslt == BMP3_OK)
 8003fc8:	0029      	movs	r1, r5
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d14b      	bne.n	800406c <compensate_data+0xee>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	187c      	adds	r4, r7, r1
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f000 fa82 	bl	80044e8 <compensate_pressure>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	7023      	strb	r3, [r4, #0]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8003fe8:	e040      	b.n	800406c <compensate_data+0xee>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8003fea:	230f      	movs	r3, #15
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d116      	bne.n	8004022 <compensate_data+0xa4>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 f9fc 	bl	80043f8 <compensate_temperature>
            comp_data->temperature = 0;
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	2300      	movs	r3, #0
 8004006:	600a      	str	r2, [r1, #0]
 8004008:	604b      	str	r3, [r1, #4]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3308      	adds	r3, #8
 800400e:	2217      	movs	r2, #23
 8004010:	18bc      	adds	r4, r7, r2
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	0018      	movs	r0, r3
 8004018:	f000 fa66 	bl	80044e8 <compensate_pressure>
 800401c:	0003      	movs	r3, r0
 800401e:	7023      	strb	r3, [r4, #0]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8004020:	e024      	b.n	800406c <compensate_data+0xee>
        }
        else if (sensor_comp == BMP3_TEMP)
 8004022:	230f      	movs	r3, #15
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d10f      	bne.n	800404c <compensate_data+0xce>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2217      	movs	r2, #23
 8004030:	18bc      	adds	r4, r7, r2
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f9de 	bl	80043f8 <compensate_temperature>
 800403c:	0003      	movs	r3, r0
 800403e:	7023      	strb	r3, [r4, #0]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	2300      	movs	r3, #0
 8004046:	608a      	str	r2, [r1, #8]
 8004048:	60cb      	str	r3, [r1, #12]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800404a:	e00f      	b.n	800406c <compensate_data+0xee>
        }
        else
        {
            comp_data->pressure = 0;
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	2300      	movs	r3, #0
 8004052:	608a      	str	r2, [r1, #8]
 8004054:	60cb      	str	r3, [r1, #12]
            comp_data->temperature = 0;
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	2300      	movs	r3, #0
 800405c:	600a      	str	r2, [r1, #0]
 800405e:	604b      	str	r3, [r1, #4]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8004060:	e004      	b.n	800406c <compensate_data+0xee>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8004062:	2317      	movs	r3, #23
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	22ff      	movs	r2, #255	; 0xff
 8004068:	701a      	strb	r2, [r3, #0]
 800406a:	e000      	b.n	800406e <compensate_data+0xf0>
        if (sensor_comp == BMP3_PRESS_TEMP)
 800406c:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 800406e:	2317      	movs	r3, #23
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b25b      	sxtb	r3, r3
}
 8004076:	0018      	movs	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	b006      	add	sp, #24
 800407c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004080 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	3390      	adds	r3, #144	; 0x90
 800408e:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	3318      	adds	r3, #24
 8004094:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8004096:	2200      	movs	r2, #0
 8004098:	4bcc      	ldr	r3, [pc, #816]	; (80043cc <parse_calib_data+0x34c>)
 800409a:	60ba      	str	r2, [r7, #8]
 800409c:	60fb      	str	r3, [r7, #12]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3301      	adds	r3, #1
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	b21a      	sxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b21b      	sxth	r3, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	b21b      	sxth	r3, r3
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	0018      	movs	r0, r3
 80040be:	f7fe fc5b 	bl	8002978 <__aeabi_ui2d>
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f7fd fa27 	bl	8001518 <__aeabi_ddiv>
 80040ca:	0002      	movs	r2, r0
 80040cc:	000b      	movs	r3, r1
 80040ce:	6939      	ldr	r1, [r7, #16]
 80040d0:	600a      	str	r2, [r1, #0]
 80040d2:	604b      	str	r3, [r1, #4]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3303      	adds	r3, #3
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	b21a      	sxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3302      	adds	r3, #2
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	4313      	orrs	r3, r2
 80040e8:	b21b      	sxth	r3, r3
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 80040f0:	2200      	movs	r2, #0
 80040f2:	4bb7      	ldr	r3, [pc, #732]	; (80043d0 <parse_calib_data+0x350>)
 80040f4:	60ba      	str	r2, [r7, #8]
 80040f6:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	885b      	ldrh	r3, [r3, #2]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f7fe fc3b 	bl	8002978 <__aeabi_ui2d>
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f7fd fa07 	bl	8001518 <__aeabi_ddiv>
 800410a:	0002      	movs	r2, r0
 800410c:	000b      	movs	r3, r1
 800410e:	6939      	ldr	r1, [r7, #16]
 8004110:	608a      	str	r2, [r1, #8]
 8004112:	60cb      	str	r3, [r1, #12]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b25a      	sxtb	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8004120:	2200      	movs	r2, #0
 8004122:	4bac      	ldr	r3, [pc, #688]	; (80043d4 <parse_calib_data+0x354>)
 8004124:	60ba      	str	r2, [r7, #8]
 8004126:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	791b      	ldrb	r3, [r3, #4]
 800412c:	b25b      	sxtb	r3, r3
 800412e:	0018      	movs	r0, r3
 8004130:	f7fe fbf2 	bl	8002918 <__aeabi_i2d>
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f7fd f9ee 	bl	8001518 <__aeabi_ddiv>
 800413c:	0002      	movs	r2, r0
 800413e:	000b      	movs	r3, r1
 8004140:	6939      	ldr	r1, [r7, #16]
 8004142:	610a      	str	r2, [r1, #16]
 8004144:	614b      	str	r3, [r1, #20]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3306      	adds	r3, #6
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	b21a      	sxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3305      	adds	r3, #5
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b21b      	sxth	r3, r3
 8004158:	4313      	orrs	r3, r2
 800415a:	b21a      	sxth	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8004160:	2200      	movs	r2, #0
 8004162:	4b9d      	ldr	r3, [pc, #628]	; (80043d8 <parse_calib_data+0x358>)
 8004164:	60ba      	str	r2, [r7, #8]
 8004166:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2206      	movs	r2, #6
 800416c:	5e9b      	ldrsh	r3, [r3, r2]
 800416e:	4a9b      	ldr	r2, [pc, #620]	; (80043dc <parse_calib_data+0x35c>)
 8004170:	4694      	mov	ip, r2
 8004172:	4463      	add	r3, ip
 8004174:	0018      	movs	r0, r3
 8004176:	f7fe fbcf 	bl	8002918 <__aeabi_i2d>
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f7fd f9cb 	bl	8001518 <__aeabi_ddiv>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	6939      	ldr	r1, [r7, #16]
 8004188:	618a      	str	r2, [r1, #24]
 800418a:	61cb      	str	r3, [r1, #28]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3308      	adds	r3, #8
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	b21a      	sxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3307      	adds	r3, #7
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b21b      	sxth	r3, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	b21a      	sxth	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 80041a6:	2200      	movs	r2, #0
 80041a8:	4b8d      	ldr	r3, [pc, #564]	; (80043e0 <parse_calib_data+0x360>)
 80041aa:	60ba      	str	r2, [r7, #8]
 80041ac:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2208      	movs	r2, #8
 80041b2:	5e9b      	ldrsh	r3, [r3, r2]
 80041b4:	4a89      	ldr	r2, [pc, #548]	; (80043dc <parse_calib_data+0x35c>)
 80041b6:	4694      	mov	ip, r2
 80041b8:	4463      	add	r3, ip
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7fe fbac 	bl	8002918 <__aeabi_i2d>
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f7fd f9a8 	bl	8001518 <__aeabi_ddiv>
 80041c8:	0002      	movs	r2, r0
 80041ca:	000b      	movs	r3, r1
 80041cc:	6939      	ldr	r1, [r7, #16]
 80041ce:	620a      	str	r2, [r1, #32]
 80041d0:	624b      	str	r3, [r1, #36]	; 0x24
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3309      	adds	r3, #9
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	b25a      	sxtb	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80041de:	2200      	movs	r2, #0
 80041e0:	4b80      	ldr	r3, [pc, #512]	; (80043e4 <parse_calib_data+0x364>)
 80041e2:	60ba      	str	r2, [r7, #8]
 80041e4:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	7a9b      	ldrb	r3, [r3, #10]
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7fe fb93 	bl	8002918 <__aeabi_i2d>
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f7fd f98f 	bl	8001518 <__aeabi_ddiv>
 80041fa:	0002      	movs	r2, r0
 80041fc:	000b      	movs	r3, r1
 80041fe:	6939      	ldr	r1, [r7, #16]
 8004200:	628a      	str	r2, [r1, #40]	; 0x28
 8004202:	62cb      	str	r3, [r1, #44]	; 0x2c
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	330a      	adds	r3, #10
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b25a      	sxtb	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8004210:	2200      	movs	r2, #0
 8004212:	4b75      	ldr	r3, [pc, #468]	; (80043e8 <parse_calib_data+0x368>)
 8004214:	60ba      	str	r2, [r7, #8]
 8004216:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	7adb      	ldrb	r3, [r3, #11]
 800421c:	b25b      	sxtb	r3, r3
 800421e:	0018      	movs	r0, r3
 8004220:	f7fe fb7a 	bl	8002918 <__aeabi_i2d>
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f7fd f976 	bl	8001518 <__aeabi_ddiv>
 800422c:	0002      	movs	r2, r0
 800422e:	000b      	movs	r3, r1
 8004230:	6939      	ldr	r1, [r7, #16]
 8004232:	630a      	str	r2, [r1, #48]	; 0x30
 8004234:	634b      	str	r3, [r1, #52]	; 0x34
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	330c      	adds	r3, #12
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	b21a      	sxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	330b      	adds	r3, #11
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	b21b      	sxth	r3, r3
 8004248:	4313      	orrs	r3, r2
 800424a:	b21b      	sxth	r3, r3
 800424c:	b29a      	uxth	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8004252:	2200      	movs	r2, #0
 8004254:	23ff      	movs	r3, #255	; 0xff
 8004256:	059b      	lsls	r3, r3, #22
 8004258:	60ba      	str	r2, [r7, #8]
 800425a:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	899b      	ldrh	r3, [r3, #12]
 8004260:	0018      	movs	r0, r3
 8004262:	f7fe fb89 	bl	8002978 <__aeabi_ui2d>
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f7fd f955 	bl	8001518 <__aeabi_ddiv>
 800426e:	0002      	movs	r2, r0
 8004270:	000b      	movs	r3, r1
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	638a      	str	r2, [r1, #56]	; 0x38
 8004276:	63cb      	str	r3, [r1, #60]	; 0x3c
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	330e      	adds	r3, #14
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	b21a      	sxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	330d      	adds	r3, #13
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b21b      	sxth	r3, r3
 800428a:	4313      	orrs	r3, r2
 800428c:	b21b      	sxth	r3, r3
 800428e:	b29a      	uxth	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8004294:	2200      	movs	r2, #0
 8004296:	4b55      	ldr	r3, [pc, #340]	; (80043ec <parse_calib_data+0x36c>)
 8004298:	60ba      	str	r2, [r7, #8]
 800429a:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	89db      	ldrh	r3, [r3, #14]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fe fb69 	bl	8002978 <__aeabi_ui2d>
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f7fd f935 	bl	8001518 <__aeabi_ddiv>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	6939      	ldr	r1, [r7, #16]
 80042b4:	640a      	str	r2, [r1, #64]	; 0x40
 80042b6:	644b      	str	r3, [r1, #68]	; 0x44
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	330f      	adds	r3, #15
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b25a      	sxtb	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 80042c4:	2200      	movs	r2, #0
 80042c6:	4b4a      	ldr	r3, [pc, #296]	; (80043f0 <parse_calib_data+0x370>)
 80042c8:	60ba      	str	r2, [r7, #8]
 80042ca:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	7c1b      	ldrb	r3, [r3, #16]
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7fe fb20 	bl	8002918 <__aeabi_i2d>
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f7fd f91c 	bl	8001518 <__aeabi_ddiv>
 80042e0:	0002      	movs	r2, r0
 80042e2:	000b      	movs	r3, r1
 80042e4:	6939      	ldr	r1, [r7, #16]
 80042e6:	648a      	str	r2, [r1, #72]	; 0x48
 80042e8:	64cb      	str	r3, [r1, #76]	; 0x4c
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3310      	adds	r3, #16
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b25a      	sxtb	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80042f6:	2200      	movs	r2, #0
 80042f8:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <parse_calib_data+0x374>)
 80042fa:	60ba      	str	r2, [r7, #8]
 80042fc:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	7c5b      	ldrb	r3, [r3, #17]
 8004302:	b25b      	sxtb	r3, r3
 8004304:	0018      	movs	r0, r3
 8004306:	f7fe fb07 	bl	8002918 <__aeabi_i2d>
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f7fd f903 	bl	8001518 <__aeabi_ddiv>
 8004312:	0002      	movs	r2, r0
 8004314:	000b      	movs	r3, r1
 8004316:	6939      	ldr	r1, [r7, #16]
 8004318:	650a      	str	r2, [r1, #80]	; 0x50
 800431a:	654b      	str	r3, [r1, #84]	; 0x54
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3312      	adds	r3, #18
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	b21a      	sxth	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3311      	adds	r3, #17
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b21b      	sxth	r3, r3
 800432e:	4313      	orrs	r3, r2
 8004330:	b21a      	sxth	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 8004336:	2200      	movs	r2, #0
 8004338:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <parse_calib_data+0x354>)
 800433a:	60ba      	str	r2, [r7, #8]
 800433c:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2212      	movs	r2, #18
 8004342:	5e9b      	ldrsh	r3, [r3, r2]
 8004344:	0018      	movs	r0, r3
 8004346:	f7fe fae7 	bl	8002918 <__aeabi_i2d>
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f7fd f8e3 	bl	8001518 <__aeabi_ddiv>
 8004352:	0002      	movs	r2, r0
 8004354:	000b      	movs	r3, r1
 8004356:	6939      	ldr	r1, [r7, #16]
 8004358:	658a      	str	r2, [r1, #88]	; 0x58
 800435a:	65cb      	str	r3, [r1, #92]	; 0x5c
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3313      	adds	r3, #19
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	b25a      	sxtb	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8004368:	2200      	movs	r2, #0
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <parse_calib_data+0x354>)
 800436c:	60ba      	str	r2, [r7, #8]
 800436e:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	7d1b      	ldrb	r3, [r3, #20]
 8004374:	b25b      	sxtb	r3, r3
 8004376:	0018      	movs	r0, r3
 8004378:	f7fe face 	bl	8002918 <__aeabi_i2d>
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f7fd f8ca 	bl	8001518 <__aeabi_ddiv>
 8004384:	0002      	movs	r2, r0
 8004386:	000b      	movs	r3, r1
 8004388:	6939      	ldr	r1, [r7, #16]
 800438a:	660a      	str	r2, [r1, #96]	; 0x60
 800438c:	664b      	str	r3, [r1, #100]	; 0x64
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3314      	adds	r3, #20
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b25a      	sxtb	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800439a:	2200      	movs	r2, #0
 800439c:	2388      	movs	r3, #136	; 0x88
 800439e:	05db      	lsls	r3, r3, #23
 80043a0:	60ba      	str	r2, [r7, #8]
 80043a2:	60fb      	str	r3, [r7, #12]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	7d5b      	ldrb	r3, [r3, #21]
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7fe fab4 	bl	8002918 <__aeabi_i2d>
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f7fd f8b0 	bl	8001518 <__aeabi_ddiv>
 80043b8:	0002      	movs	r2, r0
 80043ba:	000b      	movs	r3, r1
 80043bc:	6939      	ldr	r1, [r7, #16]
 80043be:	668a      	str	r2, [r1, #104]	; 0x68
 80043c0:	66cb      	str	r3, [r1, #108]	; 0x6c
}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b006      	add	sp, #24
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	3f700000 	.word	0x3f700000
 80043d0:	41d00000 	.word	0x41d00000
 80043d4:	42f00000 	.word	0x42f00000
 80043d8:	41300000 	.word	0x41300000
 80043dc:	ffffc000 	.word	0xffffc000
 80043e0:	41c00000 	.word	0x41c00000
 80043e4:	41f00000 	.word	0x41f00000
 80043e8:	42400000 	.word	0x42400000
 80043ec:	40500000 	.word	0x40500000
 80043f0:	40700000 	.word	0x40700000
 80043f4:	40e00000 	.word	0x40e00000

080043f8 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b08d      	sub	sp, #52	; 0x34
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8004404:	242f      	movs	r4, #47	; 0x2f
 8004406:	193b      	adds	r3, r7, r4
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
    int64_t uncomp_temp = uncomp_data->temperature;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	623a      	str	r2, [r7, #32]
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 8004416:	6a38      	ldr	r0, [r7, #32]
 8004418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800441a:	f7fb ffb7 	bl	800038c <__aeabi_l2d>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f7fd fee6 	bl	80021f4 <__aeabi_dsub>
 8004428:	0002      	movs	r2, r0
 800442a:	000b      	movs	r3, r1
 800442c:	61ba      	str	r2, [r7, #24]
 800442e:	61fb      	str	r3, [r7, #28]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	69b8      	ldr	r0, [r7, #24]
 8004438:	69f9      	ldr	r1, [r7, #28]
 800443a:	f7fd fc6f 	bl	8001d1c <__aeabi_dmul>
 800443e:	0002      	movs	r2, r0
 8004440:	000b      	movs	r3, r1
 8004442:	613a      	str	r2, [r7, #16]
 8004444:	617b      	str	r3, [r7, #20]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	69b8      	ldr	r0, [r7, #24]
 800444c:	69f9      	ldr	r1, [r7, #28]
 800444e:	f7fd fc65 	bl	8001d1c <__aeabi_dmul>
 8004452:	0002      	movs	r2, r0
 8004454:	000b      	movs	r3, r1
 8004456:	0010      	movs	r0, r2
 8004458:	0019      	movs	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	695b      	ldr	r3, [r3, #20]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8004460:	f7fd fc5c 	bl	8001d1c <__aeabi_dmul>
 8004464:	0002      	movs	r2, r0
 8004466:	000b      	movs	r3, r1
 8004468:	0010      	movs	r0, r2
 800446a:	0019      	movs	r1, r3
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f7fc fd16 	bl	8000ea0 <__aeabi_dadd>
 8004474:	0002      	movs	r2, r0
 8004476:	000b      	movs	r3, r1
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	670a      	str	r2, [r1, #112]	; 0x70
 800447c:	674b      	str	r3, [r1, #116]	; 0x74

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004482:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8004484:	2200      	movs	r2, #0
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <compensate_temperature+0xe8>)
 8004488:	f7fb fef2 	bl	8000270 <__aeabi_dcmplt>
 800448c:	1e03      	subs	r3, r0, #0
 800448e:	d007      	beq.n	80044a0 <compensate_temperature+0xa8>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <compensate_temperature+0xe8>)
 8004496:	670a      	str	r2, [r1, #112]	; 0x70
 8004498:	674b      	str	r3, [r1, #116]	; 0x74
        rslt = BMP3_W_MIN_TEMP;
 800449a:	193b      	adds	r3, r7, r4
 800449c:	2203      	movs	r2, #3
 800449e:	701a      	strb	r2, [r3, #0]
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80044a4:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80044a6:	2200      	movs	r2, #0
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <compensate_temperature+0xec>)
 80044aa:	f7fb fef5 	bl	8000298 <__aeabi_dcmpgt>
 80044ae:	1e03      	subs	r3, r0, #0
 80044b0:	d008      	beq.n	80044c4 <compensate_temperature+0xcc>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <compensate_temperature+0xec>)
 80044b8:	670a      	str	r2, [r1, #112]	; 0x70
 80044ba:	674b      	str	r3, [r1, #116]	; 0x74
        rslt = BMP3_W_MAX_TEMP;
 80044bc:	232f      	movs	r3, #47	; 0x2f
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	2204      	movs	r2, #4
 80044c2:	701a      	strb	r2, [r3, #0]
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	600a      	str	r2, [r1, #0]
 80044ce:	604b      	str	r3, [r1, #4]

    return rslt;
 80044d0:	232f      	movs	r3, #47	; 0x2f
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b25b      	sxtb	r3, r3
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b00d      	add	sp, #52	; 0x34
 80044de:	bd90      	pop	{r4, r7, pc}
 80044e0:	c0440000 	.word	0xc0440000
 80044e4:	40554000 	.word	0x40554000

080044e8 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80044e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ea:	b097      	sub	sp, #92	; 0x5c
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80044f4:	2657      	movs	r6, #87	; 0x57
 80044f6:	19bb      	adds	r3, r7, r6
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8004500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004502:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004504:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f7fd fc06 	bl	8001d1c <__aeabi_dmul>
 8004510:	0002      	movs	r2, r0
 8004512:	000b      	movs	r3, r1
 8004514:	63ba      	str	r2, [r7, #56]	; 0x38
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800451c:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800451e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004520:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004522:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8004524:	2202      	movs	r2, #2
 8004526:	f000 f931 	bl	800478c <pow_bmp3>
 800452a:	1c03      	adds	r3, r0, #0
 800452c:	1c18      	adds	r0, r3, #0
 800452e:	f7fe fa49 	bl	80029c4 <__aeabi_f2d>
 8004532:	0002      	movs	r2, r0
 8004534:	000b      	movs	r3, r1
 8004536:	0020      	movs	r0, r4
 8004538:	0029      	movs	r1, r5
 800453a:	f7fd fbef 	bl	8001d1c <__aeabi_dmul>
 800453e:	0002      	movs	r2, r0
 8004540:	000b      	movs	r3, r1
 8004542:	633a      	str	r2, [r7, #48]	; 0x30
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8004546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004548:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800454a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800454c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800454e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004550:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8004552:	2203      	movs	r2, #3
 8004554:	f000 f91a 	bl	800478c <pow_bmp3>
 8004558:	1c03      	adds	r3, r0, #0
 800455a:	1c18      	adds	r0, r3, #0
 800455c:	f7fe fa32 	bl	80029c4 <__aeabi_f2d>
 8004560:	0002      	movs	r2, r0
 8004562:	000b      	movs	r3, r1
 8004564:	0020      	movs	r0, r4
 8004566:	0029      	movs	r1, r5
 8004568:	f7fd fbd8 	bl	8001d1c <__aeabi_dmul>
 800456c:	0002      	movs	r2, r0
 800456e:	000b      	movs	r3, r1
 8004570:	62ba      	str	r2, [r7, #40]	; 0x28
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8004574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004576:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004578:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800457a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800457c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457e:	f7fc fc8f 	bl	8000ea0 <__aeabi_dadd>
 8004582:	0002      	movs	r2, r0
 8004584:	000b      	movs	r3, r1
 8004586:	0010      	movs	r0, r2
 8004588:	0019      	movs	r1, r3
 800458a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458e:	f7fc fc87 	bl	8000ea0 <__aeabi_dadd>
 8004592:	0002      	movs	r2, r0
 8004594:	000b      	movs	r3, r1
 8004596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800459a:	f7fc fc81 	bl	8000ea0 <__aeabi_dadd>
 800459e:	0002      	movs	r2, r0
 80045a0:	000b      	movs	r3, r1
 80045a2:	623a      	str	r2, [r7, #32]
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80045a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a8:	6a18      	ldr	r0, [r3, #32]
 80045aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	f7fd fbb3 	bl	8001d1c <__aeabi_dmul>
 80045b6:	0002      	movs	r2, r0
 80045b8:	000b      	movs	r3, r1
 80045ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80045be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80045c2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80045c8:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80045ca:	2202      	movs	r2, #2
 80045cc:	f000 f8de 	bl	800478c <pow_bmp3>
 80045d0:	1c03      	adds	r3, r0, #0
 80045d2:	1c18      	adds	r0, r3, #0
 80045d4:	f7fe f9f6 	bl	80029c4 <__aeabi_f2d>
 80045d8:	0002      	movs	r2, r0
 80045da:	000b      	movs	r3, r1
 80045dc:	0020      	movs	r0, r4
 80045de:	0029      	movs	r1, r5
 80045e0:	f7fd fb9c 	bl	8001d1c <__aeabi_dmul>
 80045e4:	0002      	movs	r2, r0
 80045e6:	000b      	movs	r3, r1
 80045e8:	633a      	str	r2, [r7, #48]	; 0x30
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80045ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ee:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80045f0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80045f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80045f6:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80045f8:	2203      	movs	r2, #3
 80045fa:	f000 f8c7 	bl	800478c <pow_bmp3>
 80045fe:	1c03      	adds	r3, r0, #0
 8004600:	1c18      	adds	r0, r3, #0
 8004602:	f7fe f9df 	bl	80029c4 <__aeabi_f2d>
 8004606:	0002      	movs	r2, r0
 8004608:	000b      	movs	r3, r1
 800460a:	0020      	movs	r0, r4
 800460c:	0029      	movs	r1, r5
 800460e:	f7fd fb85 	bl	8001d1c <__aeabi_dmul>
 8004612:	0002      	movs	r2, r0
 8004614:	000b      	movs	r3, r1
 8004616:	62ba      	str	r2, [r7, #40]	; 0x28
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
    partial_out2 = uncomp_data->pressure *
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0010      	movs	r0, r2
 8004622:	0019      	movs	r1, r3
 8004624:	f7fb fec8 	bl	80003b8 <__aeabi_ul2d>
 8004628:	0004      	movs	r4, r0
 800462a:	000d      	movs	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800462c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462e:	6998      	ldr	r0, [r3, #24]
 8004630:	69d9      	ldr	r1, [r3, #28]
 8004632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004636:	f7fc fc33 	bl	8000ea0 <__aeabi_dadd>
 800463a:	0002      	movs	r2, r0
 800463c:	000b      	movs	r3, r1
 800463e:	0010      	movs	r0, r2
 8004640:	0019      	movs	r1, r3
 8004642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004646:	f7fc fc2b 	bl	8000ea0 <__aeabi_dadd>
 800464a:	0002      	movs	r2, r0
 800464c:	000b      	movs	r3, r1
 800464e:	0010      	movs	r0, r2
 8004650:	0019      	movs	r1, r3
 8004652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	f7fc fc23 	bl	8000ea0 <__aeabi_dadd>
 800465a:	0002      	movs	r2, r0
 800465c:	000b      	movs	r3, r1
    partial_out2 = uncomp_data->pressure *
 800465e:	0020      	movs	r0, r4
 8004660:	0029      	movs	r1, r5
 8004662:	f7fd fb5b 	bl	8001d1c <__aeabi_dmul>
 8004666:	0002      	movs	r2, r0
 8004668:	000b      	movs	r3, r1
 800466a:	61ba      	str	r2, [r7, #24]
 800466c:	61fb      	str	r3, [r7, #28]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	0010      	movs	r0, r2
 8004676:	0019      	movs	r1, r3
 8004678:	f7fb fe9e 	bl	80003b8 <__aeabi_ul2d>
 800467c:	2202      	movs	r2, #2
 800467e:	f000 f885 	bl	800478c <pow_bmp3>
 8004682:	1c03      	adds	r3, r0, #0
 8004684:	1c18      	adds	r0, r3, #0
 8004686:	f7fe f99d 	bl	80029c4 <__aeabi_f2d>
 800468a:	0002      	movs	r2, r0
 800468c:	000b      	movs	r3, r1
 800468e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004690:	63fb      	str	r3, [r7, #60]	; 0x3c
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 8004692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004694:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8004696:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8004698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800469c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800469e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a4:	f7fd fb3a 	bl	8001d1c <__aeabi_dmul>
 80046a8:	0002      	movs	r2, r0
 80046aa:	000b      	movs	r3, r1
 80046ac:	0020      	movs	r0, r4
 80046ae:	0029      	movs	r1, r5
 80046b0:	f7fc fbf6 	bl	8000ea0 <__aeabi_dadd>
 80046b4:	0002      	movs	r2, r0
 80046b6:	000b      	movs	r3, r1
 80046b8:	633a      	str	r2, [r7, #48]	; 0x30
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
    partial_data3 = partial_data1 * partial_data2;
 80046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046c4:	f7fd fb2a 	bl	8001d1c <__aeabi_dmul>
 80046c8:	0002      	movs	r2, r0
 80046ca:	000b      	movs	r3, r1
 80046cc:	62ba      	str	r2, [r7, #40]	; 0x28
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	0010      	movs	r0, r2
 80046d8:	0019      	movs	r1, r3
 80046da:	f7fb fe6d 	bl	80003b8 <__aeabi_ul2d>
 80046de:	2203      	movs	r2, #3
 80046e0:	f000 f854 	bl	800478c <pow_bmp3>
 80046e4:	1c03      	adds	r3, r0, #0
 80046e6:	1c18      	adds	r0, r3, #0
 80046e8:	f7fe f96c 	bl	80029c4 <__aeabi_f2d>
 80046ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f2:	f7fd fb13 	bl	8001d1c <__aeabi_dmul>
 80046f6:	0002      	movs	r2, r0
 80046f8:	000b      	movs	r3, r1
 80046fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046fe:	f7fc fbcf 	bl	8000ea0 <__aeabi_dadd>
 8004702:	0002      	movs	r2, r0
 8004704:	000b      	movs	r3, r1
 8004706:	613a      	str	r2, [r7, #16]
 8004708:	617b      	str	r3, [r7, #20]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	6a38      	ldr	r0, [r7, #32]
 8004710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004712:	f7fc fbc5 	bl	8000ea0 <__aeabi_dadd>
 8004716:	0002      	movs	r2, r0
 8004718:	000b      	movs	r3, r1
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	f7fc fbbf 	bl	8000ea0 <__aeabi_dadd>
 8004722:	0002      	movs	r2, r0
 8004724:	000b      	movs	r3, r1
 8004726:	64ba      	str	r2, [r7, #72]	; 0x48
 8004728:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800472a:	2200      	movs	r2, #0
 800472c:	4b15      	ldr	r3, [pc, #84]	; (8004784 <compensate_pressure+0x29c>)
 800472e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004730:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004732:	f7fb fd9d 	bl	8000270 <__aeabi_dcmplt>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d006      	beq.n	8004748 <compensate_pressure+0x260>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 800473a:	2200      	movs	r2, #0
 800473c:	4b11      	ldr	r3, [pc, #68]	; (8004784 <compensate_pressure+0x29c>)
 800473e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004740:	64fb      	str	r3, [r7, #76]	; 0x4c
        rslt = BMP3_W_MIN_PRES;
 8004742:	19bb      	adds	r3, r7, r6
 8004744:	2205      	movs	r2, #5
 8004746:	701a      	strb	r2, [r3, #0]
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8004748:	2200      	movs	r2, #0
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <compensate_pressure+0x2a0>)
 800474c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800474e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004750:	f7fb fda2 	bl	8000298 <__aeabi_dcmpgt>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d007      	beq.n	8004768 <compensate_pressure+0x280>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8004758:	2200      	movs	r2, #0
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <compensate_pressure+0x2a0>)
 800475c:	64ba      	str	r2, [r7, #72]	; 0x48
 800475e:	64fb      	str	r3, [r7, #76]	; 0x4c
        rslt = BMP3_W_MAX_PRES;
 8004760:	2357      	movs	r3, #87	; 0x57
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	2206      	movs	r2, #6
 8004766:	701a      	strb	r2, [r3, #0]
    }

    (*pressure) = comp_press;
 8004768:	68f9      	ldr	r1, [r7, #12]
 800476a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800476c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476e:	600a      	str	r2, [r1, #0]
 8004770:	604b      	str	r3, [r1, #4]

    return rslt;
 8004772:	2357      	movs	r3, #87	; 0x57
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	b25b      	sxtb	r3, r3
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b017      	add	sp, #92	; 0x5c
 8004780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	40dd4c00 	.word	0x40dd4c00
 8004788:	40fe8480 	.word	0x40fe8480

0800478c <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60b8      	str	r0, [r7, #8]
 8004794:	60f9      	str	r1, [r7, #12]
 8004796:	1dfb      	adds	r3, r7, #7
 8004798:	701a      	strb	r2, [r3, #0]
    float pow_output = 1;
 800479a:	23fe      	movs	r3, #254	; 0xfe
 800479c:	059b      	lsls	r3, r3, #22
 800479e:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80047a0:	e00f      	b.n	80047c2 <pow_bmp3+0x36>
    {
        pow_output = (float) base * pow_output;
 80047a2:	68b8      	ldr	r0, [r7, #8]
 80047a4:	68f9      	ldr	r1, [r7, #12]
 80047a6:	f7fe f955 	bl	8002a54 <__aeabi_d2f>
 80047aa:	1c03      	adds	r3, r0, #0
 80047ac:	1c19      	adds	r1, r3, #0
 80047ae:	6978      	ldr	r0, [r7, #20]
 80047b0:	f7fc f882 	bl	80008b8 <__aeabi_fmul>
 80047b4:	1c03      	adds	r3, r0, #0
 80047b6:	617b      	str	r3, [r7, #20]
        power--;
 80047b8:	1dfb      	adds	r3, r7, #7
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	3a01      	subs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
    while (power != 0)
 80047c2:	1dfb      	adds	r3, r7, #7
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1eb      	bne.n	80047a2 <pow_bmp3+0x16>
    }

    return pow_output;
 80047ca:	697b      	ldr	r3, [r7, #20]
}
 80047cc:	1c18      	adds	r0, r3, #0
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b006      	add	sp, #24
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 80047de:	210f      	movs	r1, #15
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4013      	ands	r3, r2
 80047ec:	d003      	beq.n	80047f6 <are_settings_changed+0x22>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80047ee:	187b      	adds	r3, r7, r1
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e003      	b.n	80047fe <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80047f6:	230f      	movs	r3, #15
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 80047fe:	230f      	movs	r3, #15
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	781b      	ldrb	r3, [r3, #0]
}
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b004      	add	sp, #16
 800480a:	bd80      	pop	{r7, pc}

0800480c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00f      	beq.n	800483a <null_ptr_check+0x2e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <null_ptr_check+0x2e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <null_ptr_check+0x2e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <null_ptr_check+0x38>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800483a:	230f      	movs	r3, #15
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	22ff      	movs	r2, #255	; 0xff
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e003      	b.n	800484c <null_ptr_check+0x40>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8004844:	230f      	movs	r3, #15
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800484c:	230f      	movs	r3, #15
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	b25b      	sxtb	r3, r3
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b004      	add	sp, #16
 800485a:	bd80      	pop	{r7, pc}

0800485c <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800485c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 8004866:	260e      	movs	r6, #14
 8004868:	19bb      	adds	r3, r7, r6
 800486a:	2203      	movs	r2, #3
 800486c:	701a      	strb	r2, [r3, #0]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800486e:	200f      	movs	r0, #15
 8004870:	183c      	adds	r4, r7, r0
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	250d      	movs	r5, #13
 8004876:	1979      	adds	r1, r7, r5
 8004878:	19bb      	adds	r3, r7, r6
 800487a:	7818      	ldrb	r0, [r3, #0]
 800487c:	0013      	movs	r3, r2
 800487e:	2201      	movs	r2, #1
 8004880:	f7fe fae2 	bl	8002e48 <bmp3_get_regs>
 8004884:	0003      	movs	r3, r0
 8004886:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 8004888:	200f      	movs	r0, #15
 800488a:	183b      	adds	r3, r7, r0
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b25b      	sxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d131      	bne.n	80048f8 <get_sensor_status+0x9c>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 8004894:	0029      	movs	r1, r5
 8004896:	187b      	adds	r3, r7, r1
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	111b      	asrs	r3, r3, #4
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2201      	movs	r2, #1
 80048a0:	4013      	ands	r3, r2
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	115b      	asrs	r3, r3, #5
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2201      	movs	r2, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80048ba:	187b      	adds	r3, r7, r1
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	119b      	asrs	r3, r3, #6
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2201      	movs	r2, #1
 80048c4:	4013      	ands	r3, r2
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80048cc:	19bb      	adds	r3, r7, r6
 80048ce:	2210      	movs	r2, #16
 80048d0:	701a      	strb	r2, [r3, #0]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80048d2:	183c      	adds	r4, r7, r0
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	000d      	movs	r5, r1
 80048d8:	1879      	adds	r1, r7, r1
 80048da:	19bb      	adds	r3, r7, r6
 80048dc:	7818      	ldrb	r0, [r3, #0]
 80048de:	0013      	movs	r3, r2
 80048e0:	2201      	movs	r2, #1
 80048e2:	f7fe fab1 	bl	8002e48 <bmp3_get_regs>
 80048e6:	0003      	movs	r3, r0
 80048e8:	7023      	strb	r3, [r4, #0]
        status->pwr_on_rst = reg_data & 0x01;
 80048ea:	197b      	adds	r3, r7, r5
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	4013      	ands	r3, r2
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80048f8:	230f      	movs	r3, #15
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b25b      	sxtb	r3, r3
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b005      	add	sp, #20
 8004906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004908 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8004908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8004912:	260f      	movs	r6, #15
 8004914:	19bc      	adds	r4, r7, r6
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	250e      	movs	r5, #14
 800491a:	1979      	adds	r1, r7, r5
 800491c:	2201      	movs	r2, #1
 800491e:	2011      	movs	r0, #17
 8004920:	f7fe fa92 	bl	8002e48 <bmp3_get_regs>
 8004924:	0003      	movs	r3, r0
 8004926:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 8004928:	19bb      	adds	r3, r7, r6
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b25b      	sxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d119      	bne.n	8004966 <get_int_status+0x5e>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 8004932:	0029      	movs	r1, r5
 8004934:	187b      	adds	r3, r7, r1
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	b2da      	uxtb	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8004942:	187b      	adds	r3, r7, r1
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	105b      	asrs	r3, r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2201      	movs	r2, #1
 800494c:	4013      	ands	r3, r2
 800494e:	b2da      	uxtb	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8004954:	187b      	adds	r3, r7, r1
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	10db      	asrs	r3, r3, #3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2201      	movs	r2, #1
 800495e:	4013      	ands	r3, r2
 8004960:	b2da      	uxtb	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8004966:	230f      	movs	r3, #15
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b25b      	sxtb	r3, r3
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b005      	add	sp, #20
 8004974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004976 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8004976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 8004980:	260f      	movs	r6, #15
 8004982:	19bc      	adds	r4, r7, r6
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	250e      	movs	r5, #14
 8004988:	1979      	adds	r1, r7, r5
 800498a:	2201      	movs	r2, #1
 800498c:	2002      	movs	r0, #2
 800498e:	f7fe fa5b 	bl	8002e48 <bmp3_get_regs>
 8004992:	0003      	movs	r3, r0
 8004994:	7023      	strb	r3, [r4, #0]

    if (rslt == BMP3_OK)
 8004996:	19bb      	adds	r3, r7, r6
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	b25b      	sxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d119      	bne.n	80049d4 <get_err_status+0x5e>
    {
        status->err.fatal = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 80049a0:	0029      	movs	r1, r5
 80049a2:	187b      	adds	r3, r7, r1
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	719a      	strb	r2, [r3, #6]
        status->err.cmd = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 80049b0:	187b      	adds	r3, r7, r1
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	105b      	asrs	r3, r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2201      	movs	r2, #1
 80049ba:	4013      	ands	r3, r2
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80049c2:	187b      	adds	r3, r7, r1
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	109b      	asrs	r3, r3, #2
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2201      	movs	r2, #1
 80049cc:	4013      	ands	r3, r2
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	721a      	strb	r2, [r3, #8]
    }

    return rslt;
 80049d4:	230f      	movs	r3, #15
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	b25b      	sxtb	r3, r3
}
 80049dc:	0018      	movs	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	b005      	add	sp, #20
 80049e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049e4 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	000a      	movs	r2, r1
 80049ee:	1cfb      	adds	r3, r7, #3
 80049f0:	701a      	strb	r2, [r3, #0]
    switch (rslt)
 80049f2:	1cfb      	adds	r3, r7, #3
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	3307      	adds	r3, #7
 80049fa:	2b09      	cmp	r3, #9
 80049fc:	d843      	bhi.n	8004a86 <bmp3_check_rslt+0xa2>
 80049fe:	009a      	lsls	r2, r3, #2
 8004a00:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <bmp3_check_rslt+0xc0>)
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	469f      	mov	pc, r3
        case BMP3_OK:

            /* Do nothing */
            break;
        case BMP3_E_NULL_PTR:
            PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
 8004a08:	1cfb      	adds	r3, r7, #3
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	569a      	ldrsb	r2, [r3, r2]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <bmp3_check_rslt+0xc4>)
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 f8c8 	bl	8004ba8 <PDEBUG>
            break;
 8004a18:	e03f      	b.n	8004a9a <bmp3_check_rslt+0xb6>
        case BMP3_E_COMM_FAIL:
            PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
 8004a1a:	1cfb      	adds	r3, r7, #3
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	569a      	ldrsb	r2, [r3, r2]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <bmp3_check_rslt+0xc8>)
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 f8bf 	bl	8004ba8 <PDEBUG>
            break;
 8004a2a:	e036      	b.n	8004a9a <bmp3_check_rslt+0xb6>
        case BMP3_E_INVALID_LEN:
            PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
 8004a2c:	1cfb      	adds	r3, r7, #3
 8004a2e:	2200      	movs	r2, #0
 8004a30:	569a      	ldrsb	r2, [r3, r2]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <bmp3_check_rslt+0xcc>)
 8004a36:	0018      	movs	r0, r3
 8004a38:	f000 f8b6 	bl	8004ba8 <PDEBUG>
            break;
 8004a3c:	e02d      	b.n	8004a9a <bmp3_check_rslt+0xb6>
        case BMP3_E_DEV_NOT_FOUND:
            PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
 8004a3e:	1cfb      	adds	r3, r7, #3
 8004a40:	2200      	movs	r2, #0
 8004a42:	569a      	ldrsb	r2, [r3, r2]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <bmp3_check_rslt+0xd0>)
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 f8ad 	bl	8004ba8 <PDEBUG>
            break;
 8004a4e:	e024      	b.n	8004a9a <bmp3_check_rslt+0xb6>
        case BMP3_E_CONFIGURATION_ERR:
            PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
 8004a50:	1cfb      	adds	r3, r7, #3
 8004a52:	2200      	movs	r2, #0
 8004a54:	569a      	ldrsb	r2, [r3, r2]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <bmp3_check_rslt+0xd4>)
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f000 f8a4 	bl	8004ba8 <PDEBUG>
            break;
 8004a60:	e01b      	b.n	8004a9a <bmp3_check_rslt+0xb6>
        case BMP3_W_SENSOR_NOT_ENABLED:
            PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
 8004a62:	1cfb      	adds	r3, r7, #3
 8004a64:	2200      	movs	r2, #0
 8004a66:	569a      	ldrsb	r2, [r3, r2]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4b14      	ldr	r3, [pc, #80]	; (8004abc <bmp3_check_rslt+0xd8>)
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 f89b 	bl	8004ba8 <PDEBUG>
            break;
 8004a72:	e012      	b.n	8004a9a <bmp3_check_rslt+0xb6>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
            PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
 8004a74:	1cfb      	adds	r3, r7, #3
 8004a76:	2200      	movs	r2, #0
 8004a78:	569a      	ldrsb	r2, [r3, r2]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <bmp3_check_rslt+0xdc>)
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 f892 	bl	8004ba8 <PDEBUG>
            break;
 8004a84:	e009      	b.n	8004a9a <bmp3_check_rslt+0xb6>
        default:
            PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
 8004a86:	1cfb      	adds	r3, r7, #3
 8004a88:	2200      	movs	r2, #0
 8004a8a:	569a      	ldrsb	r2, [r3, r2]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <bmp3_check_rslt+0xe0>)
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 f889 	bl	8004ba8 <PDEBUG>
            break;
 8004a96:	e000      	b.n	8004a9a <bmp3_check_rslt+0xb6>
            break;
 8004a98:	46c0      	nop			; (mov r8, r8)
    }
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	08009dac 	.word	0x08009dac
 8004aa8:	080099f0 	.word	0x080099f0
 8004aac:	08009a18 	.word	0x08009a18
 8004ab0:	08009a48 	.word	0x08009a48
 8004ab4:	08009a7c 	.word	0x08009a7c
 8004ab8:	08009aa8 	.word	0x08009aa8
 8004abc:	08009ad4 	.word	0x08009ad4
 8004ac0:	08009b0c 	.word	0x08009b0c
 8004ac4:	08009b58 	.word	0x08009b58

08004ac8 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	000a      	movs	r2, r1
 8004ad2:	1cfb      	adds	r3, r7, #3
 8004ad4:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BMP3_OK;
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]

	if(bmp3 != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01a      	beq.n	8004b1a <bmp3_interface_init+0x52>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8004ae4:	1cfb      	adds	r3, r7, #3
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d10f      	bne.n	8004b0c <bmp3_interface_init+0x44>
		{
			PDEBUG("I2C Interface\n");
 8004aec:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <bmp3_interface_init+0x6c>)
 8004aee:	0018      	movs	r0, r3
 8004af0:	f000 f85a 	bl	8004ba8 <PDEBUG>
			dev_addr = BMP3_ADDR_I2C_SEC;
 8004af4:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <bmp3_interface_init+0x70>)
 8004af6:	2277      	movs	r2, #119	; 0x77
 8004af8:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a0f      	ldr	r2, [pc, #60]	; (8004b3c <bmp3_interface_init+0x74>)
 8004afe:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a0f      	ldr	r2, [pc, #60]	; (8004b40 <bmp3_interface_init+0x78>)
 8004b04:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a0d      	ldr	r2, [pc, #52]	; (8004b44 <bmp3_interface_init+0x7c>)
 8004b10:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <bmp3_interface_init+0x70>)
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	e003      	b.n	8004b22 <bmp3_interface_init+0x5a>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 8004b1a:	230f      	movs	r3, #15
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	22ff      	movs	r2, #255	; 0xff
 8004b20:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8004b22:	230f      	movs	r3, #15
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b25b      	sxtb	r3, r3
}
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b004      	add	sp, #16
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	08009b84 	.word	0x08009b84
 8004b38:	20000090 	.word	0x20000090
 8004b3c:	08004bed 	.word	0x08004bed
 8004b40:	08004c5d 	.word	0x08004c5d
 8004b44:	08004b49 	.word	0x08004b49

08004b48 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8004b52:	e008      	b.n	8004b66 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e002      	b.n	8004b60 <bmp3_delay_us+0x18>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b53      	cmp	r3, #83	; 0x53
 8004b64:	d9f9      	bls.n	8004b5a <bmp3_delay_us+0x12>
	while(period--)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	1e5a      	subs	r2, r3, #1
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f1      	bne.n	8004b54 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b004      	add	sp, #16
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <UART_Printf>:


void UART_Printf(uint8_t* buff, uint16_t size)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	000a      	movs	r2, r1
 8004b86:	1cbb      	adds	r3, r7, #2
 8004b88:	801a      	strh	r2, [r3, #0]
    //HAL_UART_Transmit_DMA(&huart2, buff, size);
    HAL_UART_Transmit(&UART_HANDLE, buff, size, BUS_TIMEOUT);
 8004b8a:	23fa      	movs	r3, #250	; 0xfa
 8004b8c:	009c      	lsls	r4, r3, #2
 8004b8e:	1cbb      	adds	r3, r7, #2
 8004b90:	881a      	ldrh	r2, [r3, #0]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4803      	ldr	r0, [pc, #12]	; (8004ba4 <UART_Printf+0x28>)
 8004b96:	0023      	movs	r3, r4
 8004b98:	f002 fc70 	bl	800747c <HAL_UART_Transmit>
}
 8004b9c:	46c0      	nop			; (mov r8, r8)
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b003      	add	sp, #12
 8004ba2:	bd90      	pop	{r4, r7, pc}
 8004ba4:	20000644 	.word	0x20000644

08004ba8 <PDEBUG>:

char chBuffer[256];
#if 1
void PDEBUG(char *format, ...)
{
 8004ba8:	b40f      	push	{r0, r1, r2, r3}
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
#if defined(DEBUG_EN)
    va_list ap;
    //char timestamp[16];
    va_start(ap, format);
 8004bb0:	2314      	movs	r3, #20
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	607b      	str	r3, [r7, #4]
    vsnprintf(chBuffer, sizeof(chBuffer), format, ap);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	0049      	lsls	r1, r1, #1
 8004bbe:	480a      	ldr	r0, [pc, #40]	; (8004be8 <PDEBUG+0x40>)
 8004bc0:	f004 fa98 	bl	80090f4 <vsniprintf>
    //sprintf(timestamp, "[%d]", xTaskGetTickCount()); //xTaskGetTickCountFromISR()
    //Printf((uint8_t *)timestamp, strlen(timestamp));
    UART_Printf((uint8_t *)chBuffer,strlen(chBuffer));
 8004bc4:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <PDEBUG+0x40>)
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f7fb fa9e 	bl	8000108 <strlen>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <PDEBUG+0x40>)
 8004bd2:	0011      	movs	r1, r2
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7ff ffd1 	bl	8004b7c <UART_Printf>
    va_end(ap);
#endif
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b002      	add	sp, #8
 8004be0:	bc80      	pop	{r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	b004      	add	sp, #16
 8004be6:	4718      	bx	r3
 8004be8:	20000294 	.word	0x20000294

08004bec <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8004bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	0011      	movs	r1, r2
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	240f      	movs	r4, #15
 8004bfa:	193b      	adds	r3, r7, r4
 8004bfc:	1c02      	adds	r2, r0, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	260c      	movs	r6, #12
 8004c02:	19bb      	adds	r3, r7, r6
 8004c04:	1c0a      	adds	r2, r1, #0
 8004c06:	801a      	strh	r2, [r3, #0]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8004c08:	2117      	movs	r1, #23
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	7812      	ldrb	r2, [r2, #0]
 8004c10:	701a      	strb	r2, [r3, #0]
	uint16_t DevAddress = dev_addr << 1;
 8004c12:	187b      	adds	r3, r7, r1
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2514      	movs	r5, #20
 8004c1a:	197a      	adds	r2, r7, r5
 8004c1c:	18db      	adds	r3, r3, r3
 8004c1e:	8013      	strh	r3, [r2, #0]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8004c20:	193a      	adds	r2, r7, r4
 8004c22:	197b      	adds	r3, r7, r5
 8004c24:	8819      	ldrh	r1, [r3, #0]
 8004c26:	480c      	ldr	r0, [pc, #48]	; (8004c58 <SensorAPI_I2Cx_Read+0x6c>)
 8004c28:	23fa      	movs	r3, #250	; 0xfa
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f000 ffa6 	bl	8005b80 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8004c34:	19bb      	adds	r3, r7, r6
 8004c36:	881c      	ldrh	r4, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	197b      	adds	r3, r7, r5
 8004c3c:	8819      	ldrh	r1, [r3, #0]
 8004c3e:	4806      	ldr	r0, [pc, #24]	; (8004c58 <SensorAPI_I2Cx_Read+0x6c>)
 8004c40:	23fa      	movs	r3, #250	; 0xfa
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	0023      	movs	r3, r4
 8004c48:	f001 f8a2 	bl	8005d90 <HAL_I2C_Master_Receive>
	return 0;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b007      	add	sp, #28
 8004c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	200005ec 	.word	0x200005ec

08004c5c <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8004c5c:	b5b0      	push	{r4, r5, r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	0011      	movs	r1, r2
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	240f      	movs	r4, #15
 8004c6a:	193b      	adds	r3, r7, r4
 8004c6c:	1c02      	adds	r2, r0, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	200c      	movs	r0, #12
 8004c72:	183b      	adds	r3, r7, r0
 8004c74:	1c0a      	adds	r2, r1, #0
 8004c76:	801a      	strh	r2, [r3, #0]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8004c78:	2117      	movs	r1, #23
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	701a      	strb	r2, [r3, #0]
	uint16_t DevAddress = dev_addr << 1;
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2514      	movs	r5, #20
 8004c8a:	197a      	adds	r2, r7, r5
 8004c8c:	18db      	adds	r3, r3, r3
 8004c8e:	8013      	strh	r3, [r2, #0]

	GTXBuffer[0] = subaddress;
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <SensorAPI_I2Cx_Write+0x74>)
 8004c92:	193a      	adds	r2, r7, r4
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	701a      	strb	r2, [r3, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8004c98:	0004      	movs	r4, r0
 8004c9a:	183b      	adds	r3, r7, r0
 8004c9c:	881a      	ldrh	r2, [r3, #0]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <SensorAPI_I2Cx_Write+0x78>)
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f004 f9ea 	bl	800907c <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8004ca8:	193b      	adds	r3, r7, r4
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	b29c      	uxth	r4, r3
 8004cb0:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <SensorAPI_I2Cx_Write+0x74>)
 8004cb2:	197b      	adds	r3, r7, r5
 8004cb4:	8819      	ldrh	r1, [r3, #0]
 8004cb6:	4808      	ldr	r0, [pc, #32]	; (8004cd8 <SensorAPI_I2Cx_Write+0x7c>)
 8004cb8:	23fa      	movs	r3, #250	; 0xfa
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	0023      	movs	r3, r4
 8004cc0:	f000 ff5e 	bl	8005b80 <HAL_I2C_Master_Transmit>
	return 0;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b006      	add	sp, #24
 8004ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	20000094 	.word	0x20000094
 8004cd4:	20000095 	.word	0x20000095
 8004cd8:	200005ec 	.word	0x200005ec

08004cdc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <vApplicationGetIdleTaskMemory+0x28>)
 8004cec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4a05      	ldr	r2, [pc, #20]	; (8004d08 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2280      	movs	r2, #128	; 0x80
 8004cf8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	20000398 	.word	0x20000398
 8004d08:	200003ec 	.word	0x200003ec

08004d0c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004d12:	1d3b      	adds	r3, r7, #4
 8004d14:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <MX_FREERTOS_Init+0x30>)
 8004d16:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d18:	c313      	stmia	r3!, {r0, r1, r4}
 8004d1a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d1c:	c313      	stmia	r3!, {r0, r1, r4}
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	2100      	movs	r1, #0
 8004d26:	0018      	movs	r0, r3
 8004d28:	f003 f8dd 	bl	8007ee6 <osThreadCreate>
 8004d2c:	0002      	movs	r2, r0
 8004d2e:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <MX_FREERTOS_Init+0x34>)
 8004d30:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b009      	add	sp, #36	; 0x24
 8004d38:	bd90      	pop	{r4, r7, pc}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	08009c40 	.word	0x08009c40
 8004d40:	20000394 	.word	0x20000394

08004d44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f003 f917 	bl	8007f80 <osDelay>
 8004d52:	e7fb      	b.n	8004d4c <StartDefaultTask+0x8>

08004d54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b089      	sub	sp, #36	; 0x24
 8004d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d5a:	240c      	movs	r4, #12
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	0018      	movs	r0, r3
 8004d60:	2314      	movs	r3, #20
 8004d62:	001a      	movs	r2, r3
 8004d64:	2100      	movs	r1, #0
 8004d66:	f004 f992 	bl	800908e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <MX_GPIO_Init+0x84>)
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <MX_GPIO_Init+0x84>)
 8004d70:	2104      	movs	r1, #4
 8004d72:	430a      	orrs	r2, r1
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <MX_GPIO_Init+0x84>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <MX_GPIO_Init+0x84>)
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <MX_GPIO_Init+0x84>)
 8004d88:	2101      	movs	r1, #1
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <MX_GPIO_Init+0x84>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	2201      	movs	r2, #1
 8004d94:	4013      	ands	r3, r2
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004d9a:	23a0      	movs	r3, #160	; 0xa0
 8004d9c:	05db      	lsls	r3, r3, #23
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2120      	movs	r1, #32
 8004da2:	0018      	movs	r0, r3
 8004da4:	f000 fe1e 	bl	80059e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004da8:	0021      	movs	r1, r4
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	2220      	movs	r2, #32
 8004dae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db0:	187b      	adds	r3, r7, r1
 8004db2:	2201      	movs	r2, #1
 8004db4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	2200      	movs	r2, #0
 8004dba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004dc2:	187a      	adds	r2, r7, r1
 8004dc4:	23a0      	movs	r3, #160	; 0xa0
 8004dc6:	05db      	lsls	r3, r3, #23
 8004dc8:	0011      	movs	r1, r2
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f000 fc8c 	bl	80056e8 <HAL_GPIO_Init>

}
 8004dd0:	46c0      	nop			; (mov r8, r8)
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b009      	add	sp, #36	; 0x24
 8004dd6:	bd90      	pop	{r4, r7, pc}
 8004dd8:	40021000 	.word	0x40021000

08004ddc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004de0:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <MX_I2C1_Init+0x78>)
 8004de4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <MX_I2C1_Init+0x7c>)
 8004dea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004dec:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004df2:	4b17      	ldr	r3, [pc, #92]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004dfe:	4b14      	ldr	r3, [pc, #80]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f000 fe1b 	bl	8005a54 <HAL_I2C_Init>
 8004e1e:	1e03      	subs	r3, r0, #0
 8004e20:	d001      	beq.n	8004e26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004e22:	f000 f9f3 	bl	800520c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004e28:	2100      	movs	r1, #0
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f001 fb6e 	bl	800650c <HAL_I2CEx_ConfigAnalogFilter>
 8004e30:	1e03      	subs	r3, r0, #0
 8004e32:	d001      	beq.n	8004e38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004e34:	f000 f9ea 	bl	800520c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <MX_I2C1_Init+0x74>)
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f001 fbb1 	bl	80065a4 <HAL_I2CEx_ConfigDigitalFilter>
 8004e42:	1e03      	subs	r3, r0, #0
 8004e44:	d001      	beq.n	8004e4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004e46:	f000 f9e1 	bl	800520c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200005ec 	.word	0x200005ec
 8004e54:	40005400 	.word	0x40005400
 8004e58:	00303d5b 	.word	0x00303d5b

08004e5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b089      	sub	sp, #36	; 0x24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e64:	240c      	movs	r4, #12
 8004e66:	193b      	adds	r3, r7, r4
 8004e68:	0018      	movs	r0, r3
 8004e6a:	2314      	movs	r3, #20
 8004e6c:	001a      	movs	r2, r3
 8004e6e:	2100      	movs	r1, #0
 8004e70:	f004 f90d 	bl	800908e <memset>
  if(i2cHandle->Instance==I2C1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_I2C_MspInit+0x80>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d12a      	bne.n	8004ed4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <HAL_I2C_MspInit+0x84>)
 8004e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_I2C_MspInit+0x84>)
 8004e84:	2101      	movs	r1, #1
 8004e86:	430a      	orrs	r2, r1
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_I2C_MspInit+0x84>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	2201      	movs	r2, #1
 8004e90:	4013      	ands	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Altimeter_SCL_Pin|Altimeter_SDA_Pin;
 8004e96:	193b      	adds	r3, r7, r4
 8004e98:	22c0      	movs	r2, #192	; 0xc0
 8004e9a:	00d2      	lsls	r2, r2, #3
 8004e9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e9e:	0021      	movs	r1, r4
 8004ea0:	187b      	adds	r3, r7, r1
 8004ea2:	2212      	movs	r2, #18
 8004ea4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea6:	187b      	adds	r3, r7, r1
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	2203      	movs	r2, #3
 8004eb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004eb2:	187b      	adds	r3, r7, r1
 8004eb4:	2206      	movs	r2, #6
 8004eb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb8:	187a      	adds	r2, r7, r1
 8004eba:	23a0      	movs	r3, #160	; 0xa0
 8004ebc:	05db      	lsls	r3, r3, #23
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f000 fc11 	bl	80056e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <HAL_I2C_MspInit+0x84>)
 8004ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_I2C_MspInit+0x84>)
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	0389      	lsls	r1, r1, #14
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b009      	add	sp, #36	; 0x24
 8004eda:	bd90      	pop	{r4, r7, pc}
 8004edc:	40005400 	.word	0x40005400
 8004ee0:	40021000 	.word	0x40021000

08004ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee6:	b0bb      	sub	sp, #236	; 0xec
 8004ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int8_t rslt;
	uint16_t settings_sel;
	struct bmp3_dev dev;
	struct bmp3_data data = { 0 };
 8004eea:	2320      	movs	r3, #32
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	0018      	movs	r0, r3
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	001a      	movs	r2, r3
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	f004 f8ca 	bl	800908e <memset>
	struct bmp3_settings settings = { 0 };
 8004efa:	2510      	movs	r5, #16
 8004efc:	197b      	adds	r3, r7, r5
 8004efe:	0018      	movs	r0, r3
 8004f00:	230d      	movs	r3, #13
 8004f02:	001a      	movs	r2, r3
 8004f04:	2100      	movs	r1, #0
 8004f06:	f004 f8c2 	bl	800908e <memset>
	struct bmp3_status status = { { 0 } };
 8004f0a:	1d3b      	adds	r3, r7, #4
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	230a      	movs	r3, #10
 8004f10:	001a      	movs	r2, r3
 8004f12:	2100      	movs	r1, #0
 8004f14:	f004 f8bb 	bl	800908e <memset>

	/* Interface reference is given as a parameter
	 *         For I2C : BMP3_I2C_INTF
	 *         For SPI : BMP3_SPI_INTF
	 */
	rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
 8004f18:	2330      	movs	r3, #48	; 0x30
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f7ff fdd2 	bl	8004ac8 <bmp3_interface_init>
 8004f24:	0002      	movs	r2, r0
 8004f26:	26e7      	movs	r6, #231	; 0xe7
 8004f28:	19bb      	adds	r3, r7, r6
 8004f2a:	701a      	strb	r2, [r3, #0]
	bmp3_check_rslt("bmp3_interface_init", rslt);
 8004f2c:	19bb      	adds	r3, r7, r6
 8004f2e:	2200      	movs	r2, #0
 8004f30:	569a      	ldrsb	r2, [r3, r2]
 8004f32:	4b70      	ldr	r3, [pc, #448]	; (80050f4 <main+0x210>)
 8004f34:	0011      	movs	r1, r2
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7ff fd54 	bl	80049e4 <bmp3_check_rslt>

	rslt = bmp3_init(&dev);
 8004f3c:	19bc      	adds	r4, r7, r6
 8004f3e:	2330      	movs	r3, #48	; 0x30
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7fd ff22 	bl	8002d8c <bmp3_init>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	7023      	strb	r3, [r4, #0]
	bmp3_check_rslt("bmp3_init", rslt);
 8004f4c:	0034      	movs	r4, r6
 8004f4e:	193b      	adds	r3, r7, r4
 8004f50:	2200      	movs	r2, #0
 8004f52:	569a      	ldrsb	r2, [r3, r2]
 8004f54:	4b68      	ldr	r3, [pc, #416]	; (80050f8 <main+0x214>)
 8004f56:	0011      	movs	r1, r2
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7ff fd43 	bl	80049e4 <bmp3_check_rslt>

	settings.int_settings.drdy_en = BMP3_ENABLE;
 8004f5e:	0029      	movs	r1, r5
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	2201      	movs	r2, #1
 8004f64:	729a      	strb	r2, [r3, #10]
	settings.press_en = BMP3_ENABLE;
 8004f66:	187b      	adds	r3, r7, r1
 8004f68:	2201      	movs	r2, #1
 8004f6a:	705a      	strb	r2, [r3, #1]
	settings.temp_en = BMP3_ENABLE;
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	2201      	movs	r2, #1
 8004f70:	709a      	strb	r2, [r3, #2]

	settings.odr_filter.press_os = BMP3_OVERSAMPLING_2X;
 8004f72:	187b      	adds	r3, r7, r1
 8004f74:	2201      	movs	r2, #1
 8004f76:	70da      	strb	r2, [r3, #3]
	settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
 8004f78:	187b      	adds	r3, r7, r1
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	711a      	strb	r2, [r3, #4]
	settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8004f7e:	187b      	adds	r3, r7, r1
 8004f80:	2201      	movs	r2, #1
 8004f82:	719a      	strb	r2, [r3, #6]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8004f84:	20e4      	movs	r0, #228	; 0xe4
 8004f86:	183b      	adds	r3, r7, r0
 8004f88:	22be      	movs	r2, #190	; 0xbe
 8004f8a:	801a      	strh	r2, [r3, #0]
				   BMP3_SEL_DRDY_EN;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 8004f8c:	183b      	adds	r3, r7, r0
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	0026      	movs	r6, r4
 8004f92:	19bc      	adds	r4, r7, r6
 8004f94:	2230      	movs	r2, #48	; 0x30
 8004f96:	18ba      	adds	r2, r7, r2
 8004f98:	000d      	movs	r5, r1
 8004f9a:	1879      	adds	r1, r7, r1
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fe f8d4 	bl	800314a <bmp3_set_sensor_settings>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	7023      	strb	r3, [r4, #0]
	bmp3_check_rslt("bmp3_set_sensor_settings", rslt);
 8004fa6:	19bb      	adds	r3, r7, r6
 8004fa8:	2200      	movs	r2, #0
 8004faa:	569a      	ldrsb	r2, [r3, r2]
 8004fac:	4b53      	ldr	r3, [pc, #332]	; (80050fc <main+0x218>)
 8004fae:	0011      	movs	r1, r2
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7ff fd17 	bl	80049e4 <bmp3_check_rslt>

	settings.op_mode = BMP3_MODE_NORMAL;
 8004fb6:	197b      	adds	r3, r7, r5
 8004fb8:	2203      	movs	r2, #3
 8004fba:	701a      	strb	r2, [r3, #0]
	rslt = bmp3_set_op_mode(&settings, &dev);
 8004fbc:	19bc      	adds	r4, r7, r6
 8004fbe:	2230      	movs	r2, #48	; 0x30
 8004fc0:	18ba      	adds	r2, r7, r2
 8004fc2:	197b      	adds	r3, r7, r5
 8004fc4:	0011      	movs	r1, r2
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7fe f9b6 	bl	8003338 <bmp3_set_op_mode>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	7023      	strb	r3, [r4, #0]
	bmp3_check_rslt("bmp3_set_op_mode", rslt);
 8004fd0:	19bb      	adds	r3, r7, r6
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	569a      	ldrsb	r2, [r3, r2]
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <main+0x21c>)
 8004fd8:	0011      	movs	r1, r2
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f7ff fd02 	bl	80049e4 <bmp3_check_rslt>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fe0:	f000 fa3a 	bl	8005458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fe4:	f000 f89c 	bl	8005120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fe8:	f7ff feb4 	bl	8004d54 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8004fec:	f000 f980 	bl	80052f0 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8004ff0:	f7ff fef4 	bl	8004ddc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_MspInit(&hlpuart1);
 8004ff4:	4b43      	ldr	r3, [pc, #268]	; (8005104 <main+0x220>)
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 f9a8 	bl	800534c <HAL_UART_MspInit>
  HAL_I2C_MspInit(&hi2c1);
 8004ffc:	4b42      	ldr	r3, [pc, #264]	; (8005108 <main+0x224>)
 8004ffe:	0018      	movs	r0, r3
 8005000:	f7ff ff2c 	bl	8004e5c <HAL_I2C_MspInit>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005004:	f7ff fe82 	bl	8004d0c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005008:	f002 ff65 	bl	8007ed6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&hlpuart1, "Hello!\n", 7, 100);
 800500c:	493f      	ldr	r1, [pc, #252]	; (800510c <main+0x228>)
 800500e:	483d      	ldr	r0, [pc, #244]	; (8005104 <main+0x220>)
 8005010:	2364      	movs	r3, #100	; 0x64
 8005012:	2207      	movs	r2, #7
 8005014:	f002 fa32 	bl	800747c <HAL_UART_Transmit>
  HAL_Delay (5000);
 8005018:	4b3d      	ldr	r3, [pc, #244]	; (8005110 <main+0x22c>)
 800501a:	0018      	movs	r0, r3
 800501c:	f000 fa8c 	bl	8005538 <HAL_Delay>


  while (1)
  {
    HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8005020:	23a0      	movs	r3, #160	; 0xa0
 8005022:	05db      	lsls	r3, r3, #23
 8005024:	2120      	movs	r1, #32
 8005026:	0018      	movs	r0, r3
 8005028:	f000 fcf9 	bl	8005a1e <HAL_GPIO_TogglePin>

    rslt = bmp3_get_status(&status, &dev);
 800502c:	25e7      	movs	r5, #231	; 0xe7
 800502e:	197c      	adds	r4, r7, r5
 8005030:	2630      	movs	r6, #48	; 0x30
 8005032:	19ba      	adds	r2, r7, r6
 8005034:	1d3b      	adds	r3, r7, #4
 8005036:	0011      	movs	r1, r2
 8005038:	0018      	movs	r0, r3
 800503a:	f7fe f8e7 	bl	800320c <bmp3_get_status>
 800503e:	0003      	movs	r3, r0
 8005040:	7023      	strb	r3, [r4, #0]
	bmp3_check_rslt("bmp3_get_status", rslt);
 8005042:	197b      	adds	r3, r7, r5
 8005044:	2200      	movs	r2, #0
 8005046:	569a      	ldrsb	r2, [r3, r2]
 8005048:	4b32      	ldr	r3, [pc, #200]	; (8005114 <main+0x230>)
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f7ff fcc9 	bl	80049e4 <bmp3_check_rslt>

	/* Read temperature and pressure data iteratively based on data ready interrupt */
	if ((rslt == BMP3_OK) && (status.intr.drdy == BMP3_ENABLE))
 8005052:	197b      	adds	r3, r7, r5
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b25b      	sxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d13e      	bne.n	80050da <main+0x1f6>
 800505c:	1d3b      	adds	r3, r7, #4
 800505e:	789b      	ldrb	r3, [r3, #2]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d13a      	bne.n	80050da <main+0x1f6>
		 * First parameter indicates the type of data to be read
		 * BMP3_PRESS_TEMP : To read pressure and temperature data
		 * BMP3_TEMP       : To read only temperature data
		 * BMP3_PRESS      : To read only pressure data
		 */
		rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &data, &dev);
 8005064:	197c      	adds	r4, r7, r5
 8005066:	19ba      	adds	r2, r7, r6
 8005068:	2320      	movs	r3, #32
 800506a:	18fb      	adds	r3, r7, r3
 800506c:	0019      	movs	r1, r3
 800506e:	2003      	movs	r0, #3
 8005070:	f7fe f9fa 	bl	8003468 <bmp3_get_sensor_data>
 8005074:	0003      	movs	r3, r0
 8005076:	7023      	strb	r3, [r4, #0]
		bmp3_check_rslt("bmp3_get_sensor_data", rslt);
 8005078:	197b      	adds	r3, r7, r5
 800507a:	2200      	movs	r2, #0
 800507c:	569a      	ldrsb	r2, [r3, r2]
 800507e:	4b26      	ldr	r3, [pc, #152]	; (8005118 <main+0x234>)
 8005080:	0011      	movs	r1, r2
 8005082:	0018      	movs	r0, r3
 8005084:	f7ff fcae 	bl	80049e4 <bmp3_check_rslt>

		/* NOTE : Read status register again to clear data ready interrupt status */
		rslt = bmp3_get_status(&status, &dev);
 8005088:	197c      	adds	r4, r7, r5
 800508a:	19ba      	adds	r2, r7, r6
 800508c:	1d3b      	adds	r3, r7, #4
 800508e:	0011      	movs	r1, r2
 8005090:	0018      	movs	r0, r3
 8005092:	f7fe f8bb 	bl	800320c <bmp3_get_status>
 8005096:	0003      	movs	r3, r0
 8005098:	7023      	strb	r3, [r4, #0]
		bmp3_check_rslt("bmp3_get_status", rslt);
 800509a:	197b      	adds	r3, r7, r5
 800509c:	2200      	movs	r2, #0
 800509e:	569a      	ldrsb	r2, [r3, r2]
 80050a0:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <main+0x230>)
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff fc9d 	bl	80049e4 <bmp3_check_rslt>

		//#ifdef BMP3_FLOAT_COMPENSATION
		HAL_UART_Transmit(&hlpuart1, "Data:\n", 6, 100);
 80050aa:	491c      	ldr	r1, [pc, #112]	; (800511c <main+0x238>)
 80050ac:	4815      	ldr	r0, [pc, #84]	; (8005104 <main+0x220>)
 80050ae:	2364      	movs	r3, #100	; 0x64
 80050b0:	2206      	movs	r2, #6
 80050b2:	f002 f9e3 	bl	800747c <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &data.temperature, sizeof(data.temperature), 1000);
 80050b6:	23fa      	movs	r3, #250	; 0xfa
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	2420      	movs	r4, #32
 80050bc:	1939      	adds	r1, r7, r4
 80050be:	4811      	ldr	r0, [pc, #68]	; (8005104 <main+0x220>)
 80050c0:	2208      	movs	r2, #8
 80050c2:	f002 f9db 	bl	800747c <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &data.pressure,  sizeof(data.pressure), 1000);
 80050c6:	23fa      	movs	r3, #250	; 0xfa
 80050c8:	009a      	lsls	r2, r3, #2
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	3308      	adds	r3, #8
 80050ce:	0019      	movs	r1, r3
 80050d0:	480c      	ldr	r0, [pc, #48]	; (8005104 <main+0x220>)
 80050d2:	0013      	movs	r3, r2
 80050d4:	2208      	movs	r2, #8
 80050d6:	f002 f9d1 	bl	800747c <HAL_UART_Transmit>
	}

    HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80050da:	23a0      	movs	r3, #160	; 0xa0
 80050dc:	05db      	lsls	r3, r3, #23
 80050de:	2120      	movs	r1, #32
 80050e0:	0018      	movs	r0, r3
 80050e2:	f000 fc9c 	bl	8005a1e <HAL_GPIO_TogglePin>
    HAL_Delay (1000);
 80050e6:	23fa      	movs	r3, #250	; 0xfa
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 fa24 	bl	8005538 <HAL_Delay>
    HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80050f0:	e796      	b.n	8005020 <main+0x13c>
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	08009c5c 	.word	0x08009c5c
 80050f8:	08009c70 	.word	0x08009c70
 80050fc:	08009c7c 	.word	0x08009c7c
 8005100:	08009c98 	.word	0x08009c98
 8005104:	20000644 	.word	0x20000644
 8005108:	200005ec 	.word	0x200005ec
 800510c:	08009cac 	.word	0x08009cac
 8005110:	00001388 	.word	0x00001388
 8005114:	08009cb4 	.word	0x08009cb4
 8005118:	08009cc4 	.word	0x08009cc4
 800511c:	08009cdc 	.word	0x08009cdc

08005120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b099      	sub	sp, #100	; 0x64
 8005124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005126:	242c      	movs	r4, #44	; 0x2c
 8005128:	193b      	adds	r3, r7, r4
 800512a:	0018      	movs	r0, r3
 800512c:	2334      	movs	r3, #52	; 0x34
 800512e:	001a      	movs	r2, r3
 8005130:	2100      	movs	r1, #0
 8005132:	f003 ffac 	bl	800908e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005136:	2318      	movs	r3, #24
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	0018      	movs	r0, r3
 800513c:	2314      	movs	r3, #20
 800513e:	001a      	movs	r2, r3
 8005140:	2100      	movs	r1, #0
 8005142:	f003 ffa4 	bl	800908e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005146:	003b      	movs	r3, r7
 8005148:	0018      	movs	r0, r3
 800514a:	2318      	movs	r3, #24
 800514c:	001a      	movs	r2, r3
 800514e:	2100      	movs	r1, #0
 8005150:	f003 ff9d 	bl	800908e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005154:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <SystemClock_Config+0xe4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2b      	ldr	r2, [pc, #172]	; (8005208 <SystemClock_Config+0xe8>)
 800515a:	401a      	ands	r2, r3
 800515c:	4b29      	ldr	r3, [pc, #164]	; (8005204 <SystemClock_Config+0xe4>)
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	0109      	lsls	r1, r1, #4
 8005162:	430a      	orrs	r2, r1
 8005164:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005166:	0021      	movs	r1, r4
 8005168:	187b      	adds	r3, r7, r1
 800516a:	2202      	movs	r2, #2
 800516c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800516e:	187b      	adds	r3, r7, r1
 8005170:	2201      	movs	r2, #1
 8005172:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005174:	187b      	adds	r3, r7, r1
 8005176:	2210      	movs	r2, #16
 8005178:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800517a:	187b      	adds	r3, r7, r1
 800517c:	2202      	movs	r2, #2
 800517e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005180:	187b      	adds	r3, r7, r1
 8005182:	2200      	movs	r2, #0
 8005184:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8005186:	187b      	adds	r3, r7, r1
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	02d2      	lsls	r2, r2, #11
 800518c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800518e:	187b      	adds	r3, r7, r1
 8005190:	2280      	movs	r2, #128	; 0x80
 8005192:	03d2      	lsls	r2, r2, #15
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005196:	187b      	adds	r3, r7, r1
 8005198:	0018      	movs	r0, r3
 800519a:	f001 fa4f 	bl	800663c <HAL_RCC_OscConfig>
 800519e:	1e03      	subs	r3, r0, #0
 80051a0:	d001      	beq.n	80051a6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80051a2:	f000 f833 	bl	800520c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051a6:	2118      	movs	r1, #24
 80051a8:	187b      	adds	r3, r7, r1
 80051aa:	220f      	movs	r2, #15
 80051ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051ae:	187b      	adds	r3, r7, r1
 80051b0:	2203      	movs	r2, #3
 80051b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051b4:	187b      	adds	r3, r7, r1
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051ba:	187b      	adds	r3, r7, r1
 80051bc:	2280      	movs	r2, #128	; 0x80
 80051be:	00d2      	lsls	r2, r2, #3
 80051c0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051c2:	187b      	adds	r3, r7, r1
 80051c4:	2200      	movs	r2, #0
 80051c6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80051c8:	187b      	adds	r3, r7, r1
 80051ca:	2101      	movs	r1, #1
 80051cc:	0018      	movs	r0, r3
 80051ce:	f001 fdb1 	bl	8006d34 <HAL_RCC_ClockConfig>
 80051d2:	1e03      	subs	r3, r0, #0
 80051d4:	d001      	beq.n	80051da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80051d6:	f000 f819 	bl	800520c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 80051da:	003b      	movs	r3, r7
 80051dc:	220c      	movs	r2, #12
 80051de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80051e0:	003b      	movs	r3, r7
 80051e2:	2200      	movs	r2, #0
 80051e4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80051e6:	003b      	movs	r3, r7
 80051e8:	2200      	movs	r2, #0
 80051ea:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051ec:	003b      	movs	r3, r7
 80051ee:	0018      	movs	r0, r3
 80051f0:	f001 ffc4 	bl	800717c <HAL_RCCEx_PeriphCLKConfig>
 80051f4:	1e03      	subs	r3, r0, #0
 80051f6:	d001      	beq.n	80051fc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80051f8:	f000 f808 	bl	800520c <Error_Handler>
  }
}
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	46bd      	mov	sp, r7
 8005200:	b019      	add	sp, #100	; 0x64
 8005202:	bd90      	pop	{r4, r7, pc}
 8005204:	40007000 	.word	0x40007000
 8005208:	ffffe7ff 	.word	0xffffe7ff

0800520c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005210:	b672      	cpsid	i
}
 8005212:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005214:	e7fe      	b.n	8005214 <Error_Handler+0x8>
	...

08005218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_MspInit+0x34>)
 800521e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <HAL_MspInit+0x34>)
 8005222:	2101      	movs	r1, #1
 8005224:	430a      	orrs	r2, r1
 8005226:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005228:	4b08      	ldr	r3, [pc, #32]	; (800524c <HAL_MspInit+0x34>)
 800522a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522c:	4b07      	ldr	r3, [pc, #28]	; (800524c <HAL_MspInit+0x34>)
 800522e:	2180      	movs	r1, #128	; 0x80
 8005230:	0549      	lsls	r1, r1, #21
 8005232:	430a      	orrs	r2, r1
 8005234:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8005236:	2302      	movs	r3, #2
 8005238:	425b      	negs	r3, r3
 800523a:	2200      	movs	r2, #0
 800523c:	2103      	movs	r1, #3
 800523e:	0018      	movs	r0, r3
 8005240:	f000 fa30 	bl	80056a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005244:	46c0      	nop			; (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	40021000 	.word	0x40021000

08005250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005254:	e7fe      	b.n	8005254 <NMI_Handler+0x4>

08005256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800525a:	e7fe      	b.n	800525a <HardFault_Handler+0x4>

0800525c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005260:	f000 f94e 	bl	8005500 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005264:	f003 fe70 	bl	8008f48 <xTaskGetSchedulerState>
 8005268:	0003      	movs	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800526e:	f003 f9e3 	bl	8008638 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <_sbrk+0x5c>)
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <_sbrk+0x60>)
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <_sbrk+0x64>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <_sbrk+0x64>)
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <_sbrk+0x68>)
 8005298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <_sbrk+0x64>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	18d3      	adds	r3, r2, r3
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d207      	bcs.n	80052b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052a8:	f003 febe 	bl	8009028 <__errno>
 80052ac:	0003      	movs	r3, r0
 80052ae:	220c      	movs	r2, #12
 80052b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052b2:	2301      	movs	r3, #1
 80052b4:	425b      	negs	r3, r3
 80052b6:	e009      	b.n	80052cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052b8:	4b08      	ldr	r3, [pc, #32]	; (80052dc <_sbrk+0x64>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <_sbrk+0x64>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	18d2      	adds	r2, r2, r3
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <_sbrk+0x64>)
 80052c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80052ca:	68fb      	ldr	r3, [r7, #12]
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b006      	add	sp, #24
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20005000 	.word	0x20005000
 80052d8:	00000800 	.word	0x00000800
 80052dc:	20000640 	.word	0x20000640
 80052e0:	20001428 	.word	0x20001428

080052e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80052f4:	4b13      	ldr	r3, [pc, #76]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 80052f6:	4a14      	ldr	r2, [pc, #80]	; (8005348 <MX_LPUART1_UART_Init+0x58>)
 80052f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 80052fc:	2296      	movs	r2, #150	; 0x96
 80052fe:	0192      	lsls	r2, r2, #6
 8005300:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 8005304:	2280      	movs	r2, #128	; 0x80
 8005306:	0552      	lsls	r2, r2, #21
 8005308:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800530a:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 800530c:	2200      	movs	r2, #0
 800530e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 8005312:	2200      	movs	r2, #0
 8005314:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 8005318:	220c      	movs	r2, #12
 800531a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 800531e:	2200      	movs	r2, #0
 8005320:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 8005324:	2200      	movs	r2, #0
 8005326:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 800532a:	2200      	movs	r2, #0
 800532c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <MX_LPUART1_UART_Init+0x54>)
 8005330:	0018      	movs	r0, r3
 8005332:	f002 f84f 	bl	80073d4 <HAL_UART_Init>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d001      	beq.n	800533e <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 800533a:	f7ff ff67 	bl	800520c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000644 	.word	0x20000644
 8005348:	40004800 	.word	0x40004800

0800534c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005354:	240c      	movs	r4, #12
 8005356:	193b      	adds	r3, r7, r4
 8005358:	0018      	movs	r0, r3
 800535a:	2314      	movs	r3, #20
 800535c:	001a      	movs	r2, r3
 800535e:	2100      	movs	r1, #0
 8005360:	f003 fe95 	bl	800908e <memset>
  if(uartHandle->Instance==LPUART1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <HAL_UART_MspInit+0x7c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d128      	bne.n	80053c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800536e:	4b17      	ldr	r3, [pc, #92]	; (80053cc <HAL_UART_MspInit+0x80>)
 8005370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_UART_MspInit+0x80>)
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	02c9      	lsls	r1, r1, #11
 8005378:	430a      	orrs	r2, r1
 800537a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800537c:	4b13      	ldr	r3, [pc, #76]	; (80053cc <HAL_UART_MspInit+0x80>)
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_UART_MspInit+0x80>)
 8005382:	2104      	movs	r1, #4
 8005384:	430a      	orrs	r2, r1
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c
 8005388:	4b10      	ldr	r3, [pc, #64]	; (80053cc <HAL_UART_MspInit+0x80>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	2204      	movs	r2, #4
 800538e:	4013      	ands	r3, r2
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8005394:	0021      	movs	r1, r4
 8005396:	187b      	adds	r3, r7, r1
 8005398:	2203      	movs	r2, #3
 800539a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539c:	187b      	adds	r3, r7, r1
 800539e:	2202      	movs	r2, #2
 80053a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	2200      	movs	r2, #0
 80053a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a8:	187b      	adds	r3, r7, r1
 80053aa:	2203      	movs	r2, #3
 80053ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	2206      	movs	r2, #6
 80053b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053b4:	187b      	adds	r3, r7, r1
 80053b6:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <HAL_UART_MspInit+0x84>)
 80053b8:	0019      	movs	r1, r3
 80053ba:	0010      	movs	r0, r2
 80053bc:	f000 f994 	bl	80056e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b009      	add	sp, #36	; 0x24
 80053c6:	bd90      	pop	{r4, r7, pc}
 80053c8:	40004800 	.word	0x40004800
 80053cc:	40021000 	.word	0x40021000
 80053d0:	50000800 	.word	0x50000800

080053d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80053d4:	4813      	ldr	r0, [pc, #76]	; (8005424 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80053d6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80053d8:	f7ff ff84 	bl	80052e4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80053dc:	4812      	ldr	r0, [pc, #72]	; (8005428 <LoopForever+0x6>)
    LDR R1, [R0]
 80053de:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80053e0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80053e2:	4a12      	ldr	r2, [pc, #72]	; (800542c <LoopForever+0xa>)
    CMP R1, R2
 80053e4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80053e6:	d105      	bne.n	80053f4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80053e8:	4811      	ldr	r0, [pc, #68]	; (8005430 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80053ea:	4912      	ldr	r1, [pc, #72]	; (8005434 <LoopForever+0x12>)
    STR R1, [R0]
 80053ec:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80053ee:	4812      	ldr	r0, [pc, #72]	; (8005438 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80053f0:	4912      	ldr	r1, [pc, #72]	; (800543c <LoopForever+0x1a>)
    STR R1, [R0]
 80053f2:	6001      	str	r1, [r0, #0]

080053f4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053f4:	4812      	ldr	r0, [pc, #72]	; (8005440 <LoopForever+0x1e>)
  ldr r1, =_edata
 80053f6:	4913      	ldr	r1, [pc, #76]	; (8005444 <LoopForever+0x22>)
  ldr r2, =_sidata
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <LoopForever+0x26>)
  movs r3, #0
 80053fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053fc:	e002      	b.n	8005404 <LoopCopyDataInit>

080053fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005402:	3304      	adds	r3, #4

08005404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005408:	d3f9      	bcc.n	80053fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800540a:	4a10      	ldr	r2, [pc, #64]	; (800544c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800540c:	4c10      	ldr	r4, [pc, #64]	; (8005450 <LoopForever+0x2e>)
  movs r3, #0
 800540e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005410:	e001      	b.n	8005416 <LoopFillZerobss>

08005412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005414:	3204      	adds	r2, #4

08005416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005418:	d3fb      	bcc.n	8005412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800541a:	f003 fe0b 	bl	8009034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800541e:	f7ff fd61 	bl	8004ee4 <main>

08005422 <LoopForever>:

LoopForever:
    b LoopForever
 8005422:	e7fe      	b.n	8005422 <LoopForever>
   ldr   r0, =_estack
 8005424:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8005428:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800542c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8005430:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8005434:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8005438:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800543c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8005440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005444:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005448:	08009e84 	.word	0x08009e84
  ldr r2, =_sbss
 800544c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8005450:	20001424 	.word	0x20001424

08005454 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005454:	e7fe      	b.n	8005454 <ADC1_IRQHandler>
	...

08005458 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800545e:	1dfb      	adds	r3, r7, #7
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_Init+0x3c>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <HAL_Init+0x3c>)
 800546a:	2140      	movs	r1, #64	; 0x40
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005470:	2003      	movs	r0, #3
 8005472:	f000 f811 	bl	8005498 <HAL_InitTick>
 8005476:	1e03      	subs	r3, r0, #0
 8005478:	d003      	beq.n	8005482 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800547a:	1dfb      	adds	r3, r7, #7
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e001      	b.n	8005486 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005482:	f7ff fec9 	bl	8005218 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005486:	1dfb      	adds	r3, r7, #7
 8005488:	781b      	ldrb	r3, [r3, #0]
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	b002      	add	sp, #8
 8005490:	bd80      	pop	{r7, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	40022000 	.word	0x40022000

08005498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <HAL_InitTick+0x5c>)
 80054a2:	681c      	ldr	r4, [r3, #0]
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <HAL_InitTick+0x60>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	0019      	movs	r1, r3
 80054aa:	23fa      	movs	r3, #250	; 0xfa
 80054ac:	0098      	lsls	r0, r3, #2
 80054ae:	f7fa fe3d 	bl	800012c <__udivsi3>
 80054b2:	0003      	movs	r3, r0
 80054b4:	0019      	movs	r1, r3
 80054b6:	0020      	movs	r0, r4
 80054b8:	f7fa fe38 	bl	800012c <__udivsi3>
 80054bc:	0003      	movs	r3, r0
 80054be:	0018      	movs	r0, r3
 80054c0:	f000 f905 	bl	80056ce <HAL_SYSTICK_Config>
 80054c4:	1e03      	subs	r3, r0, #0
 80054c6:	d001      	beq.n	80054cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e00f      	b.n	80054ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d80b      	bhi.n	80054ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	2301      	movs	r3, #1
 80054d6:	425b      	negs	r3, r3
 80054d8:	2200      	movs	r2, #0
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 f8e2 	bl	80056a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_InitTick+0x64>)
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e000      	b.n	80054ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
}
 80054ec:	0018      	movs	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b003      	add	sp, #12
 80054f2:	bd90      	pop	{r4, r7, pc}
 80054f4:	20000000 	.word	0x20000000
 80054f8:	20000008 	.word	0x20000008
 80054fc:	20000004 	.word	0x20000004

08005500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_IncTick+0x1c>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	001a      	movs	r2, r3
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_IncTick+0x20>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	18d2      	adds	r2, r2, r3
 8005510:	4b03      	ldr	r3, [pc, #12]	; (8005520 <HAL_IncTick+0x20>)
 8005512:	601a      	str	r2, [r3, #0]
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	20000008 	.word	0x20000008
 8005520:	200006cc 	.word	0x200006cc

08005524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  return uwTick;
 8005528:	4b02      	ldr	r3, [pc, #8]	; (8005534 <HAL_GetTick+0x10>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	200006cc 	.word	0x200006cc

08005538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005540:	f7ff fff0 	bl	8005524 <HAL_GetTick>
 8005544:	0003      	movs	r3, r0
 8005546:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3301      	adds	r3, #1
 8005550:	d005      	beq.n	800555e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <HAL_Delay+0x44>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	001a      	movs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	189b      	adds	r3, r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	f7ff ffe0 	bl	8005524 <HAL_GetTick>
 8005564:	0002      	movs	r2, r0
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d8f7      	bhi.n	8005560 <HAL_Delay+0x28>
  {
  }
}
 8005570:	46c0      	nop			; (mov r8, r8)
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	46bd      	mov	sp, r7
 8005576:	b004      	add	sp, #16
 8005578:	bd80      	pop	{r7, pc}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	20000008 	.word	0x20000008

08005580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	0002      	movs	r2, r0
 8005588:	6039      	str	r1, [r7, #0]
 800558a:	1dfb      	adds	r3, r7, #7
 800558c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800558e:	1dfb      	adds	r3, r7, #7
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b7f      	cmp	r3, #127	; 0x7f
 8005594:	d828      	bhi.n	80055e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005596:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <__NVIC_SetPriority+0xd4>)
 8005598:	1dfb      	adds	r3, r7, #7
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	b25b      	sxtb	r3, r3
 800559e:	089b      	lsrs	r3, r3, #2
 80055a0:	33c0      	adds	r3, #192	; 0xc0
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	589b      	ldr	r3, [r3, r2]
 80055a6:	1dfa      	adds	r2, r7, #7
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	0011      	movs	r1, r2
 80055ac:	2203      	movs	r2, #3
 80055ae:	400a      	ands	r2, r1
 80055b0:	00d2      	lsls	r2, r2, #3
 80055b2:	21ff      	movs	r1, #255	; 0xff
 80055b4:	4091      	lsls	r1, r2
 80055b6:	000a      	movs	r2, r1
 80055b8:	43d2      	mvns	r2, r2
 80055ba:	401a      	ands	r2, r3
 80055bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	019b      	lsls	r3, r3, #6
 80055c2:	22ff      	movs	r2, #255	; 0xff
 80055c4:	401a      	ands	r2, r3
 80055c6:	1dfb      	adds	r3, r7, #7
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	0018      	movs	r0, r3
 80055cc:	2303      	movs	r3, #3
 80055ce:	4003      	ands	r3, r0
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055d4:	481f      	ldr	r0, [pc, #124]	; (8005654 <__NVIC_SetPriority+0xd4>)
 80055d6:	1dfb      	adds	r3, r7, #7
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	b25b      	sxtb	r3, r3
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	430a      	orrs	r2, r1
 80055e0:	33c0      	adds	r3, #192	; 0xc0
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80055e6:	e031      	b.n	800564c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <__NVIC_SetPriority+0xd8>)
 80055ea:	1dfb      	adds	r3, r7, #7
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	0019      	movs	r1, r3
 80055f0:	230f      	movs	r3, #15
 80055f2:	400b      	ands	r3, r1
 80055f4:	3b08      	subs	r3, #8
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	3306      	adds	r3, #6
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	18d3      	adds	r3, r2, r3
 80055fe:	3304      	adds	r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	1dfa      	adds	r2, r7, #7
 8005604:	7812      	ldrb	r2, [r2, #0]
 8005606:	0011      	movs	r1, r2
 8005608:	2203      	movs	r2, #3
 800560a:	400a      	ands	r2, r1
 800560c:	00d2      	lsls	r2, r2, #3
 800560e:	21ff      	movs	r1, #255	; 0xff
 8005610:	4091      	lsls	r1, r2
 8005612:	000a      	movs	r2, r1
 8005614:	43d2      	mvns	r2, r2
 8005616:	401a      	ands	r2, r3
 8005618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	22ff      	movs	r2, #255	; 0xff
 8005620:	401a      	ands	r2, r3
 8005622:	1dfb      	adds	r3, r7, #7
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	0018      	movs	r0, r3
 8005628:	2303      	movs	r3, #3
 800562a:	4003      	ands	r3, r0
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005630:	4809      	ldr	r0, [pc, #36]	; (8005658 <__NVIC_SetPriority+0xd8>)
 8005632:	1dfb      	adds	r3, r7, #7
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	001c      	movs	r4, r3
 8005638:	230f      	movs	r3, #15
 800563a:	4023      	ands	r3, r4
 800563c:	3b08      	subs	r3, #8
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	430a      	orrs	r2, r1
 8005642:	3306      	adds	r3, #6
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	18c3      	adds	r3, r0, r3
 8005648:	3304      	adds	r3, #4
 800564a:	601a      	str	r2, [r3, #0]
}
 800564c:	46c0      	nop			; (mov r8, r8)
 800564e:	46bd      	mov	sp, r7
 8005650:	b003      	add	sp, #12
 8005652:	bd90      	pop	{r4, r7, pc}
 8005654:	e000e100 	.word	0xe000e100
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1e5a      	subs	r2, r3, #1
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	045b      	lsls	r3, r3, #17
 800566c:	429a      	cmp	r2, r3
 800566e:	d301      	bcc.n	8005674 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005670:	2301      	movs	r3, #1
 8005672:	e010      	b.n	8005696 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <SysTick_Config+0x44>)
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	3a01      	subs	r2, #1
 800567a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800567c:	2301      	movs	r3, #1
 800567e:	425b      	negs	r3, r3
 8005680:	2103      	movs	r1, #3
 8005682:	0018      	movs	r0, r3
 8005684:	f7ff ff7c 	bl	8005580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <SysTick_Config+0x44>)
 800568a:	2200      	movs	r2, #0
 800568c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800568e:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <SysTick_Config+0x44>)
 8005690:	2207      	movs	r2, #7
 8005692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005694:	2300      	movs	r3, #0
}
 8005696:	0018      	movs	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	b002      	add	sp, #8
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	e000e010 	.word	0xe000e010

080056a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	210f      	movs	r1, #15
 80056b0:	187b      	adds	r3, r7, r1
 80056b2:	1c02      	adds	r2, r0, #0
 80056b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	187b      	adds	r3, r7, r1
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	0011      	movs	r1, r2
 80056c0:	0018      	movs	r0, r3
 80056c2:	f7ff ff5d 	bl	8005580 <__NVIC_SetPriority>
}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b004      	add	sp, #16
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0018      	movs	r0, r3
 80056da:	f7ff ffbf 	bl	800565c <SysTick_Config>
 80056de:	0003      	movs	r3, r0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b002      	add	sp, #8
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80056fe:	e155      	b.n	80059ac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4091      	lsls	r1, r2
 800570a:	000a      	movs	r2, r1
 800570c:	4013      	ands	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d100      	bne.n	8005718 <HAL_GPIO_Init+0x30>
 8005716:	e146      	b.n	80059a6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2203      	movs	r2, #3
 800571e:	4013      	ands	r3, r2
 8005720:	2b01      	cmp	r3, #1
 8005722:	d005      	beq.n	8005730 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2203      	movs	r2, #3
 800572a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800572c:	2b02      	cmp	r3, #2
 800572e:	d130      	bne.n	8005792 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	409a      	lsls	r2, r3
 800573e:	0013      	movs	r3, r2
 8005740:	43da      	mvns	r2, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	409a      	lsls	r2, r3
 8005752:	0013      	movs	r3, r2
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005766:	2201      	movs	r2, #1
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	409a      	lsls	r2, r3
 800576c:	0013      	movs	r3, r2
 800576e:	43da      	mvns	r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4013      	ands	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	2201      	movs	r2, #1
 800577e:	401a      	ands	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	409a      	lsls	r2, r3
 8005784:	0013      	movs	r3, r2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2203      	movs	r2, #3
 8005798:	4013      	ands	r3, r2
 800579a:	2b03      	cmp	r3, #3
 800579c:	d017      	beq.n	80057ce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	2203      	movs	r2, #3
 80057aa:	409a      	lsls	r2, r3
 80057ac:	0013      	movs	r3, r2
 80057ae:	43da      	mvns	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4013      	ands	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	409a      	lsls	r2, r3
 80057c0:	0013      	movs	r3, r2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2203      	movs	r2, #3
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d123      	bne.n	8005822 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	08da      	lsrs	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3208      	adds	r2, #8
 80057e2:	0092      	lsls	r2, r2, #2
 80057e4:	58d3      	ldr	r3, [r2, r3]
 80057e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2207      	movs	r2, #7
 80057ec:	4013      	ands	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	220f      	movs	r2, #15
 80057f2:	409a      	lsls	r2, r3
 80057f4:	0013      	movs	r3, r2
 80057f6:	43da      	mvns	r2, r3
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4013      	ands	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2107      	movs	r1, #7
 8005806:	400b      	ands	r3, r1
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	409a      	lsls	r2, r3
 800580c:	0013      	movs	r3, r2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	08da      	lsrs	r2, r3, #3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3208      	adds	r2, #8
 800581c:	0092      	lsls	r2, r2, #2
 800581e:	6939      	ldr	r1, [r7, #16]
 8005820:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2203      	movs	r2, #3
 800582e:	409a      	lsls	r2, r3
 8005830:	0013      	movs	r3, r2
 8005832:	43da      	mvns	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2203      	movs	r2, #3
 8005840:	401a      	ands	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	409a      	lsls	r2, r3
 8005848:	0013      	movs	r3, r2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	23c0      	movs	r3, #192	; 0xc0
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	4013      	ands	r3, r2
 8005860:	d100      	bne.n	8005864 <HAL_GPIO_Init+0x17c>
 8005862:	e0a0      	b.n	80059a6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005864:	4b57      	ldr	r3, [pc, #348]	; (80059c4 <HAL_GPIO_Init+0x2dc>)
 8005866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005868:	4b56      	ldr	r3, [pc, #344]	; (80059c4 <HAL_GPIO_Init+0x2dc>)
 800586a:	2101      	movs	r1, #1
 800586c:	430a      	orrs	r2, r1
 800586e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005870:	4a55      	ldr	r2, [pc, #340]	; (80059c8 <HAL_GPIO_Init+0x2e0>)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	089b      	lsrs	r3, r3, #2
 8005876:	3302      	adds	r3, #2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	589b      	ldr	r3, [r3, r2]
 800587c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2203      	movs	r2, #3
 8005882:	4013      	ands	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	220f      	movs	r2, #15
 8005888:	409a      	lsls	r2, r3
 800588a:	0013      	movs	r3, r2
 800588c:	43da      	mvns	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	4013      	ands	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	23a0      	movs	r3, #160	; 0xa0
 8005898:	05db      	lsls	r3, r3, #23
 800589a:	429a      	cmp	r2, r3
 800589c:	d01f      	beq.n	80058de <HAL_GPIO_Init+0x1f6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a4a      	ldr	r2, [pc, #296]	; (80059cc <HAL_GPIO_Init+0x2e4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d019      	beq.n	80058da <HAL_GPIO_Init+0x1f2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a49      	ldr	r2, [pc, #292]	; (80059d0 <HAL_GPIO_Init+0x2e8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <HAL_GPIO_Init+0x1ee>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a48      	ldr	r2, [pc, #288]	; (80059d4 <HAL_GPIO_Init+0x2ec>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00d      	beq.n	80058d2 <HAL_GPIO_Init+0x1ea>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a47      	ldr	r2, [pc, #284]	; (80059d8 <HAL_GPIO_Init+0x2f0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <HAL_GPIO_Init+0x1e6>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a46      	ldr	r2, [pc, #280]	; (80059dc <HAL_GPIO_Init+0x2f4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <HAL_GPIO_Init+0x1e2>
 80058c6:	2305      	movs	r3, #5
 80058c8:	e00a      	b.n	80058e0 <HAL_GPIO_Init+0x1f8>
 80058ca:	2306      	movs	r3, #6
 80058cc:	e008      	b.n	80058e0 <HAL_GPIO_Init+0x1f8>
 80058ce:	2304      	movs	r3, #4
 80058d0:	e006      	b.n	80058e0 <HAL_GPIO_Init+0x1f8>
 80058d2:	2303      	movs	r3, #3
 80058d4:	e004      	b.n	80058e0 <HAL_GPIO_Init+0x1f8>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e002      	b.n	80058e0 <HAL_GPIO_Init+0x1f8>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_GPIO_Init+0x1f8>
 80058de:	2300      	movs	r3, #0
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	2103      	movs	r1, #3
 80058e4:	400a      	ands	r2, r1
 80058e6:	0092      	lsls	r2, r2, #2
 80058e8:	4093      	lsls	r3, r2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058f0:	4935      	ldr	r1, [pc, #212]	; (80059c8 <HAL_GPIO_Init+0x2e0>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	3302      	adds	r3, #2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058fe:	4b38      	ldr	r3, [pc, #224]	; (80059e0 <HAL_GPIO_Init+0x2f8>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	43da      	mvns	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4013      	ands	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	035b      	lsls	r3, r3, #13
 8005916:	4013      	ands	r3, r2
 8005918:	d003      	beq.n	8005922 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005922:	4b2f      	ldr	r3, [pc, #188]	; (80059e0 <HAL_GPIO_Init+0x2f8>)
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005928:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <HAL_GPIO_Init+0x2f8>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	43da      	mvns	r2, r3
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4013      	ands	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	039b      	lsls	r3, r3, #14
 8005940:	4013      	ands	r3, r2
 8005942:	d003      	beq.n	800594c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800594c:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <HAL_GPIO_Init+0x2f8>)
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005952:	4b23      	ldr	r3, [pc, #140]	; (80059e0 <HAL_GPIO_Init+0x2f8>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	43da      	mvns	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4013      	ands	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	029b      	lsls	r3, r3, #10
 800596a:	4013      	ands	r3, r2
 800596c:	d003      	beq.n	8005976 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005976:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <HAL_GPIO_Init+0x2f8>)
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800597c:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <HAL_GPIO_Init+0x2f8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	43da      	mvns	r2, r3
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4013      	ands	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	025b      	lsls	r3, r3, #9
 8005994:	4013      	ands	r3, r2
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80059a0:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <HAL_GPIO_Init+0x2f8>)
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3301      	adds	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	40da      	lsrs	r2, r3
 80059b4:	1e13      	subs	r3, r2, #0
 80059b6:	d000      	beq.n	80059ba <HAL_GPIO_Init+0x2d2>
 80059b8:	e6a2      	b.n	8005700 <HAL_GPIO_Init+0x18>
  }
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46c0      	nop			; (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	b006      	add	sp, #24
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40010000 	.word	0x40010000
 80059cc:	50000400 	.word	0x50000400
 80059d0:	50000800 	.word	0x50000800
 80059d4:	50000c00 	.word	0x50000c00
 80059d8:	50001000 	.word	0x50001000
 80059dc:	50001c00 	.word	0x50001c00
 80059e0:	40010400 	.word	0x40010400

080059e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	0008      	movs	r0, r1
 80059ee:	0011      	movs	r1, r2
 80059f0:	1cbb      	adds	r3, r7, #2
 80059f2:	1c02      	adds	r2, r0, #0
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	1c7b      	adds	r3, r7, #1
 80059f8:	1c0a      	adds	r2, r1, #0
 80059fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059fc:	1c7b      	adds	r3, r7, #1
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a04:	1cbb      	adds	r3, r7, #2
 8005a06:	881a      	ldrh	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005a0c:	e003      	b.n	8005a16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005a0e:	1cbb      	adds	r3, r7, #2
 8005a10:	881a      	ldrh	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	000a      	movs	r2, r1
 8005a28:	1cbb      	adds	r3, r7, #2
 8005a2a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a32:	1cbb      	adds	r3, r7, #2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	041a      	lsls	r2, r3, #16
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	1cb9      	adds	r1, r7, #2
 8005a42:	8809      	ldrh	r1, [r1, #0]
 8005a44:	400b      	ands	r3, r1
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	619a      	str	r2, [r3, #24]
}
 8005a4c:	46c0      	nop			; (mov r8, r8)
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b004      	add	sp, #16
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e082      	b.n	8005b6c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2241      	movs	r2, #65	; 0x41
 8005a6a:	5c9b      	ldrb	r3, [r3, r2]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d107      	bne.n	8005a82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2240      	movs	r2, #64	; 0x40
 8005a76:	2100      	movs	r1, #0
 8005a78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7ff f9ed 	bl	8004e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2241      	movs	r2, #65	; 0x41
 8005a86:	2124      	movs	r1, #36	; 0x24
 8005a88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2101      	movs	r1, #1
 8005a96:	438a      	bics	r2, r1
 8005a98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4934      	ldr	r1, [pc, #208]	; (8005b74 <HAL_I2C_Init+0x120>)
 8005aa4:	400a      	ands	r2, r1
 8005aa6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4931      	ldr	r1, [pc, #196]	; (8005b78 <HAL_I2C_Init+0x124>)
 8005ab4:	400a      	ands	r2, r1
 8005ab6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d108      	bne.n	8005ad2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	0209      	lsls	r1, r1, #8
 8005acc:	430a      	orrs	r2, r1
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	e007      	b.n	8005ae2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2184      	movs	r1, #132	; 0x84
 8005adc:	0209      	lsls	r1, r1, #8
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d104      	bne.n	8005af4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	0112      	lsls	r2, r2, #4
 8005af2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	491f      	ldr	r1, [pc, #124]	; (8005b7c <HAL_I2C_Init+0x128>)
 8005b00:	430a      	orrs	r2, r1
 8005b02:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	491a      	ldr	r1, [pc, #104]	; (8005b78 <HAL_I2C_Init+0x124>)
 8005b10:	400a      	ands	r2, r1
 8005b12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69d9      	ldr	r1, [r3, #28]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2101      	movs	r1, #1
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2241      	movs	r2, #65	; 0x41
 8005b58:	2120      	movs	r1, #32
 8005b5a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2242      	movs	r2, #66	; 0x42
 8005b66:	2100      	movs	r1, #0
 8005b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b002      	add	sp, #8
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	f0ffffff 	.word	0xf0ffffff
 8005b78:	ffff7fff 	.word	0xffff7fff
 8005b7c:	02008000 	.word	0x02008000

08005b80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b80:	b590      	push	{r4, r7, lr}
 8005b82:	b089      	sub	sp, #36	; 0x24
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	0008      	movs	r0, r1
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	230a      	movs	r3, #10
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	1c02      	adds	r2, r0, #0
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	2308      	movs	r3, #8
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	1c0a      	adds	r2, r1, #0
 8005b9c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2241      	movs	r2, #65	; 0x41
 8005ba2:	5c9b      	ldrb	r3, [r3, r2]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d000      	beq.n	8005bac <HAL_I2C_Master_Transmit+0x2c>
 8005baa:	e0e7      	b.n	8005d7c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2240      	movs	r2, #64	; 0x40
 8005bb0:	5c9b      	ldrb	r3, [r3, r2]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_I2C_Master_Transmit+0x3a>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e0e1      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x1fe>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2240      	movs	r2, #64	; 0x40
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bc2:	f7ff fcaf 	bl	8005524 <HAL_GetTick>
 8005bc6:	0003      	movs	r3, r0
 8005bc8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bca:	2380      	movs	r3, #128	; 0x80
 8005bcc:	0219      	lsls	r1, r3, #8
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2319      	movs	r3, #25
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f000 fa04 	bl	8005fe4 <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	1e03      	subs	r3, r0, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0cc      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2241      	movs	r2, #65	; 0x41
 8005be8:	2121      	movs	r1, #33	; 0x21
 8005bea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2242      	movs	r2, #66	; 0x42
 8005bf0:	2110      	movs	r1, #16
 8005bf2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2208      	movs	r2, #8
 8005c04:	18ba      	adds	r2, r7, r2
 8005c06:	8812      	ldrh	r2, [r2, #0]
 8005c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2bff      	cmp	r3, #255	; 0xff
 8005c18:	d911      	bls.n	8005c3e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	22ff      	movs	r2, #255	; 0xff
 8005c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	045c      	lsls	r4, r3, #17
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	8819      	ldrh	r1, [r3, #0]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	4b55      	ldr	r3, [pc, #340]	; (8005d88 <HAL_I2C_Master_Transmit+0x208>)
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	0023      	movs	r3, r4
 8005c38:	f000 fc2e 	bl	8006498 <I2C_TransferConfig>
 8005c3c:	e075      	b.n	8005d2a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	049c      	lsls	r4, r3, #18
 8005c52:	230a      	movs	r3, #10
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	8819      	ldrh	r1, [r3, #0]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	4b4b      	ldr	r3, [pc, #300]	; (8005d88 <HAL_I2C_Master_Transmit+0x208>)
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	0023      	movs	r3, r4
 8005c60:	f000 fc1a 	bl	8006498 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c64:	e061      	b.n	8005d2a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 fa07 	bl	8006080 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c72:	1e03      	subs	r3, r0, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e081      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	781a      	ldrb	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d03a      	beq.n	8005d2a <HAL_I2C_Master_Transmit+0x1aa>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d136      	bne.n	8005d2a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	0013      	movs	r3, r2
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2180      	movs	r1, #128	; 0x80
 8005cca:	f000 f98b 	bl	8005fe4 <I2C_WaitOnFlagUntilTimeout>
 8005cce:	1e03      	subs	r3, r0, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e053      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2bff      	cmp	r3, #255	; 0xff
 8005cde:	d911      	bls.n	8005d04 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	22ff      	movs	r2, #255	; 0xff
 8005ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	045c      	lsls	r4, r3, #17
 8005cf0:	230a      	movs	r3, #10
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	8819      	ldrh	r1, [r3, #0]
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	0023      	movs	r3, r4
 8005cfe:	f000 fbcb 	bl	8006498 <I2C_TransferConfig>
 8005d02:	e012      	b.n	8005d2a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	049c      	lsls	r4, r3, #18
 8005d18:	230a      	movs	r3, #10
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	8819      	ldrh	r1, [r3, #0]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	2300      	movs	r3, #0
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	0023      	movs	r3, r4
 8005d26:	f000 fbb7 	bl	8006498 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d198      	bne.n	8005c66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f000 f9e6 	bl	800610c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d40:	1e03      	subs	r3, r0, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e01a      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	490c      	ldr	r1, [pc, #48]	; (8005d8c <HAL_I2C_Master_Transmit+0x20c>)
 8005d5c:	400a      	ands	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2241      	movs	r2, #65	; 0x41
 8005d64:	2120      	movs	r1, #32
 8005d66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2242      	movs	r2, #66	; 0x42
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2240      	movs	r2, #64	; 0x40
 8005d74:	2100      	movs	r1, #0
 8005d76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e000      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005d7c:	2302      	movs	r3, #2
  }
}
 8005d7e:	0018      	movs	r0, r3
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b007      	add	sp, #28
 8005d84:	bd90      	pop	{r4, r7, pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	80002000 	.word	0x80002000
 8005d8c:	fe00e800 	.word	0xfe00e800

08005d90 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b089      	sub	sp, #36	; 0x24
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	0008      	movs	r0, r1
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	230a      	movs	r3, #10
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	1c02      	adds	r2, r0, #0
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	2308      	movs	r3, #8
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	1c0a      	adds	r2, r1, #0
 8005dac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2241      	movs	r2, #65	; 0x41
 8005db2:	5c9b      	ldrb	r3, [r3, r2]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d000      	beq.n	8005dbc <HAL_I2C_Master_Receive+0x2c>
 8005dba:	e0e8      	b.n	8005f8e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2240      	movs	r2, #64	; 0x40
 8005dc0:	5c9b      	ldrb	r3, [r3, r2]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_I2C_Master_Receive+0x3a>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e0e2      	b.n	8005f90 <HAL_I2C_Master_Receive+0x200>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2240      	movs	r2, #64	; 0x40
 8005dce:	2101      	movs	r1, #1
 8005dd0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dd2:	f7ff fba7 	bl	8005524 <HAL_GetTick>
 8005dd6:	0003      	movs	r3, r0
 8005dd8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	0219      	lsls	r1, r3, #8
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2319      	movs	r3, #25
 8005de6:	2201      	movs	r2, #1
 8005de8:	f000 f8fc 	bl	8005fe4 <I2C_WaitOnFlagUntilTimeout>
 8005dec:	1e03      	subs	r3, r0, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0cd      	b.n	8005f90 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2241      	movs	r2, #65	; 0x41
 8005df8:	2122      	movs	r1, #34	; 0x22
 8005dfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2242      	movs	r2, #66	; 0x42
 8005e00:	2110      	movs	r1, #16
 8005e02:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2208      	movs	r2, #8
 8005e14:	18ba      	adds	r2, r7, r2
 8005e16:	8812      	ldrh	r2, [r2, #0]
 8005e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2bff      	cmp	r3, #255	; 0xff
 8005e28:	d911      	bls.n	8005e4e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	22ff      	movs	r2, #255	; 0xff
 8005e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	045c      	lsls	r4, r3, #17
 8005e3a:	230a      	movs	r3, #10
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	8819      	ldrh	r1, [r3, #0]
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	4b55      	ldr	r3, [pc, #340]	; (8005f98 <HAL_I2C_Master_Receive+0x208>)
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	0023      	movs	r3, r4
 8005e48:	f000 fb26 	bl	8006498 <I2C_TransferConfig>
 8005e4c:	e076      	b.n	8005f3c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	049c      	lsls	r4, r3, #18
 8005e62:	230a      	movs	r3, #10
 8005e64:	18fb      	adds	r3, r7, r3
 8005e66:	8819      	ldrh	r1, [r3, #0]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	4b4b      	ldr	r3, [pc, #300]	; (8005f98 <HAL_I2C_Master_Receive+0x208>)
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	0023      	movs	r3, r4
 8005e70:	f000 fb12 	bl	8006498 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005e74:	e062      	b.n	8005f3c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 f989 	bl	8006194 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e82:	1e03      	subs	r3, r0, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e082      	b.n	8005f90 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d03a      	beq.n	8005f3c <HAL_I2C_Master_Receive+0x1ac>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d136      	bne.n	8005f3c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	0013      	movs	r3, r2
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	f000 f882 	bl	8005fe4 <I2C_WaitOnFlagUntilTimeout>
 8005ee0:	1e03      	subs	r3, r0, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e053      	b.n	8005f90 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2bff      	cmp	r3, #255	; 0xff
 8005ef0:	d911      	bls.n	8005f16 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	22ff      	movs	r2, #255	; 0xff
 8005ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	045c      	lsls	r4, r3, #17
 8005f02:	230a      	movs	r3, #10
 8005f04:	18fb      	adds	r3, r7, r3
 8005f06:	8819      	ldrh	r1, [r3, #0]
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	0023      	movs	r3, r4
 8005f10:	f000 fac2 	bl	8006498 <I2C_TransferConfig>
 8005f14:	e012      	b.n	8005f3c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	049c      	lsls	r4, r3, #18
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	8819      	ldrh	r1, [r3, #0]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	2300      	movs	r3, #0
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	0023      	movs	r3, r4
 8005f38:	f000 faae 	bl	8006498 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d197      	bne.n	8005e76 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f000 f8dd 	bl	800610c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f52:	1e03      	subs	r3, r0, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01a      	b.n	8005f90 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	490b      	ldr	r1, [pc, #44]	; (8005f9c <HAL_I2C_Master_Receive+0x20c>)
 8005f6e:	400a      	ands	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2241      	movs	r2, #65	; 0x41
 8005f76:	2120      	movs	r1, #32
 8005f78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2242      	movs	r2, #66	; 0x42
 8005f7e:	2100      	movs	r1, #0
 8005f80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2240      	movs	r2, #64	; 0x40
 8005f86:	2100      	movs	r1, #0
 8005f88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e000      	b.n	8005f90 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
  }
}
 8005f90:	0018      	movs	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b007      	add	sp, #28
 8005f96:	bd90      	pop	{r4, r7, pc}
 8005f98:	80002400 	.word	0x80002400
 8005f9c:	fe00e800 	.word	0xfe00e800

08005fa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d103      	bne.n	8005fbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d007      	beq.n	8005fdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	619a      	str	r2, [r3, #24]
  }
}
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b002      	add	sp, #8
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	1dfb      	adds	r3, r7, #7
 8005ff2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff4:	e030      	b.n	8006058 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	d02d      	beq.n	8006058 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffc:	f7ff fa92 	bl	8005524 <HAL_GetTick>
 8006000:	0002      	movs	r2, r0
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d122      	bne.n	8006058 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	4013      	ands	r3, r2
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	425a      	negs	r2, r3
 8006022:	4153      	adcs	r3, r2
 8006024:	b2db      	uxtb	r3, r3
 8006026:	001a      	movs	r2, r3
 8006028:	1dfb      	adds	r3, r7, #7
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d113      	bne.n	8006058 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006034:	2220      	movs	r2, #32
 8006036:	431a      	orrs	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2241      	movs	r2, #65	; 0x41
 8006040:	2120      	movs	r1, #32
 8006042:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2242      	movs	r2, #66	; 0x42
 8006048:	2100      	movs	r1, #0
 800604a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2240      	movs	r2, #64	; 0x40
 8006050:	2100      	movs	r1, #0
 8006052:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e00f      	b.n	8006078 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	425a      	negs	r2, r3
 8006068:	4153      	adcs	r3, r2
 800606a:	b2db      	uxtb	r3, r3
 800606c:	001a      	movs	r2, r3
 800606e:	1dfb      	adds	r3, r7, #7
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d0bf      	beq.n	8005ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	0018      	movs	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	b004      	add	sp, #16
 800607e:	bd80      	pop	{r7, pc}

08006080 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800608c:	e032      	b.n	80060f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	0018      	movs	r0, r3
 8006096:	f000 f8ff 	bl	8006298 <I2C_IsErrorOccurred>
 800609a:	1e03      	subs	r3, r0, #0
 800609c:	d001      	beq.n	80060a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e030      	b.n	8006104 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	3301      	adds	r3, #1
 80060a6:	d025      	beq.n	80060f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a8:	f7ff fa3c 	bl	8005524 <HAL_GetTick>
 80060ac:	0002      	movs	r2, r0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d302      	bcc.n	80060be <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11a      	bne.n	80060f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	2202      	movs	r2, #2
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d013      	beq.n	80060f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d0:	2220      	movs	r2, #32
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2241      	movs	r2, #65	; 0x41
 80060dc:	2120      	movs	r1, #32
 80060de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2242      	movs	r2, #66	; 0x42
 80060e4:	2100      	movs	r1, #0
 80060e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2240      	movs	r2, #64	; 0x40
 80060ec:	2100      	movs	r1, #0
 80060ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e007      	b.n	8006104 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	2202      	movs	r2, #2
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d1c5      	bne.n	800608e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b004      	add	sp, #16
 800610a:	bd80      	pop	{r7, pc}

0800610c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006118:	e02f      	b.n	800617a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	0018      	movs	r0, r3
 8006122:	f000 f8b9 	bl	8006298 <I2C_IsErrorOccurred>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d001      	beq.n	800612e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e02d      	b.n	800618a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612e:	f7ff f9f9 	bl	8005524 <HAL_GetTick>
 8006132:	0002      	movs	r2, r0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	429a      	cmp	r2, r3
 800613c:	d302      	bcc.n	8006144 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11a      	bne.n	800617a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	2220      	movs	r2, #32
 800614c:	4013      	ands	r3, r2
 800614e:	2b20      	cmp	r3, #32
 8006150:	d013      	beq.n	800617a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006156:	2220      	movs	r2, #32
 8006158:	431a      	orrs	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2241      	movs	r2, #65	; 0x41
 8006162:	2120      	movs	r1, #32
 8006164:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2242      	movs	r2, #66	; 0x42
 800616a:	2100      	movs	r1, #0
 800616c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2240      	movs	r2, #64	; 0x40
 8006172:	2100      	movs	r1, #0
 8006174:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e007      	b.n	800618a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	2220      	movs	r2, #32
 8006182:	4013      	ands	r3, r2
 8006184:	2b20      	cmp	r3, #32
 8006186:	d1c8      	bne.n	800611a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	0018      	movs	r0, r3
 800618c:	46bd      	mov	sp, r7
 800618e:	b004      	add	sp, #16
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061a0:	e06b      	b.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 f875 	bl	8006298 <I2C_IsErrorOccurred>
 80061ae:	1e03      	subs	r3, r0, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e069      	b.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2220      	movs	r2, #32
 80061be:	4013      	ands	r3, r2
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d138      	bne.n	8006236 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2204      	movs	r2, #4
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d105      	bne.n	80061de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	e055      	b.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2210      	movs	r2, #16
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b10      	cmp	r3, #16
 80061ea:	d107      	bne.n	80061fc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2210      	movs	r2, #16
 80061f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2204      	movs	r2, #4
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
 80061fa:	e002      	b.n	8006202 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2220      	movs	r2, #32
 8006208:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	491f      	ldr	r1, [pc, #124]	; (8006294 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006216:	400a      	ands	r2, r1
 8006218:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2241      	movs	r2, #65	; 0x41
 800621e:	2120      	movs	r1, #32
 8006220:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2242      	movs	r2, #66	; 0x42
 8006226:	2100      	movs	r1, #0
 8006228:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2240      	movs	r2, #64	; 0x40
 800622e:	2100      	movs	r1, #0
 8006230:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e029      	b.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006236:	f7ff f975 	bl	8005524 <HAL_GetTick>
 800623a:	0002      	movs	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	d302      	bcc.n	800624c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d116      	bne.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2204      	movs	r2, #4
 8006254:	4013      	ands	r3, r2
 8006256:	2b04      	cmp	r3, #4
 8006258:	d00f      	beq.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	2220      	movs	r2, #32
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2241      	movs	r2, #65	; 0x41
 800626a:	2120      	movs	r1, #32
 800626c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2240      	movs	r2, #64	; 0x40
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e007      	b.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2204      	movs	r2, #4
 8006282:	4013      	ands	r3, r2
 8006284:	2b04      	cmp	r3, #4
 8006286:	d18c      	bne.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	0018      	movs	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	b004      	add	sp, #16
 8006290:	bd80      	pop	{r7, pc}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	fe00e800 	.word	0xfe00e800

08006298 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b08b      	sub	sp, #44	; 0x2c
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062a4:	2327      	movs	r3, #39	; 0x27
 80062a6:	18fb      	adds	r3, r7, r3
 80062a8:	2200      	movs	r2, #0
 80062aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2210      	movs	r2, #16
 80062c0:	4013      	ands	r3, r2
 80062c2:	d100      	bne.n	80062c6 <I2C_IsErrorOccurred+0x2e>
 80062c4:	e082      	b.n	80063cc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2210      	movs	r2, #16
 80062cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062ce:	e060      	b.n	8006392 <I2C_IsErrorOccurred+0xfa>
 80062d0:	2427      	movs	r4, #39	; 0x27
 80062d2:	193b      	adds	r3, r7, r4
 80062d4:	193a      	adds	r2, r7, r4
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	3301      	adds	r3, #1
 80062de:	d058      	beq.n	8006392 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062e0:	f7ff f920 	bl	8005524 <HAL_GetTick>
 80062e4:	0002      	movs	r2, r0
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d306      	bcc.n	80062fe <I2C_IsErrorOccurred+0x66>
 80062f0:	193b      	adds	r3, r7, r4
 80062f2:	193a      	adds	r2, r7, r4
 80062f4:	7812      	ldrb	r2, [r2, #0]
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d149      	bne.n	8006392 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	01db      	lsls	r3, r3, #7
 8006308:	4013      	ands	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800630c:	2013      	movs	r0, #19
 800630e:	183b      	adds	r3, r7, r0
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	2142      	movs	r1, #66	; 0x42
 8006314:	5c52      	ldrb	r2, [r2, r1]
 8006316:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	401a      	ands	r2, r3
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	429a      	cmp	r2, r3
 800632a:	d126      	bne.n	800637a <I2C_IsErrorOccurred+0xe2>
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	2380      	movs	r3, #128	; 0x80
 8006330:	01db      	lsls	r3, r3, #7
 8006332:	429a      	cmp	r2, r3
 8006334:	d021      	beq.n	800637a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006336:	183b      	adds	r3, r7, r0
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b20      	cmp	r3, #32
 800633c:	d01d      	beq.n	800637a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2180      	movs	r1, #128	; 0x80
 800634a:	01c9      	lsls	r1, r1, #7
 800634c:	430a      	orrs	r2, r1
 800634e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006350:	f7ff f8e8 	bl	8005524 <HAL_GetTick>
 8006354:	0003      	movs	r3, r0
 8006356:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006358:	e00f      	b.n	800637a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800635a:	f7ff f8e3 	bl	8005524 <HAL_GetTick>
 800635e:	0002      	movs	r2, r0
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b19      	cmp	r3, #25
 8006366:	d908      	bls.n	800637a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	2220      	movs	r2, #32
 800636c:	4313      	orrs	r3, r2
 800636e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006370:	2327      	movs	r3, #39	; 0x27
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]

              break;
 8006378:	e00b      	b.n	8006392 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	2220      	movs	r2, #32
 8006382:	4013      	ands	r3, r2
 8006384:	2127      	movs	r1, #39	; 0x27
 8006386:	187a      	adds	r2, r7, r1
 8006388:	1879      	adds	r1, r7, r1
 800638a:	7809      	ldrb	r1, [r1, #0]
 800638c:	7011      	strb	r1, [r2, #0]
 800638e:	2b20      	cmp	r3, #32
 8006390:	d1e3      	bne.n	800635a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	2220      	movs	r2, #32
 800639a:	4013      	ands	r3, r2
 800639c:	2b20      	cmp	r3, #32
 800639e:	d004      	beq.n	80063aa <I2C_IsErrorOccurred+0x112>
 80063a0:	2327      	movs	r3, #39	; 0x27
 80063a2:	18fb      	adds	r3, r7, r3
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d092      	beq.n	80062d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063aa:	2327      	movs	r3, #39	; 0x27
 80063ac:	18fb      	adds	r3, r7, r3
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2220      	movs	r2, #32
 80063ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	2204      	movs	r2, #4
 80063c0:	4313      	orrs	r3, r2
 80063c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80063c4:	2327      	movs	r3, #39	; 0x27
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	2380      	movs	r3, #128	; 0x80
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4013      	ands	r3, r2
 80063dc:	d00c      	beq.n	80063f8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	2201      	movs	r2, #1
 80063e2:	4313      	orrs	r3, r2
 80063e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2280      	movs	r2, #128	; 0x80
 80063ec:	0052      	lsls	r2, r2, #1
 80063ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063f0:	2327      	movs	r3, #39	; 0x27
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	2201      	movs	r2, #1
 80063f6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	2380      	movs	r3, #128	; 0x80
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4013      	ands	r3, r2
 8006400:	d00c      	beq.n	800641c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	2208      	movs	r2, #8
 8006406:	4313      	orrs	r3, r2
 8006408:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2280      	movs	r2, #128	; 0x80
 8006410:	00d2      	lsls	r2, r2, #3
 8006412:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006414:	2327      	movs	r3, #39	; 0x27
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	2201      	movs	r2, #1
 800641a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	2380      	movs	r3, #128	; 0x80
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4013      	ands	r3, r2
 8006424:	d00c      	beq.n	8006440 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2202      	movs	r2, #2
 800642a:	4313      	orrs	r3, r2
 800642c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2280      	movs	r2, #128	; 0x80
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006438:	2327      	movs	r3, #39	; 0x27
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	2201      	movs	r2, #1
 800643e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006440:	2327      	movs	r3, #39	; 0x27
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01d      	beq.n	8006486 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	0018      	movs	r0, r3
 800644e:	f7ff fda7 	bl	8005fa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	490d      	ldr	r1, [pc, #52]	; (8006494 <I2C_IsErrorOccurred+0x1fc>)
 800645e:	400a      	ands	r2, r1
 8006460:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2241      	movs	r2, #65	; 0x41
 8006472:	2120      	movs	r1, #32
 8006474:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2242      	movs	r2, #66	; 0x42
 800647a:	2100      	movs	r1, #0
 800647c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2240      	movs	r2, #64	; 0x40
 8006482:	2100      	movs	r1, #0
 8006484:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006486:	2327      	movs	r3, #39	; 0x27
 8006488:	18fb      	adds	r3, r7, r3
 800648a:	781b      	ldrb	r3, [r3, #0]
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	b00b      	add	sp, #44	; 0x2c
 8006492:	bd90      	pop	{r4, r7, pc}
 8006494:	fe00e800 	.word	0xfe00e800

08006498 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	0008      	movs	r0, r1
 80064a2:	0011      	movs	r1, r2
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	240a      	movs	r4, #10
 80064a8:	193b      	adds	r3, r7, r4
 80064aa:	1c02      	adds	r2, r0, #0
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	2009      	movs	r0, #9
 80064b0:	183b      	adds	r3, r7, r0
 80064b2:	1c0a      	adds	r2, r1, #0
 80064b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064b6:	193b      	adds	r3, r7, r4
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	059b      	lsls	r3, r3, #22
 80064bc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064be:	183b      	adds	r3, r7, r0
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	0419      	lsls	r1, r3, #16
 80064c4:	23ff      	movs	r3, #255	; 0xff
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064ca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	4313      	orrs	r3, r2
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e2:	0d51      	lsrs	r1, r2, #21
 80064e4:	2280      	movs	r2, #128	; 0x80
 80064e6:	00d2      	lsls	r2, r2, #3
 80064e8:	400a      	ands	r2, r1
 80064ea:	4907      	ldr	r1, [pc, #28]	; (8006508 <I2C_TransferConfig+0x70>)
 80064ec:	430a      	orrs	r2, r1
 80064ee:	43d2      	mvns	r2, r2
 80064f0:	401a      	ands	r2, r3
 80064f2:	0011      	movs	r1, r2
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	46bd      	mov	sp, r7
 8006502:	b007      	add	sp, #28
 8006504:	bd90      	pop	{r4, r7, pc}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	03ff63ff 	.word	0x03ff63ff

0800650c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2241      	movs	r2, #65	; 0x41
 800651a:	5c9b      	ldrb	r3, [r3, r2]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b20      	cmp	r3, #32
 8006520:	d138      	bne.n	8006594 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2240      	movs	r2, #64	; 0x40
 8006526:	5c9b      	ldrb	r3, [r3, r2]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800652c:	2302      	movs	r3, #2
 800652e:	e032      	b.n	8006596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2240      	movs	r2, #64	; 0x40
 8006534:	2101      	movs	r1, #1
 8006536:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2241      	movs	r2, #65	; 0x41
 800653c:	2124      	movs	r1, #36	; 0x24
 800653e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2101      	movs	r1, #1
 800654c:	438a      	bics	r2, r1
 800654e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4911      	ldr	r1, [pc, #68]	; (80065a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800655c:	400a      	ands	r2, r1
 800655e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6819      	ldr	r1, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2101      	movs	r1, #1
 800657c:	430a      	orrs	r2, r1
 800657e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2241      	movs	r2, #65	; 0x41
 8006584:	2120      	movs	r1, #32
 8006586:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	2100      	movs	r1, #0
 800658e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e000      	b.n	8006596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
  }
}
 8006596:	0018      	movs	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	b002      	add	sp, #8
 800659c:	bd80      	pop	{r7, pc}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	ffffefff 	.word	0xffffefff

080065a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2241      	movs	r2, #65	; 0x41
 80065b2:	5c9b      	ldrb	r3, [r3, r2]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d139      	bne.n	800662e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2240      	movs	r2, #64	; 0x40
 80065be:	5c9b      	ldrb	r3, [r3, r2]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e033      	b.n	8006630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	2101      	movs	r1, #1
 80065ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2241      	movs	r2, #65	; 0x41
 80065d4:	2124      	movs	r1, #36	; 0x24
 80065d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2101      	movs	r1, #1
 80065e4:	438a      	bics	r2, r1
 80065e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a11      	ldr	r2, [pc, #68]	; (8006638 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2101      	movs	r1, #1
 8006616:	430a      	orrs	r2, r1
 8006618:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2241      	movs	r2, #65	; 0x41
 800661e:	2120      	movs	r1, #32
 8006620:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2240      	movs	r2, #64	; 0x40
 8006626:	2100      	movs	r1, #0
 8006628:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e000      	b.n	8006630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800662e:	2302      	movs	r3, #2
  }
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b004      	add	sp, #16
 8006636:	bd80      	pop	{r7, pc}
 8006638:	fffff0ff 	.word	0xfffff0ff

0800663c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800663c:	b5b0      	push	{r4, r5, r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f000 fb6c 	bl	8006d28 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006650:	4bc8      	ldr	r3, [pc, #800]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	220c      	movs	r2, #12
 8006656:	4013      	ands	r3, r2
 8006658:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800665a:	4bc6      	ldr	r3, [pc, #792]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	2380      	movs	r3, #128	; 0x80
 8006660:	025b      	lsls	r3, r3, #9
 8006662:	4013      	ands	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2201      	movs	r2, #1
 800666c:	4013      	ands	r3, r2
 800666e:	d100      	bne.n	8006672 <HAL_RCC_OscConfig+0x36>
 8006670:	e07d      	b.n	800676e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d007      	beq.n	8006688 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b0c      	cmp	r3, #12
 800667c:	d112      	bne.n	80066a4 <HAL_RCC_OscConfig+0x68>
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	025b      	lsls	r3, r3, #9
 8006684:	429a      	cmp	r2, r3
 8006686:	d10d      	bne.n	80066a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006688:	4bba      	ldr	r3, [pc, #744]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	029b      	lsls	r3, r3, #10
 8006690:	4013      	ands	r3, r2
 8006692:	d100      	bne.n	8006696 <HAL_RCC_OscConfig+0x5a>
 8006694:	e06a      	b.n	800676c <HAL_RCC_OscConfig+0x130>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d166      	bne.n	800676c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f000 fb42 	bl	8006d28 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	025b      	lsls	r3, r3, #9
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d107      	bne.n	80066c0 <HAL_RCC_OscConfig+0x84>
 80066b0:	4bb0      	ldr	r3, [pc, #704]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4baf      	ldr	r3, [pc, #700]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	0249      	lsls	r1, r1, #9
 80066ba:	430a      	orrs	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e027      	b.n	8006710 <HAL_RCC_OscConfig+0xd4>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	23a0      	movs	r3, #160	; 0xa0
 80066c6:	02db      	lsls	r3, r3, #11
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d10e      	bne.n	80066ea <HAL_RCC_OscConfig+0xae>
 80066cc:	4ba9      	ldr	r3, [pc, #676]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4ba8      	ldr	r3, [pc, #672]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066d2:	2180      	movs	r1, #128	; 0x80
 80066d4:	02c9      	lsls	r1, r1, #11
 80066d6:	430a      	orrs	r2, r1
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	4ba6      	ldr	r3, [pc, #664]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4ba5      	ldr	r3, [pc, #660]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066e0:	2180      	movs	r1, #128	; 0x80
 80066e2:	0249      	lsls	r1, r1, #9
 80066e4:	430a      	orrs	r2, r1
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	e012      	b.n	8006710 <HAL_RCC_OscConfig+0xd4>
 80066ea:	4ba2      	ldr	r3, [pc, #648]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4ba1      	ldr	r3, [pc, #644]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066f0:	49a1      	ldr	r1, [pc, #644]	; (8006978 <HAL_RCC_OscConfig+0x33c>)
 80066f2:	400a      	ands	r2, r1
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	4b9f      	ldr	r3, [pc, #636]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	025b      	lsls	r3, r3, #9
 80066fe:	4013      	ands	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4b9b      	ldr	r3, [pc, #620]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b9a      	ldr	r3, [pc, #616]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800670a:	499c      	ldr	r1, [pc, #624]	; (800697c <HAL_RCC_OscConfig+0x340>)
 800670c:	400a      	ands	r2, r1
 800670e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d014      	beq.n	8006742 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006718:	f7fe ff04 	bl	8005524 <HAL_GetTick>
 800671c:	0003      	movs	r3, r0
 800671e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006722:	f7fe feff 	bl	8005524 <HAL_GetTick>
 8006726:	0002      	movs	r2, r0
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b64      	cmp	r3, #100	; 0x64
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e2f9      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006734:	4b8f      	ldr	r3, [pc, #572]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	029b      	lsls	r3, r3, #10
 800673c:	4013      	ands	r3, r2
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0xe6>
 8006740:	e015      	b.n	800676e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006742:	f7fe feef 	bl	8005524 <HAL_GetTick>
 8006746:	0003      	movs	r3, r0
 8006748:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800674c:	f7fe feea 	bl	8005524 <HAL_GetTick>
 8006750:	0002      	movs	r2, r0
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b64      	cmp	r3, #100	; 0x64
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e2e4      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800675e:	4b85      	ldr	r3, [pc, #532]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	029b      	lsls	r3, r3, #10
 8006766:	4013      	ands	r3, r2
 8006768:	d1f0      	bne.n	800674c <HAL_RCC_OscConfig+0x110>
 800676a:	e000      	b.n	800676e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800676c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2202      	movs	r2, #2
 8006774:	4013      	ands	r3, r2
 8006776:	d100      	bne.n	800677a <HAL_RCC_OscConfig+0x13e>
 8006778:	e099      	b.n	80068ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	2220      	movs	r2, #32
 8006784:	4013      	ands	r3, r2
 8006786:	d009      	beq.n	800679c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006788:	4b7a      	ldr	r3, [pc, #488]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b79      	ldr	r3, [pc, #484]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800678e:	2120      	movs	r1, #32
 8006790:	430a      	orrs	r2, r1
 8006792:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	2220      	movs	r2, #32
 8006798:	4393      	bics	r3, r2
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d005      	beq.n	80067ae <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	2b0c      	cmp	r3, #12
 80067a6:	d13e      	bne.n	8006826 <HAL_RCC_OscConfig+0x1ea>
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d13b      	bne.n	8006826 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80067ae:	4b71      	ldr	r3, [pc, #452]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2204      	movs	r2, #4
 80067b4:	4013      	ands	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_RCC_OscConfig+0x186>
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e2b2      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c2:	4b6c      	ldr	r3, [pc, #432]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4a6e      	ldr	r2, [pc, #440]	; (8006980 <HAL_RCC_OscConfig+0x344>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	0019      	movs	r1, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	021a      	lsls	r2, r3, #8
 80067d2:	4b68      	ldr	r3, [pc, #416]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80067d8:	4b66      	ldr	r3, [pc, #408]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2209      	movs	r2, #9
 80067de:	4393      	bics	r3, r2
 80067e0:	0019      	movs	r1, r3
 80067e2:	4b64      	ldr	r3, [pc, #400]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80067e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e6:	430a      	orrs	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067ea:	f000 fbeb 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 80067ee:	0001      	movs	r1, r0
 80067f0:	4b60      	ldr	r3, [pc, #384]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	220f      	movs	r2, #15
 80067f8:	4013      	ands	r3, r2
 80067fa:	4a62      	ldr	r2, [pc, #392]	; (8006984 <HAL_RCC_OscConfig+0x348>)
 80067fc:	5cd3      	ldrb	r3, [r2, r3]
 80067fe:	000a      	movs	r2, r1
 8006800:	40da      	lsrs	r2, r3
 8006802:	4b61      	ldr	r3, [pc, #388]	; (8006988 <HAL_RCC_OscConfig+0x34c>)
 8006804:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006806:	4b61      	ldr	r3, [pc, #388]	; (800698c <HAL_RCC_OscConfig+0x350>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2513      	movs	r5, #19
 800680c:	197c      	adds	r4, r7, r5
 800680e:	0018      	movs	r0, r3
 8006810:	f7fe fe42 	bl	8005498 <HAL_InitTick>
 8006814:	0003      	movs	r3, r0
 8006816:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006818:	197b      	adds	r3, r7, r5
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d046      	beq.n	80068ae <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006820:	197b      	adds	r3, r7, r5
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	e280      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d027      	beq.n	800687c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800682c:	4b51      	ldr	r3, [pc, #324]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2209      	movs	r2, #9
 8006832:	4393      	bics	r3, r2
 8006834:	0019      	movs	r1, r3
 8006836:	4b4f      	ldr	r3, [pc, #316]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683e:	f7fe fe71 	bl	8005524 <HAL_GetTick>
 8006842:	0003      	movs	r3, r0
 8006844:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006848:	f7fe fe6c 	bl	8005524 <HAL_GetTick>
 800684c:	0002      	movs	r2, r0
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e266      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800685a:	4b46      	ldr	r3, [pc, #280]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2204      	movs	r2, #4
 8006860:	4013      	ands	r3, r2
 8006862:	d0f1      	beq.n	8006848 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006864:	4b43      	ldr	r3, [pc, #268]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4a45      	ldr	r2, [pc, #276]	; (8006980 <HAL_RCC_OscConfig+0x344>)
 800686a:	4013      	ands	r3, r2
 800686c:	0019      	movs	r1, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	021a      	lsls	r2, r3, #8
 8006874:	4b3f      	ldr	r3, [pc, #252]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	e018      	b.n	80068ae <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800687c:	4b3d      	ldr	r3, [pc, #244]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b3c      	ldr	r3, [pc, #240]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006882:	2101      	movs	r1, #1
 8006884:	438a      	bics	r2, r1
 8006886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006888:	f7fe fe4c 	bl	8005524 <HAL_GetTick>
 800688c:	0003      	movs	r3, r0
 800688e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006890:	e008      	b.n	80068a4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006892:	f7fe fe47 	bl	8005524 <HAL_GetTick>
 8006896:	0002      	movs	r2, r0
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e241      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068a4:	4b33      	ldr	r3, [pc, #204]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2204      	movs	r2, #4
 80068aa:	4013      	ands	r3, r2
 80068ac:	d1f1      	bne.n	8006892 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2210      	movs	r2, #16
 80068b4:	4013      	ands	r3, r2
 80068b6:	d100      	bne.n	80068ba <HAL_RCC_OscConfig+0x27e>
 80068b8:	e0a1      	b.n	80069fe <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d140      	bne.n	8006942 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068c0:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4013      	ands	r3, r2
 80068ca:	d005      	beq.n	80068d8 <HAL_RCC_OscConfig+0x29c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e227      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068d8:	4b26      	ldr	r3, [pc, #152]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <HAL_RCC_OscConfig+0x354>)
 80068de:	4013      	ands	r3, r2
 80068e0:	0019      	movs	r1, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1a      	ldr	r2, [r3, #32]
 80068e6:	4b23      	ldr	r3, [pc, #140]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ec:	4b21      	ldr	r3, [pc, #132]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	0a19      	lsrs	r1, r3, #8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	061a      	lsls	r2, r3, #24
 80068fa:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 80068fc:	430a      	orrs	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	0b5b      	lsrs	r3, r3, #13
 8006906:	3301      	adds	r3, #1
 8006908:	2280      	movs	r2, #128	; 0x80
 800690a:	0212      	lsls	r2, r2, #8
 800690c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800690e:	4b19      	ldr	r3, [pc, #100]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	091b      	lsrs	r3, r3, #4
 8006914:	210f      	movs	r1, #15
 8006916:	400b      	ands	r3, r1
 8006918:	491a      	ldr	r1, [pc, #104]	; (8006984 <HAL_RCC_OscConfig+0x348>)
 800691a:	5ccb      	ldrb	r3, [r1, r3]
 800691c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800691e:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <HAL_RCC_OscConfig+0x34c>)
 8006920:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006922:	4b1a      	ldr	r3, [pc, #104]	; (800698c <HAL_RCC_OscConfig+0x350>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2513      	movs	r5, #19
 8006928:	197c      	adds	r4, r7, r5
 800692a:	0018      	movs	r0, r3
 800692c:	f7fe fdb4 	bl	8005498 <HAL_InitTick>
 8006930:	0003      	movs	r3, r0
 8006932:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006934:	197b      	adds	r3, r7, r5
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d060      	beq.n	80069fe <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800693c:	197b      	adds	r3, r7, r5
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	e1f2      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d03f      	beq.n	80069ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800694a:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <HAL_RCC_OscConfig+0x338>)
 8006950:	2180      	movs	r1, #128	; 0x80
 8006952:	0049      	lsls	r1, r1, #1
 8006954:	430a      	orrs	r2, r1
 8006956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006958:	f7fe fde4 	bl	8005524 <HAL_GetTick>
 800695c:	0003      	movs	r3, r0
 800695e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006960:	e018      	b.n	8006994 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006962:	f7fe fddf 	bl	8005524 <HAL_GetTick>
 8006966:	0002      	movs	r2, r0
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d911      	bls.n	8006994 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e1d9      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
 8006974:	40021000 	.word	0x40021000
 8006978:	fffeffff 	.word	0xfffeffff
 800697c:	fffbffff 	.word	0xfffbffff
 8006980:	ffffe0ff 	.word	0xffffe0ff
 8006984:	08009dd4 	.word	0x08009dd4
 8006988:	20000000 	.word	0x20000000
 800698c:	20000004 	.word	0x20000004
 8006990:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006994:	4bc9      	ldr	r3, [pc, #804]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4013      	ands	r3, r2
 800699e:	d0e0      	beq.n	8006962 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069a0:	4bc6      	ldr	r3, [pc, #792]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	4ac6      	ldr	r2, [pc, #792]	; (8006cc0 <HAL_RCC_OscConfig+0x684>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	0019      	movs	r1, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	4bc3      	ldr	r3, [pc, #780]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069b4:	4bc1      	ldr	r3, [pc, #772]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	0a19      	lsrs	r1, r3, #8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	061a      	lsls	r2, r3, #24
 80069c2:	4bbe      	ldr	r3, [pc, #760]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
 80069c8:	e019      	b.n	80069fe <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069ca:	4bbc      	ldr	r3, [pc, #752]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4bbb      	ldr	r3, [pc, #748]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 80069d0:	49bc      	ldr	r1, [pc, #752]	; (8006cc4 <HAL_RCC_OscConfig+0x688>)
 80069d2:	400a      	ands	r2, r1
 80069d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d6:	f7fe fda5 	bl	8005524 <HAL_GetTick>
 80069da:	0003      	movs	r3, r0
 80069dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069e0:	f7fe fda0 	bl	8005524 <HAL_GetTick>
 80069e4:	0002      	movs	r2, r0
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e19a      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80069f2:	4bb2      	ldr	r3, [pc, #712]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	2380      	movs	r3, #128	; 0x80
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4013      	ands	r3, r2
 80069fc:	d1f0      	bne.n	80069e0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2208      	movs	r2, #8
 8006a04:	4013      	ands	r3, r2
 8006a06:	d036      	beq.n	8006a76 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d019      	beq.n	8006a44 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a10:	4baa      	ldr	r3, [pc, #680]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a14:	4ba9      	ldr	r3, [pc, #676]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a16:	2101      	movs	r1, #1
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a1c:	f7fe fd82 	bl	8005524 <HAL_GetTick>
 8006a20:	0003      	movs	r3, r0
 8006a22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a26:	f7fe fd7d 	bl	8005524 <HAL_GetTick>
 8006a2a:	0002      	movs	r2, r0
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e177      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a38:	4ba0      	ldr	r3, [pc, #640]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	4013      	ands	r3, r2
 8006a40:	d0f1      	beq.n	8006a26 <HAL_RCC_OscConfig+0x3ea>
 8006a42:	e018      	b.n	8006a76 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a44:	4b9d      	ldr	r3, [pc, #628]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a48:	4b9c      	ldr	r3, [pc, #624]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	438a      	bics	r2, r1
 8006a4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a50:	f7fe fd68 	bl	8005524 <HAL_GetTick>
 8006a54:	0003      	movs	r3, r0
 8006a56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a5a:	f7fe fd63 	bl	8005524 <HAL_GetTick>
 8006a5e:	0002      	movs	r2, r0
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e15d      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a6c:	4b93      	ldr	r3, [pc, #588]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a70:	2202      	movs	r2, #2
 8006a72:	4013      	ands	r3, r2
 8006a74:	d1f1      	bne.n	8006a5a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	d100      	bne.n	8006a82 <HAL_RCC_OscConfig+0x446>
 8006a80:	e0ae      	b.n	8006be0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a82:	2023      	movs	r0, #35	; 0x23
 8006a84:	183b      	adds	r3, r7, r0
 8006a86:	2200      	movs	r2, #0
 8006a88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a8a:	4b8c      	ldr	r3, [pc, #560]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8e:	2380      	movs	r3, #128	; 0x80
 8006a90:	055b      	lsls	r3, r3, #21
 8006a92:	4013      	ands	r3, r2
 8006a94:	d109      	bne.n	8006aaa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a96:	4b89      	ldr	r3, [pc, #548]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a9a:	4b88      	ldr	r3, [pc, #544]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	0549      	lsls	r1, r1, #21
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006aa4:	183b      	adds	r3, r7, r0
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aaa:	4b87      	ldr	r3, [pc, #540]	; (8006cc8 <HAL_RCC_OscConfig+0x68c>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d11a      	bne.n	8006aec <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab6:	4b84      	ldr	r3, [pc, #528]	; (8006cc8 <HAL_RCC_OscConfig+0x68c>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b83      	ldr	r3, [pc, #524]	; (8006cc8 <HAL_RCC_OscConfig+0x68c>)
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	0049      	lsls	r1, r1, #1
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ac4:	f7fe fd2e 	bl	8005524 <HAL_GetTick>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ace:	f7fe fd29 	bl	8005524 <HAL_GetTick>
 8006ad2:	0002      	movs	r2, r0
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b64      	cmp	r3, #100	; 0x64
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e123      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae0:	4b79      	ldr	r3, [pc, #484]	; (8006cc8 <HAL_RCC_OscConfig+0x68c>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d107      	bne.n	8006b08 <HAL_RCC_OscConfig+0x4cc>
 8006af8:	4b70      	ldr	r3, [pc, #448]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006afc:	4b6f      	ldr	r3, [pc, #444]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006afe:	2180      	movs	r1, #128	; 0x80
 8006b00:	0049      	lsls	r1, r1, #1
 8006b02:	430a      	orrs	r2, r1
 8006b04:	651a      	str	r2, [r3, #80]	; 0x50
 8006b06:	e031      	b.n	8006b6c <HAL_RCC_OscConfig+0x530>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10c      	bne.n	8006b2a <HAL_RCC_OscConfig+0x4ee>
 8006b10:	4b6a      	ldr	r3, [pc, #424]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b14:	4b69      	ldr	r3, [pc, #420]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b16:	496b      	ldr	r1, [pc, #428]	; (8006cc4 <HAL_RCC_OscConfig+0x688>)
 8006b18:	400a      	ands	r2, r1
 8006b1a:	651a      	str	r2, [r3, #80]	; 0x50
 8006b1c:	4b67      	ldr	r3, [pc, #412]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b20:	4b66      	ldr	r3, [pc, #408]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b22:	496a      	ldr	r1, [pc, #424]	; (8006ccc <HAL_RCC_OscConfig+0x690>)
 8006b24:	400a      	ands	r2, r1
 8006b26:	651a      	str	r2, [r3, #80]	; 0x50
 8006b28:	e020      	b.n	8006b6c <HAL_RCC_OscConfig+0x530>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	23a0      	movs	r3, #160	; 0xa0
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d10e      	bne.n	8006b54 <HAL_RCC_OscConfig+0x518>
 8006b36:	4b61      	ldr	r3, [pc, #388]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b3a:	4b60      	ldr	r3, [pc, #384]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b3c:	2180      	movs	r1, #128	; 0x80
 8006b3e:	00c9      	lsls	r1, r1, #3
 8006b40:	430a      	orrs	r2, r1
 8006b42:	651a      	str	r2, [r3, #80]	; 0x50
 8006b44:	4b5d      	ldr	r3, [pc, #372]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b48:	4b5c      	ldr	r3, [pc, #368]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b4a:	2180      	movs	r1, #128	; 0x80
 8006b4c:	0049      	lsls	r1, r1, #1
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50
 8006b52:	e00b      	b.n	8006b6c <HAL_RCC_OscConfig+0x530>
 8006b54:	4b59      	ldr	r3, [pc, #356]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b58:	4b58      	ldr	r3, [pc, #352]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b5a:	495a      	ldr	r1, [pc, #360]	; (8006cc4 <HAL_RCC_OscConfig+0x688>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	651a      	str	r2, [r3, #80]	; 0x50
 8006b60:	4b56      	ldr	r3, [pc, #344]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b64:	4b55      	ldr	r3, [pc, #340]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b66:	4959      	ldr	r1, [pc, #356]	; (8006ccc <HAL_RCC_OscConfig+0x690>)
 8006b68:	400a      	ands	r2, r1
 8006b6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b74:	f7fe fcd6 	bl	8005524 <HAL_GetTick>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b7c:	e009      	b.n	8006b92 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b7e:	f7fe fcd1 	bl	8005524 <HAL_GetTick>
 8006b82:	0002      	movs	r2, r0
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	4a51      	ldr	r2, [pc, #324]	; (8006cd0 <HAL_RCC_OscConfig+0x694>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e0ca      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b92:	4b4a      	ldr	r3, [pc, #296]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b96:	2380      	movs	r3, #128	; 0x80
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d0ef      	beq.n	8006b7e <HAL_RCC_OscConfig+0x542>
 8006b9e:	e014      	b.n	8006bca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ba0:	f7fe fcc0 	bl	8005524 <HAL_GetTick>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ba8:	e009      	b.n	8006bbe <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fe fcbb 	bl	8005524 <HAL_GetTick>
 8006bae:	0002      	movs	r2, r0
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	4a46      	ldr	r2, [pc, #280]	; (8006cd0 <HAL_RCC_OscConfig+0x694>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e0b4      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bbe:	4b3f      	ldr	r3, [pc, #252]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bc2:	2380      	movs	r3, #128	; 0x80
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d1ef      	bne.n	8006baa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bca:	2323      	movs	r3, #35	; 0x23
 8006bcc:	18fb      	adds	r3, r7, r3
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d105      	bne.n	8006be0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd4:	4b39      	ldr	r3, [pc, #228]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd8:	4b38      	ldr	r3, [pc, #224]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006bda:	493e      	ldr	r1, [pc, #248]	; (8006cd4 <HAL_RCC_OscConfig+0x698>)
 8006bdc:	400a      	ands	r2, r1
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d100      	bne.n	8006bea <HAL_RCC_OscConfig+0x5ae>
 8006be8:	e09d      	b.n	8006d26 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	2b0c      	cmp	r3, #12
 8006bee:	d100      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x5b6>
 8006bf0:	e076      	b.n	8006ce0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d145      	bne.n	8006c86 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfa:	4b30      	ldr	r3, [pc, #192]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b2f      	ldr	r3, [pc, #188]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c00:	4935      	ldr	r1, [pc, #212]	; (8006cd8 <HAL_RCC_OscConfig+0x69c>)
 8006c02:	400a      	ands	r2, r1
 8006c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c06:	f7fe fc8d 	bl	8005524 <HAL_GetTick>
 8006c0a:	0003      	movs	r3, r0
 8006c0c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c10:	f7fe fc88 	bl	8005524 <HAL_GetTick>
 8006c14:	0002      	movs	r2, r0
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e082      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006c22:	4b26      	ldr	r3, [pc, #152]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	2380      	movs	r3, #128	; 0x80
 8006c28:	049b      	lsls	r3, r3, #18
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c2e:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	4a2a      	ldr	r2, [pc, #168]	; (8006cdc <HAL_RCC_OscConfig+0x6a0>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	0019      	movs	r1, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	431a      	orrs	r2, r3
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c54:	2180      	movs	r1, #128	; 0x80
 8006c56:	0449      	lsls	r1, r1, #17
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5c:	f7fe fc62 	bl	8005524 <HAL_GetTick>
 8006c60:	0003      	movs	r3, r0
 8006c62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c66:	f7fe fc5d 	bl	8005524 <HAL_GetTick>
 8006c6a:	0002      	movs	r2, r0
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e057      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	2380      	movs	r3, #128	; 0x80
 8006c7e:	049b      	lsls	r3, r3, #18
 8006c80:	4013      	ands	r3, r2
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x62a>
 8006c84:	e04f      	b.n	8006d26 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006c8c:	4912      	ldr	r1, [pc, #72]	; (8006cd8 <HAL_RCC_OscConfig+0x69c>)
 8006c8e:	400a      	ands	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c92:	f7fe fc47 	bl	8005524 <HAL_GetTick>
 8006c96:	0003      	movs	r3, r0
 8006c98:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fe fc42 	bl	8005524 <HAL_GetTick>
 8006ca0:	0002      	movs	r2, r0
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e03c      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <HAL_RCC_OscConfig+0x680>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	2380      	movs	r3, #128	; 0x80
 8006cb4:	049b      	lsls	r3, r3, #18
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x660>
 8006cba:	e034      	b.n	8006d26 <HAL_RCC_OscConfig+0x6ea>
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	ffff1fff 	.word	0xffff1fff
 8006cc4:	fffffeff 	.word	0xfffffeff
 8006cc8:	40007000 	.word	0x40007000
 8006ccc:	fffffbff 	.word	0xfffffbff
 8006cd0:	00001388 	.word	0x00001388
 8006cd4:	efffffff 	.word	0xefffffff
 8006cd8:	feffffff 	.word	0xfeffffff
 8006cdc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e01d      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <HAL_RCC_OscConfig+0x6f4>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	2380      	movs	r3, #128	; 0x80
 8006cf6:	025b      	lsls	r3, r3, #9
 8006cf8:	401a      	ands	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d10f      	bne.n	8006d22 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	23f0      	movs	r3, #240	; 0xf0
 8006d06:	039b      	lsls	r3, r3, #14
 8006d08:	401a      	ands	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d107      	bne.n	8006d22 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	23c0      	movs	r3, #192	; 0xc0
 8006d16:	041b      	lsls	r3, r3, #16
 8006d18:	401a      	ands	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d001      	beq.n	8006d26 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b00a      	add	sp, #40	; 0x28
 8006d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8006d30:	40021000 	.word	0x40021000

08006d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d34:	b5b0      	push	{r4, r5, r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e128      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d48:	4b96      	ldr	r3, [pc, #600]	; (8006fa4 <HAL_RCC_ClockConfig+0x270>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4013      	ands	r3, r2
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d91e      	bls.n	8006d94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d56:	4b93      	ldr	r3, [pc, #588]	; (8006fa4 <HAL_RCC_ClockConfig+0x270>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4393      	bics	r3, r2
 8006d5e:	0019      	movs	r1, r3
 8006d60:	4b90      	ldr	r3, [pc, #576]	; (8006fa4 <HAL_RCC_ClockConfig+0x270>)
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d68:	f7fe fbdc 	bl	8005524 <HAL_GetTick>
 8006d6c:	0003      	movs	r3, r0
 8006d6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d70:	e009      	b.n	8006d86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d72:	f7fe fbd7 	bl	8005524 <HAL_GetTick>
 8006d76:	0002      	movs	r2, r0
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	4a8a      	ldr	r2, [pc, #552]	; (8006fa8 <HAL_RCC_ClockConfig+0x274>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e109      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d86:	4b87      	ldr	r3, [pc, #540]	; (8006fa4 <HAL_RCC_ClockConfig+0x270>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d1ee      	bne.n	8006d72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d009      	beq.n	8006db2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d9e:	4b83      	ldr	r3, [pc, #524]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	22f0      	movs	r2, #240	; 0xf0
 8006da4:	4393      	bics	r3, r2
 8006da6:	0019      	movs	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	4b7f      	ldr	r3, [pc, #508]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006dae:	430a      	orrs	r2, r1
 8006db0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2201      	movs	r2, #1
 8006db8:	4013      	ands	r3, r2
 8006dba:	d100      	bne.n	8006dbe <HAL_RCC_ClockConfig+0x8a>
 8006dbc:	e089      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d107      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dc6:	4b79      	ldr	r3, [pc, #484]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	029b      	lsls	r3, r3, #10
 8006dce:	4013      	ands	r3, r2
 8006dd0:	d120      	bne.n	8006e14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e0e1      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d107      	bne.n	8006dee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dde:	4b73      	ldr	r3, [pc, #460]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	049b      	lsls	r3, r3, #18
 8006de6:	4013      	ands	r3, r2
 8006de8:	d114      	bne.n	8006e14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e0d5      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d106      	bne.n	8006e04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006df6:	4b6d      	ldr	r3, [pc, #436]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d109      	bne.n	8006e14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e0ca      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e04:	4b69      	ldr	r3, [pc, #420]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	2380      	movs	r3, #128	; 0x80
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d101      	bne.n	8006e14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0c2      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e14:	4b65      	ldr	r3, [pc, #404]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2203      	movs	r2, #3
 8006e1a:	4393      	bics	r3, r2
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	4b62      	ldr	r3, [pc, #392]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006e24:	430a      	orrs	r2, r1
 8006e26:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e28:	f7fe fb7c 	bl	8005524 <HAL_GetTick>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d111      	bne.n	8006e5c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e38:	e009      	b.n	8006e4e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e3a:	f7fe fb73 	bl	8005524 <HAL_GetTick>
 8006e3e:	0002      	movs	r2, r0
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	4a58      	ldr	r2, [pc, #352]	; (8006fa8 <HAL_RCC_ClockConfig+0x274>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e0a5      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e4e:	4b57      	ldr	r3, [pc, #348]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	220c      	movs	r2, #12
 8006e54:	4013      	ands	r3, r2
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d1ef      	bne.n	8006e3a <HAL_RCC_ClockConfig+0x106>
 8006e5a:	e03a      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d111      	bne.n	8006e88 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e64:	e009      	b.n	8006e7a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e66:	f7fe fb5d 	bl	8005524 <HAL_GetTick>
 8006e6a:	0002      	movs	r2, r0
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	4a4d      	ldr	r2, [pc, #308]	; (8006fa8 <HAL_RCC_ClockConfig+0x274>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e08f      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e7a:	4b4c      	ldr	r3, [pc, #304]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	220c      	movs	r2, #12
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b0c      	cmp	r3, #12
 8006e84:	d1ef      	bne.n	8006e66 <HAL_RCC_ClockConfig+0x132>
 8006e86:	e024      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d11b      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e90:	e009      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e92:	f7fe fb47 	bl	8005524 <HAL_GetTick>
 8006e96:	0002      	movs	r2, r0
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	4a42      	ldr	r2, [pc, #264]	; (8006fa8 <HAL_RCC_ClockConfig+0x274>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e079      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ea6:	4b41      	ldr	r3, [pc, #260]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	220c      	movs	r2, #12
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d1ef      	bne.n	8006e92 <HAL_RCC_ClockConfig+0x15e>
 8006eb2:	e00e      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb4:	f7fe fb36 	bl	8005524 <HAL_GetTick>
 8006eb8:	0002      	movs	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	4a3a      	ldr	r2, [pc, #232]	; (8006fa8 <HAL_RCC_ClockConfig+0x274>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e068      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ec8:	4b38      	ldr	r3, [pc, #224]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	220c      	movs	r2, #12
 8006ece:	4013      	ands	r3, r2
 8006ed0:	d1f0      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ed2:	4b34      	ldr	r3, [pc, #208]	; (8006fa4 <HAL_RCC_ClockConfig+0x270>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4013      	ands	r3, r2
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d21e      	bcs.n	8006f1e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee0:	4b30      	ldr	r3, [pc, #192]	; (8006fa4 <HAL_RCC_ClockConfig+0x270>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	4393      	bics	r3, r2
 8006ee8:	0019      	movs	r1, r3
 8006eea:	4b2e      	ldr	r3, [pc, #184]	; (8006fa4 <HAL_RCC_ClockConfig+0x270>)
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ef2:	f7fe fb17 	bl	8005524 <HAL_GetTick>
 8006ef6:	0003      	movs	r3, r0
 8006ef8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efa:	e009      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006efc:	f7fe fb12 	bl	8005524 <HAL_GetTick>
 8006f00:	0002      	movs	r2, r0
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	4a28      	ldr	r2, [pc, #160]	; (8006fa8 <HAL_RCC_ClockConfig+0x274>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e044      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f10:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <HAL_RCC_ClockConfig+0x270>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2201      	movs	r2, #1
 8006f16:	4013      	ands	r3, r2
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d1ee      	bne.n	8006efc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2204      	movs	r2, #4
 8006f24:	4013      	ands	r3, r2
 8006f26:	d009      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f28:	4b20      	ldr	r3, [pc, #128]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4a20      	ldr	r2, [pc, #128]	; (8006fb0 <HAL_RCC_ClockConfig+0x27c>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	0019      	movs	r1, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2208      	movs	r2, #8
 8006f42:	4013      	ands	r3, r2
 8006f44:	d00a      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f46:	4b19      	ldr	r3, [pc, #100]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	4a1a      	ldr	r2, [pc, #104]	; (8006fb4 <HAL_RCC_ClockConfig+0x280>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	0019      	movs	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	00da      	lsls	r2, r3, #3
 8006f56:	4b15      	ldr	r3, [pc, #84]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f5c:	f000 f832 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 8006f60:	0001      	movs	r1, r0
 8006f62:	4b12      	ldr	r3, [pc, #72]	; (8006fac <HAL_RCC_ClockConfig+0x278>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	091b      	lsrs	r3, r3, #4
 8006f68:	220f      	movs	r2, #15
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <HAL_RCC_ClockConfig+0x284>)
 8006f6e:	5cd3      	ldrb	r3, [r2, r3]
 8006f70:	000a      	movs	r2, r1
 8006f72:	40da      	lsrs	r2, r3
 8006f74:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <HAL_RCC_ClockConfig+0x288>)
 8006f76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f78:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <HAL_RCC_ClockConfig+0x28c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	250b      	movs	r5, #11
 8006f7e:	197c      	adds	r4, r7, r5
 8006f80:	0018      	movs	r0, r3
 8006f82:	f7fe fa89 	bl	8005498 <HAL_InitTick>
 8006f86:	0003      	movs	r3, r0
 8006f88:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006f8a:	197b      	adds	r3, r7, r5
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006f92:	197b      	adds	r3, r7, r5
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	e000      	b.n	8006f9a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	b004      	add	sp, #16
 8006fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	40022000 	.word	0x40022000
 8006fa8:	00001388 	.word	0x00001388
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	fffff8ff 	.word	0xfffff8ff
 8006fb4:	ffffc7ff 	.word	0xffffc7ff
 8006fb8:	08009dd4 	.word	0x08009dd4
 8006fbc:	20000000 	.word	0x20000000
 8006fc0:	20000004 	.word	0x20000004

08006fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc4:	b5b0      	push	{r4, r5, r7, lr}
 8006fc6:	b08e      	sub	sp, #56	; 0x38
 8006fc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006fca:	4b4c      	ldr	r3, [pc, #304]	; (80070fc <HAL_RCC_GetSysClockFreq+0x138>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b0c      	cmp	r3, #12
 8006fd8:	d014      	beq.n	8007004 <HAL_RCC_GetSysClockFreq+0x40>
 8006fda:	d900      	bls.n	8006fde <HAL_RCC_GetSysClockFreq+0x1a>
 8006fdc:	e07b      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0x112>
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d002      	beq.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x24>
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d00b      	beq.n	8006ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8006fe6:	e076      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006fe8:	4b44      	ldr	r3, [pc, #272]	; (80070fc <HAL_RCC_GetSysClockFreq+0x138>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2210      	movs	r2, #16
 8006fee:	4013      	ands	r3, r2
 8006ff0:	d002      	beq.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006ff2:	4b43      	ldr	r3, [pc, #268]	; (8007100 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006ff4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006ff6:	e07c      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006ff8:	4b42      	ldr	r3, [pc, #264]	; (8007104 <HAL_RCC_GetSysClockFreq+0x140>)
 8006ffa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006ffc:	e079      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ffe:	4b42      	ldr	r3, [pc, #264]	; (8007108 <HAL_RCC_GetSysClockFreq+0x144>)
 8007000:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007002:	e076      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	0c9a      	lsrs	r2, r3, #18
 8007008:	230f      	movs	r3, #15
 800700a:	401a      	ands	r2, r3
 800700c:	4b3f      	ldr	r3, [pc, #252]	; (800710c <HAL_RCC_GetSysClockFreq+0x148>)
 800700e:	5c9b      	ldrb	r3, [r3, r2]
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	0d9a      	lsrs	r2, r3, #22
 8007016:	2303      	movs	r3, #3
 8007018:	4013      	ands	r3, r2
 800701a:	3301      	adds	r3, #1
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800701e:	4b37      	ldr	r3, [pc, #220]	; (80070fc <HAL_RCC_GetSysClockFreq+0x138>)
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	2380      	movs	r3, #128	; 0x80
 8007024:	025b      	lsls	r3, r3, #9
 8007026:	4013      	ands	r3, r2
 8007028:	d01a      	beq.n	8007060 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	4a35      	ldr	r2, [pc, #212]	; (8007108 <HAL_RCC_GetSysClockFreq+0x144>)
 8007034:	2300      	movs	r3, #0
 8007036:	69b8      	ldr	r0, [r7, #24]
 8007038:	69f9      	ldr	r1, [r7, #28]
 800703a:	f7f9 f961 	bl	8000300 <__aeabi_lmul>
 800703e:	0002      	movs	r2, r0
 8007040:	000b      	movs	r3, r1
 8007042:	0010      	movs	r0, r2
 8007044:	0019      	movs	r1, r3
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f7f9 f935 	bl	80002c0 <__aeabi_uldivmod>
 8007056:	0002      	movs	r2, r0
 8007058:	000b      	movs	r3, r1
 800705a:	0013      	movs	r3, r2
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
 800705e:	e037      	b.n	80070d0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007060:	4b26      	ldr	r3, [pc, #152]	; (80070fc <HAL_RCC_GetSysClockFreq+0x138>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2210      	movs	r2, #16
 8007066:	4013      	ands	r3, r2
 8007068:	d01a      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	4a23      	ldr	r2, [pc, #140]	; (8007100 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007074:	2300      	movs	r3, #0
 8007076:	68b8      	ldr	r0, [r7, #8]
 8007078:	68f9      	ldr	r1, [r7, #12]
 800707a:	f7f9 f941 	bl	8000300 <__aeabi_lmul>
 800707e:	0002      	movs	r2, r0
 8007080:	000b      	movs	r3, r1
 8007082:	0010      	movs	r0, r2
 8007084:	0019      	movs	r1, r3
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	603b      	str	r3, [r7, #0]
 800708a:	2300      	movs	r3, #0
 800708c:	607b      	str	r3, [r7, #4]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f7f9 f915 	bl	80002c0 <__aeabi_uldivmod>
 8007096:	0002      	movs	r2, r0
 8007098:	000b      	movs	r3, r1
 800709a:	0013      	movs	r3, r2
 800709c:	637b      	str	r3, [r7, #52]	; 0x34
 800709e:	e017      	b.n	80070d0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	0018      	movs	r0, r3
 80070a4:	2300      	movs	r3, #0
 80070a6:	0019      	movs	r1, r3
 80070a8:	4a16      	ldr	r2, [pc, #88]	; (8007104 <HAL_RCC_GetSysClockFreq+0x140>)
 80070aa:	2300      	movs	r3, #0
 80070ac:	f7f9 f928 	bl	8000300 <__aeabi_lmul>
 80070b0:	0002      	movs	r2, r0
 80070b2:	000b      	movs	r3, r1
 80070b4:	0010      	movs	r0, r2
 80070b6:	0019      	movs	r1, r3
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	001c      	movs	r4, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	001d      	movs	r5, r3
 80070c0:	0022      	movs	r2, r4
 80070c2:	002b      	movs	r3, r5
 80070c4:	f7f9 f8fc 	bl	80002c0 <__aeabi_uldivmod>
 80070c8:	0002      	movs	r2, r0
 80070ca:	000b      	movs	r3, r1
 80070cc:	0013      	movs	r3, r2
 80070ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80070d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80070d4:	e00d      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80070d6:	4b09      	ldr	r3, [pc, #36]	; (80070fc <HAL_RCC_GetSysClockFreq+0x138>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	0b5b      	lsrs	r3, r3, #13
 80070dc:	2207      	movs	r2, #7
 80070de:	4013      	ands	r3, r2
 80070e0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	3301      	adds	r3, #1
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	0212      	lsls	r2, r2, #8
 80070ea:	409a      	lsls	r2, r3
 80070ec:	0013      	movs	r3, r2
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80070f0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80070f4:	0018      	movs	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b00e      	add	sp, #56	; 0x38
 80070fa:	bdb0      	pop	{r4, r5, r7, pc}
 80070fc:	40021000 	.word	0x40021000
 8007100:	003d0900 	.word	0x003d0900
 8007104:	00f42400 	.word	0x00f42400
 8007108:	007a1200 	.word	0x007a1200
 800710c:	08009dec 	.word	0x08009dec

08007110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007114:	4b02      	ldr	r3, [pc, #8]	; (8007120 <HAL_RCC_GetHCLKFreq+0x10>)
 8007116:	681b      	ldr	r3, [r3, #0]
}
 8007118:	0018      	movs	r0, r3
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	20000000 	.word	0x20000000

08007124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007128:	f7ff fff2 	bl	8007110 <HAL_RCC_GetHCLKFreq>
 800712c:	0001      	movs	r1, r0
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	0a1b      	lsrs	r3, r3, #8
 8007134:	2207      	movs	r2, #7
 8007136:	4013      	ands	r3, r2
 8007138:	4a04      	ldr	r2, [pc, #16]	; (800714c <HAL_RCC_GetPCLK1Freq+0x28>)
 800713a:	5cd3      	ldrb	r3, [r2, r3]
 800713c:	40d9      	lsrs	r1, r3
 800713e:	000b      	movs	r3, r1
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	40021000 	.word	0x40021000
 800714c:	08009de4 	.word	0x08009de4

08007150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007154:	f7ff ffdc 	bl	8007110 <HAL_RCC_GetHCLKFreq>
 8007158:	0001      	movs	r1, r0
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	0adb      	lsrs	r3, r3, #11
 8007160:	2207      	movs	r2, #7
 8007162:	4013      	ands	r3, r2
 8007164:	4a04      	ldr	r2, [pc, #16]	; (8007178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007166:	5cd3      	ldrb	r3, [r2, r3]
 8007168:	40d9      	lsrs	r1, r3
 800716a:	000b      	movs	r3, r1
}
 800716c:	0018      	movs	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	40021000 	.word	0x40021000
 8007178:	08009de4 	.word	0x08009de4

0800717c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007184:	2017      	movs	r0, #23
 8007186:	183b      	adds	r3, r7, r0
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2220      	movs	r2, #32
 8007192:	4013      	ands	r3, r2
 8007194:	d100      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8007196:	e0c7      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007198:	4b84      	ldr	r3, [pc, #528]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800719a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719c:	2380      	movs	r3, #128	; 0x80
 800719e:	055b      	lsls	r3, r3, #21
 80071a0:	4013      	ands	r3, r2
 80071a2:	d109      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a4:	4b81      	ldr	r3, [pc, #516]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80071a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a8:	4b80      	ldr	r3, [pc, #512]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	0549      	lsls	r1, r1, #21
 80071ae:	430a      	orrs	r2, r1
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80071b2:	183b      	adds	r3, r7, r0
 80071b4:	2201      	movs	r2, #1
 80071b6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b8:	4b7d      	ldr	r3, [pc, #500]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	2380      	movs	r3, #128	; 0x80
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	4013      	ands	r3, r2
 80071c2:	d11a      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071c4:	4b7a      	ldr	r3, [pc, #488]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b79      	ldr	r3, [pc, #484]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80071ca:	2180      	movs	r1, #128	; 0x80
 80071cc:	0049      	lsls	r1, r1, #1
 80071ce:	430a      	orrs	r2, r1
 80071d0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071d2:	f7fe f9a7 	bl	8005524 <HAL_GetTick>
 80071d6:	0003      	movs	r3, r0
 80071d8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071da:	e008      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071dc:	f7fe f9a2 	bl	8005524 <HAL_GetTick>
 80071e0:	0002      	movs	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b64      	cmp	r3, #100	; 0x64
 80071e8:	d901      	bls.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e0d9      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ee:	4b70      	ldr	r3, [pc, #448]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	2380      	movs	r3, #128	; 0x80
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	4013      	ands	r3, r2
 80071f8:	d0f0      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80071fa:	4b6c      	ldr	r3, [pc, #432]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	23c0      	movs	r3, #192	; 0xc0
 8007200:	039b      	lsls	r3, r3, #14
 8007202:	4013      	ands	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	23c0      	movs	r3, #192	; 0xc0
 800720c:	039b      	lsls	r3, r3, #14
 800720e:	4013      	ands	r3, r2
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	429a      	cmp	r2, r3
 8007214:	d013      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	23c0      	movs	r3, #192	; 0xc0
 800721c:	029b      	lsls	r3, r3, #10
 800721e:	401a      	ands	r2, r3
 8007220:	23c0      	movs	r3, #192	; 0xc0
 8007222:	029b      	lsls	r3, r3, #10
 8007224:	429a      	cmp	r2, r3
 8007226:	d10a      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007228:	4b60      	ldr	r3, [pc, #384]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	2380      	movs	r3, #128	; 0x80
 800722e:	029b      	lsls	r3, r3, #10
 8007230:	401a      	ands	r2, r3
 8007232:	2380      	movs	r3, #128	; 0x80
 8007234:	029b      	lsls	r3, r3, #10
 8007236:	429a      	cmp	r2, r3
 8007238:	d101      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e0b1      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800723e:	4b5b      	ldr	r3, [pc, #364]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007242:	23c0      	movs	r3, #192	; 0xc0
 8007244:	029b      	lsls	r3, r3, #10
 8007246:	4013      	ands	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d03b      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	23c0      	movs	r3, #192	; 0xc0
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	4013      	ands	r3, r2
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	429a      	cmp	r2, r3
 800725e:	d033      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2220      	movs	r2, #32
 8007266:	4013      	ands	r3, r2
 8007268:	d02e      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800726a:	4b50      	ldr	r3, [pc, #320]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800726c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726e:	4a51      	ldr	r2, [pc, #324]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007270:	4013      	ands	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007274:	4b4d      	ldr	r3, [pc, #308]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007278:	4b4c      	ldr	r3, [pc, #304]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800727a:	2180      	movs	r1, #128	; 0x80
 800727c:	0309      	lsls	r1, r1, #12
 800727e:	430a      	orrs	r2, r1
 8007280:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007282:	4b4a      	ldr	r3, [pc, #296]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007286:	4b49      	ldr	r3, [pc, #292]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007288:	494b      	ldr	r1, [pc, #300]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800728a:	400a      	ands	r2, r1
 800728c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800728e:	4b47      	ldr	r3, [pc, #284]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	2380      	movs	r3, #128	; 0x80
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4013      	ands	r3, r2
 800729c:	d014      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800729e:	f7fe f941 	bl	8005524 <HAL_GetTick>
 80072a2:	0003      	movs	r3, r0
 80072a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072a6:	e009      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a8:	f7fe f93c 	bl	8005524 <HAL_GetTick>
 80072ac:	0002      	movs	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	4a42      	ldr	r2, [pc, #264]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e072      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072bc:	4b3b      	ldr	r3, [pc, #236]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80072be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072c0:	2380      	movs	r3, #128	; 0x80
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4013      	ands	r3, r2
 80072c6:	d0ef      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2220      	movs	r2, #32
 80072ce:	4013      	ands	r3, r2
 80072d0:	d01f      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	23c0      	movs	r3, #192	; 0xc0
 80072d8:	029b      	lsls	r3, r3, #10
 80072da:	401a      	ands	r2, r3
 80072dc:	23c0      	movs	r3, #192	; 0xc0
 80072de:	029b      	lsls	r3, r3, #10
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d10c      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x182>
 80072e4:	4b31      	ldr	r3, [pc, #196]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a35      	ldr	r2, [pc, #212]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	0019      	movs	r1, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	23c0      	movs	r3, #192	; 0xc0
 80072f4:	039b      	lsls	r3, r3, #14
 80072f6:	401a      	ands	r2, r3
 80072f8:	4b2c      	ldr	r3, [pc, #176]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80072fa:	430a      	orrs	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007300:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	23c0      	movs	r3, #192	; 0xc0
 8007308:	029b      	lsls	r3, r3, #10
 800730a:	401a      	ands	r2, r3
 800730c:	4b27      	ldr	r3, [pc, #156]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800730e:	430a      	orrs	r2, r1
 8007310:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007312:	2317      	movs	r3, #23
 8007314:	18fb      	adds	r3, r7, r3
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800731c:	4b23      	ldr	r3, [pc, #140]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800731e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007320:	4b22      	ldr	r3, [pc, #136]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007322:	4928      	ldr	r1, [pc, #160]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007324:	400a      	ands	r2, r1
 8007326:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2202      	movs	r2, #2
 800732e:	4013      	ands	r3, r2
 8007330:	d009      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007332:	4b1e      	ldr	r3, [pc, #120]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007336:	220c      	movs	r2, #12
 8007338:	4393      	bics	r3, r2
 800733a:	0019      	movs	r1, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007342:	430a      	orrs	r2, r1
 8007344:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2204      	movs	r2, #4
 800734c:	4013      	ands	r3, r2
 800734e:	d009      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007350:	4b16      	ldr	r3, [pc, #88]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007354:	4a1c      	ldr	r2, [pc, #112]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007356:	4013      	ands	r3, r2
 8007358:	0019      	movs	r1, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	4b13      	ldr	r3, [pc, #76]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007360:	430a      	orrs	r2, r1
 8007362:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2208      	movs	r2, #8
 800736a:	4013      	ands	r3, r2
 800736c:	d009      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007372:	4a16      	ldr	r2, [pc, #88]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007374:	4013      	ands	r3, r2
 8007376:	0019      	movs	r1, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800737e:	430a      	orrs	r2, r1
 8007380:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2280      	movs	r2, #128	; 0x80
 8007388:	4013      	ands	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800738e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007390:	4a0f      	ldr	r2, [pc, #60]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007392:	4013      	ands	r3, r2
 8007394:	0019      	movs	r1, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	4b04      	ldr	r3, [pc, #16]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800739c:	430a      	orrs	r2, r1
 800739e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	0018      	movs	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b006      	add	sp, #24
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	40021000 	.word	0x40021000
 80073b0:	40007000 	.word	0x40007000
 80073b4:	fffcffff 	.word	0xfffcffff
 80073b8:	fff7ffff 	.word	0xfff7ffff
 80073bc:	00001388 	.word	0x00001388
 80073c0:	ffcfffff 	.word	0xffcfffff
 80073c4:	efffffff 	.word	0xefffffff
 80073c8:	fffff3ff 	.word	0xfffff3ff
 80073cc:	ffffcfff 	.word	0xffffcfff
 80073d0:	fff3ffff 	.word	0xfff3ffff

080073d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e044      	b.n	8007470 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d107      	bne.n	80073fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2278      	movs	r2, #120	; 0x78
 80073f2:	2100      	movs	r1, #0
 80073f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f7fd ffa7 	bl	800534c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2224      	movs	r2, #36	; 0x24
 8007402:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2101      	movs	r1, #1
 8007410:	438a      	bics	r2, r1
 8007412:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	0018      	movs	r0, r3
 8007418:	f000 f8d0 	bl	80075bc <UART_SetConfig>
 800741c:	0003      	movs	r3, r0
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e024      	b.n	8007470 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0018      	movs	r0, r3
 8007432:	f000 fb0d 	bl	8007a50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	490d      	ldr	r1, [pc, #52]	; (8007478 <HAL_UART_Init+0xa4>)
 8007442:	400a      	ands	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	212a      	movs	r1, #42	; 0x2a
 8007452:	438a      	bics	r2, r1
 8007454:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2101      	movs	r1, #1
 8007462:	430a      	orrs	r2, r1
 8007464:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	0018      	movs	r0, r3
 800746a:	f000 fba5 	bl	8007bb8 <UART_CheckIdleState>
 800746e:	0003      	movs	r3, r0
}
 8007470:	0018      	movs	r0, r3
 8007472:	46bd      	mov	sp, r7
 8007474:	b002      	add	sp, #8
 8007476:	bd80      	pop	{r7, pc}
 8007478:	ffffb7ff 	.word	0xffffb7ff

0800747c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af02      	add	r7, sp, #8
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	1dbb      	adds	r3, r7, #6
 800748a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007490:	2b20      	cmp	r3, #32
 8007492:	d000      	beq.n	8007496 <HAL_UART_Transmit+0x1a>
 8007494:	e08c      	b.n	80075b0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_UART_Transmit+0x28>
 800749c:	1dbb      	adds	r3, r7, #6
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e084      	b.n	80075b2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	2380      	movs	r3, #128	; 0x80
 80074ae:	015b      	lsls	r3, r3, #5
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d109      	bne.n	80074c8 <HAL_UART_Transmit+0x4c>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2201      	movs	r2, #1
 80074c0:	4013      	ands	r3, r2
 80074c2:	d001      	beq.n	80074c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e074      	b.n	80075b2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2284      	movs	r2, #132	; 0x84
 80074cc:	2100      	movs	r1, #0
 80074ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2221      	movs	r2, #33	; 0x21
 80074d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074d6:	f7fe f825 	bl	8005524 <HAL_GetTick>
 80074da:	0003      	movs	r3, r0
 80074dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	1dba      	adds	r2, r7, #6
 80074e2:	2150      	movs	r1, #80	; 0x50
 80074e4:	8812      	ldrh	r2, [r2, #0]
 80074e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	1dba      	adds	r2, r7, #6
 80074ec:	2152      	movs	r1, #82	; 0x52
 80074ee:	8812      	ldrh	r2, [r2, #0]
 80074f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	015b      	lsls	r3, r3, #5
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d108      	bne.n	8007510 <HAL_UART_Transmit+0x94>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d104      	bne.n	8007510 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	61bb      	str	r3, [r7, #24]
 800750e:	e003      	b.n	8007518 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007514:	2300      	movs	r3, #0
 8007516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007518:	e02f      	b.n	800757a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	0013      	movs	r3, r2
 8007524:	2200      	movs	r2, #0
 8007526:	2180      	movs	r1, #128	; 0x80
 8007528:	f000 fbee 	bl	8007d08 <UART_WaitOnFlagUntilTimeout>
 800752c:	1e03      	subs	r3, r0, #0
 800752e:	d004      	beq.n	800753a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e03b      	b.n	80075b2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10b      	bne.n	8007558 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	001a      	movs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	05d2      	lsls	r2, r2, #23
 800754c:	0dd2      	lsrs	r2, r2, #23
 800754e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	3302      	adds	r3, #2
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	e007      	b.n	8007568 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	3301      	adds	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2252      	movs	r2, #82	; 0x52
 800756c:	5a9b      	ldrh	r3, [r3, r2]
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b299      	uxth	r1, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2252      	movs	r2, #82	; 0x52
 8007578:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2252      	movs	r2, #82	; 0x52
 800757e:	5a9b      	ldrh	r3, [r3, r2]
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1c9      	bne.n	800751a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	0013      	movs	r3, r2
 8007590:	2200      	movs	r2, #0
 8007592:	2140      	movs	r1, #64	; 0x40
 8007594:	f000 fbb8 	bl	8007d08 <UART_WaitOnFlagUntilTimeout>
 8007598:	1e03      	subs	r3, r0, #0
 800759a:	d004      	beq.n	80075a6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e005      	b.n	80075b2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	e000      	b.n	80075b2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
  }
}
 80075b2:	0018      	movs	r0, r3
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b008      	add	sp, #32
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075bc:	b5b0      	push	{r4, r5, r7, lr}
 80075be:	b08e      	sub	sp, #56	; 0x38
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075c4:	231a      	movs	r3, #26
 80075c6:	2218      	movs	r2, #24
 80075c8:	189b      	adds	r3, r3, r2
 80075ca:	19db      	adds	r3, r3, r7
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	431a      	orrs	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	431a      	orrs	r2, r3
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4ab4      	ldr	r2, [pc, #720]	; (80078c0 <UART_SetConfig+0x304>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	0019      	movs	r1, r3
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075fa:	430a      	orrs	r2, r1
 80075fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4aaf      	ldr	r2, [pc, #700]	; (80078c4 <UART_SetConfig+0x308>)
 8007606:	4013      	ands	r3, r2
 8007608:	0019      	movs	r1, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4aa9      	ldr	r2, [pc, #676]	; (80078c8 <UART_SetConfig+0x30c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800762c:	4313      	orrs	r3, r2
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	4aa5      	ldr	r2, [pc, #660]	; (80078cc <UART_SetConfig+0x310>)
 8007638:	4013      	ands	r3, r2
 800763a:	0019      	movs	r1, r3
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007642:	430a      	orrs	r2, r1
 8007644:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4aa1      	ldr	r2, [pc, #644]	; (80078d0 <UART_SetConfig+0x314>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d131      	bne.n	80076b4 <UART_SetConfig+0xf8>
 8007650:	4ba0      	ldr	r3, [pc, #640]	; (80078d4 <UART_SetConfig+0x318>)
 8007652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007654:	220c      	movs	r2, #12
 8007656:	4013      	ands	r3, r2
 8007658:	2b0c      	cmp	r3, #12
 800765a:	d01d      	beq.n	8007698 <UART_SetConfig+0xdc>
 800765c:	d823      	bhi.n	80076a6 <UART_SetConfig+0xea>
 800765e:	2b08      	cmp	r3, #8
 8007660:	d00c      	beq.n	800767c <UART_SetConfig+0xc0>
 8007662:	d820      	bhi.n	80076a6 <UART_SetConfig+0xea>
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <UART_SetConfig+0xb2>
 8007668:	2b04      	cmp	r3, #4
 800766a:	d00e      	beq.n	800768a <UART_SetConfig+0xce>
 800766c:	e01b      	b.n	80076a6 <UART_SetConfig+0xea>
 800766e:	231b      	movs	r3, #27
 8007670:	2218      	movs	r2, #24
 8007672:	189b      	adds	r3, r3, r2
 8007674:	19db      	adds	r3, r3, r7
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	e065      	b.n	8007748 <UART_SetConfig+0x18c>
 800767c:	231b      	movs	r3, #27
 800767e:	2218      	movs	r2, #24
 8007680:	189b      	adds	r3, r3, r2
 8007682:	19db      	adds	r3, r3, r7
 8007684:	2202      	movs	r2, #2
 8007686:	701a      	strb	r2, [r3, #0]
 8007688:	e05e      	b.n	8007748 <UART_SetConfig+0x18c>
 800768a:	231b      	movs	r3, #27
 800768c:	2218      	movs	r2, #24
 800768e:	189b      	adds	r3, r3, r2
 8007690:	19db      	adds	r3, r3, r7
 8007692:	2204      	movs	r2, #4
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e057      	b.n	8007748 <UART_SetConfig+0x18c>
 8007698:	231b      	movs	r3, #27
 800769a:	2218      	movs	r2, #24
 800769c:	189b      	adds	r3, r3, r2
 800769e:	19db      	adds	r3, r3, r7
 80076a0:	2208      	movs	r2, #8
 80076a2:	701a      	strb	r2, [r3, #0]
 80076a4:	e050      	b.n	8007748 <UART_SetConfig+0x18c>
 80076a6:	231b      	movs	r3, #27
 80076a8:	2218      	movs	r2, #24
 80076aa:	189b      	adds	r3, r3, r2
 80076ac:	19db      	adds	r3, r3, r7
 80076ae:	2210      	movs	r2, #16
 80076b0:	701a      	strb	r2, [r3, #0]
 80076b2:	e049      	b.n	8007748 <UART_SetConfig+0x18c>
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a83      	ldr	r2, [pc, #524]	; (80078c8 <UART_SetConfig+0x30c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d13e      	bne.n	800773c <UART_SetConfig+0x180>
 80076be:	4b85      	ldr	r3, [pc, #532]	; (80078d4 <UART_SetConfig+0x318>)
 80076c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076c2:	23c0      	movs	r3, #192	; 0xc0
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	4013      	ands	r3, r2
 80076c8:	22c0      	movs	r2, #192	; 0xc0
 80076ca:	0112      	lsls	r2, r2, #4
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d027      	beq.n	8007720 <UART_SetConfig+0x164>
 80076d0:	22c0      	movs	r2, #192	; 0xc0
 80076d2:	0112      	lsls	r2, r2, #4
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d82a      	bhi.n	800772e <UART_SetConfig+0x172>
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	0112      	lsls	r2, r2, #4
 80076dc:	4293      	cmp	r3, r2
 80076de:	d011      	beq.n	8007704 <UART_SetConfig+0x148>
 80076e0:	2280      	movs	r2, #128	; 0x80
 80076e2:	0112      	lsls	r2, r2, #4
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d822      	bhi.n	800772e <UART_SetConfig+0x172>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <UART_SetConfig+0x13a>
 80076ec:	2280      	movs	r2, #128	; 0x80
 80076ee:	00d2      	lsls	r2, r2, #3
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <UART_SetConfig+0x156>
 80076f4:	e01b      	b.n	800772e <UART_SetConfig+0x172>
 80076f6:	231b      	movs	r3, #27
 80076f8:	2218      	movs	r2, #24
 80076fa:	189b      	adds	r3, r3, r2
 80076fc:	19db      	adds	r3, r3, r7
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	e021      	b.n	8007748 <UART_SetConfig+0x18c>
 8007704:	231b      	movs	r3, #27
 8007706:	2218      	movs	r2, #24
 8007708:	189b      	adds	r3, r3, r2
 800770a:	19db      	adds	r3, r3, r7
 800770c:	2202      	movs	r2, #2
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e01a      	b.n	8007748 <UART_SetConfig+0x18c>
 8007712:	231b      	movs	r3, #27
 8007714:	2218      	movs	r2, #24
 8007716:	189b      	adds	r3, r3, r2
 8007718:	19db      	adds	r3, r3, r7
 800771a:	2204      	movs	r2, #4
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e013      	b.n	8007748 <UART_SetConfig+0x18c>
 8007720:	231b      	movs	r3, #27
 8007722:	2218      	movs	r2, #24
 8007724:	189b      	adds	r3, r3, r2
 8007726:	19db      	adds	r3, r3, r7
 8007728:	2208      	movs	r2, #8
 800772a:	701a      	strb	r2, [r3, #0]
 800772c:	e00c      	b.n	8007748 <UART_SetConfig+0x18c>
 800772e:	231b      	movs	r3, #27
 8007730:	2218      	movs	r2, #24
 8007732:	189b      	adds	r3, r3, r2
 8007734:	19db      	adds	r3, r3, r7
 8007736:	2210      	movs	r2, #16
 8007738:	701a      	strb	r2, [r3, #0]
 800773a:	e005      	b.n	8007748 <UART_SetConfig+0x18c>
 800773c:	231b      	movs	r3, #27
 800773e:	2218      	movs	r2, #24
 8007740:	189b      	adds	r3, r3, r2
 8007742:	19db      	adds	r3, r3, r7
 8007744:	2210      	movs	r2, #16
 8007746:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a5e      	ldr	r2, [pc, #376]	; (80078c8 <UART_SetConfig+0x30c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d000      	beq.n	8007754 <UART_SetConfig+0x198>
 8007752:	e084      	b.n	800785e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007754:	231b      	movs	r3, #27
 8007756:	2218      	movs	r2, #24
 8007758:	189b      	adds	r3, r3, r2
 800775a:	19db      	adds	r3, r3, r7
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b08      	cmp	r3, #8
 8007760:	d01d      	beq.n	800779e <UART_SetConfig+0x1e2>
 8007762:	dc20      	bgt.n	80077a6 <UART_SetConfig+0x1ea>
 8007764:	2b04      	cmp	r3, #4
 8007766:	d015      	beq.n	8007794 <UART_SetConfig+0x1d8>
 8007768:	dc1d      	bgt.n	80077a6 <UART_SetConfig+0x1ea>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <UART_SetConfig+0x1b8>
 800776e:	2b02      	cmp	r3, #2
 8007770:	d005      	beq.n	800777e <UART_SetConfig+0x1c2>
 8007772:	e018      	b.n	80077a6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007774:	f7ff fcd6 	bl	8007124 <HAL_RCC_GetPCLK1Freq>
 8007778:	0003      	movs	r3, r0
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800777c:	e01c      	b.n	80077b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800777e:	4b55      	ldr	r3, [pc, #340]	; (80078d4 <UART_SetConfig+0x318>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2210      	movs	r2, #16
 8007784:	4013      	ands	r3, r2
 8007786:	d002      	beq.n	800778e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007788:	4b53      	ldr	r3, [pc, #332]	; (80078d8 <UART_SetConfig+0x31c>)
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800778c:	e014      	b.n	80077b8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800778e:	4b53      	ldr	r3, [pc, #332]	; (80078dc <UART_SetConfig+0x320>)
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007792:	e011      	b.n	80077b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007794:	f7ff fc16 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 8007798:	0003      	movs	r3, r0
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800779c:	e00c      	b.n	80077b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779e:	2380      	movs	r3, #128	; 0x80
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077a4:	e008      	b.n	80077b8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077aa:	231a      	movs	r3, #26
 80077ac:	2218      	movs	r2, #24
 80077ae:	189b      	adds	r3, r3, r2
 80077b0:	19db      	adds	r3, r3, r7
 80077b2:	2201      	movs	r2, #1
 80077b4:	701a      	strb	r2, [r3, #0]
        break;
 80077b6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d100      	bne.n	80077c0 <UART_SetConfig+0x204>
 80077be:	e12f      	b.n	8007a20 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	0013      	movs	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	189b      	adds	r3, r3, r2
 80077ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d305      	bcc.n	80077dc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d906      	bls.n	80077ea <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80077dc:	231a      	movs	r3, #26
 80077de:	2218      	movs	r2, #24
 80077e0:	189b      	adds	r3, r3, r2
 80077e2:	19db      	adds	r3, r3, r7
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	e11a      	b.n	8007a20 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	6939      	ldr	r1, [r7, #16]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	000b      	movs	r3, r1
 80077f8:	0e1b      	lsrs	r3, r3, #24
 80077fa:	0010      	movs	r0, r2
 80077fc:	0205      	lsls	r5, r0, #8
 80077fe:	431d      	orrs	r5, r3
 8007800:	000b      	movs	r3, r1
 8007802:	021c      	lsls	r4, r3, #8
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	085b      	lsrs	r3, r3, #1
 800780a:	60bb      	str	r3, [r7, #8]
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	1900      	adds	r0, r0, r4
 8007816:	4169      	adcs	r1, r5
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	2300      	movs	r3, #0
 8007820:	607b      	str	r3, [r7, #4]
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f7f8 fd4b 	bl	80002c0 <__aeabi_uldivmod>
 800782a:	0002      	movs	r2, r0
 800782c:	000b      	movs	r3, r1
 800782e:	0013      	movs	r3, r2
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007834:	23c0      	movs	r3, #192	; 0xc0
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	429a      	cmp	r2, r3
 800783a:	d309      	bcc.n	8007850 <UART_SetConfig+0x294>
 800783c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783e:	2380      	movs	r3, #128	; 0x80
 8007840:	035b      	lsls	r3, r3, #13
 8007842:	429a      	cmp	r2, r3
 8007844:	d204      	bcs.n	8007850 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	e0e7      	b.n	8007a20 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8007850:	231a      	movs	r3, #26
 8007852:	2218      	movs	r2, #24
 8007854:	189b      	adds	r3, r3, r2
 8007856:	19db      	adds	r3, r3, r7
 8007858:	2201      	movs	r2, #1
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	e0e0      	b.n	8007a20 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	69da      	ldr	r2, [r3, #28]
 8007862:	2380      	movs	r3, #128	; 0x80
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	429a      	cmp	r2, r3
 8007868:	d000      	beq.n	800786c <UART_SetConfig+0x2b0>
 800786a:	e082      	b.n	8007972 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800786c:	231b      	movs	r3, #27
 800786e:	2218      	movs	r2, #24
 8007870:	189b      	adds	r3, r3, r2
 8007872:	19db      	adds	r3, r3, r7
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b08      	cmp	r3, #8
 8007878:	d834      	bhi.n	80078e4 <UART_SetConfig+0x328>
 800787a:	009a      	lsls	r2, r3, #2
 800787c:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <UART_SetConfig+0x324>)
 800787e:	18d3      	adds	r3, r2, r3
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007884:	f7ff fc4e 	bl	8007124 <HAL_RCC_GetPCLK1Freq>
 8007888:	0003      	movs	r3, r0
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800788c:	e033      	b.n	80078f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800788e:	f7ff fc5f 	bl	8007150 <HAL_RCC_GetPCLK2Freq>
 8007892:	0003      	movs	r3, r0
 8007894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007896:	e02e      	b.n	80078f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007898:	4b0e      	ldr	r3, [pc, #56]	; (80078d4 <UART_SetConfig+0x318>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2210      	movs	r2, #16
 800789e:	4013      	ands	r3, r2
 80078a0:	d002      	beq.n	80078a8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80078a2:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <UART_SetConfig+0x31c>)
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078a6:	e026      	b.n	80078f6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80078a8:	4b0c      	ldr	r3, [pc, #48]	; (80078dc <UART_SetConfig+0x320>)
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078ac:	e023      	b.n	80078f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ae:	f7ff fb89 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 80078b2:	0003      	movs	r3, r0
 80078b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078b6:	e01e      	b.n	80078f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b8:	2380      	movs	r3, #128	; 0x80
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078be:	e01a      	b.n	80078f6 <UART_SetConfig+0x33a>
 80078c0:	efff69f3 	.word	0xefff69f3
 80078c4:	ffffcfff 	.word	0xffffcfff
 80078c8:	40004800 	.word	0x40004800
 80078cc:	fffff4ff 	.word	0xfffff4ff
 80078d0:	40004400 	.word	0x40004400
 80078d4:	40021000 	.word	0x40021000
 80078d8:	003d0900 	.word	0x003d0900
 80078dc:	00f42400 	.word	0x00f42400
 80078e0:	08009df8 	.word	0x08009df8
      default:
        pclk = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80078e8:	231a      	movs	r3, #26
 80078ea:	2218      	movs	r2, #24
 80078ec:	189b      	adds	r3, r3, r2
 80078ee:	19db      	adds	r3, r3, r7
 80078f0:	2201      	movs	r2, #1
 80078f2:	701a      	strb	r2, [r3, #0]
        break;
 80078f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d100      	bne.n	80078fe <UART_SetConfig+0x342>
 80078fc:	e090      	b.n	8007a20 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	005a      	lsls	r2, r3, #1
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	18d2      	adds	r2, r2, r3
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	0019      	movs	r1, r3
 8007910:	0010      	movs	r0, r2
 8007912:	f7f8 fc0b 	bl	800012c <__udivsi3>
 8007916:	0003      	movs	r3, r0
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	2b0f      	cmp	r3, #15
 800791e:	d921      	bls.n	8007964 <UART_SetConfig+0x3a8>
 8007920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007922:	2380      	movs	r3, #128	; 0x80
 8007924:	025b      	lsls	r3, r3, #9
 8007926:	429a      	cmp	r2, r3
 8007928:	d21c      	bcs.n	8007964 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	b29a      	uxth	r2, r3
 800792e:	200e      	movs	r0, #14
 8007930:	2418      	movs	r4, #24
 8007932:	1903      	adds	r3, r0, r4
 8007934:	19db      	adds	r3, r3, r7
 8007936:	210f      	movs	r1, #15
 8007938:	438a      	bics	r2, r1
 800793a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	085b      	lsrs	r3, r3, #1
 8007940:	b29b      	uxth	r3, r3
 8007942:	2207      	movs	r2, #7
 8007944:	4013      	ands	r3, r2
 8007946:	b299      	uxth	r1, r3
 8007948:	1903      	adds	r3, r0, r4
 800794a:	19db      	adds	r3, r3, r7
 800794c:	1902      	adds	r2, r0, r4
 800794e:	19d2      	adds	r2, r2, r7
 8007950:	8812      	ldrh	r2, [r2, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	1902      	adds	r2, r0, r4
 800795c:	19d2      	adds	r2, r2, r7
 800795e:	8812      	ldrh	r2, [r2, #0]
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	e05d      	b.n	8007a20 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8007964:	231a      	movs	r3, #26
 8007966:	2218      	movs	r2, #24
 8007968:	189b      	adds	r3, r3, r2
 800796a:	19db      	adds	r3, r3, r7
 800796c:	2201      	movs	r2, #1
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e056      	b.n	8007a20 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007972:	231b      	movs	r3, #27
 8007974:	2218      	movs	r2, #24
 8007976:	189b      	adds	r3, r3, r2
 8007978:	19db      	adds	r3, r3, r7
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b08      	cmp	r3, #8
 800797e:	d822      	bhi.n	80079c6 <UART_SetConfig+0x40a>
 8007980:	009a      	lsls	r2, r3, #2
 8007982:	4b2f      	ldr	r3, [pc, #188]	; (8007a40 <UART_SetConfig+0x484>)
 8007984:	18d3      	adds	r3, r2, r3
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800798a:	f7ff fbcb 	bl	8007124 <HAL_RCC_GetPCLK1Freq>
 800798e:	0003      	movs	r3, r0
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007992:	e021      	b.n	80079d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007994:	f7ff fbdc 	bl	8007150 <HAL_RCC_GetPCLK2Freq>
 8007998:	0003      	movs	r3, r0
 800799a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800799c:	e01c      	b.n	80079d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800799e:	4b29      	ldr	r3, [pc, #164]	; (8007a44 <UART_SetConfig+0x488>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2210      	movs	r2, #16
 80079a4:	4013      	ands	r3, r2
 80079a6:	d002      	beq.n	80079ae <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80079a8:	4b27      	ldr	r3, [pc, #156]	; (8007a48 <UART_SetConfig+0x48c>)
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079ac:	e014      	b.n	80079d8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80079ae:	4b27      	ldr	r3, [pc, #156]	; (8007a4c <UART_SetConfig+0x490>)
 80079b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079b2:	e011      	b.n	80079d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079b4:	f7ff fb06 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 80079b8:	0003      	movs	r3, r0
 80079ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079bc:	e00c      	b.n	80079d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079be:	2380      	movs	r3, #128	; 0x80
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079c4:	e008      	b.n	80079d8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079ca:	231a      	movs	r3, #26
 80079cc:	2218      	movs	r2, #24
 80079ce:	189b      	adds	r3, r3, r2
 80079d0:	19db      	adds	r3, r3, r7
 80079d2:	2201      	movs	r2, #1
 80079d4:	701a      	strb	r2, [r3, #0]
        break;
 80079d6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d020      	beq.n	8007a20 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	085a      	lsrs	r2, r3, #1
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	18d2      	adds	r2, r2, r3
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	0019      	movs	r1, r3
 80079ee:	0010      	movs	r0, r2
 80079f0:	f7f8 fb9c 	bl	800012c <__udivsi3>
 80079f4:	0003      	movs	r3, r0
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	d90a      	bls.n	8007a14 <UART_SetConfig+0x458>
 80079fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a00:	2380      	movs	r3, #128	; 0x80
 8007a02:	025b      	lsls	r3, r3, #9
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d205      	bcs.n	8007a14 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60da      	str	r2, [r3, #12]
 8007a12:	e005      	b.n	8007a20 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8007a14:	231a      	movs	r3, #26
 8007a16:	2218      	movs	r2, #24
 8007a18:	189b      	adds	r3, r3, r2
 8007a1a:	19db      	adds	r3, r3, r7
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	2200      	movs	r2, #0
 8007a24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a2c:	231a      	movs	r3, #26
 8007a2e:	2218      	movs	r2, #24
 8007a30:	189b      	adds	r3, r3, r2
 8007a32:	19db      	adds	r3, r3, r7
 8007a34:	781b      	ldrb	r3, [r3, #0]
}
 8007a36:	0018      	movs	r0, r3
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	b00e      	add	sp, #56	; 0x38
 8007a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	08009e1c 	.word	0x08009e1c
 8007a44:	40021000 	.word	0x40021000
 8007a48:	003d0900 	.word	0x003d0900
 8007a4c:	00f42400 	.word	0x00f42400

08007a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	4013      	ands	r3, r2
 8007a60:	d00b      	beq.n	8007a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a4a      	ldr	r2, [pc, #296]	; (8007b94 <UART_AdvFeatureConfig+0x144>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	0019      	movs	r1, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	2202      	movs	r2, #2
 8007a80:	4013      	ands	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4a43      	ldr	r2, [pc, #268]	; (8007b98 <UART_AdvFeatureConfig+0x148>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	0019      	movs	r1, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2204      	movs	r2, #4
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	d00b      	beq.n	8007abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4a3b      	ldr	r2, [pc, #236]	; (8007b9c <UART_AdvFeatureConfig+0x14c>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	0019      	movs	r1, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	d00b      	beq.n	8007ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	4a34      	ldr	r2, [pc, #208]	; (8007ba0 <UART_AdvFeatureConfig+0x150>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	0019      	movs	r1, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	d00b      	beq.n	8007b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	4a2c      	ldr	r2, [pc, #176]	; (8007ba4 <UART_AdvFeatureConfig+0x154>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	0019      	movs	r1, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2220      	movs	r2, #32
 8007b08:	4013      	ands	r3, r2
 8007b0a:	d00b      	beq.n	8007b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	4a25      	ldr	r2, [pc, #148]	; (8007ba8 <UART_AdvFeatureConfig+0x158>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	0019      	movs	r1, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	2240      	movs	r2, #64	; 0x40
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	d01d      	beq.n	8007b6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	4a1d      	ldr	r2, [pc, #116]	; (8007bac <UART_AdvFeatureConfig+0x15c>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	0019      	movs	r1, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	035b      	lsls	r3, r3, #13
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d10b      	bne.n	8007b6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <UART_AdvFeatureConfig+0x160>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	0019      	movs	r1, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	2280      	movs	r2, #128	; 0x80
 8007b70:	4013      	ands	r3, r2
 8007b72:	d00b      	beq.n	8007b8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	4a0e      	ldr	r2, [pc, #56]	; (8007bb4 <UART_AdvFeatureConfig+0x164>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	0019      	movs	r1, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }
}
 8007b8c:	46c0      	nop			; (mov r8, r8)
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b002      	add	sp, #8
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	fffdffff 	.word	0xfffdffff
 8007b98:	fffeffff 	.word	0xfffeffff
 8007b9c:	fffbffff 	.word	0xfffbffff
 8007ba0:	ffff7fff 	.word	0xffff7fff
 8007ba4:	ffffefff 	.word	0xffffefff
 8007ba8:	ffffdfff 	.word	0xffffdfff
 8007bac:	ffefffff 	.word	0xffefffff
 8007bb0:	ff9fffff 	.word	0xff9fffff
 8007bb4:	fff7ffff 	.word	0xfff7ffff

08007bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b092      	sub	sp, #72	; 0x48
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2284      	movs	r2, #132	; 0x84
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bc8:	f7fd fcac 	bl	8005524 <HAL_GetTick>
 8007bcc:	0003      	movs	r3, r0
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	4013      	ands	r3, r2
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d12c      	bne.n	8007c38 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be0:	2280      	movs	r2, #128	; 0x80
 8007be2:	0391      	lsls	r1, r2, #14
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4a46      	ldr	r2, [pc, #280]	; (8007d00 <UART_CheckIdleState+0x148>)
 8007be8:	9200      	str	r2, [sp, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f000 f88c 	bl	8007d08 <UART_WaitOnFlagUntilTimeout>
 8007bf0:	1e03      	subs	r3, r0, #0
 8007bf2:	d021      	beq.n	8007c38 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bfe:	2301      	movs	r3, #1
 8007c00:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	f383 8810 	msr	PRIMASK, r3
}
 8007c08:	46c0      	nop			; (mov r8, r8)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2180      	movs	r1, #128	; 0x80
 8007c16:	438a      	bics	r2, r1
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	f383 8810 	msr	PRIMASK, r3
}
 8007c24:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2278      	movs	r2, #120	; 0x78
 8007c30:	2100      	movs	r1, #0
 8007c32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e05f      	b.n	8007cf8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2204      	movs	r2, #4
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d146      	bne.n	8007cd4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	03d1      	lsls	r1, r2, #15
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4a2c      	ldr	r2, [pc, #176]	; (8007d00 <UART_CheckIdleState+0x148>)
 8007c50:	9200      	str	r2, [sp, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f000 f858 	bl	8007d08 <UART_WaitOnFlagUntilTimeout>
 8007c58:	1e03      	subs	r3, r0, #0
 8007c5a:	d03b      	beq.n	8007cd4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c60:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c62:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
 8007c66:	2301      	movs	r3, #1
 8007c68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f383 8810 	msr	PRIMASK, r3
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4921      	ldr	r1, [pc, #132]	; (8007d04 <UART_CheckIdleState+0x14c>)
 8007c7e:	400a      	ands	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f383 8810 	msr	PRIMASK, r3
}
 8007c8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c92:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c94:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c96:	633b      	str	r3, [r7, #48]	; 0x30
 8007c98:	2301      	movs	r3, #1
 8007c9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2101      	movs	r1, #1
 8007cb0:	438a      	bics	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	f383 8810 	msr	PRIMASK, r3
}
 8007cbe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2280      	movs	r2, #128	; 0x80
 8007cc4:	2120      	movs	r1, #32
 8007cc6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2278      	movs	r2, #120	; 0x78
 8007ccc:	2100      	movs	r1, #0
 8007cce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e011      	b.n	8007cf8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2280      	movs	r2, #128	; 0x80
 8007cde:	2120      	movs	r1, #32
 8007ce0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2278      	movs	r2, #120	; 0x78
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	b010      	add	sp, #64	; 0x40
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	01ffffff 	.word	0x01ffffff
 8007d04:	fffffedf 	.word	0xfffffedf

08007d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	1dfb      	adds	r3, r7, #7
 8007d16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d18:	e04b      	b.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	d048      	beq.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d20:	f7fd fc00 	bl	8005524 <HAL_GetTick>
 8007d24:	0002      	movs	r2, r0
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d302      	bcc.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e04b      	b.n	8007dd2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2204      	movs	r2, #4
 8007d42:	4013      	ands	r3, r2
 8007d44:	d035      	beq.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d111      	bne.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2208      	movs	r2, #8
 8007d5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f000 f83c 	bl	8007ddc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2284      	movs	r2, #132	; 0x84
 8007d68:	2108      	movs	r1, #8
 8007d6a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2278      	movs	r2, #120	; 0x78
 8007d70:	2100      	movs	r1, #0
 8007d72:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e02c      	b.n	8007dd2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69da      	ldr	r2, [r3, #28]
 8007d7e:	2380      	movs	r3, #128	; 0x80
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	401a      	ands	r2, r3
 8007d84:	2380      	movs	r3, #128	; 0x80
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d112      	bne.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2280      	movs	r2, #128	; 0x80
 8007d92:	0112      	lsls	r2, r2, #4
 8007d94:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f000 f81f 	bl	8007ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2284      	movs	r2, #132	; 0x84
 8007da2:	2120      	movs	r1, #32
 8007da4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2278      	movs	r2, #120	; 0x78
 8007daa:	2100      	movs	r1, #0
 8007dac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e00f      	b.n	8007dd2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	425a      	negs	r2, r3
 8007dc2:	4153      	adcs	r3, r2
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	001a      	movs	r2, r3
 8007dc8:	1dfb      	adds	r3, r7, #7
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d0a4      	beq.n	8007d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	b004      	add	sp, #16
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08e      	sub	sp, #56	; 0x38
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de4:	f3ef 8310 	mrs	r3, PRIMASK
 8007de8:	617b      	str	r3, [r7, #20]
  return(result);
 8007dea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
 8007dee:	2301      	movs	r3, #1
 8007df0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	f383 8810 	msr	PRIMASK, r3
}
 8007df8:	46c0      	nop			; (mov r8, r8)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4926      	ldr	r1, [pc, #152]	; (8007ea0 <UART_EndRxTransfer+0xc4>)
 8007e06:	400a      	ands	r2, r1
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f383 8810 	msr	PRIMASK, r3
}
 8007e14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e16:	f3ef 8310 	mrs	r3, PRIMASK
 8007e1a:	623b      	str	r3, [r7, #32]
  return(result);
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e20:	2301      	movs	r3, #1
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	f383 8810 	msr	PRIMASK, r3
}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2101      	movs	r1, #1
 8007e38:	438a      	bics	r2, r1
 8007e3a:	609a      	str	r2, [r3, #8]
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	f383 8810 	msr	PRIMASK, r3
}
 8007e46:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d118      	bne.n	8007e82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e50:	f3ef 8310 	mrs	r3, PRIMASK
 8007e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f383 8810 	msr	PRIMASK, r3
}
 8007e64:	46c0      	nop			; (mov r8, r8)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2110      	movs	r1, #16
 8007e72:	438a      	bics	r2, r1
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f383 8810 	msr	PRIMASK, r3
}
 8007e80:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2280      	movs	r2, #128	; 0x80
 8007e86:	2120      	movs	r1, #32
 8007e88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b00e      	add	sp, #56	; 0x38
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	fffffedf 	.word	0xfffffedf

08007ea4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	0002      	movs	r2, r0
 8007eac:	1dbb      	adds	r3, r7, #6
 8007eae:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007eb4:	1dbb      	adds	r3, r7, #6
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	5e9b      	ldrsh	r3, [r3, r2]
 8007eba:	2b84      	cmp	r3, #132	; 0x84
 8007ebc:	d006      	beq.n	8007ecc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8007ebe:	1dbb      	adds	r3, r7, #6
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	5e9a      	ldrsh	r2, [r3, r2]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	18d3      	adds	r3, r2, r3
 8007ec8:	3303      	adds	r3, #3
 8007eca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	0018      	movs	r0, r3
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	b004      	add	sp, #16
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007eda:	f000 fd85 	bl	80089e8 <vTaskStartScheduler>
  
  return osOK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee8:	b089      	sub	sp, #36	; 0x24
 8007eea:	af04      	add	r7, sp, #16
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d020      	beq.n	8007f3a <osThreadCreate+0x54>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01c      	beq.n	8007f3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685c      	ldr	r4, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681d      	ldr	r5, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691e      	ldr	r6, [r3, #16]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2208      	movs	r2, #8
 8007f10:	5e9b      	ldrsh	r3, [r3, r2]
 8007f12:	0018      	movs	r0, r3
 8007f14:	f7ff ffc6 	bl	8007ea4 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	9201      	str	r2, [sp, #4]
 8007f26:	9000      	str	r0, [sp, #0]
 8007f28:	000b      	movs	r3, r1
 8007f2a:	0032      	movs	r2, r6
 8007f2c:	0029      	movs	r1, r5
 8007f2e:	0020      	movs	r0, r4
 8007f30:	f000 fbbe 	bl	80086b0 <xTaskCreateStatic>
 8007f34:	0003      	movs	r3, r0
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	e01d      	b.n	8007f76 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685c      	ldr	r4, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f46:	b29e      	uxth	r6, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2208      	movs	r2, #8
 8007f4c:	5e9b      	ldrsh	r3, [r3, r2]
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7ff ffa8 	bl	8007ea4 <makeFreeRtosPriority>
 8007f54:	0001      	movs	r1, r0
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	230c      	movs	r3, #12
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	9100      	str	r1, [sp, #0]
 8007f60:	0013      	movs	r3, r2
 8007f62:	0032      	movs	r2, r6
 8007f64:	0029      	movs	r1, r5
 8007f66:	0020      	movs	r0, r4
 8007f68:	f000 fbe6 	bl	8008738 <xTaskCreate>
 8007f6c:	0003      	movs	r3, r0
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d001      	beq.n	8007f76 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e000      	b.n	8007f78 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007f76:	68fb      	ldr	r3, [r7, #12]
}
 8007f78:	0018      	movs	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b005      	add	sp, #20
 8007f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f80 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <osDelay+0x16>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	e000      	b.n	8007f98 <osDelay+0x18>
 8007f96:	2301      	movs	r3, #1
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f000 fcff 	bl	800899c <vTaskDelay>
  
  return osOK;
 8007f9e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	b004      	add	sp, #16
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007fb4:	f000 fd66 	bl	8008a84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fb8:	4b49      	ldr	r3, [pc, #292]	; (80080e0 <pvPortMalloc+0x138>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fc0:	f000 f8e0 	bl	8008184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fc4:	4b47      	ldr	r3, [pc, #284]	; (80080e4 <pvPortMalloc+0x13c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	d000      	beq.n	8007fd0 <pvPortMalloc+0x28>
 8007fce:	e079      	b.n	80080c4 <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d012      	beq.n	8007ffc <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	189b      	adds	r3, r3, r2
 8007fdc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2207      	movs	r2, #7
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	d00a      	beq.n	8007ffc <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2207      	movs	r2, #7
 8007fea:	4393      	bics	r3, r2
 8007fec:	3308      	adds	r3, #8
 8007fee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2207      	movs	r2, #7
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	d001      	beq.n	8007ffc <pvPortMalloc+0x54>
 8007ff8:	b672      	cpsid	i
 8007ffa:	e7fe      	b.n	8007ffa <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d060      	beq.n	80080c4 <pvPortMalloc+0x11c>
 8008002:	4b39      	ldr	r3, [pc, #228]	; (80080e8 <pvPortMalloc+0x140>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	429a      	cmp	r2, r3
 800800a:	d85b      	bhi.n	80080c4 <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800800c:	4b37      	ldr	r3, [pc, #220]	; (80080ec <pvPortMalloc+0x144>)
 800800e:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008010:	4b36      	ldr	r3, [pc, #216]	; (80080ec <pvPortMalloc+0x144>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008016:	e004      	b.n	8008022 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	429a      	cmp	r2, r3
 800802a:	d903      	bls.n	8008034 <pvPortMalloc+0x8c>
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1f1      	bne.n	8008018 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008034:	4b2a      	ldr	r3, [pc, #168]	; (80080e0 <pvPortMalloc+0x138>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	429a      	cmp	r2, r3
 800803c:	d042      	beq.n	80080c4 <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2208      	movs	r2, #8
 8008044:	189b      	adds	r3, r3, r2
 8008046:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	1ad2      	subs	r2, r2, r3
 8008058:	2308      	movs	r3, #8
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	429a      	cmp	r2, r3
 800805e:	d916      	bls.n	800808e <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	18d3      	adds	r3, r2, r3
 8008066:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2207      	movs	r2, #7
 800806c:	4013      	ands	r3, r2
 800806e:	d001      	beq.n	8008074 <pvPortMalloc+0xcc>
 8008070:	b672      	cpsid	i
 8008072:	e7fe      	b.n	8008072 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	0018      	movs	r0, r3
 800808a:	f000 f8db 	bl	8008244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800808e:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <pvPortMalloc+0x140>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <pvPortMalloc+0x140>)
 800809a:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800809c:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <pvPortMalloc+0x140>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <pvPortMalloc+0x148>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d203      	bcs.n	80080b0 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080a8:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <pvPortMalloc+0x140>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <pvPortMalloc+0x148>)
 80080ae:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <pvPortMalloc+0x13c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	431a      	orrs	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2200      	movs	r2, #0
 80080c2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080c4:	f000 fcea 	bl	8008a9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2207      	movs	r2, #7
 80080cc:	4013      	ands	r3, r2
 80080ce:	d001      	beq.n	80080d4 <pvPortMalloc+0x12c>
 80080d0:	b672      	cpsid	i
 80080d2:	e7fe      	b.n	80080d2 <pvPortMalloc+0x12a>
	return pvReturn;
 80080d4:	68fb      	ldr	r3, [r7, #12]
}
 80080d6:	0018      	movs	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	b006      	add	sp, #24
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	46c0      	nop			; (mov r8, r8)
 80080e0:	200012d8 	.word	0x200012d8
 80080e4:	200012e4 	.word	0x200012e4
 80080e8:	200012dc 	.word	0x200012dc
 80080ec:	200012d0 	.word	0x200012d0
 80080f0:	200012e0 	.word	0x200012e0

080080f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d035      	beq.n	8008172 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008106:	2308      	movs	r3, #8
 8008108:	425b      	negs	r3, r3
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	18d3      	adds	r3, r2, r3
 800810e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	4b18      	ldr	r3, [pc, #96]	; (800817c <vPortFree+0x88>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4013      	ands	r3, r2
 800811e:	d101      	bne.n	8008124 <vPortFree+0x30>
 8008120:	b672      	cpsid	i
 8008122:	e7fe      	b.n	8008122 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <vPortFree+0x3c>
 800812c:	b672      	cpsid	i
 800812e:	e7fe      	b.n	800812e <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	4b11      	ldr	r3, [pc, #68]	; (800817c <vPortFree+0x88>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4013      	ands	r3, r2
 800813a:	d01a      	beq.n	8008172 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d116      	bne.n	8008172 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	4b0c      	ldr	r3, [pc, #48]	; (800817c <vPortFree+0x88>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	43db      	mvns	r3, r3
 800814e:	401a      	ands	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008154:	f000 fc96 	bl	8008a84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	4b08      	ldr	r3, [pc, #32]	; (8008180 <vPortFree+0x8c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	18d2      	adds	r2, r2, r3
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <vPortFree+0x8c>)
 8008164:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	0018      	movs	r0, r3
 800816a:	f000 f86b 	bl	8008244 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800816e:	f000 fc95 	bl	8008a9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	46bd      	mov	sp, r7
 8008176:	b004      	add	sp, #16
 8008178:	bd80      	pop	{r7, pc}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	200012e4 	.word	0x200012e4
 8008180:	200012dc 	.word	0x200012dc

08008184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800818a:	23c0      	movs	r3, #192	; 0xc0
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008190:	4b26      	ldr	r3, [pc, #152]	; (800822c <prvHeapInit+0xa8>)
 8008192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2207      	movs	r2, #7
 8008198:	4013      	ands	r3, r2
 800819a:	d00c      	beq.n	80081b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3307      	adds	r3, #7
 80081a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2207      	movs	r2, #7
 80081a6:	4393      	bics	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	4b1e      	ldr	r3, [pc, #120]	; (800822c <prvHeapInit+0xa8>)
 80081b2:	18d3      	adds	r3, r2, r3
 80081b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <prvHeapInit+0xac>)
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081c0:	4b1b      	ldr	r3, [pc, #108]	; (8008230 <prvHeapInit+0xac>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	18d3      	adds	r3, r2, r3
 80081cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081ce:	2208      	movs	r2, #8
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2207      	movs	r2, #7
 80081da:	4393      	bics	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4b14      	ldr	r3, [pc, #80]	; (8008234 <prvHeapInit+0xb0>)
 80081e2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80081e4:	4b13      	ldr	r3, [pc, #76]	; (8008234 <prvHeapInit+0xb0>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2200      	movs	r2, #0
 80081ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ec:	4b11      	ldr	r3, [pc, #68]	; (8008234 <prvHeapInit+0xb0>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	1ad2      	subs	r2, r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008202:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <prvHeapInit+0xb0>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <prvHeapInit+0xb4>)
 8008210:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	4b09      	ldr	r3, [pc, #36]	; (800823c <prvHeapInit+0xb8>)
 8008218:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800821a:	4b09      	ldr	r3, [pc, #36]	; (8008240 <prvHeapInit+0xbc>)
 800821c:	2280      	movs	r2, #128	; 0x80
 800821e:	0612      	lsls	r2, r2, #24
 8008220:	601a      	str	r2, [r3, #0]
}
 8008222:	46c0      	nop			; (mov r8, r8)
 8008224:	46bd      	mov	sp, r7
 8008226:	b004      	add	sp, #16
 8008228:	bd80      	pop	{r7, pc}
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	200006d0 	.word	0x200006d0
 8008230:	200012d0 	.word	0x200012d0
 8008234:	200012d8 	.word	0x200012d8
 8008238:	200012e0 	.word	0x200012e0
 800823c:	200012dc 	.word	0x200012dc
 8008240:	200012e4 	.word	0x200012e4

08008244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800824c:	4b27      	ldr	r3, [pc, #156]	; (80082ec <prvInsertBlockIntoFreeList+0xa8>)
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e002      	b.n	8008258 <prvInsertBlockIntoFreeList+0x14>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	429a      	cmp	r2, r3
 8008260:	d8f7      	bhi.n	8008252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	18d3      	adds	r3, r2, r3
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d108      	bne.n	8008286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	18d2      	adds	r2, r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	18d2      	adds	r2, r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d118      	bne.n	80082cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b14      	ldr	r3, [pc, #80]	; (80082f0 <prvInsertBlockIntoFreeList+0xac>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d00d      	beq.n	80082c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	18d2      	adds	r2, r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	e008      	b.n	80082d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <prvInsertBlockIntoFreeList+0xac>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	e003      	b.n	80082d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d002      	beq.n	80082e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082e2:	46c0      	nop			; (mov r8, r8)
 80082e4:	46bd      	mov	sp, r7
 80082e6:	b004      	add	sp, #16
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	200012d0 	.word	0x200012d0
 80082f0:	200012d8 	.word	0x200012d8

080082f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3308      	adds	r3, #8
 8008300:	001a      	movs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	4252      	negs	r2, r2
 800830c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3308      	adds	r3, #8
 8008312:	001a      	movs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3308      	adds	r3, #8
 800831c:	001a      	movs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008328:	46c0      	nop			; (mov r8, r8)
 800832a:	46bd      	mov	sp, r7
 800832c:	b002      	add	sp, #8
 800832e:	bd80      	pop	{r7, pc}

08008330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	46bd      	mov	sp, r7
 8008342:	b002      	add	sp, #8
 8008344:	bd80      	pop	{r7, pc}

08008346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	601a      	str	r2, [r3, #0]
}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b004      	add	sp, #16
 8008388:	bd80      	pop	{r7, pc}

0800838a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	3301      	adds	r3, #1
 800839e:	d103      	bne.n	80083a8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	e00c      	b.n	80083c2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3308      	adds	r3, #8
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	e002      	b.n	80083b6 <vListInsert+0x2c>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d2f6      	bcs.n	80083b0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	601a      	str	r2, [r3, #0]
}
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	46bd      	mov	sp, r7
 80083f2:	b004      	add	sp, #16
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	6892      	ldr	r2, [r2, #8]
 800840c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	6852      	ldr	r2, [r2, #4]
 8008416:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	429a      	cmp	r2, r3
 8008420:	d103      	bne.n	800842a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	1e5a      	subs	r2, r3, #1
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
}
 800843e:	0018      	movs	r0, r3
 8008440:	46bd      	mov	sp, r7
 8008442:	b004      	add	sp, #16
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3b04      	subs	r3, #4
 8008458:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2280      	movs	r2, #128	; 0x80
 800845e:	0452      	lsls	r2, r2, #17
 8008460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3b04      	subs	r3, #4
 8008466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b04      	subs	r3, #4
 8008472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008474:	4a08      	ldr	r2, [pc, #32]	; (8008498 <pxPortInitialiseStack+0x50>)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3b14      	subs	r3, #20
 800847e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3b20      	subs	r3, #32
 800848a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	0018      	movs	r0, r3
 8008490:	46bd      	mov	sp, r7
 8008492:	b004      	add	sp, #16
 8008494:	bd80      	pop	{r7, pc}
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	0800849d 	.word	0x0800849d

0800849c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084a6:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <prvTaskExitError+0x2c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3301      	adds	r3, #1
 80084ac:	d001      	beq.n	80084b2 <prvTaskExitError+0x16>
 80084ae:	b672      	cpsid	i
 80084b0:	e7fe      	b.n	80084b0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80084b2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80084b4:	46c0      	nop			; (mov r8, r8)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0fc      	beq.n	80084b6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084bc:	46c0      	nop			; (mov r8, r8)
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	46bd      	mov	sp, r7
 80084c2:	b002      	add	sp, #8
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	2000000c 	.word	0x2000000c

080084cc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80084d0:	46c0      	nop			; (mov r8, r8)
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80084e0:	4a0b      	ldr	r2, [pc, #44]	; (8008510 <pxCurrentTCBConst2>)
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	3020      	adds	r0, #32
 80084e8:	f380 8809 	msr	PSP, r0
 80084ec:	2002      	movs	r0, #2
 80084ee:	f380 8814 	msr	CONTROL, r0
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80084f8:	46ae      	mov	lr, r5
 80084fa:	bc08      	pop	{r3}
 80084fc:	bc04      	pop	{r2}
 80084fe:	b662      	cpsie	i
 8008500:	4718      	bx	r3
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	46c0      	nop			; (mov r8, r8)
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	46c0      	nop			; (mov r8, r8)
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	46c0      	nop			; (mov r8, r8)
 800850e:	46c0      	nop			; (mov r8, r8)

08008510 <pxCurrentTCBConst2>:
 8008510:	200012e8 	.word	0x200012e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008514:	46c0      	nop			; (mov r8, r8)
 8008516:	46c0      	nop			; (mov r8, r8)

08008518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800851c:	4b0e      	ldr	r3, [pc, #56]	; (8008558 <xPortStartScheduler+0x40>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <xPortStartScheduler+0x40>)
 8008522:	21ff      	movs	r1, #255	; 0xff
 8008524:	0409      	lsls	r1, r1, #16
 8008526:	430a      	orrs	r2, r1
 8008528:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800852a:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <xPortStartScheduler+0x40>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <xPortStartScheduler+0x40>)
 8008530:	21ff      	movs	r1, #255	; 0xff
 8008532:	0609      	lsls	r1, r1, #24
 8008534:	430a      	orrs	r2, r1
 8008536:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008538:	f000 f898 	bl	800866c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <xPortStartScheduler+0x44>)
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008542:	f7ff ffcd 	bl	80084e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008546:	f000 fbe5 	bl	8008d14 <vTaskSwitchContext>
	prvTaskExitError();
 800854a:	f7ff ffa7 	bl	800849c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800854e:	2300      	movs	r3, #0
}
 8008550:	0018      	movs	r0, r3
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	e000ed20 	.word	0xe000ed20
 800855c:	2000000c 	.word	0x2000000c

08008560 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008564:	4b05      	ldr	r3, [pc, #20]	; (800857c <vPortYield+0x1c>)
 8008566:	2280      	movs	r2, #128	; 0x80
 8008568:	0552      	lsls	r2, r2, #21
 800856a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800856c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008570:	f3bf 8f6f 	isb	sy
}
 8008574:	46c0      	nop			; (mov r8, r8)
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008584:	b672      	cpsid	i
    uxCriticalNesting++;
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <vPortEnterCritical+0x20>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <vPortEnterCritical+0x20>)
 800858e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008590:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008594:	f3bf 8f6f 	isb	sy
}
 8008598:	46c0      	nop			; (mov r8, r8)
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	2000000c 	.word	0x2000000c

080085a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085a8:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <vPortExitCritical+0x2c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <vPortExitCritical+0x10>
 80085b0:	b672      	cpsid	i
 80085b2:	e7fe      	b.n	80085b2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <vPortExitCritical+0x2c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	1e5a      	subs	r2, r3, #1
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <vPortExitCritical+0x2c>)
 80085bc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80085be:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <vPortExitCritical+0x2c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d100      	bne.n	80085c8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80085c6:	b662      	cpsie	i
    }
}
 80085c8:	46c0      	nop			; (mov r8, r8)
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	2000000c 	.word	0x2000000c

080085d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80085d4:	f3ef 8010 	mrs	r0, PRIMASK
 80085d8:	b672      	cpsid	i
 80085da:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80085dc:	46c0      	nop			; (mov r8, r8)
 80085de:	0018      	movs	r0, r3

080085e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80085e0:	f380 8810 	msr	PRIMASK, r0
 80085e4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80085e6:	46c0      	nop			; (mov r8, r8)
	...

080085f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085f0:	f3ef 8009 	mrs	r0, PSP
 80085f4:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <pxCurrentTCBConst>)
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	3820      	subs	r0, #32
 80085fa:	6010      	str	r0, [r2, #0]
 80085fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80085fe:	4644      	mov	r4, r8
 8008600:	464d      	mov	r5, r9
 8008602:	4656      	mov	r6, sl
 8008604:	465f      	mov	r7, fp
 8008606:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008608:	b508      	push	{r3, lr}
 800860a:	b672      	cpsid	i
 800860c:	f000 fb82 	bl	8008d14 <vTaskSwitchContext>
 8008610:	b662      	cpsie	i
 8008612:	bc0c      	pop	{r2, r3}
 8008614:	6811      	ldr	r1, [r2, #0]
 8008616:	6808      	ldr	r0, [r1, #0]
 8008618:	3010      	adds	r0, #16
 800861a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800861c:	46a0      	mov	r8, r4
 800861e:	46a9      	mov	r9, r5
 8008620:	46b2      	mov	sl, r6
 8008622:	46bb      	mov	fp, r7
 8008624:	f380 8809 	msr	PSP, r0
 8008628:	3820      	subs	r0, #32
 800862a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800862c:	4718      	bx	r3
 800862e:	46c0      	nop			; (mov r8, r8)

08008630 <pxCurrentTCBConst>:
 8008630:	200012e8 	.word	0x200012e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008634:	46c0      	nop			; (mov r8, r8)
 8008636:	46c0      	nop			; (mov r8, r8)

08008638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800863e:	f7ff ffc9 	bl	80085d4 <ulSetInterruptMaskFromISR>
 8008642:	0003      	movs	r3, r0
 8008644:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008646:	f000 fab5 	bl	8008bb4 <xTaskIncrementTick>
 800864a:	1e03      	subs	r3, r0, #0
 800864c:	d003      	beq.n	8008656 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <xPortSysTickHandler+0x30>)
 8008650:	2280      	movs	r2, #128	; 0x80
 8008652:	0552      	lsls	r2, r2, #21
 8008654:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	0018      	movs	r0, r3
 800865a:	f7ff ffc1 	bl	80085e0 <vClearInterruptMaskFromISR>
}
 800865e:	46c0      	nop			; (mov r8, r8)
 8008660:	46bd      	mov	sp, r7
 8008662:	b002      	add	sp, #8
 8008664:	bd80      	pop	{r7, pc}
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008670:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <prvSetupTimerInterrupt+0x34>)
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <prvSetupTimerInterrupt+0x38>)
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800867c:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <prvSetupTimerInterrupt+0x3c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	22fa      	movs	r2, #250	; 0xfa
 8008682:	0091      	lsls	r1, r2, #2
 8008684:	0018      	movs	r0, r3
 8008686:	f7f7 fd51 	bl	800012c <__udivsi3>
 800868a:	0003      	movs	r3, r0
 800868c:	001a      	movs	r2, r3
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <prvSetupTimerInterrupt+0x40>)
 8008690:	3a01      	subs	r2, #1
 8008692:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <prvSetupTimerInterrupt+0x34>)
 8008696:	2207      	movs	r2, #7
 8008698:	601a      	str	r2, [r3, #0]
}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	e000e010 	.word	0xe000e010
 80086a4:	e000e018 	.word	0xe000e018
 80086a8:	20000000 	.word	0x20000000
 80086ac:	e000e014 	.word	0xe000e014

080086b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086b0:	b590      	push	{r4, r7, lr}
 80086b2:	b08d      	sub	sp, #52	; 0x34
 80086b4:	af04      	add	r7, sp, #16
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <xTaskCreateStatic+0x18>
 80086c4:	b672      	cpsid	i
 80086c6:	e7fe      	b.n	80086c6 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <xTaskCreateStatic+0x22>
 80086ce:	b672      	cpsid	i
 80086d0:	e7fe      	b.n	80086d0 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086d2:	2354      	movs	r3, #84	; 0x54
 80086d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b54      	cmp	r3, #84	; 0x54
 80086da:	d001      	beq.n	80086e0 <xTaskCreateStatic+0x30>
 80086dc:	b672      	cpsid	i
 80086de:	e7fe      	b.n	80086de <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086e0:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d020      	beq.n	800872a <xTaskCreateStatic+0x7a>
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01d      	beq.n	800872a <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	2251      	movs	r2, #81	; 0x51
 80086fc:	2102      	movs	r1, #2
 80086fe:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008700:	683c      	ldr	r4, [r7, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	2300      	movs	r3, #0
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	2318      	movs	r3, #24
 8008712:	18fb      	adds	r3, r7, r3
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	0023      	movs	r3, r4
 800871c:	f000 f858 	bl	80087d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	0018      	movs	r0, r3
 8008724:	f000 f8d6 	bl	80088d4 <prvAddNewTaskToReadyList>
 8008728:	e001      	b.n	800872e <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800872e:	69bb      	ldr	r3, [r7, #24]
	}
 8008730:	0018      	movs	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	b009      	add	sp, #36	; 0x24
 8008736:	bd90      	pop	{r4, r7, pc}

08008738 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008738:	b590      	push	{r4, r7, lr}
 800873a:	b08d      	sub	sp, #52	; 0x34
 800873c:	af04      	add	r7, sp, #16
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	1dbb      	adds	r3, r7, #6
 8008746:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008748:	1dbb      	adds	r3, r7, #6
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	0018      	movs	r0, r3
 8008750:	f7ff fc2a 	bl	8007fa8 <pvPortMalloc>
 8008754:	0003      	movs	r3, r0
 8008756:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d010      	beq.n	8008780 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800875e:	2054      	movs	r0, #84	; 0x54
 8008760:	f7ff fc22 	bl	8007fa8 <pvPortMalloc>
 8008764:	0003      	movs	r3, r0
 8008766:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	631a      	str	r2, [r3, #48]	; 0x30
 8008774:	e006      	b.n	8008784 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	0018      	movs	r0, r3
 800877a:	f7ff fcbb 	bl	80080f4 <vPortFree>
 800877e:	e001      	b.n	8008784 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008780:	2300      	movs	r3, #0
 8008782:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01a      	beq.n	80087c0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	2251      	movs	r2, #81	; 0x51
 800878e:	2100      	movs	r1, #0
 8008790:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008792:	1dbb      	adds	r3, r7, #6
 8008794:	881a      	ldrh	r2, [r3, #0]
 8008796:	683c      	ldr	r4, [r7, #0]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	2300      	movs	r3, #0
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	9302      	str	r3, [sp, #8]
 80087a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	0023      	movs	r3, r4
 80087ae:	f000 f80f 	bl	80087d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	0018      	movs	r0, r3
 80087b6:	f000 f88d 	bl	80088d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087ba:	2301      	movs	r3, #1
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	e002      	b.n	80087c6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087c0:	2301      	movs	r3, #1
 80087c2:	425b      	negs	r3, r3
 80087c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087c6:	69bb      	ldr	r3, [r7, #24]
	}
 80087c8:	0018      	movs	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	b009      	add	sp, #36	; 0x24
 80087ce:	bd90      	pop	{r4, r7, pc}

080087d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	493a      	ldr	r1, [pc, #232]	; (80088d0 <prvInitialiseNewTask+0x100>)
 80087e6:	468c      	mov	ip, r1
 80087e8:	4463      	add	r3, ip
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	18d3      	adds	r3, r2, r3
 80087ee:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	2207      	movs	r2, #7
 80087f4:	4393      	bics	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2207      	movs	r2, #7
 80087fc:	4013      	ands	r3, r2
 80087fe:	d001      	beq.n	8008804 <prvInitialiseNewTask+0x34>
 8008800:	b672      	cpsid	i
 8008802:	e7fe      	b.n	8008802 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d020      	beq.n	800884c <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800880a:	2300      	movs	r3, #0
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	e013      	b.n	8008838 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	18d3      	adds	r3, r2, r3
 8008816:	7818      	ldrb	r0, [r3, #0]
 8008818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881a:	2134      	movs	r1, #52	; 0x34
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	18d3      	adds	r3, r2, r3
 8008820:	185b      	adds	r3, r3, r1
 8008822:	1c02      	adds	r2, r0, #0
 8008824:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	18d3      	adds	r3, r2, r3
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d006      	beq.n	8008840 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	3301      	adds	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d9e8      	bls.n	8008810 <prvInitialiseNewTask+0x40>
 800883e:	e000      	b.n	8008842 <prvInitialiseNewTask+0x72>
			{
				break;
 8008840:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	2243      	movs	r2, #67	; 0x43
 8008846:	2100      	movs	r1, #0
 8008848:	5499      	strb	r1, [r3, r2]
 800884a:	e003      	b.n	8008854 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	2234      	movs	r2, #52	; 0x34
 8008850:	2100      	movs	r1, #0
 8008852:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	2b06      	cmp	r3, #6
 8008858:	d901      	bls.n	800885e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800885a:	2306      	movs	r3, #6
 800885c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	6a3a      	ldr	r2, [r7, #32]
 8008862:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	6a3a      	ldr	r2, [r7, #32]
 8008868:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	2200      	movs	r2, #0
 800886e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	3304      	adds	r3, #4
 8008874:	0018      	movs	r0, r3
 8008876:	f7ff fd5b 	bl	8008330 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	3318      	adds	r3, #24
 800887e:	0018      	movs	r0, r3
 8008880:	f7ff fd56 	bl	8008330 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008888:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	2207      	movs	r2, #7
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008898:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	2200      	movs	r2, #0
 800889e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	2250      	movs	r2, #80	; 0x50
 80088a4:	2100      	movs	r1, #0
 80088a6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	68f9      	ldr	r1, [r7, #12]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	0018      	movs	r0, r3
 80088b0:	f7ff fdca 	bl	8008448 <pxPortInitialiseStack>
 80088b4:	0002      	movs	r2, r0
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088c6:	46c0      	nop			; (mov r8, r8)
 80088c8:	46bd      	mov	sp, r7
 80088ca:	b006      	add	sp, #24
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	46c0      	nop			; (mov r8, r8)
 80088d0:	3fffffff 	.word	0x3fffffff

080088d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088dc:	f7ff fe50 	bl	8008580 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088e0:	4b28      	ldr	r3, [pc, #160]	; (8008984 <prvAddNewTaskToReadyList+0xb0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	4b27      	ldr	r3, [pc, #156]	; (8008984 <prvAddNewTaskToReadyList+0xb0>)
 80088e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80088ea:	4b27      	ldr	r3, [pc, #156]	; (8008988 <prvAddNewTaskToReadyList+0xb4>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d109      	bne.n	8008906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088f2:	4b25      	ldr	r3, [pc, #148]	; (8008988 <prvAddNewTaskToReadyList+0xb4>)
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088f8:	4b22      	ldr	r3, [pc, #136]	; (8008984 <prvAddNewTaskToReadyList+0xb0>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d110      	bne.n	8008922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008900:	f000 fa6a 	bl	8008dd8 <prvInitialiseTaskLists>
 8008904:	e00d      	b.n	8008922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008906:	4b21      	ldr	r3, [pc, #132]	; (800898c <prvAddNewTaskToReadyList+0xb8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d109      	bne.n	8008922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800890e:	4b1e      	ldr	r3, [pc, #120]	; (8008988 <prvAddNewTaskToReadyList+0xb4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	429a      	cmp	r2, r3
 800891a:	d802      	bhi.n	8008922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800891c:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <prvAddNewTaskToReadyList+0xb4>)
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008922:	4b1b      	ldr	r3, [pc, #108]	; (8008990 <prvAddNewTaskToReadyList+0xbc>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	4b19      	ldr	r3, [pc, #100]	; (8008990 <prvAddNewTaskToReadyList+0xbc>)
 800892a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008930:	4b18      	ldr	r3, [pc, #96]	; (8008994 <prvAddNewTaskToReadyList+0xc0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d903      	bls.n	8008940 <prvAddNewTaskToReadyList+0x6c>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893c:	4b15      	ldr	r3, [pc, #84]	; (8008994 <prvAddNewTaskToReadyList+0xc0>)
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	0013      	movs	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	189b      	adds	r3, r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4a12      	ldr	r2, [pc, #72]	; (8008998 <prvAddNewTaskToReadyList+0xc4>)
 800894e:	189a      	adds	r2, r3, r2
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	0019      	movs	r1, r3
 8008956:	0010      	movs	r0, r2
 8008958:	f7ff fcf5 	bl	8008346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800895c:	f7ff fe22 	bl	80085a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <prvAddNewTaskToReadyList+0xb8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008968:	4b07      	ldr	r3, [pc, #28]	; (8008988 <prvAddNewTaskToReadyList+0xb4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	429a      	cmp	r2, r3
 8008974:	d201      	bcs.n	800897a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008976:	f7ff fdf3 	bl	8008560 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	46bd      	mov	sp, r7
 800897e:	b002      	add	sp, #8
 8008980:	bd80      	pop	{r7, pc}
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	200013e8 	.word	0x200013e8
 8008988:	200012e8 	.word	0x200012e8
 800898c:	200013f4 	.word	0x200013f4
 8008990:	20001404 	.word	0x20001404
 8008994:	200013f0 	.word	0x200013f0
 8008998:	200012ec 	.word	0x200012ec

0800899c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d010      	beq.n	80089d0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089ae:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <vTaskDelay+0x48>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <vTaskDelay+0x1e>
 80089b6:	b672      	cpsid	i
 80089b8:	e7fe      	b.n	80089b8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80089ba:	f000 f863 	bl	8008a84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2100      	movs	r1, #0
 80089c2:	0018      	movs	r0, r3
 80089c4:	f000 fadc 	bl	8008f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089c8:	f000 f868 	bl	8008a9c <xTaskResumeAll>
 80089cc:	0003      	movs	r3, r0
 80089ce:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80089d6:	f7ff fdc3 	bl	8008560 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	46bd      	mov	sp, r7
 80089de:	b004      	add	sp, #16
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	46c0      	nop			; (mov r8, r8)
 80089e4:	20001410 	.word	0x20001410

080089e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b089      	sub	sp, #36	; 0x24
 80089ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089f6:	003a      	movs	r2, r7
 80089f8:	1d39      	adds	r1, r7, #4
 80089fa:	2308      	movs	r3, #8
 80089fc:	18fb      	adds	r3, r7, r3
 80089fe:	0018      	movs	r0, r3
 8008a00:	f7fc f96c 	bl	8004cdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a04:	683c      	ldr	r4, [r7, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	4918      	ldr	r1, [pc, #96]	; (8008a6c <vTaskStartScheduler+0x84>)
 8008a0c:	4818      	ldr	r0, [pc, #96]	; (8008a70 <vTaskStartScheduler+0x88>)
 8008a0e:	9202      	str	r2, [sp, #8]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	2300      	movs	r3, #0
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	2300      	movs	r3, #0
 8008a18:	0022      	movs	r2, r4
 8008a1a:	f7ff fe49 	bl	80086b0 <xTaskCreateStatic>
 8008a1e:	0002      	movs	r2, r0
 8008a20:	4b14      	ldr	r3, [pc, #80]	; (8008a74 <vTaskStartScheduler+0x8c>)
 8008a22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a24:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <vTaskStartScheduler+0x8c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	e001      	b.n	8008a36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d10d      	bne.n	8008a58 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008a3c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a3e:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <vTaskStartScheduler+0x90>)
 8008a40:	2201      	movs	r2, #1
 8008a42:	4252      	negs	r2, r2
 8008a44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a46:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <vTaskStartScheduler+0x94>)
 8008a48:	2201      	movs	r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <vTaskStartScheduler+0x98>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a52:	f7ff fd61 	bl	8008518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a56:	e004      	b.n	8008a62 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <vTaskStartScheduler+0x7a>
 8008a5e:	b672      	cpsid	i
 8008a60:	e7fe      	b.n	8008a60 <vTaskStartScheduler+0x78>
}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	46bd      	mov	sp, r7
 8008a66:	b005      	add	sp, #20
 8008a68:	bd90      	pop	{r4, r7, pc}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	08009ce4 	.word	0x08009ce4
 8008a70:	08008db9 	.word	0x08008db9
 8008a74:	2000140c 	.word	0x2000140c
 8008a78:	20001408 	.word	0x20001408
 8008a7c:	200013f4 	.word	0x200013f4
 8008a80:	200013ec 	.word	0x200013ec

08008a84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a88:	4b03      	ldr	r3, [pc, #12]	; (8008a98 <vTaskSuspendAll+0x14>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <vTaskSuspendAll+0x14>)
 8008a90:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20001410 	.word	0x20001410

08008a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008aaa:	4b3a      	ldr	r3, [pc, #232]	; (8008b94 <xTaskResumeAll+0xf8>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <xTaskResumeAll+0x1a>
 8008ab2:	b672      	cpsid	i
 8008ab4:	e7fe      	b.n	8008ab4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ab6:	f7ff fd63 	bl	8008580 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008aba:	4b36      	ldr	r3, [pc, #216]	; (8008b94 <xTaskResumeAll+0xf8>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	1e5a      	subs	r2, r3, #1
 8008ac0:	4b34      	ldr	r3, [pc, #208]	; (8008b94 <xTaskResumeAll+0xf8>)
 8008ac2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac4:	4b33      	ldr	r3, [pc, #204]	; (8008b94 <xTaskResumeAll+0xf8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d15b      	bne.n	8008b84 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008acc:	4b32      	ldr	r3, [pc, #200]	; (8008b98 <xTaskResumeAll+0xfc>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d057      	beq.n	8008b84 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ad4:	e02f      	b.n	8008b36 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad6:	4b31      	ldr	r3, [pc, #196]	; (8008b9c <xTaskResumeAll+0x100>)
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3318      	adds	r3, #24
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f7ff fc87 	bl	80083f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3304      	adds	r3, #4
 8008aec:	0018      	movs	r0, r3
 8008aee:	f7ff fc82 	bl	80083f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af6:	4b2a      	ldr	r3, [pc, #168]	; (8008ba0 <xTaskResumeAll+0x104>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d903      	bls.n	8008b06 <xTaskResumeAll+0x6a>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b02:	4b27      	ldr	r3, [pc, #156]	; (8008ba0 <xTaskResumeAll+0x104>)
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0a:	0013      	movs	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	189b      	adds	r3, r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4a24      	ldr	r2, [pc, #144]	; (8008ba4 <xTaskResumeAll+0x108>)
 8008b14:	189a      	adds	r2, r3, r2
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3304      	adds	r3, #4
 8008b1a:	0019      	movs	r1, r3
 8008b1c:	0010      	movs	r0, r2
 8008b1e:	f7ff fc12 	bl	8008346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b26:	4b20      	ldr	r3, [pc, #128]	; (8008ba8 <xTaskResumeAll+0x10c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d302      	bcc.n	8008b36 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008b30:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <xTaskResumeAll+0x110>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b36:	4b19      	ldr	r3, [pc, #100]	; (8008b9c <xTaskResumeAll+0x100>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1cb      	bne.n	8008ad6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b44:	f000 f9e2 	bl	8008f0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b48:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <xTaskResumeAll+0x114>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00f      	beq.n	8008b74 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b54:	f000 f82e 	bl	8008bb4 <xTaskIncrementTick>
 8008b58:	1e03      	subs	r3, r0, #0
 8008b5a:	d002      	beq.n	8008b62 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008b5c:	4b13      	ldr	r3, [pc, #76]	; (8008bac <xTaskResumeAll+0x110>)
 8008b5e:	2201      	movs	r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f2      	bne.n	8008b54 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8008b6e:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <xTaskResumeAll+0x114>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b74:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <xTaskResumeAll+0x110>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b80:	f7ff fcee 	bl	8008560 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b84:	f7ff fd0e 	bl	80085a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008b88:	68bb      	ldr	r3, [r7, #8]
}
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	b004      	add	sp, #16
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	20001410 	.word	0x20001410
 8008b98:	200013e8 	.word	0x200013e8
 8008b9c:	200013a8 	.word	0x200013a8
 8008ba0:	200013f0 	.word	0x200013f0
 8008ba4:	200012ec 	.word	0x200012ec
 8008ba8:	200012e8 	.word	0x200012e8
 8008bac:	200013fc 	.word	0x200013fc
 8008bb0:	200013f8 	.word	0x200013f8

08008bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bbe:	4b4a      	ldr	r3, [pc, #296]	; (8008ce8 <xTaskIncrementTick+0x134>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d000      	beq.n	8008bc8 <xTaskIncrementTick+0x14>
 8008bc6:	e07e      	b.n	8008cc6 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bc8:	4b48      	ldr	r3, [pc, #288]	; (8008cec <xTaskIncrementTick+0x138>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bd0:	4b46      	ldr	r3, [pc, #280]	; (8008cec <xTaskIncrementTick+0x138>)
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d117      	bne.n	8008c0c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bdc:	4b44      	ldr	r3, [pc, #272]	; (8008cf0 <xTaskIncrementTick+0x13c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <xTaskIncrementTick+0x36>
 8008be6:	b672      	cpsid	i
 8008be8:	e7fe      	b.n	8008be8 <xTaskIncrementTick+0x34>
 8008bea:	4b41      	ldr	r3, [pc, #260]	; (8008cf0 <xTaskIncrementTick+0x13c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	4b40      	ldr	r3, [pc, #256]	; (8008cf4 <xTaskIncrementTick+0x140>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	4b3e      	ldr	r3, [pc, #248]	; (8008cf0 <xTaskIncrementTick+0x13c>)
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	4b3e      	ldr	r3, [pc, #248]	; (8008cf4 <xTaskIncrementTick+0x140>)
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	4b3e      	ldr	r3, [pc, #248]	; (8008cf8 <xTaskIncrementTick+0x144>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	4b3c      	ldr	r3, [pc, #240]	; (8008cf8 <xTaskIncrementTick+0x144>)
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	f000 f980 	bl	8008f0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c0c:	4b3b      	ldr	r3, [pc, #236]	; (8008cfc <xTaskIncrementTick+0x148>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d349      	bcc.n	8008caa <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c16:	4b36      	ldr	r3, [pc, #216]	; (8008cf0 <xTaskIncrementTick+0x13c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c20:	4b36      	ldr	r3, [pc, #216]	; (8008cfc <xTaskIncrementTick+0x148>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	4252      	negs	r2, r2
 8008c26:	601a      	str	r2, [r3, #0]
					break;
 8008c28:	e03f      	b.n	8008caa <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c2a:	4b31      	ldr	r3, [pc, #196]	; (8008cf0 <xTaskIncrementTick+0x13c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d203      	bcs.n	8008c4a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c42:	4b2e      	ldr	r3, [pc, #184]	; (8008cfc <xTaskIncrementTick+0x148>)
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c48:	e02f      	b.n	8008caa <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f7ff fbd1 	bl	80083f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	3318      	adds	r3, #24
 8008c60:	0018      	movs	r0, r3
 8008c62:	f7ff fbc8 	bl	80083f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6a:	4b25      	ldr	r3, [pc, #148]	; (8008d00 <xTaskIncrementTick+0x14c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d903      	bls.n	8008c7a <xTaskIncrementTick+0xc6>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c76:	4b22      	ldr	r3, [pc, #136]	; (8008d00 <xTaskIncrementTick+0x14c>)
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7e:	0013      	movs	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4a1f      	ldr	r2, [pc, #124]	; (8008d04 <xTaskIncrementTick+0x150>)
 8008c88:	189a      	adds	r2, r3, r2
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	0019      	movs	r1, r3
 8008c90:	0010      	movs	r0, r2
 8008c92:	f7ff fb58 	bl	8008346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9a:	4b1b      	ldr	r3, [pc, #108]	; (8008d08 <xTaskIncrementTick+0x154>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d3b8      	bcc.n	8008c16 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca8:	e7b5      	b.n	8008c16 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008caa:	4b17      	ldr	r3, [pc, #92]	; (8008d08 <xTaskIncrementTick+0x154>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb0:	4914      	ldr	r1, [pc, #80]	; (8008d04 <xTaskIncrementTick+0x150>)
 8008cb2:	0013      	movs	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	189b      	adds	r3, r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	585b      	ldr	r3, [r3, r1]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d907      	bls.n	8008cd0 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	e004      	b.n	8008cd0 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008cc6:	4b11      	ldr	r3, [pc, #68]	; (8008d0c <xTaskIncrementTick+0x158>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <xTaskIncrementTick+0x158>)
 8008cce:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <xTaskIncrementTick+0x15c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008cdc:	697b      	ldr	r3, [r7, #20]
}
 8008cde:	0018      	movs	r0, r3
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b006      	add	sp, #24
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	46c0      	nop			; (mov r8, r8)
 8008ce8:	20001410 	.word	0x20001410
 8008cec:	200013ec 	.word	0x200013ec
 8008cf0:	200013a0 	.word	0x200013a0
 8008cf4:	200013a4 	.word	0x200013a4
 8008cf8:	20001400 	.word	0x20001400
 8008cfc:	20001408 	.word	0x20001408
 8008d00:	200013f0 	.word	0x200013f0
 8008d04:	200012ec 	.word	0x200012ec
 8008d08:	200012e8 	.word	0x200012e8
 8008d0c:	200013f8 	.word	0x200013f8
 8008d10:	200013fc 	.word	0x200013fc

08008d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d1a:	4b22      	ldr	r3, [pc, #136]	; (8008da4 <vTaskSwitchContext+0x90>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d22:	4b21      	ldr	r3, [pc, #132]	; (8008da8 <vTaskSwitchContext+0x94>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d28:	e037      	b.n	8008d9a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8008d2a:	4b1f      	ldr	r3, [pc, #124]	; (8008da8 <vTaskSwitchContext+0x94>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d30:	4b1e      	ldr	r3, [pc, #120]	; (8008dac <vTaskSwitchContext+0x98>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	607b      	str	r3, [r7, #4]
 8008d36:	e007      	b.n	8008d48 <vTaskSwitchContext+0x34>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <vTaskSwitchContext+0x2e>
 8008d3e:	b672      	cpsid	i
 8008d40:	e7fe      	b.n	8008d40 <vTaskSwitchContext+0x2c>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	607b      	str	r3, [r7, #4]
 8008d48:	4919      	ldr	r1, [pc, #100]	; (8008db0 <vTaskSwitchContext+0x9c>)
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	0013      	movs	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	189b      	adds	r3, r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	585b      	ldr	r3, [r3, r1]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0ee      	beq.n	8008d38 <vTaskSwitchContext+0x24>
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	0013      	movs	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	189b      	adds	r3, r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4a12      	ldr	r2, [pc, #72]	; (8008db0 <vTaskSwitchContext+0x9c>)
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	605a      	str	r2, [r3, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d104      	bne.n	8008d8a <vTaskSwitchContext+0x76>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	605a      	str	r2, [r3, #4]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	4b08      	ldr	r3, [pc, #32]	; (8008db4 <vTaskSwitchContext+0xa0>)
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	4b05      	ldr	r3, [pc, #20]	; (8008dac <vTaskSwitchContext+0x98>)
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	601a      	str	r2, [r3, #0]
}
 8008d9a:	46c0      	nop			; (mov r8, r8)
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	b002      	add	sp, #8
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	20001410 	.word	0x20001410
 8008da8:	200013fc 	.word	0x200013fc
 8008dac:	200013f0 	.word	0x200013f0
 8008db0:	200012ec 	.word	0x200012ec
 8008db4:	200012e8 	.word	0x200012e8

08008db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dc0:	f000 f84e 	bl	8008e60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dc4:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <prvIdleTask+0x1c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d9f9      	bls.n	8008dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008dcc:	f7ff fbc8 	bl	8008560 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008dd0:	e7f6      	b.n	8008dc0 <prvIdleTask+0x8>
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	200012ec 	.word	0x200012ec

08008dd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dde:	2300      	movs	r3, #0
 8008de0:	607b      	str	r3, [r7, #4]
 8008de2:	e00c      	b.n	8008dfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	0013      	movs	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	189b      	adds	r3, r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4a14      	ldr	r2, [pc, #80]	; (8008e40 <prvInitialiseTaskLists+0x68>)
 8008df0:	189b      	adds	r3, r3, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7ff fa7e 	bl	80082f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	607b      	str	r3, [r7, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b06      	cmp	r3, #6
 8008e02:	d9ef      	bls.n	8008de4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <prvInitialiseTaskLists+0x6c>)
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7ff fa74 	bl	80082f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e0c:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <prvInitialiseTaskLists+0x70>)
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f7ff fa70 	bl	80082f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e14:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <prvInitialiseTaskLists+0x74>)
 8008e16:	0018      	movs	r0, r3
 8008e18:	f7ff fa6c 	bl	80082f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e1c:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <prvInitialiseTaskLists+0x78>)
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f7ff fa68 	bl	80082f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e24:	4b0b      	ldr	r3, [pc, #44]	; (8008e54 <prvInitialiseTaskLists+0x7c>)
 8008e26:	0018      	movs	r0, r3
 8008e28:	f7ff fa64 	bl	80082f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <prvInitialiseTaskLists+0x80>)
 8008e2e:	4a05      	ldr	r2, [pc, #20]	; (8008e44 <prvInitialiseTaskLists+0x6c>)
 8008e30:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e32:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <prvInitialiseTaskLists+0x84>)
 8008e34:	4a04      	ldr	r2, [pc, #16]	; (8008e48 <prvInitialiseTaskLists+0x70>)
 8008e36:	601a      	str	r2, [r3, #0]
}
 8008e38:	46c0      	nop			; (mov r8, r8)
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	b002      	add	sp, #8
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	200012ec 	.word	0x200012ec
 8008e44:	20001378 	.word	0x20001378
 8008e48:	2000138c 	.word	0x2000138c
 8008e4c:	200013a8 	.word	0x200013a8
 8008e50:	200013bc 	.word	0x200013bc
 8008e54:	200013d4 	.word	0x200013d4
 8008e58:	200013a0 	.word	0x200013a0
 8008e5c:	200013a4 	.word	0x200013a4

08008e60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e66:	e01a      	b.n	8008e9e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008e68:	f7ff fb8a 	bl	8008580 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <prvCheckTasksWaitingTermination+0x50>)
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f7ff fabc 	bl	80083f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <prvCheckTasksWaitingTermination+0x54>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	1e5a      	subs	r2, r3, #1
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <prvCheckTasksWaitingTermination+0x54>)
 8008e86:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e88:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <prvCheckTasksWaitingTermination+0x58>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <prvCheckTasksWaitingTermination+0x58>)
 8008e90:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008e92:	f7ff fb87 	bl	80085a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f000 f80f 	bl	8008ebc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e9e:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <prvCheckTasksWaitingTermination+0x58>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e0      	bne.n	8008e68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	46c0      	nop			; (mov r8, r8)
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	b002      	add	sp, #8
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	200013bc 	.word	0x200013bc
 8008eb4:	200013e8 	.word	0x200013e8
 8008eb8:	200013d0 	.word	0x200013d0

08008ebc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2251      	movs	r2, #81	; 0x51
 8008ec8:	5c9b      	ldrb	r3, [r3, r2]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	f7ff f90e 	bl	80080f4 <vPortFree>
				vPortFree( pxTCB );
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	0018      	movs	r0, r3
 8008edc:	f7ff f90a 	bl	80080f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ee0:	e010      	b.n	8008f04 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2251      	movs	r2, #81	; 0x51
 8008ee6:	5c9b      	ldrb	r3, [r3, r2]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d104      	bne.n	8008ef6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7ff f900 	bl	80080f4 <vPortFree>
	}
 8008ef4:	e006      	b.n	8008f04 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2251      	movs	r2, #81	; 0x51
 8008efa:	5c9b      	ldrb	r3, [r3, r2]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d001      	beq.n	8008f04 <prvDeleteTCB+0x48>
 8008f00:	b672      	cpsid	i
 8008f02:	e7fe      	b.n	8008f02 <prvDeleteTCB+0x46>
	}
 8008f04:	46c0      	nop			; (mov r8, r8)
 8008f06:	46bd      	mov	sp, r7
 8008f08:	b002      	add	sp, #8
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <prvResetNextTaskUnblockTime+0x34>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f1c:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <prvResetNextTaskUnblockTime+0x38>)
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4252      	negs	r2, r2
 8008f22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f24:	e008      	b.n	8008f38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <prvResetNextTaskUnblockTime+0x34>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	4b03      	ldr	r3, [pc, #12]	; (8008f44 <prvResetNextTaskUnblockTime+0x38>)
 8008f36:	601a      	str	r2, [r3, #0]
}
 8008f38:	46c0      	nop			; (mov r8, r8)
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	b002      	add	sp, #8
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	200013a0 	.word	0x200013a0
 8008f44:	20001408 	.word	0x20001408

08008f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f4e:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <xTaskGetSchedulerState+0x30>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d102      	bne.n	8008f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f56:	2301      	movs	r3, #1
 8008f58:	607b      	str	r3, [r7, #4]
 8008f5a:	e008      	b.n	8008f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f5c:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <xTaskGetSchedulerState+0x34>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f64:	2302      	movs	r3, #2
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	e001      	b.n	8008f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f6e:	687b      	ldr	r3, [r7, #4]
	}
 8008f70:	0018      	movs	r0, r3
 8008f72:	46bd      	mov	sp, r7
 8008f74:	b002      	add	sp, #8
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	200013f4 	.word	0x200013f4
 8008f7c:	20001410 	.word	0x20001410

08008f80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f8a:	4b21      	ldr	r3, [pc, #132]	; (8009010 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f90:	4b20      	ldr	r3, [pc, #128]	; (8009014 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3304      	adds	r3, #4
 8008f96:	0018      	movs	r0, r3
 8008f98:	f7ff fa2d 	bl	80083f6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	d10b      	bne.n	8008fba <prvAddCurrentTaskToDelayedList+0x3a>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d008      	beq.n	8008fba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fa8:	4b1a      	ldr	r3, [pc, #104]	; (8009014 <prvAddCurrentTaskToDelayedList+0x94>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	1d1a      	adds	r2, r3, #4
 8008fae:	4b1a      	ldr	r3, [pc, #104]	; (8009018 <prvAddCurrentTaskToDelayedList+0x98>)
 8008fb0:	0011      	movs	r1, r2
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f7ff f9c7 	bl	8008346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fb8:	e026      	b.n	8009008 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	18d3      	adds	r3, r2, r3
 8008fc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fc2:	4b14      	ldr	r3, [pc, #80]	; (8009014 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d209      	bcs.n	8008fe6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fd2:	4b12      	ldr	r3, [pc, #72]	; (800901c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	0019      	movs	r1, r3
 8008fde:	0010      	movs	r0, r2
 8008fe0:	f7ff f9d3 	bl	800838a <vListInsert>
}
 8008fe4:	e010      	b.n	8009008 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fe6:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	0019      	movs	r1, r3
 8008ff2:	0010      	movs	r0, r2
 8008ff4:	f7ff f9c9 	bl	800838a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d202      	bcs.n	8009008 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009002:	4b08      	ldr	r3, [pc, #32]	; (8009024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	601a      	str	r2, [r3, #0]
}
 8009008:	46c0      	nop			; (mov r8, r8)
 800900a:	46bd      	mov	sp, r7
 800900c:	b004      	add	sp, #16
 800900e:	bd80      	pop	{r7, pc}
 8009010:	200013ec 	.word	0x200013ec
 8009014:	200012e8 	.word	0x200012e8
 8009018:	200013d4 	.word	0x200013d4
 800901c:	200013a4 	.word	0x200013a4
 8009020:	200013a0 	.word	0x200013a0
 8009024:	20001408 	.word	0x20001408

08009028 <__errno>:
 8009028:	4b01      	ldr	r3, [pc, #4]	; (8009030 <__errno+0x8>)
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	4770      	bx	lr
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	20000010 	.word	0x20000010

08009034 <__libc_init_array>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	2600      	movs	r6, #0
 8009038:	4d0c      	ldr	r5, [pc, #48]	; (800906c <__libc_init_array+0x38>)
 800903a:	4c0d      	ldr	r4, [pc, #52]	; (8009070 <__libc_init_array+0x3c>)
 800903c:	1b64      	subs	r4, r4, r5
 800903e:	10a4      	asrs	r4, r4, #2
 8009040:	42a6      	cmp	r6, r4
 8009042:	d109      	bne.n	8009058 <__libc_init_array+0x24>
 8009044:	2600      	movs	r6, #0
 8009046:	f000 fca1 	bl	800998c <_init>
 800904a:	4d0a      	ldr	r5, [pc, #40]	; (8009074 <__libc_init_array+0x40>)
 800904c:	4c0a      	ldr	r4, [pc, #40]	; (8009078 <__libc_init_array+0x44>)
 800904e:	1b64      	subs	r4, r4, r5
 8009050:	10a4      	asrs	r4, r4, #2
 8009052:	42a6      	cmp	r6, r4
 8009054:	d105      	bne.n	8009062 <__libc_init_array+0x2e>
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	00b3      	lsls	r3, r6, #2
 800905a:	58eb      	ldr	r3, [r5, r3]
 800905c:	4798      	blx	r3
 800905e:	3601      	adds	r6, #1
 8009060:	e7ee      	b.n	8009040 <__libc_init_array+0xc>
 8009062:	00b3      	lsls	r3, r6, #2
 8009064:	58eb      	ldr	r3, [r5, r3]
 8009066:	4798      	blx	r3
 8009068:	3601      	adds	r6, #1
 800906a:	e7f2      	b.n	8009052 <__libc_init_array+0x1e>
 800906c:	08009e7c 	.word	0x08009e7c
 8009070:	08009e7c 	.word	0x08009e7c
 8009074:	08009e7c 	.word	0x08009e7c
 8009078:	08009e80 	.word	0x08009e80

0800907c <memcpy>:
 800907c:	2300      	movs	r3, #0
 800907e:	b510      	push	{r4, lr}
 8009080:	429a      	cmp	r2, r3
 8009082:	d100      	bne.n	8009086 <memcpy+0xa>
 8009084:	bd10      	pop	{r4, pc}
 8009086:	5ccc      	ldrb	r4, [r1, r3]
 8009088:	54c4      	strb	r4, [r0, r3]
 800908a:	3301      	adds	r3, #1
 800908c:	e7f8      	b.n	8009080 <memcpy+0x4>

0800908e <memset>:
 800908e:	0003      	movs	r3, r0
 8009090:	1882      	adds	r2, r0, r2
 8009092:	4293      	cmp	r3, r2
 8009094:	d100      	bne.n	8009098 <memset+0xa>
 8009096:	4770      	bx	lr
 8009098:	7019      	strb	r1, [r3, #0]
 800909a:	3301      	adds	r3, #1
 800909c:	e7f9      	b.n	8009092 <memset+0x4>

0800909e <_vsniprintf_r>:
 800909e:	b530      	push	{r4, r5, lr}
 80090a0:	0014      	movs	r4, r2
 80090a2:	0005      	movs	r5, r0
 80090a4:	001a      	movs	r2, r3
 80090a6:	b09b      	sub	sp, #108	; 0x6c
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	da05      	bge.n	80090b8 <_vsniprintf_r+0x1a>
 80090ac:	238b      	movs	r3, #139	; 0x8b
 80090ae:	6003      	str	r3, [r0, #0]
 80090b0:	2001      	movs	r0, #1
 80090b2:	4240      	negs	r0, r0
 80090b4:	b01b      	add	sp, #108	; 0x6c
 80090b6:	bd30      	pop	{r4, r5, pc}
 80090b8:	2382      	movs	r3, #130	; 0x82
 80090ba:	4668      	mov	r0, sp
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	8183      	strh	r3, [r0, #12]
 80090c0:	2300      	movs	r3, #0
 80090c2:	9100      	str	r1, [sp, #0]
 80090c4:	9104      	str	r1, [sp, #16]
 80090c6:	429c      	cmp	r4, r3
 80090c8:	d000      	beq.n	80090cc <_vsniprintf_r+0x2e>
 80090ca:	1e63      	subs	r3, r4, #1
 80090cc:	9302      	str	r3, [sp, #8]
 80090ce:	9305      	str	r3, [sp, #20]
 80090d0:	2301      	movs	r3, #1
 80090d2:	4669      	mov	r1, sp
 80090d4:	425b      	negs	r3, r3
 80090d6:	81cb      	strh	r3, [r1, #14]
 80090d8:	0028      	movs	r0, r5
 80090da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090dc:	f000 f878 	bl	80091d0 <_svfiprintf_r>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	da01      	bge.n	80090e8 <_vsniprintf_r+0x4a>
 80090e4:	238b      	movs	r3, #139	; 0x8b
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	2c00      	cmp	r4, #0
 80090ea:	d0e3      	beq.n	80090b4 <_vsniprintf_r+0x16>
 80090ec:	2300      	movs	r3, #0
 80090ee:	9a00      	ldr	r2, [sp, #0]
 80090f0:	7013      	strb	r3, [r2, #0]
 80090f2:	e7df      	b.n	80090b4 <_vsniprintf_r+0x16>

080090f4 <vsniprintf>:
 80090f4:	b507      	push	{r0, r1, r2, lr}
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	0013      	movs	r3, r2
 80090fa:	000a      	movs	r2, r1
 80090fc:	0001      	movs	r1, r0
 80090fe:	4802      	ldr	r0, [pc, #8]	; (8009108 <vsniprintf+0x14>)
 8009100:	6800      	ldr	r0, [r0, #0]
 8009102:	f7ff ffcc 	bl	800909e <_vsniprintf_r>
 8009106:	bd0e      	pop	{r1, r2, r3, pc}
 8009108:	20000010 	.word	0x20000010

0800910c <__ssputs_r>:
 800910c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910e:	688e      	ldr	r6, [r1, #8]
 8009110:	b085      	sub	sp, #20
 8009112:	0007      	movs	r7, r0
 8009114:	000c      	movs	r4, r1
 8009116:	9203      	str	r2, [sp, #12]
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	429e      	cmp	r6, r3
 800911c:	d83c      	bhi.n	8009198 <__ssputs_r+0x8c>
 800911e:	2390      	movs	r3, #144	; 0x90
 8009120:	898a      	ldrh	r2, [r1, #12]
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	421a      	tst	r2, r3
 8009126:	d034      	beq.n	8009192 <__ssputs_r+0x86>
 8009128:	6909      	ldr	r1, [r1, #16]
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	6960      	ldr	r0, [r4, #20]
 800912e:	1a5b      	subs	r3, r3, r1
 8009130:	9302      	str	r3, [sp, #8]
 8009132:	2303      	movs	r3, #3
 8009134:	4343      	muls	r3, r0
 8009136:	0fdd      	lsrs	r5, r3, #31
 8009138:	18ed      	adds	r5, r5, r3
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	9802      	ldr	r0, [sp, #8]
 800913e:	3301      	adds	r3, #1
 8009140:	181b      	adds	r3, r3, r0
 8009142:	106d      	asrs	r5, r5, #1
 8009144:	42ab      	cmp	r3, r5
 8009146:	d900      	bls.n	800914a <__ssputs_r+0x3e>
 8009148:	001d      	movs	r5, r3
 800914a:	0553      	lsls	r3, r2, #21
 800914c:	d532      	bpl.n	80091b4 <__ssputs_r+0xa8>
 800914e:	0029      	movs	r1, r5
 8009150:	0038      	movs	r0, r7
 8009152:	f000 fb49 	bl	80097e8 <_malloc_r>
 8009156:	1e06      	subs	r6, r0, #0
 8009158:	d109      	bne.n	800916e <__ssputs_r+0x62>
 800915a:	230c      	movs	r3, #12
 800915c:	603b      	str	r3, [r7, #0]
 800915e:	2340      	movs	r3, #64	; 0x40
 8009160:	2001      	movs	r0, #1
 8009162:	89a2      	ldrh	r2, [r4, #12]
 8009164:	4240      	negs	r0, r0
 8009166:	4313      	orrs	r3, r2
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	b005      	add	sp, #20
 800916c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916e:	9a02      	ldr	r2, [sp, #8]
 8009170:	6921      	ldr	r1, [r4, #16]
 8009172:	f7ff ff83 	bl	800907c <memcpy>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	4a14      	ldr	r2, [pc, #80]	; (80091cc <__ssputs_r+0xc0>)
 800917a:	401a      	ands	r2, r3
 800917c:	2380      	movs	r3, #128	; 0x80
 800917e:	4313      	orrs	r3, r2
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	9b02      	ldr	r3, [sp, #8]
 8009184:	6126      	str	r6, [r4, #16]
 8009186:	18f6      	adds	r6, r6, r3
 8009188:	6026      	str	r6, [r4, #0]
 800918a:	6165      	str	r5, [r4, #20]
 800918c:	9e01      	ldr	r6, [sp, #4]
 800918e:	1aed      	subs	r5, r5, r3
 8009190:	60a5      	str	r5, [r4, #8]
 8009192:	9b01      	ldr	r3, [sp, #4]
 8009194:	429e      	cmp	r6, r3
 8009196:	d900      	bls.n	800919a <__ssputs_r+0x8e>
 8009198:	9e01      	ldr	r6, [sp, #4]
 800919a:	0032      	movs	r2, r6
 800919c:	9903      	ldr	r1, [sp, #12]
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	f000 faa3 	bl	80096ea <memmove>
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	2000      	movs	r0, #0
 80091a8:	1b9b      	subs	r3, r3, r6
 80091aa:	60a3      	str	r3, [r4, #8]
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	199e      	adds	r6, r3, r6
 80091b0:	6026      	str	r6, [r4, #0]
 80091b2:	e7da      	b.n	800916a <__ssputs_r+0x5e>
 80091b4:	002a      	movs	r2, r5
 80091b6:	0038      	movs	r0, r7
 80091b8:	f000 fb8c 	bl	80098d4 <_realloc_r>
 80091bc:	1e06      	subs	r6, r0, #0
 80091be:	d1e0      	bne.n	8009182 <__ssputs_r+0x76>
 80091c0:	0038      	movs	r0, r7
 80091c2:	6921      	ldr	r1, [r4, #16]
 80091c4:	f000 faa4 	bl	8009710 <_free_r>
 80091c8:	e7c7      	b.n	800915a <__ssputs_r+0x4e>
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	fffffb7f 	.word	0xfffffb7f

080091d0 <_svfiprintf_r>:
 80091d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d2:	b0a1      	sub	sp, #132	; 0x84
 80091d4:	9003      	str	r0, [sp, #12]
 80091d6:	001d      	movs	r5, r3
 80091d8:	898b      	ldrh	r3, [r1, #12]
 80091da:	000f      	movs	r7, r1
 80091dc:	0016      	movs	r6, r2
 80091de:	061b      	lsls	r3, r3, #24
 80091e0:	d511      	bpl.n	8009206 <_svfiprintf_r+0x36>
 80091e2:	690b      	ldr	r3, [r1, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10e      	bne.n	8009206 <_svfiprintf_r+0x36>
 80091e8:	2140      	movs	r1, #64	; 0x40
 80091ea:	f000 fafd 	bl	80097e8 <_malloc_r>
 80091ee:	6038      	str	r0, [r7, #0]
 80091f0:	6138      	str	r0, [r7, #16]
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d105      	bne.n	8009202 <_svfiprintf_r+0x32>
 80091f6:	230c      	movs	r3, #12
 80091f8:	9a03      	ldr	r2, [sp, #12]
 80091fa:	3801      	subs	r0, #1
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	b021      	add	sp, #132	; 0x84
 8009200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009202:	2340      	movs	r3, #64	; 0x40
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	2300      	movs	r3, #0
 8009208:	ac08      	add	r4, sp, #32
 800920a:	6163      	str	r3, [r4, #20]
 800920c:	3320      	adds	r3, #32
 800920e:	7663      	strb	r3, [r4, #25]
 8009210:	3310      	adds	r3, #16
 8009212:	76a3      	strb	r3, [r4, #26]
 8009214:	9507      	str	r5, [sp, #28]
 8009216:	0035      	movs	r5, r6
 8009218:	782b      	ldrb	r3, [r5, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <_svfiprintf_r+0x52>
 800921e:	2b25      	cmp	r3, #37	; 0x25
 8009220:	d147      	bne.n	80092b2 <_svfiprintf_r+0xe2>
 8009222:	1bab      	subs	r3, r5, r6
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	42b5      	cmp	r5, r6
 8009228:	d00c      	beq.n	8009244 <_svfiprintf_r+0x74>
 800922a:	0032      	movs	r2, r6
 800922c:	0039      	movs	r1, r7
 800922e:	9803      	ldr	r0, [sp, #12]
 8009230:	f7ff ff6c 	bl	800910c <__ssputs_r>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d100      	bne.n	800923a <_svfiprintf_r+0x6a>
 8009238:	e0ae      	b.n	8009398 <_svfiprintf_r+0x1c8>
 800923a:	6962      	ldr	r2, [r4, #20]
 800923c:	9b05      	ldr	r3, [sp, #20]
 800923e:	4694      	mov	ip, r2
 8009240:	4463      	add	r3, ip
 8009242:	6163      	str	r3, [r4, #20]
 8009244:	782b      	ldrb	r3, [r5, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d100      	bne.n	800924c <_svfiprintf_r+0x7c>
 800924a:	e0a5      	b.n	8009398 <_svfiprintf_r+0x1c8>
 800924c:	2201      	movs	r2, #1
 800924e:	2300      	movs	r3, #0
 8009250:	4252      	negs	r2, r2
 8009252:	6062      	str	r2, [r4, #4]
 8009254:	a904      	add	r1, sp, #16
 8009256:	3254      	adds	r2, #84	; 0x54
 8009258:	1852      	adds	r2, r2, r1
 800925a:	1c6e      	adds	r6, r5, #1
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	60e3      	str	r3, [r4, #12]
 8009260:	60a3      	str	r3, [r4, #8]
 8009262:	7013      	strb	r3, [r2, #0]
 8009264:	65a3      	str	r3, [r4, #88]	; 0x58
 8009266:	2205      	movs	r2, #5
 8009268:	7831      	ldrb	r1, [r6, #0]
 800926a:	4854      	ldr	r0, [pc, #336]	; (80093bc <_svfiprintf_r+0x1ec>)
 800926c:	f000 fa32 	bl	80096d4 <memchr>
 8009270:	1c75      	adds	r5, r6, #1
 8009272:	2800      	cmp	r0, #0
 8009274:	d11f      	bne.n	80092b6 <_svfiprintf_r+0xe6>
 8009276:	6822      	ldr	r2, [r4, #0]
 8009278:	06d3      	lsls	r3, r2, #27
 800927a:	d504      	bpl.n	8009286 <_svfiprintf_r+0xb6>
 800927c:	2353      	movs	r3, #83	; 0x53
 800927e:	a904      	add	r1, sp, #16
 8009280:	185b      	adds	r3, r3, r1
 8009282:	2120      	movs	r1, #32
 8009284:	7019      	strb	r1, [r3, #0]
 8009286:	0713      	lsls	r3, r2, #28
 8009288:	d504      	bpl.n	8009294 <_svfiprintf_r+0xc4>
 800928a:	2353      	movs	r3, #83	; 0x53
 800928c:	a904      	add	r1, sp, #16
 800928e:	185b      	adds	r3, r3, r1
 8009290:	212b      	movs	r1, #43	; 0x2b
 8009292:	7019      	strb	r1, [r3, #0]
 8009294:	7833      	ldrb	r3, [r6, #0]
 8009296:	2b2a      	cmp	r3, #42	; 0x2a
 8009298:	d016      	beq.n	80092c8 <_svfiprintf_r+0xf8>
 800929a:	0035      	movs	r5, r6
 800929c:	2100      	movs	r1, #0
 800929e:	200a      	movs	r0, #10
 80092a0:	68e3      	ldr	r3, [r4, #12]
 80092a2:	782a      	ldrb	r2, [r5, #0]
 80092a4:	1c6e      	adds	r6, r5, #1
 80092a6:	3a30      	subs	r2, #48	; 0x30
 80092a8:	2a09      	cmp	r2, #9
 80092aa:	d94e      	bls.n	800934a <_svfiprintf_r+0x17a>
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d111      	bne.n	80092d4 <_svfiprintf_r+0x104>
 80092b0:	e017      	b.n	80092e2 <_svfiprintf_r+0x112>
 80092b2:	3501      	adds	r5, #1
 80092b4:	e7b0      	b.n	8009218 <_svfiprintf_r+0x48>
 80092b6:	4b41      	ldr	r3, [pc, #260]	; (80093bc <_svfiprintf_r+0x1ec>)
 80092b8:	6822      	ldr	r2, [r4, #0]
 80092ba:	1ac0      	subs	r0, r0, r3
 80092bc:	2301      	movs	r3, #1
 80092be:	4083      	lsls	r3, r0
 80092c0:	4313      	orrs	r3, r2
 80092c2:	002e      	movs	r6, r5
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	e7ce      	b.n	8009266 <_svfiprintf_r+0x96>
 80092c8:	9b07      	ldr	r3, [sp, #28]
 80092ca:	1d19      	adds	r1, r3, #4
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	9107      	str	r1, [sp, #28]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	db01      	blt.n	80092d8 <_svfiprintf_r+0x108>
 80092d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80092d6:	e004      	b.n	80092e2 <_svfiprintf_r+0x112>
 80092d8:	425b      	negs	r3, r3
 80092da:	60e3      	str	r3, [r4, #12]
 80092dc:	2302      	movs	r3, #2
 80092de:	4313      	orrs	r3, r2
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	782b      	ldrb	r3, [r5, #0]
 80092e4:	2b2e      	cmp	r3, #46	; 0x2e
 80092e6:	d10a      	bne.n	80092fe <_svfiprintf_r+0x12e>
 80092e8:	786b      	ldrb	r3, [r5, #1]
 80092ea:	2b2a      	cmp	r3, #42	; 0x2a
 80092ec:	d135      	bne.n	800935a <_svfiprintf_r+0x18a>
 80092ee:	9b07      	ldr	r3, [sp, #28]
 80092f0:	3502      	adds	r5, #2
 80092f2:	1d1a      	adds	r2, r3, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	9207      	str	r2, [sp, #28]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	db2b      	blt.n	8009354 <_svfiprintf_r+0x184>
 80092fc:	9309      	str	r3, [sp, #36]	; 0x24
 80092fe:	4e30      	ldr	r6, [pc, #192]	; (80093c0 <_svfiprintf_r+0x1f0>)
 8009300:	2203      	movs	r2, #3
 8009302:	0030      	movs	r0, r6
 8009304:	7829      	ldrb	r1, [r5, #0]
 8009306:	f000 f9e5 	bl	80096d4 <memchr>
 800930a:	2800      	cmp	r0, #0
 800930c:	d006      	beq.n	800931c <_svfiprintf_r+0x14c>
 800930e:	2340      	movs	r3, #64	; 0x40
 8009310:	1b80      	subs	r0, r0, r6
 8009312:	4083      	lsls	r3, r0
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	3501      	adds	r5, #1
 8009318:	4313      	orrs	r3, r2
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	7829      	ldrb	r1, [r5, #0]
 800931e:	2206      	movs	r2, #6
 8009320:	4828      	ldr	r0, [pc, #160]	; (80093c4 <_svfiprintf_r+0x1f4>)
 8009322:	1c6e      	adds	r6, r5, #1
 8009324:	7621      	strb	r1, [r4, #24]
 8009326:	f000 f9d5 	bl	80096d4 <memchr>
 800932a:	2800      	cmp	r0, #0
 800932c:	d03c      	beq.n	80093a8 <_svfiprintf_r+0x1d8>
 800932e:	4b26      	ldr	r3, [pc, #152]	; (80093c8 <_svfiprintf_r+0x1f8>)
 8009330:	2b00      	cmp	r3, #0
 8009332:	d125      	bne.n	8009380 <_svfiprintf_r+0x1b0>
 8009334:	2207      	movs	r2, #7
 8009336:	9b07      	ldr	r3, [sp, #28]
 8009338:	3307      	adds	r3, #7
 800933a:	4393      	bics	r3, r2
 800933c:	3308      	adds	r3, #8
 800933e:	9307      	str	r3, [sp, #28]
 8009340:	6963      	ldr	r3, [r4, #20]
 8009342:	9a04      	ldr	r2, [sp, #16]
 8009344:	189b      	adds	r3, r3, r2
 8009346:	6163      	str	r3, [r4, #20]
 8009348:	e765      	b.n	8009216 <_svfiprintf_r+0x46>
 800934a:	4343      	muls	r3, r0
 800934c:	0035      	movs	r5, r6
 800934e:	2101      	movs	r1, #1
 8009350:	189b      	adds	r3, r3, r2
 8009352:	e7a6      	b.n	80092a2 <_svfiprintf_r+0xd2>
 8009354:	2301      	movs	r3, #1
 8009356:	425b      	negs	r3, r3
 8009358:	e7d0      	b.n	80092fc <_svfiprintf_r+0x12c>
 800935a:	2300      	movs	r3, #0
 800935c:	200a      	movs	r0, #10
 800935e:	001a      	movs	r2, r3
 8009360:	3501      	adds	r5, #1
 8009362:	6063      	str	r3, [r4, #4]
 8009364:	7829      	ldrb	r1, [r5, #0]
 8009366:	1c6e      	adds	r6, r5, #1
 8009368:	3930      	subs	r1, #48	; 0x30
 800936a:	2909      	cmp	r1, #9
 800936c:	d903      	bls.n	8009376 <_svfiprintf_r+0x1a6>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0c5      	beq.n	80092fe <_svfiprintf_r+0x12e>
 8009372:	9209      	str	r2, [sp, #36]	; 0x24
 8009374:	e7c3      	b.n	80092fe <_svfiprintf_r+0x12e>
 8009376:	4342      	muls	r2, r0
 8009378:	0035      	movs	r5, r6
 800937a:	2301      	movs	r3, #1
 800937c:	1852      	adds	r2, r2, r1
 800937e:	e7f1      	b.n	8009364 <_svfiprintf_r+0x194>
 8009380:	ab07      	add	r3, sp, #28
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	003a      	movs	r2, r7
 8009386:	0021      	movs	r1, r4
 8009388:	4b10      	ldr	r3, [pc, #64]	; (80093cc <_svfiprintf_r+0x1fc>)
 800938a:	9803      	ldr	r0, [sp, #12]
 800938c:	e000      	b.n	8009390 <_svfiprintf_r+0x1c0>
 800938e:	bf00      	nop
 8009390:	9004      	str	r0, [sp, #16]
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	3301      	adds	r3, #1
 8009396:	d1d3      	bne.n	8009340 <_svfiprintf_r+0x170>
 8009398:	89bb      	ldrh	r3, [r7, #12]
 800939a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800939c:	065b      	lsls	r3, r3, #25
 800939e:	d400      	bmi.n	80093a2 <_svfiprintf_r+0x1d2>
 80093a0:	e72d      	b.n	80091fe <_svfiprintf_r+0x2e>
 80093a2:	2001      	movs	r0, #1
 80093a4:	4240      	negs	r0, r0
 80093a6:	e72a      	b.n	80091fe <_svfiprintf_r+0x2e>
 80093a8:	ab07      	add	r3, sp, #28
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	003a      	movs	r2, r7
 80093ae:	0021      	movs	r1, r4
 80093b0:	4b06      	ldr	r3, [pc, #24]	; (80093cc <_svfiprintf_r+0x1fc>)
 80093b2:	9803      	ldr	r0, [sp, #12]
 80093b4:	f000 f87c 	bl	80094b0 <_printf_i>
 80093b8:	e7ea      	b.n	8009390 <_svfiprintf_r+0x1c0>
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	08009e40 	.word	0x08009e40
 80093c0:	08009e46 	.word	0x08009e46
 80093c4:	08009e4a 	.word	0x08009e4a
 80093c8:	00000000 	.word	0x00000000
 80093cc:	0800910d 	.word	0x0800910d

080093d0 <_printf_common>:
 80093d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093d2:	0015      	movs	r5, r2
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	688a      	ldr	r2, [r1, #8]
 80093d8:	690b      	ldr	r3, [r1, #16]
 80093da:	000c      	movs	r4, r1
 80093dc:	9000      	str	r0, [sp, #0]
 80093de:	4293      	cmp	r3, r2
 80093e0:	da00      	bge.n	80093e4 <_printf_common+0x14>
 80093e2:	0013      	movs	r3, r2
 80093e4:	0022      	movs	r2, r4
 80093e6:	602b      	str	r3, [r5, #0]
 80093e8:	3243      	adds	r2, #67	; 0x43
 80093ea:	7812      	ldrb	r2, [r2, #0]
 80093ec:	2a00      	cmp	r2, #0
 80093ee:	d001      	beq.n	80093f4 <_printf_common+0x24>
 80093f0:	3301      	adds	r3, #1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	069b      	lsls	r3, r3, #26
 80093f8:	d502      	bpl.n	8009400 <_printf_common+0x30>
 80093fa:	682b      	ldr	r3, [r5, #0]
 80093fc:	3302      	adds	r3, #2
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	2306      	movs	r3, #6
 8009404:	0017      	movs	r7, r2
 8009406:	401f      	ands	r7, r3
 8009408:	421a      	tst	r2, r3
 800940a:	d027      	beq.n	800945c <_printf_common+0x8c>
 800940c:	0023      	movs	r3, r4
 800940e:	3343      	adds	r3, #67	; 0x43
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	1e5a      	subs	r2, r3, #1
 8009414:	4193      	sbcs	r3, r2
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	0692      	lsls	r2, r2, #26
 800941a:	d430      	bmi.n	800947e <_printf_common+0xae>
 800941c:	0022      	movs	r2, r4
 800941e:	9901      	ldr	r1, [sp, #4]
 8009420:	9800      	ldr	r0, [sp, #0]
 8009422:	9e08      	ldr	r6, [sp, #32]
 8009424:	3243      	adds	r2, #67	; 0x43
 8009426:	47b0      	blx	r6
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d025      	beq.n	8009478 <_printf_common+0xa8>
 800942c:	2306      	movs	r3, #6
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	682a      	ldr	r2, [r5, #0]
 8009432:	68e1      	ldr	r1, [r4, #12]
 8009434:	2500      	movs	r5, #0
 8009436:	4003      	ands	r3, r0
 8009438:	2b04      	cmp	r3, #4
 800943a:	d103      	bne.n	8009444 <_printf_common+0x74>
 800943c:	1a8d      	subs	r5, r1, r2
 800943e:	43eb      	mvns	r3, r5
 8009440:	17db      	asrs	r3, r3, #31
 8009442:	401d      	ands	r5, r3
 8009444:	68a3      	ldr	r3, [r4, #8]
 8009446:	6922      	ldr	r2, [r4, #16]
 8009448:	4293      	cmp	r3, r2
 800944a:	dd01      	ble.n	8009450 <_printf_common+0x80>
 800944c:	1a9b      	subs	r3, r3, r2
 800944e:	18ed      	adds	r5, r5, r3
 8009450:	2700      	movs	r7, #0
 8009452:	42bd      	cmp	r5, r7
 8009454:	d120      	bne.n	8009498 <_printf_common+0xc8>
 8009456:	2000      	movs	r0, #0
 8009458:	e010      	b.n	800947c <_printf_common+0xac>
 800945a:	3701      	adds	r7, #1
 800945c:	68e3      	ldr	r3, [r4, #12]
 800945e:	682a      	ldr	r2, [r5, #0]
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	42bb      	cmp	r3, r7
 8009464:	ddd2      	ble.n	800940c <_printf_common+0x3c>
 8009466:	0022      	movs	r2, r4
 8009468:	2301      	movs	r3, #1
 800946a:	9901      	ldr	r1, [sp, #4]
 800946c:	9800      	ldr	r0, [sp, #0]
 800946e:	9e08      	ldr	r6, [sp, #32]
 8009470:	3219      	adds	r2, #25
 8009472:	47b0      	blx	r6
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d1f0      	bne.n	800945a <_printf_common+0x8a>
 8009478:	2001      	movs	r0, #1
 800947a:	4240      	negs	r0, r0
 800947c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800947e:	2030      	movs	r0, #48	; 0x30
 8009480:	18e1      	adds	r1, r4, r3
 8009482:	3143      	adds	r1, #67	; 0x43
 8009484:	7008      	strb	r0, [r1, #0]
 8009486:	0021      	movs	r1, r4
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	3145      	adds	r1, #69	; 0x45
 800948c:	7809      	ldrb	r1, [r1, #0]
 800948e:	18a2      	adds	r2, r4, r2
 8009490:	3243      	adds	r2, #67	; 0x43
 8009492:	3302      	adds	r3, #2
 8009494:	7011      	strb	r1, [r2, #0]
 8009496:	e7c1      	b.n	800941c <_printf_common+0x4c>
 8009498:	0022      	movs	r2, r4
 800949a:	2301      	movs	r3, #1
 800949c:	9901      	ldr	r1, [sp, #4]
 800949e:	9800      	ldr	r0, [sp, #0]
 80094a0:	9e08      	ldr	r6, [sp, #32]
 80094a2:	321a      	adds	r2, #26
 80094a4:	47b0      	blx	r6
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d0e6      	beq.n	8009478 <_printf_common+0xa8>
 80094aa:	3701      	adds	r7, #1
 80094ac:	e7d1      	b.n	8009452 <_printf_common+0x82>
	...

080094b0 <_printf_i>:
 80094b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094b2:	b08b      	sub	sp, #44	; 0x2c
 80094b4:	9206      	str	r2, [sp, #24]
 80094b6:	000a      	movs	r2, r1
 80094b8:	3243      	adds	r2, #67	; 0x43
 80094ba:	9307      	str	r3, [sp, #28]
 80094bc:	9005      	str	r0, [sp, #20]
 80094be:	9204      	str	r2, [sp, #16]
 80094c0:	7e0a      	ldrb	r2, [r1, #24]
 80094c2:	000c      	movs	r4, r1
 80094c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094c6:	2a78      	cmp	r2, #120	; 0x78
 80094c8:	d807      	bhi.n	80094da <_printf_i+0x2a>
 80094ca:	2a62      	cmp	r2, #98	; 0x62
 80094cc:	d809      	bhi.n	80094e2 <_printf_i+0x32>
 80094ce:	2a00      	cmp	r2, #0
 80094d0:	d100      	bne.n	80094d4 <_printf_i+0x24>
 80094d2:	e0c1      	b.n	8009658 <_printf_i+0x1a8>
 80094d4:	2a58      	cmp	r2, #88	; 0x58
 80094d6:	d100      	bne.n	80094da <_printf_i+0x2a>
 80094d8:	e08c      	b.n	80095f4 <_printf_i+0x144>
 80094da:	0026      	movs	r6, r4
 80094dc:	3642      	adds	r6, #66	; 0x42
 80094de:	7032      	strb	r2, [r6, #0]
 80094e0:	e022      	b.n	8009528 <_printf_i+0x78>
 80094e2:	0010      	movs	r0, r2
 80094e4:	3863      	subs	r0, #99	; 0x63
 80094e6:	2815      	cmp	r0, #21
 80094e8:	d8f7      	bhi.n	80094da <_printf_i+0x2a>
 80094ea:	f7f6 fe15 	bl	8000118 <__gnu_thumb1_case_shi>
 80094ee:	0016      	.short	0x0016
 80094f0:	fff6001f 	.word	0xfff6001f
 80094f4:	fff6fff6 	.word	0xfff6fff6
 80094f8:	001ffff6 	.word	0x001ffff6
 80094fc:	fff6fff6 	.word	0xfff6fff6
 8009500:	fff6fff6 	.word	0xfff6fff6
 8009504:	003600a8 	.word	0x003600a8
 8009508:	fff6009a 	.word	0xfff6009a
 800950c:	00b9fff6 	.word	0x00b9fff6
 8009510:	0036fff6 	.word	0x0036fff6
 8009514:	fff6fff6 	.word	0xfff6fff6
 8009518:	009e      	.short	0x009e
 800951a:	0026      	movs	r6, r4
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	3642      	adds	r6, #66	; 0x42
 8009520:	1d11      	adds	r1, r2, #4
 8009522:	6019      	str	r1, [r3, #0]
 8009524:	6813      	ldr	r3, [r2, #0]
 8009526:	7033      	strb	r3, [r6, #0]
 8009528:	2301      	movs	r3, #1
 800952a:	e0a7      	b.n	800967c <_printf_i+0x1cc>
 800952c:	6808      	ldr	r0, [r1, #0]
 800952e:	6819      	ldr	r1, [r3, #0]
 8009530:	1d0a      	adds	r2, r1, #4
 8009532:	0605      	lsls	r5, r0, #24
 8009534:	d50b      	bpl.n	800954e <_printf_i+0x9e>
 8009536:	680d      	ldr	r5, [r1, #0]
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	2d00      	cmp	r5, #0
 800953c:	da03      	bge.n	8009546 <_printf_i+0x96>
 800953e:	232d      	movs	r3, #45	; 0x2d
 8009540:	9a04      	ldr	r2, [sp, #16]
 8009542:	426d      	negs	r5, r5
 8009544:	7013      	strb	r3, [r2, #0]
 8009546:	4b61      	ldr	r3, [pc, #388]	; (80096cc <_printf_i+0x21c>)
 8009548:	270a      	movs	r7, #10
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	e01b      	b.n	8009586 <_printf_i+0xd6>
 800954e:	680d      	ldr	r5, [r1, #0]
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	0641      	lsls	r1, r0, #25
 8009554:	d5f1      	bpl.n	800953a <_printf_i+0x8a>
 8009556:	b22d      	sxth	r5, r5
 8009558:	e7ef      	b.n	800953a <_printf_i+0x8a>
 800955a:	680d      	ldr	r5, [r1, #0]
 800955c:	6819      	ldr	r1, [r3, #0]
 800955e:	1d08      	adds	r0, r1, #4
 8009560:	6018      	str	r0, [r3, #0]
 8009562:	062e      	lsls	r6, r5, #24
 8009564:	d501      	bpl.n	800956a <_printf_i+0xba>
 8009566:	680d      	ldr	r5, [r1, #0]
 8009568:	e003      	b.n	8009572 <_printf_i+0xc2>
 800956a:	066d      	lsls	r5, r5, #25
 800956c:	d5fb      	bpl.n	8009566 <_printf_i+0xb6>
 800956e:	680d      	ldr	r5, [r1, #0]
 8009570:	b2ad      	uxth	r5, r5
 8009572:	4b56      	ldr	r3, [pc, #344]	; (80096cc <_printf_i+0x21c>)
 8009574:	2708      	movs	r7, #8
 8009576:	9303      	str	r3, [sp, #12]
 8009578:	2a6f      	cmp	r2, #111	; 0x6f
 800957a:	d000      	beq.n	800957e <_printf_i+0xce>
 800957c:	3702      	adds	r7, #2
 800957e:	0023      	movs	r3, r4
 8009580:	2200      	movs	r2, #0
 8009582:	3343      	adds	r3, #67	; 0x43
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	6863      	ldr	r3, [r4, #4]
 8009588:	60a3      	str	r3, [r4, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	db03      	blt.n	8009596 <_printf_i+0xe6>
 800958e:	2204      	movs	r2, #4
 8009590:	6821      	ldr	r1, [r4, #0]
 8009592:	4391      	bics	r1, r2
 8009594:	6021      	str	r1, [r4, #0]
 8009596:	2d00      	cmp	r5, #0
 8009598:	d102      	bne.n	80095a0 <_printf_i+0xf0>
 800959a:	9e04      	ldr	r6, [sp, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00c      	beq.n	80095ba <_printf_i+0x10a>
 80095a0:	9e04      	ldr	r6, [sp, #16]
 80095a2:	0028      	movs	r0, r5
 80095a4:	0039      	movs	r1, r7
 80095a6:	f7f6 fe47 	bl	8000238 <__aeabi_uidivmod>
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	3e01      	subs	r6, #1
 80095ae:	5c5b      	ldrb	r3, [r3, r1]
 80095b0:	7033      	strb	r3, [r6, #0]
 80095b2:	002b      	movs	r3, r5
 80095b4:	0005      	movs	r5, r0
 80095b6:	429f      	cmp	r7, r3
 80095b8:	d9f3      	bls.n	80095a2 <_printf_i+0xf2>
 80095ba:	2f08      	cmp	r7, #8
 80095bc:	d109      	bne.n	80095d2 <_printf_i+0x122>
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	07db      	lsls	r3, r3, #31
 80095c2:	d506      	bpl.n	80095d2 <_printf_i+0x122>
 80095c4:	6863      	ldr	r3, [r4, #4]
 80095c6:	6922      	ldr	r2, [r4, #16]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	dc02      	bgt.n	80095d2 <_printf_i+0x122>
 80095cc:	2330      	movs	r3, #48	; 0x30
 80095ce:	3e01      	subs	r6, #1
 80095d0:	7033      	strb	r3, [r6, #0]
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	1b9b      	subs	r3, r3, r6
 80095d6:	6123      	str	r3, [r4, #16]
 80095d8:	9b07      	ldr	r3, [sp, #28]
 80095da:	0021      	movs	r1, r4
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	9805      	ldr	r0, [sp, #20]
 80095e0:	9b06      	ldr	r3, [sp, #24]
 80095e2:	aa09      	add	r2, sp, #36	; 0x24
 80095e4:	f7ff fef4 	bl	80093d0 <_printf_common>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d14c      	bne.n	8009686 <_printf_i+0x1d6>
 80095ec:	2001      	movs	r0, #1
 80095ee:	4240      	negs	r0, r0
 80095f0:	b00b      	add	sp, #44	; 0x2c
 80095f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f4:	3145      	adds	r1, #69	; 0x45
 80095f6:	700a      	strb	r2, [r1, #0]
 80095f8:	4a34      	ldr	r2, [pc, #208]	; (80096cc <_printf_i+0x21c>)
 80095fa:	9203      	str	r2, [sp, #12]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	6821      	ldr	r1, [r4, #0]
 8009600:	ca20      	ldmia	r2!, {r5}
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	0608      	lsls	r0, r1, #24
 8009606:	d516      	bpl.n	8009636 <_printf_i+0x186>
 8009608:	07cb      	lsls	r3, r1, #31
 800960a:	d502      	bpl.n	8009612 <_printf_i+0x162>
 800960c:	2320      	movs	r3, #32
 800960e:	4319      	orrs	r1, r3
 8009610:	6021      	str	r1, [r4, #0]
 8009612:	2710      	movs	r7, #16
 8009614:	2d00      	cmp	r5, #0
 8009616:	d1b2      	bne.n	800957e <_printf_i+0xce>
 8009618:	2320      	movs	r3, #32
 800961a:	6822      	ldr	r2, [r4, #0]
 800961c:	439a      	bics	r2, r3
 800961e:	6022      	str	r2, [r4, #0]
 8009620:	e7ad      	b.n	800957e <_printf_i+0xce>
 8009622:	2220      	movs	r2, #32
 8009624:	6809      	ldr	r1, [r1, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	6022      	str	r2, [r4, #0]
 800962a:	0022      	movs	r2, r4
 800962c:	2178      	movs	r1, #120	; 0x78
 800962e:	3245      	adds	r2, #69	; 0x45
 8009630:	7011      	strb	r1, [r2, #0]
 8009632:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <_printf_i+0x220>)
 8009634:	e7e1      	b.n	80095fa <_printf_i+0x14a>
 8009636:	0648      	lsls	r0, r1, #25
 8009638:	d5e6      	bpl.n	8009608 <_printf_i+0x158>
 800963a:	b2ad      	uxth	r5, r5
 800963c:	e7e4      	b.n	8009608 <_printf_i+0x158>
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	680d      	ldr	r5, [r1, #0]
 8009642:	1d10      	adds	r0, r2, #4
 8009644:	6949      	ldr	r1, [r1, #20]
 8009646:	6018      	str	r0, [r3, #0]
 8009648:	6813      	ldr	r3, [r2, #0]
 800964a:	062e      	lsls	r6, r5, #24
 800964c:	d501      	bpl.n	8009652 <_printf_i+0x1a2>
 800964e:	6019      	str	r1, [r3, #0]
 8009650:	e002      	b.n	8009658 <_printf_i+0x1a8>
 8009652:	066d      	lsls	r5, r5, #25
 8009654:	d5fb      	bpl.n	800964e <_printf_i+0x19e>
 8009656:	8019      	strh	r1, [r3, #0]
 8009658:	2300      	movs	r3, #0
 800965a:	9e04      	ldr	r6, [sp, #16]
 800965c:	6123      	str	r3, [r4, #16]
 800965e:	e7bb      	b.n	80095d8 <_printf_i+0x128>
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	1d11      	adds	r1, r2, #4
 8009664:	6019      	str	r1, [r3, #0]
 8009666:	6816      	ldr	r6, [r2, #0]
 8009668:	2100      	movs	r1, #0
 800966a:	0030      	movs	r0, r6
 800966c:	6862      	ldr	r2, [r4, #4]
 800966e:	f000 f831 	bl	80096d4 <memchr>
 8009672:	2800      	cmp	r0, #0
 8009674:	d001      	beq.n	800967a <_printf_i+0x1ca>
 8009676:	1b80      	subs	r0, r0, r6
 8009678:	6060      	str	r0, [r4, #4]
 800967a:	6863      	ldr	r3, [r4, #4]
 800967c:	6123      	str	r3, [r4, #16]
 800967e:	2300      	movs	r3, #0
 8009680:	9a04      	ldr	r2, [sp, #16]
 8009682:	7013      	strb	r3, [r2, #0]
 8009684:	e7a8      	b.n	80095d8 <_printf_i+0x128>
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	0032      	movs	r2, r6
 800968a:	9906      	ldr	r1, [sp, #24]
 800968c:	9805      	ldr	r0, [sp, #20]
 800968e:	9d07      	ldr	r5, [sp, #28]
 8009690:	47a8      	blx	r5
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	d0aa      	beq.n	80095ec <_printf_i+0x13c>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	079b      	lsls	r3, r3, #30
 800969a:	d415      	bmi.n	80096c8 <_printf_i+0x218>
 800969c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969e:	68e0      	ldr	r0, [r4, #12]
 80096a0:	4298      	cmp	r0, r3
 80096a2:	daa5      	bge.n	80095f0 <_printf_i+0x140>
 80096a4:	0018      	movs	r0, r3
 80096a6:	e7a3      	b.n	80095f0 <_printf_i+0x140>
 80096a8:	0022      	movs	r2, r4
 80096aa:	2301      	movs	r3, #1
 80096ac:	9906      	ldr	r1, [sp, #24]
 80096ae:	9805      	ldr	r0, [sp, #20]
 80096b0:	9e07      	ldr	r6, [sp, #28]
 80096b2:	3219      	adds	r2, #25
 80096b4:	47b0      	blx	r6
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d098      	beq.n	80095ec <_printf_i+0x13c>
 80096ba:	3501      	adds	r5, #1
 80096bc:	68e3      	ldr	r3, [r4, #12]
 80096be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	42ab      	cmp	r3, r5
 80096c4:	dcf0      	bgt.n	80096a8 <_printf_i+0x1f8>
 80096c6:	e7e9      	b.n	800969c <_printf_i+0x1ec>
 80096c8:	2500      	movs	r5, #0
 80096ca:	e7f7      	b.n	80096bc <_printf_i+0x20c>
 80096cc:	08009e51 	.word	0x08009e51
 80096d0:	08009e62 	.word	0x08009e62

080096d4 <memchr>:
 80096d4:	b2c9      	uxtb	r1, r1
 80096d6:	1882      	adds	r2, r0, r2
 80096d8:	4290      	cmp	r0, r2
 80096da:	d101      	bne.n	80096e0 <memchr+0xc>
 80096dc:	2000      	movs	r0, #0
 80096de:	4770      	bx	lr
 80096e0:	7803      	ldrb	r3, [r0, #0]
 80096e2:	428b      	cmp	r3, r1
 80096e4:	d0fb      	beq.n	80096de <memchr+0xa>
 80096e6:	3001      	adds	r0, #1
 80096e8:	e7f6      	b.n	80096d8 <memchr+0x4>

080096ea <memmove>:
 80096ea:	b510      	push	{r4, lr}
 80096ec:	4288      	cmp	r0, r1
 80096ee:	d902      	bls.n	80096f6 <memmove+0xc>
 80096f0:	188b      	adds	r3, r1, r2
 80096f2:	4298      	cmp	r0, r3
 80096f4:	d303      	bcc.n	80096fe <memmove+0x14>
 80096f6:	2300      	movs	r3, #0
 80096f8:	e007      	b.n	800970a <memmove+0x20>
 80096fa:	5c8b      	ldrb	r3, [r1, r2]
 80096fc:	5483      	strb	r3, [r0, r2]
 80096fe:	3a01      	subs	r2, #1
 8009700:	d2fb      	bcs.n	80096fa <memmove+0x10>
 8009702:	bd10      	pop	{r4, pc}
 8009704:	5ccc      	ldrb	r4, [r1, r3]
 8009706:	54c4      	strb	r4, [r0, r3]
 8009708:	3301      	adds	r3, #1
 800970a:	429a      	cmp	r2, r3
 800970c:	d1fa      	bne.n	8009704 <memmove+0x1a>
 800970e:	e7f8      	b.n	8009702 <memmove+0x18>

08009710 <_free_r>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	0005      	movs	r5, r0
 8009714:	2900      	cmp	r1, #0
 8009716:	d010      	beq.n	800973a <_free_r+0x2a>
 8009718:	1f0c      	subs	r4, r1, #4
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	da00      	bge.n	8009722 <_free_r+0x12>
 8009720:	18e4      	adds	r4, r4, r3
 8009722:	0028      	movs	r0, r5
 8009724:	f000 f918 	bl	8009958 <__malloc_lock>
 8009728:	4a1d      	ldr	r2, [pc, #116]	; (80097a0 <_free_r+0x90>)
 800972a:	6813      	ldr	r3, [r2, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d105      	bne.n	800973c <_free_r+0x2c>
 8009730:	6063      	str	r3, [r4, #4]
 8009732:	6014      	str	r4, [r2, #0]
 8009734:	0028      	movs	r0, r5
 8009736:	f000 f917 	bl	8009968 <__malloc_unlock>
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	42a3      	cmp	r3, r4
 800973e:	d908      	bls.n	8009752 <_free_r+0x42>
 8009740:	6821      	ldr	r1, [r4, #0]
 8009742:	1860      	adds	r0, r4, r1
 8009744:	4283      	cmp	r3, r0
 8009746:	d1f3      	bne.n	8009730 <_free_r+0x20>
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	1841      	adds	r1, r0, r1
 800974e:	6021      	str	r1, [r4, #0]
 8009750:	e7ee      	b.n	8009730 <_free_r+0x20>
 8009752:	001a      	movs	r2, r3
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <_free_r+0x4e>
 800975a:	42a3      	cmp	r3, r4
 800975c:	d9f9      	bls.n	8009752 <_free_r+0x42>
 800975e:	6811      	ldr	r1, [r2, #0]
 8009760:	1850      	adds	r0, r2, r1
 8009762:	42a0      	cmp	r0, r4
 8009764:	d10b      	bne.n	800977e <_free_r+0x6e>
 8009766:	6820      	ldr	r0, [r4, #0]
 8009768:	1809      	adds	r1, r1, r0
 800976a:	1850      	adds	r0, r2, r1
 800976c:	6011      	str	r1, [r2, #0]
 800976e:	4283      	cmp	r3, r0
 8009770:	d1e0      	bne.n	8009734 <_free_r+0x24>
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	1841      	adds	r1, r0, r1
 8009778:	6011      	str	r1, [r2, #0]
 800977a:	6053      	str	r3, [r2, #4]
 800977c:	e7da      	b.n	8009734 <_free_r+0x24>
 800977e:	42a0      	cmp	r0, r4
 8009780:	d902      	bls.n	8009788 <_free_r+0x78>
 8009782:	230c      	movs	r3, #12
 8009784:	602b      	str	r3, [r5, #0]
 8009786:	e7d5      	b.n	8009734 <_free_r+0x24>
 8009788:	6821      	ldr	r1, [r4, #0]
 800978a:	1860      	adds	r0, r4, r1
 800978c:	4283      	cmp	r3, r0
 800978e:	d103      	bne.n	8009798 <_free_r+0x88>
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	1841      	adds	r1, r0, r1
 8009796:	6021      	str	r1, [r4, #0]
 8009798:	6063      	str	r3, [r4, #4]
 800979a:	6054      	str	r4, [r2, #4]
 800979c:	e7ca      	b.n	8009734 <_free_r+0x24>
 800979e:	46c0      	nop			; (mov r8, r8)
 80097a0:	20001414 	.word	0x20001414

080097a4 <sbrk_aligned>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	4e0f      	ldr	r6, [pc, #60]	; (80097e4 <sbrk_aligned+0x40>)
 80097a8:	000d      	movs	r5, r1
 80097aa:	6831      	ldr	r1, [r6, #0]
 80097ac:	0004      	movs	r4, r0
 80097ae:	2900      	cmp	r1, #0
 80097b0:	d102      	bne.n	80097b8 <sbrk_aligned+0x14>
 80097b2:	f000 f8bf 	bl	8009934 <_sbrk_r>
 80097b6:	6030      	str	r0, [r6, #0]
 80097b8:	0029      	movs	r1, r5
 80097ba:	0020      	movs	r0, r4
 80097bc:	f000 f8ba 	bl	8009934 <_sbrk_r>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d00a      	beq.n	80097da <sbrk_aligned+0x36>
 80097c4:	2303      	movs	r3, #3
 80097c6:	1cc5      	adds	r5, r0, #3
 80097c8:	439d      	bics	r5, r3
 80097ca:	42a8      	cmp	r0, r5
 80097cc:	d007      	beq.n	80097de <sbrk_aligned+0x3a>
 80097ce:	1a29      	subs	r1, r5, r0
 80097d0:	0020      	movs	r0, r4
 80097d2:	f000 f8af 	bl	8009934 <_sbrk_r>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d101      	bne.n	80097de <sbrk_aligned+0x3a>
 80097da:	2501      	movs	r5, #1
 80097dc:	426d      	negs	r5, r5
 80097de:	0028      	movs	r0, r5
 80097e0:	bd70      	pop	{r4, r5, r6, pc}
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	20001418 	.word	0x20001418

080097e8 <_malloc_r>:
 80097e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ea:	2203      	movs	r2, #3
 80097ec:	1ccb      	adds	r3, r1, #3
 80097ee:	4393      	bics	r3, r2
 80097f0:	3308      	adds	r3, #8
 80097f2:	0006      	movs	r6, r0
 80097f4:	001f      	movs	r7, r3
 80097f6:	2b0c      	cmp	r3, #12
 80097f8:	d232      	bcs.n	8009860 <_malloc_r+0x78>
 80097fa:	270c      	movs	r7, #12
 80097fc:	42b9      	cmp	r1, r7
 80097fe:	d831      	bhi.n	8009864 <_malloc_r+0x7c>
 8009800:	0030      	movs	r0, r6
 8009802:	f000 f8a9 	bl	8009958 <__malloc_lock>
 8009806:	4d32      	ldr	r5, [pc, #200]	; (80098d0 <_malloc_r+0xe8>)
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	001c      	movs	r4, r3
 800980c:	2c00      	cmp	r4, #0
 800980e:	d12e      	bne.n	800986e <_malloc_r+0x86>
 8009810:	0039      	movs	r1, r7
 8009812:	0030      	movs	r0, r6
 8009814:	f7ff ffc6 	bl	80097a4 <sbrk_aligned>
 8009818:	0004      	movs	r4, r0
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d11e      	bne.n	800985c <_malloc_r+0x74>
 800981e:	682c      	ldr	r4, [r5, #0]
 8009820:	0025      	movs	r5, r4
 8009822:	2d00      	cmp	r5, #0
 8009824:	d14a      	bne.n	80098bc <_malloc_r+0xd4>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	0029      	movs	r1, r5
 800982a:	18e3      	adds	r3, r4, r3
 800982c:	0030      	movs	r0, r6
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	f000 f880 	bl	8009934 <_sbrk_r>
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	4283      	cmp	r3, r0
 8009838:	d143      	bne.n	80098c2 <_malloc_r+0xda>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	3703      	adds	r7, #3
 800983e:	1aff      	subs	r7, r7, r3
 8009840:	2303      	movs	r3, #3
 8009842:	439f      	bics	r7, r3
 8009844:	3708      	adds	r7, #8
 8009846:	2f0c      	cmp	r7, #12
 8009848:	d200      	bcs.n	800984c <_malloc_r+0x64>
 800984a:	270c      	movs	r7, #12
 800984c:	0039      	movs	r1, r7
 800984e:	0030      	movs	r0, r6
 8009850:	f7ff ffa8 	bl	80097a4 <sbrk_aligned>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d034      	beq.n	80098c2 <_malloc_r+0xda>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	19df      	adds	r7, r3, r7
 800985c:	6027      	str	r7, [r4, #0]
 800985e:	e013      	b.n	8009888 <_malloc_r+0xa0>
 8009860:	2b00      	cmp	r3, #0
 8009862:	dacb      	bge.n	80097fc <_malloc_r+0x14>
 8009864:	230c      	movs	r3, #12
 8009866:	2500      	movs	r5, #0
 8009868:	6033      	str	r3, [r6, #0]
 800986a:	0028      	movs	r0, r5
 800986c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800986e:	6822      	ldr	r2, [r4, #0]
 8009870:	1bd1      	subs	r1, r2, r7
 8009872:	d420      	bmi.n	80098b6 <_malloc_r+0xce>
 8009874:	290b      	cmp	r1, #11
 8009876:	d917      	bls.n	80098a8 <_malloc_r+0xc0>
 8009878:	19e2      	adds	r2, r4, r7
 800987a:	6027      	str	r7, [r4, #0]
 800987c:	42a3      	cmp	r3, r4
 800987e:	d111      	bne.n	80098a4 <_malloc_r+0xbc>
 8009880:	602a      	str	r2, [r5, #0]
 8009882:	6863      	ldr	r3, [r4, #4]
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	6053      	str	r3, [r2, #4]
 8009888:	0030      	movs	r0, r6
 800988a:	0025      	movs	r5, r4
 800988c:	f000 f86c 	bl	8009968 <__malloc_unlock>
 8009890:	2207      	movs	r2, #7
 8009892:	350b      	adds	r5, #11
 8009894:	1d23      	adds	r3, r4, #4
 8009896:	4395      	bics	r5, r2
 8009898:	1aea      	subs	r2, r5, r3
 800989a:	429d      	cmp	r5, r3
 800989c:	d0e5      	beq.n	800986a <_malloc_r+0x82>
 800989e:	1b5b      	subs	r3, r3, r5
 80098a0:	50a3      	str	r3, [r4, r2]
 80098a2:	e7e2      	b.n	800986a <_malloc_r+0x82>
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	e7ec      	b.n	8009882 <_malloc_r+0x9a>
 80098a8:	6862      	ldr	r2, [r4, #4]
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	d101      	bne.n	80098b2 <_malloc_r+0xca>
 80098ae:	602a      	str	r2, [r5, #0]
 80098b0:	e7ea      	b.n	8009888 <_malloc_r+0xa0>
 80098b2:	605a      	str	r2, [r3, #4]
 80098b4:	e7e8      	b.n	8009888 <_malloc_r+0xa0>
 80098b6:	0023      	movs	r3, r4
 80098b8:	6864      	ldr	r4, [r4, #4]
 80098ba:	e7a7      	b.n	800980c <_malloc_r+0x24>
 80098bc:	002c      	movs	r4, r5
 80098be:	686d      	ldr	r5, [r5, #4]
 80098c0:	e7af      	b.n	8009822 <_malloc_r+0x3a>
 80098c2:	230c      	movs	r3, #12
 80098c4:	0030      	movs	r0, r6
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	f000 f84e 	bl	8009968 <__malloc_unlock>
 80098cc:	e7cd      	b.n	800986a <_malloc_r+0x82>
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	20001414 	.word	0x20001414

080098d4 <_realloc_r>:
 80098d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098d6:	0007      	movs	r7, r0
 80098d8:	000e      	movs	r6, r1
 80098da:	0014      	movs	r4, r2
 80098dc:	2900      	cmp	r1, #0
 80098de:	d105      	bne.n	80098ec <_realloc_r+0x18>
 80098e0:	0011      	movs	r1, r2
 80098e2:	f7ff ff81 	bl	80097e8 <_malloc_r>
 80098e6:	0005      	movs	r5, r0
 80098e8:	0028      	movs	r0, r5
 80098ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098ec:	2a00      	cmp	r2, #0
 80098ee:	d103      	bne.n	80098f8 <_realloc_r+0x24>
 80098f0:	f7ff ff0e 	bl	8009710 <_free_r>
 80098f4:	0025      	movs	r5, r4
 80098f6:	e7f7      	b.n	80098e8 <_realloc_r+0x14>
 80098f8:	f000 f83e 	bl	8009978 <_malloc_usable_size_r>
 80098fc:	9001      	str	r0, [sp, #4]
 80098fe:	4284      	cmp	r4, r0
 8009900:	d803      	bhi.n	800990a <_realloc_r+0x36>
 8009902:	0035      	movs	r5, r6
 8009904:	0843      	lsrs	r3, r0, #1
 8009906:	42a3      	cmp	r3, r4
 8009908:	d3ee      	bcc.n	80098e8 <_realloc_r+0x14>
 800990a:	0021      	movs	r1, r4
 800990c:	0038      	movs	r0, r7
 800990e:	f7ff ff6b 	bl	80097e8 <_malloc_r>
 8009912:	1e05      	subs	r5, r0, #0
 8009914:	d0e8      	beq.n	80098e8 <_realloc_r+0x14>
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	0022      	movs	r2, r4
 800991a:	429c      	cmp	r4, r3
 800991c:	d900      	bls.n	8009920 <_realloc_r+0x4c>
 800991e:	001a      	movs	r2, r3
 8009920:	0031      	movs	r1, r6
 8009922:	0028      	movs	r0, r5
 8009924:	f7ff fbaa 	bl	800907c <memcpy>
 8009928:	0031      	movs	r1, r6
 800992a:	0038      	movs	r0, r7
 800992c:	f7ff fef0 	bl	8009710 <_free_r>
 8009930:	e7da      	b.n	80098e8 <_realloc_r+0x14>
	...

08009934 <_sbrk_r>:
 8009934:	2300      	movs	r3, #0
 8009936:	b570      	push	{r4, r5, r6, lr}
 8009938:	4d06      	ldr	r5, [pc, #24]	; (8009954 <_sbrk_r+0x20>)
 800993a:	0004      	movs	r4, r0
 800993c:	0008      	movs	r0, r1
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	f7fb fc9a 	bl	8005278 <_sbrk>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d103      	bne.n	8009950 <_sbrk_r+0x1c>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d000      	beq.n	8009950 <_sbrk_r+0x1c>
 800994e:	6023      	str	r3, [r4, #0]
 8009950:	bd70      	pop	{r4, r5, r6, pc}
 8009952:	46c0      	nop			; (mov r8, r8)
 8009954:	2000141c 	.word	0x2000141c

08009958 <__malloc_lock>:
 8009958:	b510      	push	{r4, lr}
 800995a:	4802      	ldr	r0, [pc, #8]	; (8009964 <__malloc_lock+0xc>)
 800995c:	f000 f814 	bl	8009988 <__retarget_lock_acquire_recursive>
 8009960:	bd10      	pop	{r4, pc}
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	20001420 	.word	0x20001420

08009968 <__malloc_unlock>:
 8009968:	b510      	push	{r4, lr}
 800996a:	4802      	ldr	r0, [pc, #8]	; (8009974 <__malloc_unlock+0xc>)
 800996c:	f000 f80d 	bl	800998a <__retarget_lock_release_recursive>
 8009970:	bd10      	pop	{r4, pc}
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	20001420 	.word	0x20001420

08009978 <_malloc_usable_size_r>:
 8009978:	1f0b      	subs	r3, r1, #4
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	1f18      	subs	r0, r3, #4
 800997e:	2b00      	cmp	r3, #0
 8009980:	da01      	bge.n	8009986 <_malloc_usable_size_r+0xe>
 8009982:	580b      	ldr	r3, [r1, r0]
 8009984:	18c0      	adds	r0, r0, r3
 8009986:	4770      	bx	lr

08009988 <__retarget_lock_acquire_recursive>:
 8009988:	4770      	bx	lr

0800998a <__retarget_lock_release_recursive>:
 800998a:	4770      	bx	lr

0800998c <_init>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr

08009998 <_fini>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	46c0      	nop			; (mov r8, r8)
 800999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999e:	bc08      	pop	{r3}
 80099a0:	469e      	mov	lr, r3
 80099a2:	4770      	bx	lr
