
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f21c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800f3dc  0800f3dc  0001f3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f594  0800f594  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f594  0800f594  0001f594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f59c  0800f59c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f59c  0800f59c  0001f59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5a0  0800f5a0  0001f5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000203c  200001f4  0800f798  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002230  0800f798  00022230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029439  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052bc  00000000  00000000  0004965d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  0004e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef0  00000000  00000000  00050a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031c78  00000000  00000000  00052928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b493  00000000  00000000  000845a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a1c6  00000000  00000000  000afa33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c9bf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094bc  00000000  00000000  001c9c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  001d3108  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001d31a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f3c4 	.word	0x0800f3c4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	0800f3c4 	.word	0x0800f3c4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	f5ad 6d9a 	sub.w	sp, sp, #1232	; 0x4d0
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80005ac:	4b64      	ldr	r3, [pc, #400]	; (8000740 <main+0x19c>)
 80005ae:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	c403      	stmia	r4!, {r0, r1}
 80005be:	7022      	strb	r2, [r4, #0]
 80005c0:	f207 4361 	addw	r3, r7, #1121	; 0x461
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
 80005d0:	615a      	str	r2, [r3, #20]
 80005d2:	761a      	strb	r2, [r3, #24]
	uint8_t UART2_RxBuffer[272];

	// For USB Transmission
	USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t USB_Tx_STATUS;
	uint8_t *data = "Hello!\n";
 80005d4:	4b5b      	ldr	r3, [pc, #364]	; (8000744 <main+0x1a0>)
 80005d6:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc

	uint8_t USB_TxBuffer_FS;

	uint32_t USB_TxBuffer_Length = 1000;
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 ff20 	bl	8001426 <HAL_Init>

  /* USER CODE BEGIN Init */

  // SD reader
  MX_FATFS_Init();
 80005e6:	f00b f9ff 	bl	800b9e8 <MX_FATFS_Init>

  HAL_UART_MspInit(&huart1);
 80005ea:	4857      	ldr	r0, [pc, #348]	; (8000748 <main+0x1a4>)
 80005ec:	f000 fda0 	bl	8001130 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 80005f0:	4856      	ldr	r0, [pc, #344]	; (800074c <main+0x1a8>)
 80005f2:	f000 fd9d 	bl	8001130 <HAL_UART_MspInit>
//   USBD_TxBuffer_Status = USBD_CDC_SetTxBuffer(&hUsbDeviceFS, USB_TxBuffer_FS, USB_TxBuffer_Length);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f8b1 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb05 	bl	8000c08 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005fe:	f000 f913 	bl	8000828 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000602:	f000 f951 	bl	80008a8 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000606:	f000 f98f 	bl	8000928 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800060a:	f000 f9af 	bl	800096c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800060e:	f000 fa61 	bl	8000ad4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000612:	f000 faad 	bl	8000b70 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000616:	f00b f9e7 	bl	800b9e8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800061a:	f00d f899 	bl	800d750 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 800061e:	f000 f9e3 	bl	80009e8 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000622:	f000 f8ed 	bl	8000800 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // Setting the buffer for UART2 data reading
  rxBuffer = rxBuffer1;
 8000626:	4b4a      	ldr	r3, [pc, #296]	; (8000750 <main+0x1ac>)
 8000628:	4a4a      	ldr	r2, [pc, #296]	; (8000754 <main+0x1b0>)
 800062a:	601a      	str	r2, [r3, #0]
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 800062c:	4b47      	ldr	r3, [pc, #284]	; (800074c <main+0x1a8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000634:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8000638:	e853 3f00 	ldrex	r3, [r3]
 800063c:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
   return(result);
 8000640:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800064c:	4b3f      	ldr	r3, [pc, #252]	; (800074c <main+0x1a8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8000656:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800065a:	f8c7 24b0 	str.w	r2, [r7, #1200]	; 0x4b0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800065e:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8000662:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8000666:	e841 2300 	strex	r3, r2, [r1]
 800066a:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
   return(result);
 800066e:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1da      	bne.n	800062c <main+0x88>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8000676:	4b35      	ldr	r3, [pc, #212]	; (800074c <main+0x1a8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800067e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000682:	e853 3f00 	ldrex	r3, [r3]
 8000686:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
   return(result);
 800068a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <main+0x1a8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 80006a0:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 80006a4:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006a8:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 80006ac:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80006b0:	e841 2300 	strex	r3, r2, [r1]
 80006b4:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
   return(result);
 80006b8:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1da      	bne.n	8000676 <main+0xd2>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <main+0x1a8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006c8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80006cc:	e853 3f00 	ldrex	r3, [r3]
 80006d0:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
   return(result);
 80006d4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <main+0x1a8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80006ea:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80006ee:	f8c7 2488 	str.w	r2, [r7, #1160]	; 0x488
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006f2:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 80006f6:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 80006fa:	e841 2300 	strex	r3, r2, [r1]
 80006fe:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
   return(result);
 8000702:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1da      	bne.n	80006c0 <main+0x11c>
  while (1)
  {

	  if (1)
	  {
		  if (rxBuffer == rxBuffer1)
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <main+0x1ac>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <main+0x1b0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d10a      	bne.n	800072a <main+0x186>
		  {
			  // Saving the transmit status for debugging
			  USB_Tx_STATUS = CDC_Transmit_FS (rxBuffer1, sizeof(rxBuffer));
 8000714:	2104      	movs	r1, #4
 8000716:	480f      	ldr	r0, [pc, #60]	; (8000754 <main+0x1b0>)
 8000718:	f00d f8d8 	bl	800d8cc <CDC_Transmit_FS>
 800071c:	4603      	mov	r3, r0
 800071e:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb

			  // Switch buffer
			  rxBuffer = rxBuffer2;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <main+0x1ac>)
 8000724:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <main+0x1b4>)
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	e7ef      	b.n	800070a <main+0x166>
		  }
		  else
		  {
			  // Saving the transmit status for debugging
			  USB_Tx_STATUS = CDC_Transmit_FS (rxBuffer2, sizeof(rxBuffer));
 800072a:	2104      	movs	r1, #4
 800072c:	480a      	ldr	r0, [pc, #40]	; (8000758 <main+0x1b4>)
 800072e:	f00d f8cd 	bl	800d8cc <CDC_Transmit_FS>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb

			  // Switch buffer
			  rxBuffer = rxBuffer1;
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <main+0x1ac>)
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <main+0x1b0>)
 800073c:	601a      	str	r2, [r3, #0]
	  if (1)
 800073e:	e7e4      	b.n	800070a <main+0x166>
 8000740:	0800f3e4 	.word	0x0800f3e4
 8000744:	0800f3dc 	.word	0x0800f3dc
 8000748:	200003e8 	.word	0x200003e8
 800074c:	20000478 	.word	0x20000478
 8000750:	200005f8 	.word	0x200005f8
 8000754:	20000508 	.word	0x20000508
 8000758:	20000580 	.word	0x20000580

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b096      	sub	sp, #88	; 0x58
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2244      	movs	r2, #68	; 0x44
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00d fe56 	bl	800e41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800077e:	2000      	movs	r0, #0
 8000780:	f002 fd98 	bl	80032b4 <HAL_PWREx_ControlVoltageScaling>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800078a:	f000 fb1b 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800078e:	2321      	movs	r3, #33	; 0x21
 8000790:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a0:	2303      	movs	r3, #3
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007a8:	231e      	movs	r3, #30
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 80007ac:	2314      	movs	r3, #20
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fe2d 	bl	800341c <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x70>
  {
    Error_Handler();
 80007c8:	f000 fafc 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2303      	movs	r3, #3
 80007d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	2105      	movs	r1, #5
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 fa33 	bl	8003c50 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f0:	f000 fae8 	bl	8000dc4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80007f4:	f003 fc2a 	bl	800404c <HAL_RCC_EnableCSS>
}
 80007f8:	bf00      	nop
 80007fa:	3758      	adds	r7, #88	; 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	201a      	movs	r0, #26
 800080a:	f000 ff80 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800080e:	201a      	movs	r0, #26
 8000810:	f000 ff99 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2026      	movs	r0, #38	; 0x26
 800081a:	f000 ff78 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800081e:	2026      	movs	r0, #38	; 0x26
 8000820:	f000 ff91 	bl	8001746 <HAL_NVIC_EnableIRQ>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_I2C1_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_I2C1_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_I2C1_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_I2C1_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_I2C1_Init+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_I2C1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <MX_I2C1_Init+0x74>)
 8000864:	f001 fa20 	bl	8001ca8 <HAL_I2C_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086e:	f000 faa9 	bl	8000dc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_I2C1_Init+0x74>)
 8000876:	f001 faa6 	bl	8001dc6 <HAL_I2CEx_ConfigAnalogFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 faa0 	bl	8000dc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_I2C1_Init+0x74>)
 8000888:	f001 fae8 	bl	8001e5c <HAL_I2CEx_ConfigDigitalFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fa97 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000210 	.word	0x20000210
 80008a0:	40005400 	.word	0x40005400
 80008a4:	307075b1 	.word	0x307075b1

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C2_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C2_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C2_Init+0x74>)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <MX_I2C2_Init+0x7c>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_I2C2_Init+0x74>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_I2C2_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C2_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_I2C2_Init+0x74>)
 80008e4:	f001 f9e0 	bl	8001ca8 <HAL_I2C_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ee:	f000 fa69 	bl	8000dc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C2_Init+0x74>)
 80008f6:	f001 fa66 	bl	8001dc6 <HAL_I2CEx_ConfigAnalogFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000900:	f000 fa60 	bl	8000dc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2C2_Init+0x74>)
 8000908:	f001 faa8 	bl	8001e5c <HAL_I2CEx_ConfigDigitalFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 fa57 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000264 	.word	0x20000264
 8000920:	40005800 	.word	0x40005800
 8000924:	307075b1 	.word	0x307075b1

08000928 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_SDMMC1_SD_Init+0x3c>)
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <MX_SDMMC1_SD_Init+0x40>)
 8000930:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SDMMC1_SD_Init+0x3c>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SDMMC1_SD_Init+0x3c>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SDMMC1_SD_Init+0x3c>)
 8000940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000944:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SDMMC1_SD_Init+0x3c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MX_SDMMC1_SD_Init+0x3c>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <MX_SDMMC1_SD_Init+0x3c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200002b8 	.word	0x200002b8
 8000968:	50062400 	.word	0x50062400

0800096c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_SPI1_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_SPI1_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_SPI1_Init+0x74>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_SPI1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SPI1_Init+0x74>)
 8000986:	f44f 7240 	mov.w	r2, #768	; 0x300
 800098a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI1_Init+0x74>)
 800099a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800099e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI1_Init+0x74>)
 80009ba:	2207      	movs	r2, #7
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_SPI1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI1_Init+0x74>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_SPI1_Init+0x74>)
 80009cc:	f006 fdb5 	bl	800753a <HAL_SPI_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f9f5 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000338 	.word	0x20000338
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b092      	sub	sp, #72	; 0x48
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
 80009fe:	615a      	str	r2, [r3, #20]
 8000a00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	222c      	movs	r2, #44	; 0x2c
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f00d fd07 	bl	800e41c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a10:	4a2f      	ldr	r2, [pc, #188]	; (8000ad0 <MX_TIM17_Init+0xe8>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a24:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000a28:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a3c:	4823      	ldr	r0, [pc, #140]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a3e:	f006 fe1f 	bl	8007680 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8000a48:	f000 f9bc 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000a4c:	481f      	ldr	r0, [pc, #124]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a4e:	f006 fe6e 	bl	800772e <HAL_TIM_OC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8000a58:	f000 f9b4 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4812      	ldr	r0, [pc, #72]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000a82:	f006 ffd5 	bl	8007a30 <HAL_TIM_OC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000a8c:	f000 f99a 	bl	8000dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_TIM17_Init+0xe4>)
 8000ab4:	f007 fbd8 	bl	8008268 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000abe:	f000 f981 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3748      	adds	r7, #72	; 0x48
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000039c 	.word	0x2000039c
 8000ad0:	40014800 	.word	0x40014800

08000ad4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000ada:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <MX_USART1_UART_Init+0x94>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000ae0:	4a22      	ldr	r2, [pc, #136]	; (8000b6c <MX_USART1_UART_Init+0x98>)
 8000ae2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aea:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000af8:	220c      	movs	r2, #12
 8000afa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b1a:	4812      	ldr	r0, [pc, #72]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000b1c:	f007 fc40 	bl	80083a0 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b26:	f000 f94d 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000b2e:	f008 fd6e 	bl	800960e <HAL_UARTEx_SetTxFifoThreshold>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b38:	f000 f944 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000b40:	f008 fda3 	bl	800968a <HAL_UARTEx_SetRxFifoThreshold>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b4a:	f000 f93b 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART1_UART_Init+0x90>)
 8000b50:	f008 fd24 	bl	800959c <HAL_UARTEx_DisableFifoMode>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b5a:	f000 f933 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200003e8 	.word	0x200003e8
 8000b68:	40013800 	.word	0x40013800
 8000b6c:	0001c138 	.word	0x0001c138

08000b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b76:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <MX_USART2_UART_Init+0x94>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bba:	f007 fbf1 	bl	80083a0 <HAL_UART_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 f8fe 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bcc:	f008 fd1f 	bl	800960e <HAL_UARTEx_SetTxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f000 f8f5 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bde:	f008 fd54 	bl	800968a <HAL_UARTEx_SetRxFifoThreshold>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000be8:	f000 f8ec 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_USART2_UART_Init+0x90>)
 8000bee:	f008 fcd5 	bl	800959c <HAL_UARTEx_DisableFifoMode>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf8:	f000 f8e4 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000478 	.word	0x20000478
 8000c04:	40004400 	.word	0x40004400

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a63      	ldr	r2, [pc, #396]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b61      	ldr	r3, [pc, #388]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a5d      	ldr	r2, [pc, #372]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b5b      	ldr	r3, [pc, #364]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a57      	ldr	r2, [pc, #348]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b55      	ldr	r3, [pc, #340]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a51      	ldr	r2, [pc, #324]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a4b      	ldr	r2, [pc, #300]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a45      	ldr	r2, [pc, #276]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <MX_GPIO_Init+0x1a8>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f641 013c 	movw	r1, #6204	; 0x183c
 8000cb4:	483f      	ldr	r0, [pc, #252]	; (8000db4 <MX_GPIO_Init+0x1ac>)
 8000cb6:	f000 ffc5 	bl	8001c44 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2130      	movs	r1, #48	; 0x30
 8000cbe:	483e      	ldr	r0, [pc, #248]	; (8000db8 <MX_GPIO_Init+0x1b0>)
 8000cc0:	f000 ffc0 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2178      	movs	r1, #120	; 0x78
 8000cc8:	483c      	ldr	r0, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x1b4>)
 8000cca:	f000 ffbb 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000cce:	f641 033c 	movw	r3, #6204	; 0x183c
 8000cd2:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4833      	ldr	r0, [pc, #204]	; (8000db4 <MX_GPIO_Init+0x1ac>)
 8000ce8:	f000 fe02 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	482d      	ldr	r0, [pc, #180]	; (8000db8 <MX_GPIO_Init+0x1b0>)
 8000d02:	f000 fdf5 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1c:	f000 fde8 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000d20:	2330      	movs	r3, #48	; 0x30
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4820      	ldr	r0, [pc, #128]	; (8000db8 <MX_GPIO_Init+0x1b0>)
 8000d38:	f000 fdda 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <MX_GPIO_Init+0x1ac>)
 8000d52:	f000 fdcd 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f000 fdbf 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000d72:	2378      	movs	r3, #120	; 0x78
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_GPIO_Init+0x1b4>)
 8000d8a:	f000 fdb1 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_GPIO_Init+0x1b8>)
 8000da2:	f000 fda5 	bl	80018f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	; 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48001000 	.word	0x48001000
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	48000c00 	.word	0x48000c00
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8000dcc:	4801      	ldr	r0, [pc, #4]	; (8000dd4 <Error_Handler+0x10>)
 8000dce:	f00d fb2d 	bl	800e42c <iprintf>
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <Error_Handler+0xe>
 8000dd4:	0800f418 	.word	0x0800f418

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_MspInit+0x44>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x44>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0b0      	sub	sp, #192	; 0xc0
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	2294      	movs	r2, #148	; 0x94
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00d faeb 	bl	800e41c <memset>
  if(hi2c->Instance==I2C1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a42      	ldr	r2, [pc, #264]	; (8000f54 <HAL_I2C_MspInit+0x134>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d13b      	bne.n	8000ec8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e50:	2340      	movs	r3, #64	; 0x40
 8000e52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	f107 0318 	add.w	r3, r7, #24
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 f9e1 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e68:	f7ff ffac 	bl	8000dc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	4a39      	ldr	r2, [pc, #228]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e78:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e84:	23c0      	movs	r3, #192	; 0xc0
 8000e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	482c      	ldr	r0, [pc, #176]	; (8000f5c <HAL_I2C_MspInit+0x13c>)
 8000eaa:	f000 fd21 	bl	80018f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	4a29      	ldr	r2, [pc, #164]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ec6:	e040      	b.n	8000f4a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a24      	ldr	r2, [pc, #144]	; (8000f60 <HAL_I2C_MspInit+0x140>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d13b      	bne.n	8000f4a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eda:	f107 0318 	add.w	r3, r7, #24
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f9a0 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000eea:	f7ff ff6b 	bl	8000dc4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f20:	2304      	movs	r3, #4
 8000f22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <HAL_I2C_MspInit+0x13c>)
 8000f2e:	f000 fcdf 	bl	80018f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_I2C_MspInit+0x138>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
}
 8000f4a:	bf00      	nop
 8000f4c:	37c0      	adds	r7, #192	; 0xc0
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	40005800 	.word	0x40005800

08000f64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0b0      	sub	sp, #192	; 0xc0
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	2294      	movs	r2, #148	; 0x94
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00d fa49 	bl	800e41c <memset>
  if(hsd->Instance==SDMMC1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a33      	ldr	r2, [pc, #204]	; (800105c <HAL_SD_MspInit+0xf8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d15f      	bne.n	8001054 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000f94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 f93c 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000fb2:	f7ff ff07 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a29      	ldr	r2, [pc, #164]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b27      	ldr	r3, [pc, #156]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a23      	ldr	r2, [pc, #140]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_SD_MspInit+0xfc>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ffe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001002:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001018:	230c      	movs	r3, #12
 800101a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001022:	4619      	mov	r1, r3
 8001024:	480f      	ldr	r0, [pc, #60]	; (8001064 <HAL_SD_MspInit+0x100>)
 8001026:	f000 fc63 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800102a:	2304      	movs	r3, #4
 800102c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001042:	230c      	movs	r3, #12
 8001044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <HAL_SD_MspInit+0x104>)
 8001050:	f000 fc4e 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	37c0      	adds	r7, #192	; 0xc0
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	50062400 	.word	0x50062400
 8001060:	40021000 	.word	0x40021000
 8001064:	48000800 	.word	0x48000800
 8001068:	48000c00 	.word	0x48000c00

0800106c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_SPI_MspInit+0x7c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d128      	bne.n	80010e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_SPI_MspInit+0x80>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <HAL_SPI_MspInit+0x80>)
 8001094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_SPI_MspInit+0x80>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010be:	23f0      	movs	r3, #240	; 0xf0
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ce:	2305      	movs	r3, #5
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f000 fc08 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40013000 	.word	0x40013000
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_TIM_Base_MspInit+0x38>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10b      	bne.n	800111a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_TIM_Base_MspInit+0x3c>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_TIM_Base_MspInit+0x3c>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110c:	6613      	str	r3, [r2, #96]	; 0x60
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_TIM_Base_MspInit+0x3c>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40014800 	.word	0x40014800
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0b0      	sub	sp, #192	; 0xc0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	2294      	movs	r2, #148	; 0x94
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f00d f963 	bl	800e41c <memset>
  if(huart->Instance==USART1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a43      	ldr	r2, [pc, #268]	; (8001268 <HAL_UART_MspInit+0x138>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d13d      	bne.n	80011dc <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001160:	2301      	movs	r3, #1
 8001162:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001164:	2300      	movs	r3, #0
 8001166:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4618      	mov	r0, r3
 800116e:	f003 f859 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001178:	f7ff fe24 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117c:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_UART_MspInit+0x13c>)
 800117e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001180:	4a3a      	ldr	r2, [pc, #232]	; (800126c <HAL_UART_MspInit+0x13c>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6613      	str	r3, [r2, #96]	; 0x60
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <HAL_UART_MspInit+0x13c>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <HAL_UART_MspInit+0x13c>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	4a34      	ldr	r2, [pc, #208]	; (800126c <HAL_UART_MspInit+0x13c>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <HAL_UART_MspInit+0x13c>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80011ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c6:	2307      	movs	r3, #7
 80011c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 fb8b 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011da:	e040      	b.n	800125e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a23      	ldr	r2, [pc, #140]	; (8001270 <HAL_UART_MspInit+0x140>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d13b      	bne.n	800125e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ee:	f107 0318 	add.w	r3, r7, #24
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f816 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80011fe:	f7ff fde1 	bl	8000dc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_UART_MspInit+0x13c>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_UART_MspInit+0x13c>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6593      	str	r3, [r2, #88]	; 0x58
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_UART_MspInit+0x13c>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_UART_MspInit+0x13c>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_UART_MspInit+0x13c>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_UART_MspInit+0x13c>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001232:	230c      	movs	r3, #12
 8001234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124a:	2307      	movs	r3, #7
 800124c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fb49 	bl	80018f0 <HAL_GPIO_Init>
}
 800125e:	bf00      	nop
 8001260:	37c0      	adds	r7, #192	; 0xc0
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40013800 	.word	0x40013800
 800126c:	40021000 	.word	0x40021000
 8001270:	40004400 	.word	0x40004400

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001278:	f002 fef8 	bl	800406c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x8>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 f904 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012d2:	f006 fa8d 	bl	80077f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000039c 	.word	0x2000039c

080012e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char c = huart2.Instance->RDR;
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <USART2_IRQHandler+0xa0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	71fb      	strb	r3, [r7, #7]
    if (rxBufferPos < RXBUFSIZE - 1) { rxBuffer[rxBufferPos++] = (uint8_t) c; }
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <USART2_IRQHandler+0xa4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b76      	cmp	r3, #118	; 0x76
 80012f8:	d80b      	bhi.n	8001312 <USART2_IRQHandler+0x32>
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <USART2_IRQHandler+0xa8>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <USART2_IRQHandler+0xa4>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	b2c8      	uxtb	r0, r1
 8001308:	491e      	ldr	r1, [pc, #120]	; (8001384 <USART2_IRQHandler+0xa4>)
 800130a:	7008      	strb	r0, [r1, #0]
 800130c:	4413      	add	r3, r2
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	701a      	strb	r2, [r3, #0]

    if ((c == '\r') || (c == '\n')) {
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b0d      	cmp	r3, #13
 8001316:	d002      	beq.n	800131e <USART2_IRQHandler+0x3e>
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b0a      	cmp	r3, #10
 800131c:	d125      	bne.n	800136a <USART2_IRQHandler+0x8a>
        rxBuffer[rxBufferPos] = 0;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <USART2_IRQHandler+0xa8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <USART2_IRQHandler+0xa4>)
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	4413      	add	r3, r2
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
        if (rxBufferPos > 1) {
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <USART2_IRQHandler+0xa4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d905      	bls.n	8001344 <USART2_IRQHandler+0x64>
            data_ready |= 1;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <USART2_IRQHandler+0xac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	4a12      	ldr	r2, [pc, #72]	; (800138c <USART2_IRQHandler+0xac>)
 8001342:	6013      	str	r3, [r2, #0]
        }
        rxBufferPos = 0;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <USART2_IRQHandler+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
        if (rxBuffer == rxBuffer1) {rxBuffer = rxBuffer2;}
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <USART2_IRQHandler+0xa8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <USART2_IRQHandler+0xb0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d103      	bne.n	800135c <USART2_IRQHandler+0x7c>
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <USART2_IRQHandler+0xa8>)
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <USART2_IRQHandler+0xb4>)
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e002      	b.n	8001362 <USART2_IRQHandler+0x82>
        else {rxBuffer = rxBuffer1;}
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <USART2_IRQHandler+0xa8>)
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <USART2_IRQHandler+0xb0>)
 8001360:	601a      	str	r2, [r3, #0]
  	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001362:	2110      	movs	r1, #16
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <USART2_IRQHandler+0xb8>)
 8001366:	f000 fc85 	bl	8001c74 <HAL_GPIO_TogglePin>
    }
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800136a:	2108      	movs	r1, #8
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <USART2_IRQHandler+0xb8>)
 800136e:	f000 fc81 	bl	8001c74 <HAL_GPIO_TogglePin>
	  //rchar = huart2.Instance->RDR;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <USART2_IRQHandler+0xa0>)
 8001374:	f007 f864 	bl	8008440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000478 	.word	0x20000478
 8001384:	200005fc 	.word	0x200005fc
 8001388:	200005f8 	.word	0x200005f8
 800138c:	20000600 	.word	0x20000600
 8001390:	20000508 	.word	0x20000508
 8001394:	20000580 	.word	0x20000580
 8001398:	48000c00 	.word	0x48000c00

0800139c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <OTG_FS_IRQHandler+0x10>)
 80013a2:	f000 fefa 	bl	800219a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20001af0 	.word	0x20001af0

080013b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d8:	f7ff ffea 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	; (8001420 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001402:	f00c ffe7 	bl	800e3d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001406:	f7ff f8cd 	bl	80005a4 <main>

0800140a <LoopForever>:

LoopForever:
    b LoopForever
 800140a:	e7fe      	b.n	800140a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800140c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001418:	0800f5a4 	.word	0x0800f5a4
  ldr r2, =_sbss
 800141c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001420:	20002230 	.word	0x20002230

08001424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_IRQHandler>

08001426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f961 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f80e 	bl	8001458 <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e001      	b.n	800144c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001448:	f7ff fcc6 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_InitTick+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_InitTick+0x70>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_InitTick+0x6c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f96d 	bl	8001762 <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d809      	bhi.n	80014a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800149c:	f000 f937 	bl	800170e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_InitTick+0x74>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e007      	b.n	80014b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e004      	b.n	80014b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e001      	b.n	80014b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000604 	.word	0x20000604

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000604 	.word	0x20000604

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff3e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d008      	beq.n	80017a4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2204      	movs	r2, #4
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e040      	b.n	8001826 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 020e 	bic.w	r2, r2, #14
 80017b2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	f003 021c 	and.w	r2, r3, #28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00c      	beq.n	8001814 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001808:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001812:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d005      	beq.n	8001856 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2204      	movs	r2, #4
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	e047      	b.n	80018e6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 020e 	bic.w	r2, r2, #14
 8001864:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001884:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f003 021c 	and.w	r2, r3, #28
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018a2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00c      	beq.n	80018c6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018c4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
    }
  }
  return status;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	e166      	b.n	8001bce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8158 	beq.w	8001bc8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d005      	beq.n	8001930 <HAL_GPIO_Init+0x40>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d130      	bne.n	8001992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001966:	2201      	movs	r2, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 0201 	and.w	r2, r3, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b03      	cmp	r3, #3
 800199c:	d017      	beq.n	80019ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d123      	bne.n	8001a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	6939      	ldr	r1, [r7, #16]
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0203 	and.w	r2, r3, #3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80b2 	beq.w	8001bc8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a64:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_GPIO_Init+0x2fc>)
 8001a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a68:	4a60      	ldr	r2, [pc, #384]	; (8001bec <HAL_GPIO_Init+0x2fc>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a70:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <HAL_GPIO_Init+0x2fc>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7c:	4a5c      	ldr	r2, [pc, #368]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa6:	d02b      	beq.n	8001b00 <HAL_GPIO_Init+0x210>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d025      	beq.n	8001afc <HAL_GPIO_Init+0x20c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a51      	ldr	r2, [pc, #324]	; (8001bf8 <HAL_GPIO_Init+0x308>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d01f      	beq.n	8001af8 <HAL_GPIO_Init+0x208>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a50      	ldr	r2, [pc, #320]	; (8001bfc <HAL_GPIO_Init+0x30c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d019      	beq.n	8001af4 <HAL_GPIO_Init+0x204>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <HAL_GPIO_Init+0x310>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_GPIO_Init+0x200>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <HAL_GPIO_Init+0x314>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00d      	beq.n	8001aec <HAL_GPIO_Init+0x1fc>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <HAL_GPIO_Init+0x318>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_Init+0x1f8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a4c      	ldr	r2, [pc, #304]	; (8001c0c <HAL_GPIO_Init+0x31c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_GPIO_Init+0x1f4>
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	e00e      	b.n	8001b02 <HAL_GPIO_Init+0x212>
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	e00c      	b.n	8001b02 <HAL_GPIO_Init+0x212>
 8001ae8:	2306      	movs	r3, #6
 8001aea:	e00a      	b.n	8001b02 <HAL_GPIO_Init+0x212>
 8001aec:	2305      	movs	r3, #5
 8001aee:	e008      	b.n	8001b02 <HAL_GPIO_Init+0x212>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e006      	b.n	8001b02 <HAL_GPIO_Init+0x212>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e004      	b.n	8001b02 <HAL_GPIO_Init+0x212>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_Init+0x212>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_GPIO_Init+0x212>
 8001b00:	2300      	movs	r3, #0
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	f002 0203 	and.w	r2, r2, #3
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	4093      	lsls	r3, r2
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b12:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_GPIO_Init+0x320>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b44:	4a32      	ldr	r2, [pc, #200]	; (8001c10 <HAL_GPIO_Init+0x320>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_GPIO_Init+0x320>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b6e:	4a28      	ldr	r2, [pc, #160]	; (8001c10 <HAL_GPIO_Init+0x320>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b74:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_GPIO_Init+0x320>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_GPIO_Init+0x320>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_GPIO_Init+0x320>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <HAL_GPIO_Init+0x320>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f47f ae91 	bne.w	8001900 <HAL_GPIO_Init+0x10>
  }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	48000c00 	.word	0x48000c00
 8001c00:	48001000 	.word	0x48001000
 8001c04:	48001400 	.word	0x48001400
 8001c08:	48001800 	.word	0x48001800
 8001c0c:	48001c00 	.word	0x48001c00
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e001      	b.n	8001c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43d9      	mvns	r1, r3
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	400b      	ands	r3, r1
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e081      	b.n	8001dbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff f8a6 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	; 0x24
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e006      	b.n	8001d30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d104      	bne.n	8001d42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69d9      	ldr	r1, [r3, #28]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d138      	bne.n	8001e4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e032      	b.n	8001e50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2224      	movs	r2, #36	; 0x24
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
  }
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d139      	bne.n	8001ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e033      	b.n	8001ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	; 0x24
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
  }
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	b08f      	sub	sp, #60	; 0x3c
 8001ef8:	af0a      	add	r7, sp, #40	; 0x28
 8001efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e116      	b.n	8002134 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f00b fe2d 	bl	800db80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f008 faec 	bl	800a522 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	687e      	ldr	r6, [r7, #4]
 8001f52:	466d      	mov	r5, sp
 8001f54:	f106 0410 	add.w	r4, r6, #16
 8001f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f64:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f68:	1d33      	adds	r3, r6, #4
 8001f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f6c:	6838      	ldr	r0, [r7, #0]
 8001f6e:	f008 f9ff 	bl	800a370 <USB_CoreInit>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0d7      	b.n	8002134 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f008 fada 	bl	800a544 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e04a      	b.n	800202c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	333d      	adds	r3, #61	; 0x3d
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	333c      	adds	r3, #60	; 0x3c
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	b298      	uxth	r0, r3
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3344      	adds	r3, #68	; 0x44
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3340      	adds	r3, #64	; 0x40
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3348      	adds	r3, #72	; 0x48
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	334c      	adds	r3, #76	; 0x4c
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3354      	adds	r3, #84	; 0x54
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3af      	bcc.n	8001f96 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e044      	b.n	80020c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	3301      	adds	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3b5      	bcc.n	800203c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	687e      	ldr	r6, [r7, #4]
 80020d8:	466d      	mov	r5, sp
 80020da:	f106 0410 	add.w	r4, r6, #16
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ee:	1d33      	adds	r3, r6, #4
 80020f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f2:	6838      	ldr	r0, [r7, #0]
 80020f4:	f008 fa72 	bl	800a5dc <USB_DevInit>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e014      	b.n	8002134 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f001 f882 	bl	800322c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f009 fafa 	bl	800b726 <USB_DevDisconnect>

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800213c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_Start+0x1c>
 8002154:	2302      	movs	r3, #2
 8002156:	e01c      	b.n	8002192 <HAL_PCD_Start+0x56>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f008 f9c1 	bl	800a500 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f009 faae 	bl	800b6e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800219a:	b590      	push	{r4, r7, lr}
 800219c:	b08d      	sub	sp, #52	; 0x34
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f009 fb6c 	bl	800b88e <USB_GetMode>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 847e 	bne.w	8002aba <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f009 fad0 	bl	800b768 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8474 	beq.w	8002ab8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f009 fabd 	bl	800b768 <USB_ReadInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d107      	bne.n	8002208 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f002 0202 	and.w	r2, r2, #2
 8002206:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f009 faab 	bl	800b768 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b10      	cmp	r3, #16
 800221a:	d161      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	0c5b      	lsrs	r3, r3, #17
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	2b02      	cmp	r3, #2
 8002256:	d124      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d035      	beq.n	80022d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800226e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	6a38      	ldr	r0, [r7, #32]
 8002278:	f009 f8e2 	bl	800b440 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002288:	441a      	add	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	6a1a      	ldr	r2, [r3, #32]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800229a:	441a      	add	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	621a      	str	r2, [r3, #32]
 80022a0:	e016      	b.n	80022d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	0c5b      	lsrs	r3, r3, #17
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d110      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022b4:	2208      	movs	r2, #8
 80022b6:	4619      	mov	r1, r3
 80022b8:	6a38      	ldr	r0, [r7, #32]
 80022ba:	f009 f8c1 	bl	800b440 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	6a1a      	ldr	r2, [r3, #32]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ca:	441a      	add	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0210 	orr.w	r2, r2, #16
 80022de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f009 fa3f 	bl	800b768 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022f4:	f040 80a7 	bne.w	8002446 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f009 fa44 	bl	800b78e <USB_ReadDevAllOutEpInterrupt>
 8002306:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002308:	e099      	b.n	800243e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 808e 	beq.w	8002432 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f009 fa68 	bl	800b7f6 <USB_ReadDevOutEPInterrupt>
 8002326:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233e:	461a      	mov	r2, r3
 8002340:	2301      	movs	r3, #1
 8002342:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fe96 	bl	8003078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002362:	461a      	mov	r2, r3
 8002364:	2308      	movs	r3, #8
 8002366:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fed2 	bl	8003114 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002386:	461a      	mov	r2, r3
 8002388:	2310      	movs	r3, #16
 800238a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d030      	beq.n	80023f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	2b80      	cmp	r3, #128	; 0x80
 80023a0:	d109      	bne.n	80023b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	78db      	ldrb	r3, [r3, #3]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2200      	movs	r2, #0
 80023d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f00b fd09 	bl	800ddf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f2:	461a      	mov	r2, r3
 80023f4:	2302      	movs	r3, #2
 80023f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240e:	461a      	mov	r2, r3
 8002410:	2320      	movs	r3, #32
 8002412:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242a:	461a      	mov	r2, r3
 800242c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002430:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	3301      	adds	r3, #1
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	2b00      	cmp	r3, #0
 8002442:	f47f af62 	bne.w	800230a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f009 f98c 	bl	800b768 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800245a:	f040 80a4 	bne.w	80025a6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f009 f9ad 	bl	800b7c2 <USB_ReadDevAllInEpInterrupt>
 8002468:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800246e:	e096      	b.n	800259e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 808b 	beq.w	8002592 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f009 f9d3 	bl	800b832 <USB_ReadDevInEPInterrupt>
 800248c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	2201      	movs	r2, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69f9      	ldr	r1, [r7, #28]
 80024b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024b8:	4013      	ands	r3, r2
 80024ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c8:	461a      	mov	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f00b fbfa 	bl	800dcce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f0:	461a      	mov	r2, r3
 80024f2:	2308      	movs	r3, #8
 80024f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250c:	461a      	mov	r2, r3
 800250e:	2310      	movs	r3, #16
 8002510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002528:	461a      	mov	r2, r3
 800252a:	2340      	movs	r3, #64	; 0x40
 800252c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d023      	beq.n	8002580 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800253a:	6a38      	ldr	r0, [r7, #32]
 800253c:	f008 f99a 	bl	800a874 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	3338      	adds	r3, #56	; 0x38
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	3304      	adds	r3, #4
 8002552:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	78db      	ldrb	r3, [r3, #3]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2200      	movs	r2, #0
 8002560:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f00b fc57 	bl	800de1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257a:	461a      	mov	r2, r3
 800257c:	2302      	movs	r3, #2
 800257e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800258a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fcea 	bl	8002f66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3301      	adds	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f af65 	bne.w	8002470 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f009 f8dc 	bl	800b768 <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ba:	d122      	bne.n	8002602 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025e2:	2100      	movs	r1, #0
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f00b fe89 	bl	800e2fc <HAL_PCDEx_LPM_Callback>
 80025ea:	e002      	b.n	80025f2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f00b fbdb 	bl	800dda8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f009 f8ae 	bl	800b768 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002616:	d112      	bne.n	800263e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f00b fb97 	bl	800dd5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800263c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f009 f890 	bl	800b768 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800264e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002652:	d121      	bne.n	8002698 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002662:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d111      	bne.n	8002692 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002688:	2101      	movs	r1, #1
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f00b fe36 	bl	800e2fc <HAL_PCDEx_LPM_Callback>
 8002690:	e002      	b.n	8002698 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f00b fb62 	bl	800dd5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f009 f863 	bl	800b768 <USB_ReadInterrupts>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ac:	f040 80b5 	bne.w	800281a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2110      	movs	r1, #16
 80026ca:	4618      	mov	r0, r3
 80026cc:	f008 f8d2 	bl	800a874 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d4:	e046      	b.n	8002764 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e2:	461a      	mov	r2, r3
 80026e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fa:	0151      	lsls	r1, r2, #5
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	440a      	add	r2, r1
 8002700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002704:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	461a      	mov	r2, r3
 8002718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800271c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272e:	0151      	lsls	r1, r2, #5
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	440a      	add	r2, r1
 8002734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800273c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	440a      	add	r2, r1
 8002754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800275c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	3301      	adds	r3, #1
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276a:	429a      	cmp	r2, r3
 800276c:	d3b3      	bcc.n	80026d6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002780:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279a:	f043 030b 	orr.w	r3, r3, #11
 800279e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b0:	f043 030b 	orr.w	r3, r3, #11
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	e015      	b.n	80027e4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027de:	f043 030b 	orr.w	r3, r3, #11
 80027e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f009 f873 	bl	800b8f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f008 ffa2 	bl	800b768 <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	d124      	bne.n	800287a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f009 f838 	bl	800b8aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f008 f895 	bl	800a96e <USB_GetDevSpeed>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681c      	ldr	r4, [r3, #0]
 8002850:	f001 fbc4 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8002854:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	4620      	mov	r0, r4
 8002860:	f007 fdb2 	bl	800a3c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f00b fa5a 	bl	800dd1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002878:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f008 ff72 	bl	800b768 <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b08      	cmp	r3, #8
 800288c:	d10a      	bne.n	80028a4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f00b fa37 	bl	800dd02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f002 0208 	and.w	r2, r2, #8
 80028a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f008 ff5d 	bl	800b768 <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b4:	2b80      	cmp	r3, #128	; 0x80
 80028b6:	d122      	bne.n	80028fe <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
 80028c8:	e014      	b.n	80028f4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fb0b 	bl	8002f04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	3301      	adds	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3e5      	bcc.n	80028ca <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f008 ff30 	bl	800b768 <USB_ReadInterrupts>
 8002908:	4603      	mov	r3, r0
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002912:	d13b      	bne.n	800298c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	e02b      	b.n	8002972 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3340      	adds	r3, #64	; 0x40
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d115      	bne.n	800296c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002940:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002942:	2b00      	cmp	r3, #0
 8002944:	da12      	bge.n	800296c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	333f      	adds	r3, #63	; 0x3f
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 facc 	bl	8002f04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	3301      	adds	r3, #1
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002978:	429a      	cmp	r2, r3
 800297a:	d3ce      	bcc.n	800291a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800298a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f008 fee9 	bl	800b768 <USB_ReadInterrupts>
 8002996:	4603      	mov	r3, r0
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a0:	d155      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a2:	2301      	movs	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	e045      	b.n	8002a34 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d12e      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da2b      	bge.n	8002a2e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d121      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2a:	6053      	str	r3, [r2, #4]
            break;
 8002a2c:	e007      	b.n	8002a3e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3b4      	bcc.n	80029a8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f008 fe88 	bl	800b768 <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d10a      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f00b f9eb 	bl	800de40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f008 fe72 	bl	800b768 <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d115      	bne.n	8002aba <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f00b f9db 	bl	800de5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	e000      	b.n	8002aba <HAL_PCD_IRQHandler+0x920>
      return;
 8002ab8:	bf00      	nop
    }
  }
}
 8002aba:	3734      	adds	r7, #52	; 0x34
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_PCD_SetAddress+0x1a>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e013      	b.n	8002b02 <HAL_PCD_SetAddress+0x42>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f008 fdd0 	bl	800b698 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	4608      	mov	r0, r1
 8002b14:	4611      	mov	r1, r2
 8002b16:	461a      	mov	r2, r3
 8002b18:	4603      	mov	r3, r0
 8002b1a:	70fb      	strb	r3, [r7, #3]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	803b      	strh	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	da0f      	bge.n	8002b50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3338      	adds	r3, #56	; 0x38
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	3304      	adds	r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	705a      	strb	r2, [r3, #1]
 8002b4e:	e00f      	b.n	8002b70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	3304      	adds	r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b7c:	883a      	ldrh	r2, [r7, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	78ba      	ldrb	r2, [r7, #2]
 8002b86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b9a:	78bb      	ldrb	r3, [r7, #2]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d102      	bne.n	8002ba6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_PCD_EP_Open+0xaa>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e00e      	b.n	8002bd2 <HAL_PCD_EP_Open+0xc8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68f9      	ldr	r1, [r7, #12]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f007 fef2 	bl	800a9ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	da0f      	bge.n	8002c0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 020f 	and.w	r2, r3, #15
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	3338      	adds	r3, #56	; 0x38
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	705a      	strb	r2, [r3, #1]
 8002c0c:	e00f      	b.n	8002c2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	3304      	adds	r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_PCD_EP_Close+0x6e>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e00e      	b.n	8002c66 <HAL_PCD_EP_Close+0x8c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68f9      	ldr	r1, [r7, #12]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f007 ff30 	bl	800aabc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb0:	7afb      	ldrb	r3, [r7, #11]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cbc:	7afb      	ldrb	r3, [r7, #11]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6979      	ldr	r1, [r7, #20]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f008 f9b1 	bl	800b034 <USB_EP0StartXfer>
 8002cd2:	e005      	b.n	8002ce0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f007 ffca 	bl	800ac74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d0c:	681b      	ldr	r3, [r3, #0]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	460b      	mov	r3, r1
 8002d28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	3338      	adds	r3, #56	; 0x38
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2201      	movs	r2, #1
 8002d58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d5a:	7afb      	ldrb	r3, [r7, #11]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d66:	7afb      	ldrb	r3, [r7, #11]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6979      	ldr	r1, [r7, #20]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f008 f95c 	bl	800b034 <USB_EP0StartXfer>
 8002d7c:	e005      	b.n	8002d8a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6979      	ldr	r1, [r7, #20]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f007 ff75 	bl	800ac74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d901      	bls.n	8002db2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e04e      	b.n	8002e50 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	da0f      	bge.n	8002dda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 020f 	and.w	r2, r3, #15
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3338      	adds	r3, #56	; 0x38
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	705a      	strb	r2, [r3, #1]
 8002dd8:	e00d      	b.n	8002df6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_PCD_EP_SetStall+0x82>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e01c      	b.n	8002e50 <HAL_PCD_EP_SetStall+0xbc>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68f9      	ldr	r1, [r7, #12]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f008 fb63 	bl	800b4f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d108      	bne.n	8002e46 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f008 fd55 	bl	800b8f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d901      	bls.n	8002e76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e042      	b.n	8002efc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da0f      	bge.n	8002e9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	3338      	adds	r3, #56	; 0x38
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	705a      	strb	r2, [r3, #1]
 8002e9c:	e00f      	b.n	8002ebe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_PCD_EP_ClrStall+0x86>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e00e      	b.n	8002efc <HAL_PCD_EP_ClrStall+0xa4>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68f9      	ldr	r1, [r7, #12]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f008 fb6d 	bl	800b5cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	da0c      	bge.n	8002f32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 020f 	and.w	r2, r3, #15
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	3338      	adds	r3, #56	; 0x38
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e00c      	b.n	8002f4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 020f 	and.w	r2, r3, #15
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	3304      	adds	r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f008 f990 	bl	800b278 <USB_EPStopXfer>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b088      	sub	sp, #32
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	3338      	adds	r3, #56	; 0x38
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d901      	bls.n	8002f9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e067      	b.n	800306e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d902      	bls.n	8002fba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3303      	adds	r3, #3
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc2:	e026      	b.n	8003012 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d902      	bls.n	8002fe0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	3303      	adds	r3, #3
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6919      	ldr	r1, [r3, #16]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	6978      	ldr	r0, [r7, #20]
 8002ff6:	f008 f9e9 	bl	800b3cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	441a      	add	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	b29b      	uxth	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	429a      	cmp	r2, r3
 8003026:	d809      	bhi.n	800303c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003030:	429a      	cmp	r2, r3
 8003032:	d203      	bcs.n	800303c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1c3      	bne.n	8002fc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	429a      	cmp	r2, r3
 8003046:	d811      	bhi.n	800306c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	43db      	mvns	r3, r3
 8003062:	6939      	ldr	r1, [r7, #16]
 8003064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003068:	4013      	ands	r3, r2
 800306a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	333c      	adds	r3, #60	; 0x3c
 8003090:	3304      	adds	r3, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <PCD_EP_OutXfrComplete_int+0x98>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d124      	bne.n	80030f8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c4:	461a      	mov	r2, r3
 80030c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	e01a      	b.n	8003104 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	2320      	movs	r3, #32
 80030e8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f00a fdd1 	bl	800dc98 <HAL_PCD_DataOutStageCallback>
 80030f6:	e005      	b.n	8003104 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f00a fdca 	bl	800dc98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	4f54310a 	.word	0x4f54310a

08003114 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	333c      	adds	r3, #60	; 0x3c
 800312c:	3304      	adds	r3, #4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <PCD_EP_OutSetupPacket_int+0x64>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d90e      	bls.n	8003168 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	461a      	mov	r2, r3
 8003162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003166:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f00a fd83 	bl	800dc74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	4f54300a 	.word	0x4f54300a

0800317c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
 8003188:	4613      	mov	r3, r2
 800318a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d107      	bne.n	80031aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800319a:	883b      	ldrh	r3, [r7, #0]
 800319c:	0419      	lsls	r1, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
 80031a8:	e028      	b.n	80031fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e00d      	b.n	80031da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	3340      	adds	r3, #64	; 0x40
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4413      	add	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	3301      	adds	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	3b01      	subs	r3, #1
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d3ec      	bcc.n	80031be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031e4:	883b      	ldrh	r3, [r7, #0]
 80031e6:	0418      	lsls	r0, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	4302      	orrs	r2, r0
 80031f4:	3340      	adds	r3, #64	; 0x40
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325e:	f043 0303 	orr.w	r3, r3, #3
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d102      	bne.n	800328c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800328a:	e00b      	b.n	80032a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800328e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d102      	bne.n	80032a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800329c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032a0:	e000      	b.n	80032a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80032a2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40007000 	.word	0x40007000

080032b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d141      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032c2:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ce:	d131      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032d0:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d6:	4a46      	ldr	r2, [pc, #280]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e0:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032e8:	4a41      	ldr	r2, [pc, #260]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2232      	movs	r2, #50	; 0x32
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	4a3f      	ldr	r2, [pc, #252]	; (80033f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	0c9b      	lsrs	r3, r3, #18
 8003302:	3301      	adds	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003306:	e002      	b.n	800330e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3b01      	subs	r3, #1
 800330c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331a:	d102      	bne.n	8003322 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f2      	bne.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003322:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d158      	bne.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e057      	b.n	80033e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333a:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003344:	e04d      	b.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d141      	bne.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335a:	d131      	bne.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003362:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800336c:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003374:	4a1e      	ldr	r2, [pc, #120]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800337a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2232      	movs	r2, #50	; 0x32
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	0c9b      	lsrs	r3, r3, #18
 800338e:	3301      	adds	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003392:	e002      	b.n	800339a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3b01      	subs	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a6:	d102      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f2      	bne.n	8003394 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ba:	d112      	bne.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e011      	b.n	80033e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033d0:	e007      	b.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033da:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033e0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	40007000 	.word	0x40007000
 80033f4:	20000000 	.word	0x20000000
 80033f8:	431bde83 	.word	0x431bde83

080033fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800340a:	6053      	str	r3, [r2, #4]
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40007000 	.word	0x40007000

0800341c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f000 bc08 	b.w	8003c40 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003430:	4b96      	ldr	r3, [pc, #600]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800343a:	4b94      	ldr	r3, [pc, #592]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80e4 	beq.w	800361a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_RCC_OscConfig+0x4c>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b0c      	cmp	r3, #12
 800345c:	f040 808b 	bne.w	8003576 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b01      	cmp	r3, #1
 8003464:	f040 8087 	bne.w	8003576 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003468:	4b88      	ldr	r3, [pc, #544]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x64>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e3df      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1a      	ldr	r2, [r3, #32]
 8003484:	4b81      	ldr	r3, [pc, #516]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_RCC_OscConfig+0x7e>
 8003490:	4b7e      	ldr	r3, [pc, #504]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003498:	e005      	b.n	80034a6 <HAL_RCC_OscConfig+0x8a>
 800349a:	4b7c      	ldr	r3, [pc, #496]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d223      	bcs.n	80034f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fdf8 	bl	80040a4 <RCC_SetFlashLatencyFromMSIRange>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e3c0      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a72      	ldr	r2, [pc, #456]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034c4:	f043 0308 	orr.w	r3, r3, #8
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b70      	ldr	r3, [pc, #448]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	496d      	ldr	r1, [pc, #436]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034dc:	4b6b      	ldr	r3, [pc, #428]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	4968      	ldr	r1, [pc, #416]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
 80034f0:	e025      	b.n	800353e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a65      	ldr	r2, [pc, #404]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034f8:	f043 0308 	orr.w	r3, r3, #8
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4960      	ldr	r1, [pc, #384]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003510:	4b5e      	ldr	r3, [pc, #376]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	495b      	ldr	r1, [pc, #364]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fdb8 	bl	80040a4 <RCC_SetFlashLatencyFromMSIRange>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e380      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800353e:	f000 fcc1 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b51      	ldr	r3, [pc, #324]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	4950      	ldr	r1, [pc, #320]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_RCC_OscConfig+0x278>)
 800355c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800355e:	4b4e      	ldr	r3, [pc, #312]	; (8003698 <HAL_RCC_OscConfig+0x27c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd ff78 	bl	8001458 <HAL_InitTick>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d052      	beq.n	8003618 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	e364      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d032      	beq.n	80035e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800357e:	4b43      	ldr	r3, [pc, #268]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a42      	ldr	r2, [pc, #264]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800358a:	f7fd ffb5 	bl	80014f8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003592:	f7fd ffb1 	bl	80014f8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e34d      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035a4:	4b39      	ldr	r3, [pc, #228]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a35      	ldr	r2, [pc, #212]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035b6:	f043 0308 	orr.w	r3, r3, #8
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4930      	ldr	r1, [pc, #192]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ce:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	492b      	ldr	r1, [pc, #172]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
 80035e2:	e01a      	b.n	800361a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035e4:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035f0:	f7fd ff82 	bl	80014f8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035f8:	f7fd ff7e 	bl	80014f8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e31a      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1dc>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d073      	beq.n	800370e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x21c>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d10e      	bne.n	8003650 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d10b      	bne.n	8003650 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d063      	beq.n	800370c <HAL_RCC_OscConfig+0x2f0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d15f      	bne.n	800370c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e2f7      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x24c>
 800365a:	4b0c      	ldr	r3, [pc, #48]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e025      	b.n	80036b4 <HAL_RCC_OscConfig+0x298>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003670:	d114      	bne.n	800369c <HAL_RCC_OscConfig+0x280>
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a05      	ldr	r2, [pc, #20]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a02      	ldr	r2, [pc, #8]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e013      	b.n	80036b4 <HAL_RCC_OscConfig+0x298>
 800368c:	40021000 	.word	0x40021000
 8003690:	0800f478 	.word	0x0800f478
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004
 800369c:	4ba0      	ldr	r3, [pc, #640]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a9f      	ldr	r2, [pc, #636]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b9d      	ldr	r3, [pc, #628]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a9c      	ldr	r2, [pc, #624]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd ff1c 	bl	80014f8 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fd ff18 	bl	80014f8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e2b4      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d6:	4b92      	ldr	r3, [pc, #584]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2a8>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd ff08 	bl	80014f8 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fd ff04 	bl	80014f8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e2a0      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036fe:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x2d0>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d060      	beq.n	80037dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d005      	beq.n	800372c <HAL_RCC_OscConfig+0x310>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d119      	bne.n	800375a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d116      	bne.n	800375a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372c:	4b7c      	ldr	r3, [pc, #496]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_OscConfig+0x328>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e27d      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	4973      	ldr	r1, [pc, #460]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003758:	e040      	b.n	80037dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d023      	beq.n	80037aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003762:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fec3 	bl	80014f8 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7fd febf 	bl	80014f8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e25b      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003788:	4b65      	ldr	r3, [pc, #404]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b62      	ldr	r3, [pc, #392]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	495f      	ldr	r1, [pc, #380]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	e018      	b.n	80037dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5c      	ldr	r2, [pc, #368]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fd fe9f 	bl	80014f8 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037be:	f7fd fe9b 	bl	80014f8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e237      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d03c      	beq.n	8003862 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01c      	beq.n	800382a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f0:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fd fe7a 	bl	80014f8 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003808:	f7fd fe76 	bl	80014f8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e212      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ef      	beq.n	8003808 <HAL_RCC_OscConfig+0x3ec>
 8003828:	e01b      	b.n	8003862 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003830:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fd fe5d 	bl	80014f8 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003842:	f7fd fe59 	bl	80014f8 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1f5      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003854:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ef      	bne.n	8003842 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80a6 	beq.w	80039bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003870:	2300      	movs	r3, #0
 8003872:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10d      	bne.n	800389c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	4a26      	ldr	r2, [pc, #152]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388a:	6593      	str	r3, [r2, #88]	; 0x58
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003898:	2301      	movs	r3, #1
 800389a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCC_OscConfig+0x508>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d118      	bne.n	80038da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <HAL_RCC_OscConfig+0x508>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <HAL_RCC_OscConfig+0x508>)
 80038ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b4:	f7fd fe20 	bl	80014f8 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038bc:	f7fd fe1c 	bl	80014f8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e1b8      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_RCC_OscConfig+0x508>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d108      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4d8>
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f2:	e029      	b.n	8003948 <HAL_RCC_OscConfig+0x52c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d115      	bne.n	8003928 <HAL_RCC_OscConfig+0x50c>
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	4a03      	ldr	r2, [pc, #12]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800391c:	e014      	b.n	8003948 <HAL_RCC_OscConfig+0x52c>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	40007000 	.word	0x40007000
 8003928:	4b9d      	ldr	r3, [pc, #628]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	4a9c      	ldr	r2, [pc, #624]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003938:	4b99      	ldr	r3, [pc, #612]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	4a98      	ldr	r2, [pc, #608]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fd fdd2 	bl	80014f8 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fd fdce 	bl	80014f8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e168      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396e:	4b8c      	ldr	r3, [pc, #560]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ed      	beq.n	8003958 <HAL_RCC_OscConfig+0x53c>
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fd fdbb 	bl	80014f8 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fd fdb7 	bl	80014f8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e151      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800399c:	4b80      	ldr	r3, [pc, #512]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ed      	bne.n	8003986 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039aa:	7ffb      	ldrb	r3, [r7, #31]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b7b      	ldr	r3, [pc, #492]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	4a7a      	ldr	r2, [pc, #488]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d03c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01c      	beq.n	8003a0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039d0:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 80039d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d6:	4a72      	ldr	r2, [pc, #456]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd fd8a 	bl	80014f8 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e8:	f7fd fd86 	bl	80014f8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e122      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039fa:	4b69      	ldr	r3, [pc, #420]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 80039fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ef      	beq.n	80039e8 <HAL_RCC_OscConfig+0x5cc>
 8003a08:	e01b      	b.n	8003a42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a10:	4a63      	ldr	r2, [pc, #396]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fd6d 	bl	80014f8 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a22:	f7fd fd69 	bl	80014f8 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e105      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a34:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ef      	bne.n	8003a22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80f9 	beq.w	8003c3e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	f040 80cf 	bne.w	8003bf4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a56:	4b52      	ldr	r3, [pc, #328]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 0203 	and.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d12c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	3b01      	subs	r3, #1
 8003a76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d123      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d113      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d109      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d071      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d068      	beq.n	8003b9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aca:	4b35      	ldr	r3, [pc, #212]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ad6:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0ac      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2d      	ldr	r2, [pc, #180]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003aec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003af2:	f7fd fd01 	bl	80014f8 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fd fcfd 	bl	80014f8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e099      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b18:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <HAL_RCC_OscConfig+0x788>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	0112      	lsls	r2, r2, #4
 8003b2c:	4311      	orrs	r1, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b32:	0212      	lsls	r2, r2, #8
 8003b34:	4311      	orrs	r1, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b3a:	0852      	lsrs	r2, r2, #1
 8003b3c:	3a01      	subs	r2, #1
 8003b3e:	0552      	lsls	r2, r2, #21
 8003b40:	4311      	orrs	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b46:	0852      	lsrs	r2, r2, #1
 8003b48:	3a01      	subs	r2, #1
 8003b4a:	0652      	lsls	r2, r2, #25
 8003b4c:	4311      	orrs	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b52:	06d2      	lsls	r2, r2, #27
 8003b54:	430a      	orrs	r2, r1
 8003b56:	4912      	ldr	r1, [pc, #72]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b74:	f7fd fcc0 	bl	80014f8 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fd fcbc 	bl	80014f8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e058      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <HAL_RCC_OscConfig+0x784>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b9a:	e050      	b.n	8003c3e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e04f      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba8:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d144      	bne.n	8003c3e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bb4:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc0:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bcc:	f7fd fc94 	bl	80014f8 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fd fc90 	bl	80014f8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e02c      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x7b8>
 8003bf2:	e024      	b.n	8003c3e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d01f      	beq.n	8003c3a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fd fc77 	bl	80014f8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fd fc73 	bl	80014f8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e00f      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f0      	bne.n	8003c0e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	4905      	ldr	r1, [pc, #20]	; (8003c48 <HAL_RCC_OscConfig+0x82c>)
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCC_OscConfig+0x830>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60cb      	str	r3, [r1, #12]
 8003c38:	e001      	b.n	8003c3e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3720      	adds	r7, #32
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	feeefffc 	.word	0xfeeefffc

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e11d      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b90      	ldr	r3, [pc, #576]	; (8003eac <HAL_RCC_ClockConfig+0x25c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d910      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b8d      	ldr	r3, [pc, #564]	; (8003eac <HAL_RCC_ClockConfig+0x25c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 020f 	bic.w	r2, r3, #15
 8003c7e:	498b      	ldr	r1, [pc, #556]	; (8003eac <HAL_RCC_ClockConfig+0x25c>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b89      	ldr	r3, [pc, #548]	; (8003eac <HAL_RCC_ClockConfig+0x25c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e105      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	4b81      	ldr	r3, [pc, #516]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d908      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b7e      	ldr	r3, [pc, #504]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	497b      	ldr	r1, [pc, #492]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d079      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d11e      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	4b75      	ldr	r3, [pc, #468]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e0dc      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003cea:	f000 fa35 	bl	8004158 <RCC_GetSysClockFreqFromPLLSource>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4a70      	ldr	r2, [pc, #448]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d946      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003cf6:	4b6e      	ldr	r3, [pc, #440]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d140      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d02:	4b6b      	ldr	r3, [pc, #428]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0a:	4a69      	ldr	r2, [pc, #420]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e035      	b.n	8003d84 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d20:	4b63      	ldr	r3, [pc, #396]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d115      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0b9      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d38:	4b5d      	ldr	r3, [pc, #372]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0ad      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d48:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0a5      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d58:	f000 f8b4 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4a55      	ldr	r2, [pc, #340]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d90f      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d64:	4b52      	ldr	r3, [pc, #328]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d70:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d78:	4a4d      	ldr	r2, [pc, #308]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d84:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f023 0203 	bic.w	r2, r3, #3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4947      	ldr	r1, [pc, #284]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d96:	f7fd fbaf 	bl	80014f8 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9e:	f7fd fbab 	bl	80014f8 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e077      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db4:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 020c 	and.w	r2, r3, #12
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d1eb      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dcc:	4b38      	ldr	r3, [pc, #224]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a37      	ldr	r2, [pc, #220]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d208      	bcs.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df4:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	492b      	ldr	r1, [pc, #172]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_RCC_ClockConfig+0x25c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d210      	bcs.n	8003e36 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <HAL_RCC_ClockConfig+0x25c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 020f 	bic.w	r2, r3, #15
 8003e1c:	4923      	ldr	r1, [pc, #140]	; (8003eac <HAL_RCC_ClockConfig+0x25c>)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e24:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCC_ClockConfig+0x25c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e036      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4918      	ldr	r1, [pc, #96]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e60:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4910      	ldr	r1, [pc, #64]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e74:	f000 f826 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	490c      	ldr	r1, [pc, #48]	; (8003eb8 <HAL_RCC_ClockConfig+0x268>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <HAL_RCC_ClockConfig+0x26c>)
 8003e92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <HAL_RCC_ClockConfig+0x270>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd fadd 	bl	8001458 <HAL_InitTick>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	04c4b400 	.word	0x04c4b400
 8003eb8:	0800f478 	.word	0x0800f478
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	20000004 	.word	0x20000004

08003ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed2:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003edc:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d121      	bne.n	8003f36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d11e      	bne.n	8003f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ef8:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d107      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f04:	4b31      	ldr	r3, [pc, #196]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e005      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f14:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f20:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10d      	bne.n	8003f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d102      	bne.n	8003f42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	e004      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f48:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b0c      	cmp	r3, #12
 8003f50:	d134      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d003      	beq.n	8003f6a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d003      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0xac>
 8003f68:	e005      	b.n	8003f76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f6c:	617b      	str	r3, [r7, #20]
      break;
 8003f6e:	e005      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f72:	617b      	str	r3, [r7, #20]
      break;
 8003f74:	e002      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	617b      	str	r3, [r7, #20]
      break;
 8003f7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	3301      	adds	r3, #1
 8003f88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	fb03 f202 	mul.w	r2, r3, r2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	0e5b      	lsrs	r3, r3, #25
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	3301      	adds	r3, #1
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3724      	adds	r7, #36	; 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	0800f490 	.word	0x0800f490
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	007a1200 	.word	0x007a1200

08003fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ff8:	f7ff fff0 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4904      	ldr	r1, [pc, #16]	; (800401c <HAL_RCC_GetPCLK1Freq+0x28>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	0800f488 	.word	0x0800f488

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004024:	f7ff ffda 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0adb      	lsrs	r3, r3, #11
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4904      	ldr	r1, [pc, #16]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	0800f488 	.word	0x0800f488

0800404c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_EnableCSS+0x1c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <HAL_RCC_EnableCSS+0x1c>)
 8004056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000

0800406c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d105      	bne.n	800408a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800407e:	f000 f809 	bl	8004094 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004082:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004088:	621a      	str	r2, [r3, #32]
  }
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040bc:	f7ff f8da 	bl	8003274 <HAL_PWREx_GetVoltageRange>
 80040c0:	6178      	str	r0, [r7, #20]
 80040c2:	e014      	b.n	80040ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c4:	4b22      	ldr	r3, [pc, #136]	; (8004150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	4a21      	ldr	r2, [pc, #132]	; (8004150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ce:	6593      	str	r3, [r2, #88]	; 0x58
 80040d0:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040dc:	f7ff f8ca 	bl	8003274 <HAL_PWREx_GetVoltageRange>
 80040e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040e2:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f4:	d10b      	bne.n	800410e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b80      	cmp	r3, #128	; 0x80
 80040fa:	d913      	bls.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004100:	d902      	bls.n	8004108 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004102:	2302      	movs	r3, #2
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	e00d      	b.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004108:	2301      	movs	r3, #1
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	e00a      	b.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b7f      	cmp	r3, #127	; 0x7f
 8004112:	d902      	bls.n	800411a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004114:	2302      	movs	r3, #2
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	e004      	b.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b70      	cmp	r3, #112	; 0x70
 800411e:	d101      	bne.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004120:	2301      	movs	r3, #1
 8004122:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f023 020f 	bic.w	r2, r3, #15
 800412c:	4909      	ldr	r1, [pc, #36]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	429a      	cmp	r2, r3
 8004140:	d001      	beq.n	8004146 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	40022000 	.word	0x40022000

08004158 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d00b      	beq.n	8004186 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d825      	bhi.n	80041c0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d008      	beq.n	800418c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d11f      	bne.n	80041c0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004182:	613b      	str	r3, [r7, #16]
    break;
 8004184:	e01f      	b.n	80041c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004188:	613b      	str	r3, [r7, #16]
    break;
 800418a:	e01c      	b.n	80041c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d107      	bne.n	80041a8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e005      	b.n	80041b4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	613b      	str	r3, [r7, #16]
    break;
 80041be:	e002      	b.n	80041c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
    break;
 80041c4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	3301      	adds	r3, #1
 80041d2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041d4:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	fb03 f202 	mul.w	r2, r3, r2
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	0e5b      	lsrs	r3, r3, #25
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004206:	683b      	ldr	r3, [r7, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40021000 	.word	0x40021000
 8004218:	00f42400 	.word	0x00f42400
 800421c:	007a1200 	.word	0x007a1200
 8004220:	0800f490 	.word	0x0800f490

08004224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800422c:	2300      	movs	r3, #0
 800422e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004230:	2300      	movs	r3, #0
 8004232:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423c:	2b00      	cmp	r3, #0
 800423e:	d040      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004244:	2b80      	cmp	r3, #128	; 0x80
 8004246:	d02a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d825      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800424c:	2b60      	cmp	r3, #96	; 0x60
 800424e:	d026      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004250:	2b60      	cmp	r3, #96	; 0x60
 8004252:	d821      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d006      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d81d      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004260:	2b20      	cmp	r3, #32
 8004262:	d010      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004264:	e018      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004266:	4b89      	ldr	r3, [pc, #548]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	4a88      	ldr	r2, [pc, #544]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004272:	e015      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fa24 	bl	80056c8 <RCCEx_PLLSAI1_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004284:	e00c      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3320      	adds	r3, #32
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fb0f 	bl	80058b0 <RCCEx_PLLSAI2_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	74fb      	strb	r3, [r7, #19]
      break;
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a6:	4b79      	ldr	r3, [pc, #484]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b4:	4975      	ldr	r1, [pc, #468]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80042bc:	e001      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d047      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d030      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042dc:	d82a      	bhi.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e2:	d02a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80042e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e8:	d824      	bhi.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ee:	d008      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f4:	d81e      	bhi.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d010      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004300:	e018      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004302:	4b62      	ldr	r3, [pc, #392]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4a61      	ldr	r2, [pc, #388]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800430e:	e015      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f001 f9d6 	bl	80056c8 <RCCEx_PLLSAI1_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004320:	e00c      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3320      	adds	r3, #32
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fac1 	bl	80058b0 <RCCEx_PLLSAI2_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004332:	e003      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	74fb      	strb	r3, [r7, #19]
      break;
 8004338:	e000      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800433a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004342:	4b52      	ldr	r3, [pc, #328]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004344:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	494e      	ldr	r1, [pc, #312]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004358:	e001      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 809f 	beq.w	80044aa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436c:	2300      	movs	r3, #0
 800436e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004370:	4b46      	ldr	r3, [pc, #280]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	4b41      	ldr	r3, [pc, #260]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	4a40      	ldr	r2, [pc, #256]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004390:	6593      	str	r3, [r2, #88]	; 0x58
 8004392:	4b3e      	ldr	r3, [pc, #248]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439e:	2301      	movs	r3, #1
 80043a0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a3a      	ldr	r2, [pc, #232]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ae:	f7fd f8a3 	bl	80014f8 <HAL_GetTick>
 80043b2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043b4:	e009      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fd f89f 	bl	80014f8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d902      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	74fb      	strb	r3, [r7, #19]
        break;
 80043c8:	e005      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ca:	4b31      	ldr	r3, [pc, #196]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ef      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80043d6:	7cfb      	ldrb	r3, [r7, #19]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d15b      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01f      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d019      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004404:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004406:	4b21      	ldr	r3, [pc, #132]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	4a1f      	ldr	r2, [pc, #124]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	4a1b      	ldr	r2, [pc, #108]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004426:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d016      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd f85e 	bl	80014f8 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443e:	e00b      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004440:	f7fd f85a 	bl	80014f8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d902      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	74fb      	strb	r3, [r7, #19]
            break;
 8004456:	e006      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0ec      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10c      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	4903      	ldr	r1, [pc, #12]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004484:	e008      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	74bb      	strb	r3, [r7, #18]
 800448a:	e005      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800448c:	40021000 	.word	0x40021000
 8004490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004498:	7c7b      	ldrb	r3, [r7, #17]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449e:	4ba0      	ldr	r3, [pc, #640]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	4a9f      	ldr	r2, [pc, #636]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b6:	4b9a      	ldr	r3, [pc, #616]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f023 0203 	bic.w	r2, r3, #3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	4996      	ldr	r1, [pc, #600]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d8:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f023 020c 	bic.w	r2, r3, #12
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	498e      	ldr	r1, [pc, #568]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044fa:	4b89      	ldr	r3, [pc, #548]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	4985      	ldr	r1, [pc, #532]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800451c:	4b80      	ldr	r3, [pc, #512]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452a:	497d      	ldr	r1, [pc, #500]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800453e:	4b78      	ldr	r3, [pc, #480]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454c:	4974      	ldr	r1, [pc, #464]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004560:	4b6f      	ldr	r3, [pc, #444]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	496c      	ldr	r1, [pc, #432]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004582:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004590:	4963      	ldr	r1, [pc, #396]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a4:	4b5e      	ldr	r3, [pc, #376]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b2:	495b      	ldr	r1, [pc, #364]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c6:	4b56      	ldr	r3, [pc, #344]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	4952      	ldr	r1, [pc, #328]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e8:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	494a      	ldr	r1, [pc, #296]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800460a:	4b45      	ldr	r3, [pc, #276]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	4941      	ldr	r1, [pc, #260]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800462c:	4b3c      	ldr	r3, [pc, #240]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004632:	f023 0203 	bic.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	4939      	ldr	r1, [pc, #228]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d028      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800464e:	4b34      	ldr	r3, [pc, #208]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465c:	4930      	ldr	r1, [pc, #192]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800466c:	d106      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4a2b      	ldr	r2, [pc, #172]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004678:	60d3      	str	r3, [r2, #12]
 800467a:	e011      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004684:	d10c      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	2101      	movs	r1, #1
 800468c:	4618      	mov	r0, r3
 800468e:	f001 f81b 	bl	80056c8 <RCCEx_PLLSAI1_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d04d      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b4:	d108      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046bc:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80046c6:	e012      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80046c8:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ce:	4a14      	ldr	r2, [pc, #80]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e6:	490e      	ldr	r1, [pc, #56]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f6:	d106      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a08      	ldr	r2, [pc, #32]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004702:	60d3      	str	r3, [r2, #12]
 8004704:	e020      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800470e:	d109      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004710:	4b03      	ldr	r3, [pc, #12]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a02      	ldr	r2, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	60d3      	str	r3, [r2, #12]
 800471c:	e014      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f000 ffc7 	bl	80056c8 <RCCEx_PLLSAI1_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d028      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004754:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004762:	4947      	ldr	r1, [pc, #284]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004772:	d106      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004774:	4b42      	ldr	r3, [pc, #264]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a41      	ldr	r2, [pc, #260]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477e:	60d3      	str	r3, [r2, #12]
 8004780:	e011      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004786:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800478a:	d10c      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	2101      	movs	r1, #1
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ff98 	bl	80056c8 <RCCEx_PLLSAI1_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01e      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047b2:	4b33      	ldr	r3, [pc, #204]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c2:	492f      	ldr	r1, [pc, #188]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 ff73 	bl	80056c8 <RCCEx_PLLSAI1_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047e6:	7cfb      	ldrb	r3, [r7, #19]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00b      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047fc:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004802:	f023 0204 	bic.w	r2, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	491c      	ldr	r1, [pc, #112]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004820:	4b17      	ldr	r3, [pc, #92]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004826:	f023 0218 	bic.w	r2, r3, #24
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	4913      	ldr	r1, [pc, #76]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800484a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004854:	490a      	ldr	r1, [pc, #40]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004866:	d105      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a04      	ldr	r2, [pc, #16]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004872:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004874:	7cbb      	ldrb	r3, [r7, #18]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004896:	d13e      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004898:	4bb6      	ldr	r3, [pc, #728]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048aa:	d028      	beq.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b2:	f200 86f4 	bhi.w	800569e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048bc:	d005      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c4:	d00e      	beq.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80048c6:	f000 beea 	b.w	800569e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048ca:	4baa      	ldr	r3, [pc, #680]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	f040 86e4 	bne.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	61fb      	str	r3, [r7, #28]
      break;
 80048e0:	f000 bedf 	b.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80048e4:	4ba3      	ldr	r3, [pc, #652]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	f040 86d9 	bne.w	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80048f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80048f8:	61fb      	str	r3, [r7, #28]
      break;
 80048fa:	f000 bed4 	b.w	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80048fe:	4b9d      	ldr	r3, [pc, #628]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800490a:	f040 86ce 	bne.w	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800490e:	4b9a      	ldr	r3, [pc, #616]	; (8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004910:	61fb      	str	r3, [r7, #28]
      break;
 8004912:	f000 beca 	b.w	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004916:	4b97      	ldr	r3, [pc, #604]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d036      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d840      	bhi.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d003      	beq.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d020      	beq.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004938:	e039      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800493a:	4b8e      	ldr	r3, [pc, #568]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b02      	cmp	r3, #2
 8004944:	d116      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004946:	4b8b      	ldr	r3, [pc, #556]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004952:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	e005      	b.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800495e:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	4a84      	ldr	r2, [pc, #528]	; (8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800496c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004970:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004972:	e01f      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
      break;
 8004978:	e01c      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800497a:	4b7e      	ldr	r3, [pc, #504]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d102      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004988:	4b7d      	ldr	r3, [pc, #500]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800498a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800498c:	e012      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61bb      	str	r3, [r7, #24]
      break;
 8004992:	e00f      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004994:	4b77      	ldr	r3, [pc, #476]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049a0:	d102      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80049a2:	4b78      	ldr	r3, [pc, #480]	; (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80049a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80049a6:	e005      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]
      break;
 80049ac:	e002      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
      break;
 80049b2:	bf00      	nop
    }

    switch(PeriphClk)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ba:	f000 8606 	beq.w	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049c4:	f200 8673 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ce:	f000 8469 	beq.w	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d8:	f200 8669 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e2:	f000 8531 	beq.w	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ec:	f200 865f 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049f6:	f000 8187 	beq.w	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a00:	f200 8655 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a0a:	f000 80cd 	beq.w	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a14:	f200 864b 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1e:	f000 8430 	beq.w	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	f200 8641 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a32:	f000 83e4 	beq.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a3c:	f200 8637 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a46:	f000 80af 	beq.w	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a50:	f200 862d 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	f000 809d 	beq.w	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a64:	f200 8623 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6e:	f000 808b 	beq.w	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a78:	f200 8619 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	f000 8554 	beq.w	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8c:	f200 860f 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a96:	f000 8500 	beq.w	800549a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa0:	f200 8605 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aaa:	f000 84a1 	beq.w	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab4:	f200 85fb 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	f000 846c 	beq.w	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	f200 85f3 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d84c      	bhi.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 85ec 	beq.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	2b1f      	cmp	r3, #31
 8004adc:	f200 85e7 	bhi.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004efd 	.word	0x08004efd
 8004aec:	08004f6b 	.word	0x08004f6b
 8004af0:	080056af 	.word	0x080056af
 8004af4:	08004fff 	.word	0x08004fff
 8004af8:	080056af 	.word	0x080056af
 8004afc:	080056af 	.word	0x080056af
 8004b00:	080056af 	.word	0x080056af
 8004b04:	08005077 	.word	0x08005077
 8004b08:	080056af 	.word	0x080056af
 8004b0c:	080056af 	.word	0x080056af
 8004b10:	080056af 	.word	0x080056af
 8004b14:	080056af 	.word	0x080056af
 8004b18:	080056af 	.word	0x080056af
 8004b1c:	080056af 	.word	0x080056af
 8004b20:	080056af 	.word	0x080056af
 8004b24:	080050fb 	.word	0x080050fb
 8004b28:	080056af 	.word	0x080056af
 8004b2c:	080056af 	.word	0x080056af
 8004b30:	080056af 	.word	0x080056af
 8004b34:	080056af 	.word	0x080056af
 8004b38:	080056af 	.word	0x080056af
 8004b3c:	080056af 	.word	0x080056af
 8004b40:	080056af 	.word	0x080056af
 8004b44:	080056af 	.word	0x080056af
 8004b48:	080056af 	.word	0x080056af
 8004b4c:	080056af 	.word	0x080056af
 8004b50:	080056af 	.word	0x080056af
 8004b54:	080056af 	.word	0x080056af
 8004b58:	080056af 	.word	0x080056af
 8004b5c:	080056af 	.word	0x080056af
 8004b60:	080056af 	.word	0x080056af
 8004b64:	0800517d 	.word	0x0800517d
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	f000 83e8 	beq.w	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004b70:	f000 bd9d 	b.w	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b74:	40021000 	.word	0x40021000
 8004b78:	0003d090 	.word	0x0003d090
 8004b7c:	0800f490 	.word	0x0800f490
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004b88:	69b9      	ldr	r1, [r7, #24]
 8004b8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b8e:	f000 ff83 	bl	8005a98 <RCCEx_GetSAIxPeriphCLKFreq>
 8004b92:	61f8      	str	r0, [r7, #28]
      break;
 8004b94:	f000 bd8e 	b.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004b9e:	f000 ff7b 	bl	8005a98 <RCCEx_GetSAIxPeriphCLKFreq>
 8004ba2:	61f8      	str	r0, [r7, #28]
      break;
 8004ba4:	f000 bd86 	b.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004ba8:	4b9a      	ldr	r3, [pc, #616]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bba:	d015      	beq.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bc2:	f200 8092 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bcc:	d029      	beq.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd4:	f200 8089 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d07b      	beq.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004be4:	d04a      	beq.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8004be6:	e080      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004be8:	4b8a      	ldr	r3, [pc, #552]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d17d      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004bf4:	4b87      	ldr	r3, [pc, #540]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004c00:	4b84      	ldr	r3, [pc, #528]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	e005      	b.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004c0c:	4b81      	ldr	r3, [pc, #516]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c12:	0a1b      	lsrs	r3, r3, #8
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	4a7f      	ldr	r2, [pc, #508]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1e:	61fb      	str	r3, [r7, #28]
          break;
 8004c20:	e066      	b.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004c22:	4b7c      	ldr	r3, [pc, #496]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c2e:	d162      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004c30:	4b78      	ldr	r3, [pc, #480]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3c:	d15b      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c3e:	4b75      	ldr	r3, [pc, #468]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	0a1b      	lsrs	r3, r3, #8
 8004c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c48:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	fb03 f202 	mul.w	r2, r3, r2
 8004c52:	4b70      	ldr	r3, [pc, #448]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004c64:	4b6b      	ldr	r3, [pc, #428]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	0d5b      	lsrs	r3, r3, #21
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	61fb      	str	r3, [r7, #28]
          break;
 8004c7a:	e03c      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004c7c:	4b65      	ldr	r3, [pc, #404]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c88:	d138      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004c8a:	4b62      	ldr	r3, [pc, #392]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c96:	d131      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004c98:	4b5e      	ldr	r3, [pc, #376]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	fb03 f202 	mul.w	r2, r3, r2
 8004cac:	4b59      	ldr	r3, [pc, #356]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004cbe:	4b55      	ldr	r3, [pc, #340]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	0d5b      	lsrs	r3, r3, #21
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	61fb      	str	r3, [r7, #28]
          break;
 8004cd4:	e012      	b.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004cd6:	4b4f      	ldr	r3, [pc, #316]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d10e      	bne.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8004ce4:	4b4d      	ldr	r3, [pc, #308]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004ce6:	61fb      	str	r3, [r7, #28]
          break;
 8004ce8:	e00b      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004cea:	bf00      	nop
 8004cec:	f000 bce2 	b.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cf0:	bf00      	nop
 8004cf2:	f000 bcdf 	b.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cf6:	bf00      	nop
 8004cf8:	f000 bcdc 	b.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cfc:	bf00      	nop
 8004cfe:	f000 bcd9 	b.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d02:	bf00      	nop
        break;
 8004d04:	f000 bcd6 	b.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004d08:	4b42      	ldr	r3, [pc, #264]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d16:	d13d      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004d18:	4b3e      	ldr	r3, [pc, #248]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d24:	f040 84c5 	bne.w	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004d28:	4b3a      	ldr	r3, [pc, #232]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	f040 84bd 	bne.w	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004d38:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d42:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	fb03 f202 	mul.w	r2, r3, r2
 8004d4c:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	3301      	adds	r3, #1
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	0edb      	lsrs	r3, r3, #27
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8004d7c:	2311      	movs	r3, #17
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e001      	b.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8004d82:	2307      	movs	r3, #7
 8004d84:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	61fb      	str	r3, [r7, #28]
      break;
 8004d90:	f000 bc8f 	b.w	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004d94:	4b1f      	ldr	r3, [pc, #124]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004da6:	d016      	beq.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004dae:	f200 809b 	bhi.w	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db8:	d032      	beq.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc0:	f200 8092 	bhi.w	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 8084 	beq.w	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd2:	d052      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8004dd4:	e088      	b.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	f040 8084 	bne.w	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	e005      	b.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	4a03      	ldr	r2, [pc, #12]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0e:	61fb      	str	r3, [r7, #28]
          break;
 8004e10:	e06c      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	0800f490 	.word	0x0800f490
 8004e1c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004e20:	4ba5      	ldr	r3, [pc, #660]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e2c:	d160      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004e2e:	4ba2      	ldr	r3, [pc, #648]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3a:	d159      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004e3c:	4b9e      	ldr	r3, [pc, #632]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e46:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	fb03 f202 	mul.w	r2, r3, r2
 8004e50:	4b99      	ldr	r3, [pc, #612]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004e62:	4b95      	ldr	r3, [pc, #596]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	0d5b      	lsrs	r3, r3, #21
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	61fb      	str	r3, [r7, #28]
          break;
 8004e78:	e03a      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004e7a:	4b8f      	ldr	r3, [pc, #572]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e86:	d135      	bne.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004e88:	4b8b      	ldr	r3, [pc, #556]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e94:	d12e      	bne.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e96:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	fb03 f202 	mul.w	r2, r3, r2
 8004eaa:	4b83      	ldr	r3, [pc, #524]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004ebc:	4b7e      	ldr	r3, [pc, #504]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	0d5b      	lsrs	r3, r3, #21
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	61fb      	str	r3, [r7, #28]
          break;
 8004ed2:	e00f      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004ed4:	4b78      	ldr	r3, [pc, #480]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004ee4:	61fb      	str	r3, [r7, #28]
          break;
 8004ee6:	e007      	b.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004ee8:	bf00      	nop
 8004eea:	e3e2      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004eec:	bf00      	nop
 8004eee:	e3e0      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004ef0:	bf00      	nop
 8004ef2:	e3de      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004ef4:	bf00      	nop
 8004ef6:	e3dc      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004ef8:	bf00      	nop
      break;
 8004efa:	e3da      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004efc:	4b6e      	ldr	r3, [pc, #440]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d827      	bhi.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f25 	.word	0x08004f25
 8004f18:	08004f2d 	.word	0x08004f2d
 8004f1c:	08004f35 	.word	0x08004f35
 8004f20:	08004f49 	.word	0x08004f49
          frequency = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7ff f87c 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8004f28:	61f8      	str	r0, [r7, #28]
          break;
 8004f2a:	e01d      	b.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f2c:	f7fe ffca 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8004f30:	61f8      	str	r0, [r7, #28]
          break;
 8004f32:	e019      	b.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f34:	4b60      	ldr	r3, [pc, #384]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f40:	d10f      	bne.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8004f42:	4b5f      	ldr	r3, [pc, #380]	; (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f44:	61fb      	str	r3, [r7, #28]
          break;
 8004f46:	e00c      	b.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f48:	4b5b      	ldr	r3, [pc, #364]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d107      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8004f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5a:	61fb      	str	r3, [r7, #28]
          break;
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004f5e:	bf00      	nop
 8004f60:	e3a8      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f62:	bf00      	nop
 8004f64:	e3a6      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f66:	bf00      	nop
        break;
 8004f68:	e3a4      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004f6a:	4b53      	ldr	r3, [pc, #332]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b0c      	cmp	r3, #12
 8004f7a:	d83a      	bhi.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	08004ff3 	.word	0x08004ff3
 8004f8c:	08004ff3 	.word	0x08004ff3
 8004f90:	08004ff3 	.word	0x08004ff3
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	08004ff3 	.word	0x08004ff3
 8004f9c:	08004ff3 	.word	0x08004ff3
 8004fa0:	08004ff3 	.word	0x08004ff3
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004ff3 	.word	0x08004ff3
 8004fac:	08004ff3 	.word	0x08004ff3
 8004fb0:	08004ff3 	.word	0x08004ff3
 8004fb4:	08004fdd 	.word	0x08004fdd
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fb8:	f7ff f81c 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004fbc:	61f8      	str	r0, [r7, #28]
          break;
 8004fbe:	e01d      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fc0:	f7fe ff80 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8004fc4:	61f8      	str	r0, [r7, #28]
          break;
 8004fc6:	e019      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8004fd6:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004fd8:	61fb      	str	r3, [r7, #28]
          break;
 8004fda:	e00c      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fdc:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d107      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	61fb      	str	r3, [r7, #28]
          break;
 8004ff0:	e003      	b.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004ff2:	bf00      	nop
 8004ff4:	e35e      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004ff6:	bf00      	nop
 8004ff8:	e35c      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004ffa:	bf00      	nop
        break;
 8004ffc:	e35a      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b30      	cmp	r3, #48	; 0x30
 800500e:	d021      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b30      	cmp	r3, #48	; 0x30
 8005014:	d829      	bhi.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b20      	cmp	r3, #32
 800501a:	d011      	beq.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b20      	cmp	r3, #32
 8005020:	d823      	bhi.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b10      	cmp	r3, #16
 800502c:	d004      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800502e:	e01c      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fe ffe0 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8005034:	61f8      	str	r0, [r7, #28]
          break;
 8005036:	e01d      	b.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005038:	f7fe ff44 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 800503c:	61f8      	str	r0, [r7, #28]
          break;
 800503e:	e019      	b.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005040:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d10f      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800504e:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005050:	61fb      	str	r3, [r7, #28]
          break;
 8005052:	e00c      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005054:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d107      	bne.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005066:	61fb      	str	r3, [r7, #28]
          break;
 8005068:	e003      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800506a:	bf00      	nop
 800506c:	e322      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800506e:	bf00      	nop
 8005070:	e320      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005072:	bf00      	nop
        break;
 8005074:	e31e      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2bc0      	cmp	r3, #192	; 0xc0
 8005086:	d027      	beq.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2bc0      	cmp	r3, #192	; 0xc0
 800508c:	d82f      	bhi.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b80      	cmp	r3, #128	; 0x80
 8005092:	d017      	beq.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d829      	bhi.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d004      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80050a6:	e022      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7fe ffa4 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 80050ac:	61f8      	str	r0, [r7, #28]
          break;
 80050ae:	e023      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80050b0:	f7fe ff08 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 80050b4:	61f8      	str	r0, [r7, #28]
          break;
 80050b6:	e01f      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80050b8:	40021000 	.word	0x40021000
 80050bc:	02dc6c00 	.word	0x02dc6c00
 80050c0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050c4:	4b9b      	ldr	r3, [pc, #620]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	d10f      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80050d2:	4b99      	ldr	r3, [pc, #612]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80050d4:	61fb      	str	r3, [r7, #28]
          break;
 80050d6:	e00c      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050d8:	4b96      	ldr	r3, [pc, #600]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d107      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ea:	61fb      	str	r3, [r7, #28]
          break;
 80050ec:	e003      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 80050ee:	bf00      	nop
 80050f0:	e2e0      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050f2:	bf00      	nop
 80050f4:	e2de      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050f6:	bf00      	nop
        break;
 80050f8:	e2dc      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80050fa:	4b8e      	ldr	r3, [pc, #568]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510c:	d025      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005114:	d82c      	bhi.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d013      	beq.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005124:	d824      	bhi.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005132:	d004      	beq.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005134:	e01c      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005136:	f7fe ff5d 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 800513a:	61f8      	str	r0, [r7, #28]
          break;
 800513c:	e01d      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800513e:	f7fe fec1 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8005142:	61f8      	str	r0, [r7, #28]
          break;
 8005144:	e019      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005146:	4b7b      	ldr	r3, [pc, #492]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	d10f      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005154:	4b78      	ldr	r3, [pc, #480]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005156:	61fb      	str	r3, [r7, #28]
          break;
 8005158:	e00c      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800515a:	4b76      	ldr	r3, [pc, #472]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b02      	cmp	r3, #2
 8005166:	d107      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516c:	61fb      	str	r3, [r7, #28]
          break;
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005170:	bf00      	nop
 8005172:	e29f      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005174:	bf00      	nop
 8005176:	e29d      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005178:	bf00      	nop
        break;
 800517a:	e29b      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800517c:	4b6d      	ldr	r3, [pc, #436]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800518e:	d025      	beq.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005196:	d82c      	bhi.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519e:	d013      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a6:	d824      	bhi.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b4:	d004      	beq.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80051b6:	e01c      	b.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051b8:	f7fe ff1c 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 80051bc:	61f8      	str	r0, [r7, #28]
          break;
 80051be:	e01d      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80051c0:	f7fe fe80 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 80051c4:	61f8      	str	r0, [r7, #28]
          break;
 80051c6:	e019      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051c8:	4b5a      	ldr	r3, [pc, #360]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d4:	d10f      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80051d6:	4b58      	ldr	r3, [pc, #352]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80051d8:	61fb      	str	r3, [r7, #28]
          break;
 80051da:	e00c      	b.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051dc:	4b55      	ldr	r3, [pc, #340]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d107      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	61fb      	str	r3, [r7, #28]
          break;
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80051f2:	bf00      	nop
 80051f4:	e25e      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051f6:	bf00      	nop
 80051f8:	e25c      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051fa:	bf00      	nop
        break;
 80051fc:	e25a      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80051fe:	4b4d      	ldr	r3, [pc, #308]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005210:	d007      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005218:	d12f      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800521a:	f7fe fe53 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 800521e:	61f8      	str	r0, [r7, #28]
          break;
 8005220:	e02e      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005222:	4b44      	ldr	r3, [pc, #272]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800522a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800522e:	d126      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005230:	4b40      	ldr	r3, [pc, #256]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800523c:	4b3d      	ldr	r3, [pc, #244]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005246:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	fb03 f202 	mul.w	r2, r3, r2
 8005250:	4b38      	ldr	r3, [pc, #224]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	3301      	adds	r3, #1
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005262:	4b34      	ldr	r3, [pc, #208]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	0e5b      	lsrs	r3, r3, #25
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	3301      	adds	r3, #1
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	61fb      	str	r3, [r7, #28]
          break;
 8005278:	e001      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800527a:	bf00      	nop
 800527c:	e21a      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800527e:	bf00      	nop
        break;
 8005280:	e218      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005282:	4b2c      	ldr	r3, [pc, #176]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fe fec4 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8005298:	61f8      	str	r0, [r7, #28]
        break;
 800529a:	e20b      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800529c:	f7fe fe12 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 80052a0:	61f8      	str	r0, [r7, #28]
        break;
 80052a2:	e207      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052aa:	f003 0318 	and.w	r3, r3, #24
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d010      	beq.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d834      	bhi.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d024      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80052c8:	e02d      	b.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052d0:	f000 fbe2 	bl	8005a98 <RCCEx_GetSAIxPeriphCLKFreq>
 80052d4:	61f8      	str	r0, [r7, #28]
          break;
 80052d6:	e02b      	b.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80052d8:	4b16      	ldr	r3, [pc, #88]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d122      	bne.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80052e4:	4b13      	ldr	r3, [pc, #76]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80052f0:	4b10      	ldr	r3, [pc, #64]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	e005      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	4a0c      	ldr	r2, [pc, #48]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800530a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530e:	61fb      	str	r3, [r7, #28]
          break;
 8005310:	e00b      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531e:	d106      	bne.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005322:	61fb      	str	r3, [r7, #28]
          break;
 8005324:	e003      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005326:	bf00      	nop
 8005328:	e1c4      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800532a:	bf00      	nop
 800532c:	e1c2      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800532e:	bf00      	nop
        break;
 8005330:	e1c0      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000
 8005338:	00f42400 	.word	0x00f42400
 800533c:	0800f490 	.word	0x0800f490
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005340:	4b96      	ldr	r3, [pc, #600]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005352:	d013      	beq.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535a:	d819      	bhi.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005368:	d004      	beq.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800536a:	e011      	b.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800536c:	f7fe fe42 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8005370:	61f8      	str	r0, [r7, #28]
          break;
 8005372:	e010      	b.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005374:	f7fe fda6 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8005378:	61f8      	str	r0, [r7, #28]
          break;
 800537a:	e00c      	b.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800537c:	4b87      	ldr	r3, [pc, #540]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005388:	d104      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800538a:	4b85      	ldr	r3, [pc, #532]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800538c:	61fb      	str	r3, [r7, #28]
          break;
 800538e:	e001      	b.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005390:	bf00      	nop
 8005392:	e18f      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005394:	bf00      	nop
        break;
 8005396:	e18d      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005398:	4b80      	ldr	r3, [pc, #512]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053aa:	d013      	beq.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b2:	d819      	bhi.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c0:	d004      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80053c2:	e011      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053c4:	f7fe fe16 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 80053c8:	61f8      	str	r0, [r7, #28]
          break;
 80053ca:	e010      	b.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80053cc:	f7fe fd7a 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 80053d0:	61f8      	str	r0, [r7, #28]
          break;
 80053d2:	e00c      	b.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053d4:	4b71      	ldr	r3, [pc, #452]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e0:	d104      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80053e2:	4b6f      	ldr	r3, [pc, #444]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80053e4:	61fb      	str	r3, [r7, #28]
          break;
 80053e6:	e001      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80053e8:	bf00      	nop
 80053ea:	e163      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053ec:	bf00      	nop
        break;
 80053ee:	e161      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80053f0:	4b6a      	ldr	r3, [pc, #424]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005402:	d013      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540a:	d819      	bhi.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d004      	beq.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800541a:	e011      	b.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fe fdea 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8005420:	61f8      	str	r0, [r7, #28]
          break;
 8005422:	e010      	b.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005424:	f7fe fd4e 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8005428:	61f8      	str	r0, [r7, #28]
          break;
 800542a:	e00c      	b.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800542c:	4b5b      	ldr	r3, [pc, #364]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005438:	d104      	bne.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800543a:	4b59      	ldr	r3, [pc, #356]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800543c:	61fb      	str	r3, [r7, #28]
          break;
 800543e:	e001      	b.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005440:	bf00      	nop
 8005442:	e137      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005444:	bf00      	nop
        break;
 8005446:	e135      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005448:	4b54      	ldr	r3, [pc, #336]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800544a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d011      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d818      	bhi.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d004      	beq.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800546c:	e011      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800546e:	f7fe fdc1 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8005472:	61f8      	str	r0, [r7, #28]
          break;
 8005474:	e010      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005476:	f7fe fd25 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 800547a:	61f8      	str	r0, [r7, #28]
          break;
 800547c:	e00c      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800547e:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d104      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800548c:	4b44      	ldr	r3, [pc, #272]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800548e:	61fb      	str	r3, [r7, #28]
          break;
 8005490:	e001      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005492:	bf00      	nop
 8005494:	e10e      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005496:	bf00      	nop
        break;
 8005498:	e10c      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800549a:	4b40      	ldr	r3, [pc, #256]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054ac:	d02c      	beq.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054b4:	d833      	bhi.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054bc:	d01a      	beq.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054c4:	d82b      	bhi.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054d2:	d004      	beq.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80054d4:	e023      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054d6:	f7fe fd8d 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 80054da:	61f8      	str	r0, [r7, #28]
          break;
 80054dc:	e026      	b.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80054de:	4b2f      	ldr	r3, [pc, #188]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80054e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d11a      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80054ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80054f0:	61fb      	str	r3, [r7, #28]
          break;
 80054f2:	e016      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054f4:	4b29      	ldr	r3, [pc, #164]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d111      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005502:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005504:	61fb      	str	r3, [r7, #28]
          break;
 8005506:	e00e      	b.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005508:	4b24      	ldr	r3, [pc, #144]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b02      	cmp	r3, #2
 8005514:	d109      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551a:	61fb      	str	r3, [r7, #28]
          break;
 800551c:	e005      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800551e:	bf00      	nop
 8005520:	e0c8      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005522:	bf00      	nop
 8005524:	e0c6      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005526:	bf00      	nop
 8005528:	e0c4      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800552a:	bf00      	nop
        break;
 800552c:	e0c2      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800552e:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005540:	d030      	beq.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005548:	d837      	bhi.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005550:	d01a      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005558:	d82f      	bhi.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005566:	d004      	beq.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005568:	e027      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800556a:	f7fe fd43 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 800556e:	61f8      	str	r0, [r7, #28]
          break;
 8005570:	e02a      	b.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b02      	cmp	r3, #2
 800557e:	d11e      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005580:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005584:	61fb      	str	r3, [r7, #28]
          break;
 8005586:	e01a      	b.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d115      	bne.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005596:	4b02      	ldr	r3, [pc, #8]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005598:	61fb      	str	r3, [r7, #28]
          break;
 800559a:	e012      	b.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800559c:	40021000 	.word	0x40021000
 80055a0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80055a4:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d109      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80055b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b6:	61fb      	str	r3, [r7, #28]
          break;
 80055b8:	e005      	b.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80055ba:	bf00      	nop
 80055bc:	e07a      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055be:	bf00      	nop
 80055c0:	e078      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055c2:	bf00      	nop
 80055c4:	e076      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055c6:	bf00      	nop
        break;
 80055c8:	e074      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80055ca:	4b3d      	ldr	r3, [pc, #244]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80055cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055dc:	d02c      	beq.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e4:	d855      	bhi.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f2:	d004      	beq.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80055f4:	e04d      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80055f6:	f7fe fc65 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 80055fa:	61f8      	str	r0, [r7, #28]
          break;
 80055fc:	e04e      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055fe:	4b30      	ldr	r3, [pc, #192]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d145      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800560a:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005616:	4b2a      	ldr	r3, [pc, #168]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	e005      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005622:	4b27      	ldr	r3, [pc, #156]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005634:	61fb      	str	r3, [r7, #28]
          break;
 8005636:	e02e      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005638:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005644:	d129      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005646:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	d122      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005654:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	0a1b      	lsrs	r3, r3, #8
 800565a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	fb03 f202 	mul.w	r2, r3, r2
 8005668:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	3301      	adds	r3, #1
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	0d5b      	lsrs	r3, r3, #21
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	3301      	adds	r3, #1
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	61fb      	str	r3, [r7, #28]
          break;
 8005690:	e003      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8005692:	bf00      	nop
 8005694:	e00e      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005696:	bf00      	nop
 8005698:	e00c      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800569a:	bf00      	nop
        break;
 800569c:	e00a      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800569e:	bf00      	nop
 80056a0:	e008      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056a2:	bf00      	nop
 80056a4:	e006      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056a6:	bf00      	nop
 80056a8:	e004      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056aa:	bf00      	nop
 80056ac:	e002      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056ae:	bf00      	nop
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056b2:	bf00      	nop
    }
  }

  return(frequency);
 80056b4:	69fb      	ldr	r3, [r7, #28]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40021000 	.word	0x40021000
 80056c4:	0800f490 	.word	0x0800f490

080056c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056d6:	4b72      	ldr	r3, [pc, #456]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00e      	beq.n	8005700 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056e2:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0203 	and.w	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d103      	bne.n	80056fa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
       ||
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d142      	bne.n	8005780 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
 80056fe:	e03f      	b.n	8005780 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b03      	cmp	r3, #3
 8005706:	d018      	beq.n	800573a <RCCEx_PLLSAI1_Config+0x72>
 8005708:	2b03      	cmp	r3, #3
 800570a:	d825      	bhi.n	8005758 <RCCEx_PLLSAI1_Config+0x90>
 800570c:	2b01      	cmp	r3, #1
 800570e:	d002      	beq.n	8005716 <RCCEx_PLLSAI1_Config+0x4e>
 8005710:	2b02      	cmp	r3, #2
 8005712:	d009      	beq.n	8005728 <RCCEx_PLLSAI1_Config+0x60>
 8005714:	e020      	b.n	8005758 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005716:	4b62      	ldr	r3, [pc, #392]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d11d      	bne.n	800575e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005726:	e01a      	b.n	800575e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005728:	4b5d      	ldr	r3, [pc, #372]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005730:	2b00      	cmp	r3, #0
 8005732:	d116      	bne.n	8005762 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005738:	e013      	b.n	8005762 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800573a:	4b59      	ldr	r3, [pc, #356]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10f      	bne.n	8005766 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005746:	4b56      	ldr	r3, [pc, #344]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005756:	e006      	b.n	8005766 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
      break;
 800575c:	e004      	b.n	8005768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800575e:	bf00      	nop
 8005760:	e002      	b.n	8005768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005766:	bf00      	nop
    }

    if(status == HAL_OK)
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800576e:	4b4c      	ldr	r3, [pc, #304]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f023 0203 	bic.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4949      	ldr	r1, [pc, #292]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800577c:	4313      	orrs	r3, r2
 800577e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 8086 	bne.w	8005894 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005788:	4b45      	ldr	r3, [pc, #276]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a44      	ldr	r2, [pc, #272]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800578e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005794:	f7fb feb0 	bl	80014f8 <HAL_GetTick>
 8005798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800579a:	e009      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800579c:	f7fb feac 	bl	80014f8 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d902      	bls.n	80057b0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	73fb      	strb	r3, [r7, #15]
        break;
 80057ae:	e005      	b.n	80057bc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057b0:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ef      	bne.n	800579c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d168      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d113      	bne.n	80057f0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057c8:	4b35      	ldr	r3, [pc, #212]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6892      	ldr	r2, [r2, #8]
 80057d4:	0211      	lsls	r1, r2, #8
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68d2      	ldr	r2, [r2, #12]
 80057da:	06d2      	lsls	r2, r2, #27
 80057dc:	4311      	orrs	r1, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6852      	ldr	r2, [r2, #4]
 80057e2:	3a01      	subs	r2, #1
 80057e4:	0112      	lsls	r2, r2, #4
 80057e6:	430a      	orrs	r2, r1
 80057e8:	492d      	ldr	r1, [pc, #180]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	610b      	str	r3, [r1, #16]
 80057ee:	e02d      	b.n	800584c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d115      	bne.n	8005822 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057f6:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6892      	ldr	r2, [r2, #8]
 8005802:	0211      	lsls	r1, r2, #8
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6912      	ldr	r2, [r2, #16]
 8005808:	0852      	lsrs	r2, r2, #1
 800580a:	3a01      	subs	r2, #1
 800580c:	0552      	lsls	r2, r2, #21
 800580e:	4311      	orrs	r1, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6852      	ldr	r2, [r2, #4]
 8005814:	3a01      	subs	r2, #1
 8005816:	0112      	lsls	r2, r2, #4
 8005818:	430a      	orrs	r2, r1
 800581a:	4921      	ldr	r1, [pc, #132]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]
 8005820:	e014      	b.n	800584c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005822:	4b1f      	ldr	r3, [pc, #124]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	4b21      	ldr	r3, [pc, #132]	; (80058ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005828:	4013      	ands	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6892      	ldr	r2, [r2, #8]
 800582e:	0211      	lsls	r1, r2, #8
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6952      	ldr	r2, [r2, #20]
 8005834:	0852      	lsrs	r2, r2, #1
 8005836:	3a01      	subs	r2, #1
 8005838:	0652      	lsls	r2, r2, #25
 800583a:	4311      	orrs	r1, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6852      	ldr	r2, [r2, #4]
 8005840:	3a01      	subs	r2, #1
 8005842:	0112      	lsls	r2, r2, #4
 8005844:	430a      	orrs	r2, r1
 8005846:	4916      	ldr	r1, [pc, #88]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005848:	4313      	orrs	r3, r2
 800584a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800584c:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fb fe4e 	bl	80014f8 <HAL_GetTick>
 800585c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800585e:	e009      	b.n	8005874 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005860:	f7fb fe4a 	bl	80014f8 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d902      	bls.n	8005874 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	73fb      	strb	r3, [r7, #15]
          break;
 8005872:	e005      	b.n	8005880 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0ef      	beq.n	8005860 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	4904      	ldr	r1, [pc, #16]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005890:	4313      	orrs	r3, r2
 8005892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40021000 	.word	0x40021000
 80058a4:	07ff800f 	.word	0x07ff800f
 80058a8:	ff9f800f 	.word	0xff9f800f
 80058ac:	f9ff800f 	.word	0xf9ff800f

080058b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058be:	4b72      	ldr	r3, [pc, #456]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00e      	beq.n	80058e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058ca:	4b6f      	ldr	r3, [pc, #444]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 0203 	and.w	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d103      	bne.n	80058e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
       ||
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d142      	bne.n	8005968 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e03f      	b.n	8005968 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d018      	beq.n	8005922 <RCCEx_PLLSAI2_Config+0x72>
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d825      	bhi.n	8005940 <RCCEx_PLLSAI2_Config+0x90>
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d002      	beq.n	80058fe <RCCEx_PLLSAI2_Config+0x4e>
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d009      	beq.n	8005910 <RCCEx_PLLSAI2_Config+0x60>
 80058fc:	e020      	b.n	8005940 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058fe:	4b62      	ldr	r3, [pc, #392]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d11d      	bne.n	8005946 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800590e:	e01a      	b.n	8005946 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005910:	4b5d      	ldr	r3, [pc, #372]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d116      	bne.n	800594a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005920:	e013      	b.n	800594a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005922:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800592e:	4b56      	ldr	r3, [pc, #344]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800593e:	e006      	b.n	800594e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      break;
 8005944:	e004      	b.n	8005950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005946:	bf00      	nop
 8005948:	e002      	b.n	8005950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800594e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d108      	bne.n	8005968 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005956:	4b4c      	ldr	r3, [pc, #304]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f023 0203 	bic.w	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4949      	ldr	r1, [pc, #292]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005964:	4313      	orrs	r3, r2
 8005966:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 8086 	bne.w	8005a7c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005970:	4b45      	ldr	r3, [pc, #276]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a44      	ldr	r2, [pc, #272]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597c:	f7fb fdbc 	bl	80014f8 <HAL_GetTick>
 8005980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005982:	e009      	b.n	8005998 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005984:	f7fb fdb8 	bl	80014f8 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d902      	bls.n	8005998 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	73fb      	strb	r3, [r7, #15]
        break;
 8005996:	e005      	b.n	80059a4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005998:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ef      	bne.n	8005984 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d168      	bne.n	8005a7c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d113      	bne.n	80059d8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059b0:	4b35      	ldr	r3, [pc, #212]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	4b35      	ldr	r3, [pc, #212]	; (8005a8c <RCCEx_PLLSAI2_Config+0x1dc>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6892      	ldr	r2, [r2, #8]
 80059bc:	0211      	lsls	r1, r2, #8
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	06d2      	lsls	r2, r2, #27
 80059c4:	4311      	orrs	r1, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6852      	ldr	r2, [r2, #4]
 80059ca:	3a01      	subs	r2, #1
 80059cc:	0112      	lsls	r2, r2, #4
 80059ce:	430a      	orrs	r2, r1
 80059d0:	492d      	ldr	r1, [pc, #180]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	614b      	str	r3, [r1, #20]
 80059d6:	e02d      	b.n	8005a34 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d115      	bne.n	8005a0a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059de:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1e0>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6892      	ldr	r2, [r2, #8]
 80059ea:	0211      	lsls	r1, r2, #8
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6912      	ldr	r2, [r2, #16]
 80059f0:	0852      	lsrs	r2, r2, #1
 80059f2:	3a01      	subs	r2, #1
 80059f4:	0552      	lsls	r2, r2, #21
 80059f6:	4311      	orrs	r1, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6852      	ldr	r2, [r2, #4]
 80059fc:	3a01      	subs	r2, #1
 80059fe:	0112      	lsls	r2, r2, #4
 8005a00:	430a      	orrs	r2, r1
 8005a02:	4921      	ldr	r1, [pc, #132]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	614b      	str	r3, [r1, #20]
 8005a08:	e014      	b.n	8005a34 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a0a:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6892      	ldr	r2, [r2, #8]
 8005a16:	0211      	lsls	r1, r2, #8
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6952      	ldr	r2, [r2, #20]
 8005a1c:	0852      	lsrs	r2, r2, #1
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	0652      	lsls	r2, r2, #25
 8005a22:	4311      	orrs	r1, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6852      	ldr	r2, [r2, #4]
 8005a28:	3a01      	subs	r2, #1
 8005a2a:	0112      	lsls	r2, r2, #4
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	4916      	ldr	r1, [pc, #88]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a34:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a40:	f7fb fd5a 	bl	80014f8 <HAL_GetTick>
 8005a44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a46:	e009      	b.n	8005a5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a48:	f7fb fd56 	bl	80014f8 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d902      	bls.n	8005a5c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	73fb      	strb	r3, [r7, #15]
          break;
 8005a5a:	e005      	b.n	8005a68 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0ef      	beq.n	8005a48 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	4904      	ldr	r1, [pc, #16]	; (8005a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	07ff800f 	.word	0x07ff800f
 8005a90:	ff9f800f 	.word	0xff9f800f
 8005a94:	f9ff800f 	.word	0xf9ff800f

08005a98 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b089      	sub	sp, #36	; 0x24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab4:	d10b      	bne.n	8005ace <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005ab6:	4b7e      	ldr	r3, [pc, #504]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005abc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005ac0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d112      	bne.n	8005aee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005ac8:	4b7a      	ldr	r3, [pc, #488]	; (8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	e00f      	b.n	8005aee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad4:	d10b      	bne.n	8005aee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005ad6:	4b76      	ldr	r3, [pc, #472]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ae0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ae8:	d101      	bne.n	8005aee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005aea:	4b72      	ldr	r3, [pc, #456]	; (8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005aec:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 80d6 	bne.w	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d003      	beq.n	8005b08 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b06:	d13b      	bne.n	8005b80 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005b08:	4b69      	ldr	r3, [pc, #420]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b14:	f040 80c4 	bne.w	8005ca0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005b18:	4b65      	ldr	r3, [pc, #404]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80bd 	beq.w	8005ca0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b26:	4b62      	ldr	r3, [pc, #392]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	3301      	adds	r3, #1
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b3a:	4b5d      	ldr	r3, [pc, #372]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b44:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005b46:	4b5a      	ldr	r3, [pc, #360]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	0edb      	lsrs	r3, r3, #27
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005b58:	4b55      	ldr	r3, [pc, #340]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005b64:	2311      	movs	r3, #17
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e001      	b.n	8005b6e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005b6a:	2307      	movs	r3, #7
 8005b6c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	fb03 f202 	mul.w	r2, r3, r2
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005b7e:	e08f      	b.n	8005ca0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d13a      	bne.n	8005bfc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005b86:	4b4a      	ldr	r3, [pc, #296]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b92:	f040 8086 	bne.w	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005b96:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d07f      	beq.n	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ba2:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	3301      	adds	r3, #1
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005bb6:	4b3e      	ldr	r3, [pc, #248]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005bc2:	4b3b      	ldr	r3, [pc, #236]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	0edb      	lsrs	r3, r3, #27
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005bd4:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005be0:	2311      	movs	r3, #17
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e001      	b.n	8005bea <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005be6:	2307      	movs	r3, #7
 8005be8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	fb03 f202 	mul.w	r2, r3, r2
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e052      	b.n	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b80      	cmp	r3, #128	; 0x80
 8005c00:	d003      	beq.n	8005c0a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c08:	d109      	bne.n	8005c1e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c0a:	4b29      	ldr	r3, [pc, #164]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c16:	d144      	bne.n	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005c18:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005c1a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c1c:	e041      	b.n	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d003      	beq.n	8005c2c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2a:	d13a      	bne.n	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005c2c:	4b20      	ldr	r3, [pc, #128]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c38:	d133      	bne.n	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005c3a:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d02d      	beq.n	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	091b      	lsrs	r3, r3, #4
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	3301      	adds	r3, #1
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	0edb      	lsrs	r3, r3, #27
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005c78:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005c84:	2311      	movs	r3, #17
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e001      	b.n	8005c8e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005c8a:	2307      	movs	r3, #7
 8005c8c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	fb03 f202 	mul.w	r2, r3, r2
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e000      	b.n	8005ca2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005ca0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3724      	adds	r7, #36	; 0x24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	001fff68 	.word	0x001fff68
 8005cb8:	00f42400 	.word	0x00f42400

08005cbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e078      	b.n	8005dc0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fb f93f 	bl	8000f64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2203      	movs	r2, #3
 8005cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f86a 	bl	8005dc8 <HAL_SD_InitCard>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e060      	b.n	8005dc0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fdcd 	bl	80068a4 <HAL_SD_GetCardStatus>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e055      	b.n	8005dc0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005d14:	7e3b      	ldrb	r3, [r7, #24]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005d1a:	7e7b      	ldrb	r3, [r7, #25]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10a      	bne.n	8005d3e <HAL_SD_Init+0x82>
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <HAL_SD_Init+0x78>
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d3c:	e00b      	b.n	8005d56 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d104      	bne.n	8005d50 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d4e:	e002      	b.n	8005d56 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fe83 	bl	8006a68 <HAL_SD_ConfigWideBusOperation>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e029      	b.n	8005dc0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005d6c:	f7fb fbc4 	bl	80014f8 <HAL_GetTick>
 8005d70:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005d72:	e014      	b.n	8005d9e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005d74:	f7fb fbc0 	bl	80014f8 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d82:	d10c      	bne.n	8005d9e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e010      	b.n	8005dc0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 ff76 	bl	8006c90 <HAL_SD_GetCardState>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d1e4      	bne.n	8005d74 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3728      	adds	r7, #40	; 0x28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b08e      	sub	sp, #56	; 0x38
 8005dcc:	af04      	add	r7, sp, #16
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005de0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005de4:	f7fe fd4e 	bl	8004884 <HAL_RCCEx_GetPeriphCLKFreq>
 8005de8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e079      	b.n	8005ef8 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	4a3d      	ldr	r2, [pc, #244]	; (8005f00 <HAL_SD_InitCard+0x138>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d107      	bne.n	8005e30 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0210 	orr.w	r2, r2, #16
 8005e2e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681d      	ldr	r5, [r3, #0]
 8005e34:	466c      	mov	r4, sp
 8005e36:	f107 0314 	add.w	r3, r7, #20
 8005e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f003 fcab 	bl	80097a4 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f003 fcee 	bl	8009834 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005e64:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <HAL_SD_InitCard+0x13c>)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fb fb4e 	bl	8001510 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 ffeb 	bl	8006e50 <SD_PowerON>
 8005e7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e02e      	b.n	8005ef8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 ff18 	bl	8006cd0 <SD_InitCard>
 8005ea0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e01b      	b.n	8005ef8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f003 fd49 	bl	8009960 <SDMMC_CmdBlockLength>
 8005ece:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00f      	beq.n	8005ef6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <HAL_SD_InitCard+0x140>)
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3728      	adds	r7, #40	; 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bdb0      	pop	{r4, r5, r7, pc}
 8005f00:	014f8b59 	.word	0x014f8b59
 8005f04:	00012110 	.word	0x00012110
 8005f08:	1fe00fff 	.word	0x1fe00fff

08005f0c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b092      	sub	sp, #72	; 0x48
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f1a:	f7fb faed 	bl	80014f8 <HAL_GetTick>
 8005f1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e170      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	f040 8163 	bne.w	8006212 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d907      	bls.n	8005f70 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e157      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2203      	movs	r2, #3
 8005f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d002      	beq.n	8005f8e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	025b      	lsls	r3, r3, #9
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f92:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	025b      	lsls	r3, r3, #9
 8005f98:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005f9a:	2390      	movs	r3, #144	; 0x90
 8005f9c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f107 0214 	add.w	r2, r7, #20
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f003 fca7 	bl	8009908 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d90a      	bls.n	8005fe6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f003 fd05 	bl	80099ec <SDMMC_CmdReadMultiBlock>
 8005fe2:	6478      	str	r0, [r7, #68]	; 0x44
 8005fe4:	e009      	b.n	8005ffa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f003 fcd7 	bl	80099a6 <SDMMC_CmdReadSingleBlock>
 8005ff8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a88      	ldr	r2, [pc, #544]	; (8006228 <HAL_SD_ReadBlocks+0x31c>)
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600e:	431a      	orrs	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e0fc      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800602a:	e061      	b.n	80060f0 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d03c      	beq.n	80060b4 <HAL_SD_ReadBlocks+0x1a8>
 800603a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d039      	beq.n	80060b4 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006040:	2300      	movs	r3, #0
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
 8006044:	e033      	b.n	80060ae <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f003 fbd4 	bl	80097f8 <SDMMC_ReadFIFO>
 8006050:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	b2da      	uxtb	r2, r3
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	3301      	adds	r3, #1
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	3b01      	subs	r3, #1
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	b2da      	uxtb	r2, r3
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	3301      	adds	r3, #1
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006078:	3b01      	subs	r3, #1
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	b2da      	uxtb	r2, r3
 8006082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006084:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	3301      	adds	r3, #1
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	3b01      	subs	r3, #1
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	0e1b      	lsrs	r3, r3, #24
 8006096:	b2da      	uxtb	r2, r3
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800609c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609e:	3301      	adds	r3, #1
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80060a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a4:	3b01      	subs	r3, #1
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80060a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060aa:	3301      	adds	r3, #1
 80060ac:	643b      	str	r3, [r7, #64]	; 0x40
 80060ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b0:	2b07      	cmp	r3, #7
 80060b2:	d9c8      	bls.n	8006046 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80060b4:	f7fb fa20 	bl	80014f8 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d902      	bls.n	80060ca <HAL_SD_ReadBlocks+0x1be>
 80060c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d112      	bne.n	80060f0 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a56      	ldr	r2, [pc, #344]	; (8006228 <HAL_SD_ReadBlocks+0x31c>)
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e097      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d096      	beq.n	800602c <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800610c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d022      	beq.n	8006162 <HAL_SD_ReadBlocks+0x256>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d91f      	bls.n	8006162 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	2b03      	cmp	r3, #3
 8006128:	d01b      	beq.n	8006162 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f003 fcc6 	bl	8009ac0 <SDMMC_CmdStopTransfer>
 8006134:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006138:	2b00      	cmp	r3, #0
 800613a:	d012      	beq.n	8006162 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a39      	ldr	r2, [pc, #228]	; (8006228 <HAL_SD_ReadBlocks+0x31c>)
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614a:	431a      	orrs	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e05e      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d012      	beq.n	8006196 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2c      	ldr	r2, [pc, #176]	; (8006228 <HAL_SD_ReadBlocks+0x31c>)
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	f043 0208 	orr.w	r2, r3, #8
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e044      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d012      	beq.n	80061ca <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1f      	ldr	r2, [pc, #124]	; (8006228 <HAL_SD_ReadBlocks+0x31c>)
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	f043 0202 	orr.w	r2, r3, #2
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e02a      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d012      	beq.n	80061fe <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a12      	ldr	r2, [pc, #72]	; (8006228 <HAL_SD_ReadBlocks+0x31c>)
 80061de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	f043 0220 	orr.w	r2, r3, #32
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e010      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a0a      	ldr	r2, [pc, #40]	; (800622c <HAL_SD_ReadBlocks+0x320>)
 8006204:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e006      	b.n	8006220 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3748      	adds	r7, #72	; 0x48
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	1fe00fff 	.word	0x1fe00fff
 800622c:	18000f3a 	.word	0x18000f3a

08006230 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b092      	sub	sp, #72	; 0x48
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800623e:	f7fb f95b 	bl	80014f8 <HAL_GetTick>
 8006242:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e174      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b01      	cmp	r3, #1
 800626c:	f040 8167 	bne.w	800653e <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	441a      	add	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006280:	429a      	cmp	r2, r3
 8006282:	d907      	bls.n	8006294 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e15b      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2203      	movs	r2, #3
 8006298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2200      	movs	r2, #0
 80062a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d002      	beq.n	80062b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	025b      	lsls	r3, r3, #9
 80062b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	025b      	lsls	r3, r3, #9
 80062bc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80062be:	2390      	movs	r3, #144	; 0x90
 80062c0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f107 0218 	add.w	r2, r7, #24
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f003 fb15 	bl	8009908 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ec:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d90a      	bls.n	800630a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006300:	4618      	mov	r0, r3
 8006302:	f003 fbb9 	bl	8009a78 <SDMMC_CmdWriteMultiBlock>
 8006306:	6478      	str	r0, [r7, #68]	; 0x44
 8006308:	e009      	b.n	800631e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2210      	movs	r2, #16
 800630e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006316:	4618      	mov	r0, r3
 8006318:	f003 fb8b 	bl	8009a32 <SDMMC_CmdWriteSingleBlock>
 800631c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800631e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006320:	2b00      	cmp	r3, #0
 8006322:	d012      	beq.n	800634a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a8a      	ldr	r2, [pc, #552]	; (8006554 <HAL_SD_WriteBlocks+0x324>)
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006332:	431a      	orrs	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e100      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800634e:	e065      	b.n	800641c <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d040      	beq.n	80063e0 <HAL_SD_WriteBlocks+0x1b0>
 800635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d03d      	beq.n	80063e0 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006364:	2300      	movs	r3, #0
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
 8006368:	e037      	b.n	80063da <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006372:	3301      	adds	r3, #1
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006378:	3b01      	subs	r3, #1
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	021a      	lsls	r2, r3, #8
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638a:	3301      	adds	r3, #1
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006390:	3b01      	subs	r3, #1
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	041a      	lsls	r2, r3, #16
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80063a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a2:	3301      	adds	r3, #1
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	3b01      	subs	r3, #1
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80063ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	061a      	lsls	r2, r3, #24
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	3301      	adds	r3, #1
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80063be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c0:	3b01      	subs	r3, #1
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f107 0214 	add.w	r2, r7, #20
 80063cc:	4611      	mov	r1, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f003 fa1f 	bl	8009812 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80063d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d6:	3301      	adds	r3, #1
 80063d8:	643b      	str	r3, [r7, #64]	; 0x40
 80063da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063dc:	2b07      	cmp	r3, #7
 80063de:	d9c4      	bls.n	800636a <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80063e0:	f7fb f88a 	bl	80014f8 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d902      	bls.n	80063f6 <HAL_SD_WriteBlocks+0x1c6>
 80063f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d112      	bne.n	800641c <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a56      	ldr	r2, [pc, #344]	; (8006554 <HAL_SD_WriteBlocks+0x324>)
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006404:	431a      	orrs	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e097      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006426:	2b00      	cmp	r3, #0
 8006428:	d092      	beq.n	8006350 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006438:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d022      	beq.n	800648e <HAL_SD_WriteBlocks+0x25e>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d91f      	bls.n	800648e <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	2b03      	cmp	r3, #3
 8006454:	d01b      	beq.n	800648e <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f003 fb30 	bl	8009ac0 <SDMMC_CmdStopTransfer>
 8006460:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006464:	2b00      	cmp	r3, #0
 8006466:	d012      	beq.n	800648e <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a39      	ldr	r2, [pc, #228]	; (8006554 <HAL_SD_WriteBlocks+0x324>)
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006476:	431a      	orrs	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e05e      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a2c      	ldr	r2, [pc, #176]	; (8006554 <HAL_SD_WriteBlocks+0x324>)
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	f043 0208 	orr.w	r2, r3, #8
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e044      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d012      	beq.n	80064f6 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <HAL_SD_WriteBlocks+0x324>)
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	f043 0202 	orr.w	r2, r3, #2
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e02a      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b00      	cmp	r3, #0
 8006502:	d012      	beq.n	800652a <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a12      	ldr	r2, [pc, #72]	; (8006554 <HAL_SD_WriteBlocks+0x324>)
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	f043 0210 	orr.w	r2, r3, #16
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e010      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a0a      	ldr	r2, [pc, #40]	; (8006558 <HAL_SD_WriteBlocks+0x328>)
 8006530:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e006      	b.n	800654c <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
  }
}
 800654c:	4618      	mov	r0, r3
 800654e:	3748      	adds	r7, #72	; 0x48
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	1fe00fff 	.word	0x1fe00fff
 8006558:	18000f3a 	.word	0x18000f3a

0800655c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656a:	0f9b      	lsrs	r3, r3, #30
 800656c:	b2da      	uxtb	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006576:	0e9b      	lsrs	r3, r3, #26
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	b2da      	uxtb	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006588:	0e1b      	lsrs	r3, r3, #24
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	b2da      	uxtb	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800659a:	0c1b      	lsrs	r3, r3, #16
 800659c:	b2da      	uxtb	r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a6:	0a1b      	lsrs	r3, r3, #8
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065bc:	0d1b      	lsrs	r3, r3, #20
 80065be:	b29a      	uxth	r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065da:	0bdb      	lsrs	r3, r3, #15
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ec:	0b9b      	lsrs	r3, r3, #14
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fe:	0b5b      	lsrs	r3, r3, #13
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006610:	0b1b      	lsrs	r3, r3, #12
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	b2da      	uxtb	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2200      	movs	r2, #0
 8006622:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d163      	bne.n	80066f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006630:	009a      	lsls	r2, r3, #2
 8006632:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006636:	4013      	ands	r3, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800663c:	0f92      	lsrs	r2, r2, #30
 800663e:	431a      	orrs	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006648:	0edb      	lsrs	r3, r3, #27
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	b2da      	uxtb	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800665a:	0e1b      	lsrs	r3, r3, #24
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	b2da      	uxtb	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666c:	0d5b      	lsrs	r3, r3, #21
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	b2da      	uxtb	r2, r3
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800667e:	0c9b      	lsrs	r3, r3, #18
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	b2da      	uxtb	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006690:	0bdb      	lsrs	r3, r3, #15
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	b2da      	uxtb	r2, r3
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	7e1b      	ldrb	r3, [r3, #24]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	3302      	adds	r3, #2
 80066b4:	2201      	movs	r2, #1
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80066be:	fb03 f202 	mul.w	r2, r3, r2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	7a1b      	ldrb	r3, [r3, #8]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	2201      	movs	r2, #1
 80066d2:	409a      	lsls	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066e0:	0a52      	lsrs	r2, r2, #9
 80066e2:	fb03 f202 	mul.w	r2, r3, r2
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f0:	659a      	str	r2, [r3, #88]	; 0x58
 80066f2:	e031      	b.n	8006758 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d11d      	bne.n	8006738 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800670a:	0c1b      	lsrs	r3, r3, #16
 800670c:	431a      	orrs	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	3301      	adds	r3, #1
 8006718:	029a      	lsls	r2, r3, #10
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800672c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	659a      	str	r2, [r3, #88]	; 0x58
 8006736:	e00f      	b.n	8006758 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a58      	ldr	r2, [pc, #352]	; (80068a0 <HAL_SD_GetCardCSD+0x344>)
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e09d      	b.n	8006894 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800675c:	0b9b      	lsrs	r3, r3, #14
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	b2da      	uxtb	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800676e:	09db      	lsrs	r3, r3, #7
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006776:	b2da      	uxtb	r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006786:	b2da      	uxtb	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006790:	0fdb      	lsrs	r3, r3, #31
 8006792:	b2da      	uxtb	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679c:	0f5b      	lsrs	r3, r3, #29
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ae:	0e9b      	lsrs	r3, r3, #26
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c0:	0d9b      	lsrs	r3, r3, #22
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d2:	0d5b      	lsrs	r3, r3, #21
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ee:	0c1b      	lsrs	r3, r3, #16
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006802:	0bdb      	lsrs	r3, r3, #15
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006816:	0b9b      	lsrs	r3, r3, #14
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	b2da      	uxtb	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800682a:	0b5b      	lsrs	r3, r3, #13
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683e:	0b1b      	lsrs	r3, r3, #12
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006852:	0a9b      	lsrs	r3, r3, #10
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	b2da      	uxtb	r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	b2da      	uxtb	r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006882:	b2da      	uxtb	r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	1fe00fff 	.word	0x1fe00fff

080068a4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b094      	sub	sp, #80	; 0x50
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80068b4:	f107 0308 	add.w	r3, r7, #8
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fbd4 	bl	8007068 <SD_SendSDStatus>
 80068c0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80068c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d011      	beq.n	80068ec <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a4f      	ldr	r2, [pc, #316]	; (8006a0c <HAL_SD_GetCardStatus+0x168>)
 80068ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80068ea:	e070      	b.n	80069ce <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	099b      	lsrs	r3, r3, #6
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	b2da      	uxtb	r2, r3
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	0a1b      	lsrs	r3, r3, #8
 8006910:	b29b      	uxth	r3, r3
 8006912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006916:	b29a      	uxth	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	0e1b      	lsrs	r3, r3, #24
 800691c:	b29b      	uxth	r3, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	b29a      	uxth	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	061a      	lsls	r2, r3, #24
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006932:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800693c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	0e1b      	lsrs	r3, r3, #24
 8006942:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	b2da      	uxtb	r2, r3
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	0d1b      	lsrs	r3, r3, #20
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	b2da      	uxtb	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	b29b      	uxth	r3, r3
 8006970:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006974:	b29a      	uxth	r2, r3
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	b29b      	uxth	r3, r3
 800697a:	b2db      	uxtb	r3, r3
 800697c:	b29b      	uxth	r3, r3
 800697e:	4313      	orrs	r3, r2
 8006980:	b29a      	uxth	r2, r3
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	0a9b      	lsrs	r3, r3, #10
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006990:	b2da      	uxtb	r2, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	0a1b      	lsrs	r3, r3, #8
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f003 030f 	and.w	r3, r3, #15
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	0e1b      	lsrs	r3, r3, #24
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069d6:	4618      	mov	r0, r3
 80069d8:	f002 ffc2 	bl	8009960 <SDMMC_CmdBlockLength>
 80069dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80069de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00d      	beq.n	8006a00 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <HAL_SD_GetCardStatus+0x168>)
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006a00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3750      	adds	r7, #80	; 0x50
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	1fe00fff 	.word	0x1fe00fff

08006a10 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006a68:	b5b0      	push	{r4, r5, r7, lr}
 8006a6a:	b090      	sub	sp, #64	; 0x40
 8006a6c:	af04      	add	r7, sp, #16
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d02e      	beq.n	8006ae6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8e:	d106      	bne.n	8006a9e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a9c:	e029      	b.n	8006af2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aa4:	d10a      	bne.n	8006abc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fbd6 	bl	8007258 <SD_WideBus_Enable>
 8006aac:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
 8006aba:	e01a      	b.n	8006af2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fc13 	bl	80072ee <SD_WideBus_Disable>
 8006ac8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ad6:	e00c      	b.n	8006af2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8006ae4:	e005      	b.n	8006af2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a60      	ldr	r2, [pc, #384]	; (8006c80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b08:	e097      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006b0a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b0e:	f7fd feb9 	bl	8004884 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b12:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8086 	beq.w	8006c28 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695a      	ldr	r2, [r3, #20]
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	4952      	ldr	r1, [pc, #328]	; (8006c84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006b3a:	fba1 1303 	umull	r1, r3, r1, r3
 8006b3e:	0e1b      	lsrs	r3, r3, #24
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d303      	bcc.n	8006b4c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e05a      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d103      	bne.n	8006b5e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	e051      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b66:	d126      	bne.n	8006bb6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10e      	bne.n	8006b8e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	4a45      	ldr	r2, [pc, #276]	; (8006c88 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d906      	bls.n	8006b86 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	4a42      	ldr	r2, [pc, #264]	; (8006c84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	0e5b      	lsrs	r3, r3, #25
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	e03d      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	61fb      	str	r3, [r7, #28]
 8006b8c:	e039      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9a:	4a3b      	ldr	r2, [pc, #236]	; (8006c88 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d906      	bls.n	8006bae <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	4a38      	ldr	r2, [pc, #224]	; (8006c84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	0e5b      	lsrs	r3, r3, #25
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	e029      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e025      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10e      	bne.n	8006bdc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	4a32      	ldr	r2, [pc, #200]	; (8006c8c <HAL_SD_ConfigWideBusOperation+0x224>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d906      	bls.n	8006bd4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	4a2e      	ldr	r2, [pc, #184]	; (8006c84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	0e1b      	lsrs	r3, r3, #24
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	e016      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	e012      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	4a28      	ldr	r2, [pc, #160]	; (8006c8c <HAL_SD_ConfigWideBusOperation+0x224>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d906      	bls.n	8006bfc <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	4a24      	ldr	r2, [pc, #144]	; (8006c84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	0e1b      	lsrs	r3, r3, #24
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	e002      	b.n	8006c02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681d      	ldr	r5, [r3, #0]
 8006c0c:	466c      	mov	r4, sp
 8006c0e:	f107 0318 	add.w	r3, r7, #24
 8006c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c1a:	f107 030c 	add.w	r3, r7, #12
 8006c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c20:	4628      	mov	r0, r5
 8006c22:	f002 fdbf 	bl	80097a4 <SDMMC_Init>
 8006c26:	e008      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c42:	4618      	mov	r0, r3
 8006c44:	f002 fe8c 	bl	8009960 <SDMMC_CmdBlockLength>
 8006c48:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3730      	adds	r7, #48	; 0x30
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	1fe00fff 	.word	0x1fe00fff
 8006c84:	55e63b89 	.word	0x55e63b89
 8006c88:	02faf080 	.word	0x02faf080
 8006c8c:	017d7840 	.word	0x017d7840

08006c90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c9c:	f107 030c 	add.w	r3, r7, #12
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fab0 	bl	8007208 <SD_SendStatus>
 8006ca8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	0a5b      	lsrs	r3, r3, #9
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006cc6:	693b      	ldr	r3, [r7, #16]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006cd0:	b5b0      	push	{r4, r5, r7, lr}
 8006cd2:	b090      	sub	sp, #64	; 0x40
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f002 fdb9 	bl	8009858 <SDMMC_GetPowerState>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006cf0:	e0a9      	b.n	8006e46 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d02e      	beq.n	8006d58 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f002 fffe 	bl	8009d00 <SDMMC_CmdSendCID>
 8006d04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <SD_InitCard+0x40>
    {
      return errorstate;
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0e:	e09a      	b.n	8006e46 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 fde3 	bl	80098e2 <SDMMC_GetResponse>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2104      	movs	r1, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f002 fdda 	bl	80098e2 <SDMMC_GetResponse>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2108      	movs	r1, #8
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 fdd1 	bl	80098e2 <SDMMC_GetResponse>
 8006d40:	4602      	mov	r2, r0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	210c      	movs	r1, #12
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f002 fdc8 	bl	80098e2 <SDMMC_GetResponse>
 8006d52:	4602      	mov	r2, r0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d00d      	beq.n	8006d7c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f107 020e 	add.w	r2, r7, #14
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f003 f807 	bl	8009d7e <SDMMC_CmdSetRelAdd>
 8006d70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <SD_InitCard+0xac>
    {
      return errorstate;
 8006d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7a:	e064      	b.n	8006e46 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d036      	beq.n	8006df2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d84:	89fb      	ldrh	r3, [r7, #14]
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d94:	041b      	lsls	r3, r3, #16
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f002 ffd0 	bl	8009d3e <SDMMC_CmdSendCSD>
 8006d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <SD_InitCard+0xda>
    {
      return errorstate;
 8006da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da8:	e04d      	b.n	8006e46 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 fd96 	bl	80098e2 <SDMMC_GetResponse>
 8006db6:	4602      	mov	r2, r0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2104      	movs	r1, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f002 fd8d 	bl	80098e2 <SDMMC_GetResponse>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2108      	movs	r1, #8
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f002 fd84 	bl	80098e2 <SDMMC_GetResponse>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	210c      	movs	r1, #12
 8006de6:	4618      	mov	r0, r3
 8006de8:	f002 fd7b 	bl	80098e2 <SDMMC_GetResponse>
 8006dec:	4602      	mov	r2, r0
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2104      	movs	r1, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f002 fd72 	bl	80098e2 <SDMMC_GetResponse>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	0d1a      	lsrs	r2, r3, #20
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006e06:	f107 0310 	add.w	r3, r7, #16
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff fba5 	bl	800655c <HAL_SD_GetCardCSD>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e1c:	e013      	b.n	8006e46 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6819      	ldr	r1, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	041b      	lsls	r3, r3, #16
 8006e28:	2200      	movs	r2, #0
 8006e2a:	461c      	mov	r4, r3
 8006e2c:	4615      	mov	r5, r2
 8006e2e:	4622      	mov	r2, r4
 8006e30:	462b      	mov	r3, r5
 8006e32:	4608      	mov	r0, r1
 8006e34:	f002 fe7a 	bl	8009b2c <SDMMC_CmdSelDesel>
 8006e38:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <SD_InitCard+0x174>
  {
    return errorstate;
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e42:	e000      	b.n	8006e46 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3740      	adds	r7, #64	; 0x40
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	2300      	movs	r3, #0
 8006e62:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006e64:	f7fa fb48 	bl	80014f8 <HAL_GetTick>
 8006e68:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f002 fe80 	bl	8009b74 <SDMMC_CmdGoIdleState>
 8006e74:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <SD_PowerON+0x30>
  {
    return errorstate;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	e0ed      	b.n	800705c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f002 fe93 	bl	8009bb0 <SDMMC_CmdOperCond>
 8006e8a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00d      	beq.n	8006eae <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f002 fe69 	bl	8009b74 <SDMMC_CmdGoIdleState>
 8006ea2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d004      	beq.n	8006eb4 <SD_PowerON+0x64>
    {
      return errorstate;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	e0d6      	b.n	800705c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d137      	bne.n	8006f2c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f002 fe94 	bl	8009bf0 <SDMMC_CmdAppCommand>
 8006ec8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d02d      	beq.n	8006f2c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ed4:	e0c2      	b.n	800705c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f002 fe87 	bl	8009bf0 <SDMMC_CmdAppCommand>
 8006ee2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <SD_PowerON+0x9e>
    {
      return errorstate;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	e0b6      	b.n	800705c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	495c      	ldr	r1, [pc, #368]	; (8007064 <SD_PowerON+0x214>)
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f002 fe9e 	bl	8009c36 <SDMMC_CmdAppOperCommand>
 8006efa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f06:	e0a9      	b.n	800705c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f002 fce7 	bl	80098e2 <SDMMC_GetResponse>
 8006f14:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	0fdb      	lsrs	r3, r3, #31
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <SD_PowerON+0xd2>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <SD_PowerON+0xd4>
 8006f22:	2300      	movs	r3, #0
 8006f24:	61bb      	str	r3, [r7, #24]

    count++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d802      	bhi.n	8006f3c <SD_PowerON+0xec>
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0cc      	beq.n	8006ed6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d902      	bls.n	8006f4c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f4a:	e087      	b.n	800705c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d07e      	beq.n	8007054 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d17a      	bne.n	800705a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d075      	beq.n	800705a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f74:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0208 	orr.w	r2, r2, #8
 8006f84:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f002 ff5e 	bl	8009e4c <SDMMC_CmdVoltageSwitch>
 8006f90:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00c      	beq.n	8006fb2 <SD_PowerON+0x162>
        {
          return errorstate;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	e05f      	b.n	800705c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f9c:	f7fa faac 	bl	80014f8 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006faa:	d102      	bne.n	8006fb2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006fac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb0:	e054      	b.n	800705c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fc0:	d1ec      	bne.n	8006f9c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fda:	d002      	beq.n	8006fe2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006fdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fe0:	e03c      	b.n	800705c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	f000 fa9e 	bl	8007524 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0204 	orr.w	r2, r2, #4
 8006ff6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006ff8:	e00a      	b.n	8007010 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ffa:	f7fa fa7d 	bl	80014f8 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007008:	d102      	bne.n	8007010 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800700a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800700e:	e025      	b.n	800705c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701e:	d1ec      	bne.n	8006ffa <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007028:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007038:	d102      	bne.n	8007040 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800703a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800703e:	e00d      	b.n	800705c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2213      	movs	r2, #19
 8007046:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
 8007052:	e002      	b.n	800705a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	c1100000 	.word	0xc1100000

08007068 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08c      	sub	sp, #48	; 0x30
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007072:	f7fa fa41 	bl	80014f8 <HAL_GetTick>
 8007076:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f002 fc2d 	bl	80098e2 <SDMMC_GetResponse>
 8007088:	4603      	mov	r3, r0
 800708a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007092:	d102      	bne.n	800709a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007098:	e0b0      	b.n	80071fc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2140      	movs	r1, #64	; 0x40
 80070a0:	4618      	mov	r0, r3
 80070a2:	f002 fc5d 	bl	8009960 <SDMMC_CmdBlockLength>
 80070a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	e0a0      	b.n	80071fc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f002 fd92 	bl	8009bf0 <SDMMC_CmdAppCommand>
 80070cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	e08d      	b.n	80071fc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80070e6:	2340      	movs	r3, #64	; 0x40
 80070e8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80070ea:	2360      	movs	r3, #96	; 0x60
 80070ec:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070ee:	2302      	movs	r3, #2
 80070f0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070f6:	2301      	movs	r3, #1
 80070f8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f107 0208 	add.w	r2, r7, #8
 8007102:	4611      	mov	r1, r2
 8007104:	4618      	mov	r0, r3
 8007106:	f002 fbff 	bl	8009908 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f002 fe7a 	bl	8009e08 <SDMMC_CmdStatusRegister>
 8007114:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d02b      	beq.n	8007174 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	e069      	b.n	80071fc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d013      	beq.n	800715e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007136:	2300      	movs	r3, #0
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800713a:	e00d      	b.n	8007158 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f002 fb59 	bl	80097f8 <SDMMC_ReadFIFO>
 8007146:	4602      	mov	r2, r0
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	601a      	str	r2, [r3, #0]
        pData++;
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	3304      	adds	r3, #4
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	3301      	adds	r3, #1
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	2b07      	cmp	r3, #7
 800715c:	d9ee      	bls.n	800713c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800715e:	f7fa f9cb 	bl	80014f8 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800716c:	d102      	bne.n	8007174 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800716e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007172:	e043      	b.n	80071fc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0d2      	beq.n	8007128 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007190:	2308      	movs	r3, #8
 8007192:	e033      	b.n	80071fc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071a2:	2302      	movs	r3, #2
 80071a4:	e02a      	b.n	80071fc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d017      	beq.n	80071e4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80071b4:	2320      	movs	r3, #32
 80071b6:	e021      	b.n	80071fc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	f002 fb1b 	bl	80097f8 <SDMMC_ReadFIFO>
 80071c2:	4602      	mov	r2, r0
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	601a      	str	r2, [r3, #0]
    pData++;
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	3304      	adds	r3, #4
 80071cc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071ce:	f7fa f993 	bl	80014f8 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071dc:	d102      	bne.n	80071e4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071e2:	e00b      	b.n	80071fc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e2      	bne.n	80071b8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a03      	ldr	r2, [pc, #12]	; (8007204 <SD_SendSDStatus+0x19c>)
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3730      	adds	r7, #48	; 0x30
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	18000f3a 	.word	0x18000f3a

08007208 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800721c:	e018      	b.n	8007250 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	041b      	lsls	r3, r3, #16
 8007228:	4619      	mov	r1, r3
 800722a:	4610      	mov	r0, r2
 800722c:	f002 fdc9 	bl	8009dc2 <SDMMC_CmdSendStatus>
 8007230:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	e009      	b.n	8007250 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f002 fb4d 	bl	80098e2 <SDMMC_GetResponse>
 8007248:	4602      	mov	r2, r0
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	2300      	movs	r3, #0
 8007266:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f002 fb37 	bl	80098e2 <SDMMC_GetResponse>
 8007274:	4603      	mov	r3, r0
 8007276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800727e:	d102      	bne.n	8007286 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007284:	e02f      	b.n	80072e6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007286:	f107 030c 	add.w	r3, r7, #12
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f879 	bl	8007384 <SD_FindSCR>
 8007292:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	e023      	b.n	80072e6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01c      	beq.n	80072e2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b0:	041b      	lsls	r3, r3, #16
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f002 fc9b 	bl	8009bf0 <SDMMC_CmdAppCommand>
 80072ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	e00f      	b.n	80072e6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2102      	movs	r1, #2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f002 fcd2 	bl	8009c76 <SDMMC_CmdBusWidth>
 80072d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	e003      	b.n	80072e6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072de:	2300      	movs	r3, #0
 80072e0:	e001      	b.n	80072e6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2100      	movs	r1, #0
 8007304:	4618      	mov	r0, r3
 8007306:	f002 faec 	bl	80098e2 <SDMMC_GetResponse>
 800730a:	4603      	mov	r3, r0
 800730c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007310:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007314:	d102      	bne.n	800731c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800731a:	e02f      	b.n	800737c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800731c:	f107 030c 	add.w	r3, r7, #12
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f82e 	bl	8007384 <SD_FindSCR>
 8007328:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	e023      	b.n	800737c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01c      	beq.n	8007378 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f002 fc50 	bl	8009bf0 <SDMMC_CmdAppCommand>
 8007350:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	e00f      	b.n	800737c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2100      	movs	r1, #0
 8007362:	4618      	mov	r0, r3
 8007364:	f002 fc87 	bl	8009c76 <SDMMC_CmdBusWidth>
 8007368:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	e003      	b.n	800737c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007374:	2300      	movs	r3, #0
 8007376:	e001      	b.n	800737c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007378:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08e      	sub	sp, #56	; 0x38
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800738e:	f7fa f8b3 	bl	80014f8 <HAL_GetTick>
 8007392:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007398:	2300      	movs	r3, #0
 800739a:	60bb      	str	r3, [r7, #8]
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2108      	movs	r1, #8
 80073aa:	4618      	mov	r0, r3
 80073ac:	f002 fad8 	bl	8009960 <SDMMC_CmdBlockLength>
 80073b0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <SD_FindSCR+0x38>
  {
    return errorstate;
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	e0ad      	b.n	8007518 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c4:	041b      	lsls	r3, r3, #16
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f002 fc11 	bl	8009bf0 <SDMMC_CmdAppCommand>
 80073ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <SD_FindSCR+0x56>
  {
    return errorstate;
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	e09e      	b.n	8007518 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073de:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073e0:	2308      	movs	r3, #8
 80073e2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80073e4:	2330      	movs	r3, #48	; 0x30
 80073e6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073e8:	2302      	movs	r3, #2
 80073ea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80073f0:	2301      	movs	r3, #1
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f107 0210 	add.w	r2, r7, #16
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f002 fa82 	bl	8009908 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f002 fc57 	bl	8009cbc <SDMMC_CmdSendSCR>
 800740e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	d027      	beq.n	8007466 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	e07e      	b.n	8007518 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d113      	bne.n	8007450 <SD_FindSCR+0xcc>
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742a:	2b00      	cmp	r3, #0
 800742c:	d110      	bne.n	8007450 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f002 f9e0 	bl	80097f8 <SDMMC_ReadFIFO>
 8007438:	4603      	mov	r3, r0
 800743a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f002 f9d9 	bl	80097f8 <SDMMC_ReadFIFO>
 8007446:	4603      	mov	r3, r0
 8007448:	60fb      	str	r3, [r7, #12]
      index++;
 800744a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744c:	3301      	adds	r3, #1
 800744e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007450:	f7fa f852 	bl	80014f8 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800745e:	d102      	bne.n	8007466 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007464:	e058      	b.n	8007518 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800746c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0d1      	beq.n	800741a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2208      	movs	r2, #8
 800748a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800748c:	2308      	movs	r3, #8
 800748e:	e043      	b.n	8007518 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2202      	movs	r2, #2
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074a6:	2302      	movs	r3, #2
 80074a8:	e036      	b.n	8007518 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2220      	movs	r2, #32
 80074be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074c0:	2320      	movs	r3, #32
 80074c2:	e029      	b.n	8007518 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a15      	ldr	r2, [pc, #84]	; (8007520 <SD_FindSCR+0x19c>)
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	061a      	lsls	r2, r3, #24
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074d8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	0a1b      	lsrs	r3, r3, #8
 80074de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	0e1b      	lsrs	r3, r3, #24
 80074e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	601a      	str	r2, [r3, #0]
    scr++;
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	3304      	adds	r3, #4
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	061a      	lsls	r2, r3, #24
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007500:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	0a1b      	lsrs	r3, r3, #8
 8007506:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800750a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	0e1b      	lsrs	r3, r3, #24
 8007510:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3738      	adds	r7, #56	; 0x38
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	18000f3a 	.word	0x18000f3a

08007524 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e095      	b.n	8007678 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	d108      	bne.n	8007566 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800755c:	d009      	beq.n	8007572 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	61da      	str	r2, [r3, #28]
 8007564:	e005      	b.n	8007572 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7f9 fd6d 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075b2:	d902      	bls.n	80075ba <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e002      	b.n	80075c0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80075c8:	d007      	beq.n	80075da <HAL_SPI_Init+0xa0>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075d2:	d002      	beq.n	80075da <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761c:	ea42 0103 	orr.w	r1, r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	f003 0204 	and.w	r2, r3, #4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	f003 0310 	and.w	r3, r3, #16
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007656:	ea42 0103 	orr.w	r1, r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e049      	b.n	8007726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7f9 fd22 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f000 fa62 	bl	8007b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e049      	b.n	80077d4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d106      	bne.n	800775a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f841 	bl	80077dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3304      	adds	r3, #4
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f000 fa0b 	bl	8007b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b02      	cmp	r3, #2
 8007804:	d122      	bne.n	800784c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b02      	cmp	r3, #2
 8007812:	d11b      	bne.n	800784c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0202 	mvn.w	r2, #2
 800781c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f98a 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 8007838:	e005      	b.n	8007846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f97c 	bl	8007b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f98d 	bl	8007b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0304 	and.w	r3, r3, #4
 8007856:	2b04      	cmp	r3, #4
 8007858:	d122      	bne.n	80078a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b04      	cmp	r3, #4
 8007866:	d11b      	bne.n	80078a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0204 	mvn.w	r2, #4
 8007870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f960 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 800788c:	e005      	b.n	800789a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f952 	bl	8007b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f963 	bl	8007b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d122      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d11b      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f06f 0208 	mvn.w	r2, #8
 80078c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2204      	movs	r2, #4
 80078ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f936 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 80078e0:	e005      	b.n	80078ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f928 	bl	8007b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f939 	bl	8007b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	2b10      	cmp	r3, #16
 8007900:	d122      	bne.n	8007948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b10      	cmp	r3, #16
 800790e:	d11b      	bne.n	8007948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f06f 0210 	mvn.w	r2, #16
 8007918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2208      	movs	r2, #8
 800791e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f90c 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 8007934:	e005      	b.n	8007942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8fe 	bl	8007b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f90f 	bl	8007b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10e      	bne.n	8007974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	d107      	bne.n	8007974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0201 	mvn.w	r2, #1
 800796c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f8d8 	bl	8007b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797e:	2b80      	cmp	r3, #128	; 0x80
 8007980:	d10e      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798c:	2b80      	cmp	r3, #128	; 0x80
 800798e:	d107      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fcec 	bl	8008378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ae:	d10e      	bne.n	80079ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ba:	2b80      	cmp	r3, #128	; 0x80
 80079bc:	d107      	bne.n	80079ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fcdf 	bl	800838c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d8:	2b40      	cmp	r3, #64	; 0x40
 80079da:	d10e      	bne.n	80079fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d107      	bne.n	80079fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f8bd 	bl	8007b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	d10e      	bne.n	8007a26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d107      	bne.n	8007a26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f06f 0220 	mvn.w	r2, #32
 8007a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fc9f 	bl	8008364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_TIM_OC_ConfigChannel+0x1e>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e066      	b.n	8007b1c <HAL_TIM_OC_ConfigChannel+0xec>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b14      	cmp	r3, #20
 8007a5a:	d857      	bhi.n	8007b0c <HAL_TIM_OC_ConfigChannel+0xdc>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007b0d 	.word	0x08007b0d
 8007a6c:	08007b0d 	.word	0x08007b0d
 8007a70:	08007b0d 	.word	0x08007b0d
 8007a74:	08007ac7 	.word	0x08007ac7
 8007a78:	08007b0d 	.word	0x08007b0d
 8007a7c:	08007b0d 	.word	0x08007b0d
 8007a80:	08007b0d 	.word	0x08007b0d
 8007a84:	08007ad5 	.word	0x08007ad5
 8007a88:	08007b0d 	.word	0x08007b0d
 8007a8c:	08007b0d 	.word	0x08007b0d
 8007a90:	08007b0d 	.word	0x08007b0d
 8007a94:	08007ae3 	.word	0x08007ae3
 8007a98:	08007b0d 	.word	0x08007b0d
 8007a9c:	08007b0d 	.word	0x08007b0d
 8007aa0:	08007b0d 	.word	0x08007b0d
 8007aa4:	08007af1 	.word	0x08007af1
 8007aa8:	08007b0d 	.word	0x08007b0d
 8007aac:	08007b0d 	.word	0x08007b0d
 8007ab0:	08007b0d 	.word	0x08007b0d
 8007ab4:	08007aff 	.word	0x08007aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f8fc 	bl	8007cbc <TIM_OC1_SetConfig>
      break;
 8007ac4:	e025      	b.n	8007b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f985 	bl	8007ddc <TIM_OC2_SetConfig>
      break;
 8007ad2:	e01e      	b.n	8007b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fa08 	bl	8007ef0 <TIM_OC3_SetConfig>
      break;
 8007ae0:	e017      	b.n	8007b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fa89 	bl	8008000 <TIM_OC4_SetConfig>
      break;
 8007aee:	e010      	b.n	8007b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 faec 	bl	80080d4 <TIM_OC5_SetConfig>
      break;
 8007afc:	e009      	b.n	8007b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fb49 	bl	800819c <TIM_OC6_SetConfig>
      break;
 8007b0a:	e002      	b.n	8007b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a40      	ldr	r2, [pc, #256]	; (8007c9c <TIM_Base_SetConfig+0x114>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d013      	beq.n	8007bc8 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba6:	d00f      	beq.n	8007bc8 <TIM_Base_SetConfig+0x40>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a3d      	ldr	r2, [pc, #244]	; (8007ca0 <TIM_Base_SetConfig+0x118>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00b      	beq.n	8007bc8 <TIM_Base_SetConfig+0x40>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a3c      	ldr	r2, [pc, #240]	; (8007ca4 <TIM_Base_SetConfig+0x11c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d007      	beq.n	8007bc8 <TIM_Base_SetConfig+0x40>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a3b      	ldr	r2, [pc, #236]	; (8007ca8 <TIM_Base_SetConfig+0x120>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_Base_SetConfig+0x40>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a3a      	ldr	r2, [pc, #232]	; (8007cac <TIM_Base_SetConfig+0x124>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d108      	bne.n	8007bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a2f      	ldr	r2, [pc, #188]	; (8007c9c <TIM_Base_SetConfig+0x114>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d01f      	beq.n	8007c22 <TIM_Base_SetConfig+0x9a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be8:	d01b      	beq.n	8007c22 <TIM_Base_SetConfig+0x9a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a2c      	ldr	r2, [pc, #176]	; (8007ca0 <TIM_Base_SetConfig+0x118>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d017      	beq.n	8007c22 <TIM_Base_SetConfig+0x9a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a2b      	ldr	r2, [pc, #172]	; (8007ca4 <TIM_Base_SetConfig+0x11c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <TIM_Base_SetConfig+0x9a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a2a      	ldr	r2, [pc, #168]	; (8007ca8 <TIM_Base_SetConfig+0x120>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00f      	beq.n	8007c22 <TIM_Base_SetConfig+0x9a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a29      	ldr	r2, [pc, #164]	; (8007cac <TIM_Base_SetConfig+0x124>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00b      	beq.n	8007c22 <TIM_Base_SetConfig+0x9a>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a28      	ldr	r2, [pc, #160]	; (8007cb0 <TIM_Base_SetConfig+0x128>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d007      	beq.n	8007c22 <TIM_Base_SetConfig+0x9a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a27      	ldr	r2, [pc, #156]	; (8007cb4 <TIM_Base_SetConfig+0x12c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_Base_SetConfig+0x9a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a26      	ldr	r2, [pc, #152]	; (8007cb8 <TIM_Base_SetConfig+0x130>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d108      	bne.n	8007c34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a10      	ldr	r2, [pc, #64]	; (8007c9c <TIM_Base_SetConfig+0x114>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d00f      	beq.n	8007c80 <TIM_Base_SetConfig+0xf8>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a12      	ldr	r2, [pc, #72]	; (8007cac <TIM_Base_SetConfig+0x124>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00b      	beq.n	8007c80 <TIM_Base_SetConfig+0xf8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a11      	ldr	r2, [pc, #68]	; (8007cb0 <TIM_Base_SetConfig+0x128>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d007      	beq.n	8007c80 <TIM_Base_SetConfig+0xf8>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a10      	ldr	r2, [pc, #64]	; (8007cb4 <TIM_Base_SetConfig+0x12c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d003      	beq.n	8007c80 <TIM_Base_SetConfig+0xf8>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a0f      	ldr	r2, [pc, #60]	; (8007cb8 <TIM_Base_SetConfig+0x130>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d103      	bne.n	8007c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	615a      	str	r2, [r3, #20]
}
 8007c8e:	bf00      	nop
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	40012c00 	.word	0x40012c00
 8007ca0:	40000400 	.word	0x40000400
 8007ca4:	40000800 	.word	0x40000800
 8007ca8:	40000c00 	.word	0x40000c00
 8007cac:	40013400 	.word	0x40013400
 8007cb0:	40014000 	.word	0x40014000
 8007cb4:	40014400 	.word	0x40014400
 8007cb8:	40014800 	.word	0x40014800

08007cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	f023 0201 	bic.w	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 0303 	bic.w	r3, r3, #3
 8007cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f023 0302 	bic.w	r3, r3, #2
 8007d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a2c      	ldr	r2, [pc, #176]	; (8007dc8 <TIM_OC1_SetConfig+0x10c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00f      	beq.n	8007d3c <TIM_OC1_SetConfig+0x80>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a2b      	ldr	r2, [pc, #172]	; (8007dcc <TIM_OC1_SetConfig+0x110>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00b      	beq.n	8007d3c <TIM_OC1_SetConfig+0x80>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a2a      	ldr	r2, [pc, #168]	; (8007dd0 <TIM_OC1_SetConfig+0x114>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d007      	beq.n	8007d3c <TIM_OC1_SetConfig+0x80>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a29      	ldr	r2, [pc, #164]	; (8007dd4 <TIM_OC1_SetConfig+0x118>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_OC1_SetConfig+0x80>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a28      	ldr	r2, [pc, #160]	; (8007dd8 <TIM_OC1_SetConfig+0x11c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d10c      	bne.n	8007d56 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f023 0308 	bic.w	r3, r3, #8
 8007d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f023 0304 	bic.w	r3, r3, #4
 8007d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a1b      	ldr	r2, [pc, #108]	; (8007dc8 <TIM_OC1_SetConfig+0x10c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00f      	beq.n	8007d7e <TIM_OC1_SetConfig+0xc2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a1a      	ldr	r2, [pc, #104]	; (8007dcc <TIM_OC1_SetConfig+0x110>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00b      	beq.n	8007d7e <TIM_OC1_SetConfig+0xc2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a19      	ldr	r2, [pc, #100]	; (8007dd0 <TIM_OC1_SetConfig+0x114>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d007      	beq.n	8007d7e <TIM_OC1_SetConfig+0xc2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a18      	ldr	r2, [pc, #96]	; (8007dd4 <TIM_OC1_SetConfig+0x118>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <TIM_OC1_SetConfig+0xc2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a17      	ldr	r2, [pc, #92]	; (8007dd8 <TIM_OC1_SetConfig+0x11c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d111      	bne.n	8007da2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40013400 	.word	0x40013400
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40014400 	.word	0x40014400
 8007dd8:	40014800 	.word	0x40014800

08007ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f023 0210 	bic.w	r2, r3, #16
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f023 0320 	bic.w	r3, r3, #32
 8007e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a28      	ldr	r2, [pc, #160]	; (8007edc <TIM_OC2_SetConfig+0x100>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d003      	beq.n	8007e48 <TIM_OC2_SetConfig+0x6c>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a27      	ldr	r2, [pc, #156]	; (8007ee0 <TIM_OC2_SetConfig+0x104>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d10d      	bne.n	8007e64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a1d      	ldr	r2, [pc, #116]	; (8007edc <TIM_OC2_SetConfig+0x100>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d00f      	beq.n	8007e8c <TIM_OC2_SetConfig+0xb0>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ee0 <TIM_OC2_SetConfig+0x104>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00b      	beq.n	8007e8c <TIM_OC2_SetConfig+0xb0>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a1b      	ldr	r2, [pc, #108]	; (8007ee4 <TIM_OC2_SetConfig+0x108>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d007      	beq.n	8007e8c <TIM_OC2_SetConfig+0xb0>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <TIM_OC2_SetConfig+0x10c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d003      	beq.n	8007e8c <TIM_OC2_SetConfig+0xb0>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a19      	ldr	r2, [pc, #100]	; (8007eec <TIM_OC2_SetConfig+0x110>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d113      	bne.n	8007eb4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40012c00 	.word	0x40012c00
 8007ee0:	40013400 	.word	0x40013400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800

08007ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0303 	bic.w	r3, r3, #3
 8007f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a27      	ldr	r2, [pc, #156]	; (8007fec <TIM_OC3_SetConfig+0xfc>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d003      	beq.n	8007f5a <TIM_OC3_SetConfig+0x6a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a26      	ldr	r2, [pc, #152]	; (8007ff0 <TIM_OC3_SetConfig+0x100>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d10d      	bne.n	8007f76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a1c      	ldr	r2, [pc, #112]	; (8007fec <TIM_OC3_SetConfig+0xfc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d00f      	beq.n	8007f9e <TIM_OC3_SetConfig+0xae>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a1b      	ldr	r2, [pc, #108]	; (8007ff0 <TIM_OC3_SetConfig+0x100>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00b      	beq.n	8007f9e <TIM_OC3_SetConfig+0xae>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <TIM_OC3_SetConfig+0x104>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d007      	beq.n	8007f9e <TIM_OC3_SetConfig+0xae>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a19      	ldr	r2, [pc, #100]	; (8007ff8 <TIM_OC3_SetConfig+0x108>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d003      	beq.n	8007f9e <TIM_OC3_SetConfig+0xae>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a18      	ldr	r2, [pc, #96]	; (8007ffc <TIM_OC3_SetConfig+0x10c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d113      	bne.n	8007fc6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	621a      	str	r2, [r3, #32]
}
 8007fe0:	bf00      	nop
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40012c00 	.word	0x40012c00
 8007ff0:	40013400 	.word	0x40013400
 8007ff4:	40014000 	.word	0x40014000
 8007ff8:	40014400 	.word	0x40014400
 8007ffc:	40014800 	.word	0x40014800

08008000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800802e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800803a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800804e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	031b      	lsls	r3, r3, #12
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a18      	ldr	r2, [pc, #96]	; (80080c0 <TIM_OC4_SetConfig+0xc0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00f      	beq.n	8008084 <TIM_OC4_SetConfig+0x84>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a17      	ldr	r2, [pc, #92]	; (80080c4 <TIM_OC4_SetConfig+0xc4>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00b      	beq.n	8008084 <TIM_OC4_SetConfig+0x84>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a16      	ldr	r2, [pc, #88]	; (80080c8 <TIM_OC4_SetConfig+0xc8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d007      	beq.n	8008084 <TIM_OC4_SetConfig+0x84>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a15      	ldr	r2, [pc, #84]	; (80080cc <TIM_OC4_SetConfig+0xcc>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d003      	beq.n	8008084 <TIM_OC4_SetConfig+0x84>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <TIM_OC4_SetConfig+0xd0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d109      	bne.n	8008098 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800808a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	019b      	lsls	r3, r3, #6
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	621a      	str	r2, [r3, #32]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40013400 	.word	0x40013400
 80080c8:	40014000 	.word	0x40014000
 80080cc:	40014400 	.word	0x40014400
 80080d0:	40014800 	.word	0x40014800

080080d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008118:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	041b      	lsls	r3, r3, #16
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a17      	ldr	r2, [pc, #92]	; (8008188 <TIM_OC5_SetConfig+0xb4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00f      	beq.n	800814e <TIM_OC5_SetConfig+0x7a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a16      	ldr	r2, [pc, #88]	; (800818c <TIM_OC5_SetConfig+0xb8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00b      	beq.n	800814e <TIM_OC5_SetConfig+0x7a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a15      	ldr	r2, [pc, #84]	; (8008190 <TIM_OC5_SetConfig+0xbc>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d007      	beq.n	800814e <TIM_OC5_SetConfig+0x7a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a14      	ldr	r2, [pc, #80]	; (8008194 <TIM_OC5_SetConfig+0xc0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d003      	beq.n	800814e <TIM_OC5_SetConfig+0x7a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a13      	ldr	r2, [pc, #76]	; (8008198 <TIM_OC5_SetConfig+0xc4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d109      	bne.n	8008162 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008154:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	621a      	str	r2, [r3, #32]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	40012c00 	.word	0x40012c00
 800818c:	40013400 	.word	0x40013400
 8008190:	40014000 	.word	0x40014000
 8008194:	40014400 	.word	0x40014400
 8008198:	40014800 	.word	0x40014800

0800819c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	051b      	lsls	r3, r3, #20
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a18      	ldr	r2, [pc, #96]	; (8008254 <TIM_OC6_SetConfig+0xb8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00f      	beq.n	8008218 <TIM_OC6_SetConfig+0x7c>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a17      	ldr	r2, [pc, #92]	; (8008258 <TIM_OC6_SetConfig+0xbc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00b      	beq.n	8008218 <TIM_OC6_SetConfig+0x7c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a16      	ldr	r2, [pc, #88]	; (800825c <TIM_OC6_SetConfig+0xc0>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d007      	beq.n	8008218 <TIM_OC6_SetConfig+0x7c>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a15      	ldr	r2, [pc, #84]	; (8008260 <TIM_OC6_SetConfig+0xc4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_OC6_SetConfig+0x7c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a14      	ldr	r2, [pc, #80]	; (8008264 <TIM_OC6_SetConfig+0xc8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d109      	bne.n	800822c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800821e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40013400 	.word	0x40013400
 800825c:	40014000 	.word	0x40014000
 8008260:	40014400 	.word	0x40014400
 8008264:	40014800 	.word	0x40014800

08008268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008280:	2302      	movs	r3, #2
 8008282:	e065      	b.n	8008350 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	041b      	lsls	r3, r3, #16
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a16      	ldr	r2, [pc, #88]	; (800835c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a14      	ldr	r2, [pc, #80]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d115      	bne.n	800833e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	051b      	lsls	r3, r3, #20
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	4313      	orrs	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40013400 	.word	0x40013400

08008364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e042      	b.n	8008438 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7f8 feb3 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2224      	movs	r2, #36	; 0x24
 80083ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0201 	bic.w	r2, r2, #1
 80083e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fb64 	bl	8008ab0 <UART_SetConfig>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e022      	b.n	8008438 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fe54 	bl	80090a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800840e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800841e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fedb 	bl	80091ec <UART_CheckIdleState>
 8008436:	4603      	mov	r3, r0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b0ba      	sub	sp, #232	; 0xe8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800846a:	f640 030f 	movw	r3, #2063	; 0x80f
 800846e:	4013      	ands	r3, r2
 8008470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d11b      	bne.n	80084b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800847c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d015      	beq.n	80084b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d105      	bne.n	80084a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 82d6 	beq.w	8008a56 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
      }
      return;
 80084b2:	e2d0      	b.n	8008a56 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80084b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 811f 	beq.w	80086fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80084c2:	4b8b      	ldr	r3, [pc, #556]	; (80086f0 <HAL_UART_IRQHandler+0x2b0>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084ce:	4b89      	ldr	r3, [pc, #548]	; (80086f4 <HAL_UART_IRQHandler+0x2b4>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 8112 	beq.w	80086fc <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d011      	beq.n	8008508 <HAL_UART_IRQHandler+0xc8>
 80084e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2201      	movs	r2, #1
 80084f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084fe:	f043 0201 	orr.w	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d011      	beq.n	8008538 <HAL_UART_IRQHandler+0xf8>
 8008514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2202      	movs	r2, #2
 8008526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800852e:	f043 0204 	orr.w	r2, r3, #4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d011      	beq.n	8008568 <HAL_UART_IRQHandler+0x128>
 8008544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00b      	beq.n	8008568 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2204      	movs	r2, #4
 8008556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855e:	f043 0202 	orr.w	r2, r3, #2
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d017      	beq.n	80085a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	d105      	bne.n	800858c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008580:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008584:	4b5a      	ldr	r3, [pc, #360]	; (80086f0 <HAL_UART_IRQHandler+0x2b0>)
 8008586:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2208      	movs	r2, #8
 8008592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800859a:	f043 0208 	orr.w	r2, r3, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d012      	beq.n	80085d6 <HAL_UART_IRQHandler+0x196>
 80085b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00c      	beq.n	80085d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 823c 	beq.w	8008a5a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d013      	beq.n	8008616 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d105      	bne.n	8008606 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800861c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	d005      	beq.n	800863a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800862e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008632:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008636:	2b00      	cmp	r3, #0
 8008638:	d04f      	beq.n	80086da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fee9 	bl	8009412 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864a:	2b40      	cmp	r3, #64	; 0x40
 800864c:	d141      	bne.n	80086d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800866c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3308      	adds	r3, #8
 8008676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800867a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800867e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1d9      	bne.n	800864e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d013      	beq.n	80086ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a6:	4a14      	ldr	r2, [pc, #80]	; (80086f8 <HAL_UART_IRQHandler+0x2b8>)
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f9 f8bf 	bl	8001832 <HAL_DMA_Abort_IT>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d017      	beq.n	80086ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c8:	e00f      	b.n	80086ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f9da 	bl	8008a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	e00b      	b.n	80086ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f9d6 	bl	8008a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	e007      	b.n	80086ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9d2 	bl	8008a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80086e8:	e1b7      	b.n	8008a5a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ea:	bf00      	nop
    return;
 80086ec:	e1b5      	b.n	8008a5a <HAL_UART_IRQHandler+0x61a>
 80086ee:	bf00      	nop
 80086f0:	10000001 	.word	0x10000001
 80086f4:	04000120 	.word	0x04000120
 80086f8:	080094df 	.word	0x080094df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008700:	2b01      	cmp	r3, #1
 8008702:	f040 814a 	bne.w	800899a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870a:	f003 0310 	and.w	r3, r3, #16
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 8143 	beq.w	800899a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 813c 	beq.w	800899a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2210      	movs	r2, #16
 8008728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	f040 80b5 	bne.w	80088a4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008746:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 8187 	beq.w	8008a5e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800875a:	429a      	cmp	r2, r3
 800875c:	f080 817f 	bcs.w	8008a5e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008766:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	f040 8086 	bne.w	8008888 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1da      	bne.n	800877c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087d8:	f023 0301 	bic.w	r3, r3, #1
 80087dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e1      	bne.n	80087c6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3308      	adds	r3, #8
 8008808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3308      	adds	r3, #8
 8008822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800882c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e3      	bne.n	8008802 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008858:	f023 0310 	bic.w	r3, r3, #16
 800885c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800886a:	65bb      	str	r3, [r7, #88]	; 0x58
 800886c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e4      	bne.n	8008848 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008882:	4618      	mov	r0, r3
 8008884:	f7f8 ff79 	bl	800177a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008894:	b29b      	uxth	r3, r3
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	b29b      	uxth	r3, r3
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f8fb 	bl	8008a98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088a2:	e0dc      	b.n	8008a5e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088be:	b29b      	uxth	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 80ce 	beq.w	8008a62 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80088c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 80c9 	beq.w	8008a62 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088f2:	647b      	str	r3, [r7, #68]	; 0x44
 80088f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e4      	bne.n	80088d0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	623b      	str	r3, [r7, #32]
   return(result);
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800892e:	633a      	str	r2, [r7, #48]	; 0x30
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e1      	bne.n	8008906 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	60fb      	str	r3, [r7, #12]
   return(result);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0310 	bic.w	r3, r3, #16
 800896a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	69b9      	ldr	r1, [r7, #24]
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	617b      	str	r3, [r7, #20]
   return(result);
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e4      	bne.n	8008956 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800898c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f880 	bl	8008a98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008998:	e063      	b.n	8008a62 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00e      	beq.n	80089c4 <HAL_UART_IRQHandler+0x584>
 80089a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d008      	beq.n	80089c4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fdcf 	bl	8009560 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089c2:	e051      	b.n	8008a68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d014      	beq.n	80089fa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d03a      	beq.n	8008a66 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	4798      	blx	r3
    }
    return;
 80089f8:	e035      	b.n	8008a66 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <HAL_UART_IRQHandler+0x5da>
 8008a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fd79 	bl	800950a <UART_EndTransmit_IT>
    return;
 8008a18:	e026      	b.n	8008a68 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <HAL_UART_IRQHandler+0x5fa>
 8008a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fda8 	bl	8009588 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a38:	e016      	b.n	8008a68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d010      	beq.n	8008a68 <HAL_UART_IRQHandler+0x628>
 8008a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	da0c      	bge.n	8008a68 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fd90 	bl	8009574 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a54:	e008      	b.n	8008a68 <HAL_UART_IRQHandler+0x628>
      return;
 8008a56:	bf00      	nop
 8008a58:	e006      	b.n	8008a68 <HAL_UART_IRQHandler+0x628>
    return;
 8008a5a:	bf00      	nop
 8008a5c:	e004      	b.n	8008a68 <HAL_UART_IRQHandler+0x628>
      return;
 8008a5e:	bf00      	nop
 8008a60:	e002      	b.n	8008a68 <HAL_UART_IRQHandler+0x628>
      return;
 8008a62:	bf00      	nop
 8008a64:	e000      	b.n	8008a68 <HAL_UART_IRQHandler+0x628>
    return;
 8008a66:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008a68:	37e8      	adds	r7, #232	; 0xe8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop

08008a70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab4:	b08c      	sub	sp, #48	; 0x30
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4baa      	ldr	r3, [pc, #680]	; (8008d88 <UART_SetConfig+0x2d8>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	6812      	ldr	r2, [r2, #0]
 8008ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a9f      	ldr	r2, [pc, #636]	; (8008d8c <UART_SetConfig+0x2dc>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d004      	beq.n	8008b1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008b26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	6812      	ldr	r2, [r2, #0]
 8008b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b30:	430b      	orrs	r3, r1
 8008b32:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	f023 010f 	bic.w	r1, r3, #15
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a90      	ldr	r2, [pc, #576]	; (8008d90 <UART_SetConfig+0x2e0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d125      	bne.n	8008ba0 <UART_SetConfig+0xf0>
 8008b54:	4b8f      	ldr	r3, [pc, #572]	; (8008d94 <UART_SetConfig+0x2e4>)
 8008b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d81a      	bhi.n	8008b98 <UART_SetConfig+0xe8>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <UART_SetConfig+0xb8>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b79 	.word	0x08008b79
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008b91 	.word	0x08008b91
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b7e:	e116      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008b80:	2302      	movs	r3, #2
 8008b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b86:	e112      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b8e:	e10e      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008b90:	2308      	movs	r3, #8
 8008b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b96:	e10a      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b9e:	e106      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a7c      	ldr	r2, [pc, #496]	; (8008d98 <UART_SetConfig+0x2e8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d138      	bne.n	8008c1c <UART_SetConfig+0x16c>
 8008baa:	4b7a      	ldr	r3, [pc, #488]	; (8008d94 <UART_SetConfig+0x2e4>)
 8008bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb0:	f003 030c 	and.w	r3, r3, #12
 8008bb4:	2b0c      	cmp	r3, #12
 8008bb6:	d82d      	bhi.n	8008c14 <UART_SetConfig+0x164>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <UART_SetConfig+0x110>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008bf5 	.word	0x08008bf5
 8008bc4:	08008c15 	.word	0x08008c15
 8008bc8:	08008c15 	.word	0x08008c15
 8008bcc:	08008c15 	.word	0x08008c15
 8008bd0:	08008c05 	.word	0x08008c05
 8008bd4:	08008c15 	.word	0x08008c15
 8008bd8:	08008c15 	.word	0x08008c15
 8008bdc:	08008c15 	.word	0x08008c15
 8008be0:	08008bfd 	.word	0x08008bfd
 8008be4:	08008c15 	.word	0x08008c15
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	08008c15 	.word	0x08008c15
 8008bf0:	08008c0d 	.word	0x08008c0d
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bfa:	e0d8      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c02:	e0d4      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c04:	2304      	movs	r3, #4
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0a:	e0d0      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c0c:	2308      	movs	r3, #8
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c12:	e0cc      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c14:	2310      	movs	r3, #16
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c1a:	e0c8      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a5e      	ldr	r2, [pc, #376]	; (8008d9c <UART_SetConfig+0x2ec>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d125      	bne.n	8008c72 <UART_SetConfig+0x1c2>
 8008c26:	4b5b      	ldr	r3, [pc, #364]	; (8008d94 <UART_SetConfig+0x2e4>)
 8008c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c30:	2b30      	cmp	r3, #48	; 0x30
 8008c32:	d016      	beq.n	8008c62 <UART_SetConfig+0x1b2>
 8008c34:	2b30      	cmp	r3, #48	; 0x30
 8008c36:	d818      	bhi.n	8008c6a <UART_SetConfig+0x1ba>
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	d00a      	beq.n	8008c52 <UART_SetConfig+0x1a2>
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d814      	bhi.n	8008c6a <UART_SetConfig+0x1ba>
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <UART_SetConfig+0x19a>
 8008c44:	2b10      	cmp	r3, #16
 8008c46:	d008      	beq.n	8008c5a <UART_SetConfig+0x1aa>
 8008c48:	e00f      	b.n	8008c6a <UART_SetConfig+0x1ba>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c50:	e0ad      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c52:	2302      	movs	r3, #2
 8008c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c58:	e0a9      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c5a:	2304      	movs	r3, #4
 8008c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c60:	e0a5      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c62:	2308      	movs	r3, #8
 8008c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c68:	e0a1      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c70:	e09d      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a4a      	ldr	r2, [pc, #296]	; (8008da0 <UART_SetConfig+0x2f0>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d125      	bne.n	8008cc8 <UART_SetConfig+0x218>
 8008c7c:	4b45      	ldr	r3, [pc, #276]	; (8008d94 <UART_SetConfig+0x2e4>)
 8008c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c86:	2bc0      	cmp	r3, #192	; 0xc0
 8008c88:	d016      	beq.n	8008cb8 <UART_SetConfig+0x208>
 8008c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8008c8c:	d818      	bhi.n	8008cc0 <UART_SetConfig+0x210>
 8008c8e:	2b80      	cmp	r3, #128	; 0x80
 8008c90:	d00a      	beq.n	8008ca8 <UART_SetConfig+0x1f8>
 8008c92:	2b80      	cmp	r3, #128	; 0x80
 8008c94:	d814      	bhi.n	8008cc0 <UART_SetConfig+0x210>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <UART_SetConfig+0x1f0>
 8008c9a:	2b40      	cmp	r3, #64	; 0x40
 8008c9c:	d008      	beq.n	8008cb0 <UART_SetConfig+0x200>
 8008c9e:	e00f      	b.n	8008cc0 <UART_SetConfig+0x210>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ca6:	e082      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cae:	e07e      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cb6:	e07a      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008cb8:	2308      	movs	r3, #8
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cbe:	e076      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cc6:	e072      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a35      	ldr	r2, [pc, #212]	; (8008da4 <UART_SetConfig+0x2f4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d12a      	bne.n	8008d28 <UART_SetConfig+0x278>
 8008cd2:	4b30      	ldr	r3, [pc, #192]	; (8008d94 <UART_SetConfig+0x2e4>)
 8008cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ce0:	d01a      	beq.n	8008d18 <UART_SetConfig+0x268>
 8008ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ce6:	d81b      	bhi.n	8008d20 <UART_SetConfig+0x270>
 8008ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cec:	d00c      	beq.n	8008d08 <UART_SetConfig+0x258>
 8008cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf2:	d815      	bhi.n	8008d20 <UART_SetConfig+0x270>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <UART_SetConfig+0x250>
 8008cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cfc:	d008      	beq.n	8008d10 <UART_SetConfig+0x260>
 8008cfe:	e00f      	b.n	8008d20 <UART_SetConfig+0x270>
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d06:	e052      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0e:	e04e      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d10:	2304      	movs	r3, #4
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d16:	e04a      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d18:	2308      	movs	r3, #8
 8008d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1e:	e046      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d20:	2310      	movs	r3, #16
 8008d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d26:	e042      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a17      	ldr	r2, [pc, #92]	; (8008d8c <UART_SetConfig+0x2dc>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d13a      	bne.n	8008da8 <UART_SetConfig+0x2f8>
 8008d32:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <UART_SetConfig+0x2e4>)
 8008d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d40:	d01a      	beq.n	8008d78 <UART_SetConfig+0x2c8>
 8008d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d46:	d81b      	bhi.n	8008d80 <UART_SetConfig+0x2d0>
 8008d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4c:	d00c      	beq.n	8008d68 <UART_SetConfig+0x2b8>
 8008d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d52:	d815      	bhi.n	8008d80 <UART_SetConfig+0x2d0>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d003      	beq.n	8008d60 <UART_SetConfig+0x2b0>
 8008d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d5c:	d008      	beq.n	8008d70 <UART_SetConfig+0x2c0>
 8008d5e:	e00f      	b.n	8008d80 <UART_SetConfig+0x2d0>
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d66:	e022      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d6e:	e01e      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d70:	2304      	movs	r3, #4
 8008d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d76:	e01a      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d78:	2308      	movs	r3, #8
 8008d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d7e:	e016      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d80:	2310      	movs	r3, #16
 8008d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d86:	e012      	b.n	8008dae <UART_SetConfig+0x2fe>
 8008d88:	cfff69f3 	.word	0xcfff69f3
 8008d8c:	40008000 	.word	0x40008000
 8008d90:	40013800 	.word	0x40013800
 8008d94:	40021000 	.word	0x40021000
 8008d98:	40004400 	.word	0x40004400
 8008d9c:	40004800 	.word	0x40004800
 8008da0:	40004c00 	.word	0x40004c00
 8008da4:	40005000 	.word	0x40005000
 8008da8:	2310      	movs	r3, #16
 8008daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4aae      	ldr	r2, [pc, #696]	; (800906c <UART_SetConfig+0x5bc>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	f040 8097 	bne.w	8008ee8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	d823      	bhi.n	8008e0a <UART_SetConfig+0x35a>
 8008dc2:	a201      	add	r2, pc, #4	; (adr r2, 8008dc8 <UART_SetConfig+0x318>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008ded 	.word	0x08008ded
 8008dcc:	08008e0b 	.word	0x08008e0b
 8008dd0:	08008df5 	.word	0x08008df5
 8008dd4:	08008e0b 	.word	0x08008e0b
 8008dd8:	08008dfb 	.word	0x08008dfb
 8008ddc:	08008e0b 	.word	0x08008e0b
 8008de0:	08008e0b 	.word	0x08008e0b
 8008de4:	08008e0b 	.word	0x08008e0b
 8008de8:	08008e03 	.word	0x08008e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dec:	f7fb f902 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8008df0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008df2:	e010      	b.n	8008e16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008df4:	4b9e      	ldr	r3, [pc, #632]	; (8009070 <UART_SetConfig+0x5c0>)
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008df8:	e00d      	b.n	8008e16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dfa:	f7fb f863 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8008dfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e00:	e009      	b.n	8008e16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e08:	e005      	b.n	8008e16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 8130 	beq.w	800907e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	4a94      	ldr	r2, [pc, #592]	; (8009074 <UART_SetConfig+0x5c4>)
 8008e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	4413      	add	r3, r2
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d305      	bcc.n	8008e4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d903      	bls.n	8008e56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e54:	e113      	b.n	800907e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	2200      	movs	r2, #0
 8008e5a:	60bb      	str	r3, [r7, #8]
 8008e5c:	60fa      	str	r2, [r7, #12]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	4a84      	ldr	r2, [pc, #528]	; (8009074 <UART_SetConfig+0x5c4>)
 8008e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	603b      	str	r3, [r7, #0]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e78:	f7f7 fa12 	bl	80002a0 <__aeabi_uldivmod>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4610      	mov	r0, r2
 8008e82:	4619      	mov	r1, r3
 8008e84:	f04f 0200 	mov.w	r2, #0
 8008e88:	f04f 0300 	mov.w	r3, #0
 8008e8c:	020b      	lsls	r3, r1, #8
 8008e8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e92:	0202      	lsls	r2, r0, #8
 8008e94:	6979      	ldr	r1, [r7, #20]
 8008e96:	6849      	ldr	r1, [r1, #4]
 8008e98:	0849      	lsrs	r1, r1, #1
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	eb12 0804 	adds.w	r8, r2, r4
 8008ea4:	eb43 0905 	adc.w	r9, r3, r5
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	469a      	mov	sl, r3
 8008eb0:	4693      	mov	fp, r2
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	465b      	mov	r3, fp
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 f9f1 	bl	80002a0 <__aeabi_uldivmod>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ecc:	d308      	bcc.n	8008ee0 <UART_SetConfig+0x430>
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed4:	d204      	bcs.n	8008ee0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	60da      	str	r2, [r3, #12]
 8008ede:	e0ce      	b.n	800907e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ee6:	e0ca      	b.n	800907e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef0:	d166      	bne.n	8008fc0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	d827      	bhi.n	8008f4a <UART_SetConfig+0x49a>
 8008efa:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <UART_SetConfig+0x450>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f25 	.word	0x08008f25
 8008f04:	08008f2d 	.word	0x08008f2d
 8008f08:	08008f35 	.word	0x08008f35
 8008f0c:	08008f4b 	.word	0x08008f4b
 8008f10:	08008f3b 	.word	0x08008f3b
 8008f14:	08008f4b 	.word	0x08008f4b
 8008f18:	08008f4b 	.word	0x08008f4b
 8008f1c:	08008f4b 	.word	0x08008f4b
 8008f20:	08008f43 	.word	0x08008f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f24:	f7fb f866 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8008f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f2a:	e014      	b.n	8008f56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f2c:	f7fb f878 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8008f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f32:	e010      	b.n	8008f56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f34:	4b4e      	ldr	r3, [pc, #312]	; (8009070 <UART_SetConfig+0x5c0>)
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f38:	e00d      	b.n	8008f56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f3a:	f7fa ffc3 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8008f3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f40:	e009      	b.n	8008f56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f48:	e005      	b.n	8008f56 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 8090 	beq.w	800907e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	4a44      	ldr	r2, [pc, #272]	; (8009074 <UART_SetConfig+0x5c4>)
 8008f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f70:	005a      	lsls	r2, r3, #1
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	085b      	lsrs	r3, r3, #1
 8008f78:	441a      	add	r2, r3
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f82:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	2b0f      	cmp	r3, #15
 8008f88:	d916      	bls.n	8008fb8 <UART_SetConfig+0x508>
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f90:	d212      	bcs.n	8008fb8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f023 030f 	bic.w	r3, r3, #15
 8008f9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	085b      	lsrs	r3, r3, #1
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	8bfb      	ldrh	r3, [r7, #30]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	8bfa      	ldrh	r2, [r7, #30]
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	e062      	b.n	800907e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fbe:	e05e      	b.n	800907e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d828      	bhi.n	800901a <UART_SetConfig+0x56a>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <UART_SetConfig+0x520>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08008ff5 	.word	0x08008ff5
 8008fd4:	08008ffd 	.word	0x08008ffd
 8008fd8:	08009005 	.word	0x08009005
 8008fdc:	0800901b 	.word	0x0800901b
 8008fe0:	0800900b 	.word	0x0800900b
 8008fe4:	0800901b 	.word	0x0800901b
 8008fe8:	0800901b 	.word	0x0800901b
 8008fec:	0800901b 	.word	0x0800901b
 8008ff0:	08009013 	.word	0x08009013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff4:	f7fa fffe 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8008ff8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ffa:	e014      	b.n	8009026 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ffc:	f7fb f810 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8009000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009002:	e010      	b.n	8009026 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009004:	4b1a      	ldr	r3, [pc, #104]	; (8009070 <UART_SetConfig+0x5c0>)
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009008:	e00d      	b.n	8009026 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800900a:	f7fa ff5b 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 800900e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009010:	e009      	b.n	8009026 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009018:	e005      	b.n	8009026 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009024:	bf00      	nop
    }

    if (pclk != 0U)
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	2b00      	cmp	r3, #0
 800902a:	d028      	beq.n	800907e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	4a10      	ldr	r2, [pc, #64]	; (8009074 <UART_SetConfig+0x5c4>)
 8009032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009036:	461a      	mov	r2, r3
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	fbb3 f2f2 	udiv	r2, r3, r2
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	085b      	lsrs	r3, r3, #1
 8009044:	441a      	add	r2, r3
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	fbb2 f3f3 	udiv	r3, r2, r3
 800904e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	2b0f      	cmp	r3, #15
 8009054:	d910      	bls.n	8009078 <UART_SetConfig+0x5c8>
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905c:	d20c      	bcs.n	8009078 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	b29a      	uxth	r2, r3
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60da      	str	r2, [r3, #12]
 8009068:	e009      	b.n	800907e <UART_SetConfig+0x5ce>
 800906a:	bf00      	nop
 800906c:	40008000 	.word	0x40008000
 8009070:	00f42400 	.word	0x00f42400
 8009074:	0800f4c0 	.word	0x0800f4c0
      }
      else
      {
        ret = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2201      	movs	r2, #1
 8009082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2201      	movs	r2, #1
 800908a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2200      	movs	r2, #0
 8009092:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2200      	movs	r2, #0
 8009098:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800909a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3730      	adds	r7, #48	; 0x30
 80090a2:	46bd      	mov	sp, r7
 80090a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080090a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00a      	beq.n	80090d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	430a      	orrs	r2, r1
 8009136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913c:	f003 0310 	and.w	r3, r3, #16
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00a      	beq.n	800915a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01a      	beq.n	80091be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091a6:	d10a      	bne.n	80091be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	605a      	str	r2, [r3, #4]
  }
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091fc:	f7f8 f97c 	bl	80014f8 <HAL_GetTick>
 8009200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0308 	and.w	r3, r3, #8
 800920c:	2b08      	cmp	r3, #8
 800920e:	d10e      	bne.n	800922e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f82f 	bl	8009282 <UART_WaitOnFlagUntilTimeout>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e025      	b.n	800927a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b04      	cmp	r3, #4
 800923a:	d10e      	bne.n	800925a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800923c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f819 	bl	8009282 <UART_WaitOnFlagUntilTimeout>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e00f      	b.n	800927a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b09c      	sub	sp, #112	; 0x70
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	603b      	str	r3, [r7, #0]
 800928e:	4613      	mov	r3, r2
 8009290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009292:	e0a9      	b.n	80093e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800929a:	f000 80a5 	beq.w	80093e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800929e:	f7f8 f92b 	bl	80014f8 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d302      	bcc.n	80092b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80092ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d140      	bne.n	8009336 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092c8:	667b      	str	r3, [r7, #100]	; 0x64
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e6      	bne.n	80092b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	f023 0301 	bic.w	r3, r3, #1
 80092fc:	663b      	str	r3, [r7, #96]	; 0x60
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3308      	adds	r3, #8
 8009304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009306:	64ba      	str	r2, [r7, #72]	; 0x48
 8009308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800930c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e5      	bne.n	80092e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e069      	b.n	800940a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b00      	cmp	r3, #0
 8009342:	d051      	beq.n	80093e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800934e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009352:	d149      	bne.n	80093e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800935c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
 800937e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e6      	bne.n	800935e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3308      	adds	r3, #8
 8009396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	613b      	str	r3, [r7, #16]
   return(result);
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f023 0301 	bic.w	r3, r3, #1
 80093a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3308      	adds	r3, #8
 80093ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093b0:	623a      	str	r2, [r7, #32]
 80093b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	69f9      	ldr	r1, [r7, #28]
 80093b6:	6a3a      	ldr	r2, [r7, #32]
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e5      	bne.n	8009390 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e010      	b.n	800940a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69da      	ldr	r2, [r3, #28]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	4013      	ands	r3, r2
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	bf0c      	ite	eq
 80093f8:	2301      	moveq	r3, #1
 80093fa:	2300      	movne	r3, #0
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	461a      	mov	r2, r3
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	429a      	cmp	r2, r3
 8009404:	f43f af46 	beq.w	8009294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3770      	adds	r7, #112	; 0x70
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009412:	b480      	push	{r7}
 8009414:	b095      	sub	sp, #84	; 0x54
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800942e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009438:	643b      	str	r3, [r7, #64]	; 0x40
 800943a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800943e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e6      	bne.n	800941a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3308      	adds	r3, #8
 8009452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	61fb      	str	r3, [r7, #28]
   return(result);
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009462:	f023 0301 	bic.w	r3, r3, #1
 8009466:	64bb      	str	r3, [r7, #72]	; 0x48
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009470:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e3      	bne.n	800944c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009488:	2b01      	cmp	r3, #1
 800948a:	d118      	bne.n	80094be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	60bb      	str	r3, [r7, #8]
   return(result);
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f023 0310 	bic.w	r3, r3, #16
 80094a0:	647b      	str	r3, [r7, #68]	; 0x44
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6979      	ldr	r1, [r7, #20]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	613b      	str	r3, [r7, #16]
   return(result);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e6      	bne.n	800948c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80094d2:	bf00      	nop
 80094d4:	3754      	adds	r7, #84	; 0x54
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f7ff fac1 	bl	8008a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009502:	bf00      	nop
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b088      	sub	sp, #32
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009526:	61fb      	str	r3, [r7, #28]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	461a      	mov	r2, r3
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009534:	6979      	ldr	r1, [r7, #20]
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	e841 2300 	strex	r3, r2, [r1]
 800953c:	613b      	str	r3, [r7, #16]
   return(result);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e6      	bne.n	8009512 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2220      	movs	r2, #32
 8009548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7ff fa8c 	bl	8008a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009558:	bf00      	nop
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d101      	bne.n	80095b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e027      	b.n	8009602 <HAL_UARTEx_DisableFifoMode+0x66>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2224      	movs	r2, #36	; 0x24
 80095be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f022 0201 	bic.w	r2, r2, #1
 80095d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2220      	movs	r2, #32
 80095f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800961e:	2b01      	cmp	r3, #1
 8009620:	d101      	bne.n	8009626 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009622:	2302      	movs	r3, #2
 8009624:	e02d      	b.n	8009682 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2224      	movs	r2, #36	; 0x24
 8009632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0201 	bic.w	r2, r2, #1
 800964c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f850 	bl	8009708 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2220      	movs	r2, #32
 8009674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800969a:	2b01      	cmp	r3, #1
 800969c:	d101      	bne.n	80096a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800969e:	2302      	movs	r3, #2
 80096a0:	e02d      	b.n	80096fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2224      	movs	r2, #36	; 0x24
 80096ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0201 	bic.w	r2, r2, #1
 80096c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f812 	bl	8009708 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009714:	2b00      	cmp	r3, #0
 8009716:	d108      	bne.n	800972a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009728:	e031      	b.n	800978e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800972a:	2308      	movs	r3, #8
 800972c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800972e:	2308      	movs	r3, #8
 8009730:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	0e5b      	lsrs	r3, r3, #25
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	0f5b      	lsrs	r3, r3, #29
 800974a:	b2db      	uxtb	r3, r3
 800974c:	f003 0307 	and.w	r3, r3, #7
 8009750:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	7b3a      	ldrb	r2, [r7, #12]
 8009756:	4911      	ldr	r1, [pc, #68]	; (800979c <UARTEx_SetNbDataToProcess+0x94>)
 8009758:	5c8a      	ldrb	r2, [r1, r2]
 800975a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800975e:	7b3a      	ldrb	r2, [r7, #12]
 8009760:	490f      	ldr	r1, [pc, #60]	; (80097a0 <UARTEx_SetNbDataToProcess+0x98>)
 8009762:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009764:	fb93 f3f2 	sdiv	r3, r3, r2
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	7b7a      	ldrb	r2, [r7, #13]
 8009774:	4909      	ldr	r1, [pc, #36]	; (800979c <UARTEx_SetNbDataToProcess+0x94>)
 8009776:	5c8a      	ldrb	r2, [r1, r2]
 8009778:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800977c:	7b7a      	ldrb	r2, [r7, #13]
 800977e:	4908      	ldr	r1, [pc, #32]	; (80097a0 <UARTEx_SetNbDataToProcess+0x98>)
 8009780:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009782:	fb93 f3f2 	sdiv	r3, r3, r2
 8009786:	b29a      	uxth	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800978e:	bf00      	nop
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	0800f4d8 	.word	0x0800f4d8
 80097a0:	0800f4e0 	.word	0x0800f4e0

080097a4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80097a4:	b084      	sub	sp, #16
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	f107 001c 	add.w	r0, r7, #28
 80097b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80097ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80097bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80097be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80097c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80097c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80097ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	4b07      	ldr	r3, [pc, #28]	; (80097f4 <SDMMC_Init+0x50>)
 80097d8:	4013      	ands	r3, r2
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	431a      	orrs	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	b004      	add	sp, #16
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	ffc02c00 	.word	0xffc02c00

080097f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f043 0203 	orr.w	r2, r3, #3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009848:	2002      	movs	r0, #2
 800984a:	f7f7 fe61 	bl	8001510 <HAL_Delay>

  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0303 	and.w	r3, r3, #3
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009892:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009898:	431a      	orrs	r2, r3
                       Command->CPSM);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800989e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <SDMMC_SendCommand+0x50>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	fffee0c0 	.word	0xfffee0c0

080098c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	b2db      	uxtb	r3, r3
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3314      	adds	r3, #20
 80098f0:	461a      	mov	r2, r3
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	4413      	add	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800992e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009934:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800993a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	431a      	orrs	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009952:	2300      	movs	r3, #0

}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800996e:	2310      	movs	r3, #16
 8009970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800997c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009980:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009982:	f107 0308 	add.w	r3, r7, #8
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff ff73 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800998e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009992:	2110      	movs	r1, #16
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fa7b 	bl	8009e90 <SDMMC_GetCmdResp1>
 800999a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800999c:	69fb      	ldr	r3, [r7, #28]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3720      	adds	r7, #32
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b088      	sub	sp, #32
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80099b4:	2311      	movs	r3, #17
 80099b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099c8:	f107 0308 	add.w	r3, r7, #8
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff ff50 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80099d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d8:	2111      	movs	r1, #17
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fa58 	bl	8009e90 <SDMMC_GetCmdResp1>
 80099e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099e2:	69fb      	ldr	r3, [r7, #28]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3720      	adds	r7, #32
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80099fa:	2312      	movs	r3, #18
 80099fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a0e:	f107 0308 	add.w	r3, r7, #8
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff ff2d 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1e:	2112      	movs	r1, #18
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fa35 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009a26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a28:	69fb      	ldr	r3, [r7, #28]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3720      	adds	r7, #32
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b088      	sub	sp, #32
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a40:	2318      	movs	r3, #24
 8009a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a54:	f107 0308 	add.w	r3, r7, #8
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f7ff ff0a 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a64:	2118      	movs	r1, #24
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa12 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009a6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a6e:	69fb      	ldr	r3, [r7, #28]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3720      	adds	r7, #32
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009a86:	2319      	movs	r3, #25
 8009a88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a90:	2300      	movs	r3, #0
 8009a92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a9a:	f107 0308 	add.w	r3, r7, #8
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff fee7 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aaa:	2119      	movs	r1, #25
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9ef 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009ab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ab4:	69fb      	ldr	r3, [r7, #28]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3720      	adds	r7, #32
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009acc:	230c      	movs	r3, #12
 8009ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ade:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af8:	f107 0308 	add.w	r3, r7, #8
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff feb8 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009b04:	4a08      	ldr	r2, [pc, #32]	; (8009b28 <SDMMC_CmdStopTransfer+0x68>)
 8009b06:	210c      	movs	r1, #12
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f9c1 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009b0e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3720      	adds	r7, #32
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	05f5e100 	.word	0x05f5e100

08009b2c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	; 0x28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009b3c:	2307      	movs	r3, #7
 8009b3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b44:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b4e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b50:	f107 0310 	add.w	r3, r7, #16
 8009b54:	4619      	mov	r1, r3
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff fe8c 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b60:	2107      	movs	r1, #7
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 f994 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009b68:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3728      	adds	r7, #40	; 0x28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009b84:	2300      	movs	r3, #0
 8009b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b92:	f107 0308 	add.w	r3, r7, #8
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff fe6b 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fbb8 	bl	800a314 <SDMMC_GetCmdError>
 8009ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009bb8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009bbe:	2308      	movs	r3, #8
 8009bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff fe4b 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fb4a 	bl	800a278 <SDMMC_GetCmdResp7>
 8009be4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009be6:	69fb      	ldr	r3, [r7, #28]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009bfe:	2337      	movs	r3, #55	; 0x37
 8009c00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c12:	f107 0308 	add.w	r3, r7, #8
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff fe2b 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c22:	2137      	movs	r1, #55	; 0x37
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f933 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c2c:	69fb      	ldr	r3, [r7, #28]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3720      	adds	r7, #32
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b088      	sub	sp, #32
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009c44:	2329      	movs	r3, #41	; 0x29
 8009c46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c58:	f107 0308 	add.w	r3, r7, #8
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fe08 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fa4f 	bl	800a108 <SDMMC_GetCmdResp3>
 8009c6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3720      	adds	r7, #32
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b088      	sub	sp, #32
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009c84:	2306      	movs	r3, #6
 8009c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c98:	f107 0308 	add.w	r3, r7, #8
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff fde8 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ca8:	2106      	movs	r1, #6
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f8f0 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cb2:	69fb      	ldr	r3, [r7, #28]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3720      	adds	r7, #32
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009cc8:	2333      	movs	r3, #51	; 0x33
 8009cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cdc:	f107 0308 	add.w	r3, r7, #8
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff fdc6 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cec:	2133      	movs	r1, #51	; 0x33
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f8ce 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d20:	f107 0308 	add.w	r3, r7, #8
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fda4 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f9a1 	bl	800a074 <SDMMC_GetCmdResp2>
 8009d32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d34:	69fb      	ldr	r3, [r7, #28]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b088      	sub	sp, #32
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d4c:	2309      	movs	r3, #9
 8009d4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d60:	f107 0308 	add.w	r3, r7, #8
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7ff fd84 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f981 	bl	800a074 <SDMMC_GetCmdResp2>
 8009d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d74:	69fb      	ldr	r3, [r7, #28]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3720      	adds	r7, #32
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b088      	sub	sp, #32
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d96:	2300      	movs	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da0:	f107 0308 	add.w	r3, r7, #8
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff fd64 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	2103      	movs	r1, #3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f9e9 	bl	800a188 <SDMMC_GetCmdResp6>
 8009db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009db8:	69fb      	ldr	r3, [r7, #28]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3720      	adds	r7, #32
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b088      	sub	sp, #32
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009dd0:	230d      	movs	r3, #13
 8009dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009de4:	f107 0308 	add.w	r3, r7, #8
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff fd42 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df4:	210d      	movs	r1, #13
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f84a 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dfe:	69fb      	ldr	r3, [r7, #28]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3720      	adds	r7, #32
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009e14:	230d      	movs	r3, #13
 8009e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff fd20 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e38:	210d      	movs	r1, #13
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f828 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e42:	69fb      	ldr	r3, [r7, #28]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009e58:	230b      	movs	r3, #11
 8009e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e62:	2300      	movs	r3, #0
 8009e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e6c:	f107 0308 	add.w	r3, r7, #8
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7ff fcfe 	bl	8009874 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e7c:	210b      	movs	r1, #11
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f806 	bl	8009e90 <SDMMC_GetCmdResp1>
 8009e84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e86:	69fb      	ldr	r3, [r7, #28]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3720      	adds	r7, #32
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009e9e:	4b70      	ldr	r3, [pc, #448]	; (800a060 <SDMMC_GetCmdResp1+0x1d0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a70      	ldr	r2, [pc, #448]	; (800a064 <SDMMC_GetCmdResp1+0x1d4>)
 8009ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea8:	0a5a      	lsrs	r2, r3, #9
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	fb02 f303 	mul.w	r3, r2, r3
 8009eb0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	1e5a      	subs	r2, r3, #1
 8009eb6:	61fa      	str	r2, [r7, #28]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ec0:	e0c9      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009ec8:	69ba      	ldr	r2, [r7, #24]
 8009eca:	4b67      	ldr	r3, [pc, #412]	; (800a068 <SDMMC_GetCmdResp1+0x1d8>)
 8009ecc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0ef      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0x22>
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1ea      	bne.n	8009eb2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d004      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2204      	movs	r2, #4
 8009eec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eee:	2304      	movs	r3, #4
 8009ef0:	e0b1      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2201      	movs	r2, #1
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e0a6      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a58      	ldr	r2, [pc, #352]	; (800a06c <SDMMC_GetCmdResp1+0x1dc>)
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f7ff fcda 	bl	80098c8 <SDMMC_GetCommandResponse>
 8009f14:	4603      	mov	r3, r0
 8009f16:	461a      	mov	r2, r3
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d001      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e099      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f22:	2100      	movs	r1, #0
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7ff fcdc 	bl	80098e2 <SDMMC_GetResponse>
 8009f2a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	4b50      	ldr	r3, [pc, #320]	; (800a070 <SDMMC_GetCmdResp1+0x1e0>)
 8009f30:	4013      	ands	r3, r2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e08d      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	da02      	bge.n	8009f46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f44:	e087      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009f50:	2340      	movs	r3, #64	; 0x40
 8009f52:	e080      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009f5e:	2380      	movs	r3, #128	; 0x80
 8009f60:	e079      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f70:	e071      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f80:	e069      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f90:	e061      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009f9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fa0:	e059      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fb0:	e051      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fc0:	e049      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fd0:	e041      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fe0:	e039      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ff0:	e031      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009ffc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a000:	e029      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a00c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a010:	e021      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a01c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a020:	e019      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a02c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a030:	e011      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a03c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a040:	e009      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f003 0308 	and.w	r3, r3, #8
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a04c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a050:	e001      	b.n	800a056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a056:	4618      	mov	r0, r3
 800a058:	3720      	adds	r7, #32
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20000000 	.word	0x20000000
 800a064:	10624dd3 	.word	0x10624dd3
 800a068:	00200045 	.word	0x00200045
 800a06c:	002000c5 	.word	0x002000c5
 800a070:	fdffe008 	.word	0xfdffe008

0800a074 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a07c:	4b1f      	ldr	r3, [pc, #124]	; (800a0fc <SDMMC_GetCmdResp2+0x88>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a1f      	ldr	r2, [pc, #124]	; (800a100 <SDMMC_GetCmdResp2+0x8c>)
 800a082:	fba2 2303 	umull	r2, r3, r2, r3
 800a086:	0a5b      	lsrs	r3, r3, #9
 800a088:	f241 3288 	movw	r2, #5000	; 0x1388
 800a08c:	fb02 f303 	mul.w	r3, r2, r3
 800a090:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	1e5a      	subs	r2, r3, #1
 800a096:	60fa      	str	r2, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d102      	bne.n	800a0a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a09c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0a0:	e026      	b.n	800a0f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0ef      	beq.n	800a092 <SDMMC_GetCmdResp2+0x1e>
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1ea      	bne.n	800a092 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c0:	f003 0304 	and.w	r3, r3, #4
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d004      	beq.n	800a0d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0ce:	2304      	movs	r3, #4
 800a0d0:	e00e      	b.n	800a0f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d004      	beq.n	800a0e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e003      	b.n	800a0f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a06      	ldr	r2, [pc, #24]	; (800a104 <SDMMC_GetCmdResp2+0x90>)
 800a0ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	20000000 	.word	0x20000000
 800a100:	10624dd3 	.word	0x10624dd3
 800a104:	002000c5 	.word	0x002000c5

0800a108 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a110:	4b1a      	ldr	r3, [pc, #104]	; (800a17c <SDMMC_GetCmdResp3+0x74>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a1a      	ldr	r2, [pc, #104]	; (800a180 <SDMMC_GetCmdResp3+0x78>)
 800a116:	fba2 2303 	umull	r2, r3, r2, r3
 800a11a:	0a5b      	lsrs	r3, r3, #9
 800a11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a120:	fb02 f303 	mul.w	r3, r2, r3
 800a124:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	1e5a      	subs	r2, r3, #1
 800a12a:	60fa      	str	r2, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a130:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a134:	e01b      	b.n	800a16e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0ef      	beq.n	800a126 <SDMMC_GetCmdResp3+0x1e>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1ea      	bne.n	800a126 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a154:	f003 0304 	and.w	r3, r3, #4
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2204      	movs	r2, #4
 800a160:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a162:	2304      	movs	r3, #4
 800a164:	e003      	b.n	800a16e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a06      	ldr	r2, [pc, #24]	; (800a184 <SDMMC_GetCmdResp3+0x7c>)
 800a16a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	20000000 	.word	0x20000000
 800a180:	10624dd3 	.word	0x10624dd3
 800a184:	002000c5 	.word	0x002000c5

0800a188 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	460b      	mov	r3, r1
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a196:	4b35      	ldr	r3, [pc, #212]	; (800a26c <SDMMC_GetCmdResp6+0xe4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a35      	ldr	r2, [pc, #212]	; (800a270 <SDMMC_GetCmdResp6+0xe8>)
 800a19c:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a0:	0a5b      	lsrs	r3, r3, #9
 800a1a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
 800a1aa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	1e5a      	subs	r2, r3, #1
 800a1b0:	61fa      	str	r2, [r7, #28]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d102      	bne.n	800a1bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1ba:	e052      	b.n	800a262 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0ef      	beq.n	800a1ac <SDMMC_GetCmdResp6+0x24>
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1ea      	bne.n	800a1ac <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	f003 0304 	and.w	r3, r3, #4
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d004      	beq.n	800a1ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	e03a      	b.n	800a262 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e02f      	b.n	800a262 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7ff fb60 	bl	80098c8 <SDMMC_GetCommandResponse>
 800a208:	4603      	mov	r3, r0
 800a20a:	461a      	mov	r2, r3
 800a20c:	7afb      	ldrb	r3, [r7, #11]
 800a20e:	4293      	cmp	r3, r2
 800a210:	d001      	beq.n	800a216 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a212:	2301      	movs	r3, #1
 800a214:	e025      	b.n	800a262 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4a16      	ldr	r2, [pc, #88]	; (800a274 <SDMMC_GetCmdResp6+0xec>)
 800a21a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a21c:	2100      	movs	r1, #0
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff fb5f 	bl	80098e2 <SDMMC_GetResponse>
 800a224:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d106      	bne.n	800a23e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	0c1b      	lsrs	r3, r3, #16
 800a234:	b29a      	uxth	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e011      	b.n	800a262 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a24c:	e009      	b.n	800a262 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a25c:	e001      	b.n	800a262 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a25e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a262:	4618      	mov	r0, r3
 800a264:	3720      	adds	r7, #32
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000000 	.word	0x20000000
 800a270:	10624dd3 	.word	0x10624dd3
 800a274:	002000c5 	.word	0x002000c5

0800a278 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a280:	4b22      	ldr	r3, [pc, #136]	; (800a30c <SDMMC_GetCmdResp7+0x94>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a22      	ldr	r2, [pc, #136]	; (800a310 <SDMMC_GetCmdResp7+0x98>)
 800a286:	fba2 2303 	umull	r2, r3, r2, r3
 800a28a:	0a5b      	lsrs	r3, r3, #9
 800a28c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a290:	fb02 f303 	mul.w	r3, r2, r3
 800a294:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	1e5a      	subs	r2, r3, #1
 800a29a:	60fa      	str	r2, [r7, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2a4:	e02c      	b.n	800a300 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0ef      	beq.n	800a296 <SDMMC_GetCmdResp7+0x1e>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1ea      	bne.n	800a296 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	f003 0304 	and.w	r3, r3, #4
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d004      	beq.n	800a2d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2204      	movs	r2, #4
 800a2d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2d2:	2304      	movs	r3, #4
 800a2d4:	e014      	b.n	800a300 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e009      	b.n	800a300 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2240      	movs	r2, #64	; 0x40
 800a2fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a2fe:	2300      	movs	r3, #0

}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	20000000 	.word	0x20000000
 800a310:	10624dd3 	.word	0x10624dd3

0800a314 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a31c:	4b11      	ldr	r3, [pc, #68]	; (800a364 <SDMMC_GetCmdError+0x50>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a11      	ldr	r2, [pc, #68]	; (800a368 <SDMMC_GetCmdError+0x54>)
 800a322:	fba2 2303 	umull	r2, r3, r2, r3
 800a326:	0a5b      	lsrs	r3, r3, #9
 800a328:	f241 3288 	movw	r2, #5000	; 0x1388
 800a32c:	fb02 f303 	mul.w	r3, r2, r3
 800a330:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	1e5a      	subs	r2, r3, #1
 800a336:	60fa      	str	r2, [r7, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d102      	bne.n	800a342 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a33c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a340:	e009      	b.n	800a356 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0f1      	beq.n	800a332 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a06      	ldr	r2, [pc, #24]	; (800a36c <SDMMC_GetCmdError+0x58>)
 800a352:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	20000000 	.word	0x20000000
 800a368:	10624dd3 	.word	0x10624dd3
 800a36c:	002000c5 	.word	0x002000c5

0800a370 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a370:	b084      	sub	sp, #16
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	f107 001c 	add.w	r0, r7, #28
 800a37e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 faf6 	bl	800b980 <USB_CoreReset>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d106      	bne.n	800a3ac <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	639a      	str	r2, [r3, #56]	; 0x38
 800a3aa:	e005      	b.n	800a3b8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3c4:	b004      	add	sp, #16
 800a3c6:	4770      	bx	lr

0800a3c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d165      	bne.n	800a4a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4a3e      	ldr	r2, [pc, #248]	; (800a4d8 <USB_SetTurnaroundTime+0x110>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d906      	bls.n	800a3f2 <USB_SetTurnaroundTime+0x2a>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	4a3d      	ldr	r2, [pc, #244]	; (800a4dc <USB_SetTurnaroundTime+0x114>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d202      	bcs.n	800a3f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3ec:	230f      	movs	r3, #15
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	e05c      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4a39      	ldr	r2, [pc, #228]	; (800a4dc <USB_SetTurnaroundTime+0x114>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d306      	bcc.n	800a408 <USB_SetTurnaroundTime+0x40>
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	4a38      	ldr	r2, [pc, #224]	; (800a4e0 <USB_SetTurnaroundTime+0x118>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d202      	bcs.n	800a408 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a402:	230e      	movs	r3, #14
 800a404:	617b      	str	r3, [r7, #20]
 800a406:	e051      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4a35      	ldr	r2, [pc, #212]	; (800a4e0 <USB_SetTurnaroundTime+0x118>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d306      	bcc.n	800a41e <USB_SetTurnaroundTime+0x56>
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	4a34      	ldr	r2, [pc, #208]	; (800a4e4 <USB_SetTurnaroundTime+0x11c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d202      	bcs.n	800a41e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a418:	230d      	movs	r3, #13
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	e046      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	4a30      	ldr	r2, [pc, #192]	; (800a4e4 <USB_SetTurnaroundTime+0x11c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d306      	bcc.n	800a434 <USB_SetTurnaroundTime+0x6c>
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4a2f      	ldr	r2, [pc, #188]	; (800a4e8 <USB_SetTurnaroundTime+0x120>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d802      	bhi.n	800a434 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a42e:	230c      	movs	r3, #12
 800a430:	617b      	str	r3, [r7, #20]
 800a432:	e03b      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4a2c      	ldr	r2, [pc, #176]	; (800a4e8 <USB_SetTurnaroundTime+0x120>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d906      	bls.n	800a44a <USB_SetTurnaroundTime+0x82>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	4a2b      	ldr	r2, [pc, #172]	; (800a4ec <USB_SetTurnaroundTime+0x124>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d802      	bhi.n	800a44a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a444:	230b      	movs	r3, #11
 800a446:	617b      	str	r3, [r7, #20]
 800a448:	e030      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	4a27      	ldr	r2, [pc, #156]	; (800a4ec <USB_SetTurnaroundTime+0x124>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d906      	bls.n	800a460 <USB_SetTurnaroundTime+0x98>
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	4a26      	ldr	r2, [pc, #152]	; (800a4f0 <USB_SetTurnaroundTime+0x128>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d802      	bhi.n	800a460 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a45a:	230a      	movs	r3, #10
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	e025      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4a23      	ldr	r2, [pc, #140]	; (800a4f0 <USB_SetTurnaroundTime+0x128>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d906      	bls.n	800a476 <USB_SetTurnaroundTime+0xae>
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4a22      	ldr	r2, [pc, #136]	; (800a4f4 <USB_SetTurnaroundTime+0x12c>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d202      	bcs.n	800a476 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a470:	2309      	movs	r3, #9
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	e01a      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	4a1e      	ldr	r2, [pc, #120]	; (800a4f4 <USB_SetTurnaroundTime+0x12c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d306      	bcc.n	800a48c <USB_SetTurnaroundTime+0xc4>
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4a1d      	ldr	r2, [pc, #116]	; (800a4f8 <USB_SetTurnaroundTime+0x130>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d802      	bhi.n	800a48c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a486:	2308      	movs	r3, #8
 800a488:	617b      	str	r3, [r7, #20]
 800a48a:	e00f      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	4a1a      	ldr	r2, [pc, #104]	; (800a4f8 <USB_SetTurnaroundTime+0x130>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d906      	bls.n	800a4a2 <USB_SetTurnaroundTime+0xda>
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	4a19      	ldr	r2, [pc, #100]	; (800a4fc <USB_SetTurnaroundTime+0x134>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d202      	bcs.n	800a4a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a49c:	2307      	movs	r3, #7
 800a49e:	617b      	str	r3, [r7, #20]
 800a4a0:	e004      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a4a2:	2306      	movs	r3, #6
 800a4a4:	617b      	str	r3, [r7, #20]
 800a4a6:	e001      	b.n	800a4ac <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a4a8:	2309      	movs	r3, #9
 800a4aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	029b      	lsls	r3, r3, #10
 800a4c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	371c      	adds	r7, #28
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	00d8acbf 	.word	0x00d8acbf
 800a4dc:	00e4e1c0 	.word	0x00e4e1c0
 800a4e0:	00f42400 	.word	0x00f42400
 800a4e4:	01067380 	.word	0x01067380
 800a4e8:	011a499f 	.word	0x011a499f
 800a4ec:	01312cff 	.word	0x01312cff
 800a4f0:	014ca43f 	.word	0x014ca43f
 800a4f4:	016e3600 	.word	0x016e3600
 800a4f8:	01a6ab1f 	.word	0x01a6ab1f
 800a4fc:	01e84800 	.word	0x01e84800

0800a500 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f043 0201 	orr.w	r2, r3, #1
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f023 0201 	bic.w	r2, r3, #1
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d115      	bne.n	800a592 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a572:	2001      	movs	r0, #1
 800a574:	f7f6 ffcc 	bl	8001510 <HAL_Delay>
      ms++;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f001 f985 	bl	800b88e <USB_GetMode>
 800a584:	4603      	mov	r3, r0
 800a586:	2b01      	cmp	r3, #1
 800a588:	d01e      	beq.n	800a5c8 <USB_SetCurrentMode+0x84>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b31      	cmp	r3, #49	; 0x31
 800a58e:	d9f0      	bls.n	800a572 <USB_SetCurrentMode+0x2e>
 800a590:	e01a      	b.n	800a5c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a592:	78fb      	ldrb	r3, [r7, #3]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d115      	bne.n	800a5c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	f7f6 ffb3 	bl	8001510 <HAL_Delay>
      ms++;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f001 f96c 	bl	800b88e <USB_GetMode>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <USB_SetCurrentMode+0x84>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2b31      	cmp	r3, #49	; 0x31
 800a5c0:	d9f0      	bls.n	800a5a4 <USB_SetCurrentMode+0x60>
 800a5c2:	e001      	b.n	800a5c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e005      	b.n	800a5d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b32      	cmp	r3, #50	; 0x32
 800a5cc:	d101      	bne.n	800a5d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e000      	b.n	800a5d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5dc:	b084      	sub	sp, #16
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b086      	sub	sp, #24
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a5ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	e009      	b.n	800a610 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	3340      	adds	r3, #64	; 0x40
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	2200      	movs	r2, #0
 800a608:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	3301      	adds	r3, #1
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2b0e      	cmp	r3, #14
 800a614:	d9f2      	bls.n	800a5fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d11c      	bne.n	800a656 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a62a:	f043 0302 	orr.w	r3, r3, #2
 800a62e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	e005      	b.n	800a662 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a668:	461a      	mov	r2, r3
 800a66a:	2300      	movs	r3, #0
 800a66c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a674:	4619      	mov	r1, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a67c:	461a      	mov	r2, r3
 800a67e:	680b      	ldr	r3, [r1, #0]
 800a680:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a682:	2103      	movs	r1, #3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f959 	bl	800a93c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a68a:	2110      	movs	r1, #16
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f8f1 	bl	800a874 <USB_FlushTxFifo>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f91d 	bl	800a8dc <USB_FlushRxFifo>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6be:	461a      	mov	r2, r3
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	613b      	str	r3, [r7, #16]
 800a6d4:	e043      	b.n	800a75e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6ec:	d118      	bne.n	800a720 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a700:	461a      	mov	r2, r3
 800a702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	e013      	b.n	800a732 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	4413      	add	r3, r2
 800a712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a716:	461a      	mov	r2, r3
 800a718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	e008      	b.n	800a732 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a72c:	461a      	mov	r2, r3
 800a72e:	2300      	movs	r3, #0
 800a730:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73e:	461a      	mov	r2, r3
 800a740:	2300      	movs	r3, #0
 800a742:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a750:	461a      	mov	r2, r3
 800a752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	3301      	adds	r3, #1
 800a75c:	613b      	str	r3, [r7, #16]
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	429a      	cmp	r2, r3
 800a764:	d3b7      	bcc.n	800a6d6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a766:	2300      	movs	r3, #0
 800a768:	613b      	str	r3, [r7, #16]
 800a76a:	e043      	b.n	800a7f4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a77e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a782:	d118      	bne.n	800a7b6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a796:	461a      	mov	r2, r3
 800a798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	e013      	b.n	800a7c8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	e008      	b.n	800a7c8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	613b      	str	r3, [r7, #16]
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d3b7      	bcc.n	800a76c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a80a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a80e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a81c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f043 0210 	orr.w	r2, r3, #16
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	699a      	ldr	r2, [r3, #24]
 800a82e:	4b10      	ldr	r3, [pc, #64]	; (800a870 <USB_DevInit+0x294>)
 800a830:	4313      	orrs	r3, r2
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	f043 0208 	orr.w	r2, r3, #8
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d107      	bne.n	800a85e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a856:	f043 0304 	orr.w	r3, r3, #4
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a86a:	b004      	add	sp, #16
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	803c3800 	.word	0x803c3800

0800a874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a87e:	2300      	movs	r3, #0
 800a880:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3301      	adds	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4a13      	ldr	r2, [pc, #76]	; (800a8d8 <USB_FlushTxFifo+0x64>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d901      	bls.n	800a894 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a890:	2303      	movs	r3, #3
 800a892:	e01b      	b.n	800a8cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	daf2      	bge.n	800a882 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	019b      	lsls	r3, r3, #6
 800a8a4:	f043 0220 	orr.w	r2, r3, #32
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4a08      	ldr	r2, [pc, #32]	; (800a8d8 <USB_FlushTxFifo+0x64>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d901      	bls.n	800a8be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e006      	b.n	800a8cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 0320 	and.w	r3, r3, #32
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d0f0      	beq.n	800a8ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	00030d40 	.word	0x00030d40

0800a8dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4a11      	ldr	r2, [pc, #68]	; (800a938 <USB_FlushRxFifo+0x5c>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d901      	bls.n	800a8fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e018      	b.n	800a92c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	daf2      	bge.n	800a8e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2210      	movs	r2, #16
 800a90a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3301      	adds	r3, #1
 800a910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4a08      	ldr	r2, [pc, #32]	; (800a938 <USB_FlushRxFifo+0x5c>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d901      	bls.n	800a91e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e006      	b.n	800a92c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	f003 0310 	and.w	r3, r3, #16
 800a926:	2b10      	cmp	r3, #16
 800a928:	d0f0      	beq.n	800a90c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	00030d40 	.word	0x00030d40

0800a93c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	68f9      	ldr	r1, [r7, #12]
 800a958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a95c:	4313      	orrs	r3, r2
 800a95e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a96e:	b480      	push	{r7}
 800a970:	b087      	sub	sp, #28
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f003 0306 	and.w	r3, r3, #6
 800a986:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d002      	beq.n	800a994 <USB_GetDevSpeed+0x26>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b06      	cmp	r3, #6
 800a992:	d102      	bne.n	800a99a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a994:	2302      	movs	r3, #2
 800a996:	75fb      	strb	r3, [r7, #23]
 800a998:	e001      	b.n	800a99e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a99a:	230f      	movs	r3, #15
 800a99c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	371c      	adds	r7, #28
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d13a      	bne.n	800aa3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ce:	69da      	ldr	r2, [r3, #28]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	f003 030f 	and.w	r3, r3, #15
 800a9d8:	2101      	movs	r1, #1
 800a9da:	fa01 f303 	lsl.w	r3, r1, r3
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	68f9      	ldr	r1, [r7, #12]
 800a9e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d155      	bne.n	800aaac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	791b      	ldrb	r3, [r3, #4]
 800aa1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	059b      	lsls	r3, r3, #22
 800aa22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa24:	4313      	orrs	r3, r2
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	0151      	lsls	r1, r2, #5
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	440a      	add	r2, r1
 800aa2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	e036      	b.n	800aaac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa44:	69da      	ldr	r2, [r3, #28]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	f003 030f 	and.w	r3, r3, #15
 800aa4e:	2101      	movs	r1, #1
 800aa50:	fa01 f303 	lsl.w	r3, r1, r3
 800aa54:	041b      	lsls	r3, r3, #16
 800aa56:	68f9      	ldr	r1, [r7, #12]
 800aa58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d11a      	bne.n	800aaac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	791b      	ldrb	r3, [r3, #4]
 800aa90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa92:	430b      	orrs	r3, r1
 800aa94:	4313      	orrs	r3, r2
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
	...

0800aabc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d161      	bne.n	800ab9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaee:	d11f      	bne.n	800ab30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	0151      	lsls	r1, r2, #5
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	440a      	add	r2, r1
 800ab06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	f003 030f 	and.w	r3, r3, #15
 800ab40:	2101      	movs	r1, #1
 800ab42:	fa01 f303 	lsl.w	r3, r1, r3
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	43db      	mvns	r3, r3
 800ab4a:	68f9      	ldr	r1, [r7, #12]
 800ab4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab50:	4013      	ands	r3, r2
 800ab52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5a:	69da      	ldr	r2, [r3, #28]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	f003 030f 	and.w	r3, r3, #15
 800ab64:	2101      	movs	r1, #1
 800ab66:	fa01 f303 	lsl.w	r3, r1, r3
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab74:	4013      	ands	r3, r2
 800ab76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	0159      	lsls	r1, r3, #5
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	440b      	add	r3, r1
 800ab8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab92:	4619      	mov	r1, r3
 800ab94:	4b35      	ldr	r3, [pc, #212]	; (800ac6c <USB_DeactivateEndpoint+0x1b0>)
 800ab96:	4013      	ands	r3, r2
 800ab98:	600b      	str	r3, [r1, #0]
 800ab9a:	e060      	b.n	800ac5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abb2:	d11f      	bne.n	800abf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	0151      	lsls	r1, r2, #5
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	440a      	add	r2, r1
 800abca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	f003 030f 	and.w	r3, r3, #15
 800ac04:	2101      	movs	r1, #1
 800ac06:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0a:	041b      	lsls	r3, r3, #16
 800ac0c:	43db      	mvns	r3, r3
 800ac0e:	68f9      	ldr	r1, [r7, #12]
 800ac10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac14:	4013      	ands	r3, r2
 800ac16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1e:	69da      	ldr	r2, [r3, #28]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	f003 030f 	and.w	r3, r3, #15
 800ac28:	2101      	movs	r1, #1
 800ac2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac2e:	041b      	lsls	r3, r3, #16
 800ac30:	43db      	mvns	r3, r3
 800ac32:	68f9      	ldr	r1, [r7, #12]
 800ac34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac38:	4013      	ands	r3, r2
 800ac3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	015a      	lsls	r2, r3, #5
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	0159      	lsls	r1, r3, #5
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	440b      	add	r3, r1
 800ac52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac56:	4619      	mov	r1, r3
 800ac58:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <USB_DeactivateEndpoint+0x1b4>)
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	ec337800 	.word	0xec337800
 800ac70:	eff37800 	.word	0xeff37800

0800ac74 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	785b      	ldrb	r3, [r3, #1]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	f040 810a 	bne.w	800aea6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d132      	bne.n	800ad00 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	0151      	lsls	r1, r2, #5
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	440a      	add	r2, r1
 800acb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	015a      	lsls	r2, r3, #5
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	4413      	add	r3, r2
 800acc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	0151      	lsls	r1, r2, #5
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	440a      	add	r2, r1
 800acd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	0151      	lsls	r1, r2, #5
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	440a      	add	r2, r1
 800acf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acf8:	0cdb      	lsrs	r3, r3, #19
 800acfa:	04db      	lsls	r3, r3, #19
 800acfc:	6113      	str	r3, [r2, #16]
 800acfe:	e074      	b.n	800adea <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	0151      	lsls	r1, r2, #5
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	440a      	add	r2, r1
 800ad16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad1a:	0cdb      	lsrs	r3, r3, #19
 800ad1c:	04db      	lsls	r3, r3, #19
 800ad1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	0151      	lsls	r1, r2, #5
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	440a      	add	r2, r1
 800ad36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	6999      	ldr	r1, [r3, #24]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	440b      	add	r3, r1
 800ad5c:	1e59      	subs	r1, r3, #1
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad68:	4b9e      	ldr	r3, [pc, #632]	; (800afe4 <USB_EPStartXfer+0x370>)
 800ad6a:	400b      	ands	r3, r1
 800ad6c:	6939      	ldr	r1, [r7, #16]
 800ad6e:	0148      	lsls	r0, r1, #5
 800ad70:	6979      	ldr	r1, [r7, #20]
 800ad72:	4401      	add	r1, r0
 800ad74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad88:	691a      	ldr	r2, [r3, #16]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad92:	6939      	ldr	r1, [r7, #16]
 800ad94:	0148      	lsls	r0, r1, #5
 800ad96:	6979      	ldr	r1, [r7, #20]
 800ad98:	4401      	add	r1, r0
 800ad9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	791b      	ldrb	r3, [r3, #4]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d11f      	bne.n	800adea <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	0151      	lsls	r1, r2, #5
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	440a      	add	r2, r1
 800adc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800adc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	0151      	lsls	r1, r2, #5
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	440a      	add	r2, r1
 800ade0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ade8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	0151      	lsls	r1, r2, #5
 800adfc:	697a      	ldr	r2, [r7, #20]
 800adfe:	440a      	add	r2, r1
 800ae00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae08:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	791b      	ldrb	r3, [r3, #4]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d015      	beq.n	800ae3e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 8106 	beq.w	800b028 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	f003 030f 	and.w	r3, r3, #15
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae32:	6979      	ldr	r1, [r7, #20]
 800ae34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	634b      	str	r3, [r1, #52]	; 0x34
 800ae3c:	e0f4      	b.n	800b028 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d110      	bne.n	800ae70 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	015a      	lsls	r2, r3, #5
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	4413      	add	r3, r2
 800ae56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	0151      	lsls	r1, r2, #5
 800ae60:	697a      	ldr	r2, [r7, #20]
 800ae62:	440a      	add	r2, r1
 800ae64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae6c:	6013      	str	r3, [r2, #0]
 800ae6e:	e00f      	b.n	800ae90 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	015a      	lsls	r2, r3, #5
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	4413      	add	r3, r2
 800ae78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	0151      	lsls	r1, r2, #5
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	440a      	add	r2, r1
 800ae86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae8e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	6919      	ldr	r1, [r3, #16]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781a      	ldrb	r2, [r3, #0]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa94 	bl	800b3cc <USB_WritePacket>
 800aea4:	e0c0      	b.n	800b028 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	015a      	lsls	r2, r3, #5
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	4413      	add	r3, r2
 800aeae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	693a      	ldr	r2, [r7, #16]
 800aeb6:	0151      	lsls	r1, r2, #5
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	440a      	add	r2, r1
 800aebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aec0:	0cdb      	lsrs	r3, r3, #19
 800aec2:	04db      	lsls	r3, r3, #19
 800aec4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	0151      	lsls	r1, r2, #5
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	440a      	add	r2, r1
 800aedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aee4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aee8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	699b      	ldr	r3, [r3, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d123      	bne.n	800af3a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	015a      	lsls	r2, r3, #5
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	4413      	add	r3, r2
 800aefa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aefe:	691a      	ldr	r2, [r3, #16]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af08:	6939      	ldr	r1, [r7, #16]
 800af0a:	0148      	lsls	r0, r1, #5
 800af0c:	6979      	ldr	r1, [r7, #20]
 800af0e:	4401      	add	r1, r0
 800af10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af14:	4313      	orrs	r3, r2
 800af16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	0151      	lsls	r1, r2, #5
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	440a      	add	r2, r1
 800af2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af36:	6113      	str	r3, [r2, #16]
 800af38:	e037      	b.n	800afaa <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	699a      	ldr	r2, [r3, #24]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	4413      	add	r3, r2
 800af44:	1e5a      	subs	r2, r3, #1
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	89fa      	ldrh	r2, [r7, #14]
 800af56:	fb03 f202 	mul.w	r2, r3, r2
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	4413      	add	r3, r2
 800af66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6a:	691a      	ldr	r2, [r3, #16]
 800af6c:	89fb      	ldrh	r3, [r7, #14]
 800af6e:	04d9      	lsls	r1, r3, #19
 800af70:	4b1c      	ldr	r3, [pc, #112]	; (800afe4 <USB_EPStartXfer+0x370>)
 800af72:	400b      	ands	r3, r1
 800af74:	6939      	ldr	r1, [r7, #16]
 800af76:	0148      	lsls	r0, r1, #5
 800af78:	6979      	ldr	r1, [r7, #20]
 800af7a:	4401      	add	r1, r0
 800af7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af80:	4313      	orrs	r3, r2
 800af82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af90:	691a      	ldr	r2, [r3, #16]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	69db      	ldr	r3, [r3, #28]
 800af96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af9a:	6939      	ldr	r1, [r7, #16]
 800af9c:	0148      	lsls	r0, r1, #5
 800af9e:	6979      	ldr	r1, [r7, #20]
 800afa0:	4401      	add	r1, r0
 800afa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afa6:	4313      	orrs	r3, r2
 800afa8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	791b      	ldrb	r3, [r3, #4]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d12a      	bne.n	800b008 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d112      	bne.n	800afe8 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	0151      	lsls	r1, r2, #5
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	440a      	add	r2, r1
 800afd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	e011      	b.n	800b008 <USB_EPStartXfer+0x394>
 800afe4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	0151      	lsls	r1, r2, #5
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	440a      	add	r2, r1
 800affe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b006:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	0151      	lsls	r1, r2, #5
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	440a      	add	r2, r1
 800b01e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b022:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop

0800b034 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	785b      	ldrb	r3, [r3, #1]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	f040 80ab 	bne.w	800b1a8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d132      	bne.n	800b0c0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	4413      	add	r3, r2
 800b062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	0151      	lsls	r1, r2, #5
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	440a      	add	r2, r1
 800b070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b07c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	4413      	add	r3, r2
 800b086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	0151      	lsls	r1, r2, #5
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	440a      	add	r2, r1
 800b094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b09c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	0151      	lsls	r1, r2, #5
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	440a      	add	r2, r1
 800b0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0b8:	0cdb      	lsrs	r3, r3, #19
 800b0ba:	04db      	lsls	r3, r3, #19
 800b0bc:	6113      	str	r3, [r2, #16]
 800b0be:	e04e      	b.n	800b15e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	0151      	lsls	r1, r2, #5
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	440a      	add	r2, r1
 800b0d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0da:	0cdb      	lsrs	r3, r3, #19
 800b0dc:	04db      	lsls	r3, r3, #19
 800b0de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	0151      	lsls	r1, r2, #5
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	440a      	add	r2, r1
 800b0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b102:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	699a      	ldr	r2, [r3, #24]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d903      	bls.n	800b118 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	68da      	ldr	r2, [r3, #12]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b144:	691a      	ldr	r2, [r3, #16]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	0148      	lsls	r0, r1, #5
 800b152:	68f9      	ldr	r1, [r7, #12]
 800b154:	4401      	add	r1, r0
 800b156:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b15a:	4313      	orrs	r3, r2
 800b15c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b17c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d071      	beq.n	800b26a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b18c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	f003 030f 	and.w	r3, r3, #15
 800b196:	2101      	movs	r1, #1
 800b198:	fa01 f303 	lsl.w	r3, r1, r3
 800b19c:	68f9      	ldr	r1, [r7, #12]
 800b19e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	634b      	str	r3, [r1, #52]	; 0x34
 800b1a6:	e060      	b.n	800b26a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	0151      	lsls	r1, r2, #5
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	440a      	add	r2, r1
 800b1be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1c2:	0cdb      	lsrs	r3, r3, #19
 800b1c4:	04db      	lsls	r3, r3, #19
 800b1c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	0151      	lsls	r1, r2, #5
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	440a      	add	r2, r1
 800b1de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1ea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d003      	beq.n	800b1fc <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	68da      	ldr	r2, [r3, #12]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	0151      	lsls	r1, r2, #5
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	440a      	add	r2, r1
 800b21a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b21e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b222:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	015a      	lsls	r2, r3, #5
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	4413      	add	r3, r2
 800b22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b230:	691a      	ldr	r2, [r3, #16]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b23a:	68b9      	ldr	r1, [r7, #8]
 800b23c:	0148      	lsls	r0, r1, #5
 800b23e:	68f9      	ldr	r1, [r7, #12]
 800b240:	4401      	add	r1, r0
 800b242:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b246:	4313      	orrs	r3, r2
 800b248:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b268:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b278:	b480      	push	{r7}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	785b      	ldrb	r3, [r3, #1]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d14a      	bne.n	800b32c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2ae:	f040 8086 	bne.w	800b3be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	015a      	lsls	r2, r3, #5
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	7812      	ldrb	r2, [r2, #0]
 800b2c6:	0151      	lsls	r1, r2, #5
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	440a      	add	r2, r1
 800b2cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	7812      	ldrb	r2, [r2, #0]
 800b2ea:	0151      	lsls	r1, r2, #5
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	440a      	add	r2, r1
 800b2f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f242 7210 	movw	r2, #10000	; 0x2710
 800b306:	4293      	cmp	r3, r2
 800b308:	d902      	bls.n	800b310 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	75fb      	strb	r3, [r7, #23]
          break;
 800b30e:	e056      	b.n	800b3be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b328:	d0e7      	beq.n	800b2fa <USB_EPStopXfer+0x82>
 800b32a:	e048      	b.n	800b3be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	015a      	lsls	r2, r3, #5
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	4413      	add	r3, r2
 800b336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b344:	d13b      	bne.n	800b3be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	7812      	ldrb	r2, [r2, #0]
 800b35a:	0151      	lsls	r1, r2, #5
 800b35c:	693a      	ldr	r2, [r7, #16]
 800b35e:	440a      	add	r2, r1
 800b360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b368:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	015a      	lsls	r2, r3, #5
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	4413      	add	r3, r2
 800b374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	7812      	ldrb	r2, [r2, #0]
 800b37e:	0151      	lsls	r1, r2, #5
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	440a      	add	r2, r1
 800b384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b38c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3301      	adds	r3, #1
 800b392:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f242 7210 	movw	r2, #10000	; 0x2710
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d902      	bls.n	800b3a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b3a2:	e00c      	b.n	800b3be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	015a      	lsls	r2, r3, #5
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3bc:	d0e7      	beq.n	800b38e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	371c      	adds	r7, #28
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b089      	sub	sp, #36	; 0x24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	461a      	mov	r2, r3
 800b3da:	460b      	mov	r3, r1
 800b3dc:	71fb      	strb	r3, [r7, #7]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b3ea:	88bb      	ldrh	r3, [r7, #4]
 800b3ec:	3303      	adds	r3, #3
 800b3ee:	089b      	lsrs	r3, r3, #2
 800b3f0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61bb      	str	r3, [r7, #24]
 800b3f6:	e018      	b.n	800b42a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
 800b3fa:	031a      	lsls	r2, r3, #12
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b404:	461a      	mov	r2, r3
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	3301      	adds	r3, #1
 800b410:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	3301      	adds	r3, #1
 800b416:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	3301      	adds	r3, #1
 800b41c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	3301      	adds	r3, #1
 800b422:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	3301      	adds	r3, #1
 800b428:	61bb      	str	r3, [r7, #24]
 800b42a:	69ba      	ldr	r2, [r7, #24]
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d3e2      	bcc.n	800b3f8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3724      	adds	r7, #36	; 0x24
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b440:	b480      	push	{r7}
 800b442:	b08b      	sub	sp, #44	; 0x2c
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	4613      	mov	r3, r2
 800b44c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b456:	88fb      	ldrh	r3, [r7, #6]
 800b458:	089b      	lsrs	r3, r3, #2
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b45e:	88fb      	ldrh	r3, [r7, #6]
 800b460:	f003 0303 	and.w	r3, r3, #3
 800b464:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b466:	2300      	movs	r3, #0
 800b468:	623b      	str	r3, [r7, #32]
 800b46a:	e014      	b.n	800b496 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	601a      	str	r2, [r3, #0]
    pDest++;
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	3301      	adds	r3, #1
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	3301      	adds	r3, #1
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	3301      	adds	r3, #1
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	3301      	adds	r3, #1
 800b48e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	3301      	adds	r3, #1
 800b494:	623b      	str	r3, [r7, #32]
 800b496:	6a3a      	ldr	r2, [r7, #32]
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d3e6      	bcc.n	800b46c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b49e:	8bfb      	ldrh	r3, [r7, #30]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d01e      	beq.n	800b4e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f107 0310 	add.w	r3, r7, #16
 800b4b4:	6812      	ldr	r2, [r2, #0]
 800b4b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	701a      	strb	r2, [r3, #0]
      i++;
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b4d6:	8bfb      	ldrh	r3, [r7, #30]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b4dc:	8bfb      	ldrh	r3, [r7, #30]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1ea      	bne.n	800b4b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	372c      	adds	r7, #44	; 0x2c
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	785b      	ldrb	r3, [r3, #1]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d12c      	bne.n	800b566 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	015a      	lsls	r2, r3, #5
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	4413      	add	r3, r2
 800b514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	db12      	blt.n	800b544 <USB_EPSetStall+0x54>
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00f      	beq.n	800b544 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	015a      	lsls	r2, r3, #5
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4413      	add	r3, r2
 800b52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	0151      	lsls	r1, r2, #5
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	440a      	add	r2, r1
 800b53a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b53e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b542:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	0151      	lsls	r1, r2, #5
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	440a      	add	r2, r1
 800b55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	e02b      	b.n	800b5be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	db12      	blt.n	800b59e <USB_EPSetStall+0xae>
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00f      	beq.n	800b59e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	015a      	lsls	r2, r3, #5
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	4413      	add	r3, r2
 800b586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	0151      	lsls	r1, r2, #5
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	440a      	add	r2, r1
 800b594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b59c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	015a      	lsls	r2, r3, #5
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	0151      	lsls	r1, r2, #5
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	440a      	add	r2, r1
 800b5b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d128      	bne.n	800b63a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	015a      	lsls	r2, r3, #5
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	0151      	lsls	r1, r2, #5
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	440a      	add	r2, r1
 800b5fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b606:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	791b      	ldrb	r3, [r3, #4]
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d003      	beq.n	800b618 <USB_EPClearStall+0x4c>
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	791b      	ldrb	r3, [r3, #4]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d138      	bne.n	800b68a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	0151      	lsls	r1, r2, #5
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	440a      	add	r2, r1
 800b62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	e027      	b.n	800b68a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	015a      	lsls	r2, r3, #5
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4413      	add	r3, r2
 800b642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	0151      	lsls	r1, r2, #5
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	440a      	add	r2, r1
 800b650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b654:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b658:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	791b      	ldrb	r3, [r3, #4]
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d003      	beq.n	800b66a <USB_EPClearStall+0x9e>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	791b      	ldrb	r3, [r3, #4]
 800b666:	2b02      	cmp	r3, #2
 800b668:	d10f      	bne.n	800b68a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4413      	add	r3, r2
 800b672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	0151      	lsls	r1, r2, #5
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	440a      	add	r2, r1
 800b680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b688:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b6ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	78fb      	ldrb	r3, [r7, #3]
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b6cc:	68f9      	ldr	r1, [r7, #12]
 800b6ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b6fe:	f023 0303 	bic.w	r3, r3, #3
 800b702:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b712:	f023 0302 	bic.w	r3, r3, #2
 800b716:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b726:	b480      	push	{r7}
 800b728:	b085      	sub	sp, #20
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b740:	f023 0303 	bic.w	r3, r3, #3
 800b744:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b754:	f043 0302 	orr.w	r3, r3, #2
 800b758:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	695b      	ldr	r3, [r3, #20]
 800b774:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	4013      	ands	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b780:	68fb      	ldr	r3, [r7, #12]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b78e:	b480      	push	{r7}
 800b790:	b085      	sub	sp, #20
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7aa:	69db      	ldr	r3, [r3, #28]
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	0c1b      	lsrs	r3, r3, #16
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7de:	69db      	ldr	r3, [r3, #28]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	b29b      	uxth	r3, r3
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	460b      	mov	r3, r1
 800b800:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b806:	78fb      	ldrb	r3, [r7, #3]
 800b808:	015a      	lsls	r2, r3, #5
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	4013      	ands	r3, r2
 800b822:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b824:	68bb      	ldr	r3, [r7, #8]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b832:	b480      	push	{r7}
 800b834:	b087      	sub	sp, #28
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	460b      	mov	r3, r1
 800b83c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b854:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b856:	78fb      	ldrb	r3, [r7, #3]
 800b858:	f003 030f 	and.w	r3, r3, #15
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	fa22 f303 	lsr.w	r3, r2, r3
 800b862:	01db      	lsls	r3, r3, #7
 800b864:	b2db      	uxtb	r3, r3
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b86c:	78fb      	ldrb	r3, [r7, #3]
 800b86e:	015a      	lsls	r2, r3, #5
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	4413      	add	r3, r2
 800b874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	4013      	ands	r3, r2
 800b87e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b880:	68bb      	ldr	r3, [r7, #8]
}
 800b882:	4618      	mov	r0, r3
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b88e:	b480      	push	{r7}
 800b890:	b083      	sub	sp, #12
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	f003 0301 	and.w	r3, r3, #1
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b085      	sub	sp, #20
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b8c8:	f023 0307 	bic.w	r3, r3, #7
 800b8cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	333c      	adds	r3, #60	; 0x3c
 800b902:	3304      	adds	r3, #4
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4a1c      	ldr	r2, [pc, #112]	; (800b97c <USB_EP0_OutStart+0x8c>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d90a      	bls.n	800b926 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b91c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b920:	d101      	bne.n	800b926 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	e024      	b.n	800b970 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92c:	461a      	mov	r2, r3
 800b92e:	2300      	movs	r3, #0
 800b930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b954:	f043 0318 	orr.w	r3, r3, #24
 800b958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b968:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b96c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	4f54300a 	.word	0x4f54300a

0800b980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b988:	2300      	movs	r3, #0
 800b98a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	3301      	adds	r3, #1
 800b990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	4a13      	ldr	r2, [pc, #76]	; (800b9e4 <USB_CoreReset+0x64>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d901      	bls.n	800b99e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e01b      	b.n	800b9d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	daf2      	bge.n	800b98c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	f043 0201 	orr.w	r2, r3, #1
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	4a09      	ldr	r2, [pc, #36]	; (800b9e4 <USB_CoreReset+0x64>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d901      	bls.n	800b9c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e006      	b.n	800b9d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d0f0      	beq.n	800b9b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	00030d40 	.word	0x00030d40

0800b9e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b9ec:	4904      	ldr	r1, [pc, #16]	; (800ba00 <MX_FATFS_Init+0x18>)
 800b9ee:	4805      	ldr	r0, [pc, #20]	; (800ba04 <MX_FATFS_Init+0x1c>)
 800b9f0:	f001 fe9e 	bl	800d730 <FATFS_LinkDriver>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	4b03      	ldr	r3, [pc, #12]	; (800ba08 <MX_FATFS_Init+0x20>)
 800b9fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b9fc:	bf00      	nop
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	2000060c 	.word	0x2000060c
 800ba04:	0800f4e8 	.word	0x0800f4e8
 800ba08:	20000608 	.word	0x20000608

0800ba0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ba16:	f000 f879 	bl	800bb0c <BSP_SD_IsDetected>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d001      	beq.n	800ba24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ba20:	2302      	movs	r3, #2
 800ba22:	e012      	b.n	800ba4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ba24:	480b      	ldr	r0, [pc, #44]	; (800ba54 <BSP_SD_Init+0x48>)
 800ba26:	f7fa f949 	bl	8005cbc <HAL_SD_Init>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ba2e:	79fb      	ldrb	r3, [r7, #7]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d109      	bne.n	800ba48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ba34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba38:	4806      	ldr	r0, [pc, #24]	; (800ba54 <BSP_SD_Init+0x48>)
 800ba3a:	f7fb f815 	bl	8006a68 <HAL_SD_ConfigWideBusOperation>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ba48:	79fb      	ldrb	r3, [r7, #7]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	200002b8 	.word	0x200002b8

0800ba58 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af02      	add	r7, sp, #8
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
 800ba64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	68f9      	ldr	r1, [r7, #12]
 800ba74:	4806      	ldr	r0, [pc, #24]	; (800ba90 <BSP_SD_ReadBlocks+0x38>)
 800ba76:	f7fa fa49 	bl	8005f0c <HAL_SD_ReadBlocks>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	200002b8 	.word	0x200002b8

0800ba94 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af02      	add	r7, sp, #8
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	68f9      	ldr	r1, [r7, #12]
 800bab0:	4806      	ldr	r0, [pc, #24]	; (800bacc <BSP_SD_WriteBlocks+0x38>)
 800bab2:	f7fa fbbd 	bl	8006230 <HAL_SD_WriteBlocks>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3718      	adds	r7, #24
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	200002b8 	.word	0x200002b8

0800bad0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bad4:	4805      	ldr	r0, [pc, #20]	; (800baec <BSP_SD_GetCardState+0x1c>)
 800bad6:	f7fb f8db 	bl	8006c90 <HAL_SD_GetCardState>
 800bada:	4603      	mov	r3, r0
 800badc:	2b04      	cmp	r3, #4
 800bade:	bf14      	ite	ne
 800bae0:	2301      	movne	r3, #1
 800bae2:	2300      	moveq	r3, #0
 800bae4:	b2db      	uxtb	r3, r3
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200002b8 	.word	0x200002b8

0800baf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800baf8:	6879      	ldr	r1, [r7, #4]
 800bafa:	4803      	ldr	r0, [pc, #12]	; (800bb08 <BSP_SD_GetCardInfo+0x18>)
 800bafc:	f7fa ff88 	bl	8006a10 <HAL_SD_GetCardInfo>
}
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	200002b8 	.word	0x200002b8

0800bb0c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bb12:	2301      	movs	r3, #1
 800bb14:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bb16:	f000 f80b 	bl	800bb30 <BSP_PlatformIsDetected>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d101      	bne.n	800bb24 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bb20:	2300      	movs	r3, #0
 800bb22:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	b2db      	uxtb	r3, r3
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bb36:	2301      	movs	r3, #1
 800bb38:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bb3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bb42:	f7f6 f867 	bl	8001c14 <HAL_GPIO_ReadPin>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bb50:	79fb      	ldrb	r3, [r7, #7]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
	...

0800bb5c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bb66:	4b0b      	ldr	r3, [pc, #44]	; (800bb94 <SD_CheckStatus+0x38>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bb6c:	f7ff ffb0 	bl	800bad0 <BSP_SD_GetCardState>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d107      	bne.n	800bb86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bb76:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <SD_CheckStatus+0x38>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	f023 0301 	bic.w	r3, r3, #1
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	4b04      	ldr	r3, [pc, #16]	; (800bb94 <SD_CheckStatus+0x38>)
 800bb84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bb86:	4b03      	ldr	r3, [pc, #12]	; (800bb94 <SD_CheckStatus+0x38>)
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	b2db      	uxtb	r3, r3
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20000009 	.word	0x20000009

0800bb98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	4603      	mov	r3, r0
 800bba0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bba2:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <SD_initialize+0x38>)
 800bba4:	2201      	movs	r2, #1
 800bba6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bba8:	f7ff ff30 	bl	800ba0c <BSP_SD_Init>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d107      	bne.n	800bbc2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bbb2:	79fb      	ldrb	r3, [r7, #7]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff ffd1 	bl	800bb5c <SD_CheckStatus>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <SD_initialize+0x38>)
 800bbc0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bbc2:	4b03      	ldr	r3, [pc, #12]	; (800bbd0 <SD_initialize+0x38>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	b2db      	uxtb	r3, r3
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20000009 	.word	0x20000009

0800bbd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bbde:	79fb      	ldrb	r3, [r7, #7]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7ff ffbb 	bl	800bb5c <SD_CheckStatus>
 800bbe6:	4603      	mov	r3, r0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60b9      	str	r1, [r7, #8]
 800bbf8:	607a      	str	r2, [r7, #4]
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bc04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc08:	683a      	ldr	r2, [r7, #0]
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	68b8      	ldr	r0, [r7, #8]
 800bc0e:	f7ff ff23 	bl	800ba58 <BSP_SD_ReadBlocks>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d107      	bne.n	800bc28 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bc18:	bf00      	nop
 800bc1a:	f7ff ff59 	bl	800bad0 <BSP_SD_GetCardState>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1fa      	bne.n	800bc1a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3718      	adds	r7, #24
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b086      	sub	sp, #24
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	603b      	str	r3, [r7, #0]
 800bc3e:	4603      	mov	r3, r0
 800bc40:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	6879      	ldr	r1, [r7, #4]
 800bc4e:	68b8      	ldr	r0, [r7, #8]
 800bc50:	f7ff ff20 	bl	800ba94 <BSP_SD_WriteBlocks>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d107      	bne.n	800bc6a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bc5a:	bf00      	nop
 800bc5c:	f7ff ff38 	bl	800bad0 <BSP_SD_GetCardState>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1fa      	bne.n	800bc5c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08c      	sub	sp, #48	; 0x30
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	603a      	str	r2, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
 800bc80:	460b      	mov	r3, r1
 800bc82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bc8a:	4b25      	ldr	r3, [pc, #148]	; (800bd20 <SD_ioctl+0xac>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <SD_ioctl+0x28>
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e03c      	b.n	800bd16 <SD_ioctl+0xa2>

  switch (cmd)
 800bc9c:	79bb      	ldrb	r3, [r7, #6]
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d834      	bhi.n	800bd0c <SD_ioctl+0x98>
 800bca2:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <SD_ioctl+0x34>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bcb9 	.word	0x0800bcb9
 800bcac:	0800bcc1 	.word	0x0800bcc1
 800bcb0:	0800bcd9 	.word	0x0800bcd9
 800bcb4:	0800bcf3 	.word	0x0800bcf3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bcbe:	e028      	b.n	800bd12 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcc0:	f107 0308 	add.w	r3, r7, #8
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7ff ff13 	bl	800baf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bcca:	6a3a      	ldr	r2, [r7, #32]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bcd6:	e01c      	b.n	800bd12 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcd8:	f107 0308 	add.w	r3, r7, #8
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff ff07 	bl	800baf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bcf0:	e00f      	b.n	800bd12 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcf2:	f107 0308 	add.w	r3, r7, #8
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fefa 	bl	800baf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	0a5a      	lsrs	r2, r3, #9
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd0a:	e002      	b.n	800bd12 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bd0c:	2304      	movs	r3, #4
 800bd0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bd12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3730      	adds	r7, #48	; 0x30
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	20000009 	.word	0x20000009

0800bd24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd34:	f002 fb30 	bl	800e398 <USBD_static_malloc>
 800bd38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d105      	bne.n	800bd4c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bd48:	2302      	movs	r3, #2
 800bd4a:	e066      	b.n	800be1a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7c1b      	ldrb	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d119      	bne.n	800bd90 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd60:	2202      	movs	r2, #2
 800bd62:	2181      	movs	r1, #129	; 0x81
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f002 f903 	bl	800df70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bd70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd74:	2202      	movs	r2, #2
 800bd76:	2101      	movs	r1, #1
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f002 f8f9 	bl	800df70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2210      	movs	r2, #16
 800bd8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bd8e:	e016      	b.n	800bdbe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd90:	2340      	movs	r3, #64	; 0x40
 800bd92:	2202      	movs	r2, #2
 800bd94:	2181      	movs	r1, #129	; 0x81
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f002 f8ea 	bl	800df70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bda2:	2340      	movs	r3, #64	; 0x40
 800bda4:	2202      	movs	r2, #2
 800bda6:	2101      	movs	r1, #1
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f002 f8e1 	bl	800df70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2210      	movs	r2, #16
 800bdba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bdbe:	2308      	movs	r3, #8
 800bdc0:	2203      	movs	r2, #3
 800bdc2:	2182      	movs	r1, #130	; 0x82
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f002 f8d3 	bl	800df70 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7c1b      	ldrb	r3, [r3, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d109      	bne.n	800be08 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bdfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdfe:	2101      	movs	r1, #1
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f002 fa2f 	bl	800e264 <USBD_LL_PrepareReceive>
 800be06:	e007      	b.n	800be18 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be0e:	2340      	movs	r3, #64	; 0x40
 800be10:	2101      	movs	r1, #1
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f002 fa26 	bl	800e264 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800be2e:	2181      	movs	r1, #129	; 0x81
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f002 f8db 	bl	800dfec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be3c:	2101      	movs	r1, #1
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f002 f8d4 	bl	800dfec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800be4c:	2182      	movs	r1, #130	; 0x82
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f002 f8cc 	bl	800dfec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00e      	beq.n	800be8c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be7e:	4618      	mov	r0, r3
 800be80:	f002 fa98 	bl	800e3b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e0af      	b.n	800c020 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d03f      	beq.n	800bf4c <USBD_CDC_Setup+0xb4>
 800becc:	2b20      	cmp	r3, #32
 800bece:	f040 809f 	bne.w	800c010 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	88db      	ldrh	r3, [r3, #6]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d02e      	beq.n	800bf38 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	b25b      	sxtb	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	da16      	bge.n	800bf12 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bef0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	88d2      	ldrh	r2, [r2, #6]
 800bef6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	88db      	ldrh	r3, [r3, #6]
 800befc:	2b07      	cmp	r3, #7
 800befe:	bf28      	it	cs
 800bf00:	2307      	movcs	r3, #7
 800bf02:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	89fa      	ldrh	r2, [r7, #14]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f001 fb43 	bl	800d596 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bf10:	e085      	b.n	800c01e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	785a      	ldrb	r2, [r3, #1]
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	88db      	ldrh	r3, [r3, #6]
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bf28:	6939      	ldr	r1, [r7, #16]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	88db      	ldrh	r3, [r3, #6]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 fb5c 	bl	800d5ee <USBD_CtlPrepareRx>
      break;
 800bf36:	e072      	b.n	800c01e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	7850      	ldrb	r0, [r2, #1]
 800bf44:	2200      	movs	r2, #0
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	4798      	blx	r3
      break;
 800bf4a:	e068      	b.n	800c01e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	785b      	ldrb	r3, [r3, #1]
 800bf50:	2b0b      	cmp	r3, #11
 800bf52:	d852      	bhi.n	800bffa <USBD_CDC_Setup+0x162>
 800bf54:	a201      	add	r2, pc, #4	; (adr r2, 800bf5c <USBD_CDC_Setup+0xc4>)
 800bf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5a:	bf00      	nop
 800bf5c:	0800bf8d 	.word	0x0800bf8d
 800bf60:	0800c009 	.word	0x0800c009
 800bf64:	0800bffb 	.word	0x0800bffb
 800bf68:	0800bffb 	.word	0x0800bffb
 800bf6c:	0800bffb 	.word	0x0800bffb
 800bf70:	0800bffb 	.word	0x0800bffb
 800bf74:	0800bffb 	.word	0x0800bffb
 800bf78:	0800bffb 	.word	0x0800bffb
 800bf7c:	0800bffb 	.word	0x0800bffb
 800bf80:	0800bffb 	.word	0x0800bffb
 800bf84:	0800bfb7 	.word	0x0800bfb7
 800bf88:	0800bfe1 	.word	0x0800bfe1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d107      	bne.n	800bfa8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf98:	f107 030a 	add.w	r3, r7, #10
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f001 faf8 	bl	800d596 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfa6:	e032      	b.n	800c00e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f001 fa82 	bl	800d4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	75fb      	strb	r3, [r7, #23]
          break;
 800bfb4:	e02b      	b.n	800c00e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d107      	bne.n	800bfd2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bfc2:	f107 030d 	add.w	r3, r7, #13
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f001 fae3 	bl	800d596 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfd0:	e01d      	b.n	800c00e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f001 fa6d 	bl	800d4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	75fb      	strb	r3, [r7, #23]
          break;
 800bfde:	e016      	b.n	800c00e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d00f      	beq.n	800c00c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f001 fa60 	bl	800d4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800bff4:	2303      	movs	r3, #3
 800bff6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bff8:	e008      	b.n	800c00c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 fa59 	bl	800d4b4 <USBD_CtlError>
          ret = USBD_FAIL;
 800c002:	2303      	movs	r3, #3
 800c004:	75fb      	strb	r3, [r7, #23]
          break;
 800c006:	e002      	b.n	800c00e <USBD_CDC_Setup+0x176>
          break;
 800c008:	bf00      	nop
 800c00a:	e008      	b.n	800c01e <USBD_CDC_Setup+0x186>
          break;
 800c00c:	bf00      	nop
      }
      break;
 800c00e:	e006      	b.n	800c01e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f001 fa4e 	bl	800d4b4 <USBD_CtlError>
      ret = USBD_FAIL;
 800c018:	2303      	movs	r3, #3
 800c01a:	75fb      	strb	r3, [r7, #23]
      break;
 800c01c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c03a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c046:	2303      	movs	r3, #3
 800c048:	e04f      	b.n	800c0ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c052:	78fa      	ldrb	r2, [r7, #3]
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	440b      	add	r3, r1
 800c060:	3318      	adds	r3, #24
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d029      	beq.n	800c0bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	3318      	adds	r3, #24
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	78f9      	ldrb	r1, [r7, #3]
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	460b      	mov	r3, r1
 800c080:	00db      	lsls	r3, r3, #3
 800c082:	440b      	add	r3, r1
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4403      	add	r3, r0
 800c088:	3348      	adds	r3, #72	; 0x48
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c090:	fb01 f303 	mul.w	r3, r1, r3
 800c094:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c096:	2b00      	cmp	r3, #0
 800c098:	d110      	bne.n	800c0bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c09a:	78fa      	ldrb	r2, [r7, #3]
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	3318      	adds	r3, #24
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0ae:	78f9      	ldrb	r1, [r7, #3]
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f002 f89d 	bl	800e1f4 <USBD_LL_Transmit>
 800c0ba:	e015      	b.n	800c0e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00b      	beq.n	800c0e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c104:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c110:	2303      	movs	r3, #3
 800c112:	e015      	b.n	800c140 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f002 f8db 	bl	800e2d4 <USBD_LL_GetRxDataSize>
 800c11e:	4602      	mov	r2, r0
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c13a:	4611      	mov	r1, r2
 800c13c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c15e:	2303      	movs	r3, #3
 800c160:	e01b      	b.n	800c19a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d015      	beq.n	800c198 <USBD_CDC_EP0_RxReady+0x50>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c172:	2bff      	cmp	r3, #255	; 0xff
 800c174:	d010      	beq.n	800c198 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c184:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c18c:	b292      	uxth	r2, r2
 800c18e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	22ff      	movs	r2, #255	; 0xff
 800c194:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2243      	movs	r2, #67	; 0x43
 800c1b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c1b2:	4b03      	ldr	r3, [pc, #12]	; (800c1c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	20000094 	.word	0x20000094

0800c1c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2243      	movs	r2, #67	; 0x43
 800c1d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c1d2:	4b03      	ldr	r3, [pc, #12]	; (800c1e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	20000050 	.word	0x20000050

0800c1e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2243      	movs	r2, #67	; 0x43
 800c1f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c1f2:	4b03      	ldr	r3, [pc, #12]	; (800c200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	200000d8 	.word	0x200000d8

0800c204 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	220a      	movs	r2, #10
 800c210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c212:	4b03      	ldr	r3, [pc, #12]	; (800c220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	2000000c 	.word	0x2000000c

0800c224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	e004      	b.n	800c242 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c24e:	b480      	push	{r7}
 800c250:	b087      	sub	sp, #28
 800c252:	af00      	add	r7, sp, #0
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	60b9      	str	r1, [r7, #8]
 800c258:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c260:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c268:	2303      	movs	r3, #3
 800c26a:	e008      	b.n	800c27e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	371c      	adds	r7, #28
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c28a:	b480      	push	{r7}
 800c28c:	b085      	sub	sp, #20
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c29a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	e004      	b.n	800c2b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e01a      	b.n	800c314 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d114      	bne.n	800c312 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c306:	2181      	movs	r1, #129	; 0x81
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 ff73 	bl	800e1f4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c312:	7bfb      	ldrb	r3, [r7, #15]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c32a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c336:	2303      	movs	r3, #3
 800c338:	e016      	b.n	800c368 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	7c1b      	ldrb	r3, [r3, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d109      	bne.n	800c356 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c34c:	2101      	movs	r1, #1
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f001 ff88 	bl	800e264 <USBD_LL_PrepareReceive>
 800c354:	e007      	b.n	800c366 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c35c:	2340      	movs	r3, #64	; 0x40
 800c35e:	2101      	movs	r1, #1
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f001 ff7f 	bl	800e264 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	4613      	mov	r3, r2
 800c37c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	e01f      	b.n	800c3c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	79fa      	ldrb	r2, [r7, #7]
 800c3ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f001 fd5b 	bl	800de78 <USBD_LL_Init>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e016      	b.n	800c416 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00b      	beq.n	800c414 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	f107 020e 	add.w	r2, r7, #14
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
 800c40c:	4602      	mov	r2, r0
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f001 fd70 	bl	800df0c <USBD_LL_Start>
 800c42c:	4603      	mov	r3, r0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c436:	b480      	push	{r7}
 800c438:	b083      	sub	sp, #12
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c458:	2303      	movs	r3, #3
 800c45a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c462:	2b00      	cmp	r3, #0
 800c464:	d009      	beq.n	800c47a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	78fa      	ldrb	r2, [r7, #3]
 800c470:	4611      	mov	r1, r2
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
 800c476:	4603      	mov	r3, r0
 800c478:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	460b      	mov	r3, r1
 800c48e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c496:	2b00      	cmp	r3, #0
 800c498:	d007      	beq.n	800c4aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	78fa      	ldrb	r2, [r7, #3]
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	4798      	blx	r3
  }

  return USBD_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 ffba 	bl	800d440 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c4da:	461a      	mov	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4e8:	f003 031f 	and.w	r3, r3, #31
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d01a      	beq.n	800c526 <USBD_LL_SetupStage+0x72>
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d822      	bhi.n	800c53a <USBD_LL_SetupStage+0x86>
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <USBD_LL_SetupStage+0x4a>
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d00a      	beq.n	800c512 <USBD_LL_SetupStage+0x5e>
 800c4fc:	e01d      	b.n	800c53a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa62 	bl	800c9d0 <USBD_StdDevReq>
 800c50c:	4603      	mov	r3, r0
 800c50e:	73fb      	strb	r3, [r7, #15]
      break;
 800c510:	e020      	b.n	800c554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fac6 	bl	800caac <USBD_StdItfReq>
 800c520:	4603      	mov	r3, r0
 800c522:	73fb      	strb	r3, [r7, #15]
      break;
 800c524:	e016      	b.n	800c554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c52c:	4619      	mov	r1, r3
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fb05 	bl	800cb3e <USBD_StdEPReq>
 800c534:	4603      	mov	r3, r0
 800c536:	73fb      	strb	r3, [r7, #15]
      break;
 800c538:	e00c      	b.n	800c554 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c544:	b2db      	uxtb	r3, r3
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f001 fd85 	bl	800e058 <USBD_LL_StallEP>
 800c54e:	4603      	mov	r3, r0
 800c550:	73fb      	strb	r3, [r7, #15]
      break;
 800c552:	bf00      	nop
  }

  return ret;
 800c554:	7bfb      	ldrb	r3, [r7, #15]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b086      	sub	sp, #24
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	460b      	mov	r3, r1
 800c568:	607a      	str	r2, [r7, #4]
 800c56a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c56c:	7afb      	ldrb	r3, [r7, #11]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d138      	bne.n	800c5e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c578:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c580:	2b03      	cmp	r3, #3
 800c582:	d14a      	bne.n	800c61a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	689a      	ldr	r2, [r3, #8]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d913      	bls.n	800c5b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	689a      	ldr	r2, [r3, #8]
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	1ad2      	subs	r2, r2, r3
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	bf28      	it	cs
 800c5aa:	4613      	movcs	r3, r2
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f001 f839 	bl	800d628 <USBD_CtlContinueRx>
 800c5b6:	e030      	b.n	800c61a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b03      	cmp	r3, #3
 800c5c2:	d10b      	bne.n	800c5dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d005      	beq.n	800c5dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f001 f834 	bl	800d64a <USBD_CtlSendStatus>
 800c5e2:	e01a      	b.n	800c61a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b03      	cmp	r3, #3
 800c5ee:	d114      	bne.n	800c61a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00e      	beq.n	800c61a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	7afa      	ldrb	r2, [r7, #11]
 800c606:	4611      	mov	r1, r2
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	4798      	blx	r3
 800c60c:	4603      	mov	r3, r0
 800c60e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c610:	7dfb      	ldrb	r3, [r7, #23]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	e000      	b.n	800c61c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3718      	adds	r7, #24
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	460b      	mov	r3, r1
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c632:	7afb      	ldrb	r3, [r7, #11]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d16b      	bne.n	800c710 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	3314      	adds	r3, #20
 800c63c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c644:	2b02      	cmp	r3, #2
 800c646:	d156      	bne.n	800c6f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	689a      	ldr	r2, [r3, #8]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	429a      	cmp	r2, r3
 800c652:	d914      	bls.n	800c67e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	1ad2      	subs	r2, r2, r3
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	461a      	mov	r2, r3
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f000 ffae 	bl	800d5cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c670:	2300      	movs	r3, #0
 800c672:	2200      	movs	r2, #0
 800c674:	2100      	movs	r1, #0
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f001 fdf4 	bl	800e264 <USBD_LL_PrepareReceive>
 800c67c:	e03b      	b.n	800c6f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	68da      	ldr	r2, [r3, #12]
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	429a      	cmp	r2, r3
 800c688:	d11c      	bne.n	800c6c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c692:	429a      	cmp	r2, r3
 800c694:	d316      	bcc.n	800c6c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	685a      	ldr	r2, [r3, #4]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d20f      	bcs.n	800c6c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f000 ff8f 	bl	800d5cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f001 fdd1 	bl	800e264 <USBD_LL_PrepareReceive>
 800c6c2:	e018      	b.n	800c6f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d10b      	bne.n	800c6e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d005      	beq.n	800c6e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6e8:	2180      	movs	r1, #128	; 0x80
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f001 fcb4 	bl	800e058 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 ffbd 	bl	800d670 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d122      	bne.n	800c746 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f7ff fe98 	bl	800c436 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c70e:	e01a      	b.n	800c746 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c716:	b2db      	uxtb	r3, r3
 800c718:	2b03      	cmp	r3, #3
 800c71a:	d114      	bne.n	800c746 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00e      	beq.n	800c746 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72e:	695b      	ldr	r3, [r3, #20]
 800c730:	7afa      	ldrb	r2, [r7, #11]
 800c732:	4611      	mov	r1, r2
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	4798      	blx	r3
 800c738:	4603      	mov	r3, r0
 800c73a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	e000      	b.n	800c748 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3718      	adds	r7, #24
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c780:	2303      	movs	r3, #3
 800c782:	e02f      	b.n	800c7e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00f      	beq.n	800c7ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d009      	beq.n	800c7ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	6852      	ldr	r2, [r2, #4]
 800c7a6:	b2d2      	uxtb	r2, r2
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ae:	2340      	movs	r3, #64	; 0x40
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f001 fbdb 	bl	800df70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2240      	movs	r2, #64	; 0x40
 800c7c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ca:	2340      	movs	r3, #64	; 0x40
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2180      	movs	r1, #128	; 0x80
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f001 fbcd 	bl	800df70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2240      	movs	r2, #64	; 0x40
 800c7e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	78fa      	ldrb	r2, [r7, #3]
 800c7fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2204      	movs	r2, #4
 800c826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b04      	cmp	r3, #4
 800c84a:	d106      	bne.n	800c85a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c852:	b2da      	uxtb	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c87a:	2303      	movs	r3, #3
 800c87c:	e012      	b.n	800c8a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b03      	cmp	r3, #3
 800c888:	d10b      	bne.n	800c8a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c890:	69db      	ldr	r3, [r3, #28]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d005      	beq.n	800c8a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c89c:	69db      	ldr	r3, [r3, #28]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e014      	b.n	800c8f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d10d      	bne.n	800c8ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	78fa      	ldrb	r2, [r7, #3]
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c90e:	2303      	movs	r3, #3
 800c910:	e014      	b.n	800c93c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d10d      	bne.n	800c93a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c932:	78fa      	ldrb	r2, [r7, #3]
 800c934:	4611      	mov	r1, r2
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c970:	2b00      	cmp	r3, #0
 800c972:	d009      	beq.n	800c988 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	6852      	ldr	r2, [r2, #4]
 800c980:	b2d2      	uxtb	r2, r2
 800c982:	4611      	mov	r1, r2
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	4798      	blx	r3
  }

  return USBD_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c992:	b480      	push	{r7}
 800c994:	b087      	sub	sp, #28
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9b0:	8a3b      	ldrh	r3, [r7, #16]
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	b21a      	sxth	r2, r3
 800c9b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	b21b      	sxth	r3, r3
 800c9be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9c0:	89fb      	ldrh	r3, [r7, #14]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	371c      	adds	r7, #28
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
	...

0800c9d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9e6:	2b40      	cmp	r3, #64	; 0x40
 800c9e8:	d005      	beq.n	800c9f6 <USBD_StdDevReq+0x26>
 800c9ea:	2b40      	cmp	r3, #64	; 0x40
 800c9ec:	d853      	bhi.n	800ca96 <USBD_StdDevReq+0xc6>
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00b      	beq.n	800ca0a <USBD_StdDevReq+0x3a>
 800c9f2:	2b20      	cmp	r3, #32
 800c9f4:	d14f      	bne.n	800ca96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	6839      	ldr	r1, [r7, #0]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	4798      	blx	r3
 800ca04:	4603      	mov	r3, r0
 800ca06:	73fb      	strb	r3, [r7, #15]
      break;
 800ca08:	e04a      	b.n	800caa0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	785b      	ldrb	r3, [r3, #1]
 800ca0e:	2b09      	cmp	r3, #9
 800ca10:	d83b      	bhi.n	800ca8a <USBD_StdDevReq+0xba>
 800ca12:	a201      	add	r2, pc, #4	; (adr r2, 800ca18 <USBD_StdDevReq+0x48>)
 800ca14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca18:	0800ca6d 	.word	0x0800ca6d
 800ca1c:	0800ca81 	.word	0x0800ca81
 800ca20:	0800ca8b 	.word	0x0800ca8b
 800ca24:	0800ca77 	.word	0x0800ca77
 800ca28:	0800ca8b 	.word	0x0800ca8b
 800ca2c:	0800ca4b 	.word	0x0800ca4b
 800ca30:	0800ca41 	.word	0x0800ca41
 800ca34:	0800ca8b 	.word	0x0800ca8b
 800ca38:	0800ca63 	.word	0x0800ca63
 800ca3c:	0800ca55 	.word	0x0800ca55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9de 	bl	800ce04 <USBD_GetDescriptor>
          break;
 800ca48:	e024      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fb6d 	bl	800d12c <USBD_SetAddress>
          break;
 800ca52:	e01f      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fbac 	bl	800d1b4 <USBD_SetConfig>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]
          break;
 800ca60:	e018      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fc4b 	bl	800d300 <USBD_GetConfig>
          break;
 800ca6a:	e013      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fc7c 	bl	800d36c <USBD_GetStatus>
          break;
 800ca74:	e00e      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fcab 	bl	800d3d4 <USBD_SetFeature>
          break;
 800ca7e:	e009      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fcba 	bl	800d3fc <USBD_ClrFeature>
          break;
 800ca88:	e004      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ca8a:	6839      	ldr	r1, [r7, #0]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fd11 	bl	800d4b4 <USBD_CtlError>
          break;
 800ca92:	bf00      	nop
      }
      break;
 800ca94:	e004      	b.n	800caa0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fd0b 	bl	800d4b4 <USBD_CtlError>
      break;
 800ca9e:	bf00      	nop
  }

  return ret;
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop

0800caac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cac2:	2b40      	cmp	r3, #64	; 0x40
 800cac4:	d005      	beq.n	800cad2 <USBD_StdItfReq+0x26>
 800cac6:	2b40      	cmp	r3, #64	; 0x40
 800cac8:	d82f      	bhi.n	800cb2a <USBD_StdItfReq+0x7e>
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <USBD_StdItfReq+0x26>
 800cace:	2b20      	cmp	r3, #32
 800cad0:	d12b      	bne.n	800cb2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	3b01      	subs	r3, #1
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d81d      	bhi.n	800cb1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	889b      	ldrh	r3, [r3, #4]
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d813      	bhi.n	800cb12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	4798      	blx	r3
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	88db      	ldrh	r3, [r3, #6]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d110      	bne.n	800cb26 <USBD_StdItfReq+0x7a>
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d10d      	bne.n	800cb26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fd9d 	bl	800d64a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb10:	e009      	b.n	800cb26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fccd 	bl	800d4b4 <USBD_CtlError>
          break;
 800cb1a:	e004      	b.n	800cb26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fcc8 	bl	800d4b4 <USBD_CtlError>
          break;
 800cb24:	e000      	b.n	800cb28 <USBD_StdItfReq+0x7c>
          break;
 800cb26:	bf00      	nop
      }
      break;
 800cb28:	e004      	b.n	800cb34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fcc1 	bl	800d4b4 <USBD_CtlError>
      break;
 800cb32:	bf00      	nop
  }

  return ret;
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b084      	sub	sp, #16
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	889b      	ldrh	r3, [r3, #4]
 800cb50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb5a:	2b40      	cmp	r3, #64	; 0x40
 800cb5c:	d007      	beq.n	800cb6e <USBD_StdEPReq+0x30>
 800cb5e:	2b40      	cmp	r3, #64	; 0x40
 800cb60:	f200 8145 	bhi.w	800cdee <USBD_StdEPReq+0x2b0>
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00c      	beq.n	800cb82 <USBD_StdEPReq+0x44>
 800cb68:	2b20      	cmp	r3, #32
 800cb6a:	f040 8140 	bne.w	800cdee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	4798      	blx	r3
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb80:	e13a      	b.n	800cdf8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	785b      	ldrb	r3, [r3, #1]
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	d007      	beq.n	800cb9a <USBD_StdEPReq+0x5c>
 800cb8a:	2b03      	cmp	r3, #3
 800cb8c:	f300 8129 	bgt.w	800cde2 <USBD_StdEPReq+0x2a4>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d07f      	beq.n	800cc94 <USBD_StdEPReq+0x156>
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d03c      	beq.n	800cc12 <USBD_StdEPReq+0xd4>
 800cb98:	e123      	b.n	800cde2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d002      	beq.n	800cbac <USBD_StdEPReq+0x6e>
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d016      	beq.n	800cbd8 <USBD_StdEPReq+0x9a>
 800cbaa:	e02c      	b.n	800cc06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00d      	beq.n	800cbce <USBD_StdEPReq+0x90>
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
 800cbb4:	2b80      	cmp	r3, #128	; 0x80
 800cbb6:	d00a      	beq.n	800cbce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f001 fa4b 	bl	800e058 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbc2:	2180      	movs	r1, #128	; 0x80
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f001 fa47 	bl	800e058 <USBD_LL_StallEP>
 800cbca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbcc:	e020      	b.n	800cc10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fc6f 	bl	800d4b4 <USBD_CtlError>
              break;
 800cbd6:	e01b      	b.n	800cc10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	885b      	ldrh	r3, [r3, #2]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10e      	bne.n	800cbfe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00b      	beq.n	800cbfe <USBD_StdEPReq+0xc0>
 800cbe6:	7bbb      	ldrb	r3, [r7, #14]
 800cbe8:	2b80      	cmp	r3, #128	; 0x80
 800cbea:	d008      	beq.n	800cbfe <USBD_StdEPReq+0xc0>
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	88db      	ldrh	r3, [r3, #6]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d104      	bne.n	800cbfe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f001 fa2d 	bl	800e058 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fd23 	bl	800d64a <USBD_CtlSendStatus>

              break;
 800cc04:	e004      	b.n	800cc10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fc53 	bl	800d4b4 <USBD_CtlError>
              break;
 800cc0e:	bf00      	nop
          }
          break;
 800cc10:	e0ec      	b.n	800cdec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d002      	beq.n	800cc24 <USBD_StdEPReq+0xe6>
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d016      	beq.n	800cc50 <USBD_StdEPReq+0x112>
 800cc22:	e030      	b.n	800cc86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00d      	beq.n	800cc46 <USBD_StdEPReq+0x108>
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	2b80      	cmp	r3, #128	; 0x80
 800cc2e:	d00a      	beq.n	800cc46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f001 fa0f 	bl	800e058 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc3a:	2180      	movs	r1, #128	; 0x80
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f001 fa0b 	bl	800e058 <USBD_LL_StallEP>
 800cc42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc44:	e025      	b.n	800cc92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fc33 	bl	800d4b4 <USBD_CtlError>
              break;
 800cc4e:	e020      	b.n	800cc92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	885b      	ldrh	r3, [r3, #2]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d11b      	bne.n	800cc90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	4619      	mov	r1, r3
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f001 fa2c 	bl	800e0c4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 fcec 	bl	800d64a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	4798      	blx	r3
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cc84:	e004      	b.n	800cc90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fc13 	bl	800d4b4 <USBD_CtlError>
              break;
 800cc8e:	e000      	b.n	800cc92 <USBD_StdEPReq+0x154>
              break;
 800cc90:	bf00      	nop
          }
          break;
 800cc92:	e0ab      	b.n	800cdec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d002      	beq.n	800cca6 <USBD_StdEPReq+0x168>
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d032      	beq.n	800cd0a <USBD_StdEPReq+0x1cc>
 800cca4:	e097      	b.n	800cdd6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cca6:	7bbb      	ldrb	r3, [r7, #14]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d007      	beq.n	800ccbc <USBD_StdEPReq+0x17e>
 800ccac:	7bbb      	ldrb	r3, [r7, #14]
 800ccae:	2b80      	cmp	r3, #128	; 0x80
 800ccb0:	d004      	beq.n	800ccbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fbfd 	bl	800d4b4 <USBD_CtlError>
                break;
 800ccba:	e091      	b.n	800cde0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	da0b      	bge.n	800ccdc <USBD_StdEPReq+0x19e>
 800ccc4:	7bbb      	ldrb	r3, [r7, #14]
 800ccc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccca:	4613      	mov	r3, r2
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	3310      	adds	r3, #16
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	3304      	adds	r3, #4
 800ccda:	e00b      	b.n	800ccf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cce2:	4613      	mov	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	2202      	movs	r2, #2
 800cd00:	4619      	mov	r1, r3
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fc47 	bl	800d596 <USBD_CtlSendData>
              break;
 800cd08:	e06a      	b.n	800cde0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	da11      	bge.n	800cd36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd12:	7bbb      	ldrb	r3, [r7, #14]
 800cd14:	f003 020f 	and.w	r2, r3, #15
 800cd18:	6879      	ldr	r1, [r7, #4]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	440b      	add	r3, r1
 800cd24:	3324      	adds	r3, #36	; 0x24
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d117      	bne.n	800cd5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fbc0 	bl	800d4b4 <USBD_CtlError>
                  break;
 800cd34:	e054      	b.n	800cde0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd36:	7bbb      	ldrb	r3, [r7, #14]
 800cd38:	f003 020f 	and.w	r2, r3, #15
 800cd3c:	6879      	ldr	r1, [r7, #4]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	440b      	add	r3, r1
 800cd48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd4c:	881b      	ldrh	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d104      	bne.n	800cd5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fbad 	bl	800d4b4 <USBD_CtlError>
                  break;
 800cd5a:	e041      	b.n	800cde0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	da0b      	bge.n	800cd7c <USBD_StdEPReq+0x23e>
 800cd64:	7bbb      	ldrb	r3, [r7, #14]
 800cd66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	3310      	adds	r3, #16
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	4413      	add	r3, r2
 800cd78:	3304      	adds	r3, #4
 800cd7a:	e00b      	b.n	800cd94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd82:	4613      	mov	r3, r2
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4413      	add	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	4413      	add	r3, r2
 800cd92:	3304      	adds	r3, #4
 800cd94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <USBD_StdEPReq+0x264>
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	2b80      	cmp	r3, #128	; 0x80
 800cda0:	d103      	bne.n	800cdaa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2200      	movs	r2, #0
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	e00e      	b.n	800cdc8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cdaa:	7bbb      	ldrb	r3, [r7, #14]
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f001 f9be 	bl	800e130 <USBD_LL_IsStallEP>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	e002      	b.n	800cdc8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2202      	movs	r2, #2
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fbe1 	bl	800d596 <USBD_CtlSendData>
              break;
 800cdd4:	e004      	b.n	800cde0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fb6b 	bl	800d4b4 <USBD_CtlError>
              break;
 800cdde:	bf00      	nop
          }
          break;
 800cde0:	e004      	b.n	800cdec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fb65 	bl	800d4b4 <USBD_CtlError>
          break;
 800cdea:	bf00      	nop
      }
      break;
 800cdec:	e004      	b.n	800cdf8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fb5f 	bl	800d4b4 <USBD_CtlError>
      break;
 800cdf6:	bf00      	nop
  }

  return ret;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce16:	2300      	movs	r3, #0
 800ce18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	885b      	ldrh	r3, [r3, #2]
 800ce1e:	0a1b      	lsrs	r3, r3, #8
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	3b01      	subs	r3, #1
 800ce24:	2b0e      	cmp	r3, #14
 800ce26:	f200 8152 	bhi.w	800d0ce <USBD_GetDescriptor+0x2ca>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <USBD_GetDescriptor+0x2c>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800cea1 	.word	0x0800cea1
 800ce34:	0800ceb9 	.word	0x0800ceb9
 800ce38:	0800cef9 	.word	0x0800cef9
 800ce3c:	0800d0cf 	.word	0x0800d0cf
 800ce40:	0800d0cf 	.word	0x0800d0cf
 800ce44:	0800d06f 	.word	0x0800d06f
 800ce48:	0800d09b 	.word	0x0800d09b
 800ce4c:	0800d0cf 	.word	0x0800d0cf
 800ce50:	0800d0cf 	.word	0x0800d0cf
 800ce54:	0800d0cf 	.word	0x0800d0cf
 800ce58:	0800d0cf 	.word	0x0800d0cf
 800ce5c:	0800d0cf 	.word	0x0800d0cf
 800ce60:	0800d0cf 	.word	0x0800d0cf
 800ce64:	0800d0cf 	.word	0x0800d0cf
 800ce68:	0800ce6d 	.word	0x0800ce6d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00b      	beq.n	800ce90 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	7c12      	ldrb	r2, [r2, #16]
 800ce84:	f107 0108 	add.w	r1, r7, #8
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4798      	blx	r3
 800ce8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce8e:	e126      	b.n	800d0de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fb0e 	bl	800d4b4 <USBD_CtlError>
        err++;
 800ce98:	7afb      	ldrb	r3, [r7, #11]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	72fb      	strb	r3, [r7, #11]
      break;
 800ce9e:	e11e      	b.n	800d0de <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	7c12      	ldrb	r2, [r2, #16]
 800ceac:	f107 0108 	add.w	r1, r7, #8
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	4798      	blx	r3
 800ceb4:	60f8      	str	r0, [r7, #12]
      break;
 800ceb6:	e112      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	7c1b      	ldrb	r3, [r3, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10d      	bne.n	800cedc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec8:	f107 0208 	add.w	r2, r7, #8
 800cecc:	4610      	mov	r0, r2
 800cece:	4798      	blx	r3
 800ced0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3301      	adds	r3, #1
 800ced6:	2202      	movs	r2, #2
 800ced8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ceda:	e100      	b.n	800d0de <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	f107 0208 	add.w	r2, r7, #8
 800cee8:	4610      	mov	r0, r2
 800ceea:	4798      	blx	r3
 800ceec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3301      	adds	r3, #1
 800cef2:	2202      	movs	r2, #2
 800cef4:	701a      	strb	r2, [r3, #0]
      break;
 800cef6:	e0f2      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	885b      	ldrh	r3, [r3, #2]
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b05      	cmp	r3, #5
 800cf00:	f200 80ac 	bhi.w	800d05c <USBD_GetDescriptor+0x258>
 800cf04:	a201      	add	r2, pc, #4	; (adr r2, 800cf0c <USBD_GetDescriptor+0x108>)
 800cf06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0a:	bf00      	nop
 800cf0c:	0800cf25 	.word	0x0800cf25
 800cf10:	0800cf59 	.word	0x0800cf59
 800cf14:	0800cf8d 	.word	0x0800cf8d
 800cf18:	0800cfc1 	.word	0x0800cfc1
 800cf1c:	0800cff5 	.word	0x0800cff5
 800cf20:	0800d029 	.word	0x0800d029
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	7c12      	ldrb	r2, [r2, #16]
 800cf3c:	f107 0108 	add.w	r1, r7, #8
 800cf40:	4610      	mov	r0, r2
 800cf42:	4798      	blx	r3
 800cf44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf46:	e091      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 fab2 	bl	800d4b4 <USBD_CtlError>
            err++;
 800cf50:	7afb      	ldrb	r3, [r7, #11]
 800cf52:	3301      	adds	r3, #1
 800cf54:	72fb      	strb	r3, [r7, #11]
          break;
 800cf56:	e089      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00b      	beq.n	800cf7c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	7c12      	ldrb	r2, [r2, #16]
 800cf70:	f107 0108 	add.w	r1, r7, #8
 800cf74:	4610      	mov	r0, r2
 800cf76:	4798      	blx	r3
 800cf78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf7a:	e077      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fa98 	bl	800d4b4 <USBD_CtlError>
            err++;
 800cf84:	7afb      	ldrb	r3, [r7, #11]
 800cf86:	3301      	adds	r3, #1
 800cf88:	72fb      	strb	r3, [r7, #11]
          break;
 800cf8a:	e06f      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	7c12      	ldrb	r2, [r2, #16]
 800cfa4:	f107 0108 	add.w	r1, r7, #8
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfae:	e05d      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fa7e 	bl	800d4b4 <USBD_CtlError>
            err++;
 800cfb8:	7afb      	ldrb	r3, [r7, #11]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	72fb      	strb	r3, [r7, #11]
          break;
 800cfbe:	e055      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00b      	beq.n	800cfe4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	7c12      	ldrb	r2, [r2, #16]
 800cfd8:	f107 0108 	add.w	r1, r7, #8
 800cfdc:	4610      	mov	r0, r2
 800cfde:	4798      	blx	r3
 800cfe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfe2:	e043      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fa64 	bl	800d4b4 <USBD_CtlError>
            err++;
 800cfec:	7afb      	ldrb	r3, [r7, #11]
 800cfee:	3301      	adds	r3, #1
 800cff0:	72fb      	strb	r3, [r7, #11]
          break;
 800cff2:	e03b      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d006:	695b      	ldr	r3, [r3, #20]
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	7c12      	ldrb	r2, [r2, #16]
 800d00c:	f107 0108 	add.w	r1, r7, #8
 800d010:	4610      	mov	r0, r2
 800d012:	4798      	blx	r3
 800d014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d016:	e029      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa4a 	bl	800d4b4 <USBD_CtlError>
            err++;
 800d020:	7afb      	ldrb	r3, [r7, #11]
 800d022:	3301      	adds	r3, #1
 800d024:	72fb      	strb	r3, [r7, #11]
          break;
 800d026:	e021      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00b      	beq.n	800d04c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	7c12      	ldrb	r2, [r2, #16]
 800d040:	f107 0108 	add.w	r1, r7, #8
 800d044:	4610      	mov	r0, r2
 800d046:	4798      	blx	r3
 800d048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d04a:	e00f      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d04c:	6839      	ldr	r1, [r7, #0]
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa30 	bl	800d4b4 <USBD_CtlError>
            err++;
 800d054:	7afb      	ldrb	r3, [r7, #11]
 800d056:	3301      	adds	r3, #1
 800d058:	72fb      	strb	r3, [r7, #11]
          break;
 800d05a:	e007      	b.n	800d06c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fa28 	bl	800d4b4 <USBD_CtlError>
          err++;
 800d064:	7afb      	ldrb	r3, [r7, #11]
 800d066:	3301      	adds	r3, #1
 800d068:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d06a:	bf00      	nop
      }
      break;
 800d06c:	e037      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	7c1b      	ldrb	r3, [r3, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d109      	bne.n	800d08a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07e:	f107 0208 	add.w	r2, r7, #8
 800d082:	4610      	mov	r0, r2
 800d084:	4798      	blx	r3
 800d086:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d088:	e029      	b.n	800d0de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fa11 	bl	800d4b4 <USBD_CtlError>
        err++;
 800d092:	7afb      	ldrb	r3, [r7, #11]
 800d094:	3301      	adds	r3, #1
 800d096:	72fb      	strb	r3, [r7, #11]
      break;
 800d098:	e021      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7c1b      	ldrb	r3, [r3, #16]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10d      	bne.n	800d0be <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0aa:	f107 0208 	add.w	r2, r7, #8
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	4798      	blx	r3
 800d0b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	2207      	movs	r2, #7
 800d0ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0bc:	e00f      	b.n	800d0de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f9f7 	bl	800d4b4 <USBD_CtlError>
        err++;
 800d0c6:	7afb      	ldrb	r3, [r7, #11]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	72fb      	strb	r3, [r7, #11]
      break;
 800d0cc:	e007      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f9ef 	bl	800d4b4 <USBD_CtlError>
      err++;
 800d0d6:	7afb      	ldrb	r3, [r7, #11]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	72fb      	strb	r3, [r7, #11]
      break;
 800d0dc:	bf00      	nop
  }

  if (err != 0U)
 800d0de:	7afb      	ldrb	r3, [r7, #11]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d11e      	bne.n	800d122 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	88db      	ldrh	r3, [r3, #6]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d016      	beq.n	800d11a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d0ec:	893b      	ldrh	r3, [r7, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00e      	beq.n	800d110 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	88da      	ldrh	r2, [r3, #6]
 800d0f6:	893b      	ldrh	r3, [r7, #8]
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	bf28      	it	cs
 800d0fc:	4613      	movcs	r3, r2
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d102:	893b      	ldrh	r3, [r7, #8]
 800d104:	461a      	mov	r2, r3
 800d106:	68f9      	ldr	r1, [r7, #12]
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 fa44 	bl	800d596 <USBD_CtlSendData>
 800d10e:	e009      	b.n	800d124 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f9ce 	bl	800d4b4 <USBD_CtlError>
 800d118:	e004      	b.n	800d124 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fa95 	bl	800d64a <USBD_CtlSendStatus>
 800d120:	e000      	b.n	800d124 <USBD_GetDescriptor+0x320>
    return;
 800d122:	bf00      	nop
  }
}
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop

0800d12c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	889b      	ldrh	r3, [r3, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d131      	bne.n	800d1a2 <USBD_SetAddress+0x76>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	88db      	ldrh	r3, [r3, #6]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d12d      	bne.n	800d1a2 <USBD_SetAddress+0x76>
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	885b      	ldrh	r3, [r3, #2]
 800d14a:	2b7f      	cmp	r3, #127	; 0x7f
 800d14c:	d829      	bhi.n	800d1a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	885b      	ldrh	r3, [r3, #2]
 800d152:	b2db      	uxtb	r3, r3
 800d154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d158:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b03      	cmp	r3, #3
 800d164:	d104      	bne.n	800d170 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d166:	6839      	ldr	r1, [r7, #0]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f9a3 	bl	800d4b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d16e:	e01d      	b.n	800d1ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	7bfa      	ldrb	r2, [r7, #15]
 800d174:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f001 f803 	bl	800e188 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fa61 	bl	800d64a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d188:	7bfb      	ldrb	r3, [r7, #15]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d004      	beq.n	800d198 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2202      	movs	r2, #2
 800d192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d196:	e009      	b.n	800d1ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1a0:	e004      	b.n	800d1ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 f985 	bl	800d4b4 <USBD_CtlError>
  }
}
 800d1aa:	bf00      	nop
 800d1ac:	bf00      	nop
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	885b      	ldrh	r3, [r3, #2]
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	4b4c      	ldr	r3, [pc, #304]	; (800d2fc <USBD_SetConfig+0x148>)
 800d1ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1cc:	4b4b      	ldr	r3, [pc, #300]	; (800d2fc <USBD_SetConfig+0x148>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d905      	bls.n	800d1e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f96c 	bl	800d4b4 <USBD_CtlError>
    return USBD_FAIL;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e088      	b.n	800d2f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d002      	beq.n	800d1f2 <USBD_SetConfig+0x3e>
 800d1ec:	2b03      	cmp	r3, #3
 800d1ee:	d025      	beq.n	800d23c <USBD_SetConfig+0x88>
 800d1f0:	e071      	b.n	800d2d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1f2:	4b42      	ldr	r3, [pc, #264]	; (800d2fc <USBD_SetConfig+0x148>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d01c      	beq.n	800d234 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d1fa:	4b40      	ldr	r3, [pc, #256]	; (800d2fc <USBD_SetConfig+0x148>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d204:	4b3d      	ldr	r3, [pc, #244]	; (800d2fc <USBD_SetConfig+0x148>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff f91e 	bl	800c44c <USBD_SetClassConfig>
 800d210:	4603      	mov	r3, r0
 800d212:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d004      	beq.n	800d224 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f949 	bl	800d4b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d222:	e065      	b.n	800d2f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 fa10 	bl	800d64a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2203      	movs	r2, #3
 800d22e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d232:	e05d      	b.n	800d2f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fa08 	bl	800d64a <USBD_CtlSendStatus>
      break;
 800d23a:	e059      	b.n	800d2f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d23c:	4b2f      	ldr	r3, [pc, #188]	; (800d2fc <USBD_SetConfig+0x148>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d112      	bne.n	800d26a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2202      	movs	r2, #2
 800d248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d24c:	4b2b      	ldr	r3, [pc, #172]	; (800d2fc <USBD_SetConfig+0x148>)
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	461a      	mov	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d256:	4b29      	ldr	r3, [pc, #164]	; (800d2fc <USBD_SetConfig+0x148>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7ff f911 	bl	800c484 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f9f1 	bl	800d64a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d268:	e042      	b.n	800d2f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d26a:	4b24      	ldr	r3, [pc, #144]	; (800d2fc <USBD_SetConfig+0x148>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	429a      	cmp	r2, r3
 800d276:	d02a      	beq.n	800d2ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff f8ff 	bl	800c484 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d286:	4b1d      	ldr	r3, [pc, #116]	; (800d2fc <USBD_SetConfig+0x148>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d290:	4b1a      	ldr	r3, [pc, #104]	; (800d2fc <USBD_SetConfig+0x148>)
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff f8d8 	bl	800c44c <USBD_SetClassConfig>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00f      	beq.n	800d2c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 f903 	bl	800d4b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7ff f8e4 	bl	800c484 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2202      	movs	r2, #2
 800d2c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2c4:	e014      	b.n	800d2f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f9bf 	bl	800d64a <USBD_CtlSendStatus>
      break;
 800d2cc:	e010      	b.n	800d2f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f9bb 	bl	800d64a <USBD_CtlSendStatus>
      break;
 800d2d4:	e00c      	b.n	800d2f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d2d6:	6839      	ldr	r1, [r7, #0]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 f8eb 	bl	800d4b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2de:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <USBD_SetConfig+0x148>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff f8cd 	bl	800c484 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ee:	bf00      	nop
  }

  return ret;
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20000610 	.word	0x20000610

0800d300 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	88db      	ldrh	r3, [r3, #6]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d004      	beq.n	800d31c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d312:	6839      	ldr	r1, [r7, #0]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f8cd 	bl	800d4b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d31a:	e023      	b.n	800d364 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b02      	cmp	r3, #2
 800d326:	dc02      	bgt.n	800d32e <USBD_GetConfig+0x2e>
 800d328:	2b00      	cmp	r3, #0
 800d32a:	dc03      	bgt.n	800d334 <USBD_GetConfig+0x34>
 800d32c:	e015      	b.n	800d35a <USBD_GetConfig+0x5a>
 800d32e:	2b03      	cmp	r3, #3
 800d330:	d00b      	beq.n	800d34a <USBD_GetConfig+0x4a>
 800d332:	e012      	b.n	800d35a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3308      	adds	r3, #8
 800d33e:	2201      	movs	r2, #1
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 f927 	bl	800d596 <USBD_CtlSendData>
        break;
 800d348:	e00c      	b.n	800d364 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3304      	adds	r3, #4
 800d34e:	2201      	movs	r2, #1
 800d350:	4619      	mov	r1, r3
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 f91f 	bl	800d596 <USBD_CtlSendData>
        break;
 800d358:	e004      	b.n	800d364 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f8a9 	bl	800d4b4 <USBD_CtlError>
        break;
 800d362:	bf00      	nop
}
 800d364:	bf00      	nop
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	3b01      	subs	r3, #1
 800d380:	2b02      	cmp	r3, #2
 800d382:	d81e      	bhi.n	800d3c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	88db      	ldrh	r3, [r3, #6]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d004      	beq.n	800d396 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d38c:	6839      	ldr	r1, [r7, #0]
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f890 	bl	800d4b4 <USBD_CtlError>
        break;
 800d394:	e01a      	b.n	800d3cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d005      	beq.n	800d3b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	f043 0202 	orr.w	r2, r3, #2
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	330c      	adds	r3, #12
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f8eb 	bl	800d596 <USBD_CtlSendData>
      break;
 800d3c0:	e004      	b.n	800d3cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f875 	bl	800d4b4 <USBD_CtlError>
      break;
 800d3ca:	bf00      	nop
  }
}
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	885b      	ldrh	r3, [r3, #2]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d106      	bne.n	800d3f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 f92b 	bl	800d64a <USBD_CtlSendStatus>
  }
}
 800d3f4:	bf00      	nop
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	3b01      	subs	r3, #1
 800d410:	2b02      	cmp	r3, #2
 800d412:	d80b      	bhi.n	800d42c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	885b      	ldrh	r3, [r3, #2]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d10c      	bne.n	800d436 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 f910 	bl	800d64a <USBD_CtlSendStatus>
      }
      break;
 800d42a:	e004      	b.n	800d436 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 f840 	bl	800d4b4 <USBD_CtlError>
      break;
 800d434:	e000      	b.n	800d438 <USBD_ClrFeature+0x3c>
      break;
 800d436:	bf00      	nop
  }
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	781a      	ldrb	r2, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	3301      	adds	r3, #1
 800d45a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	781a      	ldrb	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3301      	adds	r3, #1
 800d468:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f7ff fa91 	bl	800c992 <SWAPBYTE>
 800d470:	4603      	mov	r3, r0
 800d472:	461a      	mov	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	3301      	adds	r3, #1
 800d47c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3301      	adds	r3, #1
 800d482:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f7ff fa84 	bl	800c992 <SWAPBYTE>
 800d48a:	4603      	mov	r3, r0
 800d48c:	461a      	mov	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3301      	adds	r3, #1
 800d496:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	3301      	adds	r3, #1
 800d49c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f7ff fa77 	bl	800c992 <SWAPBYTE>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	80da      	strh	r2, [r3, #6]
}
 800d4ac:	bf00      	nop
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4be:	2180      	movs	r1, #128	; 0x80
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 fdc9 	bl	800e058 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fdc5 	bl	800e058 <USBD_LL_StallEP>
}
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b086      	sub	sp, #24
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d036      	beq.n	800d55a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d4f0:	6938      	ldr	r0, [r7, #16]
 800d4f2:	f000 f836 	bl	800d562 <USBD_GetLen>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	005b      	lsls	r3, r3, #1
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	4413      	add	r3, r2
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	7812      	ldrb	r2, [r2, #0]
 800d50e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d510:	7dfb      	ldrb	r3, [r7, #23]
 800d512:	3301      	adds	r3, #1
 800d514:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d516:	7dfb      	ldrb	r3, [r7, #23]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	4413      	add	r3, r2
 800d51c:	2203      	movs	r2, #3
 800d51e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d520:	7dfb      	ldrb	r3, [r7, #23]
 800d522:	3301      	adds	r3, #1
 800d524:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d526:	e013      	b.n	800d550 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d528:	7dfb      	ldrb	r3, [r7, #23]
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	4413      	add	r3, r2
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	7812      	ldrb	r2, [r2, #0]
 800d532:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	3301      	adds	r3, #1
 800d538:	613b      	str	r3, [r7, #16]
    idx++;
 800d53a:	7dfb      	ldrb	r3, [r7, #23]
 800d53c:	3301      	adds	r3, #1
 800d53e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d540:	7dfb      	ldrb	r3, [r7, #23]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	4413      	add	r3, r2
 800d546:	2200      	movs	r2, #0
 800d548:	701a      	strb	r2, [r3, #0]
    idx++;
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
 800d54c:	3301      	adds	r3, #1
 800d54e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1e7      	bne.n	800d528 <USBD_GetString+0x52>
 800d558:	e000      	b.n	800d55c <USBD_GetString+0x86>
    return;
 800d55a:	bf00      	nop
  }
}
 800d55c:	3718      	adds	r7, #24
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d562:	b480      	push	{r7}
 800d564:	b085      	sub	sp, #20
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d56a:	2300      	movs	r3, #0
 800d56c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d572:	e005      	b.n	800d580 <USBD_GetLen+0x1e>
  {
    len++;
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	3301      	adds	r3, #1
 800d578:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	3301      	adds	r3, #1
 800d57e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1f5      	bne.n	800d574 <USBD_GetLen+0x12>
  }

  return len;
 800d588:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	60b9      	str	r1, [r7, #8]
 800d5a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f000 fe19 	bl	800e1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	2100      	movs	r1, #0
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f000 fe08 	bl	800e1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	60f8      	str	r0, [r7, #12]
 800d5f6:	60b9      	str	r1, [r7, #8]
 800d5f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2203      	movs	r2, #3
 800d5fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	2100      	movs	r1, #0
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f000 fe23 	bl	800e264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	2100      	movs	r1, #0
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f000 fe12 	bl	800e264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2204      	movs	r2, #4
 800d656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d65a:	2300      	movs	r3, #0
 800d65c:	2200      	movs	r2, #0
 800d65e:	2100      	movs	r1, #0
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fdc7 	bl	800e1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2205      	movs	r2, #5
 800d67c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d680:	2300      	movs	r3, #0
 800d682:	2200      	movs	r2, #0
 800d684:	2100      	movs	r1, #0
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fdec 	bl	800e264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
	...

0800d698 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d698:	b480      	push	{r7}
 800d69a:	b087      	sub	sp, #28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6ae:	4b1f      	ldr	r3, [pc, #124]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6b0:	7a5b      	ldrb	r3, [r3, #9]
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d131      	bne.n	800d71c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6b8:	4b1c      	ldr	r3, [pc, #112]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6ba:	7a5b      	ldrb	r3, [r3, #9]
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	461a      	mov	r2, r3
 800d6c0:	4b1a      	ldr	r3, [pc, #104]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6c6:	4b19      	ldr	r3, [pc, #100]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6c8:	7a5b      	ldrb	r3, [r3, #9]
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	4a17      	ldr	r2, [pc, #92]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6d6:	4b15      	ldr	r3, [pc, #84]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6d8:	7a5b      	ldrb	r3, [r3, #9]
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	461a      	mov	r2, r3
 800d6de:	4b13      	ldr	r3, [pc, #76]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6e0:	4413      	add	r3, r2
 800d6e2:	79fa      	ldrb	r2, [r7, #7]
 800d6e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d6e6:	4b11      	ldr	r3, [pc, #68]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6e8:	7a5b      	ldrb	r3, [r3, #9]
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	1c5a      	adds	r2, r3, #1
 800d6ee:	b2d1      	uxtb	r1, r2
 800d6f0:	4a0e      	ldr	r2, [pc, #56]	; (800d72c <FATFS_LinkDriverEx+0x94>)
 800d6f2:	7251      	strb	r1, [r2, #9]
 800d6f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6f6:	7dbb      	ldrb	r3, [r7, #22]
 800d6f8:	3330      	adds	r3, #48	; 0x30
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	3301      	adds	r3, #1
 800d704:	223a      	movs	r2, #58	; 0x3a
 800d706:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	3302      	adds	r3, #2
 800d70c:	222f      	movs	r2, #47	; 0x2f
 800d70e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	3303      	adds	r3, #3
 800d714:	2200      	movs	r2, #0
 800d716:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	371c      	adds	r7, #28
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	20000614 	.word	0x20000614

0800d730 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d73a:	2200      	movs	r2, #0
 800d73c:	6839      	ldr	r1, [r7, #0]
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7ff ffaa 	bl	800d698 <FATFS_LinkDriverEx>
 800d744:	4603      	mov	r3, r0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d754:	2200      	movs	r2, #0
 800d756:	4912      	ldr	r1, [pc, #72]	; (800d7a0 <MX_USB_DEVICE_Init+0x50>)
 800d758:	4812      	ldr	r0, [pc, #72]	; (800d7a4 <MX_USB_DEVICE_Init+0x54>)
 800d75a:	f7fe fe09 	bl	800c370 <USBD_Init>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d764:	f7f3 fb2e 	bl	8000dc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d768:	490f      	ldr	r1, [pc, #60]	; (800d7a8 <MX_USB_DEVICE_Init+0x58>)
 800d76a:	480e      	ldr	r0, [pc, #56]	; (800d7a4 <MX_USB_DEVICE_Init+0x54>)
 800d76c:	f7fe fe30 	bl	800c3d0 <USBD_RegisterClass>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d776:	f7f3 fb25 	bl	8000dc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d77a:	490c      	ldr	r1, [pc, #48]	; (800d7ac <MX_USB_DEVICE_Init+0x5c>)
 800d77c:	4809      	ldr	r0, [pc, #36]	; (800d7a4 <MX_USB_DEVICE_Init+0x54>)
 800d77e:	f7fe fd51 	bl	800c224 <USBD_CDC_RegisterInterface>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d001      	beq.n	800d78c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d788:	f7f3 fb1c 	bl	8000dc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d78c:	4805      	ldr	r0, [pc, #20]	; (800d7a4 <MX_USB_DEVICE_Init+0x54>)
 800d78e:	f7fe fe46 	bl	800c41e <USBD_Start>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d798:	f7f3 fb14 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d79c:	bf00      	nop
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20000130 	.word	0x20000130
 800d7a4:	20000620 	.word	0x20000620
 800d7a8:	20000018 	.word	0x20000018
 800d7ac:	2000011c 	.word	0x2000011c

0800d7b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	4905      	ldr	r1, [pc, #20]	; (800d7cc <CDC_Init_FS+0x1c>)
 800d7b8:	4805      	ldr	r0, [pc, #20]	; (800d7d0 <CDC_Init_FS+0x20>)
 800d7ba:	f7fe fd48 	bl	800c24e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d7be:	4905      	ldr	r1, [pc, #20]	; (800d7d4 <CDC_Init_FS+0x24>)
 800d7c0:	4803      	ldr	r0, [pc, #12]	; (800d7d0 <CDC_Init_FS+0x20>)
 800d7c2:	f7fe fd62 	bl	800c28a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d7c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	200010f0 	.word	0x200010f0
 800d7d0:	20000620 	.word	0x20000620
 800d7d4:	200008f0 	.word	0x200008f0

0800d7d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d7dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	6039      	str	r1, [r7, #0]
 800d7f2:	71fb      	strb	r3, [r7, #7]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d7f8:	79fb      	ldrb	r3, [r7, #7]
 800d7fa:	2b23      	cmp	r3, #35	; 0x23
 800d7fc:	d84a      	bhi.n	800d894 <CDC_Control_FS+0xac>
 800d7fe:	a201      	add	r2, pc, #4	; (adr r2, 800d804 <CDC_Control_FS+0x1c>)
 800d800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d804:	0800d895 	.word	0x0800d895
 800d808:	0800d895 	.word	0x0800d895
 800d80c:	0800d895 	.word	0x0800d895
 800d810:	0800d895 	.word	0x0800d895
 800d814:	0800d895 	.word	0x0800d895
 800d818:	0800d895 	.word	0x0800d895
 800d81c:	0800d895 	.word	0x0800d895
 800d820:	0800d895 	.word	0x0800d895
 800d824:	0800d895 	.word	0x0800d895
 800d828:	0800d895 	.word	0x0800d895
 800d82c:	0800d895 	.word	0x0800d895
 800d830:	0800d895 	.word	0x0800d895
 800d834:	0800d895 	.word	0x0800d895
 800d838:	0800d895 	.word	0x0800d895
 800d83c:	0800d895 	.word	0x0800d895
 800d840:	0800d895 	.word	0x0800d895
 800d844:	0800d895 	.word	0x0800d895
 800d848:	0800d895 	.word	0x0800d895
 800d84c:	0800d895 	.word	0x0800d895
 800d850:	0800d895 	.word	0x0800d895
 800d854:	0800d895 	.word	0x0800d895
 800d858:	0800d895 	.word	0x0800d895
 800d85c:	0800d895 	.word	0x0800d895
 800d860:	0800d895 	.word	0x0800d895
 800d864:	0800d895 	.word	0x0800d895
 800d868:	0800d895 	.word	0x0800d895
 800d86c:	0800d895 	.word	0x0800d895
 800d870:	0800d895 	.word	0x0800d895
 800d874:	0800d895 	.word	0x0800d895
 800d878:	0800d895 	.word	0x0800d895
 800d87c:	0800d895 	.word	0x0800d895
 800d880:	0800d895 	.word	0x0800d895
 800d884:	0800d895 	.word	0x0800d895
 800d888:	0800d895 	.word	0x0800d895
 800d88c:	0800d895 	.word	0x0800d895
 800d890:	0800d895 	.word	0x0800d895
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d894:	bf00      	nop
  }

  return (USBD_OK);
 800d896:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d898:	4618      	mov	r0, r3
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d8ae:	6879      	ldr	r1, [r7, #4]
 800d8b0:	4805      	ldr	r0, [pc, #20]	; (800d8c8 <CDC_Receive_FS+0x24>)
 800d8b2:	f7fe fcea 	bl	800c28a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d8b6:	4804      	ldr	r0, [pc, #16]	; (800d8c8 <CDC_Receive_FS+0x24>)
 800d8b8:	f7fe fd30 	bl	800c31c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d8bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	20000620 	.word	0x20000620

0800d8cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d8dc:	4b0d      	ldr	r3, [pc, #52]	; (800d914 <CDC_Transmit_FS+0x48>)
 800d8de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e00b      	b.n	800d90a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d8f2:	887b      	ldrh	r3, [r7, #2]
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	6879      	ldr	r1, [r7, #4]
 800d8f8:	4806      	ldr	r0, [pc, #24]	; (800d914 <CDC_Transmit_FS+0x48>)
 800d8fa:	f7fe fca8 	bl	800c24e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d8fe:	4805      	ldr	r0, [pc, #20]	; (800d914 <CDC_Transmit_FS+0x48>)
 800d900:	f7fe fcdc 	bl	800c2bc <USBD_CDC_TransmitPacket>
 800d904:	4603      	mov	r3, r0
 800d906:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d908:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	20000620 	.word	0x20000620

0800d918 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d918:	b480      	push	{r7}
 800d91a:	b087      	sub	sp, #28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	4613      	mov	r3, r2
 800d924:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d92a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	371c      	adds	r7, #28
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
	...

0800d93c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	6039      	str	r1, [r7, #0]
 800d946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2212      	movs	r2, #18
 800d94c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d94e:	4b03      	ldr	r3, [pc, #12]	; (800d95c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d950:	4618      	mov	r0, r3
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	20000150 	.word	0x20000150

0800d960 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	4603      	mov	r3, r0
 800d968:	6039      	str	r1, [r7, #0]
 800d96a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	2204      	movs	r2, #4
 800d970:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d972:	4b03      	ldr	r3, [pc, #12]	; (800d980 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d974:	4618      	mov	r0, r3
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	20000170 	.word	0x20000170

0800d984 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	4603      	mov	r3, r0
 800d98c:	6039      	str	r1, [r7, #0]
 800d98e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d990:	79fb      	ldrb	r3, [r7, #7]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d105      	bne.n	800d9a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	4907      	ldr	r1, [pc, #28]	; (800d9b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d99a:	4808      	ldr	r0, [pc, #32]	; (800d9bc <USBD_FS_ProductStrDescriptor+0x38>)
 800d99c:	f7ff fd9b 	bl	800d4d6 <USBD_GetString>
 800d9a0:	e004      	b.n	800d9ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	4904      	ldr	r1, [pc, #16]	; (800d9b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d9a6:	4805      	ldr	r0, [pc, #20]	; (800d9bc <USBD_FS_ProductStrDescriptor+0x38>)
 800d9a8:	f7ff fd95 	bl	800d4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9ac:	4b02      	ldr	r3, [pc, #8]	; (800d9b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	200018f0 	.word	0x200018f0
 800d9bc:	0800f430 	.word	0x0800f430

0800d9c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	6039      	str	r1, [r7, #0]
 800d9ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	4904      	ldr	r1, [pc, #16]	; (800d9e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d9d0:	4804      	ldr	r0, [pc, #16]	; (800d9e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d9d2:	f7ff fd80 	bl	800d4d6 <USBD_GetString>
  return USBD_StrDesc;
 800d9d6:	4b02      	ldr	r3, [pc, #8]	; (800d9e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	200018f0 	.word	0x200018f0
 800d9e4:	0800f448 	.word	0x0800f448

0800d9e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	6039      	str	r1, [r7, #0]
 800d9f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	221a      	movs	r2, #26
 800d9f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d9fa:	f000 f855 	bl	800daa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d9fe:	4b02      	ldr	r3, [pc, #8]	; (800da08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800da00:	4618      	mov	r0, r3
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	20000174 	.word	0x20000174

0800da0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	4603      	mov	r3, r0
 800da14:	6039      	str	r1, [r7, #0]
 800da16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800da18:	79fb      	ldrb	r3, [r7, #7]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d105      	bne.n	800da2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	4907      	ldr	r1, [pc, #28]	; (800da40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da22:	4808      	ldr	r0, [pc, #32]	; (800da44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da24:	f7ff fd57 	bl	800d4d6 <USBD_GetString>
 800da28:	e004      	b.n	800da34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	4904      	ldr	r1, [pc, #16]	; (800da40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da2e:	4805      	ldr	r0, [pc, #20]	; (800da44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da30:	f7ff fd51 	bl	800d4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da34:	4b02      	ldr	r3, [pc, #8]	; (800da40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800da36:	4618      	mov	r0, r3
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	200018f0 	.word	0x200018f0
 800da44:	0800f45c 	.word	0x0800f45c

0800da48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4603      	mov	r3, r0
 800da50:	6039      	str	r1, [r7, #0]
 800da52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d105      	bne.n	800da66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da5a:	683a      	ldr	r2, [r7, #0]
 800da5c:	4907      	ldr	r1, [pc, #28]	; (800da7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da5e:	4808      	ldr	r0, [pc, #32]	; (800da80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da60:	f7ff fd39 	bl	800d4d6 <USBD_GetString>
 800da64:	e004      	b.n	800da70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	4904      	ldr	r1, [pc, #16]	; (800da7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da6a:	4805      	ldr	r0, [pc, #20]	; (800da80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da6c:	f7ff fd33 	bl	800d4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800da72:	4618      	mov	r0, r3
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	200018f0 	.word	0x200018f0
 800da80:	0800f468 	.word	0x0800f468

0800da84 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	6039      	str	r1, [r7, #0]
 800da8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	220c      	movs	r2, #12
 800da94:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800da96:	4b03      	ldr	r3, [pc, #12]	; (800daa4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800da98:	4618      	mov	r0, r3
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr
 800daa4:	20000164 	.word	0x20000164

0800daa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800daae:	4b0f      	ldr	r3, [pc, #60]	; (800daec <Get_SerialNum+0x44>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dab4:	4b0e      	ldr	r3, [pc, #56]	; (800daf0 <Get_SerialNum+0x48>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800daba:	4b0e      	ldr	r3, [pc, #56]	; (800daf4 <Get_SerialNum+0x4c>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4413      	add	r3, r2
 800dac6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d009      	beq.n	800dae2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dace:	2208      	movs	r2, #8
 800dad0:	4909      	ldr	r1, [pc, #36]	; (800daf8 <Get_SerialNum+0x50>)
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f000 f814 	bl	800db00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dad8:	2204      	movs	r2, #4
 800dada:	4908      	ldr	r1, [pc, #32]	; (800dafc <Get_SerialNum+0x54>)
 800dadc:	68b8      	ldr	r0, [r7, #8]
 800dade:	f000 f80f 	bl	800db00 <IntToUnicode>
  }
}
 800dae2:	bf00      	nop
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	1fff7590 	.word	0x1fff7590
 800daf0:	1fff7594 	.word	0x1fff7594
 800daf4:	1fff7598 	.word	0x1fff7598
 800daf8:	20000176 	.word	0x20000176
 800dafc:	20000186 	.word	0x20000186

0800db00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800db00:	b480      	push	{r7}
 800db02:	b087      	sub	sp, #28
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	4613      	mov	r3, r2
 800db0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800db12:	2300      	movs	r3, #0
 800db14:	75fb      	strb	r3, [r7, #23]
 800db16:	e027      	b.n	800db68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	0f1b      	lsrs	r3, r3, #28
 800db1c:	2b09      	cmp	r3, #9
 800db1e:	d80b      	bhi.n	800db38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	0f1b      	lsrs	r3, r3, #28
 800db24:	b2da      	uxtb	r2, r3
 800db26:	7dfb      	ldrb	r3, [r7, #23]
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	4619      	mov	r1, r3
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	440b      	add	r3, r1
 800db30:	3230      	adds	r2, #48	; 0x30
 800db32:	b2d2      	uxtb	r2, r2
 800db34:	701a      	strb	r2, [r3, #0]
 800db36:	e00a      	b.n	800db4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	0f1b      	lsrs	r3, r3, #28
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	4619      	mov	r1, r3
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	440b      	add	r3, r1
 800db48:	3237      	adds	r2, #55	; 0x37
 800db4a:	b2d2      	uxtb	r2, r2
 800db4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	011b      	lsls	r3, r3, #4
 800db52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800db54:	7dfb      	ldrb	r3, [r7, #23]
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	3301      	adds	r3, #1
 800db5a:	68ba      	ldr	r2, [r7, #8]
 800db5c:	4413      	add	r3, r2
 800db5e:	2200      	movs	r2, #0
 800db60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db62:	7dfb      	ldrb	r3, [r7, #23]
 800db64:	3301      	adds	r3, #1
 800db66:	75fb      	strb	r3, [r7, #23]
 800db68:	7dfa      	ldrb	r2, [r7, #23]
 800db6a:	79fb      	ldrb	r3, [r7, #7]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d3d3      	bcc.n	800db18 <IntToUnicode+0x18>
  }
}
 800db70:	bf00      	nop
 800db72:	bf00      	nop
 800db74:	371c      	adds	r7, #28
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr
	...

0800db80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b0b0      	sub	sp, #192	; 0xc0
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800db8c:	2200      	movs	r2, #0
 800db8e:	601a      	str	r2, [r3, #0]
 800db90:	605a      	str	r2, [r3, #4]
 800db92:	609a      	str	r2, [r3, #8]
 800db94:	60da      	str	r2, [r3, #12]
 800db96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800db98:	f107 0318 	add.w	r3, r7, #24
 800db9c:	2294      	movs	r2, #148	; 0x94
 800db9e:	2100      	movs	r1, #0
 800dba0:	4618      	mov	r0, r3
 800dba2:	f000 fc3b 	bl	800e41c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dbae:	d15b      	bne.n	800dc68 <HAL_PCD_MspInit+0xe8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dbb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dbbc:	f107 0318 	add.w	r3, r7, #24
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7f6 fb2f 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d001      	beq.n	800dbd0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800dbcc:	f7f3 f8fa 	bl	8000dc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbd0:	4b27      	ldr	r3, [pc, #156]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dbd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbd4:	4a26      	ldr	r2, [pc, #152]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dbd6:	f043 0301 	orr.w	r3, r3, #1
 800dbda:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dbdc:	4b24      	ldr	r3, [pc, #144]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dbde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	617b      	str	r3, [r7, #20]
 800dbe6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dbe8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dbec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbf0:	2302      	movs	r3, #2
 800dbf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbfc:	2303      	movs	r3, #3
 800dbfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dc02:	230a      	movs	r3, #10
 800dc04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dc12:	f7f3 fe6d 	bl	80018f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc16:	4b16      	ldr	r3, [pc, #88]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc1a:	4a15      	ldr	r2, [pc, #84]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dc20:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dc22:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc2a:	613b      	str	r3, [r7, #16]
 800dc2c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc2e:	4b10      	ldr	r3, [pc, #64]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d114      	bne.n	800dc64 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc3a:	4b0d      	ldr	r3, [pc, #52]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc3e:	4a0c      	ldr	r2, [pc, #48]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc44:	6593      	str	r3, [r2, #88]	; 0x58
 800dc46:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800dc52:	f7f5 fbd3 	bl	80033fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc56:	4b06      	ldr	r3, [pc, #24]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc5a:	4a05      	ldr	r2, [pc, #20]	; (800dc70 <HAL_PCD_MspInit+0xf0>)
 800dc5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc60:	6593      	str	r3, [r2, #88]	; 0x58
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dc62:	e001      	b.n	800dc68 <HAL_PCD_MspInit+0xe8>
      HAL_PWREx_EnableVddUSB();
 800dc64:	f7f5 fbca 	bl	80033fc <HAL_PWREx_EnableVddUSB>
}
 800dc68:	bf00      	nop
 800dc6a:	37c0      	adds	r7, #192	; 0xc0
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	40021000 	.word	0x40021000

0800dc74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	f7fe fc12 	bl	800c4b4 <USBD_LL_SetupStage>
}
 800dc90:	bf00      	nop
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	460b      	mov	r3, r1
 800dca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dcaa:	78fa      	ldrb	r2, [r7, #3]
 800dcac:	6879      	ldr	r1, [r7, #4]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	00db      	lsls	r3, r3, #3
 800dcb2:	4413      	add	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	440b      	add	r3, r1
 800dcb8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	78fb      	ldrb	r3, [r7, #3]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	f7fe fc4c 	bl	800c55e <USBD_LL_DataOutStage>
}
 800dcc6:	bf00      	nop
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dce0:	78fa      	ldrb	r2, [r7, #3]
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	4613      	mov	r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	4413      	add	r3, r2
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	440b      	add	r3, r1
 800dcee:	334c      	adds	r3, #76	; 0x4c
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	78fb      	ldrb	r3, [r7, #3]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	f7fe fc95 	bl	800c624 <USBD_LL_DataInStage>
}
 800dcfa:	bf00      	nop
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe fda9 	bl	800c868 <USBD_LL_SOF>
}
 800dd16:	bf00      	nop
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b084      	sub	sp, #16
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd26:	2301      	movs	r3, #1
 800dd28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d001      	beq.n	800dd36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dd32:	f7f3 f847 	bl	8000dc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd3c:	7bfa      	ldrb	r2, [r7, #15]
 800dd3e:	4611      	mov	r1, r2
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fe fd53 	bl	800c7ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fe fcff 	bl	800c750 <USBD_LL_Reset>
}
 800dd52:	bf00      	nop
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	6812      	ldr	r2, [r2, #0]
 800dd72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd76:	f043 0301 	orr.w	r3, r3, #1
 800dd7a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe fd42 	bl	800c80c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a1b      	ldr	r3, [r3, #32]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d005      	beq.n	800dd9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd90:	4b04      	ldr	r3, [pc, #16]	; (800dda4 <HAL_PCD_SuspendCallback+0x48>)
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	4a03      	ldr	r2, [pc, #12]	; (800dda4 <HAL_PCD_SuspendCallback+0x48>)
 800dd96:	f043 0306 	orr.w	r3, r3, #6
 800dd9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	e000ed00 	.word	0xe000ed00

0800dda8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6812      	ldr	r2, [r2, #0]
 800ddbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ddc2:	f023 0301 	bic.w	r3, r3, #1
 800ddc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a1b      	ldr	r3, [r3, #32]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d007      	beq.n	800dde0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddd0:	4b08      	ldr	r3, [pc, #32]	; (800ddf4 <HAL_PCD_ResumeCallback+0x4c>)
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	4a07      	ldr	r2, [pc, #28]	; (800ddf4 <HAL_PCD_ResumeCallback+0x4c>)
 800ddd6:	f023 0306 	bic.w	r3, r3, #6
 800ddda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dddc:	f000 faf4 	bl	800e3c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fe fd26 	bl	800c838 <USBD_LL_Resume>
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	e000ed00 	.word	0xe000ed00

0800ddf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	460b      	mov	r3, r1
 800de02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de0a:	78fa      	ldrb	r2, [r7, #3]
 800de0c:	4611      	mov	r1, r2
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fd72 	bl	800c8f8 <USBD_LL_IsoOUTIncomplete>
}
 800de14:	bf00      	nop
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de2e:	78fa      	ldrb	r2, [r7, #3]
 800de30:	4611      	mov	r1, r2
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe fd3a 	bl	800c8ac <USBD_LL_IsoINIncomplete>
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fe fd78 	bl	800c944 <USBD_LL_DevConnected>
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe fd75 	bl	800c95a <USBD_LL_DevDisconnected>
}
 800de70:	bf00      	nop
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d139      	bne.n	800defc <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de88:	4a1f      	ldr	r2, [pc, #124]	; (800df08 <USBD_LL_Init+0x90>)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	4a1d      	ldr	r2, [pc, #116]	; (800df08 <USBD_LL_Init+0x90>)
 800de94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de98:	4b1b      	ldr	r3, [pc, #108]	; (800df08 <USBD_LL_Init+0x90>)
 800de9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800de9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dea0:	4b19      	ldr	r3, [pc, #100]	; (800df08 <USBD_LL_Init+0x90>)
 800dea2:	2206      	movs	r2, #6
 800dea4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dea6:	4b18      	ldr	r3, [pc, #96]	; (800df08 <USBD_LL_Init+0x90>)
 800dea8:	2202      	movs	r2, #2
 800deaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800deac:	4b16      	ldr	r3, [pc, #88]	; (800df08 <USBD_LL_Init+0x90>)
 800deae:	2200      	movs	r2, #0
 800deb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800deb2:	4b15      	ldr	r3, [pc, #84]	; (800df08 <USBD_LL_Init+0x90>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800deb8:	4b13      	ldr	r3, [pc, #76]	; (800df08 <USBD_LL_Init+0x90>)
 800deba:	2200      	movs	r2, #0
 800debc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800debe:	4b12      	ldr	r3, [pc, #72]	; (800df08 <USBD_LL_Init+0x90>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dec4:	4b10      	ldr	r3, [pc, #64]	; (800df08 <USBD_LL_Init+0x90>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800deca:	4b0f      	ldr	r3, [pc, #60]	; (800df08 <USBD_LL_Init+0x90>)
 800decc:	2200      	movs	r2, #0
 800dece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ded0:	480d      	ldr	r0, [pc, #52]	; (800df08 <USBD_LL_Init+0x90>)
 800ded2:	f7f4 f80f 	bl	8001ef4 <HAL_PCD_Init>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d001      	beq.n	800dee0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800dedc:	f7f2 ff72 	bl	8000dc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dee0:	2180      	movs	r1, #128	; 0x80
 800dee2:	4809      	ldr	r0, [pc, #36]	; (800df08 <USBD_LL_Init+0x90>)
 800dee4:	f7f5 f991 	bl	800320a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dee8:	2240      	movs	r2, #64	; 0x40
 800deea:	2100      	movs	r1, #0
 800deec:	4806      	ldr	r0, [pc, #24]	; (800df08 <USBD_LL_Init+0x90>)
 800deee:	f7f5 f945 	bl	800317c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800def2:	2280      	movs	r2, #128	; 0x80
 800def4:	2101      	movs	r1, #1
 800def6:	4804      	ldr	r0, [pc, #16]	; (800df08 <USBD_LL_Init+0x90>)
 800def8:	f7f5 f940 	bl	800317c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	20001af0 	.word	0x20001af0

0800df0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df14:	2300      	movs	r3, #0
 800df16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df22:	4618      	mov	r0, r3
 800df24:	f7f4 f90a 	bl	800213c <HAL_PCD_Start>
 800df28:	4603      	mov	r3, r0
 800df2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df2c:	7bbb      	ldrb	r3, [r7, #14]
 800df2e:	2b03      	cmp	r3, #3
 800df30:	d816      	bhi.n	800df60 <USBD_LL_Start+0x54>
 800df32:	a201      	add	r2, pc, #4	; (adr r2, 800df38 <USBD_LL_Start+0x2c>)
 800df34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df38:	0800df49 	.word	0x0800df49
 800df3c:	0800df4f 	.word	0x0800df4f
 800df40:	0800df55 	.word	0x0800df55
 800df44:	0800df5b 	.word	0x0800df5b
    case HAL_OK :
      usb_status = USBD_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	73fb      	strb	r3, [r7, #15]
    break;
 800df4c:	e00b      	b.n	800df66 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df4e:	2303      	movs	r3, #3
 800df50:	73fb      	strb	r3, [r7, #15]
    break;
 800df52:	e008      	b.n	800df66 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df54:	2301      	movs	r3, #1
 800df56:	73fb      	strb	r3, [r7, #15]
    break;
 800df58:	e005      	b.n	800df66 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df5a:	2303      	movs	r3, #3
 800df5c:	73fb      	strb	r3, [r7, #15]
    break;
 800df5e:	e002      	b.n	800df66 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800df60:	2303      	movs	r3, #3
 800df62:	73fb      	strb	r3, [r7, #15]
    break;
 800df64:	bf00      	nop
  }
  return usb_status;
 800df66:	7bfb      	ldrb	r3, [r7, #15]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	4608      	mov	r0, r1
 800df7a:	4611      	mov	r1, r2
 800df7c:	461a      	mov	r2, r3
 800df7e:	4603      	mov	r3, r0
 800df80:	70fb      	strb	r3, [r7, #3]
 800df82:	460b      	mov	r3, r1
 800df84:	70bb      	strb	r3, [r7, #2]
 800df86:	4613      	mov	r3, r2
 800df88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df8a:	2300      	movs	r3, #0
 800df8c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df8e:	2300      	movs	r3, #0
 800df90:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df98:	78bb      	ldrb	r3, [r7, #2]
 800df9a:	883a      	ldrh	r2, [r7, #0]
 800df9c:	78f9      	ldrb	r1, [r7, #3]
 800df9e:	f7f4 fdb4 	bl	8002b0a <HAL_PCD_EP_Open>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dfa6:	7bbb      	ldrb	r3, [r7, #14]
 800dfa8:	2b03      	cmp	r3, #3
 800dfaa:	d817      	bhi.n	800dfdc <USBD_LL_OpenEP+0x6c>
 800dfac:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <USBD_LL_OpenEP+0x44>)
 800dfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb2:	bf00      	nop
 800dfb4:	0800dfc5 	.word	0x0800dfc5
 800dfb8:	0800dfcb 	.word	0x0800dfcb
 800dfbc:	0800dfd1 	.word	0x0800dfd1
 800dfc0:	0800dfd7 	.word	0x0800dfd7
    case HAL_OK :
      usb_status = USBD_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc8:	e00b      	b.n	800dfe2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	73fb      	strb	r3, [r7, #15]
    break;
 800dfce:	e008      	b.n	800dfe2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd4:	e005      	b.n	800dfe2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	73fb      	strb	r3, [r7, #15]
    break;
 800dfda:	e002      	b.n	800dfe2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe0:	bf00      	nop
  }
  return usb_status;
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	460b      	mov	r3, r1
 800dff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dffc:	2300      	movs	r3, #0
 800dffe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e006:	78fa      	ldrb	r2, [r7, #3]
 800e008:	4611      	mov	r1, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7f4 fde5 	bl	8002bda <HAL_PCD_EP_Close>
 800e010:	4603      	mov	r3, r0
 800e012:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e014:	7bbb      	ldrb	r3, [r7, #14]
 800e016:	2b03      	cmp	r3, #3
 800e018:	d816      	bhi.n	800e048 <USBD_LL_CloseEP+0x5c>
 800e01a:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <USBD_LL_CloseEP+0x34>)
 800e01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e020:	0800e031 	.word	0x0800e031
 800e024:	0800e037 	.word	0x0800e037
 800e028:	0800e03d 	.word	0x0800e03d
 800e02c:	0800e043 	.word	0x0800e043
    case HAL_OK :
      usb_status = USBD_OK;
 800e030:	2300      	movs	r3, #0
 800e032:	73fb      	strb	r3, [r7, #15]
    break;
 800e034:	e00b      	b.n	800e04e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e036:	2303      	movs	r3, #3
 800e038:	73fb      	strb	r3, [r7, #15]
    break;
 800e03a:	e008      	b.n	800e04e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e03c:	2301      	movs	r3, #1
 800e03e:	73fb      	strb	r3, [r7, #15]
    break;
 800e040:	e005      	b.n	800e04e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e042:	2303      	movs	r3, #3
 800e044:	73fb      	strb	r3, [r7, #15]
    break;
 800e046:	e002      	b.n	800e04e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e048:	2303      	movs	r3, #3
 800e04a:	73fb      	strb	r3, [r7, #15]
    break;
 800e04c:	bf00      	nop
  }
  return usb_status;
 800e04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e072:	78fa      	ldrb	r2, [r7, #3]
 800e074:	4611      	mov	r1, r2
 800e076:	4618      	mov	r0, r3
 800e078:	f7f4 fe8c 	bl	8002d94 <HAL_PCD_EP_SetStall>
 800e07c:	4603      	mov	r3, r0
 800e07e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e080:	7bbb      	ldrb	r3, [r7, #14]
 800e082:	2b03      	cmp	r3, #3
 800e084:	d816      	bhi.n	800e0b4 <USBD_LL_StallEP+0x5c>
 800e086:	a201      	add	r2, pc, #4	; (adr r2, 800e08c <USBD_LL_StallEP+0x34>)
 800e088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08c:	0800e09d 	.word	0x0800e09d
 800e090:	0800e0a3 	.word	0x0800e0a3
 800e094:	0800e0a9 	.word	0x0800e0a9
 800e098:	0800e0af 	.word	0x0800e0af
    case HAL_OK :
      usb_status = USBD_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]
    break;
 800e0a0:	e00b      	b.n	800e0ba <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e0a6:	e008      	b.n	800e0ba <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ac:	e005      	b.n	800e0ba <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e0b2:	e002      	b.n	800e0ba <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0b8:	bf00      	nop
  }
  return usb_status;
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0de:	78fa      	ldrb	r2, [r7, #3]
 800e0e0:	4611      	mov	r1, r2
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7f4 feb8 	bl	8002e58 <HAL_PCD_EP_ClrStall>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e0ec:	7bbb      	ldrb	r3, [r7, #14]
 800e0ee:	2b03      	cmp	r3, #3
 800e0f0:	d816      	bhi.n	800e120 <USBD_LL_ClearStallEP+0x5c>
 800e0f2:	a201      	add	r2, pc, #4	; (adr r2, 800e0f8 <USBD_LL_ClearStallEP+0x34>)
 800e0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f8:	0800e109 	.word	0x0800e109
 800e0fc:	0800e10f 	.word	0x0800e10f
 800e100:	0800e115 	.word	0x0800e115
 800e104:	0800e11b 	.word	0x0800e11b
    case HAL_OK :
      usb_status = USBD_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	73fb      	strb	r3, [r7, #15]
    break;
 800e10c:	e00b      	b.n	800e126 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e10e:	2303      	movs	r3, #3
 800e110:	73fb      	strb	r3, [r7, #15]
    break;
 800e112:	e008      	b.n	800e126 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e114:	2301      	movs	r3, #1
 800e116:	73fb      	strb	r3, [r7, #15]
    break;
 800e118:	e005      	b.n	800e126 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e11a:	2303      	movs	r3, #3
 800e11c:	73fb      	strb	r3, [r7, #15]
    break;
 800e11e:	e002      	b.n	800e126 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e120:	2303      	movs	r3, #3
 800e122:	73fb      	strb	r3, [r7, #15]
    break;
 800e124:	bf00      	nop
  }
  return usb_status;
 800e126:	7bfb      	ldrb	r3, [r7, #15]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	460b      	mov	r3, r1
 800e13a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e142:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	da0b      	bge.n	800e164 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e14c:	78fb      	ldrb	r3, [r7, #3]
 800e14e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e152:	68f9      	ldr	r1, [r7, #12]
 800e154:	4613      	mov	r3, r2
 800e156:	00db      	lsls	r3, r3, #3
 800e158:	4413      	add	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	440b      	add	r3, r1
 800e15e:	333e      	adds	r3, #62	; 0x3e
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	e00b      	b.n	800e17c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e164:	78fb      	ldrb	r3, [r7, #3]
 800e166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e16a:	68f9      	ldr	r1, [r7, #12]
 800e16c:	4613      	mov	r3, r2
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	4413      	add	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	440b      	add	r3, r1
 800e176:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e17a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3714      	adds	r7, #20
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1a2:	78fa      	ldrb	r2, [r7, #3]
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7f4 fc8a 	bl	8002ac0 <HAL_PCD_SetAddress>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e1b0:	7bbb      	ldrb	r3, [r7, #14]
 800e1b2:	2b03      	cmp	r3, #3
 800e1b4:	d816      	bhi.n	800e1e4 <USBD_LL_SetUSBAddress+0x5c>
 800e1b6:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <USBD_LL_SetUSBAddress+0x34>)
 800e1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1bc:	0800e1cd 	.word	0x0800e1cd
 800e1c0:	0800e1d3 	.word	0x0800e1d3
 800e1c4:	0800e1d9 	.word	0x0800e1d9
 800e1c8:	0800e1df 	.word	0x0800e1df
    case HAL_OK :
      usb_status = USBD_OK;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e1d0:	e00b      	b.n	800e1ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1d2:	2303      	movs	r3, #3
 800e1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e1d6:	e008      	b.n	800e1ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	73fb      	strb	r3, [r7, #15]
    break;
 800e1dc:	e005      	b.n	800e1ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1de:	2303      	movs	r3, #3
 800e1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e1e2:	e002      	b.n	800e1ea <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e1e8:	bf00      	nop
  }
  return usb_status;
 800e1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	607a      	str	r2, [r7, #4]
 800e1fe:	603b      	str	r3, [r7, #0]
 800e200:	460b      	mov	r3, r1
 800e202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e204:	2300      	movs	r3, #0
 800e206:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e208:	2300      	movs	r3, #0
 800e20a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e212:	7af9      	ldrb	r1, [r7, #11]
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	f7f4 fd7f 	bl	8002d1a <HAL_PCD_EP_Transmit>
 800e21c:	4603      	mov	r3, r0
 800e21e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e220:	7dbb      	ldrb	r3, [r7, #22]
 800e222:	2b03      	cmp	r3, #3
 800e224:	d816      	bhi.n	800e254 <USBD_LL_Transmit+0x60>
 800e226:	a201      	add	r2, pc, #4	; (adr r2, 800e22c <USBD_LL_Transmit+0x38>)
 800e228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22c:	0800e23d 	.word	0x0800e23d
 800e230:	0800e243 	.word	0x0800e243
 800e234:	0800e249 	.word	0x0800e249
 800e238:	0800e24f 	.word	0x0800e24f
    case HAL_OK :
      usb_status = USBD_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	75fb      	strb	r3, [r7, #23]
    break;
 800e240:	e00b      	b.n	800e25a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e242:	2303      	movs	r3, #3
 800e244:	75fb      	strb	r3, [r7, #23]
    break;
 800e246:	e008      	b.n	800e25a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e248:	2301      	movs	r3, #1
 800e24a:	75fb      	strb	r3, [r7, #23]
    break;
 800e24c:	e005      	b.n	800e25a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e24e:	2303      	movs	r3, #3
 800e250:	75fb      	strb	r3, [r7, #23]
    break;
 800e252:	e002      	b.n	800e25a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e254:	2303      	movs	r3, #3
 800e256:	75fb      	strb	r3, [r7, #23]
    break;
 800e258:	bf00      	nop
  }
  return usb_status;
 800e25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	607a      	str	r2, [r7, #4]
 800e26e:	603b      	str	r3, [r7, #0]
 800e270:	460b      	mov	r3, r1
 800e272:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e282:	7af9      	ldrb	r1, [r7, #11]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	f7f4 fcf1 	bl	8002c6e <HAL_PCD_EP_Receive>
 800e28c:	4603      	mov	r3, r0
 800e28e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e290:	7dbb      	ldrb	r3, [r7, #22]
 800e292:	2b03      	cmp	r3, #3
 800e294:	d816      	bhi.n	800e2c4 <USBD_LL_PrepareReceive+0x60>
 800e296:	a201      	add	r2, pc, #4	; (adr r2, 800e29c <USBD_LL_PrepareReceive+0x38>)
 800e298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29c:	0800e2ad 	.word	0x0800e2ad
 800e2a0:	0800e2b3 	.word	0x0800e2b3
 800e2a4:	0800e2b9 	.word	0x0800e2b9
 800e2a8:	0800e2bf 	.word	0x0800e2bf
    case HAL_OK :
      usb_status = USBD_OK;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	75fb      	strb	r3, [r7, #23]
    break;
 800e2b0:	e00b      	b.n	800e2ca <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e2b2:	2303      	movs	r3, #3
 800e2b4:	75fb      	strb	r3, [r7, #23]
    break;
 800e2b6:	e008      	b.n	800e2ca <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	75fb      	strb	r3, [r7, #23]
    break;
 800e2bc:	e005      	b.n	800e2ca <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	75fb      	strb	r3, [r7, #23]
    break;
 800e2c2:	e002      	b.n	800e2ca <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e2c4:	2303      	movs	r3, #3
 800e2c6:	75fb      	strb	r3, [r7, #23]
    break;
 800e2c8:	bf00      	nop
  }
  return usb_status;
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2e6:	78fa      	ldrb	r2, [r7, #3]
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7f4 fcfd 	bl	8002cea <HAL_PCD_EP_GetRxCount>
 800e2f0:	4603      	mov	r3, r0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
	...

0800e2fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	460b      	mov	r3, r1
 800e306:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e308:	78fb      	ldrb	r3, [r7, #3]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <HAL_PCDEx_LPM_Callback+0x18>
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d01f      	beq.n	800e352 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e312:	e03b      	b.n	800e38c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a1b      	ldr	r3, [r3, #32]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d007      	beq.n	800e32c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e31c:	f000 f854 	bl	800e3c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e320:	4b1c      	ldr	r3, [pc, #112]	; (800e394 <HAL_PCDEx_LPM_Callback+0x98>)
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	4a1b      	ldr	r2, [pc, #108]	; (800e394 <HAL_PCDEx_LPM_Callback+0x98>)
 800e326:	f023 0306 	bic.w	r3, r3, #6
 800e32a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	6812      	ldr	r2, [r2, #0]
 800e33a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e33e:	f023 0301 	bic.w	r3, r3, #1
 800e342:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fa74 	bl	800c838 <USBD_LL_Resume>
    break;
 800e350:	e01c      	b.n	800e38c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	6812      	ldr	r2, [r2, #0]
 800e360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e364:	f043 0301 	orr.w	r3, r3, #1
 800e368:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe fa4b 	bl	800c80c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d005      	beq.n	800e38a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e37e:	4b05      	ldr	r3, [pc, #20]	; (800e394 <HAL_PCDEx_LPM_Callback+0x98>)
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	4a04      	ldr	r2, [pc, #16]	; (800e394 <HAL_PCDEx_LPM_Callback+0x98>)
 800e384:	f043 0306 	orr.w	r3, r3, #6
 800e388:	6113      	str	r3, [r2, #16]
    break;
 800e38a:	bf00      	nop
}
 800e38c:	bf00      	nop
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	e000ed00 	.word	0xe000ed00

0800e398 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e3a0:	4b03      	ldr	r3, [pc, #12]	; (800e3b0 <USBD_static_malloc+0x18>)
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	370c      	adds	r7, #12
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	20001ffc 	.word	0x20001ffc

0800e3b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]

}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e3cc:	f7f2 f9c6 	bl	800075c <SystemClock_Config>
}
 800e3d0:	bf00      	nop
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <__libc_init_array>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	4d0d      	ldr	r5, [pc, #52]	; (800e40c <__libc_init_array+0x38>)
 800e3d8:	4c0d      	ldr	r4, [pc, #52]	; (800e410 <__libc_init_array+0x3c>)
 800e3da:	1b64      	subs	r4, r4, r5
 800e3dc:	10a4      	asrs	r4, r4, #2
 800e3de:	2600      	movs	r6, #0
 800e3e0:	42a6      	cmp	r6, r4
 800e3e2:	d109      	bne.n	800e3f8 <__libc_init_array+0x24>
 800e3e4:	4d0b      	ldr	r5, [pc, #44]	; (800e414 <__libc_init_array+0x40>)
 800e3e6:	4c0c      	ldr	r4, [pc, #48]	; (800e418 <__libc_init_array+0x44>)
 800e3e8:	f000 ffec 	bl	800f3c4 <_init>
 800e3ec:	1b64      	subs	r4, r4, r5
 800e3ee:	10a4      	asrs	r4, r4, #2
 800e3f0:	2600      	movs	r6, #0
 800e3f2:	42a6      	cmp	r6, r4
 800e3f4:	d105      	bne.n	800e402 <__libc_init_array+0x2e>
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3fc:	4798      	blx	r3
 800e3fe:	3601      	adds	r6, #1
 800e400:	e7ee      	b.n	800e3e0 <__libc_init_array+0xc>
 800e402:	f855 3b04 	ldr.w	r3, [r5], #4
 800e406:	4798      	blx	r3
 800e408:	3601      	adds	r6, #1
 800e40a:	e7f2      	b.n	800e3f2 <__libc_init_array+0x1e>
 800e40c:	0800f59c 	.word	0x0800f59c
 800e410:	0800f59c 	.word	0x0800f59c
 800e414:	0800f59c 	.word	0x0800f59c
 800e418:	0800f5a0 	.word	0x0800f5a0

0800e41c <memset>:
 800e41c:	4402      	add	r2, r0
 800e41e:	4603      	mov	r3, r0
 800e420:	4293      	cmp	r3, r2
 800e422:	d100      	bne.n	800e426 <memset+0xa>
 800e424:	4770      	bx	lr
 800e426:	f803 1b01 	strb.w	r1, [r3], #1
 800e42a:	e7f9      	b.n	800e420 <memset+0x4>

0800e42c <iprintf>:
 800e42c:	b40f      	push	{r0, r1, r2, r3}
 800e42e:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <iprintf+0x2c>)
 800e430:	b513      	push	{r0, r1, r4, lr}
 800e432:	681c      	ldr	r4, [r3, #0]
 800e434:	b124      	cbz	r4, 800e440 <iprintf+0x14>
 800e436:	69a3      	ldr	r3, [r4, #24]
 800e438:	b913      	cbnz	r3, 800e440 <iprintf+0x14>
 800e43a:	4620      	mov	r0, r4
 800e43c:	f000 f866 	bl	800e50c <__sinit>
 800e440:	ab05      	add	r3, sp, #20
 800e442:	9a04      	ldr	r2, [sp, #16]
 800e444:	68a1      	ldr	r1, [r4, #8]
 800e446:	9301      	str	r3, [sp, #4]
 800e448:	4620      	mov	r0, r4
 800e44a:	f000 f9bd 	bl	800e7c8 <_vfiprintf_r>
 800e44e:	b002      	add	sp, #8
 800e450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e454:	b004      	add	sp, #16
 800e456:	4770      	bx	lr
 800e458:	20000190 	.word	0x20000190

0800e45c <std>:
 800e45c:	2300      	movs	r3, #0
 800e45e:	b510      	push	{r4, lr}
 800e460:	4604      	mov	r4, r0
 800e462:	e9c0 3300 	strd	r3, r3, [r0]
 800e466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e46a:	6083      	str	r3, [r0, #8]
 800e46c:	8181      	strh	r1, [r0, #12]
 800e46e:	6643      	str	r3, [r0, #100]	; 0x64
 800e470:	81c2      	strh	r2, [r0, #14]
 800e472:	6183      	str	r3, [r0, #24]
 800e474:	4619      	mov	r1, r3
 800e476:	2208      	movs	r2, #8
 800e478:	305c      	adds	r0, #92	; 0x5c
 800e47a:	f7ff ffcf 	bl	800e41c <memset>
 800e47e:	4b05      	ldr	r3, [pc, #20]	; (800e494 <std+0x38>)
 800e480:	6263      	str	r3, [r4, #36]	; 0x24
 800e482:	4b05      	ldr	r3, [pc, #20]	; (800e498 <std+0x3c>)
 800e484:	62a3      	str	r3, [r4, #40]	; 0x28
 800e486:	4b05      	ldr	r3, [pc, #20]	; (800e49c <std+0x40>)
 800e488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e48a:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <std+0x44>)
 800e48c:	6224      	str	r4, [r4, #32]
 800e48e:	6323      	str	r3, [r4, #48]	; 0x30
 800e490:	bd10      	pop	{r4, pc}
 800e492:	bf00      	nop
 800e494:	0800ed71 	.word	0x0800ed71
 800e498:	0800ed93 	.word	0x0800ed93
 800e49c:	0800edcb 	.word	0x0800edcb
 800e4a0:	0800edef 	.word	0x0800edef

0800e4a4 <_cleanup_r>:
 800e4a4:	4901      	ldr	r1, [pc, #4]	; (800e4ac <_cleanup_r+0x8>)
 800e4a6:	f000 b8af 	b.w	800e608 <_fwalk_reent>
 800e4aa:	bf00      	nop
 800e4ac:	0800f0c9 	.word	0x0800f0c9

0800e4b0 <__sfmoreglue>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	2268      	movs	r2, #104	; 0x68
 800e4b4:	1e4d      	subs	r5, r1, #1
 800e4b6:	4355      	muls	r5, r2
 800e4b8:	460e      	mov	r6, r1
 800e4ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4be:	f000 f8e5 	bl	800e68c <_malloc_r>
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	b140      	cbz	r0, 800e4d8 <__sfmoreglue+0x28>
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	e9c0 1600 	strd	r1, r6, [r0]
 800e4cc:	300c      	adds	r0, #12
 800e4ce:	60a0      	str	r0, [r4, #8]
 800e4d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4d4:	f7ff ffa2 	bl	800e41c <memset>
 800e4d8:	4620      	mov	r0, r4
 800e4da:	bd70      	pop	{r4, r5, r6, pc}

0800e4dc <__sfp_lock_acquire>:
 800e4dc:	4801      	ldr	r0, [pc, #4]	; (800e4e4 <__sfp_lock_acquire+0x8>)
 800e4de:	f000 b8b3 	b.w	800e648 <__retarget_lock_acquire_recursive>
 800e4e2:	bf00      	nop
 800e4e4:	2000221d 	.word	0x2000221d

0800e4e8 <__sfp_lock_release>:
 800e4e8:	4801      	ldr	r0, [pc, #4]	; (800e4f0 <__sfp_lock_release+0x8>)
 800e4ea:	f000 b8ae 	b.w	800e64a <__retarget_lock_release_recursive>
 800e4ee:	bf00      	nop
 800e4f0:	2000221d 	.word	0x2000221d

0800e4f4 <__sinit_lock_acquire>:
 800e4f4:	4801      	ldr	r0, [pc, #4]	; (800e4fc <__sinit_lock_acquire+0x8>)
 800e4f6:	f000 b8a7 	b.w	800e648 <__retarget_lock_acquire_recursive>
 800e4fa:	bf00      	nop
 800e4fc:	2000221e 	.word	0x2000221e

0800e500 <__sinit_lock_release>:
 800e500:	4801      	ldr	r0, [pc, #4]	; (800e508 <__sinit_lock_release+0x8>)
 800e502:	f000 b8a2 	b.w	800e64a <__retarget_lock_release_recursive>
 800e506:	bf00      	nop
 800e508:	2000221e 	.word	0x2000221e

0800e50c <__sinit>:
 800e50c:	b510      	push	{r4, lr}
 800e50e:	4604      	mov	r4, r0
 800e510:	f7ff fff0 	bl	800e4f4 <__sinit_lock_acquire>
 800e514:	69a3      	ldr	r3, [r4, #24]
 800e516:	b11b      	cbz	r3, 800e520 <__sinit+0x14>
 800e518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e51c:	f7ff bff0 	b.w	800e500 <__sinit_lock_release>
 800e520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e524:	6523      	str	r3, [r4, #80]	; 0x50
 800e526:	4b13      	ldr	r3, [pc, #76]	; (800e574 <__sinit+0x68>)
 800e528:	4a13      	ldr	r2, [pc, #76]	; (800e578 <__sinit+0x6c>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e52e:	42a3      	cmp	r3, r4
 800e530:	bf04      	itt	eq
 800e532:	2301      	moveq	r3, #1
 800e534:	61a3      	streq	r3, [r4, #24]
 800e536:	4620      	mov	r0, r4
 800e538:	f000 f820 	bl	800e57c <__sfp>
 800e53c:	6060      	str	r0, [r4, #4]
 800e53e:	4620      	mov	r0, r4
 800e540:	f000 f81c 	bl	800e57c <__sfp>
 800e544:	60a0      	str	r0, [r4, #8]
 800e546:	4620      	mov	r0, r4
 800e548:	f000 f818 	bl	800e57c <__sfp>
 800e54c:	2200      	movs	r2, #0
 800e54e:	60e0      	str	r0, [r4, #12]
 800e550:	2104      	movs	r1, #4
 800e552:	6860      	ldr	r0, [r4, #4]
 800e554:	f7ff ff82 	bl	800e45c <std>
 800e558:	68a0      	ldr	r0, [r4, #8]
 800e55a:	2201      	movs	r2, #1
 800e55c:	2109      	movs	r1, #9
 800e55e:	f7ff ff7d 	bl	800e45c <std>
 800e562:	68e0      	ldr	r0, [r4, #12]
 800e564:	2202      	movs	r2, #2
 800e566:	2112      	movs	r1, #18
 800e568:	f7ff ff78 	bl	800e45c <std>
 800e56c:	2301      	movs	r3, #1
 800e56e:	61a3      	str	r3, [r4, #24]
 800e570:	e7d2      	b.n	800e518 <__sinit+0xc>
 800e572:	bf00      	nop
 800e574:	0800f4fc 	.word	0x0800f4fc
 800e578:	0800e4a5 	.word	0x0800e4a5

0800e57c <__sfp>:
 800e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57e:	4607      	mov	r7, r0
 800e580:	f7ff ffac 	bl	800e4dc <__sfp_lock_acquire>
 800e584:	4b1e      	ldr	r3, [pc, #120]	; (800e600 <__sfp+0x84>)
 800e586:	681e      	ldr	r6, [r3, #0]
 800e588:	69b3      	ldr	r3, [r6, #24]
 800e58a:	b913      	cbnz	r3, 800e592 <__sfp+0x16>
 800e58c:	4630      	mov	r0, r6
 800e58e:	f7ff ffbd 	bl	800e50c <__sinit>
 800e592:	3648      	adds	r6, #72	; 0x48
 800e594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e598:	3b01      	subs	r3, #1
 800e59a:	d503      	bpl.n	800e5a4 <__sfp+0x28>
 800e59c:	6833      	ldr	r3, [r6, #0]
 800e59e:	b30b      	cbz	r3, 800e5e4 <__sfp+0x68>
 800e5a0:	6836      	ldr	r6, [r6, #0]
 800e5a2:	e7f7      	b.n	800e594 <__sfp+0x18>
 800e5a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5a8:	b9d5      	cbnz	r5, 800e5e0 <__sfp+0x64>
 800e5aa:	4b16      	ldr	r3, [pc, #88]	; (800e604 <__sfp+0x88>)
 800e5ac:	60e3      	str	r3, [r4, #12]
 800e5ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5b2:	6665      	str	r5, [r4, #100]	; 0x64
 800e5b4:	f000 f847 	bl	800e646 <__retarget_lock_init_recursive>
 800e5b8:	f7ff ff96 	bl	800e4e8 <__sfp_lock_release>
 800e5bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5c4:	6025      	str	r5, [r4, #0]
 800e5c6:	61a5      	str	r5, [r4, #24]
 800e5c8:	2208      	movs	r2, #8
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5d0:	f7ff ff24 	bl	800e41c <memset>
 800e5d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5dc:	4620      	mov	r0, r4
 800e5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5e0:	3468      	adds	r4, #104	; 0x68
 800e5e2:	e7d9      	b.n	800e598 <__sfp+0x1c>
 800e5e4:	2104      	movs	r1, #4
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	f7ff ff62 	bl	800e4b0 <__sfmoreglue>
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	6030      	str	r0, [r6, #0]
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d1d5      	bne.n	800e5a0 <__sfp+0x24>
 800e5f4:	f7ff ff78 	bl	800e4e8 <__sfp_lock_release>
 800e5f8:	230c      	movs	r3, #12
 800e5fa:	603b      	str	r3, [r7, #0]
 800e5fc:	e7ee      	b.n	800e5dc <__sfp+0x60>
 800e5fe:	bf00      	nop
 800e600:	0800f4fc 	.word	0x0800f4fc
 800e604:	ffff0001 	.word	0xffff0001

0800e608 <_fwalk_reent>:
 800e608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e60c:	4606      	mov	r6, r0
 800e60e:	4688      	mov	r8, r1
 800e610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e614:	2700      	movs	r7, #0
 800e616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e61a:	f1b9 0901 	subs.w	r9, r9, #1
 800e61e:	d505      	bpl.n	800e62c <_fwalk_reent+0x24>
 800e620:	6824      	ldr	r4, [r4, #0]
 800e622:	2c00      	cmp	r4, #0
 800e624:	d1f7      	bne.n	800e616 <_fwalk_reent+0xe>
 800e626:	4638      	mov	r0, r7
 800e628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e62c:	89ab      	ldrh	r3, [r5, #12]
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d907      	bls.n	800e642 <_fwalk_reent+0x3a>
 800e632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e636:	3301      	adds	r3, #1
 800e638:	d003      	beq.n	800e642 <_fwalk_reent+0x3a>
 800e63a:	4629      	mov	r1, r5
 800e63c:	4630      	mov	r0, r6
 800e63e:	47c0      	blx	r8
 800e640:	4307      	orrs	r7, r0
 800e642:	3568      	adds	r5, #104	; 0x68
 800e644:	e7e9      	b.n	800e61a <_fwalk_reent+0x12>

0800e646 <__retarget_lock_init_recursive>:
 800e646:	4770      	bx	lr

0800e648 <__retarget_lock_acquire_recursive>:
 800e648:	4770      	bx	lr

0800e64a <__retarget_lock_release_recursive>:
 800e64a:	4770      	bx	lr

0800e64c <sbrk_aligned>:
 800e64c:	b570      	push	{r4, r5, r6, lr}
 800e64e:	4e0e      	ldr	r6, [pc, #56]	; (800e688 <sbrk_aligned+0x3c>)
 800e650:	460c      	mov	r4, r1
 800e652:	6831      	ldr	r1, [r6, #0]
 800e654:	4605      	mov	r5, r0
 800e656:	b911      	cbnz	r1, 800e65e <sbrk_aligned+0x12>
 800e658:	f000 fb7a 	bl	800ed50 <_sbrk_r>
 800e65c:	6030      	str	r0, [r6, #0]
 800e65e:	4621      	mov	r1, r4
 800e660:	4628      	mov	r0, r5
 800e662:	f000 fb75 	bl	800ed50 <_sbrk_r>
 800e666:	1c43      	adds	r3, r0, #1
 800e668:	d00a      	beq.n	800e680 <sbrk_aligned+0x34>
 800e66a:	1cc4      	adds	r4, r0, #3
 800e66c:	f024 0403 	bic.w	r4, r4, #3
 800e670:	42a0      	cmp	r0, r4
 800e672:	d007      	beq.n	800e684 <sbrk_aligned+0x38>
 800e674:	1a21      	subs	r1, r4, r0
 800e676:	4628      	mov	r0, r5
 800e678:	f000 fb6a 	bl	800ed50 <_sbrk_r>
 800e67c:	3001      	adds	r0, #1
 800e67e:	d101      	bne.n	800e684 <sbrk_aligned+0x38>
 800e680:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e684:	4620      	mov	r0, r4
 800e686:	bd70      	pop	{r4, r5, r6, pc}
 800e688:	20002224 	.word	0x20002224

0800e68c <_malloc_r>:
 800e68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e690:	1ccd      	adds	r5, r1, #3
 800e692:	f025 0503 	bic.w	r5, r5, #3
 800e696:	3508      	adds	r5, #8
 800e698:	2d0c      	cmp	r5, #12
 800e69a:	bf38      	it	cc
 800e69c:	250c      	movcc	r5, #12
 800e69e:	2d00      	cmp	r5, #0
 800e6a0:	4607      	mov	r7, r0
 800e6a2:	db01      	blt.n	800e6a8 <_malloc_r+0x1c>
 800e6a4:	42a9      	cmp	r1, r5
 800e6a6:	d905      	bls.n	800e6b4 <_malloc_r+0x28>
 800e6a8:	230c      	movs	r3, #12
 800e6aa:	603b      	str	r3, [r7, #0]
 800e6ac:	2600      	movs	r6, #0
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b4:	4e2e      	ldr	r6, [pc, #184]	; (800e770 <_malloc_r+0xe4>)
 800e6b6:	f000 fdbb 	bl	800f230 <__malloc_lock>
 800e6ba:	6833      	ldr	r3, [r6, #0]
 800e6bc:	461c      	mov	r4, r3
 800e6be:	bb34      	cbnz	r4, 800e70e <_malloc_r+0x82>
 800e6c0:	4629      	mov	r1, r5
 800e6c2:	4638      	mov	r0, r7
 800e6c4:	f7ff ffc2 	bl	800e64c <sbrk_aligned>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	d14d      	bne.n	800e76a <_malloc_r+0xde>
 800e6ce:	6834      	ldr	r4, [r6, #0]
 800e6d0:	4626      	mov	r6, r4
 800e6d2:	2e00      	cmp	r6, #0
 800e6d4:	d140      	bne.n	800e758 <_malloc_r+0xcc>
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	4631      	mov	r1, r6
 800e6da:	4638      	mov	r0, r7
 800e6dc:	eb04 0803 	add.w	r8, r4, r3
 800e6e0:	f000 fb36 	bl	800ed50 <_sbrk_r>
 800e6e4:	4580      	cmp	r8, r0
 800e6e6:	d13a      	bne.n	800e75e <_malloc_r+0xd2>
 800e6e8:	6821      	ldr	r1, [r4, #0]
 800e6ea:	3503      	adds	r5, #3
 800e6ec:	1a6d      	subs	r5, r5, r1
 800e6ee:	f025 0503 	bic.w	r5, r5, #3
 800e6f2:	3508      	adds	r5, #8
 800e6f4:	2d0c      	cmp	r5, #12
 800e6f6:	bf38      	it	cc
 800e6f8:	250c      	movcc	r5, #12
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	4638      	mov	r0, r7
 800e6fe:	f7ff ffa5 	bl	800e64c <sbrk_aligned>
 800e702:	3001      	adds	r0, #1
 800e704:	d02b      	beq.n	800e75e <_malloc_r+0xd2>
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	442b      	add	r3, r5
 800e70a:	6023      	str	r3, [r4, #0]
 800e70c:	e00e      	b.n	800e72c <_malloc_r+0xa0>
 800e70e:	6822      	ldr	r2, [r4, #0]
 800e710:	1b52      	subs	r2, r2, r5
 800e712:	d41e      	bmi.n	800e752 <_malloc_r+0xc6>
 800e714:	2a0b      	cmp	r2, #11
 800e716:	d916      	bls.n	800e746 <_malloc_r+0xba>
 800e718:	1961      	adds	r1, r4, r5
 800e71a:	42a3      	cmp	r3, r4
 800e71c:	6025      	str	r5, [r4, #0]
 800e71e:	bf18      	it	ne
 800e720:	6059      	strne	r1, [r3, #4]
 800e722:	6863      	ldr	r3, [r4, #4]
 800e724:	bf08      	it	eq
 800e726:	6031      	streq	r1, [r6, #0]
 800e728:	5162      	str	r2, [r4, r5]
 800e72a:	604b      	str	r3, [r1, #4]
 800e72c:	4638      	mov	r0, r7
 800e72e:	f104 060b 	add.w	r6, r4, #11
 800e732:	f000 fd83 	bl	800f23c <__malloc_unlock>
 800e736:	f026 0607 	bic.w	r6, r6, #7
 800e73a:	1d23      	adds	r3, r4, #4
 800e73c:	1af2      	subs	r2, r6, r3
 800e73e:	d0b6      	beq.n	800e6ae <_malloc_r+0x22>
 800e740:	1b9b      	subs	r3, r3, r6
 800e742:	50a3      	str	r3, [r4, r2]
 800e744:	e7b3      	b.n	800e6ae <_malloc_r+0x22>
 800e746:	6862      	ldr	r2, [r4, #4]
 800e748:	42a3      	cmp	r3, r4
 800e74a:	bf0c      	ite	eq
 800e74c:	6032      	streq	r2, [r6, #0]
 800e74e:	605a      	strne	r2, [r3, #4]
 800e750:	e7ec      	b.n	800e72c <_malloc_r+0xa0>
 800e752:	4623      	mov	r3, r4
 800e754:	6864      	ldr	r4, [r4, #4]
 800e756:	e7b2      	b.n	800e6be <_malloc_r+0x32>
 800e758:	4634      	mov	r4, r6
 800e75a:	6876      	ldr	r6, [r6, #4]
 800e75c:	e7b9      	b.n	800e6d2 <_malloc_r+0x46>
 800e75e:	230c      	movs	r3, #12
 800e760:	603b      	str	r3, [r7, #0]
 800e762:	4638      	mov	r0, r7
 800e764:	f000 fd6a 	bl	800f23c <__malloc_unlock>
 800e768:	e7a1      	b.n	800e6ae <_malloc_r+0x22>
 800e76a:	6025      	str	r5, [r4, #0]
 800e76c:	e7de      	b.n	800e72c <_malloc_r+0xa0>
 800e76e:	bf00      	nop
 800e770:	20002220 	.word	0x20002220

0800e774 <__sfputc_r>:
 800e774:	6893      	ldr	r3, [r2, #8]
 800e776:	3b01      	subs	r3, #1
 800e778:	2b00      	cmp	r3, #0
 800e77a:	b410      	push	{r4}
 800e77c:	6093      	str	r3, [r2, #8]
 800e77e:	da08      	bge.n	800e792 <__sfputc_r+0x1e>
 800e780:	6994      	ldr	r4, [r2, #24]
 800e782:	42a3      	cmp	r3, r4
 800e784:	db01      	blt.n	800e78a <__sfputc_r+0x16>
 800e786:	290a      	cmp	r1, #10
 800e788:	d103      	bne.n	800e792 <__sfputc_r+0x1e>
 800e78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e78e:	f000 bb33 	b.w	800edf8 <__swbuf_r>
 800e792:	6813      	ldr	r3, [r2, #0]
 800e794:	1c58      	adds	r0, r3, #1
 800e796:	6010      	str	r0, [r2, #0]
 800e798:	7019      	strb	r1, [r3, #0]
 800e79a:	4608      	mov	r0, r1
 800e79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <__sfputs_r>:
 800e7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	460f      	mov	r7, r1
 800e7a8:	4614      	mov	r4, r2
 800e7aa:	18d5      	adds	r5, r2, r3
 800e7ac:	42ac      	cmp	r4, r5
 800e7ae:	d101      	bne.n	800e7b4 <__sfputs_r+0x12>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	e007      	b.n	800e7c4 <__sfputs_r+0x22>
 800e7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7b8:	463a      	mov	r2, r7
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	f7ff ffda 	bl	800e774 <__sfputc_r>
 800e7c0:	1c43      	adds	r3, r0, #1
 800e7c2:	d1f3      	bne.n	800e7ac <__sfputs_r+0xa>
 800e7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e7c8 <_vfiprintf_r>:
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	460d      	mov	r5, r1
 800e7ce:	b09d      	sub	sp, #116	; 0x74
 800e7d0:	4614      	mov	r4, r2
 800e7d2:	4698      	mov	r8, r3
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	b118      	cbz	r0, 800e7e0 <_vfiprintf_r+0x18>
 800e7d8:	6983      	ldr	r3, [r0, #24]
 800e7da:	b90b      	cbnz	r3, 800e7e0 <_vfiprintf_r+0x18>
 800e7dc:	f7ff fe96 	bl	800e50c <__sinit>
 800e7e0:	4b89      	ldr	r3, [pc, #548]	; (800ea08 <_vfiprintf_r+0x240>)
 800e7e2:	429d      	cmp	r5, r3
 800e7e4:	d11b      	bne.n	800e81e <_vfiprintf_r+0x56>
 800e7e6:	6875      	ldr	r5, [r6, #4]
 800e7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7ea:	07d9      	lsls	r1, r3, #31
 800e7ec:	d405      	bmi.n	800e7fa <_vfiprintf_r+0x32>
 800e7ee:	89ab      	ldrh	r3, [r5, #12]
 800e7f0:	059a      	lsls	r2, r3, #22
 800e7f2:	d402      	bmi.n	800e7fa <_vfiprintf_r+0x32>
 800e7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7f6:	f7ff ff27 	bl	800e648 <__retarget_lock_acquire_recursive>
 800e7fa:	89ab      	ldrh	r3, [r5, #12]
 800e7fc:	071b      	lsls	r3, r3, #28
 800e7fe:	d501      	bpl.n	800e804 <_vfiprintf_r+0x3c>
 800e800:	692b      	ldr	r3, [r5, #16]
 800e802:	b9eb      	cbnz	r3, 800e840 <_vfiprintf_r+0x78>
 800e804:	4629      	mov	r1, r5
 800e806:	4630      	mov	r0, r6
 800e808:	f000 fb5a 	bl	800eec0 <__swsetup_r>
 800e80c:	b1c0      	cbz	r0, 800e840 <_vfiprintf_r+0x78>
 800e80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e810:	07dc      	lsls	r4, r3, #31
 800e812:	d50e      	bpl.n	800e832 <_vfiprintf_r+0x6a>
 800e814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e818:	b01d      	add	sp, #116	; 0x74
 800e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81e:	4b7b      	ldr	r3, [pc, #492]	; (800ea0c <_vfiprintf_r+0x244>)
 800e820:	429d      	cmp	r5, r3
 800e822:	d101      	bne.n	800e828 <_vfiprintf_r+0x60>
 800e824:	68b5      	ldr	r5, [r6, #8]
 800e826:	e7df      	b.n	800e7e8 <_vfiprintf_r+0x20>
 800e828:	4b79      	ldr	r3, [pc, #484]	; (800ea10 <_vfiprintf_r+0x248>)
 800e82a:	429d      	cmp	r5, r3
 800e82c:	bf08      	it	eq
 800e82e:	68f5      	ldreq	r5, [r6, #12]
 800e830:	e7da      	b.n	800e7e8 <_vfiprintf_r+0x20>
 800e832:	89ab      	ldrh	r3, [r5, #12]
 800e834:	0598      	lsls	r0, r3, #22
 800e836:	d4ed      	bmi.n	800e814 <_vfiprintf_r+0x4c>
 800e838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e83a:	f7ff ff06 	bl	800e64a <__retarget_lock_release_recursive>
 800e83e:	e7e9      	b.n	800e814 <_vfiprintf_r+0x4c>
 800e840:	2300      	movs	r3, #0
 800e842:	9309      	str	r3, [sp, #36]	; 0x24
 800e844:	2320      	movs	r3, #32
 800e846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e84a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e84e:	2330      	movs	r3, #48	; 0x30
 800e850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea14 <_vfiprintf_r+0x24c>
 800e854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e858:	f04f 0901 	mov.w	r9, #1
 800e85c:	4623      	mov	r3, r4
 800e85e:	469a      	mov	sl, r3
 800e860:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e864:	b10a      	cbz	r2, 800e86a <_vfiprintf_r+0xa2>
 800e866:	2a25      	cmp	r2, #37	; 0x25
 800e868:	d1f9      	bne.n	800e85e <_vfiprintf_r+0x96>
 800e86a:	ebba 0b04 	subs.w	fp, sl, r4
 800e86e:	d00b      	beq.n	800e888 <_vfiprintf_r+0xc0>
 800e870:	465b      	mov	r3, fp
 800e872:	4622      	mov	r2, r4
 800e874:	4629      	mov	r1, r5
 800e876:	4630      	mov	r0, r6
 800e878:	f7ff ff93 	bl	800e7a2 <__sfputs_r>
 800e87c:	3001      	adds	r0, #1
 800e87e:	f000 80aa 	beq.w	800e9d6 <_vfiprintf_r+0x20e>
 800e882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e884:	445a      	add	r2, fp
 800e886:	9209      	str	r2, [sp, #36]	; 0x24
 800e888:	f89a 3000 	ldrb.w	r3, [sl]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f000 80a2 	beq.w	800e9d6 <_vfiprintf_r+0x20e>
 800e892:	2300      	movs	r3, #0
 800e894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e89c:	f10a 0a01 	add.w	sl, sl, #1
 800e8a0:	9304      	str	r3, [sp, #16]
 800e8a2:	9307      	str	r3, [sp, #28]
 800e8a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8a8:	931a      	str	r3, [sp, #104]	; 0x68
 800e8aa:	4654      	mov	r4, sl
 800e8ac:	2205      	movs	r2, #5
 800e8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b2:	4858      	ldr	r0, [pc, #352]	; (800ea14 <_vfiprintf_r+0x24c>)
 800e8b4:	f7f1 fca4 	bl	8000200 <memchr>
 800e8b8:	9a04      	ldr	r2, [sp, #16]
 800e8ba:	b9d8      	cbnz	r0, 800e8f4 <_vfiprintf_r+0x12c>
 800e8bc:	06d1      	lsls	r1, r2, #27
 800e8be:	bf44      	itt	mi
 800e8c0:	2320      	movmi	r3, #32
 800e8c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8c6:	0713      	lsls	r3, r2, #28
 800e8c8:	bf44      	itt	mi
 800e8ca:	232b      	movmi	r3, #43	; 0x2b
 800e8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e8d6:	d015      	beq.n	800e904 <_vfiprintf_r+0x13c>
 800e8d8:	9a07      	ldr	r2, [sp, #28]
 800e8da:	4654      	mov	r4, sl
 800e8dc:	2000      	movs	r0, #0
 800e8de:	f04f 0c0a 	mov.w	ip, #10
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8e8:	3b30      	subs	r3, #48	; 0x30
 800e8ea:	2b09      	cmp	r3, #9
 800e8ec:	d94e      	bls.n	800e98c <_vfiprintf_r+0x1c4>
 800e8ee:	b1b0      	cbz	r0, 800e91e <_vfiprintf_r+0x156>
 800e8f0:	9207      	str	r2, [sp, #28]
 800e8f2:	e014      	b.n	800e91e <_vfiprintf_r+0x156>
 800e8f4:	eba0 0308 	sub.w	r3, r0, r8
 800e8f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	9304      	str	r3, [sp, #16]
 800e900:	46a2      	mov	sl, r4
 800e902:	e7d2      	b.n	800e8aa <_vfiprintf_r+0xe2>
 800e904:	9b03      	ldr	r3, [sp, #12]
 800e906:	1d19      	adds	r1, r3, #4
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	9103      	str	r1, [sp, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	bfbb      	ittet	lt
 800e910:	425b      	neglt	r3, r3
 800e912:	f042 0202 	orrlt.w	r2, r2, #2
 800e916:	9307      	strge	r3, [sp, #28]
 800e918:	9307      	strlt	r3, [sp, #28]
 800e91a:	bfb8      	it	lt
 800e91c:	9204      	strlt	r2, [sp, #16]
 800e91e:	7823      	ldrb	r3, [r4, #0]
 800e920:	2b2e      	cmp	r3, #46	; 0x2e
 800e922:	d10c      	bne.n	800e93e <_vfiprintf_r+0x176>
 800e924:	7863      	ldrb	r3, [r4, #1]
 800e926:	2b2a      	cmp	r3, #42	; 0x2a
 800e928:	d135      	bne.n	800e996 <_vfiprintf_r+0x1ce>
 800e92a:	9b03      	ldr	r3, [sp, #12]
 800e92c:	1d1a      	adds	r2, r3, #4
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	9203      	str	r2, [sp, #12]
 800e932:	2b00      	cmp	r3, #0
 800e934:	bfb8      	it	lt
 800e936:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e93a:	3402      	adds	r4, #2
 800e93c:	9305      	str	r3, [sp, #20]
 800e93e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea24 <_vfiprintf_r+0x25c>
 800e942:	7821      	ldrb	r1, [r4, #0]
 800e944:	2203      	movs	r2, #3
 800e946:	4650      	mov	r0, sl
 800e948:	f7f1 fc5a 	bl	8000200 <memchr>
 800e94c:	b140      	cbz	r0, 800e960 <_vfiprintf_r+0x198>
 800e94e:	2340      	movs	r3, #64	; 0x40
 800e950:	eba0 000a 	sub.w	r0, r0, sl
 800e954:	fa03 f000 	lsl.w	r0, r3, r0
 800e958:	9b04      	ldr	r3, [sp, #16]
 800e95a:	4303      	orrs	r3, r0
 800e95c:	3401      	adds	r4, #1
 800e95e:	9304      	str	r3, [sp, #16]
 800e960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e964:	482c      	ldr	r0, [pc, #176]	; (800ea18 <_vfiprintf_r+0x250>)
 800e966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e96a:	2206      	movs	r2, #6
 800e96c:	f7f1 fc48 	bl	8000200 <memchr>
 800e970:	2800      	cmp	r0, #0
 800e972:	d03f      	beq.n	800e9f4 <_vfiprintf_r+0x22c>
 800e974:	4b29      	ldr	r3, [pc, #164]	; (800ea1c <_vfiprintf_r+0x254>)
 800e976:	bb1b      	cbnz	r3, 800e9c0 <_vfiprintf_r+0x1f8>
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	3307      	adds	r3, #7
 800e97c:	f023 0307 	bic.w	r3, r3, #7
 800e980:	3308      	adds	r3, #8
 800e982:	9303      	str	r3, [sp, #12]
 800e984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e986:	443b      	add	r3, r7
 800e988:	9309      	str	r3, [sp, #36]	; 0x24
 800e98a:	e767      	b.n	800e85c <_vfiprintf_r+0x94>
 800e98c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e990:	460c      	mov	r4, r1
 800e992:	2001      	movs	r0, #1
 800e994:	e7a5      	b.n	800e8e2 <_vfiprintf_r+0x11a>
 800e996:	2300      	movs	r3, #0
 800e998:	3401      	adds	r4, #1
 800e99a:	9305      	str	r3, [sp, #20]
 800e99c:	4619      	mov	r1, r3
 800e99e:	f04f 0c0a 	mov.w	ip, #10
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9a8:	3a30      	subs	r2, #48	; 0x30
 800e9aa:	2a09      	cmp	r2, #9
 800e9ac:	d903      	bls.n	800e9b6 <_vfiprintf_r+0x1ee>
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d0c5      	beq.n	800e93e <_vfiprintf_r+0x176>
 800e9b2:	9105      	str	r1, [sp, #20]
 800e9b4:	e7c3      	b.n	800e93e <_vfiprintf_r+0x176>
 800e9b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	2301      	movs	r3, #1
 800e9be:	e7f0      	b.n	800e9a2 <_vfiprintf_r+0x1da>
 800e9c0:	ab03      	add	r3, sp, #12
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	462a      	mov	r2, r5
 800e9c6:	4b16      	ldr	r3, [pc, #88]	; (800ea20 <_vfiprintf_r+0x258>)
 800e9c8:	a904      	add	r1, sp, #16
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f3af 8000 	nop.w
 800e9d0:	4607      	mov	r7, r0
 800e9d2:	1c78      	adds	r0, r7, #1
 800e9d4:	d1d6      	bne.n	800e984 <_vfiprintf_r+0x1bc>
 800e9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9d8:	07d9      	lsls	r1, r3, #31
 800e9da:	d405      	bmi.n	800e9e8 <_vfiprintf_r+0x220>
 800e9dc:	89ab      	ldrh	r3, [r5, #12]
 800e9de:	059a      	lsls	r2, r3, #22
 800e9e0:	d402      	bmi.n	800e9e8 <_vfiprintf_r+0x220>
 800e9e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9e4:	f7ff fe31 	bl	800e64a <__retarget_lock_release_recursive>
 800e9e8:	89ab      	ldrh	r3, [r5, #12]
 800e9ea:	065b      	lsls	r3, r3, #25
 800e9ec:	f53f af12 	bmi.w	800e814 <_vfiprintf_r+0x4c>
 800e9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9f2:	e711      	b.n	800e818 <_vfiprintf_r+0x50>
 800e9f4:	ab03      	add	r3, sp, #12
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	4b09      	ldr	r3, [pc, #36]	; (800ea20 <_vfiprintf_r+0x258>)
 800e9fc:	a904      	add	r1, sp, #16
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f000 f880 	bl	800eb04 <_printf_i>
 800ea04:	e7e4      	b.n	800e9d0 <_vfiprintf_r+0x208>
 800ea06:	bf00      	nop
 800ea08:	0800f520 	.word	0x0800f520
 800ea0c:	0800f540 	.word	0x0800f540
 800ea10:	0800f500 	.word	0x0800f500
 800ea14:	0800f560 	.word	0x0800f560
 800ea18:	0800f56a 	.word	0x0800f56a
 800ea1c:	00000000 	.word	0x00000000
 800ea20:	0800e7a3 	.word	0x0800e7a3
 800ea24:	0800f566 	.word	0x0800f566

0800ea28 <_printf_common>:
 800ea28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea2c:	4616      	mov	r6, r2
 800ea2e:	4699      	mov	r9, r3
 800ea30:	688a      	ldr	r2, [r1, #8]
 800ea32:	690b      	ldr	r3, [r1, #16]
 800ea34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	bfb8      	it	lt
 800ea3c:	4613      	movlt	r3, r2
 800ea3e:	6033      	str	r3, [r6, #0]
 800ea40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea44:	4607      	mov	r7, r0
 800ea46:	460c      	mov	r4, r1
 800ea48:	b10a      	cbz	r2, 800ea4e <_printf_common+0x26>
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	6033      	str	r3, [r6, #0]
 800ea4e:	6823      	ldr	r3, [r4, #0]
 800ea50:	0699      	lsls	r1, r3, #26
 800ea52:	bf42      	ittt	mi
 800ea54:	6833      	ldrmi	r3, [r6, #0]
 800ea56:	3302      	addmi	r3, #2
 800ea58:	6033      	strmi	r3, [r6, #0]
 800ea5a:	6825      	ldr	r5, [r4, #0]
 800ea5c:	f015 0506 	ands.w	r5, r5, #6
 800ea60:	d106      	bne.n	800ea70 <_printf_common+0x48>
 800ea62:	f104 0a19 	add.w	sl, r4, #25
 800ea66:	68e3      	ldr	r3, [r4, #12]
 800ea68:	6832      	ldr	r2, [r6, #0]
 800ea6a:	1a9b      	subs	r3, r3, r2
 800ea6c:	42ab      	cmp	r3, r5
 800ea6e:	dc26      	bgt.n	800eabe <_printf_common+0x96>
 800ea70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea74:	1e13      	subs	r3, r2, #0
 800ea76:	6822      	ldr	r2, [r4, #0]
 800ea78:	bf18      	it	ne
 800ea7a:	2301      	movne	r3, #1
 800ea7c:	0692      	lsls	r2, r2, #26
 800ea7e:	d42b      	bmi.n	800ead8 <_printf_common+0xb0>
 800ea80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea84:	4649      	mov	r1, r9
 800ea86:	4638      	mov	r0, r7
 800ea88:	47c0      	blx	r8
 800ea8a:	3001      	adds	r0, #1
 800ea8c:	d01e      	beq.n	800eacc <_printf_common+0xa4>
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	68e5      	ldr	r5, [r4, #12]
 800ea92:	6832      	ldr	r2, [r6, #0]
 800ea94:	f003 0306 	and.w	r3, r3, #6
 800ea98:	2b04      	cmp	r3, #4
 800ea9a:	bf08      	it	eq
 800ea9c:	1aad      	subeq	r5, r5, r2
 800ea9e:	68a3      	ldr	r3, [r4, #8]
 800eaa0:	6922      	ldr	r2, [r4, #16]
 800eaa2:	bf0c      	ite	eq
 800eaa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eaa8:	2500      	movne	r5, #0
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	bfc4      	itt	gt
 800eaae:	1a9b      	subgt	r3, r3, r2
 800eab0:	18ed      	addgt	r5, r5, r3
 800eab2:	2600      	movs	r6, #0
 800eab4:	341a      	adds	r4, #26
 800eab6:	42b5      	cmp	r5, r6
 800eab8:	d11a      	bne.n	800eaf0 <_printf_common+0xc8>
 800eaba:	2000      	movs	r0, #0
 800eabc:	e008      	b.n	800ead0 <_printf_common+0xa8>
 800eabe:	2301      	movs	r3, #1
 800eac0:	4652      	mov	r2, sl
 800eac2:	4649      	mov	r1, r9
 800eac4:	4638      	mov	r0, r7
 800eac6:	47c0      	blx	r8
 800eac8:	3001      	adds	r0, #1
 800eaca:	d103      	bne.n	800ead4 <_printf_common+0xac>
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ead0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead4:	3501      	adds	r5, #1
 800ead6:	e7c6      	b.n	800ea66 <_printf_common+0x3e>
 800ead8:	18e1      	adds	r1, r4, r3
 800eada:	1c5a      	adds	r2, r3, #1
 800eadc:	2030      	movs	r0, #48	; 0x30
 800eade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eae2:	4422      	add	r2, r4
 800eae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eaec:	3302      	adds	r3, #2
 800eaee:	e7c7      	b.n	800ea80 <_printf_common+0x58>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	47c0      	blx	r8
 800eafa:	3001      	adds	r0, #1
 800eafc:	d0e6      	beq.n	800eacc <_printf_common+0xa4>
 800eafe:	3601      	adds	r6, #1
 800eb00:	e7d9      	b.n	800eab6 <_printf_common+0x8e>
	...

0800eb04 <_printf_i>:
 800eb04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb08:	7e0f      	ldrb	r7, [r1, #24]
 800eb0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb0c:	2f78      	cmp	r7, #120	; 0x78
 800eb0e:	4691      	mov	r9, r2
 800eb10:	4680      	mov	r8, r0
 800eb12:	460c      	mov	r4, r1
 800eb14:	469a      	mov	sl, r3
 800eb16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb1a:	d807      	bhi.n	800eb2c <_printf_i+0x28>
 800eb1c:	2f62      	cmp	r7, #98	; 0x62
 800eb1e:	d80a      	bhi.n	800eb36 <_printf_i+0x32>
 800eb20:	2f00      	cmp	r7, #0
 800eb22:	f000 80d8 	beq.w	800ecd6 <_printf_i+0x1d2>
 800eb26:	2f58      	cmp	r7, #88	; 0x58
 800eb28:	f000 80a3 	beq.w	800ec72 <_printf_i+0x16e>
 800eb2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb34:	e03a      	b.n	800ebac <_printf_i+0xa8>
 800eb36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb3a:	2b15      	cmp	r3, #21
 800eb3c:	d8f6      	bhi.n	800eb2c <_printf_i+0x28>
 800eb3e:	a101      	add	r1, pc, #4	; (adr r1, 800eb44 <_printf_i+0x40>)
 800eb40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb44:	0800eb9d 	.word	0x0800eb9d
 800eb48:	0800ebb1 	.word	0x0800ebb1
 800eb4c:	0800eb2d 	.word	0x0800eb2d
 800eb50:	0800eb2d 	.word	0x0800eb2d
 800eb54:	0800eb2d 	.word	0x0800eb2d
 800eb58:	0800eb2d 	.word	0x0800eb2d
 800eb5c:	0800ebb1 	.word	0x0800ebb1
 800eb60:	0800eb2d 	.word	0x0800eb2d
 800eb64:	0800eb2d 	.word	0x0800eb2d
 800eb68:	0800eb2d 	.word	0x0800eb2d
 800eb6c:	0800eb2d 	.word	0x0800eb2d
 800eb70:	0800ecbd 	.word	0x0800ecbd
 800eb74:	0800ebe1 	.word	0x0800ebe1
 800eb78:	0800ec9f 	.word	0x0800ec9f
 800eb7c:	0800eb2d 	.word	0x0800eb2d
 800eb80:	0800eb2d 	.word	0x0800eb2d
 800eb84:	0800ecdf 	.word	0x0800ecdf
 800eb88:	0800eb2d 	.word	0x0800eb2d
 800eb8c:	0800ebe1 	.word	0x0800ebe1
 800eb90:	0800eb2d 	.word	0x0800eb2d
 800eb94:	0800eb2d 	.word	0x0800eb2d
 800eb98:	0800eca7 	.word	0x0800eca7
 800eb9c:	682b      	ldr	r3, [r5, #0]
 800eb9e:	1d1a      	adds	r2, r3, #4
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	602a      	str	r2, [r5, #0]
 800eba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebac:	2301      	movs	r3, #1
 800ebae:	e0a3      	b.n	800ecf8 <_printf_i+0x1f4>
 800ebb0:	6820      	ldr	r0, [r4, #0]
 800ebb2:	6829      	ldr	r1, [r5, #0]
 800ebb4:	0606      	lsls	r6, r0, #24
 800ebb6:	f101 0304 	add.w	r3, r1, #4
 800ebba:	d50a      	bpl.n	800ebd2 <_printf_i+0xce>
 800ebbc:	680e      	ldr	r6, [r1, #0]
 800ebbe:	602b      	str	r3, [r5, #0]
 800ebc0:	2e00      	cmp	r6, #0
 800ebc2:	da03      	bge.n	800ebcc <_printf_i+0xc8>
 800ebc4:	232d      	movs	r3, #45	; 0x2d
 800ebc6:	4276      	negs	r6, r6
 800ebc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebcc:	485e      	ldr	r0, [pc, #376]	; (800ed48 <_printf_i+0x244>)
 800ebce:	230a      	movs	r3, #10
 800ebd0:	e019      	b.n	800ec06 <_printf_i+0x102>
 800ebd2:	680e      	ldr	r6, [r1, #0]
 800ebd4:	602b      	str	r3, [r5, #0]
 800ebd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ebda:	bf18      	it	ne
 800ebdc:	b236      	sxthne	r6, r6
 800ebde:	e7ef      	b.n	800ebc0 <_printf_i+0xbc>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	6820      	ldr	r0, [r4, #0]
 800ebe4:	1d19      	adds	r1, r3, #4
 800ebe6:	6029      	str	r1, [r5, #0]
 800ebe8:	0601      	lsls	r1, r0, #24
 800ebea:	d501      	bpl.n	800ebf0 <_printf_i+0xec>
 800ebec:	681e      	ldr	r6, [r3, #0]
 800ebee:	e002      	b.n	800ebf6 <_printf_i+0xf2>
 800ebf0:	0646      	lsls	r6, r0, #25
 800ebf2:	d5fb      	bpl.n	800ebec <_printf_i+0xe8>
 800ebf4:	881e      	ldrh	r6, [r3, #0]
 800ebf6:	4854      	ldr	r0, [pc, #336]	; (800ed48 <_printf_i+0x244>)
 800ebf8:	2f6f      	cmp	r7, #111	; 0x6f
 800ebfa:	bf0c      	ite	eq
 800ebfc:	2308      	moveq	r3, #8
 800ebfe:	230a      	movne	r3, #10
 800ec00:	2100      	movs	r1, #0
 800ec02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec06:	6865      	ldr	r5, [r4, #4]
 800ec08:	60a5      	str	r5, [r4, #8]
 800ec0a:	2d00      	cmp	r5, #0
 800ec0c:	bfa2      	ittt	ge
 800ec0e:	6821      	ldrge	r1, [r4, #0]
 800ec10:	f021 0104 	bicge.w	r1, r1, #4
 800ec14:	6021      	strge	r1, [r4, #0]
 800ec16:	b90e      	cbnz	r6, 800ec1c <_printf_i+0x118>
 800ec18:	2d00      	cmp	r5, #0
 800ec1a:	d04d      	beq.n	800ecb8 <_printf_i+0x1b4>
 800ec1c:	4615      	mov	r5, r2
 800ec1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec22:	fb03 6711 	mls	r7, r3, r1, r6
 800ec26:	5dc7      	ldrb	r7, [r0, r7]
 800ec28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec2c:	4637      	mov	r7, r6
 800ec2e:	42bb      	cmp	r3, r7
 800ec30:	460e      	mov	r6, r1
 800ec32:	d9f4      	bls.n	800ec1e <_printf_i+0x11a>
 800ec34:	2b08      	cmp	r3, #8
 800ec36:	d10b      	bne.n	800ec50 <_printf_i+0x14c>
 800ec38:	6823      	ldr	r3, [r4, #0]
 800ec3a:	07de      	lsls	r6, r3, #31
 800ec3c:	d508      	bpl.n	800ec50 <_printf_i+0x14c>
 800ec3e:	6923      	ldr	r3, [r4, #16]
 800ec40:	6861      	ldr	r1, [r4, #4]
 800ec42:	4299      	cmp	r1, r3
 800ec44:	bfde      	ittt	le
 800ec46:	2330      	movle	r3, #48	; 0x30
 800ec48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ec50:	1b52      	subs	r2, r2, r5
 800ec52:	6122      	str	r2, [r4, #16]
 800ec54:	f8cd a000 	str.w	sl, [sp]
 800ec58:	464b      	mov	r3, r9
 800ec5a:	aa03      	add	r2, sp, #12
 800ec5c:	4621      	mov	r1, r4
 800ec5e:	4640      	mov	r0, r8
 800ec60:	f7ff fee2 	bl	800ea28 <_printf_common>
 800ec64:	3001      	adds	r0, #1
 800ec66:	d14c      	bne.n	800ed02 <_printf_i+0x1fe>
 800ec68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec6c:	b004      	add	sp, #16
 800ec6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec72:	4835      	ldr	r0, [pc, #212]	; (800ed48 <_printf_i+0x244>)
 800ec74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ec78:	6829      	ldr	r1, [r5, #0]
 800ec7a:	6823      	ldr	r3, [r4, #0]
 800ec7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec80:	6029      	str	r1, [r5, #0]
 800ec82:	061d      	lsls	r5, r3, #24
 800ec84:	d514      	bpl.n	800ecb0 <_printf_i+0x1ac>
 800ec86:	07df      	lsls	r7, r3, #31
 800ec88:	bf44      	itt	mi
 800ec8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ec8e:	6023      	strmi	r3, [r4, #0]
 800ec90:	b91e      	cbnz	r6, 800ec9a <_printf_i+0x196>
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	f023 0320 	bic.w	r3, r3, #32
 800ec98:	6023      	str	r3, [r4, #0]
 800ec9a:	2310      	movs	r3, #16
 800ec9c:	e7b0      	b.n	800ec00 <_printf_i+0xfc>
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	f043 0320 	orr.w	r3, r3, #32
 800eca4:	6023      	str	r3, [r4, #0]
 800eca6:	2378      	movs	r3, #120	; 0x78
 800eca8:	4828      	ldr	r0, [pc, #160]	; (800ed4c <_printf_i+0x248>)
 800ecaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecae:	e7e3      	b.n	800ec78 <_printf_i+0x174>
 800ecb0:	0659      	lsls	r1, r3, #25
 800ecb2:	bf48      	it	mi
 800ecb4:	b2b6      	uxthmi	r6, r6
 800ecb6:	e7e6      	b.n	800ec86 <_printf_i+0x182>
 800ecb8:	4615      	mov	r5, r2
 800ecba:	e7bb      	b.n	800ec34 <_printf_i+0x130>
 800ecbc:	682b      	ldr	r3, [r5, #0]
 800ecbe:	6826      	ldr	r6, [r4, #0]
 800ecc0:	6961      	ldr	r1, [r4, #20]
 800ecc2:	1d18      	adds	r0, r3, #4
 800ecc4:	6028      	str	r0, [r5, #0]
 800ecc6:	0635      	lsls	r5, r6, #24
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	d501      	bpl.n	800ecd0 <_printf_i+0x1cc>
 800eccc:	6019      	str	r1, [r3, #0]
 800ecce:	e002      	b.n	800ecd6 <_printf_i+0x1d2>
 800ecd0:	0670      	lsls	r0, r6, #25
 800ecd2:	d5fb      	bpl.n	800eccc <_printf_i+0x1c8>
 800ecd4:	8019      	strh	r1, [r3, #0]
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	6123      	str	r3, [r4, #16]
 800ecda:	4615      	mov	r5, r2
 800ecdc:	e7ba      	b.n	800ec54 <_printf_i+0x150>
 800ecde:	682b      	ldr	r3, [r5, #0]
 800ece0:	1d1a      	adds	r2, r3, #4
 800ece2:	602a      	str	r2, [r5, #0]
 800ece4:	681d      	ldr	r5, [r3, #0]
 800ece6:	6862      	ldr	r2, [r4, #4]
 800ece8:	2100      	movs	r1, #0
 800ecea:	4628      	mov	r0, r5
 800ecec:	f7f1 fa88 	bl	8000200 <memchr>
 800ecf0:	b108      	cbz	r0, 800ecf6 <_printf_i+0x1f2>
 800ecf2:	1b40      	subs	r0, r0, r5
 800ecf4:	6060      	str	r0, [r4, #4]
 800ecf6:	6863      	ldr	r3, [r4, #4]
 800ecf8:	6123      	str	r3, [r4, #16]
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed00:	e7a8      	b.n	800ec54 <_printf_i+0x150>
 800ed02:	6923      	ldr	r3, [r4, #16]
 800ed04:	462a      	mov	r2, r5
 800ed06:	4649      	mov	r1, r9
 800ed08:	4640      	mov	r0, r8
 800ed0a:	47d0      	blx	sl
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	d0ab      	beq.n	800ec68 <_printf_i+0x164>
 800ed10:	6823      	ldr	r3, [r4, #0]
 800ed12:	079b      	lsls	r3, r3, #30
 800ed14:	d413      	bmi.n	800ed3e <_printf_i+0x23a>
 800ed16:	68e0      	ldr	r0, [r4, #12]
 800ed18:	9b03      	ldr	r3, [sp, #12]
 800ed1a:	4298      	cmp	r0, r3
 800ed1c:	bfb8      	it	lt
 800ed1e:	4618      	movlt	r0, r3
 800ed20:	e7a4      	b.n	800ec6c <_printf_i+0x168>
 800ed22:	2301      	movs	r3, #1
 800ed24:	4632      	mov	r2, r6
 800ed26:	4649      	mov	r1, r9
 800ed28:	4640      	mov	r0, r8
 800ed2a:	47d0      	blx	sl
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	d09b      	beq.n	800ec68 <_printf_i+0x164>
 800ed30:	3501      	adds	r5, #1
 800ed32:	68e3      	ldr	r3, [r4, #12]
 800ed34:	9903      	ldr	r1, [sp, #12]
 800ed36:	1a5b      	subs	r3, r3, r1
 800ed38:	42ab      	cmp	r3, r5
 800ed3a:	dcf2      	bgt.n	800ed22 <_printf_i+0x21e>
 800ed3c:	e7eb      	b.n	800ed16 <_printf_i+0x212>
 800ed3e:	2500      	movs	r5, #0
 800ed40:	f104 0619 	add.w	r6, r4, #25
 800ed44:	e7f5      	b.n	800ed32 <_printf_i+0x22e>
 800ed46:	bf00      	nop
 800ed48:	0800f571 	.word	0x0800f571
 800ed4c:	0800f582 	.word	0x0800f582

0800ed50 <_sbrk_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4d06      	ldr	r5, [pc, #24]	; (800ed6c <_sbrk_r+0x1c>)
 800ed54:	2300      	movs	r3, #0
 800ed56:	4604      	mov	r4, r0
 800ed58:	4608      	mov	r0, r1
 800ed5a:	602b      	str	r3, [r5, #0]
 800ed5c:	f000 fb1c 	bl	800f398 <_sbrk>
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	d102      	bne.n	800ed6a <_sbrk_r+0x1a>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	b103      	cbz	r3, 800ed6a <_sbrk_r+0x1a>
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	bd38      	pop	{r3, r4, r5, pc}
 800ed6c:	20002228 	.word	0x20002228

0800ed70 <__sread>:
 800ed70:	b510      	push	{r4, lr}
 800ed72:	460c      	mov	r4, r1
 800ed74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed78:	f000 fab2 	bl	800f2e0 <_read_r>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	bfab      	itete	ge
 800ed80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed82:	89a3      	ldrhlt	r3, [r4, #12]
 800ed84:	181b      	addge	r3, r3, r0
 800ed86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed8a:	bfac      	ite	ge
 800ed8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed8e:	81a3      	strhlt	r3, [r4, #12]
 800ed90:	bd10      	pop	{r4, pc}

0800ed92 <__swrite>:
 800ed92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed96:	461f      	mov	r7, r3
 800ed98:	898b      	ldrh	r3, [r1, #12]
 800ed9a:	05db      	lsls	r3, r3, #23
 800ed9c:	4605      	mov	r5, r0
 800ed9e:	460c      	mov	r4, r1
 800eda0:	4616      	mov	r6, r2
 800eda2:	d505      	bpl.n	800edb0 <__swrite+0x1e>
 800eda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eda8:	2302      	movs	r3, #2
 800edaa:	2200      	movs	r2, #0
 800edac:	f000 f9c8 	bl	800f140 <_lseek_r>
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edba:	81a3      	strh	r3, [r4, #12]
 800edbc:	4632      	mov	r2, r6
 800edbe:	463b      	mov	r3, r7
 800edc0:	4628      	mov	r0, r5
 800edc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edc6:	f000 b869 	b.w	800ee9c <_write_r>

0800edca <__sseek>:
 800edca:	b510      	push	{r4, lr}
 800edcc:	460c      	mov	r4, r1
 800edce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edd2:	f000 f9b5 	bl	800f140 <_lseek_r>
 800edd6:	1c43      	adds	r3, r0, #1
 800edd8:	89a3      	ldrh	r3, [r4, #12]
 800edda:	bf15      	itete	ne
 800eddc:	6560      	strne	r0, [r4, #84]	; 0x54
 800edde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ede2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ede6:	81a3      	strheq	r3, [r4, #12]
 800ede8:	bf18      	it	ne
 800edea:	81a3      	strhne	r3, [r4, #12]
 800edec:	bd10      	pop	{r4, pc}

0800edee <__sclose>:
 800edee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edf2:	f000 b8d3 	b.w	800ef9c <_close_r>
	...

0800edf8 <__swbuf_r>:
 800edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfa:	460e      	mov	r6, r1
 800edfc:	4614      	mov	r4, r2
 800edfe:	4605      	mov	r5, r0
 800ee00:	b118      	cbz	r0, 800ee0a <__swbuf_r+0x12>
 800ee02:	6983      	ldr	r3, [r0, #24]
 800ee04:	b90b      	cbnz	r3, 800ee0a <__swbuf_r+0x12>
 800ee06:	f7ff fb81 	bl	800e50c <__sinit>
 800ee0a:	4b21      	ldr	r3, [pc, #132]	; (800ee90 <__swbuf_r+0x98>)
 800ee0c:	429c      	cmp	r4, r3
 800ee0e:	d12b      	bne.n	800ee68 <__swbuf_r+0x70>
 800ee10:	686c      	ldr	r4, [r5, #4]
 800ee12:	69a3      	ldr	r3, [r4, #24]
 800ee14:	60a3      	str	r3, [r4, #8]
 800ee16:	89a3      	ldrh	r3, [r4, #12]
 800ee18:	071a      	lsls	r2, r3, #28
 800ee1a:	d52f      	bpl.n	800ee7c <__swbuf_r+0x84>
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	b36b      	cbz	r3, 800ee7c <__swbuf_r+0x84>
 800ee20:	6923      	ldr	r3, [r4, #16]
 800ee22:	6820      	ldr	r0, [r4, #0]
 800ee24:	1ac0      	subs	r0, r0, r3
 800ee26:	6963      	ldr	r3, [r4, #20]
 800ee28:	b2f6      	uxtb	r6, r6
 800ee2a:	4283      	cmp	r3, r0
 800ee2c:	4637      	mov	r7, r6
 800ee2e:	dc04      	bgt.n	800ee3a <__swbuf_r+0x42>
 800ee30:	4621      	mov	r1, r4
 800ee32:	4628      	mov	r0, r5
 800ee34:	f000 f948 	bl	800f0c8 <_fflush_r>
 800ee38:	bb30      	cbnz	r0, 800ee88 <__swbuf_r+0x90>
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	60a3      	str	r3, [r4, #8]
 800ee40:	6823      	ldr	r3, [r4, #0]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	6022      	str	r2, [r4, #0]
 800ee46:	701e      	strb	r6, [r3, #0]
 800ee48:	6963      	ldr	r3, [r4, #20]
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	4283      	cmp	r3, r0
 800ee4e:	d004      	beq.n	800ee5a <__swbuf_r+0x62>
 800ee50:	89a3      	ldrh	r3, [r4, #12]
 800ee52:	07db      	lsls	r3, r3, #31
 800ee54:	d506      	bpl.n	800ee64 <__swbuf_r+0x6c>
 800ee56:	2e0a      	cmp	r6, #10
 800ee58:	d104      	bne.n	800ee64 <__swbuf_r+0x6c>
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f000 f933 	bl	800f0c8 <_fflush_r>
 800ee62:	b988      	cbnz	r0, 800ee88 <__swbuf_r+0x90>
 800ee64:	4638      	mov	r0, r7
 800ee66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee68:	4b0a      	ldr	r3, [pc, #40]	; (800ee94 <__swbuf_r+0x9c>)
 800ee6a:	429c      	cmp	r4, r3
 800ee6c:	d101      	bne.n	800ee72 <__swbuf_r+0x7a>
 800ee6e:	68ac      	ldr	r4, [r5, #8]
 800ee70:	e7cf      	b.n	800ee12 <__swbuf_r+0x1a>
 800ee72:	4b09      	ldr	r3, [pc, #36]	; (800ee98 <__swbuf_r+0xa0>)
 800ee74:	429c      	cmp	r4, r3
 800ee76:	bf08      	it	eq
 800ee78:	68ec      	ldreq	r4, [r5, #12]
 800ee7a:	e7ca      	b.n	800ee12 <__swbuf_r+0x1a>
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f000 f81e 	bl	800eec0 <__swsetup_r>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d0cb      	beq.n	800ee20 <__swbuf_r+0x28>
 800ee88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ee8c:	e7ea      	b.n	800ee64 <__swbuf_r+0x6c>
 800ee8e:	bf00      	nop
 800ee90:	0800f520 	.word	0x0800f520
 800ee94:	0800f540 	.word	0x0800f540
 800ee98:	0800f500 	.word	0x0800f500

0800ee9c <_write_r>:
 800ee9c:	b538      	push	{r3, r4, r5, lr}
 800ee9e:	4d07      	ldr	r5, [pc, #28]	; (800eebc <_write_r+0x20>)
 800eea0:	4604      	mov	r4, r0
 800eea2:	4608      	mov	r0, r1
 800eea4:	4611      	mov	r1, r2
 800eea6:	2200      	movs	r2, #0
 800eea8:	602a      	str	r2, [r5, #0]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	f000 fa82 	bl	800f3b4 <_write>
 800eeb0:	1c43      	adds	r3, r0, #1
 800eeb2:	d102      	bne.n	800eeba <_write_r+0x1e>
 800eeb4:	682b      	ldr	r3, [r5, #0]
 800eeb6:	b103      	cbz	r3, 800eeba <_write_r+0x1e>
 800eeb8:	6023      	str	r3, [r4, #0]
 800eeba:	bd38      	pop	{r3, r4, r5, pc}
 800eebc:	20002228 	.word	0x20002228

0800eec0 <__swsetup_r>:
 800eec0:	4b32      	ldr	r3, [pc, #200]	; (800ef8c <__swsetup_r+0xcc>)
 800eec2:	b570      	push	{r4, r5, r6, lr}
 800eec4:	681d      	ldr	r5, [r3, #0]
 800eec6:	4606      	mov	r6, r0
 800eec8:	460c      	mov	r4, r1
 800eeca:	b125      	cbz	r5, 800eed6 <__swsetup_r+0x16>
 800eecc:	69ab      	ldr	r3, [r5, #24]
 800eece:	b913      	cbnz	r3, 800eed6 <__swsetup_r+0x16>
 800eed0:	4628      	mov	r0, r5
 800eed2:	f7ff fb1b 	bl	800e50c <__sinit>
 800eed6:	4b2e      	ldr	r3, [pc, #184]	; (800ef90 <__swsetup_r+0xd0>)
 800eed8:	429c      	cmp	r4, r3
 800eeda:	d10f      	bne.n	800eefc <__swsetup_r+0x3c>
 800eedc:	686c      	ldr	r4, [r5, #4]
 800eede:	89a3      	ldrh	r3, [r4, #12]
 800eee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eee4:	0719      	lsls	r1, r3, #28
 800eee6:	d42c      	bmi.n	800ef42 <__swsetup_r+0x82>
 800eee8:	06dd      	lsls	r5, r3, #27
 800eeea:	d411      	bmi.n	800ef10 <__swsetup_r+0x50>
 800eeec:	2309      	movs	r3, #9
 800eeee:	6033      	str	r3, [r6, #0]
 800eef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eef4:	81a3      	strh	r3, [r4, #12]
 800eef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eefa:	e03e      	b.n	800ef7a <__swsetup_r+0xba>
 800eefc:	4b25      	ldr	r3, [pc, #148]	; (800ef94 <__swsetup_r+0xd4>)
 800eefe:	429c      	cmp	r4, r3
 800ef00:	d101      	bne.n	800ef06 <__swsetup_r+0x46>
 800ef02:	68ac      	ldr	r4, [r5, #8]
 800ef04:	e7eb      	b.n	800eede <__swsetup_r+0x1e>
 800ef06:	4b24      	ldr	r3, [pc, #144]	; (800ef98 <__swsetup_r+0xd8>)
 800ef08:	429c      	cmp	r4, r3
 800ef0a:	bf08      	it	eq
 800ef0c:	68ec      	ldreq	r4, [r5, #12]
 800ef0e:	e7e6      	b.n	800eede <__swsetup_r+0x1e>
 800ef10:	0758      	lsls	r0, r3, #29
 800ef12:	d512      	bpl.n	800ef3a <__swsetup_r+0x7a>
 800ef14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef16:	b141      	cbz	r1, 800ef2a <__swsetup_r+0x6a>
 800ef18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef1c:	4299      	cmp	r1, r3
 800ef1e:	d002      	beq.n	800ef26 <__swsetup_r+0x66>
 800ef20:	4630      	mov	r0, r6
 800ef22:	f000 f991 	bl	800f248 <_free_r>
 800ef26:	2300      	movs	r3, #0
 800ef28:	6363      	str	r3, [r4, #52]	; 0x34
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	2300      	movs	r3, #0
 800ef34:	6063      	str	r3, [r4, #4]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f043 0308 	orr.w	r3, r3, #8
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	6923      	ldr	r3, [r4, #16]
 800ef44:	b94b      	cbnz	r3, 800ef5a <__swsetup_r+0x9a>
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef50:	d003      	beq.n	800ef5a <__swsetup_r+0x9a>
 800ef52:	4621      	mov	r1, r4
 800ef54:	4630      	mov	r0, r6
 800ef56:	f000 f92b 	bl	800f1b0 <__smakebuf_r>
 800ef5a:	89a0      	ldrh	r0, [r4, #12]
 800ef5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef60:	f010 0301 	ands.w	r3, r0, #1
 800ef64:	d00a      	beq.n	800ef7c <__swsetup_r+0xbc>
 800ef66:	2300      	movs	r3, #0
 800ef68:	60a3      	str	r3, [r4, #8]
 800ef6a:	6963      	ldr	r3, [r4, #20]
 800ef6c:	425b      	negs	r3, r3
 800ef6e:	61a3      	str	r3, [r4, #24]
 800ef70:	6923      	ldr	r3, [r4, #16]
 800ef72:	b943      	cbnz	r3, 800ef86 <__swsetup_r+0xc6>
 800ef74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef78:	d1ba      	bne.n	800eef0 <__swsetup_r+0x30>
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}
 800ef7c:	0781      	lsls	r1, r0, #30
 800ef7e:	bf58      	it	pl
 800ef80:	6963      	ldrpl	r3, [r4, #20]
 800ef82:	60a3      	str	r3, [r4, #8]
 800ef84:	e7f4      	b.n	800ef70 <__swsetup_r+0xb0>
 800ef86:	2000      	movs	r0, #0
 800ef88:	e7f7      	b.n	800ef7a <__swsetup_r+0xba>
 800ef8a:	bf00      	nop
 800ef8c:	20000190 	.word	0x20000190
 800ef90:	0800f520 	.word	0x0800f520
 800ef94:	0800f540 	.word	0x0800f540
 800ef98:	0800f500 	.word	0x0800f500

0800ef9c <_close_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	4d06      	ldr	r5, [pc, #24]	; (800efb8 <_close_r+0x1c>)
 800efa0:	2300      	movs	r3, #0
 800efa2:	4604      	mov	r4, r0
 800efa4:	4608      	mov	r0, r1
 800efa6:	602b      	str	r3, [r5, #0]
 800efa8:	f000 f9ce 	bl	800f348 <_close>
 800efac:	1c43      	adds	r3, r0, #1
 800efae:	d102      	bne.n	800efb6 <_close_r+0x1a>
 800efb0:	682b      	ldr	r3, [r5, #0]
 800efb2:	b103      	cbz	r3, 800efb6 <_close_r+0x1a>
 800efb4:	6023      	str	r3, [r4, #0]
 800efb6:	bd38      	pop	{r3, r4, r5, pc}
 800efb8:	20002228 	.word	0x20002228

0800efbc <__sflush_r>:
 800efbc:	898a      	ldrh	r2, [r1, #12]
 800efbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc2:	4605      	mov	r5, r0
 800efc4:	0710      	lsls	r0, r2, #28
 800efc6:	460c      	mov	r4, r1
 800efc8:	d458      	bmi.n	800f07c <__sflush_r+0xc0>
 800efca:	684b      	ldr	r3, [r1, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	dc05      	bgt.n	800efdc <__sflush_r+0x20>
 800efd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	dc02      	bgt.n	800efdc <__sflush_r+0x20>
 800efd6:	2000      	movs	r0, #0
 800efd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efde:	2e00      	cmp	r6, #0
 800efe0:	d0f9      	beq.n	800efd6 <__sflush_r+0x1a>
 800efe2:	2300      	movs	r3, #0
 800efe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efe8:	682f      	ldr	r7, [r5, #0]
 800efea:	602b      	str	r3, [r5, #0]
 800efec:	d032      	beq.n	800f054 <__sflush_r+0x98>
 800efee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	075a      	lsls	r2, r3, #29
 800eff4:	d505      	bpl.n	800f002 <__sflush_r+0x46>
 800eff6:	6863      	ldr	r3, [r4, #4]
 800eff8:	1ac0      	subs	r0, r0, r3
 800effa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800effc:	b10b      	cbz	r3, 800f002 <__sflush_r+0x46>
 800effe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f000:	1ac0      	subs	r0, r0, r3
 800f002:	2300      	movs	r3, #0
 800f004:	4602      	mov	r2, r0
 800f006:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f008:	6a21      	ldr	r1, [r4, #32]
 800f00a:	4628      	mov	r0, r5
 800f00c:	47b0      	blx	r6
 800f00e:	1c43      	adds	r3, r0, #1
 800f010:	89a3      	ldrh	r3, [r4, #12]
 800f012:	d106      	bne.n	800f022 <__sflush_r+0x66>
 800f014:	6829      	ldr	r1, [r5, #0]
 800f016:	291d      	cmp	r1, #29
 800f018:	d82c      	bhi.n	800f074 <__sflush_r+0xb8>
 800f01a:	4a2a      	ldr	r2, [pc, #168]	; (800f0c4 <__sflush_r+0x108>)
 800f01c:	40ca      	lsrs	r2, r1
 800f01e:	07d6      	lsls	r6, r2, #31
 800f020:	d528      	bpl.n	800f074 <__sflush_r+0xb8>
 800f022:	2200      	movs	r2, #0
 800f024:	6062      	str	r2, [r4, #4]
 800f026:	04d9      	lsls	r1, r3, #19
 800f028:	6922      	ldr	r2, [r4, #16]
 800f02a:	6022      	str	r2, [r4, #0]
 800f02c:	d504      	bpl.n	800f038 <__sflush_r+0x7c>
 800f02e:	1c42      	adds	r2, r0, #1
 800f030:	d101      	bne.n	800f036 <__sflush_r+0x7a>
 800f032:	682b      	ldr	r3, [r5, #0]
 800f034:	b903      	cbnz	r3, 800f038 <__sflush_r+0x7c>
 800f036:	6560      	str	r0, [r4, #84]	; 0x54
 800f038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f03a:	602f      	str	r7, [r5, #0]
 800f03c:	2900      	cmp	r1, #0
 800f03e:	d0ca      	beq.n	800efd6 <__sflush_r+0x1a>
 800f040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f044:	4299      	cmp	r1, r3
 800f046:	d002      	beq.n	800f04e <__sflush_r+0x92>
 800f048:	4628      	mov	r0, r5
 800f04a:	f000 f8fd 	bl	800f248 <_free_r>
 800f04e:	2000      	movs	r0, #0
 800f050:	6360      	str	r0, [r4, #52]	; 0x34
 800f052:	e7c1      	b.n	800efd8 <__sflush_r+0x1c>
 800f054:	6a21      	ldr	r1, [r4, #32]
 800f056:	2301      	movs	r3, #1
 800f058:	4628      	mov	r0, r5
 800f05a:	47b0      	blx	r6
 800f05c:	1c41      	adds	r1, r0, #1
 800f05e:	d1c7      	bne.n	800eff0 <__sflush_r+0x34>
 800f060:	682b      	ldr	r3, [r5, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d0c4      	beq.n	800eff0 <__sflush_r+0x34>
 800f066:	2b1d      	cmp	r3, #29
 800f068:	d001      	beq.n	800f06e <__sflush_r+0xb2>
 800f06a:	2b16      	cmp	r3, #22
 800f06c:	d101      	bne.n	800f072 <__sflush_r+0xb6>
 800f06e:	602f      	str	r7, [r5, #0]
 800f070:	e7b1      	b.n	800efd6 <__sflush_r+0x1a>
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f078:	81a3      	strh	r3, [r4, #12]
 800f07a:	e7ad      	b.n	800efd8 <__sflush_r+0x1c>
 800f07c:	690f      	ldr	r7, [r1, #16]
 800f07e:	2f00      	cmp	r7, #0
 800f080:	d0a9      	beq.n	800efd6 <__sflush_r+0x1a>
 800f082:	0793      	lsls	r3, r2, #30
 800f084:	680e      	ldr	r6, [r1, #0]
 800f086:	bf08      	it	eq
 800f088:	694b      	ldreq	r3, [r1, #20]
 800f08a:	600f      	str	r7, [r1, #0]
 800f08c:	bf18      	it	ne
 800f08e:	2300      	movne	r3, #0
 800f090:	eba6 0807 	sub.w	r8, r6, r7
 800f094:	608b      	str	r3, [r1, #8]
 800f096:	f1b8 0f00 	cmp.w	r8, #0
 800f09a:	dd9c      	ble.n	800efd6 <__sflush_r+0x1a>
 800f09c:	6a21      	ldr	r1, [r4, #32]
 800f09e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0a0:	4643      	mov	r3, r8
 800f0a2:	463a      	mov	r2, r7
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	47b0      	blx	r6
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	dc06      	bgt.n	800f0ba <__sflush_r+0xfe>
 800f0ac:	89a3      	ldrh	r3, [r4, #12]
 800f0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0b2:	81a3      	strh	r3, [r4, #12]
 800f0b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0b8:	e78e      	b.n	800efd8 <__sflush_r+0x1c>
 800f0ba:	4407      	add	r7, r0
 800f0bc:	eba8 0800 	sub.w	r8, r8, r0
 800f0c0:	e7e9      	b.n	800f096 <__sflush_r+0xda>
 800f0c2:	bf00      	nop
 800f0c4:	20400001 	.word	0x20400001

0800f0c8 <_fflush_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	690b      	ldr	r3, [r1, #16]
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	b913      	cbnz	r3, 800f0d8 <_fflush_r+0x10>
 800f0d2:	2500      	movs	r5, #0
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	bd38      	pop	{r3, r4, r5, pc}
 800f0d8:	b118      	cbz	r0, 800f0e2 <_fflush_r+0x1a>
 800f0da:	6983      	ldr	r3, [r0, #24]
 800f0dc:	b90b      	cbnz	r3, 800f0e2 <_fflush_r+0x1a>
 800f0de:	f7ff fa15 	bl	800e50c <__sinit>
 800f0e2:	4b14      	ldr	r3, [pc, #80]	; (800f134 <_fflush_r+0x6c>)
 800f0e4:	429c      	cmp	r4, r3
 800f0e6:	d11b      	bne.n	800f120 <_fflush_r+0x58>
 800f0e8:	686c      	ldr	r4, [r5, #4]
 800f0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d0ef      	beq.n	800f0d2 <_fflush_r+0xa>
 800f0f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0f4:	07d0      	lsls	r0, r2, #31
 800f0f6:	d404      	bmi.n	800f102 <_fflush_r+0x3a>
 800f0f8:	0599      	lsls	r1, r3, #22
 800f0fa:	d402      	bmi.n	800f102 <_fflush_r+0x3a>
 800f0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0fe:	f7ff faa3 	bl	800e648 <__retarget_lock_acquire_recursive>
 800f102:	4628      	mov	r0, r5
 800f104:	4621      	mov	r1, r4
 800f106:	f7ff ff59 	bl	800efbc <__sflush_r>
 800f10a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f10c:	07da      	lsls	r2, r3, #31
 800f10e:	4605      	mov	r5, r0
 800f110:	d4e0      	bmi.n	800f0d4 <_fflush_r+0xc>
 800f112:	89a3      	ldrh	r3, [r4, #12]
 800f114:	059b      	lsls	r3, r3, #22
 800f116:	d4dd      	bmi.n	800f0d4 <_fflush_r+0xc>
 800f118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f11a:	f7ff fa96 	bl	800e64a <__retarget_lock_release_recursive>
 800f11e:	e7d9      	b.n	800f0d4 <_fflush_r+0xc>
 800f120:	4b05      	ldr	r3, [pc, #20]	; (800f138 <_fflush_r+0x70>)
 800f122:	429c      	cmp	r4, r3
 800f124:	d101      	bne.n	800f12a <_fflush_r+0x62>
 800f126:	68ac      	ldr	r4, [r5, #8]
 800f128:	e7df      	b.n	800f0ea <_fflush_r+0x22>
 800f12a:	4b04      	ldr	r3, [pc, #16]	; (800f13c <_fflush_r+0x74>)
 800f12c:	429c      	cmp	r4, r3
 800f12e:	bf08      	it	eq
 800f130:	68ec      	ldreq	r4, [r5, #12]
 800f132:	e7da      	b.n	800f0ea <_fflush_r+0x22>
 800f134:	0800f520 	.word	0x0800f520
 800f138:	0800f540 	.word	0x0800f540
 800f13c:	0800f500 	.word	0x0800f500

0800f140 <_lseek_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4d07      	ldr	r5, [pc, #28]	; (800f160 <_lseek_r+0x20>)
 800f144:	4604      	mov	r4, r0
 800f146:	4608      	mov	r0, r1
 800f148:	4611      	mov	r1, r2
 800f14a:	2200      	movs	r2, #0
 800f14c:	602a      	str	r2, [r5, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	f000 f912 	bl	800f378 <_lseek>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_lseek_r+0x1e>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_lseek_r+0x1e>
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	20002228 	.word	0x20002228

0800f164 <__swhatbuf_r>:
 800f164:	b570      	push	{r4, r5, r6, lr}
 800f166:	460e      	mov	r6, r1
 800f168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16c:	2900      	cmp	r1, #0
 800f16e:	b096      	sub	sp, #88	; 0x58
 800f170:	4614      	mov	r4, r2
 800f172:	461d      	mov	r5, r3
 800f174:	da08      	bge.n	800f188 <__swhatbuf_r+0x24>
 800f176:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f17a:	2200      	movs	r2, #0
 800f17c:	602a      	str	r2, [r5, #0]
 800f17e:	061a      	lsls	r2, r3, #24
 800f180:	d410      	bmi.n	800f1a4 <__swhatbuf_r+0x40>
 800f182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f186:	e00e      	b.n	800f1a6 <__swhatbuf_r+0x42>
 800f188:	466a      	mov	r2, sp
 800f18a:	f000 f8bb 	bl	800f304 <_fstat_r>
 800f18e:	2800      	cmp	r0, #0
 800f190:	dbf1      	blt.n	800f176 <__swhatbuf_r+0x12>
 800f192:	9a01      	ldr	r2, [sp, #4]
 800f194:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f198:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f19c:	425a      	negs	r2, r3
 800f19e:	415a      	adcs	r2, r3
 800f1a0:	602a      	str	r2, [r5, #0]
 800f1a2:	e7ee      	b.n	800f182 <__swhatbuf_r+0x1e>
 800f1a4:	2340      	movs	r3, #64	; 0x40
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	b016      	add	sp, #88	; 0x58
 800f1ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f1b0 <__smakebuf_r>:
 800f1b0:	898b      	ldrh	r3, [r1, #12]
 800f1b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1b4:	079d      	lsls	r5, r3, #30
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	460c      	mov	r4, r1
 800f1ba:	d507      	bpl.n	800f1cc <__smakebuf_r+0x1c>
 800f1bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	6123      	str	r3, [r4, #16]
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	6163      	str	r3, [r4, #20]
 800f1c8:	b002      	add	sp, #8
 800f1ca:	bd70      	pop	{r4, r5, r6, pc}
 800f1cc:	ab01      	add	r3, sp, #4
 800f1ce:	466a      	mov	r2, sp
 800f1d0:	f7ff ffc8 	bl	800f164 <__swhatbuf_r>
 800f1d4:	9900      	ldr	r1, [sp, #0]
 800f1d6:	4605      	mov	r5, r0
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7ff fa57 	bl	800e68c <_malloc_r>
 800f1de:	b948      	cbnz	r0, 800f1f4 <__smakebuf_r+0x44>
 800f1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1e4:	059a      	lsls	r2, r3, #22
 800f1e6:	d4ef      	bmi.n	800f1c8 <__smakebuf_r+0x18>
 800f1e8:	f023 0303 	bic.w	r3, r3, #3
 800f1ec:	f043 0302 	orr.w	r3, r3, #2
 800f1f0:	81a3      	strh	r3, [r4, #12]
 800f1f2:	e7e3      	b.n	800f1bc <__smakebuf_r+0xc>
 800f1f4:	4b0d      	ldr	r3, [pc, #52]	; (800f22c <__smakebuf_r+0x7c>)
 800f1f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1f8:	89a3      	ldrh	r3, [r4, #12]
 800f1fa:	6020      	str	r0, [r4, #0]
 800f1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f200:	81a3      	strh	r3, [r4, #12]
 800f202:	9b00      	ldr	r3, [sp, #0]
 800f204:	6163      	str	r3, [r4, #20]
 800f206:	9b01      	ldr	r3, [sp, #4]
 800f208:	6120      	str	r0, [r4, #16]
 800f20a:	b15b      	cbz	r3, 800f224 <__smakebuf_r+0x74>
 800f20c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f210:	4630      	mov	r0, r6
 800f212:	f000 f889 	bl	800f328 <_isatty_r>
 800f216:	b128      	cbz	r0, 800f224 <__smakebuf_r+0x74>
 800f218:	89a3      	ldrh	r3, [r4, #12]
 800f21a:	f023 0303 	bic.w	r3, r3, #3
 800f21e:	f043 0301 	orr.w	r3, r3, #1
 800f222:	81a3      	strh	r3, [r4, #12]
 800f224:	89a0      	ldrh	r0, [r4, #12]
 800f226:	4305      	orrs	r5, r0
 800f228:	81a5      	strh	r5, [r4, #12]
 800f22a:	e7cd      	b.n	800f1c8 <__smakebuf_r+0x18>
 800f22c:	0800e4a5 	.word	0x0800e4a5

0800f230 <__malloc_lock>:
 800f230:	4801      	ldr	r0, [pc, #4]	; (800f238 <__malloc_lock+0x8>)
 800f232:	f7ff ba09 	b.w	800e648 <__retarget_lock_acquire_recursive>
 800f236:	bf00      	nop
 800f238:	2000221c 	.word	0x2000221c

0800f23c <__malloc_unlock>:
 800f23c:	4801      	ldr	r0, [pc, #4]	; (800f244 <__malloc_unlock+0x8>)
 800f23e:	f7ff ba04 	b.w	800e64a <__retarget_lock_release_recursive>
 800f242:	bf00      	nop
 800f244:	2000221c 	.word	0x2000221c

0800f248 <_free_r>:
 800f248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f24a:	2900      	cmp	r1, #0
 800f24c:	d044      	beq.n	800f2d8 <_free_r+0x90>
 800f24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f252:	9001      	str	r0, [sp, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	f1a1 0404 	sub.w	r4, r1, #4
 800f25a:	bfb8      	it	lt
 800f25c:	18e4      	addlt	r4, r4, r3
 800f25e:	f7ff ffe7 	bl	800f230 <__malloc_lock>
 800f262:	4a1e      	ldr	r2, [pc, #120]	; (800f2dc <_free_r+0x94>)
 800f264:	9801      	ldr	r0, [sp, #4]
 800f266:	6813      	ldr	r3, [r2, #0]
 800f268:	b933      	cbnz	r3, 800f278 <_free_r+0x30>
 800f26a:	6063      	str	r3, [r4, #4]
 800f26c:	6014      	str	r4, [r2, #0]
 800f26e:	b003      	add	sp, #12
 800f270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f274:	f7ff bfe2 	b.w	800f23c <__malloc_unlock>
 800f278:	42a3      	cmp	r3, r4
 800f27a:	d908      	bls.n	800f28e <_free_r+0x46>
 800f27c:	6825      	ldr	r5, [r4, #0]
 800f27e:	1961      	adds	r1, r4, r5
 800f280:	428b      	cmp	r3, r1
 800f282:	bf01      	itttt	eq
 800f284:	6819      	ldreq	r1, [r3, #0]
 800f286:	685b      	ldreq	r3, [r3, #4]
 800f288:	1949      	addeq	r1, r1, r5
 800f28a:	6021      	streq	r1, [r4, #0]
 800f28c:	e7ed      	b.n	800f26a <_free_r+0x22>
 800f28e:	461a      	mov	r2, r3
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	b10b      	cbz	r3, 800f298 <_free_r+0x50>
 800f294:	42a3      	cmp	r3, r4
 800f296:	d9fa      	bls.n	800f28e <_free_r+0x46>
 800f298:	6811      	ldr	r1, [r2, #0]
 800f29a:	1855      	adds	r5, r2, r1
 800f29c:	42a5      	cmp	r5, r4
 800f29e:	d10b      	bne.n	800f2b8 <_free_r+0x70>
 800f2a0:	6824      	ldr	r4, [r4, #0]
 800f2a2:	4421      	add	r1, r4
 800f2a4:	1854      	adds	r4, r2, r1
 800f2a6:	42a3      	cmp	r3, r4
 800f2a8:	6011      	str	r1, [r2, #0]
 800f2aa:	d1e0      	bne.n	800f26e <_free_r+0x26>
 800f2ac:	681c      	ldr	r4, [r3, #0]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	6053      	str	r3, [r2, #4]
 800f2b2:	4421      	add	r1, r4
 800f2b4:	6011      	str	r1, [r2, #0]
 800f2b6:	e7da      	b.n	800f26e <_free_r+0x26>
 800f2b8:	d902      	bls.n	800f2c0 <_free_r+0x78>
 800f2ba:	230c      	movs	r3, #12
 800f2bc:	6003      	str	r3, [r0, #0]
 800f2be:	e7d6      	b.n	800f26e <_free_r+0x26>
 800f2c0:	6825      	ldr	r5, [r4, #0]
 800f2c2:	1961      	adds	r1, r4, r5
 800f2c4:	428b      	cmp	r3, r1
 800f2c6:	bf04      	itt	eq
 800f2c8:	6819      	ldreq	r1, [r3, #0]
 800f2ca:	685b      	ldreq	r3, [r3, #4]
 800f2cc:	6063      	str	r3, [r4, #4]
 800f2ce:	bf04      	itt	eq
 800f2d0:	1949      	addeq	r1, r1, r5
 800f2d2:	6021      	streq	r1, [r4, #0]
 800f2d4:	6054      	str	r4, [r2, #4]
 800f2d6:	e7ca      	b.n	800f26e <_free_r+0x26>
 800f2d8:	b003      	add	sp, #12
 800f2da:	bd30      	pop	{r4, r5, pc}
 800f2dc:	20002220 	.word	0x20002220

0800f2e0 <_read_r>:
 800f2e0:	b538      	push	{r3, r4, r5, lr}
 800f2e2:	4d07      	ldr	r5, [pc, #28]	; (800f300 <_read_r+0x20>)
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	4608      	mov	r0, r1
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	602a      	str	r2, [r5, #0]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	f000 f84a 	bl	800f388 <_read>
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	d102      	bne.n	800f2fe <_read_r+0x1e>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	b103      	cbz	r3, 800f2fe <_read_r+0x1e>
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	bd38      	pop	{r3, r4, r5, pc}
 800f300:	20002228 	.word	0x20002228

0800f304 <_fstat_r>:
 800f304:	b538      	push	{r3, r4, r5, lr}
 800f306:	4d07      	ldr	r5, [pc, #28]	; (800f324 <_fstat_r+0x20>)
 800f308:	2300      	movs	r3, #0
 800f30a:	4604      	mov	r4, r0
 800f30c:	4608      	mov	r0, r1
 800f30e:	4611      	mov	r1, r2
 800f310:	602b      	str	r3, [r5, #0]
 800f312:	f000 f821 	bl	800f358 <_fstat>
 800f316:	1c43      	adds	r3, r0, #1
 800f318:	d102      	bne.n	800f320 <_fstat_r+0x1c>
 800f31a:	682b      	ldr	r3, [r5, #0]
 800f31c:	b103      	cbz	r3, 800f320 <_fstat_r+0x1c>
 800f31e:	6023      	str	r3, [r4, #0]
 800f320:	bd38      	pop	{r3, r4, r5, pc}
 800f322:	bf00      	nop
 800f324:	20002228 	.word	0x20002228

0800f328 <_isatty_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	4d06      	ldr	r5, [pc, #24]	; (800f344 <_isatty_r+0x1c>)
 800f32c:	2300      	movs	r3, #0
 800f32e:	4604      	mov	r4, r0
 800f330:	4608      	mov	r0, r1
 800f332:	602b      	str	r3, [r5, #0]
 800f334:	f000 f818 	bl	800f368 <_isatty>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_isatty_r+0x1a>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_isatty_r+0x1a>
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	20002228 	.word	0x20002228

0800f348 <_close>:
 800f348:	4b02      	ldr	r3, [pc, #8]	; (800f354 <_close+0xc>)
 800f34a:	2258      	movs	r2, #88	; 0x58
 800f34c:	601a      	str	r2, [r3, #0]
 800f34e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f352:	4770      	bx	lr
 800f354:	20002228 	.word	0x20002228

0800f358 <_fstat>:
 800f358:	4b02      	ldr	r3, [pc, #8]	; (800f364 <_fstat+0xc>)
 800f35a:	2258      	movs	r2, #88	; 0x58
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f362:	4770      	bx	lr
 800f364:	20002228 	.word	0x20002228

0800f368 <_isatty>:
 800f368:	4b02      	ldr	r3, [pc, #8]	; (800f374 <_isatty+0xc>)
 800f36a:	2258      	movs	r2, #88	; 0x58
 800f36c:	601a      	str	r2, [r3, #0]
 800f36e:	2000      	movs	r0, #0
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	20002228 	.word	0x20002228

0800f378 <_lseek>:
 800f378:	4b02      	ldr	r3, [pc, #8]	; (800f384 <_lseek+0xc>)
 800f37a:	2258      	movs	r2, #88	; 0x58
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f382:	4770      	bx	lr
 800f384:	20002228 	.word	0x20002228

0800f388 <_read>:
 800f388:	4b02      	ldr	r3, [pc, #8]	; (800f394 <_read+0xc>)
 800f38a:	2258      	movs	r2, #88	; 0x58
 800f38c:	601a      	str	r2, [r3, #0]
 800f38e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f392:	4770      	bx	lr
 800f394:	20002228 	.word	0x20002228

0800f398 <_sbrk>:
 800f398:	4a04      	ldr	r2, [pc, #16]	; (800f3ac <_sbrk+0x14>)
 800f39a:	6811      	ldr	r1, [r2, #0]
 800f39c:	4603      	mov	r3, r0
 800f39e:	b909      	cbnz	r1, 800f3a4 <_sbrk+0xc>
 800f3a0:	4903      	ldr	r1, [pc, #12]	; (800f3b0 <_sbrk+0x18>)
 800f3a2:	6011      	str	r1, [r2, #0]
 800f3a4:	6810      	ldr	r0, [r2, #0]
 800f3a6:	4403      	add	r3, r0
 800f3a8:	6013      	str	r3, [r2, #0]
 800f3aa:	4770      	bx	lr
 800f3ac:	2000222c 	.word	0x2000222c
 800f3b0:	20002230 	.word	0x20002230

0800f3b4 <_write>:
 800f3b4:	4b02      	ldr	r3, [pc, #8]	; (800f3c0 <_write+0xc>)
 800f3b6:	2258      	movs	r2, #88	; 0x58
 800f3b8:	601a      	str	r2, [r3, #0]
 800f3ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3be:	4770      	bx	lr
 800f3c0:	20002228 	.word	0x20002228

0800f3c4 <_init>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	bf00      	nop
 800f3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ca:	bc08      	pop	{r3}
 800f3cc:	469e      	mov	lr, r3
 800f3ce:	4770      	bx	lr

0800f3d0 <_fini>:
 800f3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d2:	bf00      	nop
 800f3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3d6:	bc08      	pop	{r3}
 800f3d8:	469e      	mov	lr, r3
 800f3da:	4770      	bx	lr
