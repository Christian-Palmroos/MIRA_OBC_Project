
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6ec  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800f8a8  0800f8a8  0001f8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa80  0800fa80  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa80  0800fa80  0001fa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa88  0800fa88  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa88  0800fa88  0001fa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa8c  0800fa8c  0001fa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800fa90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002368  20000190  0800fc20  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200024f8  0800fc20  000224f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fed  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ee6  00000000  00000000  000451ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  0004a098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b50  00000000  00000000  0004be00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003106e  00000000  00000000  0004d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d1c  00000000  00000000  0007e9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110611  00000000  00000000  000a66da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6ceb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b04  00000000  00000000  001b6d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800f890 	.word	0x0800f890

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	0800f890 	.word	0x0800f890

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800021c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000220:	f000 b974 	b.w	800050c <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9d08      	ldr	r5, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	468e      	mov	lr, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14d      	bne.n	80002e6 <__udivmoddi4+0xaa>
 800024a:	428a      	cmp	r2, r1
 800024c:	4694      	mov	ip, r2
 800024e:	d969      	bls.n	8000324 <__udivmoddi4+0xe8>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b152      	cbz	r2, 800026c <__udivmoddi4+0x30>
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	f1c2 0120 	rsb	r1, r2, #32
 800025e:	fa20 f101 	lsr.w	r1, r0, r1
 8000262:	fa0c fc02 	lsl.w	ip, ip, r2
 8000266:	ea41 0e03 	orr.w	lr, r1, r3
 800026a:	4094      	lsls	r4, r2
 800026c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000270:	0c21      	lsrs	r1, r4, #16
 8000272:	fbbe f6f8 	udiv	r6, lr, r8
 8000276:	fa1f f78c 	uxth.w	r7, ip
 800027a:	fb08 e316 	mls	r3, r8, r6, lr
 800027e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000282:	fb06 f107 	mul.w	r1, r6, r7
 8000286:	4299      	cmp	r1, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x64>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 811f 	bcs.w	80004d4 <__udivmoddi4+0x298>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 811c 	bls.w	80004d4 <__udivmoddi4+0x298>
 800029c:	3e02      	subs	r6, #2
 800029e:	4463      	add	r3, ip
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 f707 	mul.w	r7, r0, r7
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	d90a      	bls.n	80002ce <__udivmoddi4+0x92>
 80002b8:	eb1c 0404 	adds.w	r4, ip, r4
 80002bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c0:	f080 810a 	bcs.w	80004d8 <__udivmoddi4+0x29c>
 80002c4:	42a7      	cmp	r7, r4
 80002c6:	f240 8107 	bls.w	80004d8 <__udivmoddi4+0x29c>
 80002ca:	4464      	add	r4, ip
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d2:	1be4      	subs	r4, r4, r7
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa4>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xc2>
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	f000 80ef 	beq.w	80004ce <__udivmoddi4+0x292>
 80002f0:	2600      	movs	r6, #0
 80002f2:	e9c5 0100 	strd	r0, r1, [r5]
 80002f6:	4630      	mov	r0, r6
 80002f8:	4631      	mov	r1, r6
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f683 	clz	r6, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d14a      	bne.n	800039c <__udivmoddi4+0x160>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd4>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80f9 	bhi.w	8000502 <__udivmoddi4+0x2c6>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	469e      	mov	lr, r3
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa4>
 800031e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa4>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xec>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 8092 	bne.w	8000456 <__udivmoddi4+0x21a>
 8000332:	eba1 010c 	sub.w	r1, r1, ip
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2601      	movs	r6, #1
 8000340:	0c20      	lsrs	r0, r4, #16
 8000342:	fbb1 f3f7 	udiv	r3, r1, r7
 8000346:	fb07 1113 	mls	r1, r7, r3, r1
 800034a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034e:	fb0e f003 	mul.w	r0, lr, r3
 8000352:	4288      	cmp	r0, r1
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x12c>
 8000356:	eb1c 0101 	adds.w	r1, ip, r1
 800035a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x12a>
 8000360:	4288      	cmp	r0, r1
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2c0>
 8000366:	4643      	mov	r3, r8
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000370:	fb07 1110 	mls	r1, r7, r0, r1
 8000374:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x156>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x154>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2ca>
 8000390:	4608      	mov	r0, r1
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039a:	e79c      	b.n	80002d6 <__udivmoddi4+0x9a>
 800039c:	f1c6 0720 	rsb	r7, r6, #32
 80003a0:	40b3      	lsls	r3, r6
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa20 f407 	lsr.w	r4, r0, r7
 80003ae:	fa01 f306 	lsl.w	r3, r1, r6
 80003b2:	431c      	orrs	r4, r3
 80003b4:	40f9      	lsrs	r1, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fa00 f306 	lsl.w	r3, r0, r6
 80003be:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c2:	0c20      	lsrs	r0, r4, #16
 80003c4:	fa1f fe8c 	uxth.w	lr, ip
 80003c8:	fb09 1118 	mls	r1, r9, r8, r1
 80003cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	4288      	cmp	r0, r1
 80003d6:	fa02 f206 	lsl.w	r2, r2, r6
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b8>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2bc>
 80003e8:	4288      	cmp	r0, r1
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2bc>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4461      	add	r1, ip
 80003f4:	1a09      	subs	r1, r1, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000400:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000404:	fb00 fe0e 	mul.w	lr, r0, lr
 8000408:	458e      	cmp	lr, r1
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1e2>
 800040c:	eb1c 0101 	adds.w	r1, ip, r1
 8000410:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2b4>
 8000416:	458e      	cmp	lr, r1
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2b4>
 800041a:	3802      	subs	r0, #2
 800041c:	4461      	add	r1, ip
 800041e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000422:	fba0 9402 	umull	r9, r4, r0, r2
 8000426:	eba1 010e 	sub.w	r1, r1, lr
 800042a:	42a1      	cmp	r1, r4
 800042c:	46c8      	mov	r8, r9
 800042e:	46a6      	mov	lr, r4
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x2a4>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x2a0>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x212>
 8000436:	ebb3 0208 	subs.w	r2, r3, r8
 800043a:	eb61 010e 	sbc.w	r1, r1, lr
 800043e:	fa01 f707 	lsl.w	r7, r1, r7
 8000442:	fa22 f306 	lsr.w	r3, r2, r6
 8000446:	40f1      	lsrs	r1, r6
 8000448:	431f      	orrs	r7, r3
 800044a:	e9c5 7100 	strd	r7, r1, [r5]
 800044e:	2600      	movs	r6, #0
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	f1c2 0320 	rsb	r3, r2, #32
 800045a:	40d8      	lsrs	r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa21 f303 	lsr.w	r3, r1, r3
 8000464:	4091      	lsls	r1, r2
 8000466:	4301      	orrs	r1, r0
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb3 f0f7 	udiv	r0, r3, r7
 8000474:	fb07 3610 	mls	r6, r7, r0, r3
 8000478:	0c0b      	lsrs	r3, r1, #16
 800047a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047e:	fb00 f60e 	mul.w	r6, r0, lr
 8000482:	429e      	cmp	r6, r3
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x260>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b8>
 8000494:	429e      	cmp	r6, r3
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b8>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1b9b      	subs	r3, r3, r6
 800049e:	b289      	uxth	r1, r1
 80004a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a4:	fb07 3316 	mls	r3, r7, r6, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb06 f30e 	mul.w	r3, r6, lr
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x28a>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2b0>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2b0>
 80004c2:	3e02      	subs	r6, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0x104>
 80004ce:	462e      	mov	r6, r5
 80004d0:	4628      	mov	r0, r5
 80004d2:	e705      	b.n	80002e0 <__udivmoddi4+0xa4>
 80004d4:	4606      	mov	r6, r0
 80004d6:	e6e3      	b.n	80002a0 <__udivmoddi4+0x64>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6f8      	b.n	80002ce <__udivmoddi4+0x92>
 80004dc:	454b      	cmp	r3, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f8>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e8:	3801      	subs	r0, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f8>
 80004ec:	4646      	mov	r6, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x28a>
 80004f0:	4620      	mov	r0, r4
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1e2>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x260>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b8>
 80004fc:	3b02      	subs	r3, #2
 80004fe:	4461      	add	r1, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x12c>
 8000502:	4630      	mov	r0, r6
 8000504:	e709      	b.n	800031a <__udivmoddi4+0xde>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x156>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b0a6      	sub	sp, #152	; 0x98
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000516:	4b67      	ldr	r3, [pc, #412]	; (80006b4 <main+0x1a4>)
 8000518:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000526:	c403      	stmia	r4!, {r0, r1}
 8000528:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fe1c 	bl	8001166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f8cd 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 fa95 	bl	8000a60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000536:	f000 f91b 	bl	8000770 <MX_I2C1_Init>
  MX_I2C2_Init();
 800053a:	f000 f959 	bl	80007f0 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800053e:	f000 f997 	bl	8000870 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000542:	f000 f9b7 	bl	80008b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000546:	f000 f9f3 	bl	8000930 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800054a:	f000 fa3d 	bl	80009c8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800054e:	f009 fda3 	bl	800a098 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000552:	f00e fb27 	bl	800eba4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8000556:	2200      	movs	r2, #0
 8000558:	4957      	ldr	r1, [pc, #348]	; (80006b8 <main+0x1a8>)
 800055a:	4858      	ldr	r0, [pc, #352]	; (80006bc <main+0x1ac>)
 800055c:	f00d f93a 	bl	800d7d4 <f_mount>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d010      	beq.n	8000588 <main+0x78>
    	{
	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000566:	2108      	movs	r1, #8
 8000568:	4855      	ldr	r0, [pc, #340]	; (80006c0 <main+0x1b0>)
 800056a:	f001 f969 	bl	8001840 <HAL_GPIO_TogglePin>
	  	  	  HAL_Delay (300);
 800056e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000572:	f000 fe6d 	bl	8001250 <HAL_Delay>
	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000576:	2108      	movs	r1, #8
 8000578:	4851      	ldr	r0, [pc, #324]	; (80006c0 <main+0x1b0>)
 800057a:	f001 f961 	bl	8001840 <HAL_GPIO_TogglePin>
	  	  	  HAL_Delay (1000);
 800057e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000582:	f000 fe65 	bl	8001250 <HAL_Delay>
 8000586:	e06f      	b.n	8000668 <main+0x158>
    	}
    	else
    	{
    		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	2107      	movs	r1, #7
 8000592:	4849      	ldr	r0, [pc, #292]	; (80006b8 <main+0x1a8>)
 8000594:	f00d fe7e 	bl	800e294 <f_mkfs>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d010      	beq.n	80005c0 <main+0xb0>
    	    {
				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED0_Pin);
 800059e:	2108      	movs	r1, #8
 80005a0:	4847      	ldr	r0, [pc, #284]	; (80006c0 <main+0x1b0>)
 80005a2:	f001 f94d 	bl	8001840 <HAL_GPIO_TogglePin>
				  HAL_Delay (300);
 80005a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005aa:	f000 fe51 	bl	8001250 <HAL_Delay>
				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED0_Pin);
 80005ae:	2108      	movs	r1, #8
 80005b0:	4843      	ldr	r0, [pc, #268]	; (80006c0 <main+0x1b0>)
 80005b2:	f001 f945 	bl	8001840 <HAL_GPIO_TogglePin>
				  HAL_Delay (1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ba:	f000 fe49 	bl	8001250 <HAL_Delay>
 80005be:	e053      	b.n	8000668 <main+0x158>
    	    }
    		else
    		{
    			//Open file for writing (Create)
    			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80005c0:	220a      	movs	r2, #10
 80005c2:	4940      	ldr	r1, [pc, #256]	; (80006c4 <main+0x1b4>)
 80005c4:	4840      	ldr	r0, [pc, #256]	; (80006c8 <main+0x1b8>)
 80005c6:	f00d f94b 	bl	800d860 <f_open>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d010      	beq.n	80005f2 <main+0xe2>
    			{
    		  	  	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED0_Pin);
 80005d0:	2108      	movs	r1, #8
 80005d2:	483b      	ldr	r0, [pc, #236]	; (80006c0 <main+0x1b0>)
 80005d4:	f001 f934 	bl	8001840 <HAL_GPIO_TogglePin>
    		  	  	  HAL_Delay (300);
 80005d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005dc:	f000 fe38 	bl	8001250 <HAL_Delay>
    		  	  	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED0_Pin);
 80005e0:	2108      	movs	r1, #8
 80005e2:	4837      	ldr	r0, [pc, #220]	; (80006c0 <main+0x1b0>)
 80005e4:	f001 f92c 	bl	8001840 <HAL_GPIO_TogglePin>
    		  	  	  HAL_Delay (1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f000 fe30 	bl	8001250 <HAL_Delay>
 80005f0:	e03a      	b.n	8000668 <main+0x158>
    			}
    			else
    			{

    				//Write to the text file
    				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80005f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe00 	bl	80001fc <strlen>
 80005fc:	4602      	mov	r2, r0
 80005fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000602:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000606:	4830      	ldr	r0, [pc, #192]	; (80006c8 <main+0x1b8>)
 8000608:	f00d fc27 	bl	800de5a <f_write>
 800060c:	4603      	mov	r3, r0
 800060e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    				f_read(&SDFile, &rtext, 100, &bytesread);
 8000612:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	2264      	movs	r2, #100	; 0x64
 800061a:	482b      	ldr	r0, [pc, #172]	; (80006c8 <main+0x1b8>)
 800061c:	f00d fade 	bl	800dbdc <f_read>
    				//f_read();

    				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2164      	movs	r1, #100	; 0x64
 8000624:	4618      	mov	r0, r3
 8000626:	f00e fb7b 	bl	800ed20 <CDC_Transmit_FS>
 800062a:	4603      	mov	r3, r0
 800062c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    				if((byteswritten == 0) || (res != FR_OK))
 8000630:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <main+0x130>
 8000638:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800063c:	2b00      	cmp	r3, #0
 800063e:	d010      	beq.n	8000662 <main+0x152>
    				{
    			  	  	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED0_Pin);
 8000640:	2108      	movs	r1, #8
 8000642:	481f      	ldr	r0, [pc, #124]	; (80006c0 <main+0x1b0>)
 8000644:	f001 f8fc 	bl	8001840 <HAL_GPIO_TogglePin>
    			  	  	  HAL_Delay (300);
 8000648:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800064c:	f000 fe00 	bl	8001250 <HAL_Delay>
    			  	  	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED0_Pin);
 8000650:	2108      	movs	r1, #8
 8000652:	481b      	ldr	r0, [pc, #108]	; (80006c0 <main+0x1b0>)
 8000654:	f001 f8f4 	bl	8001840 <HAL_GPIO_TogglePin>
    			  	  	  HAL_Delay (1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 fdf8 	bl	8001250 <HAL_Delay>
 8000660:	e002      	b.n	8000668 <main+0x158>
    				}
    				else
    				{

    					f_close(&SDFile);
 8000662:	4819      	ldr	r0, [pc, #100]	; (80006c8 <main+0x1b8>)
 8000664:	f00d fdec 	bl	800e240 <f_close>
    				}

    			}
    		}
    	}
    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0x1ac>)
 800066e:	f00d f8b1 	bl	800d7d4 <f_mount>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000672:	2108      	movs	r1, #8
 8000674:	4812      	ldr	r0, [pc, #72]	; (80006c0 <main+0x1b0>)
 8000676:	f001 f8e3 	bl	8001840 <HAL_GPIO_TogglePin>
	  HAL_Delay (300);
 800067a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800067e:	f000 fde7 	bl	8001250 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000682:	2110      	movs	r1, #16
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <main+0x1b0>)
 8000686:	f001 f8db 	bl	8001840 <HAL_GPIO_TogglePin>
	  HAL_Delay (300);
 800068a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800068e:	f000 fddf 	bl	8001250 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8000692:	2120      	movs	r1, #32
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <main+0x1b0>)
 8000696:	f001 f8d3 	bl	8001840 <HAL_GPIO_TogglePin>
	  HAL_Delay (300);
 800069a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800069e:	f000 fdd7 	bl	8001250 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 80006a2:	2140      	movs	r1, #64	; 0x40
 80006a4:	4806      	ldr	r0, [pc, #24]	; (80006c0 <main+0x1b0>)
 80006a6:	f001 f8cb 	bl	8001840 <HAL_GPIO_TogglePin>
	  HAL_Delay (300);
 80006aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006ae:	f000 fdcf 	bl	8001250 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80006b2:	e7de      	b.n	8000672 <main+0x162>
 80006b4:	0800f8b4 	.word	0x0800f8b4
 80006b8:	20000460 	.word	0x20000460
 80006bc:	20000464 	.word	0x20000464
 80006c0:	48000c00 	.word	0x48000c00
 80006c4:	0800f8a8 	.word	0x0800f8a8
 80006c8:	20000694 	.word	0x20000694

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b096      	sub	sp, #88	; 0x58
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2244      	movs	r2, #68	; 0x44
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00f f8d0 	bl	800f880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f002 fbc6 	bl	8002e80 <HAL_PWREx_ControlVoltageScaling>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006fa:	f000 fa8f 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006fe:	2321      	movs	r3, #33	; 0x21
 8000700:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000710:	2303      	movs	r3, #3
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000718:	231e      	movs	r3, #30
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 800071c:	2314      	movs	r3, #20
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fc5b 	bl	8002fe8 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000738:	f000 fa70 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f003 f861 	bl	800381c <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000760:	f000 fa5c 	bl	8000c1c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000764:	f003 fa58 	bl	8003c18 <HAL_RCC_EnableCSS>
}
 8000768:	bf00      	nop
 800076a:	3758      	adds	r7, #88	; 0x58
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_I2C1_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007ac:	f001 f862 	bl	8001874 <HAL_I2C_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 fa31 	bl	8000c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007be:	f001 f8e8 	bl	8001992 <HAL_I2CEx_ConfigAnalogFilter>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fa28 	bl	8000c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007d0:	f001 f92a 	bl	8001a28 <HAL_I2CEx_ConfigDigitalFilter>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 fa1f 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200001ac 	.word	0x200001ac
 80007e8:	40005400 	.word	0x40005400
 80007ec:	307075b1 	.word	0x307075b1

080007f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_I2C2_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_I2C2_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_I2C2_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <MX_I2C2_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_I2C2_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_I2C2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_I2C2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_I2C2_Init+0x74>)
 800082c:	f001 f822 	bl	8001874 <HAL_I2C_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 f9f1 	bl	8000c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <MX_I2C2_Init+0x74>)
 800083e:	f001 f8a8 	bl	8001992 <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 f9e8 	bl	8000c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2C2_Init+0x74>)
 8000850:	f001 f8ea 	bl	8001a28 <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 f9df 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000200 	.word	0x20000200
 8000868:	40005800 	.word	0x40005800
 800086c:	307075b1 	.word	0x307075b1

08000870 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_SDMMC1_SD_Init+0x3c>)
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <MX_SDMMC1_SD_Init+0x40>)
 8000878:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SDMMC1_SD_Init+0x3c>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_SDMMC1_SD_Init+0x3c>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SDMMC1_SD_Init+0x3c>)
 8000888:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800088c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_SDMMC1_SD_Init+0x3c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <MX_SDMMC1_SD_Init+0x3c>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <MX_SDMMC1_SD_Init+0x3c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000254 	.word	0x20000254
 80008b0:	50062400 	.word	0x50062400

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <MX_SPI1_Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_SPI1_Init+0x74>)
 80008c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI1_Init+0x74>)
 80008e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI1_Init+0x74>)
 8000902:	2207      	movs	r2, #7
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI1_Init+0x74>)
 800090e:	2208      	movs	r2, #8
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_SPI1_Init+0x74>)
 8000914:	f006 fbf7 	bl	8007106 <HAL_SPI_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800091e:	f000 f97d 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200002d4 	.word	0x200002d4
 800092c:	40013000 	.word	0x40013000

08000930 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800097a:	f006 fc67 	bl	800724c <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f94a 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800098c:	f007 f998 	bl	8007cc0 <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 f941 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800099e:	f007 f9cd 	bl	8007d3c <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f938 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 80009ae:	f007 f94e 	bl	8007c4e <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 f930 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000338 	.word	0x20000338
 80009c4:	40013800 	.word	0x40013800

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a12:	f006 fc1b 	bl	800724c <HAL_UART_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f000 f8fe 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a24:	f007 f94c 	bl	8007cc0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f8f5 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a36:	f007 f981 	bl	8007d3c <HAL_UARTEx_SetRxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f8ec 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a46:	f007 f902 	bl	8007c4e <HAL_UARTEx_DisableFifoMode>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f8e4 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200003c8 	.word	0x200003c8
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4b64      	ldr	r3, [pc, #400]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b61      	ldr	r3, [pc, #388]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b5e      	ldr	r3, [pc, #376]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a5d      	ldr	r2, [pc, #372]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b5b      	ldr	r3, [pc, #364]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	4b58      	ldr	r3, [pc, #352]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a57      	ldr	r2, [pc, #348]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b55      	ldr	r3, [pc, #340]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b52      	ldr	r3, [pc, #328]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a51      	ldr	r2, [pc, #324]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b4c      	ldr	r3, [pc, #304]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b43      	ldr	r3, [pc, #268]	; (8000c08 <MX_GPIO_Init+0x1a8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000b06:	2200      	movs	r2, #0
 8000b08:	f641 013c 	movw	r1, #6204	; 0x183c
 8000b0c:	483f      	ldr	r0, [pc, #252]	; (8000c0c <MX_GPIO_Init+0x1ac>)
 8000b0e:	f000 fe7f 	bl	8001810 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2130      	movs	r1, #48	; 0x30
 8000b16:	483e      	ldr	r0, [pc, #248]	; (8000c10 <MX_GPIO_Init+0x1b0>)
 8000b18:	f000 fe7a 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2178      	movs	r1, #120	; 0x78
 8000b20:	483c      	ldr	r0, [pc, #240]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000b22:	f000 fe75 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000b26:	f641 033c 	movw	r3, #6204	; 0x183c
 8000b2a:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4833      	ldr	r0, [pc, #204]	; (8000c0c <MX_GPIO_Init+0x1ac>)
 8000b40:	f000 fcbc 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	482d      	ldr	r0, [pc, #180]	; (8000c10 <MX_GPIO_Init+0x1b0>)
 8000b5a:	f000 fcaf 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f000 fca2 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000b78:	2330      	movs	r3, #48	; 0x30
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4820      	ldr	r0, [pc, #128]	; (8000c10 <MX_GPIO_Init+0x1b0>)
 8000b90:	f000 fc94 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_GPIO_Init+0x1ac>)
 8000baa:	f000 fc87 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fc79 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000bca:	2378      	movs	r3, #120	; 0x78
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000be2:	f000 fc6b 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000be6:	2320      	movs	r3, #32
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <MX_GPIO_Init+0x1b8>)
 8000bfa:	f000 fc5f 	bl	80014bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	; 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48001000 	.word	0x48001000
 8000c10:	48000800 	.word	0x48000800
 8000c14:	48000c00 	.word	0x48000c00
 8000c18:	48000400 	.word	0x48000400

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_MspInit+0x44>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x44>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0b0      	sub	sp, #192	; 0xc0
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	2294      	movs	r2, #148	; 0x94
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f00e fdf5 	bl	800f880 <memset>
  if(hi2c->Instance==I2C1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a42      	ldr	r2, [pc, #264]	; (8000da4 <HAL_I2C_MspInit+0x134>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d13b      	bne.n	8000d18 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 f89f 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cb8:	f7ff ffb0 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	4a39      	ldr	r2, [pc, #228]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc8:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd4:	23c0      	movs	r3, #192	; 0xc0
 8000cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cda:	2312      	movs	r3, #18
 8000cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cec:	2304      	movs	r3, #4
 8000cee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	482c      	ldr	r0, [pc, #176]	; (8000dac <HAL_I2C_MspInit+0x13c>)
 8000cfa:	f000 fbdf 	bl	80014bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d16:	e040      	b.n	8000d9a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <HAL_I2C_MspInit+0x140>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d13b      	bne.n	8000d9a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 f85e 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000d3a:	f7ff ff6f 	bl	8000c1c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d70:	2304      	movs	r3, #4
 8000d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <HAL_I2C_MspInit+0x13c>)
 8000d7e:	f000 fb9d 	bl	80014bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_I2C_MspInit+0x138>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
}
 8000d9a:	bf00      	nop
 8000d9c:	37c0      	adds	r7, #192	; 0xc0
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40005400 	.word	0x40005400
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000400 	.word	0x48000400
 8000db0:	40005800 	.word	0x40005800

08000db4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0b0      	sub	sp, #192	; 0xc0
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	2294      	movs	r2, #148	; 0x94
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00e fd53 	bl	800f880 <memset>
  if(hsd->Instance==SDMMC1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a33      	ldr	r2, [pc, #204]	; (8000eac <HAL_SD_MspInit+0xf8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d15f      	bne.n	8000ea4 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000de4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000de8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000dea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fffa 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000e02:	f7ff ff0b 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_SD_MspInit+0xfc>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e4e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e72:	4619      	mov	r1, r3
 8000e74:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <HAL_SD_MspInit+0x100>)
 8000e76:	f000 fb21 	bl	80014bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e92:	230c      	movs	r3, #12
 8000e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <HAL_SD_MspInit+0x104>)
 8000ea0:	f000 fb0c 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	37c0      	adds	r7, #192	; 0xc0
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	50062400 	.word	0x50062400
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48000c00 	.word	0x48000c00

08000ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_SPI_MspInit+0x7c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d128      	bne.n	8000f30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f0e:	23f0      	movs	r3, #240	; 0xf0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f000 fac6 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0b0      	sub	sp, #192	; 0xc0
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	2294      	movs	r2, #148	; 0x94
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00e fc8d 	bl	800f880 <memset>
  if(huart->Instance==USART1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a43      	ldr	r2, [pc, #268]	; (8001078 <HAL_UART_MspInit+0x138>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d13d      	bne.n	8000fec <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f74:	2300      	movs	r3, #0
 8000f76:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 ff37 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f88:	f7ff fe48 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f90:	4a3a      	ldr	r2, [pc, #232]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6613      	str	r3, [r2, #96]	; 0x60
 8000f98:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b35      	ldr	r3, [pc, #212]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a34      	ldr	r2, [pc, #208]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b32      	ldr	r3, [pc, #200]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8000fbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f000 fa69 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fea:	e040      	b.n	800106e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a23      	ldr	r2, [pc, #140]	; (8001080 <HAL_UART_MspInit+0x140>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d13b      	bne.n	800106e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fef4 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800100e:	f7ff fe05 	bl	8000c1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0x13c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001042:	230c      	movs	r3, #12
 8001044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105a:	2307      	movs	r3, #7
 800105c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f000 fa27 	bl	80014bc <HAL_GPIO_Init>
}
 800106e:	bf00      	nop
 8001070:	37c0      	adds	r7, #192	; 0xc0
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40013800 	.word	0x40013800
 800107c:	40021000 	.word	0x40021000
 8001080:	40004400 	.word	0x40004400

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001088:	f002 fdd6 	bl	8003c38 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x8>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 f89c 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <OTG_FS_IRQHandler+0x10>)
 80010e2:	f000 fe40 	bl	8001d66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001dcc 	.word	0x20001dcc

080010f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001118:	f7ff ffea 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <LoopForever+0x6>)
  ldr r1, =_edata
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <LoopForever+0xe>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <LoopForever+0x16>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001142:	f00e fb79 	bl	800f838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001146:	f7ff f9e3 	bl	8000510 <main>

0800114a <LoopForever>:

LoopForever:
    b LoopForever
 800114a:	e7fe      	b.n	800114a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001158:	0800fa90 	.word	0x0800fa90
  ldr r2, =_sbss
 800115c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001160:	200024f8 	.word	0x200024f8

08001164 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_IRQHandler>

08001166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f961 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	200f      	movs	r0, #15
 8001178:	f000 f80e 	bl	8001198 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	e001      	b.n	800118c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001188:	f7ff fd4e 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118c:	79fb      	ldrb	r3, [r7, #7]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_InitTick+0x6c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d023      	beq.n	80011f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_InitTick+0x70>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_InitTick+0x6c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f96d 	bl	80014a2 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10f      	bne.n	80011ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d809      	bhi.n	80011e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011dc:	f000 f937 	bl	800144e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_InitTick+0x74>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e004      	b.n	80011f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e001      	b.n	80011f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000458 	.word	0x20000458

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000458 	.word	0x20000458

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e166      	b.n	800179a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8158 	beq.w	8001794 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d005      	beq.n	80014fc <HAL_GPIO_Init+0x40>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d130      	bne.n	800155e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001532:	2201      	movs	r2, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f003 0201 	and.w	r2, r3, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b03      	cmp	r3, #3
 8001568:	d017      	beq.n	800159a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d123      	bne.n	80015ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	6939      	ldr	r1, [r7, #16]
 80015ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0203 	and.w	r2, r3, #3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80b2 	beq.w	8001794 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001630:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_GPIO_Init+0x2fc>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001634:	4a60      	ldr	r2, [pc, #384]	; (80017b8 <HAL_GPIO_Init+0x2fc>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6613      	str	r3, [r2, #96]	; 0x60
 800163c:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_GPIO_Init+0x2fc>)
 800163e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001648:	4a5c      	ldr	r2, [pc, #368]	; (80017bc <HAL_GPIO_Init+0x300>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001672:	d02b      	beq.n	80016cc <HAL_GPIO_Init+0x210>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_GPIO_Init+0x304>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d025      	beq.n	80016c8 <HAL_GPIO_Init+0x20c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <HAL_GPIO_Init+0x308>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d01f      	beq.n	80016c4 <HAL_GPIO_Init+0x208>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a50      	ldr	r2, [pc, #320]	; (80017c8 <HAL_GPIO_Init+0x30c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d019      	beq.n	80016c0 <HAL_GPIO_Init+0x204>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <HAL_GPIO_Init+0x310>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x200>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_GPIO_Init+0x314>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1fc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_GPIO_Init+0x318>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1f8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_GPIO_Init+0x31c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1f4>
 80016ac:	2307      	movs	r3, #7
 80016ae:	e00e      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016b0:	2308      	movs	r3, #8
 80016b2:	e00c      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016b4:	2306      	movs	r3, #6
 80016b6:	e00a      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016b8:	2305      	movs	r3, #5
 80016ba:	e008      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016bc:	2304      	movs	r3, #4
 80016be:	e006      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016c0:	2303      	movs	r3, #3
 80016c2:	e004      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016cc:	2300      	movs	r3, #0
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	f002 0203 	and.w	r2, r2, #3
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016de:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_GPIO_Init+0x300>)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_GPIO_Init+0x320>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001710:	4a32      	ldr	r2, [pc, #200]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800173a:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_GPIO_Init+0x320>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_GPIO_Init+0x320>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f ae91 	bne.w	80014cc <HAL_GPIO_Init+0x10>
  }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000
 80017c0:	48000400 	.word	0x48000400
 80017c4:	48000800 	.word	0x48000800
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	48001000 	.word	0x48001000
 80017d0:	48001400 	.word	0x48001400
 80017d4:	48001800 	.word	0x48001800
 80017d8:	48001c00 	.word	0x48001c00
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e001      	b.n	8001802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800182c:	e002      	b.n	8001834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4013      	ands	r3, r2
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43d9      	mvns	r1, r3
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	400b      	ands	r3, r1
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e081      	b.n	800198a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff f9e8 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	; 0x24
 80018a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e006      	b.n	80018fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d104      	bne.n	800190e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001920:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69d9      	ldr	r1, [r3, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1a      	ldr	r2, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2220      	movs	r2, #32
 8001976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d138      	bne.n	8001a1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e032      	b.n	8001a1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2224      	movs	r2, #36	; 0x24
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
  }
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d139      	bne.n	8001ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e033      	b.n	8001ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
  }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b08f      	sub	sp, #60	; 0x3c
 8001ac4:	af0a      	add	r7, sp, #40	; 0x28
 8001ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e116      	b.n	8001d00 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f00d fa71 	bl	800efd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f007 f85e 	bl	8008bd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	687e      	ldr	r6, [r7, #4]
 8001b1e:	466d      	mov	r5, sp
 8001b20:	f106 0410 	add.w	r4, r6, #16
 8001b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b34:	1d33      	adds	r3, r6, #4
 8001b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f006 ff71 	bl	8008a20 <USB_CoreInit>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0d7      	b.n	8001d00 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 f84c 	bl	8008bf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e04a      	b.n	8001bf8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	333d      	adds	r3, #61	; 0x3d
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	333c      	adds	r3, #60	; 0x3c
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3344      	adds	r3, #68	; 0x44
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3340      	adds	r3, #64	; 0x40
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3348      	adds	r3, #72	; 0x48
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	334c      	adds	r3, #76	; 0x4c
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	3354      	adds	r3, #84	; 0x54
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3af      	bcc.n	8001b62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e044      	b.n	8001c92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d3b5      	bcc.n	8001c08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	687e      	ldr	r6, [r7, #4]
 8001ca4:	466d      	mov	r5, sp
 8001ca6:	f106 0410 	add.w	r4, r6, #16
 8001caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cba:	1d33      	adds	r3, r6, #4
 8001cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	f006 ffe4 	bl	8008c8c <USB_DevInit>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e014      	b.n	8001d00 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d102      	bne.n	8001cf4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f001 f882 	bl	8002df8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f008 f86c 	bl	8009dd6 <USB_DevDisconnect>

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_Start+0x1c>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e01c      	b.n	8001d5e <HAL_PCD_Start+0x56>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f006 ff33 	bl	8008bb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f008 f820 	bl	8009d94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d66:	b590      	push	{r4, r7, lr}
 8001d68:	b08d      	sub	sp, #52	; 0x34
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f008 f8de 	bl	8009f3e <USB_GetMode>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 847e 	bne.w	8002686 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f008 f842 	bl	8009e18 <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8474 	beq.w	8002684 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f008 f82f 	bl	8009e18 <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d107      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f002 0202 	and.w	r2, r2, #2
 8001dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f008 f81d 	bl	8009e18 <USB_ReadInterrupts>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d161      	bne.n	8001eac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0210 	bic.w	r2, r2, #16
 8001df6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 020f 	and.w	r2, r3, #15
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	0c5b      	lsrs	r3, r3, #17
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d124      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d035      	beq.n	8001e9c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	6a38      	ldr	r0, [r7, #32]
 8001e44:	f007 fe54 	bl	8009af0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e54:	441a      	add	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	6a1a      	ldr	r2, [r3, #32]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e66:	441a      	add	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	621a      	str	r2, [r3, #32]
 8001e6c:	e016      	b.n	8001e9c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	0c5b      	lsrs	r3, r3, #17
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d110      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e80:	2208      	movs	r2, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	6a38      	ldr	r0, [r7, #32]
 8001e86:	f007 fe33 	bl	8009af0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6a1a      	ldr	r2, [r3, #32]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e96:	441a      	add	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0210 	orr.w	r2, r2, #16
 8001eaa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f007 ffb1 	bl	8009e18 <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ebc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ec0:	f040 80a7 	bne.w	8002012 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f007 ffb6 	bl	8009e3e <USB_ReadDevAllOutEpInterrupt>
 8001ed2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ed4:	e099      	b.n	800200a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 808e 	beq.w	8001ffe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f007 ffda 	bl	8009ea6 <USB_ReadDevOutEPInterrupt>
 8001ef2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fe96 	bl	8002c44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2308      	movs	r3, #8
 8001f32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fed2 	bl	8002ce0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2310      	movs	r3, #16
 8001f56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d030      	beq.n	8001fc4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d109      	bne.n	8001f82 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f80:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	78db      	ldrb	r3, [r3, #3]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d108      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f00d f955 	bl	800f25c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2320      	movs	r3, #32
 8001fde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	3301      	adds	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	f47f af62 	bne.w	8001ed6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f007 fefe 	bl	8009e18 <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002026:	f040 80a4 	bne.w	8002172 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f007 ff1f 	bl	8009e72 <USB_ReadDevAllInEpInterrupt>
 8002034:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800203a:	e096      	b.n	800216a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 808b 	beq.w	800215e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f007 ff45 	bl	8009ee2 <USB_ReadDevInEPInterrupt>
 8002058:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	2201      	movs	r2, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	69f9      	ldr	r1, [r7, #28]
 8002080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002084:	4013      	ands	r3, r2
 8002086:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4413      	add	r3, r2
 8002090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002094:	461a      	mov	r2, r3
 8002096:	2301      	movs	r3, #1
 8002098:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f00d f846 	bl	800f132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020bc:	461a      	mov	r2, r3
 80020be:	2308      	movs	r3, #8
 80020c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d8:	461a      	mov	r2, r3
 80020da:	2310      	movs	r3, #16
 80020dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f4:	461a      	mov	r2, r3
 80020f6:	2340      	movs	r3, #64	; 0x40
 80020f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d023      	beq.n	800214c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002106:	6a38      	ldr	r0, [r7, #32]
 8002108:	f006 ff0c 	bl	8008f24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	3338      	adds	r3, #56	; 0x38
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	78db      	ldrb	r3, [r3, #3]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d108      	bne.n	800213a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2200      	movs	r2, #0
 800212c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f00d f8a3 	bl	800f280 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002146:	461a      	mov	r2, r3
 8002148:	2302      	movs	r3, #2
 800214a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fcea 	bl	8002b32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	3301      	adds	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	085b      	lsrs	r3, r3, #1
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f af65 	bne.w	800203c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f007 fe4e 	bl	8009e18 <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002186:	d122      	bne.n	80021ce <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021ae:	2100      	movs	r1, #0
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f00d fad5 	bl	800f760 <HAL_PCDEx_LPM_Callback>
 80021b6:	e002      	b.n	80021be <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f00d f827 	bl	800f20c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f007 fe20 	bl	8009e18 <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e2:	d112      	bne.n	800220a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f00c ffe3 	bl	800f1c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002208:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f007 fe02 	bl	8009e18 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221e:	d121      	bne.n	8002264 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800222e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d111      	bne.n	800225e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002254:	2101      	movs	r1, #1
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f00d fa82 	bl	800f760 <HAL_PCDEx_LPM_Callback>
 800225c:	e002      	b.n	8002264 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f00c ffae 	bl	800f1c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f007 fdd5 	bl	8009e18 <USB_ReadInterrupts>
 800226e:	4603      	mov	r3, r0
 8002270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002278:	f040 80b5 	bne.w	80023e6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2110      	movs	r1, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f006 fe44 	bl	8008f24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a0:	e046      	b.n	8002330 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ae:	461a      	mov	r2, r3
 80022b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e2:	461a      	mov	r2, r3
 80022e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fa:	0151      	lsls	r1, r2, #5
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	440a      	add	r2, r1
 8002300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231a:	0151      	lsls	r1, r2, #5
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	440a      	add	r2, r1
 8002320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002324:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002328:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	3301      	adds	r3, #1
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002336:	429a      	cmp	r2, r3
 8002338:	d3b3      	bcc.n	80022a2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002348:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800234c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002366:	f043 030b 	orr.w	r3, r3, #11
 800236a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237c:	f043 030b 	orr.w	r3, r3, #11
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	e015      	b.n	80023b0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002396:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800239a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023aa:	f043 030b 	orr.w	r3, r3, #11
 80023ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023ce:	4619      	mov	r1, r3
 80023d0:	4610      	mov	r0, r2
 80023d2:	f007 fde5 	bl	8009fa0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f007 fd14 	bl	8009e18 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fa:	d124      	bne.n	8002446 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f007 fdaa 	bl	8009f5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f006 fe07 	bl	800901e <USB_GetDevSpeed>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681c      	ldr	r4, [r3, #0]
 800241c:	f001 fbc4 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8002420:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4620      	mov	r0, r4
 800242c:	f006 fb24 	bl	8008a78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f00c fea6 	bl	800f182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002444:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f007 fce4 	bl	8009e18 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b08      	cmp	r3, #8
 8002458:	d10a      	bne.n	8002470 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f00c fe83 	bl	800f166 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f002 0208 	and.w	r2, r2, #8
 800246e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f007 fccf 	bl	8009e18 <USB_ReadInterrupts>
 800247a:	4603      	mov	r3, r0
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	2b80      	cmp	r3, #128	; 0x80
 8002482:	d122      	bne.n	80024ca <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002490:	2301      	movs	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	e014      	b.n	80024c0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d105      	bne.n	80024ba <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fb0b 	bl	8002ad0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	3301      	adds	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d3e5      	bcc.n	8002496 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f007 fca2 	bl	8009e18 <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024de:	d13b      	bne.n	8002558 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024e0:	2301      	movs	r3, #1
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	e02b      	b.n	800253e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3340      	adds	r3, #64	; 0x40
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d115      	bne.n	8002538 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800250c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	da12      	bge.n	8002538 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	333f      	adds	r3, #63	; 0x3f
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 facc 	bl	8002ad0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	3301      	adds	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	429a      	cmp	r2, r3
 8002546:	d3ce      	bcc.n	80024e6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f007 fc5b 	bl	8009e18 <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800256c:	d155      	bne.n	800261a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800256e:	2301      	movs	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	e045      	b.n	8002600 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4413      	add	r3, r2
 800257c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d12e      	bne.n	80025fa <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800259c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da2b      	bge.n	80025fa <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d121      	bne.n	80025fa <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f6:	6053      	str	r3, [r2, #4]
            break;
 80025f8:	e007      	b.n	800260a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	3301      	adds	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	429a      	cmp	r2, r3
 8002608:	d3b4      	bcc.n	8002574 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f007 fbfa 	bl	8009e18 <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800262a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262e:	d10a      	bne.n	8002646 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f00c fe37 	bl	800f2a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f007 fbe4 	bl	8009e18 <USB_ReadInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d115      	bne.n	8002686 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f00c fe27 	bl	800f2c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	e000      	b.n	8002686 <HAL_PCD_IRQHandler+0x920>
      return;
 8002684:	bf00      	nop
    }
  }
}
 8002686:	3734      	adds	r7, #52	; 0x34
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}

0800268c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_PCD_SetAddress+0x1a>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e013      	b.n	80026ce <HAL_PCD_SetAddress+0x42>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f007 fb42 	bl	8009d48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	4608      	mov	r0, r1
 80026e0:	4611      	mov	r1, r2
 80026e2:	461a      	mov	r2, r3
 80026e4:	4603      	mov	r3, r0
 80026e6:	70fb      	strb	r3, [r7, #3]
 80026e8:	460b      	mov	r3, r1
 80026ea:	803b      	strh	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da0f      	bge.n	800271c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	3338      	adds	r3, #56	; 0x38
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	705a      	strb	r2, [r3, #1]
 800271a:	e00f      	b.n	800273c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	f003 020f 	and.w	r2, r3, #15
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	3304      	adds	r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002748:	883a      	ldrh	r2, [r7, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	78ba      	ldrb	r2, [r7, #2]
 8002752:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002766:	78bb      	ldrb	r3, [r7, #2]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d102      	bne.n	8002772 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_PCD_EP_Open+0xaa>
 800277c:	2302      	movs	r3, #2
 800277e:	e00e      	b.n	800279e <HAL_PCD_EP_Open+0xc8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	f006 fc64 	bl	800905c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800279c:	7afb      	ldrb	r3, [r7, #11]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	da0f      	bge.n	80027da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	f003 020f 	and.w	r2, r3, #15
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	3338      	adds	r3, #56	; 0x38
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	705a      	strb	r2, [r3, #1]
 80027d8:	e00f      	b.n	80027fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_PCD_EP_Close+0x6e>
 8002810:	2302      	movs	r3, #2
 8002812:	e00e      	b.n	8002832 <HAL_PCD_EP_Close+0x8c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	4618      	mov	r0, r3
 8002824:	f006 fca2 	bl	800916c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	460b      	mov	r3, r1
 8002848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	3304      	adds	r3, #4
 8002862:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800287c:	7afb      	ldrb	r3, [r7, #11]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	b2da      	uxtb	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6979      	ldr	r1, [r7, #20]
 8002898:	4618      	mov	r0, r3
 800289a:	f006 ff23 	bl	80096e4 <USB_EP0StartXfer>
 800289e:	e005      	b.n	80028ac <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6979      	ldr	r1, [r7, #20]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f006 fd3c 	bl	8009324 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80028d8:	681b      	ldr	r3, [r3, #0]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	460b      	mov	r3, r1
 80028f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	3338      	adds	r3, #56	; 0x38
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2201      	movs	r2, #1
 8002924:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	b2da      	uxtb	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6979      	ldr	r1, [r7, #20]
 8002942:	4618      	mov	r0, r3
 8002944:	f006 fece 	bl	80096e4 <USB_EP0StartXfer>
 8002948:	e005      	b.n	8002956 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6979      	ldr	r1, [r7, #20]
 8002950:	4618      	mov	r0, r3
 8002952:	f006 fce7 	bl	8009324 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d901      	bls.n	800297e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e04e      	b.n	8002a1c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800297e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002982:	2b00      	cmp	r3, #0
 8002984:	da0f      	bge.n	80029a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 020f 	and.w	r2, r3, #15
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	3338      	adds	r3, #56	; 0x38
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	705a      	strb	r2, [r3, #1]
 80029a4:	e00d      	b.n	80029c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_PCD_EP_SetStall+0x82>
 80029de:	2302      	movs	r3, #2
 80029e0:	e01c      	b.n	8002a1c <HAL_PCD_EP_SetStall+0xbc>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68f9      	ldr	r1, [r7, #12]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f007 f8d5 	bl	8009ba0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d108      	bne.n	8002a12 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f007 fac7 	bl	8009fa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d901      	bls.n	8002a42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e042      	b.n	8002ac8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da0f      	bge.n	8002a6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	3338      	adds	r3, #56	; 0x38
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	705a      	strb	r2, [r3, #1]
 8002a68:	e00f      	b.n	8002a8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 020f 	and.w	r2, r3, #15
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	3304      	adds	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_PCD_EP_ClrStall+0x86>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e00e      	b.n	8002ac8 <HAL_PCD_EP_ClrStall+0xa4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f007 f8df 	bl	8009c7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	da0c      	bge.n	8002afe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	3338      	adds	r3, #56	; 0x38
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	3304      	adds	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e00c      	b.n	8002b18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f006 ff02 	bl	8009928 <USB_EPStopXfer>
 8002b24:	4603      	mov	r3, r0
 8002b26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b28:	7afb      	ldrb	r3, [r7, #11]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	3338      	adds	r3, #56	; 0x38
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d901      	bls.n	8002b6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e067      	b.n	8002c3a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d902      	bls.n	8002b86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3303      	adds	r3, #3
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b8e:	e026      	b.n	8002bde <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d902      	bls.n	8002bac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3303      	adds	r3, #3
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6919      	ldr	r1, [r3, #16]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f006 ff5b 	bl	8009a7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	441a      	add	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1a      	ldr	r2, [r3, #32]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	441a      	add	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d809      	bhi.n	8002c08 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d203      	bcs.n	8002c08 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1c3      	bne.n	8002b90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d811      	bhi.n	8002c38 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c34:	4013      	ands	r3, r2
 8002c36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	333c      	adds	r3, #60	; 0x3c
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <PCD_EP_OutXfrComplete_int+0x98>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d124      	bne.n	8002cc4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	461a      	mov	r2, r3
 8002c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c96:	6093      	str	r3, [r2, #8]
 8002c98:	e01a      	b.n	8002cd0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f00c fa1d 	bl	800f0fc <HAL_PCD_DataOutStageCallback>
 8002cc2:	e005      	b.n	8002cd0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f00c fa16 	bl	800f0fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	4f54310a 	.word	0x4f54310a

08002ce0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	333c      	adds	r3, #60	; 0x3c
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <PCD_EP_OutSetupPacket_int+0x64>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d90e      	bls.n	8002d34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f00c f9cf 	bl	800f0d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	4f54300a 	.word	0x4f54300a

08002d48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
 8002d54:	4613      	mov	r3, r2
 8002d56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d107      	bne.n	8002d76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d66:	883b      	ldrh	r3, [r7, #0]
 8002d68:	0419      	lsls	r1, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
 8002d74:	e028      	b.n	8002dc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	4413      	add	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e00d      	b.n	8002da6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	3340      	adds	r3, #64	; 0x40
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	3301      	adds	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d3ec      	bcc.n	8002d8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002db0:	883b      	ldrh	r3, [r7, #0]
 8002db2:	0418      	lsls	r0, r3, #16
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6819      	ldr	r1, [r3, #0]
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	4302      	orrs	r2, r0
 8002dc0:	3340      	adds	r3, #64	; 0x40
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	f043 0303 	orr.w	r3, r3, #3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d102      	bne.n	8002e58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e56:	e00b      	b.n	8002e70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e66:	d102      	bne.n	8002e6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6c:	e000      	b.n	8002e70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40007000 	.word	0x40007000

08002e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d141      	bne.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e8e:	4b4b      	ldr	r3, [pc, #300]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9a:	d131      	bne.n	8002f00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e9c:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea2:	4a46      	ldr	r2, [pc, #280]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eb4:	4a41      	ldr	r2, [pc, #260]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ebc:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2232      	movs	r2, #50	; 0x32
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	4a3f      	ldr	r2, [pc, #252]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	0c9b      	lsrs	r3, r3, #18
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed2:	e002      	b.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee6:	d102      	bne.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f2      	bne.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eee:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efa:	d158      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e057      	b.n	8002fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f00:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f06:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f10:	e04d      	b.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f18:	d141      	bne.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f1a:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d131      	bne.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f38:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f40:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2232      	movs	r2, #50	; 0x32
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	0c9b      	lsrs	r3, r3, #18
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5e:	e002      	b.n	8002f66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f72:	d102      	bne.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f2      	bne.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f86:	d112      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e011      	b.n	8002fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f9c:	e007      	b.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	431bde83 	.word	0x431bde83

08002fc8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd6:	6053      	str	r3, [r2, #4]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f000 bc08 	b.w	800380c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffc:	4b96      	ldr	r3, [pc, #600]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003006:	4b94      	ldr	r3, [pc, #592]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80e4 	beq.w	80031e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <HAL_RCC_OscConfig+0x4c>
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	f040 808b 	bne.w	8003142 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b01      	cmp	r3, #1
 8003030:	f040 8087 	bne.w	8003142 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003034:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_OscConfig+0x64>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e3df      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <HAL_RCC_OscConfig+0x7e>
 800305c:	4b7e      	ldr	r3, [pc, #504]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003064:	e005      	b.n	8003072 <HAL_RCC_OscConfig+0x8a>
 8003066:	4b7c      	ldr	r3, [pc, #496]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003072:	4293      	cmp	r3, r2
 8003074:	d223      	bcs.n	80030be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fdf8 	bl	8003c70 <RCC_SetFlashLatencyFromMSIRange>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e3c0      	b.n	800380c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800308a:	4b73      	ldr	r3, [pc, #460]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a72      	ldr	r2, [pc, #456]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b70      	ldr	r3, [pc, #448]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	496d      	ldr	r1, [pc, #436]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a8:	4b6b      	ldr	r3, [pc, #428]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	4968      	ldr	r1, [pc, #416]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
 80030bc:	e025      	b.n	800310a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030be:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4960      	ldr	r1, [pc, #384]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030dc:	4b5e      	ldr	r3, [pc, #376]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	495b      	ldr	r1, [pc, #364]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fdb8 	bl	8003c70 <RCC_SetFlashLatencyFromMSIRange>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e380      	b.n	800380c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800310a:	f000 fcc1 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	4950      	ldr	r1, [pc, #320]	; (800325c <HAL_RCC_OscConfig+0x274>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a4e      	ldr	r2, [pc, #312]	; (8003260 <HAL_RCC_OscConfig+0x278>)
 8003128:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800312a:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <HAL_RCC_OscConfig+0x27c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe f832 	bl	8001198 <HAL_InitTick>
 8003134:	4603      	mov	r3, r0
 8003136:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d052      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	e364      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d032      	beq.n	80031b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800314a:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a42      	ldr	r2, [pc, #264]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003156:	f7fe f86f 	bl	8001238 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800315e:	f7fe f86b 	bl	8001238 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e34d      	b.n	800380c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a35      	ldr	r2, [pc, #212]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4930      	ldr	r1, [pc, #192]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	492b      	ldr	r1, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
 80031ae:	e01a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031bc:	f7fe f83c 	bl	8001238 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c4:	f7fe f838 	bl	8001238 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e31a      	b.n	800380c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x1dc>
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d073      	beq.n	80032da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_OscConfig+0x21c>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d10e      	bne.n	800321c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d10b      	bne.n	800321c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d063      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d15f      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e2f7      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x24c>
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e025      	b.n	8003280 <HAL_RCC_OscConfig+0x298>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323c:	d114      	bne.n	8003268 <HAL_RCC_OscConfig+0x280>
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a02      	ldr	r2, [pc, #8]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e013      	b.n	8003280 <HAL_RCC_OscConfig+0x298>
 8003258:	40021000 	.word	0x40021000
 800325c:	0800f95c 	.word	0x0800f95c
 8003260:	20000000 	.word	0x20000000
 8003264:	20000004 	.word	0x20000004
 8003268:	4ba0      	ldr	r3, [pc, #640]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a9f      	ldr	r2, [pc, #636]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b9d      	ldr	r3, [pc, #628]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a9c      	ldr	r2, [pc, #624]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fd ffd6 	bl	8001238 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd ffd2 	bl	8001238 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e2b4      	b.n	800380c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a2:	4b92      	ldr	r3, [pc, #584]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x2a8>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd ffc2 	bl	8001238 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd ffbe 	bl	8001238 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e2a0      	b.n	800380c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2d0>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d060      	beq.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x310>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d119      	bne.n	8003326 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d116      	bne.n	8003326 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	4b7c      	ldr	r3, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x328>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e27d      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	4973      	ldr	r1, [pc, #460]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003324:	e040      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d023      	beq.n	8003376 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332e:	4b6f      	ldr	r3, [pc, #444]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6e      	ldr	r2, [pc, #440]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fd ff7d 	bl	8001238 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7fd ff79 	bl	8001238 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e25b      	b.n	800380c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	4b65      	ldr	r3, [pc, #404]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b62      	ldr	r3, [pc, #392]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	495f      	ldr	r1, [pc, #380]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
 8003374:	e018      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b5d      	ldr	r3, [pc, #372]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5c      	ldr	r2, [pc, #368]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800337c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fd ff59 	bl	8001238 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fd ff55 	bl	8001238 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e237      	b.n	800380c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033bc:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c2:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fd ff34 	bl	8001238 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fd ff30 	bl	8001238 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e212      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x3ec>
 80033f4:	e01b      	b.n	800342e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fc:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fd ff17 	bl	8001238 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340e:	f7fd ff13 	bl	8001238 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1f5      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a6 	beq.w	8003588 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003440:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	6593      	str	r3, [r2, #88]	; 0x58
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003464:	2301      	movs	r3, #1
 8003466:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCC_OscConfig+0x508>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d118      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <HAL_RCC_OscConfig+0x508>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x508>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7fd feda 	bl	8001238 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fd fed6 	bl	8001238 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1b8      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_RCC_OscConfig+0x508>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4d8>
 80034ae:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034be:	e029      	b.n	8003514 <HAL_RCC_OscConfig+0x52c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d115      	bne.n	80034f4 <HAL_RCC_OscConfig+0x50c>
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a03      	ldr	r2, [pc, #12]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e8:	e014      	b.n	8003514 <HAL_RCC_OscConfig+0x52c>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
 80034f4:	4b9d      	ldr	r3, [pc, #628]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	4a9c      	ldr	r2, [pc, #624]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003504:	4b99      	ldr	r3, [pc, #612]	; (800376c <HAL_RCC_OscConfig+0x784>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	4a98      	ldr	r2, [pc, #608]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fe8c 	bl	8001238 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fd fe88 	bl	8001238 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e168      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353a:	4b8c      	ldr	r3, [pc, #560]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ed      	beq.n	8003524 <HAL_RCC_OscConfig+0x53c>
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fd fe75 	bl	8001238 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fd fe71 	bl	8001238 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e151      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003568:	4b80      	ldr	r3, [pc, #512]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ed      	bne.n	8003552 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b7b      	ldr	r3, [pc, #492]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	4a7a      	ldr	r2, [pc, #488]	; (800376c <HAL_RCC_OscConfig+0x784>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d03c      	beq.n	800360e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01c      	beq.n	80035d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800359c:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800359e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a2:	4a72      	ldr	r2, [pc, #456]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fd fe44 	bl	8001238 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035b4:	f7fd fe40 	bl	8001238 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e122      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035c6:	4b69      	ldr	r3, [pc, #420]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80035c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ef      	beq.n	80035b4 <HAL_RCC_OscConfig+0x5cc>
 80035d4:	e01b      	b.n	800360e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035d6:	4b65      	ldr	r3, [pc, #404]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80035d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035dc:	4a63      	ldr	r2, [pc, #396]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fd fe27 	bl	8001238 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ee:	f7fd fe23 	bl	8001238 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e105      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003600:	4b5a      	ldr	r3, [pc, #360]	; (800376c <HAL_RCC_OscConfig+0x784>)
 8003602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ef      	bne.n	80035ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80f9 	beq.w	800380a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	2b02      	cmp	r3, #2
 800361e:	f040 80cf 	bne.w	80037c0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003622:	4b52      	ldr	r3, [pc, #328]	; (800376c <HAL_RCC_OscConfig+0x784>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0203 	and.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	429a      	cmp	r2, r3
 8003634:	d12c      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	3b01      	subs	r3, #1
 8003642:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d123      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d11b      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d113      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	3b01      	subs	r3, #1
 8003676:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d109      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d071      	beq.n	8003774 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d068      	beq.n	8003768 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003696:	4b35      	ldr	r3, [pc, #212]	; (800376c <HAL_RCC_OscConfig+0x784>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036a2:	4b32      	ldr	r3, [pc, #200]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e0ac      	b.n	800380c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036b2:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2d      	ldr	r2, [pc, #180]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80036b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036be:	f7fd fdbb 	bl	8001238 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fd fdb7 	bl	8001238 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e099      	b.n	800380c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCC_OscConfig+0x784>)
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCC_OscConfig+0x788>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036fe:	0212      	lsls	r2, r2, #8
 8003700:	4311      	orrs	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003706:	0852      	lsrs	r2, r2, #1
 8003708:	3a01      	subs	r2, #1
 800370a:	0552      	lsls	r2, r2, #21
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003712:	0852      	lsrs	r2, r2, #1
 8003714:	3a01      	subs	r2, #1
 8003716:	0652      	lsls	r2, r2, #25
 8003718:	4311      	orrs	r1, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800371e:	06d2      	lsls	r2, r2, #27
 8003720:	430a      	orrs	r2, r1
 8003722:	4912      	ldr	r1, [pc, #72]	; (800376c <HAL_RCC_OscConfig+0x784>)
 8003724:	4313      	orrs	r3, r2
 8003726:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0f      	ldr	r2, [pc, #60]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003732:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <HAL_RCC_OscConfig+0x784>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003740:	f7fd fd7a 	bl	8001238 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fd76 	bl	8001238 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e058      	b.n	800380c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <HAL_RCC_OscConfig+0x784>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003766:	e050      	b.n	800380a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04f      	b.n	800380c <HAL_RCC_OscConfig+0x824>
 800376c:	40021000 	.word	0x40021000
 8003770:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d144      	bne.n	800380a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a23      	ldr	r2, [pc, #140]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a20      	ldr	r2, [pc, #128]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003798:	f7fd fd4e 	bl	8001238 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fd fd4a 	bl	8001238 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e02c      	b.n	800380c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x7b8>
 80037be:	e024      	b.n	800380a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d01f      	beq.n	8003806 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 80037cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fd fd31 	bl	8001238 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fd fd2d 	bl	8001238 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e00f      	b.n	800380c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4905      	ldr	r1, [pc, #20]	; (8003814 <HAL_RCC_OscConfig+0x82c>)
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_OscConfig+0x830>)
 8003800:	4013      	ands	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
 8003804:	e001      	b.n	800380a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000
 8003818:	feeefffc 	.word	0xfeeefffc

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e11d      	b.n	8003a70 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b90      	ldr	r3, [pc, #576]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b8d      	ldr	r3, [pc, #564]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	498b      	ldr	r1, [pc, #556]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b89      	ldr	r3, [pc, #548]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e105      	b.n	8003a70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d010      	beq.n	8003892 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	4b81      	ldr	r3, [pc, #516]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800387c:	429a      	cmp	r2, r3
 800387e:	d908      	bls.n	8003892 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b7e      	ldr	r3, [pc, #504]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	497b      	ldr	r1, [pc, #492]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d079      	beq.n	8003992 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d11e      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	4b75      	ldr	r3, [pc, #468]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0dc      	b.n	8003a70 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038b6:	f000 fa35 	bl	8003d24 <RCC_GetSysClockFreqFromPLLSource>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4a70      	ldr	r2, [pc, #448]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d946      	bls.n	8003950 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038c2:	4b6e      	ldr	r3, [pc, #440]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d140      	bne.n	8003950 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038ce:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d6:	4a69      	ldr	r2, [pc, #420]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80038d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e035      	b.n	8003950 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ec:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d115      	bne.n	8003924 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b9      	b.n	8003a70 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003904:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0ad      	b.n	8003a70 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0a5      	b.n	8003a70 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003924:	f000 f8b4 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8003928:	4603      	mov	r3, r0
 800392a:	4a55      	ldr	r2, [pc, #340]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d90f      	bls.n	8003950 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003930:	4b52      	ldr	r3, [pc, #328]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003944:	4a4d      	ldr	r2, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003950:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 0203 	bic.w	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4947      	ldr	r1, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003962:	f7fd fc69 	bl	8001238 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003968:	e00a      	b.n	8003980 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396a:	f7fd fc65 	bl	8001238 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3288 	movw	r2, #5000	; 0x1388
 8003978:	4293      	cmp	r3, r2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e077      	b.n	8003a70 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003980:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 020c 	and.w	r2, r3, #12
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	429a      	cmp	r2, r3
 8003990:	d1eb      	bne.n	800396a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d105      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003998:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4a37      	ldr	r2, [pc, #220]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 800399e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039bc:	429a      	cmp	r2, r3
 80039be:	d208      	bcs.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c0:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	492b      	ldr	r1, [pc, #172]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d210      	bcs.n	8003a02 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 020f 	bic.w	r2, r3, #15
 80039e8:	4923      	ldr	r1, [pc, #140]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f0:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e036      	b.n	8003a70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4918      	ldr	r1, [pc, #96]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4910      	ldr	r1, [pc, #64]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a40:	f000 f826 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	490c      	ldr	r1, [pc, #48]	; (8003a84 <HAL_RCC_ClockConfig+0x268>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <HAL_RCC_ClockConfig+0x26c>)
 8003a5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_RCC_ClockConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fd fb97 	bl	8001198 <HAL_InitTick>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40022000 	.word	0x40022000
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	04c4b400 	.word	0x04c4b400
 8003a84:	0800f95c 	.word	0x0800f95c
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	20000004 	.word	0x20000004

08003a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d121      	bne.n	8003b02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d11e      	bne.n	8003b02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e005      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aec:	4a2b      	ldr	r2, [pc, #172]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d102      	bne.n	8003b0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e004      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d134      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d003      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0xac>
 8003b34:	e005      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b38:	617b      	str	r3, [r7, #20]
      break;
 8003b3a:	e005      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b3e:	617b      	str	r3, [r7, #20]
      break;
 8003b40:	e002      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	617b      	str	r3, [r7, #20]
      break;
 8003b46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3301      	adds	r3, #1
 8003b54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	fb03 f202 	mul.w	r2, r3, r2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	0e5b      	lsrs	r3, r3, #25
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b88:	69bb      	ldr	r3, [r7, #24]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	0800f974 	.word	0x0800f974
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	007a1200 	.word	0x007a1200

08003ba8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000000 	.word	0x20000000

08003bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bc4:	f7ff fff0 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4904      	ldr	r1, [pc, #16]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000
 8003be8:	0800f96c 	.word	0x0800f96c

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bf0:	f7ff ffda 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0adb      	lsrs	r3, r3, #11
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4904      	ldr	r1, [pc, #16]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000
 8003c14:	0800f96c 	.word	0x0800f96c

08003c18 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_EnableCSS+0x1c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HAL_RCC_EnableCSS+0x1c>)
 8003c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c26:	6013      	str	r3, [r2, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_RCC_NMI_IRQHandler+0x24>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c48:	d105      	bne.n	8003c56 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003c4a:	f000 f809 	bl	8003c60 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003c4e:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <HAL_RCC_NMI_IRQHandler+0x24>)
 8003c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c54:	621a      	str	r2, [r3, #32]
  }
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000

08003c60 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c7c:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c88:	f7ff f8da 	bl	8002e40 <HAL_PWREx_GetVoltageRange>
 8003c8c:	6178      	str	r0, [r7, #20]
 8003c8e:	e014      	b.n	8003cba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c90:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9c:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ca8:	f7ff f8ca 	bl	8002e40 <HAL_PWREx_GetVoltageRange>
 8003cac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cae:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc0:	d10b      	bne.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b80      	cmp	r3, #128	; 0x80
 8003cc6:	d913      	bls.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2ba0      	cmp	r3, #160	; 0xa0
 8003ccc:	d902      	bls.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cce:	2302      	movs	r3, #2
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	e00d      	b.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e00a      	b.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cde:	d902      	bls.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	e004      	b.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b70      	cmp	r3, #112	; 0x70
 8003cea:	d101      	bne.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cec:	2301      	movs	r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 020f 	bic.w	r2, r3, #15
 8003cf8:	4909      	ldr	r1, [pc, #36]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d001      	beq.n	8003d12 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40022000 	.word	0x40022000

08003d24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d2a:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d00b      	beq.n	8003d52 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d825      	bhi.n	8003d8c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d008      	beq.n	8003d58 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d11f      	bne.n	8003d8c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d4e:	613b      	str	r3, [r7, #16]
    break;
 8003d50:	e01f      	b.n	8003d92 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d54:	613b      	str	r3, [r7, #16]
    break;
 8003d56:	e01c      	b.n	8003d92 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d107      	bne.n	8003d74 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e005      	b.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d80:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d88:	613b      	str	r3, [r7, #16]
    break;
 8003d8a:	e002      	b.n	8003d92 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
    break;
 8003d90:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	fb03 f202 	mul.w	r2, r3, r2
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0e5b      	lsrs	r3, r3, #25
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003dd2:	683b      	ldr	r3, [r7, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40021000 	.word	0x40021000
 8003de4:	00f42400 	.word	0x00f42400
 8003de8:	007a1200 	.word	0x007a1200
 8003dec:	0800f974 	.word	0x0800f974

08003df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df8:	2300      	movs	r3, #0
 8003dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d040      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d02a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e14:	2b80      	cmp	r3, #128	; 0x80
 8003e16:	d825      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e18:	2b60      	cmp	r3, #96	; 0x60
 8003e1a:	d026      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e1c:	2b60      	cmp	r3, #96	; 0x60
 8003e1e:	d821      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d006      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d81d      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d010      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e30:	e018      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e32:	4b89      	ldr	r3, [pc, #548]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	4a88      	ldr	r2, [pc, #544]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3e:	e015      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 fa24 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e50:	e00c      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3320      	adds	r3, #32
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 fb0f 	bl	800547c <RCCEx_PLLSAI2_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e62:	e003      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	74fb      	strb	r3, [r7, #19]
      break;
 8003e68:	e000      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e72:	4b79      	ldr	r3, [pc, #484]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e78:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e80:	4975      	ldr	r1, [pc, #468]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e88:	e001      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d047      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea2:	d030      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea8:	d82a      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eae:	d02a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb4:	d824      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec0:	d81e      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eca:	d010      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ecc:	e018      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ece:	4b62      	ldr	r3, [pc, #392]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4a61      	ldr	r2, [pc, #388]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eda:	e015      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 f9d6 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eec:	e00c      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3320      	adds	r3, #32
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fac1 	bl	800547c <RCCEx_PLLSAI2_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003efe:	e003      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	74fb      	strb	r3, [r7, #19]
      break;
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f0e:	4b52      	ldr	r3, [pc, #328]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	494e      	ldr	r1, [pc, #312]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f24:	e001      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 809f 	beq.w	8004076 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f3c:	4b46      	ldr	r3, [pc, #280]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	4a40      	ldr	r2, [pc, #256]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a3a      	ldr	r2, [pc, #232]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f7a:	f7fd f95d 	bl	8001238 <HAL_GetTick>
 8003f7e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f80:	e009      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f82:	f7fd f959 	bl	8001238 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d902      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	74fb      	strb	r3, [r7, #19]
        break;
 8003f94:	e005      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f96:	4b31      	ldr	r3, [pc, #196]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ef      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d15b      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01f      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d019      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd2:	4b21      	ldr	r3, [pc, #132]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ff2:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d016      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fd f918 	bl	8001238 <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800400a:	e00b      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400c:	f7fd f914 	bl	8001238 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f241 3288 	movw	r2, #5000	; 0x1388
 800401a:	4293      	cmp	r3, r2
 800401c:	d902      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	74fb      	strb	r3, [r7, #19]
            break;
 8004022:	e006      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ec      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10c      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	4903      	ldr	r1, [pc, #12]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004050:	e008      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	74bb      	strb	r3, [r7, #18]
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004058:	40021000 	.word	0x40021000
 800405c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004064:	7c7b      	ldrb	r3, [r7, #17]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d105      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406a:	4ba0      	ldr	r3, [pc, #640]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	4a9f      	ldr	r2, [pc, #636]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004074:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004082:	4b9a      	ldr	r3, [pc, #616]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f023 0203 	bic.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004090:	4996      	ldr	r1, [pc, #600]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a4:	4b91      	ldr	r3, [pc, #580]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f023 020c 	bic.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	498e      	ldr	r1, [pc, #568]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040c6:	4b89      	ldr	r3, [pc, #548]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	4985      	ldr	r1, [pc, #532]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040e8:	4b80      	ldr	r3, [pc, #512]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f6:	497d      	ldr	r1, [pc, #500]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800410a:	4b78      	ldr	r3, [pc, #480]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004118:	4974      	ldr	r1, [pc, #464]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800412c:	4b6f      	ldr	r3, [pc, #444]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413a:	496c      	ldr	r1, [pc, #432]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414e:	4b67      	ldr	r3, [pc, #412]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415c:	4963      	ldr	r1, [pc, #396]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004170:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800417e:	495b      	ldr	r1, [pc, #364]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004192:	4b56      	ldr	r3, [pc, #344]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	4952      	ldr	r1, [pc, #328]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b4:	4b4d      	ldr	r3, [pc, #308]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	494a      	ldr	r1, [pc, #296]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d6:	4b45      	ldr	r3, [pc, #276]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	4941      	ldr	r1, [pc, #260]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041f8:	4b3c      	ldr	r3, [pc, #240]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004206:	4939      	ldr	r1, [pc, #228]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d028      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800421a:	4b34      	ldr	r3, [pc, #208]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004228:	4930      	ldr	r1, [pc, #192]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004238:	d106      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423a:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004244:	60d3      	str	r3, [r2, #12]
 8004246:	e011      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004250:	d10c      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f001 f81b 	bl	8005294 <RCCEx_PLLSAI1_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d04d      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800427c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004280:	d108      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800428e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004292:	e012      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004294:	4b15      	ldr	r3, [pc, #84]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800429a:	4a14      	ldr	r2, [pc, #80]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042a4:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b2:	490e      	ldr	r1, [pc, #56]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c2:	d106      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a08      	ldr	r2, [pc, #32]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ce:	60d3      	str	r3, [r2, #12]
 80042d0:	e020      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042da:	d109      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a02      	ldr	r2, [pc, #8]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e6:	60d3      	str	r3, [r2, #12]
 80042e8:	e014      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	2101      	movs	r1, #1
 8004300:	4618      	mov	r0, r3
 8004302:	f000 ffc7 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d028      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004320:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800432e:	4947      	ldr	r1, [pc, #284]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800433e:	d106      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004340:	4b42      	ldr	r3, [pc, #264]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a41      	ldr	r2, [pc, #260]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800434a:	60d3      	str	r3, [r2, #12]
 800434c:	e011      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004356:	d10c      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	2101      	movs	r1, #1
 800435e:	4618      	mov	r0, r3
 8004360:	f000 ff98 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01e      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800437e:	4b33      	ldr	r3, [pc, #204]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438e:	492f      	ldr	r1, [pc, #188]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 ff73 	bl	8005294 <RCCEx_PLLSAI1_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b2:	7cfb      	ldrb	r3, [r7, #19]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043c8:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ce:	f023 0204 	bic.w	r2, r3, #4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d8:	491c      	ldr	r1, [pc, #112]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00b      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043ec:	4b17      	ldr	r3, [pc, #92]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f2:	f023 0218 	bic.w	r2, r3, #24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	4913      	ldr	r1, [pc, #76]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d017      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004420:	490a      	ldr	r1, [pc, #40]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004432:	d105      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004440:	7cbb      	ldrb	r3, [r7, #18]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000

08004450 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004462:	d13e      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004464:	4bb6      	ldr	r3, [pc, #728]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004476:	d028      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447e:	f200 86f4 	bhi.w	800526a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004488:	d005      	beq.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004490:	d00e      	beq.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004492:	f000 beea 	b.w	800526a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004496:	4baa      	ldr	r3, [pc, #680]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	f040 86e4 	bne.w	800526e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044aa:	61fb      	str	r3, [r7, #28]
      break;
 80044ac:	f000 bedf 	b.w	800526e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044b0:	4ba3      	ldr	r3, [pc, #652]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	f040 86d9 	bne.w	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80044c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044c4:	61fb      	str	r3, [r7, #28]
      break;
 80044c6:	f000 bed4 	b.w	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044ca:	4b9d      	ldr	r3, [pc, #628]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d6:	f040 86ce 	bne.w	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80044da:	4b9a      	ldr	r3, [pc, #616]	; (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044dc:	61fb      	str	r3, [r7, #28]
      break;
 80044de:	f000 beca 	b.w	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e2:	4b97      	ldr	r3, [pc, #604]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d036      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d840      	bhi.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d003      	beq.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d020      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004504:	e039      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004506:	4b8e      	ldr	r3, [pc, #568]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d116      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004512:	4b8b      	ldr	r3, [pc, #556]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800451e:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	e005      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800452a:	4b85      	ldr	r3, [pc, #532]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800452c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	4a84      	ldr	r2, [pc, #528]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800453e:	e01f      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
      break;
 8004544:	e01c      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004546:	4b7e      	ldr	r3, [pc, #504]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004552:	d102      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004554:	4b7d      	ldr	r3, [pc, #500]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004556:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004558:	e012      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
      break;
 800455e:	e00f      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004560:	4b77      	ldr	r3, [pc, #476]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800456c:	d102      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800456e:	4b78      	ldr	r3, [pc, #480]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004570:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004572:	e005      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
      break;
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
      break;
 800457e:	bf00      	nop
    }

    switch(PeriphClk)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004586:	f000 8606 	beq.w	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004590:	f200 8673 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800459a:	f000 8469 	beq.w	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a4:	f200 8669 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ae:	f000 8531 	beq.w	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b8:	f200 865f 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045c2:	f000 8187 	beq.w	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045cc:	f200 8655 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045d6:	f000 80cd 	beq.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045e0:	f200 864b 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ea:	f000 8430 	beq.w	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	f200 8641 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045fe:	f000 83e4 	beq.w	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004608:	f200 8637 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	f000 80af 	beq.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461c:	f200 862d 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	f000 809d 	beq.w	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004630:	f200 8623 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463a:	f000 808b 	beq.w	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004644:	f200 8619 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	f000 8554 	beq.w	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004658:	f200 860f 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004662:	f000 8500 	beq.w	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466c:	f200 8605 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004676:	f000 84a1 	beq.w	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004680:	f200 85fb 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	f000 846c 	beq.w	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b80      	cmp	r3, #128	; 0x80
 8004690:	f200 85f3 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b20      	cmp	r3, #32
 8004698:	d84c      	bhi.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 85ec 	beq.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	2b1f      	cmp	r3, #31
 80046a8:	f200 85e7 	bhi.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	08004ac9 	.word	0x08004ac9
 80046b8:	08004b37 	.word	0x08004b37
 80046bc:	0800527b 	.word	0x0800527b
 80046c0:	08004bcb 	.word	0x08004bcb
 80046c4:	0800527b 	.word	0x0800527b
 80046c8:	0800527b 	.word	0x0800527b
 80046cc:	0800527b 	.word	0x0800527b
 80046d0:	08004c43 	.word	0x08004c43
 80046d4:	0800527b 	.word	0x0800527b
 80046d8:	0800527b 	.word	0x0800527b
 80046dc:	0800527b 	.word	0x0800527b
 80046e0:	0800527b 	.word	0x0800527b
 80046e4:	0800527b 	.word	0x0800527b
 80046e8:	0800527b 	.word	0x0800527b
 80046ec:	0800527b 	.word	0x0800527b
 80046f0:	08004cc7 	.word	0x08004cc7
 80046f4:	0800527b 	.word	0x0800527b
 80046f8:	0800527b 	.word	0x0800527b
 80046fc:	0800527b 	.word	0x0800527b
 8004700:	0800527b 	.word	0x0800527b
 8004704:	0800527b 	.word	0x0800527b
 8004708:	0800527b 	.word	0x0800527b
 800470c:	0800527b 	.word	0x0800527b
 8004710:	0800527b 	.word	0x0800527b
 8004714:	0800527b 	.word	0x0800527b
 8004718:	0800527b 	.word	0x0800527b
 800471c:	0800527b 	.word	0x0800527b
 8004720:	0800527b 	.word	0x0800527b
 8004724:	0800527b 	.word	0x0800527b
 8004728:	0800527b 	.word	0x0800527b
 800472c:	0800527b 	.word	0x0800527b
 8004730:	08004d49 	.word	0x08004d49
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	f000 83e8 	beq.w	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800473c:	f000 bd9d 	b.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004740:	40021000 	.word	0x40021000
 8004744:	0003d090 	.word	0x0003d090
 8004748:	0800f974 	.word	0x0800f974
 800474c:	00f42400 	.word	0x00f42400
 8004750:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800475a:	f000 ff83 	bl	8005664 <RCCEx_GetSAIxPeriphCLKFreq>
 800475e:	61f8      	str	r0, [r7, #28]
      break;
 8004760:	f000 bd8e 	b.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004764:	69b9      	ldr	r1, [r7, #24]
 8004766:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800476a:	f000 ff7b 	bl	8005664 <RCCEx_GetSAIxPeriphCLKFreq>
 800476e:	61f8      	str	r0, [r7, #28]
      break;
 8004770:	f000 bd86 	b.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004774:	4b9a      	ldr	r3, [pc, #616]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800478e:	f200 8092 	bhi.w	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004798:	d029      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a0:	f200 8089 	bhi.w	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d07b      	beq.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047b0:	d04a      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80047b2:	e080      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80047b4:	4b8a      	ldr	r3, [pc, #552]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d17d      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80047c0:	4b87      	ldr	r3, [pc, #540]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80047cc:	4b84      	ldr	r3, [pc, #528]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	e005      	b.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80047d8:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	4a7f      	ldr	r2, [pc, #508]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	61fb      	str	r3, [r7, #28]
          break;
 80047ec:	e066      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80047ee:	4b7c      	ldr	r3, [pc, #496]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047fa:	d162      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80047fc:	4b78      	ldr	r3, [pc, #480]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004808:	d15b      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800480a:	4b75      	ldr	r3, [pc, #468]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004814:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	fb03 f202 	mul.w	r2, r3, r2
 800481e:	4b70      	ldr	r3, [pc, #448]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	3301      	adds	r3, #1
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004830:	4b6b      	ldr	r3, [pc, #428]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0d5b      	lsrs	r3, r3, #21
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	61fb      	str	r3, [r7, #28]
          break;
 8004846:	e03c      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004848:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004854:	d138      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004856:	4b62      	ldr	r3, [pc, #392]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d131      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004864:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	fb03 f202 	mul.w	r2, r3, r2
 8004878:	4b59      	ldr	r3, [pc, #356]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	3301      	adds	r3, #1
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800488a:	4b55      	ldr	r3, [pc, #340]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	0d5b      	lsrs	r3, r3, #21
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	3301      	adds	r3, #1
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	61fb      	str	r3, [r7, #28]
          break;
 80048a0:	e012      	b.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80048a2:	4b4f      	ldr	r3, [pc, #316]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d10e      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80048b0:	4b4d      	ldr	r3, [pc, #308]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048b2:	61fb      	str	r3, [r7, #28]
          break;
 80048b4:	e00b      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80048b6:	bf00      	nop
 80048b8:	f000 bce2 	b.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048bc:	bf00      	nop
 80048be:	f000 bcdf 	b.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048c2:	bf00      	nop
 80048c4:	f000 bcdc 	b.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048c8:	bf00      	nop
 80048ca:	f000 bcd9 	b.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048ce:	bf00      	nop
        break;
 80048d0:	f000 bcd6 	b.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80048d4:	4b42      	ldr	r3, [pc, #264]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e2:	d13d      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f0:	f040 84c5 	bne.w	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80048f4:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	f040 84bd 	bne.w	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004904:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	0a1b      	lsrs	r3, r3, #8
 800490a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	fb03 f202 	mul.w	r2, r3, r2
 8004918:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	3301      	adds	r3, #1
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800492a:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	0edb      	lsrs	r3, r3, #27
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800493c:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8004948:	2311      	movs	r3, #17
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e001      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800494e:	2307      	movs	r3, #7
 8004950:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	61fb      	str	r3, [r7, #28]
      break;
 800495c:	f000 bc8f 	b.w	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004960:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004972:	d016      	beq.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800497a:	f200 809b 	bhi.w	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004984:	d032      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800498c:	f200 8092 	bhi.w	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8084 	beq.w	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800499e:	d052      	beq.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80049a0:	e088      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80049a2:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	f040 8084 	bne.w	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80049bc:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	e005      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	4a03      	ldr	r2, [pc, #12]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80049d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049da:	61fb      	str	r3, [r7, #28]
          break;
 80049dc:	e06c      	b.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	0800f974 	.word	0x0800f974
 80049e8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80049ec:	4ba5      	ldr	r3, [pc, #660]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d160      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80049fa:	4ba2      	ldr	r3, [pc, #648]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a06:	d159      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a08:	4b9e      	ldr	r3, [pc, #632]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a12:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	fb03 f202 	mul.w	r2, r3, r2
 8004a1c:	4b99      	ldr	r3, [pc, #612]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	3301      	adds	r3, #1
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004a2e:	4b95      	ldr	r3, [pc, #596]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	0d5b      	lsrs	r3, r3, #21
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	61fb      	str	r3, [r7, #28]
          break;
 8004a44:	e03a      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004a46:	4b8f      	ldr	r3, [pc, #572]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a52:	d135      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004a54:	4b8b      	ldr	r3, [pc, #556]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a60:	d12e      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a62:	4b88      	ldr	r3, [pc, #544]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	fb03 f202 	mul.w	r2, r3, r2
 8004a76:	4b83      	ldr	r3, [pc, #524]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	3301      	adds	r3, #1
 8004a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a86:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004a88:	4b7e      	ldr	r3, [pc, #504]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	0d5b      	lsrs	r3, r3, #21
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	61fb      	str	r3, [r7, #28]
          break;
 8004a9e:	e00f      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004aa0:	4b78      	ldr	r3, [pc, #480]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d10a      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8004aae:	4b76      	ldr	r3, [pc, #472]	; (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004ab0:	61fb      	str	r3, [r7, #28]
          break;
 8004ab2:	e007      	b.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004ab4:	bf00      	nop
 8004ab6:	e3e2      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004ab8:	bf00      	nop
 8004aba:	e3e0      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004abc:	bf00      	nop
 8004abe:	e3de      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004ac0:	bf00      	nop
 8004ac2:	e3dc      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004ac4:	bf00      	nop
      break;
 8004ac6:	e3da      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004ac8:	4b6e      	ldr	r3, [pc, #440]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d827      	bhi.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004af9 	.word	0x08004af9
 8004ae8:	08004b01 	.word	0x08004b01
 8004aec:	08004b15 	.word	0x08004b15
          frequency = HAL_RCC_GetPCLK2Freq();
 8004af0:	f7ff f87c 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8004af4:	61f8      	str	r0, [r7, #28]
          break;
 8004af6:	e01d      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004af8:	f7fe ffca 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004afc:	61f8      	str	r0, [r7, #28]
          break;
 8004afe:	e019      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b00:	4b60      	ldr	r3, [pc, #384]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d10f      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8004b0e:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b10:	61fb      	str	r3, [r7, #28]
          break;
 8004b12:	e00c      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b14:	4b5b      	ldr	r3, [pc, #364]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d107      	bne.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8004b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b26:	61fb      	str	r3, [r7, #28]
          break;
 8004b28:	e003      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004b2a:	bf00      	nop
 8004b2c:	e3a8      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b2e:	bf00      	nop
 8004b30:	e3a6      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b32:	bf00      	nop
        break;
 8004b34:	e3a4      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b36:	4b53      	ldr	r3, [pc, #332]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	d83a      	bhi.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b85 	.word	0x08004b85
 8004b54:	08004bbf 	.word	0x08004bbf
 8004b58:	08004bbf 	.word	0x08004bbf
 8004b5c:	08004bbf 	.word	0x08004bbf
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	08004bbf 	.word	0x08004bbf
 8004b68:	08004bbf 	.word	0x08004bbf
 8004b6c:	08004bbf 	.word	0x08004bbf
 8004b70:	08004b95 	.word	0x08004b95
 8004b74:	08004bbf 	.word	0x08004bbf
 8004b78:	08004bbf 	.word	0x08004bbf
 8004b7c:	08004bbf 	.word	0x08004bbf
 8004b80:	08004ba9 	.word	0x08004ba9
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b84:	f7ff f81c 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004b88:	61f8      	str	r0, [r7, #28]
          break;
 8004b8a:	e01d      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b8c:	f7fe ff80 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004b90:	61f8      	str	r0, [r7, #28]
          break;
 8004b92:	e019      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba0:	d10f      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8004ba2:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ba4:	61fb      	str	r3, [r7, #28]
          break;
 8004ba6:	e00c      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ba8:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8004bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bba:	61fb      	str	r3, [r7, #28]
          break;
 8004bbc:	e003      	b.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004bbe:	bf00      	nop
 8004bc0:	e35e      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bc2:	bf00      	nop
 8004bc4:	e35c      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bc6:	bf00      	nop
        break;
 8004bc8:	e35a      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004bca:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b30      	cmp	r3, #48	; 0x30
 8004bda:	d021      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b30      	cmp	r3, #48	; 0x30
 8004be0:	d829      	bhi.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d011      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d823      	bhi.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d004      	beq.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8004bfa:	e01c      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f7fe ffe0 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004c00:	61f8      	str	r0, [r7, #28]
          break;
 8004c02:	e01d      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c04:	f7fe ff44 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004c08:	61f8      	str	r0, [r7, #28]
          break;
 8004c0a:	e019      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c18:	d10f      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c1c:	61fb      	str	r3, [r7, #28]
          break;
 8004c1e:	e00c      	b.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c20:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8004c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c32:	61fb      	str	r3, [r7, #28]
          break;
 8004c34:	e003      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004c36:	bf00      	nop
 8004c38:	e322      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c3a:	bf00      	nop
 8004c3c:	e320      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c3e:	bf00      	nop
        break;
 8004c40:	e31e      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2bc0      	cmp	r3, #192	; 0xc0
 8004c52:	d027      	beq.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2bc0      	cmp	r3, #192	; 0xc0
 8004c58:	d82f      	bhi.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b80      	cmp	r3, #128	; 0x80
 8004c5e:	d017      	beq.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b80      	cmp	r3, #128	; 0x80
 8004c64:	d829      	bhi.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d004      	beq.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8004c72:	e022      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c74:	f7fe ffa4 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004c78:	61f8      	str	r0, [r7, #28]
          break;
 8004c7a:	e023      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c7c:	f7fe ff08 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004c80:	61f8      	str	r0, [r7, #28]
          break;
 8004c82:	e01f      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8004c84:	40021000 	.word	0x40021000
 8004c88:	02dc6c00 	.word	0x02dc6c00
 8004c8c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c90:	4b9b      	ldr	r3, [pc, #620]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9c:	d10f      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8004c9e:	4b99      	ldr	r3, [pc, #612]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004ca0:	61fb      	str	r3, [r7, #28]
          break;
 8004ca2:	e00c      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ca4:	4b96      	ldr	r3, [pc, #600]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8004cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb6:	61fb      	str	r3, [r7, #28]
          break;
 8004cb8:	e003      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8004cba:	bf00      	nop
 8004cbc:	e2e0      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cbe:	bf00      	nop
 8004cc0:	e2de      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cc2:	bf00      	nop
        break;
 8004cc4:	e2dc      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004cc6:	4b8e      	ldr	r3, [pc, #568]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd8:	d025      	beq.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce0:	d82c      	bhi.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce8:	d013      	beq.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d824      	bhi.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfe:	d004      	beq.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8004d00:	e01c      	b.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d02:	f7fe ff5d 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004d06:	61f8      	str	r0, [r7, #28]
          break;
 8004d08:	e01d      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d0a:	f7fe fec1 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004d0e:	61f8      	str	r0, [r7, #28]
          break;
 8004d10:	e019      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d12:	4b7b      	ldr	r3, [pc, #492]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1e:	d10f      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8004d20:	4b78      	ldr	r3, [pc, #480]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004d22:	61fb      	str	r3, [r7, #28]
          break;
 8004d24:	e00c      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d26:	4b76      	ldr	r3, [pc, #472]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d107      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8004d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d38:	61fb      	str	r3, [r7, #28]
          break;
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8004d3c:	bf00      	nop
 8004d3e:	e29f      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d40:	bf00      	nop
 8004d42:	e29d      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d44:	bf00      	nop
        break;
 8004d46:	e29b      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d48:	4b6d      	ldr	r3, [pc, #436]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d5a:	d025      	beq.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d62:	d82c      	bhi.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	d824      	bhi.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d80:	d004      	beq.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8004d82:	e01c      	b.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fe ff1c 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004d88:	61f8      	str	r0, [r7, #28]
          break;
 8004d8a:	e01d      	b.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d8c:	f7fe fe80 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004d90:	61f8      	str	r0, [r7, #28]
          break;
 8004d92:	e019      	b.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d94:	4b5a      	ldr	r3, [pc, #360]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da0:	d10f      	bne.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8004da2:	4b58      	ldr	r3, [pc, #352]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004da4:	61fb      	str	r3, [r7, #28]
          break;
 8004da6:	e00c      	b.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004da8:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8004db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dba:	61fb      	str	r3, [r7, #28]
          break;
 8004dbc:	e003      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8004dbe:	bf00      	nop
 8004dc0:	e25e      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004dc2:	bf00      	nop
 8004dc4:	e25c      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004dc6:	bf00      	nop
        break;
 8004dc8:	e25a      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004dca:	4b4d      	ldr	r3, [pc, #308]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ddc:	d007      	beq.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004de4:	d12f      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004de6:	f7fe fe53 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004dea:	61f8      	str	r0, [r7, #28]
          break;
 8004dec:	e02e      	b.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004dee:	4b44      	ldr	r3, [pc, #272]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfa:	d126      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004dfc:	4b40      	ldr	r3, [pc, #256]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d020      	beq.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e08:	4b3d      	ldr	r3, [pc, #244]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e12:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	fb03 f202 	mul.w	r2, r3, r2
 8004e1c:	4b38      	ldr	r3, [pc, #224]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	3301      	adds	r3, #1
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004e2e:	4b34      	ldr	r3, [pc, #208]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	0e5b      	lsrs	r3, r3, #25
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	61fb      	str	r3, [r7, #28]
          break;
 8004e44:	e001      	b.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8004e46:	bf00      	nop
 8004e48:	e21a      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e4a:	bf00      	nop
        break;
 8004e4c:	e218      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004e4e:	4b2c      	ldr	r3, [pc, #176]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7fe fec4 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8004e64:	61f8      	str	r0, [r7, #28]
        break;
 8004e66:	e20b      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e68:	f7fe fe12 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004e6c:	61f8      	str	r0, [r7, #28]
        break;
 8004e6e:	e207      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004e70:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e76:	f003 0318 	and.w	r3, r3, #24
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d834      	bhi.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d024      	beq.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8004e94:	e02d      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004e96:	69b9      	ldr	r1, [r7, #24]
 8004e98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e9c:	f000 fbe2 	bl	8005664 <RCCEx_GetSAIxPeriphCLKFreq>
 8004ea0:	61f8      	str	r0, [r7, #28]
          break;
 8004ea2:	e02b      	b.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004ea4:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d122      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	e005      	b.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	4a0c      	ldr	r2, [pc, #48]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eda:	61fb      	str	r3, [r7, #28]
          break;
 8004edc:	e00b      	b.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eea:	d106      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004eee:	61fb      	str	r3, [r7, #28]
          break;
 8004ef0:	e003      	b.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8004ef2:	bf00      	nop
 8004ef4:	e1c4      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004ef6:	bf00      	nop
 8004ef8:	e1c2      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004efa:	bf00      	nop
        break;
 8004efc:	e1c0      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	0800f974 	.word	0x0800f974
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004f0c:	4b96      	ldr	r3, [pc, #600]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1e:	d013      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	d819      	bhi.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f34:	d004      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8004f36:	e011      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f38:	f7fe fe42 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004f3c:	61f8      	str	r0, [r7, #28]
          break;
 8004f3e:	e010      	b.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f40:	f7fe fda6 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004f44:	61f8      	str	r0, [r7, #28]
          break;
 8004f46:	e00c      	b.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f48:	4b87      	ldr	r3, [pc, #540]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f54:	d104      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8004f56:	4b85      	ldr	r3, [pc, #532]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004f58:	61fb      	str	r3, [r7, #28]
          break;
 8004f5a:	e001      	b.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8004f5c:	bf00      	nop
 8004f5e:	e18f      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f60:	bf00      	nop
        break;
 8004f62:	e18d      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004f64:	4b80      	ldr	r3, [pc, #512]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f76:	d013      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7e:	d819      	bhi.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f8c:	d004      	beq.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8004f8e:	e011      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7fe fe16 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004f94:	61f8      	str	r0, [r7, #28]
          break;
 8004f96:	e010      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f98:	f7fe fd7a 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004f9c:	61f8      	str	r0, [r7, #28]
          break;
 8004f9e:	e00c      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fa0:	4b71      	ldr	r3, [pc, #452]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fac:	d104      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8004fae:	4b6f      	ldr	r3, [pc, #444]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004fb0:	61fb      	str	r3, [r7, #28]
          break;
 8004fb2:	e001      	b.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8004fb4:	bf00      	nop
 8004fb6:	e163      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004fb8:	bf00      	nop
        break;
 8004fba:	e161      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fce:	d013      	beq.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd6:	d819      	bhi.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d004      	beq.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8004fe6:	e011      	b.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe fdea 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004fec:	61f8      	str	r0, [r7, #28]
          break;
 8004fee:	e010      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ff0:	f7fe fd4e 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8004ff4:	61f8      	str	r0, [r7, #28]
          break;
 8004ff6:	e00c      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ff8:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005004:	d104      	bne.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005006:	4b59      	ldr	r3, [pc, #356]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005008:	61fb      	str	r3, [r7, #28]
          break;
 800500a:	e001      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800500c:	bf00      	nop
 800500e:	e137      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005010:	bf00      	nop
        break;
 8005012:	e135      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005014:	4b54      	ldr	r3, [pc, #336]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d011      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d818      	bhi.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d004      	beq.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005038:	e011      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800503a:	f7fe fdc1 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 800503e:	61f8      	str	r0, [r7, #28]
          break;
 8005040:	e010      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005042:	f7fe fd25 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8005046:	61f8      	str	r0, [r7, #28]
          break;
 8005048:	e00c      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005056:	d104      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005058:	4b44      	ldr	r3, [pc, #272]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800505a:	61fb      	str	r3, [r7, #28]
          break;
 800505c:	e001      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800505e:	bf00      	nop
 8005060:	e10e      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005062:	bf00      	nop
        break;
 8005064:	e10c      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005066:	4b40      	ldr	r3, [pc, #256]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005078:	d02c      	beq.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005080:	d833      	bhi.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005088:	d01a      	beq.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005090:	d82b      	bhi.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800509e:	d004      	beq.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80050a0:	e023      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050a2:	f7fe fd8d 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 80050a6:	61f8      	str	r0, [r7, #28]
          break;
 80050a8:	e026      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d11a      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80050b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80050bc:	61fb      	str	r3, [r7, #28]
          break;
 80050be:	e016      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050c0:	4b29      	ldr	r3, [pc, #164]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d111      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80050ce:	4b27      	ldr	r3, [pc, #156]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80050d0:	61fb      	str	r3, [r7, #28]
          break;
 80050d2:	e00e      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d109      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e6:	61fb      	str	r3, [r7, #28]
          break;
 80050e8:	e005      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80050ea:	bf00      	nop
 80050ec:	e0c8      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050ee:	bf00      	nop
 80050f0:	e0c6      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050f2:	bf00      	nop
 80050f4:	e0c4      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050f6:	bf00      	nop
        break;
 80050f8:	e0c2      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800510c:	d030      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005114:	d837      	bhi.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800511c:	d01a      	beq.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005124:	d82f      	bhi.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005132:	d004      	beq.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005134:	e027      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005136:	f7fe fd43 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 800513a:	61f8      	str	r0, [r7, #28]
          break;
 800513c:	e02a      	b.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d11e      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800514c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005150:	61fb      	str	r3, [r7, #28]
          break;
 8005152:	e01a      	b.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d115      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005162:	4b02      	ldr	r3, [pc, #8]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005164:	61fb      	str	r3, [r7, #28]
          break;
 8005166:	e012      	b.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005168:	40021000 	.word	0x40021000
 800516c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005170:	4b46      	ldr	r3, [pc, #280]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b02      	cmp	r3, #2
 800517c:	d109      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800517e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005182:	61fb      	str	r3, [r7, #28]
          break;
 8005184:	e005      	b.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8005186:	bf00      	nop
 8005188:	e07a      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800518a:	bf00      	nop
 800518c:	e078      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800518e:	bf00      	nop
 8005190:	e076      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005192:	bf00      	nop
        break;
 8005194:	e074      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005196:	4b3d      	ldr	r3, [pc, #244]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800519c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a8:	d02c      	beq.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b0:	d855      	bhi.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051be:	d004      	beq.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80051c0:	e04d      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fe fc65 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 80051c6:	61f8      	str	r0, [r7, #28]
          break;
 80051c8:	e04e      	b.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80051ca:	4b30      	ldr	r3, [pc, #192]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d145      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80051d6:	4b2d      	ldr	r3, [pc, #180]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80051e2:	4b2a      	ldr	r3, [pc, #168]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	e005      	b.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80051ee:	4b27      	ldr	r3, [pc, #156]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	4a25      	ldr	r2, [pc, #148]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80051fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005200:	61fb      	str	r3, [r7, #28]
          break;
 8005202:	e02e      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005204:	4b21      	ldr	r3, [pc, #132]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005210:	d129      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005212:	4b1e      	ldr	r3, [pc, #120]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521e:	d122      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005220:	4b1a      	ldr	r3, [pc, #104]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	0a1b      	lsrs	r3, r3, #8
 8005226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	fb03 f202 	mul.w	r2, r3, r2
 8005234:	4b15      	ldr	r3, [pc, #84]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	3301      	adds	r3, #1
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	0d5b      	lsrs	r3, r3, #21
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	3301      	adds	r3, #1
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	61fb      	str	r3, [r7, #28]
          break;
 800525c:	e003      	b.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800525e:	bf00      	nop
 8005260:	e00e      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005262:	bf00      	nop
 8005264:	e00c      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005266:	bf00      	nop
        break;
 8005268:	e00a      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800526a:	bf00      	nop
 800526c:	e008      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800526e:	bf00      	nop
 8005270:	e006      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005272:	bf00      	nop
 8005274:	e004      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005276:	bf00      	nop
 8005278:	e002      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800527e:	bf00      	nop
    }
  }

  return(frequency);
 8005280:	69fb      	ldr	r3, [r7, #28]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	0800f974 	.word	0x0800f974

08005294 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052a2:	4b72      	ldr	r3, [pc, #456]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00e      	beq.n	80052cc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052ae:	4b6f      	ldr	r3, [pc, #444]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0203 	and.w	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d103      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
       ||
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d142      	bne.n	800534c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
 80052ca:	e03f      	b.n	800534c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d018      	beq.n	8005306 <RCCEx_PLLSAI1_Config+0x72>
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d825      	bhi.n	8005324 <RCCEx_PLLSAI1_Config+0x90>
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d002      	beq.n	80052e2 <RCCEx_PLLSAI1_Config+0x4e>
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d009      	beq.n	80052f4 <RCCEx_PLLSAI1_Config+0x60>
 80052e0:	e020      	b.n	8005324 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052e2:	4b62      	ldr	r3, [pc, #392]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d11d      	bne.n	800532a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f2:	e01a      	b.n	800532a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052f4:	4b5d      	ldr	r3, [pc, #372]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d116      	bne.n	800532e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005304:	e013      	b.n	800532e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005306:	4b59      	ldr	r3, [pc, #356]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005312:	4b56      	ldr	r3, [pc, #344]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005322:	e006      	b.n	8005332 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      break;
 8005328:	e004      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800532a:	bf00      	nop
 800532c:	e002      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005332:	bf00      	nop
    }

    if(status == HAL_OK)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d108      	bne.n	800534c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800533a:	4b4c      	ldr	r3, [pc, #304]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f023 0203 	bic.w	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4949      	ldr	r1, [pc, #292]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005348:	4313      	orrs	r3, r2
 800534a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f040 8086 	bne.w	8005460 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005354:	4b45      	ldr	r3, [pc, #276]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a44      	ldr	r2, [pc, #272]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800535a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800535e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005360:	f7fb ff6a 	bl	8001238 <HAL_GetTick>
 8005364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005366:	e009      	b.n	800537c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005368:	f7fb ff66 	bl	8001238 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d902      	bls.n	800537c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	73fb      	strb	r3, [r7, #15]
        break;
 800537a:	e005      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800537c:	4b3b      	ldr	r3, [pc, #236]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ef      	bne.n	8005368 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d168      	bne.n	8005460 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d113      	bne.n	80053bc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005394:	4b35      	ldr	r3, [pc, #212]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	4b35      	ldr	r3, [pc, #212]	; (8005470 <RCCEx_PLLSAI1_Config+0x1dc>)
 800539a:	4013      	ands	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6892      	ldr	r2, [r2, #8]
 80053a0:	0211      	lsls	r1, r2, #8
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	68d2      	ldr	r2, [r2, #12]
 80053a6:	06d2      	lsls	r2, r2, #27
 80053a8:	4311      	orrs	r1, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6852      	ldr	r2, [r2, #4]
 80053ae:	3a01      	subs	r2, #1
 80053b0:	0112      	lsls	r2, r2, #4
 80053b2:	430a      	orrs	r2, r1
 80053b4:	492d      	ldr	r1, [pc, #180]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	610b      	str	r3, [r1, #16]
 80053ba:	e02d      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d115      	bne.n	80053ee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053c2:	4b2a      	ldr	r3, [pc, #168]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6892      	ldr	r2, [r2, #8]
 80053ce:	0211      	lsls	r1, r2, #8
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6912      	ldr	r2, [r2, #16]
 80053d4:	0852      	lsrs	r2, r2, #1
 80053d6:	3a01      	subs	r2, #1
 80053d8:	0552      	lsls	r2, r2, #21
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6852      	ldr	r2, [r2, #4]
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0112      	lsls	r2, r2, #4
 80053e4:	430a      	orrs	r2, r1
 80053e6:	4921      	ldr	r1, [pc, #132]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	610b      	str	r3, [r1, #16]
 80053ec:	e014      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ee:	4b1f      	ldr	r3, [pc, #124]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	4b21      	ldr	r3, [pc, #132]	; (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6892      	ldr	r2, [r2, #8]
 80053fa:	0211      	lsls	r1, r2, #8
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6952      	ldr	r2, [r2, #20]
 8005400:	0852      	lsrs	r2, r2, #1
 8005402:	3a01      	subs	r2, #1
 8005404:	0652      	lsls	r2, r2, #25
 8005406:	4311      	orrs	r1, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6852      	ldr	r2, [r2, #4]
 800540c:	3a01      	subs	r2, #1
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	430a      	orrs	r2, r1
 8005412:	4916      	ldr	r1, [pc, #88]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005414:	4313      	orrs	r3, r2
 8005416:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800541e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005422:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fb ff08 	bl	8001238 <HAL_GetTick>
 8005428:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800542a:	e009      	b.n	8005440 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800542c:	f7fb ff04 	bl	8001238 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d902      	bls.n	8005440 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	73fb      	strb	r3, [r7, #15]
          break;
 800543e:	e005      	b.n	800544c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005440:	4b0a      	ldr	r3, [pc, #40]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	4904      	ldr	r1, [pc, #16]	; (800546c <RCCEx_PLLSAI1_Config+0x1d8>)
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000
 8005470:	07ff800f 	.word	0x07ff800f
 8005474:	ff9f800f 	.word	0xff9f800f
 8005478:	f9ff800f 	.word	0xf9ff800f

0800547c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800548a:	4b72      	ldr	r3, [pc, #456]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00e      	beq.n	80054b4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005496:	4b6f      	ldr	r3, [pc, #444]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0203 	and.w	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d103      	bne.n	80054ae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
       ||
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d142      	bne.n	8005534 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	e03f      	b.n	8005534 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d018      	beq.n	80054ee <RCCEx_PLLSAI2_Config+0x72>
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d825      	bhi.n	800550c <RCCEx_PLLSAI2_Config+0x90>
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d002      	beq.n	80054ca <RCCEx_PLLSAI2_Config+0x4e>
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d009      	beq.n	80054dc <RCCEx_PLLSAI2_Config+0x60>
 80054c8:	e020      	b.n	800550c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ca:	4b62      	ldr	r3, [pc, #392]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11d      	bne.n	8005512 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054da:	e01a      	b.n	8005512 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054dc:	4b5d      	ldr	r3, [pc, #372]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d116      	bne.n	8005516 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e013      	b.n	8005516 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ee:	4b59      	ldr	r3, [pc, #356]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054fa:	4b56      	ldr	r3, [pc, #344]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800550a:	e006      	b.n	800551a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
      break;
 8005510:	e004      	b.n	800551c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800551a:	bf00      	nop
    }

    if(status == HAL_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005522:	4b4c      	ldr	r3, [pc, #304]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f023 0203 	bic.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4949      	ldr	r1, [pc, #292]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005530:	4313      	orrs	r3, r2
 8005532:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f040 8086 	bne.w	8005648 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800553c:	4b45      	ldr	r3, [pc, #276]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a44      	ldr	r2, [pc, #272]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005548:	f7fb fe76 	bl	8001238 <HAL_GetTick>
 800554c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800554e:	e009      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005550:	f7fb fe72 	bl	8001238 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d902      	bls.n	8005564 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	73fb      	strb	r3, [r7, #15]
        break;
 8005562:	e005      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005564:	4b3b      	ldr	r3, [pc, #236]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1ef      	bne.n	8005550 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d168      	bne.n	8005648 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d113      	bne.n	80055a4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800557c:	4b35      	ldr	r3, [pc, #212]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	4b35      	ldr	r3, [pc, #212]	; (8005658 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6892      	ldr	r2, [r2, #8]
 8005588:	0211      	lsls	r1, r2, #8
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68d2      	ldr	r2, [r2, #12]
 800558e:	06d2      	lsls	r2, r2, #27
 8005590:	4311      	orrs	r1, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6852      	ldr	r2, [r2, #4]
 8005596:	3a01      	subs	r2, #1
 8005598:	0112      	lsls	r2, r2, #4
 800559a:	430a      	orrs	r2, r1
 800559c:	492d      	ldr	r1, [pc, #180]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	614b      	str	r3, [r1, #20]
 80055a2:	e02d      	b.n	8005600 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d115      	bne.n	80055d6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055aa:	4b2a      	ldr	r3, [pc, #168]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	4b2b      	ldr	r3, [pc, #172]	; (800565c <RCCEx_PLLSAI2_Config+0x1e0>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6892      	ldr	r2, [r2, #8]
 80055b6:	0211      	lsls	r1, r2, #8
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6912      	ldr	r2, [r2, #16]
 80055bc:	0852      	lsrs	r2, r2, #1
 80055be:	3a01      	subs	r2, #1
 80055c0:	0552      	lsls	r2, r2, #21
 80055c2:	4311      	orrs	r1, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6852      	ldr	r2, [r2, #4]
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0112      	lsls	r2, r2, #4
 80055cc:	430a      	orrs	r2, r1
 80055ce:	4921      	ldr	r1, [pc, #132]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	614b      	str	r3, [r1, #20]
 80055d4:	e014      	b.n	8005600 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055d6:	4b1f      	ldr	r3, [pc, #124]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	4b21      	ldr	r3, [pc, #132]	; (8005660 <RCCEx_PLLSAI2_Config+0x1e4>)
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	0211      	lsls	r1, r2, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6952      	ldr	r2, [r2, #20]
 80055e8:	0852      	lsrs	r2, r2, #1
 80055ea:	3a01      	subs	r2, #1
 80055ec:	0652      	lsls	r2, r2, #25
 80055ee:	4311      	orrs	r1, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	3a01      	subs	r2, #1
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	430a      	orrs	r2, r1
 80055fa:	4916      	ldr	r1, [pc, #88]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005600:	4b14      	ldr	r3, [pc, #80]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a13      	ldr	r2, [pc, #76]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fb fe14 	bl	8001238 <HAL_GetTick>
 8005610:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005612:	e009      	b.n	8005628 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005614:	f7fb fe10 	bl	8001238 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d902      	bls.n	8005628 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	73fb      	strb	r3, [r7, #15]
          break;
 8005626:	e005      	b.n	8005634 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0ef      	beq.n	8005614 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	4904      	ldr	r1, [pc, #16]	; (8005654 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005644:	4313      	orrs	r3, r2
 8005646:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	07ff800f 	.word	0x07ff800f
 800565c:	ff9f800f 	.word	0xff9f800f
 8005660:	f9ff800f 	.word	0xf9ff800f

08005664 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005680:	d10b      	bne.n	800569a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005682:	4b7e      	ldr	r3, [pc, #504]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005688:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800568c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b60      	cmp	r3, #96	; 0x60
 8005692:	d112      	bne.n	80056ba <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005694:	4b7a      	ldr	r3, [pc, #488]	; (8005880 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	e00f      	b.n	80056ba <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a0:	d10b      	bne.n	80056ba <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80056a2:	4b76      	ldr	r3, [pc, #472]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ac:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b4:	d101      	bne.n	80056ba <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80056b6:	4b72      	ldr	r3, [pc, #456]	; (8005880 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80056b8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 80d6 	bne.w	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d003      	beq.n	80056d4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d2:	d13b      	bne.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80056d4:	4b69      	ldr	r3, [pc, #420]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e0:	f040 80c4 	bne.w	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80056e4:	4b65      	ldr	r3, [pc, #404]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80bd 	beq.w	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056f2:	4b62      	ldr	r3, [pc, #392]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	091b      	lsrs	r3, r3, #4
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	3301      	adds	r3, #1
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005706:	4b5d      	ldr	r3, [pc, #372]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005710:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005712:	4b5a      	ldr	r3, [pc, #360]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	0edb      	lsrs	r3, r3, #27
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005724:	4b55      	ldr	r3, [pc, #340]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005730:	2311      	movs	r3, #17
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e001      	b.n	800573a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005736:	2307      	movs	r3, #7
 8005738:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	fb03 f202 	mul.w	r2, r3, r2
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800574a:	e08f      	b.n	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d13a      	bne.n	80057c8 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005752:	4b4a      	ldr	r3, [pc, #296]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800575a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575e:	f040 8086 	bne.w	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005762:	4b46      	ldr	r3, [pc, #280]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d07f      	beq.n	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800576e:	4b43      	ldr	r3, [pc, #268]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	3301      	adds	r3, #1
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005782:	4b3e      	ldr	r3, [pc, #248]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	0a1b      	lsrs	r3, r3, #8
 8005788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	0edb      	lsrs	r3, r3, #27
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80057a0:	4b36      	ldr	r3, [pc, #216]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80057ac:	2311      	movs	r3, #17
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e001      	b.n	80057b6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80057b2:	2307      	movs	r3, #7
 80057b4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	fb03 f202 	mul.w	r2, r3, r2
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	e052      	b.n	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b80      	cmp	r3, #128	; 0x80
 80057cc:	d003      	beq.n	80057d6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d4:	d109      	bne.n	80057ea <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057d6:	4b29      	ldr	r3, [pc, #164]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d144      	bne.n	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80057e4:	4b27      	ldr	r3, [pc, #156]	; (8005884 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80057e6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057e8:	e041      	b.n	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d003      	beq.n	80057f8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	d13a      	bne.n	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80057f8:	4b20      	ldr	r3, [pc, #128]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005804:	d133      	bne.n	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005806:	4b1d      	ldr	r3, [pc, #116]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d02d      	beq.n	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005812:	4b1a      	ldr	r3, [pc, #104]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	3301      	adds	r3, #1
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005826:	4b15      	ldr	r3, [pc, #84]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005830:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005832:	4b12      	ldr	r3, [pc, #72]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	0edb      	lsrs	r3, r3, #27
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005844:	4b0d      	ldr	r3, [pc, #52]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005850:	2311      	movs	r3, #17
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e001      	b.n	800585a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005856:	2307      	movs	r3, #7
 8005858:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	fb03 f202 	mul.w	r2, r3, r2
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e000      	b.n	800586e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800586c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3724      	adds	r7, #36	; 0x24
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40021000 	.word	0x40021000
 8005880:	001fff68 	.word	0x001fff68
 8005884:	00f42400 	.word	0x00f42400

08005888 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e078      	b.n	800598c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fb fa81 	bl	8000db4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2203      	movs	r2, #3
 80058b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f86a 	bl	8005994 <HAL_SD_InitCard>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e060      	b.n	800598c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80058ca:	f107 0308 	add.w	r3, r7, #8
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fdcd 	bl	8006470 <HAL_SD_GetCardStatus>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e055      	b.n	800598c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80058e0:	7e3b      	ldrb	r3, [r7, #24]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80058e6:	7e7b      	ldrb	r3, [r7, #25]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d10a      	bne.n	800590a <HAL_SD_Init+0x82>
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <HAL_SD_Init+0x78>
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005906:	65da      	str	r2, [r3, #92]	; 0x5c
 8005908:	e00b      	b.n	8005922 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	2b01      	cmp	r3, #1
 8005910:	d104      	bne.n	800591c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005918:	65da      	str	r2, [r3, #92]	; 0x5c
 800591a:	e002      	b.n	8005922 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fe83 	bl	8006634 <HAL_SD_ConfigWideBusOperation>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e029      	b.n	800598c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005938:	f7fb fc7e 	bl	8001238 <HAL_GetTick>
 800593c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800593e:	e014      	b.n	800596a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005940:	f7fb fc7a 	bl	8001238 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800594e:	d10c      	bne.n	800596a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005956:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e010      	b.n	800598c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 ff76 	bl	800685c <HAL_SD_GetCardState>
 8005970:	4603      	mov	r3, r0
 8005972:	2b04      	cmp	r3, #4
 8005974:	d1e4      	bne.n	8005940 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	; 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005994:	b5b0      	push	{r4, r5, r7, lr}
 8005996:	b08e      	sub	sp, #56	; 0x38
 8005998:	af04      	add	r7, sp, #16
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800599c:	2300      	movs	r3, #0
 800599e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80059ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80059b0:	f7fe fd4e 	bl	8004450 <HAL_RCCEx_GetPeriphCLKFreq>
 80059b4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e079      	b.n	8005ac4 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	4a3d      	ldr	r2, [pc, #244]	; (8005acc <HAL_SD_InitCard+0x138>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d107      	bne.n	80059fc <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0210 	orr.w	r2, r2, #16
 80059fa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681d      	ldr	r5, [r3, #0]
 8005a00:	466c      	mov	r4, sp
 8005a02:	f107 0314 	add.w	r3, r7, #20
 8005a06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a0e:	f107 0308 	add.w	r3, r7, #8
 8005a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a14:	4628      	mov	r0, r5
 8005a16:	f002 fa1d 	bl	8007e54 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 fa60 	bl	8007ee4 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005a30:	4a27      	ldr	r2, [pc, #156]	; (8005ad0 <HAL_SD_InitCard+0x13c>)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	3301      	adds	r3, #1
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fb fc08 	bl	8001250 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 ffeb 	bl	8006a1c <SD_PowerON>
 8005a46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e02e      	b.n	8005ac4 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 ff18 	bl	800689c <SD_InitCard>
 8005a6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e01b      	b.n	8005ac4 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a94:	4618      	mov	r0, r3
 8005a96:	f002 fabb 	bl	8008010 <SDMMC_CmdBlockLength>
 8005a9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00f      	beq.n	8005ac2 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <HAL_SD_InitCard+0x140>)
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3728      	adds	r7, #40	; 0x28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bdb0      	pop	{r4, r5, r7, pc}
 8005acc:	014f8b59 	.word	0x014f8b59
 8005ad0:	00012110 	.word	0x00012110
 8005ad4:	1fe00fff 	.word	0x1fe00fff

08005ad8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b092      	sub	sp, #72	; 0x48
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005ae6:	f7fb fba7 	bl	8001238 <HAL_GetTick>
 8005aea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e170      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	f040 8163 	bne.w	8005dde <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	441a      	add	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d907      	bls.n	8005b3c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e157      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d002      	beq.n	8005b5a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	025b      	lsls	r3, r3, #9
 8005b58:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b5e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	025b      	lsls	r3, r3, #9
 8005b64:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b66:	2390      	movs	r3, #144	; 0x90
 8005b68:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f107 0214 	add.w	r2, r7, #20
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 fa19 	bl	8007fb8 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b94:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d90a      	bls.n	8005bb2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f002 fa77 	bl	800809c <SDMMC_CmdReadMultiBlock>
 8005bae:	6478      	str	r0, [r7, #68]	; 0x44
 8005bb0:	e009      	b.n	8005bc6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f002 fa49 	bl	8008056 <SDMMC_CmdReadSingleBlock>
 8005bc4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d012      	beq.n	8005bf2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a88      	ldr	r2, [pc, #544]	; (8005df4 <HAL_SD_ReadBlocks+0x31c>)
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e0fc      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005bf6:	e061      	b.n	8005cbc <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d03c      	beq.n	8005c80 <HAL_SD_ReadBlocks+0x1a8>
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d039      	beq.n	8005c80 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c10:	e033      	b.n	8005c7a <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f002 f946 	bl	8007ea8 <SDMMC_ReadFIFO>
 8005c1c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c28:	3301      	adds	r3, #1
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3e:	3301      	adds	r3, #1
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c44:	3b01      	subs	r3, #1
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	3301      	adds	r3, #1
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	0e1b      	lsrs	r3, r3, #24
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c70:	3b01      	subs	r3, #1
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c76:	3301      	adds	r3, #1
 8005c78:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7c:	2b07      	cmp	r3, #7
 8005c7e:	d9c8      	bls.n	8005c12 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005c80:	f7fb fada 	bl	8001238 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d902      	bls.n	8005c96 <HAL_SD_ReadBlocks+0x1be>
 8005c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d112      	bne.n	8005cbc <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a56      	ldr	r2, [pc, #344]	; (8005df4 <HAL_SD_ReadBlocks+0x31c>)
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e097      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d096      	beq.n	8005bf8 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d022      	beq.n	8005d2e <HAL_SD_ReadBlocks+0x256>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d91f      	bls.n	8005d2e <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d01b      	beq.n	8005d2e <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f002 fa38 	bl	8008170 <SDMMC_CmdStopTransfer>
 8005d00:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d012      	beq.n	8005d2e <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a39      	ldr	r2, [pc, #228]	; (8005df4 <HAL_SD_ReadBlocks+0x31c>)
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d16:	431a      	orrs	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e05e      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d012      	beq.n	8005d62 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2c      	ldr	r2, [pc, #176]	; (8005df4 <HAL_SD_ReadBlocks+0x31c>)
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	f043 0208 	orr.w	r2, r3, #8
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e044      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d012      	beq.n	8005d96 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <HAL_SD_ReadBlocks+0x31c>)
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	f043 0202 	orr.w	r2, r3, #2
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e02a      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d012      	beq.n	8005dca <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a12      	ldr	r2, [pc, #72]	; (8005df4 <HAL_SD_ReadBlocks+0x31c>)
 8005daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	f043 0220 	orr.w	r2, r3, #32
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e010      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <HAL_SD_ReadBlocks+0x320>)
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e006      	b.n	8005dec <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
  }
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3748      	adds	r7, #72	; 0x48
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	1fe00fff 	.word	0x1fe00fff
 8005df8:	18000f3a 	.word	0x18000f3a

08005dfc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b092      	sub	sp, #72	; 0x48
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e0a:	f7fb fa15 	bl	8001238 <HAL_GetTick>
 8005e0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d107      	bne.n	8005e2e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e174      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	f040 8167 	bne.w	800610a <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	441a      	add	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d907      	bls.n	8005e60 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e15b      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2203      	movs	r2, #3
 8005e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d002      	beq.n	8005e7e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	025b      	lsls	r3, r3, #9
 8005e7c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e82:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	025b      	lsls	r3, r3, #9
 8005e88:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e8a:	2390      	movs	r3, #144	; 0x90
 8005e8c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f107 0218 	add.w	r2, r7, #24
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f002 f887 	bl	8007fb8 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d90a      	bls.n	8005ed6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f002 f92b 	bl	8008128 <SDMMC_CmdWriteMultiBlock>
 8005ed2:	6478      	str	r0, [r7, #68]	; 0x44
 8005ed4:	e009      	b.n	8005eea <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2210      	movs	r2, #16
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f002 f8fd 	bl	80080e2 <SDMMC_CmdWriteSingleBlock>
 8005ee8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d012      	beq.n	8005f16 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a8a      	ldr	r2, [pc, #552]	; (8006120 <HAL_SD_WriteBlocks+0x324>)
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efe:	431a      	orrs	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e100      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f1a:	e065      	b.n	8005fe8 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d040      	beq.n	8005fac <HAL_SD_WriteBlocks+0x1b0>
 8005f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d03d      	beq.n	8005fac <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f30:	2300      	movs	r3, #0
 8005f32:	643b      	str	r3, [r7, #64]	; 0x40
 8005f34:	e037      	b.n	8005fa6 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	3301      	adds	r3, #1
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f44:	3b01      	subs	r3, #1
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	021a      	lsls	r2, r3, #8
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	3301      	adds	r3, #1
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	041a      	lsls	r2, r3, #16
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6e:	3301      	adds	r3, #1
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f74:	3b01      	subs	r3, #1
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	061a      	lsls	r2, r3, #24
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f86:	3301      	adds	r3, #1
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f107 0214 	add.w	r2, r7, #20
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 ff91 	bl	8007ec2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa8:	2b07      	cmp	r3, #7
 8005faa:	d9c4      	bls.n	8005f36 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005fac:	f7fb f944 	bl	8001238 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d902      	bls.n	8005fc2 <HAL_SD_WriteBlocks+0x1c6>
 8005fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d112      	bne.n	8005fe8 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a56      	ldr	r2, [pc, #344]	; (8006120 <HAL_SD_WriteBlocks+0x324>)
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e097      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d092      	beq.n	8005f1c <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006004:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d022      	beq.n	800605a <HAL_SD_WriteBlocks+0x25e>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d91f      	bls.n	800605a <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	2b03      	cmp	r3, #3
 8006020:	d01b      	beq.n	800605a <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f002 f8a2 	bl	8008170 <SDMMC_CmdStopTransfer>
 800602c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800602e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006030:	2b00      	cmp	r3, #0
 8006032:	d012      	beq.n	800605a <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a39      	ldr	r2, [pc, #228]	; (8006120 <HAL_SD_WriteBlocks+0x324>)
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006042:	431a      	orrs	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e05e      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d012      	beq.n	800608e <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <HAL_SD_WriteBlocks+0x324>)
 800606e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	f043 0208 	orr.w	r2, r3, #8
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e044      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d012      	beq.n	80060c2 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <HAL_SD_WriteBlocks+0x324>)
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	f043 0202 	orr.w	r2, r3, #2
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e02a      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a12      	ldr	r2, [pc, #72]	; (8006120 <HAL_SD_WriteBlocks+0x324>)
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	f043 0210 	orr.w	r2, r3, #16
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e010      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a0a      	ldr	r2, [pc, #40]	; (8006124 <HAL_SD_WriteBlocks+0x328>)
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e006      	b.n	8006118 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
  }
}
 8006118:	4618      	mov	r0, r3
 800611a:	3748      	adds	r7, #72	; 0x48
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	1fe00fff 	.word	0x1fe00fff
 8006124:	18000f3a 	.word	0x18000f3a

08006128 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006136:	0f9b      	lsrs	r3, r3, #30
 8006138:	b2da      	uxtb	r2, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006142:	0e9b      	lsrs	r3, r3, #26
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	b2da      	uxtb	r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006154:	0e1b      	lsrs	r3, r3, #24
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	b2da      	uxtb	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006166:	0c1b      	lsrs	r3, r3, #16
 8006168:	b2da      	uxtb	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	b2da      	uxtb	r2, r3
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617e:	b2da      	uxtb	r2, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006188:	0d1b      	lsrs	r3, r3, #20
 800618a:	b29a      	uxth	r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	b2da      	uxtb	r2, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a6:	0bdb      	lsrs	r3, r3, #15
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b8:	0b9b      	lsrs	r3, r3, #14
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ca:	0b5b      	lsrs	r3, r3, #13
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061dc:	0b1b      	lsrs	r3, r3, #12
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2200      	movs	r2, #0
 80061ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d163      	bne.n	80062c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fc:	009a      	lsls	r2, r3, #2
 80061fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006202:	4013      	ands	r3, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006208:	0f92      	lsrs	r2, r2, #30
 800620a:	431a      	orrs	r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006214:	0edb      	lsrs	r3, r3, #27
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	b2da      	uxtb	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006226:	0e1b      	lsrs	r3, r3, #24
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	b2da      	uxtb	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006238:	0d5b      	lsrs	r3, r3, #21
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	b2da      	uxtb	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624a:	0c9b      	lsrs	r3, r3, #18
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	b2da      	uxtb	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625c:	0bdb      	lsrs	r3, r3, #15
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	b2da      	uxtb	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	7e1b      	ldrb	r3, [r3, #24]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	3302      	adds	r3, #2
 8006280:	2201      	movs	r2, #1
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800628a:	fb03 f202 	mul.w	r2, r3, r2
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	7a1b      	ldrb	r3, [r3, #8]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	2201      	movs	r2, #1
 800629e:	409a      	lsls	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80062ac:	0a52      	lsrs	r2, r2, #9
 80062ae:	fb03 f202 	mul.w	r2, r3, r2
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062bc:	659a      	str	r2, [r3, #88]	; 0x58
 80062be:	e031      	b.n	8006324 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d11d      	bne.n	8006304 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062cc:	041b      	lsls	r3, r3, #16
 80062ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d6:	0c1b      	lsrs	r3, r3, #16
 80062d8:	431a      	orrs	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	3301      	adds	r3, #1
 80062e4:	029a      	lsls	r2, r3, #10
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	659a      	str	r2, [r3, #88]	; 0x58
 8006302:	e00f      	b.n	8006324 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a58      	ldr	r2, [pc, #352]	; (800646c <HAL_SD_GetCardCSD+0x344>)
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e09d      	b.n	8006460 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006328:	0b9b      	lsrs	r3, r3, #14
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	b2da      	uxtb	r2, r3
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800633a:	09db      	lsrs	r3, r3, #7
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006342:	b2da      	uxtb	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006352:	b2da      	uxtb	r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635c:	0fdb      	lsrs	r3, r3, #31
 800635e:	b2da      	uxtb	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006368:	0f5b      	lsrs	r3, r3, #29
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	b2da      	uxtb	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637a:	0e9b      	lsrs	r3, r3, #26
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	b2da      	uxtb	r2, r3
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638c:	0d9b      	lsrs	r3, r3, #22
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	b2da      	uxtb	r2, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639e:	0d5b      	lsrs	r3, r3, #21
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ba:	0c1b      	lsrs	r3, r3, #16
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ce:	0bdb      	lsrs	r3, r3, #15
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e2:	0b9b      	lsrs	r3, r3, #14
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f6:	0b5b      	lsrs	r3, r3, #13
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640a:	0b1b      	lsrs	r3, r3, #12
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800641e:	0a9b      	lsrs	r3, r3, #10
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	b2da      	uxtb	r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	b2da      	uxtb	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644e:	b2da      	uxtb	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	1fe00fff 	.word	0x1fe00fff

08006470 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b094      	sub	sp, #80	; 0x50
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006480:	f107 0308 	add.w	r3, r7, #8
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fbd4 	bl	8006c34 <SD_SendSDStatus>
 800648c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800648e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006490:	2b00      	cmp	r3, #0
 8006492:	d011      	beq.n	80064b8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a4f      	ldr	r2, [pc, #316]	; (80065d8 <HAL_SD_GetCardStatus+0x168>)
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80064b6:	e070      	b.n	800659a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	099b      	lsrs	r3, r3, #6
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	0e1b      	lsrs	r3, r3, #24
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	061a      	lsls	r2, r3, #24
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006508:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	0e1b      	lsrs	r3, r3, #24
 800650e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	b2da      	uxtb	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	0d1b      	lsrs	r3, r3, #20
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	b2da      	uxtb	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	0c1b      	lsrs	r3, r3, #16
 800653a:	b29b      	uxth	r3, r3
 800653c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006540:	b29a      	uxth	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	b29b      	uxth	r3, r3
 8006546:	b2db      	uxtb	r3, r3
 8006548:	b29b      	uxth	r3, r3
 800654a:	4313      	orrs	r3, r2
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	0a9b      	lsrs	r3, r3, #10
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800655c:	b2da      	uxtb	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	0a1b      	lsrs	r3, r3, #8
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	b2da      	uxtb	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	b2da      	uxtb	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	b2da      	uxtb	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	0e1b      	lsrs	r3, r3, #24
 8006594:	b2da      	uxtb	r2, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fd34 	bl	8008010 <SDMMC_CmdBlockLength>
 80065a8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80065aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00d      	beq.n	80065cc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <HAL_SD_GetCardStatus+0x168>)
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80065cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3750      	adds	r7, #80	; 0x50
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	1fe00fff 	.word	0x1fe00fff

080065dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006634:	b5b0      	push	{r4, r5, r7, lr}
 8006636:	b090      	sub	sp, #64	; 0x40
 8006638:	af04      	add	r7, sp, #16
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2203      	movs	r2, #3
 8006648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	2b03      	cmp	r3, #3
 8006652:	d02e      	beq.n	80066b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665a:	d106      	bne.n	800666a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
 8006668:	e029      	b.n	80066be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006670:	d10a      	bne.n	8006688 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fbd6 	bl	8006e24 <SD_WideBus_Enable>
 8006678:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
 8006686:	e01a      	b.n	80066be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fc13 	bl	8006eba <SD_WideBus_Disable>
 8006694:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
 80066a2:	e00c      	b.n	80066be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38
 80066b0:	e005      	b.n	80066be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a60      	ldr	r2, [pc, #384]	; (800684c <HAL_SD_ConfigWideBusOperation+0x218>)
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80066d4:	e097      	b.n	8006806 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80066d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80066da:	f7fd feb9 	bl	8004450 <HAL_RCCEx_GetPeriphCLKFreq>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8086 	beq.w	80067f4 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	4952      	ldr	r1, [pc, #328]	; (8006850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006706:	fba1 1303 	umull	r1, r3, r1, r3
 800670a:	0e1b      	lsrs	r3, r3, #24
 800670c:	429a      	cmp	r2, r3
 800670e:	d303      	bcc.n	8006718 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	61fb      	str	r3, [r7, #28]
 8006716:	e05a      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006720:	d103      	bne.n	800672a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	61fb      	str	r3, [r7, #28]
 8006728:	e051      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006732:	d126      	bne.n	8006782 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10e      	bne.n	800675a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	4a45      	ldr	r2, [pc, #276]	; (8006854 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d906      	bls.n	8006752 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	4a42      	ldr	r2, [pc, #264]	; (8006850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	0e5b      	lsrs	r3, r3, #25
 800674e:	61fb      	str	r3, [r7, #28]
 8006750:	e03d      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	e039      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006762:	fbb2 f3f3 	udiv	r3, r2, r3
 8006766:	4a3b      	ldr	r2, [pc, #236]	; (8006854 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d906      	bls.n	800677a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	4a38      	ldr	r2, [pc, #224]	; (8006850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	0e5b      	lsrs	r3, r3, #25
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e029      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	61fb      	str	r3, [r7, #28]
 8006780:	e025      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10e      	bne.n	80067a8 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	4a32      	ldr	r2, [pc, #200]	; (8006858 <HAL_SD_ConfigWideBusOperation+0x224>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d906      	bls.n	80067a0 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	4a2e      	ldr	r2, [pc, #184]	; (8006850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006796:	fba2 2303 	umull	r2, r3, r2, r3
 800679a:	0e1b      	lsrs	r3, r3, #24
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e016      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	e012      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b4:	4a28      	ldr	r2, [pc, #160]	; (8006858 <HAL_SD_ConfigWideBusOperation+0x224>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d906      	bls.n	80067c8 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	4a24      	ldr	r2, [pc, #144]	; (8006850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0e1b      	lsrs	r3, r3, #24
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	e002      	b.n	80067ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681d      	ldr	r5, [r3, #0]
 80067d8:	466c      	mov	r4, sp
 80067da:	f107 0318 	add.w	r3, r7, #24
 80067de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067ec:	4628      	mov	r0, r5
 80067ee:	f001 fb31 	bl	8007e54 <SDMMC_Init>
 80067f2:	e008      	b.n	8006806 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800680e:	4618      	mov	r0, r3
 8006810:	f001 fbfe 	bl	8008010 <SDMMC_CmdBlockLength>
 8006814:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00c      	beq.n	8006836 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0a      	ldr	r2, [pc, #40]	; (800684c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800683e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006842:	4618      	mov	r0, r3
 8006844:	3730      	adds	r7, #48	; 0x30
 8006846:	46bd      	mov	sp, r7
 8006848:	bdb0      	pop	{r4, r5, r7, pc}
 800684a:	bf00      	nop
 800684c:	1fe00fff 	.word	0x1fe00fff
 8006850:	55e63b89 	.word	0x55e63b89
 8006854:	02faf080 	.word	0x02faf080
 8006858:	017d7840 	.word	0x017d7840

0800685c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fab0 	bl	8006dd4 <SD_SendStatus>
 8006874:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	0a5b      	lsrs	r3, r3, #9
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006892:	693b      	ldr	r3, [r7, #16]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b090      	sub	sp, #64	; 0x40
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068a4:	2301      	movs	r3, #1
 80068a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fb2b 	bl	8007f08 <SDMMC_GetPowerState>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068bc:	e0a9      	b.n	8006a12 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d02e      	beq.n	8006924 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fd70 	bl	80083b0 <SDMMC_CmdSendCID>
 80068d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <SD_InitCard+0x40>
    {
      return errorstate;
 80068d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068da:	e09a      	b.n	8006a12 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2100      	movs	r1, #0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 fb55 	bl	8007f92 <SDMMC_GetResponse>
 80068e8:	4602      	mov	r2, r0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2104      	movs	r1, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 fb4c 	bl	8007f92 <SDMMC_GetResponse>
 80068fa:	4602      	mov	r2, r0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2108      	movs	r1, #8
 8006906:	4618      	mov	r0, r3
 8006908:	f001 fb43 	bl	8007f92 <SDMMC_GetResponse>
 800690c:	4602      	mov	r2, r0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	210c      	movs	r1, #12
 8006918:	4618      	mov	r0, r3
 800691a:	f001 fb3a 	bl	8007f92 <SDMMC_GetResponse>
 800691e:	4602      	mov	r2, r0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006928:	2b03      	cmp	r3, #3
 800692a:	d00d      	beq.n	8006948 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f107 020e 	add.w	r2, r7, #14
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f001 fd79 	bl	800842e <SDMMC_CmdSetRelAdd>
 800693c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800693e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <SD_InitCard+0xac>
    {
      return errorstate;
 8006944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006946:	e064      	b.n	8006a12 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	2b03      	cmp	r3, #3
 800694e:	d036      	beq.n	80069be <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006950:	89fb      	ldrh	r3, [r7, #14]
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f001 fd42 	bl	80083ee <SDMMC_CmdSendCSD>
 800696a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800696c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <SD_InitCard+0xda>
    {
      return errorstate;
 8006972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006974:	e04d      	b.n	8006a12 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2100      	movs	r1, #0
 800697c:	4618      	mov	r0, r3
 800697e:	f001 fb08 	bl	8007f92 <SDMMC_GetResponse>
 8006982:	4602      	mov	r2, r0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2104      	movs	r1, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f001 faff 	bl	8007f92 <SDMMC_GetResponse>
 8006994:	4602      	mov	r2, r0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2108      	movs	r1, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 faf6 	bl	8007f92 <SDMMC_GetResponse>
 80069a6:	4602      	mov	r2, r0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	210c      	movs	r1, #12
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 faed 	bl	8007f92 <SDMMC_GetResponse>
 80069b8:	4602      	mov	r2, r0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2104      	movs	r1, #4
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 fae4 	bl	8007f92 <SDMMC_GetResponse>
 80069ca:	4603      	mov	r3, r0
 80069cc:	0d1a      	lsrs	r2, r3, #20
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80069d2:	f107 0310 	add.w	r3, r7, #16
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff fba5 	bl	8006128 <HAL_SD_GetCardCSD>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069e8:	e013      	b.n	8006a12 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6819      	ldr	r1, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f2:	041b      	lsls	r3, r3, #16
 80069f4:	2200      	movs	r2, #0
 80069f6:	461c      	mov	r4, r3
 80069f8:	4615      	mov	r5, r2
 80069fa:	4622      	mov	r2, r4
 80069fc:	462b      	mov	r3, r5
 80069fe:	4608      	mov	r0, r1
 8006a00:	f001 fbec 	bl	80081dc <SDMMC_CmdSelDesel>
 8006a04:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <SD_InitCard+0x174>
  {
    return errorstate;
 8006a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0e:	e000      	b.n	8006a12 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3740      	adds	r7, #64	; 0x40
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006a30:	f7fa fc02 	bl	8001238 <HAL_GetTick>
 8006a34:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f001 fbf2 	bl	8008224 <SDMMC_CmdGoIdleState>
 8006a40:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <SD_PowerON+0x30>
  {
    return errorstate;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	e0ed      	b.n	8006c28 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fc05 	bl	8008260 <SDMMC_CmdOperCond>
 8006a56:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00d      	beq.n	8006a7a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 fbdb 	bl	8008224 <SDMMC_CmdGoIdleState>
 8006a6e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <SD_PowerON+0x64>
    {
      return errorstate;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	e0d6      	b.n	8006c28 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d137      	bne.n	8006af8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 fc06 	bl	80082a0 <SDMMC_CmdAppCommand>
 8006a94:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02d      	beq.n	8006af8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006aa0:	e0c2      	b.n	8006c28 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 fbf9 	bl	80082a0 <SDMMC_CmdAppCommand>
 8006aae:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <SD_PowerON+0x9e>
    {
      return errorstate;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	e0b6      	b.n	8006c28 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	495c      	ldr	r1, [pc, #368]	; (8006c30 <SD_PowerON+0x214>)
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f001 fc10 	bl	80082e6 <SDMMC_CmdAppOperCommand>
 8006ac6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ace:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ad2:	e0a9      	b.n	8006c28 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 fa59 	bl	8007f92 <SDMMC_GetResponse>
 8006ae0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	0fdb      	lsrs	r3, r3, #31
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <SD_PowerON+0xd2>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <SD_PowerON+0xd4>
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]

    count++;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3301      	adds	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d802      	bhi.n	8006b08 <SD_PowerON+0xec>
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0cc      	beq.n	8006aa2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d902      	bls.n	8006b18 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b16:	e087      	b.n	8006c28 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d07e      	beq.n	8006c20 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d17a      	bne.n	8006c26 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d075      	beq.n	8006c26 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b40:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0208 	orr.w	r2, r2, #8
 8006b50:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 fcd0 	bl	80084fc <SDMMC_CmdVoltageSwitch>
 8006b5c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00c      	beq.n	8006b7e <SD_PowerON+0x162>
        {
          return errorstate;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	e05f      	b.n	8006c28 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b68:	f7fa fb66 	bl	8001238 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b76:	d102      	bne.n	8006b7e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006b78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b7c:	e054      	b.n	8006c28 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b8c:	d1ec      	bne.n	8006b68 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ba6:	d002      	beq.n	8006bae <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bac:	e03c      	b.n	8006c28 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f000 fa9e 	bl	80070f0 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0204 	orr.w	r2, r2, #4
 8006bc2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006bc4:	e00a      	b.n	8006bdc <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bc6:	f7fa fb37 	bl	8001238 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd4:	d102      	bne.n	8006bdc <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006bd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bda:	e025      	b.n	8006c28 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bea:	d1ec      	bne.n	8006bc6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c04:	d102      	bne.n	8006c0c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c0a:	e00d      	b.n	8006c28 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2213      	movs	r2, #19
 8006c12:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006c1e:	e002      	b.n	8006c26 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	c1100000 	.word	0xc1100000

08006c34 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08c      	sub	sp, #48	; 0x30
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c3e:	f7fa fafb 	bl	8001238 <HAL_GetTick>
 8006c42:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f99f 	bl	8007f92 <SDMMC_GetResponse>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c5e:	d102      	bne.n	8006c66 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c64:	e0b0      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2140      	movs	r1, #64	; 0x40
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 f9cf 	bl	8008010 <SDMMC_CmdBlockLength>
 8006c72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	e0a0      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f001 fb04 	bl	80082a0 <SDMMC_CmdAppCommand>
 8006c98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	e08d      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006cb2:	2340      	movs	r3, #64	; 0x40
 8006cb4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006cb6:	2360      	movs	r3, #96	; 0x60
 8006cb8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f107 0208 	add.w	r2, r7, #8
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 f971 	bl	8007fb8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fbec 	bl	80084b8 <SDMMC_CmdStatusRegister>
 8006ce0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02b      	beq.n	8006d40 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	e069      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d013      	beq.n	8006d2a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d06:	e00d      	b.n	8006d24 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 f8cb 	bl	8007ea8 <SDMMC_ReadFIFO>
 8006d12:	4602      	mov	r2, r0
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	601a      	str	r2, [r3, #0]
        pData++;
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	3301      	adds	r3, #1
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2b07      	cmp	r3, #7
 8006d28:	d9ee      	bls.n	8006d08 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d2a:	f7fa fa85 	bl	8001238 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d38:	d102      	bne.n	8006d40 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d3e:	e043      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0d2      	beq.n	8006cf4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	e033      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e02a      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d017      	beq.n	8006db0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006d80:	2320      	movs	r3, #32
 8006d82:	e021      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 f88d 	bl	8007ea8 <SDMMC_ReadFIFO>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	601a      	str	r2, [r3, #0]
    pData++;
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	3304      	adds	r3, #4
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d9a:	f7fa fa4d 	bl	8001238 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006da8:	d102      	bne.n	8006db0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006daa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dae:	e00b      	b.n	8006dc8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e2      	bne.n	8006d84 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <SD_SendSDStatus+0x19c>)
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3730      	adds	r7, #48	; 0x30
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	18000f3a 	.word	0x18000f3a

08006dd4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d102      	bne.n	8006dea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006de8:	e018      	b.n	8006e1c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f001 fb3b 	bl	8008472 <SDMMC_CmdSendStatus>
 8006dfc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	e009      	b.n	8006e1c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 f8bf 	bl	8007f92 <SDMMC_GetResponse>
 8006e14:	4602      	mov	r2, r0
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 f8a9 	bl	8007f92 <SDMMC_GetResponse>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e4a:	d102      	bne.n	8006e52 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e50:	e02f      	b.n	8006eb2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e52:	f107 030c 	add.w	r3, r7, #12
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f879 	bl	8006f50 <SD_FindSCR>
 8006e5e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	e023      	b.n	8006eb2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01c      	beq.n	8006eae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f001 fa0d 	bl	80082a0 <SDMMC_CmdAppCommand>
 8006e86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	e00f      	b.n	8006eb2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2102      	movs	r1, #2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fa44 	bl	8008326 <SDMMC_CmdBusWidth>
 8006e9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	e003      	b.n	8006eb2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e001      	b.n	8006eb2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006eae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 f85e 	bl	8007f92 <SDMMC_GetResponse>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006edc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ee0:	d102      	bne.n	8006ee8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ee6:	e02f      	b.n	8006f48 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ee8:	f107 030c 	add.w	r3, r7, #12
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f82e 	bl	8006f50 <SD_FindSCR>
 8006ef4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	e023      	b.n	8006f48 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01c      	beq.n	8006f44 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f12:	041b      	lsls	r3, r3, #16
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f001 f9c2 	bl	80082a0 <SDMMC_CmdAppCommand>
 8006f1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	e00f      	b.n	8006f48 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 f9f9 	bl	8008326 <SDMMC_CmdBusWidth>
 8006f34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	e003      	b.n	8006f48 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e001      	b.n	8006f48 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08e      	sub	sp, #56	; 0x38
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f5a:	f7fa f96d 	bl	8001238 <HAL_GetTick>
 8006f5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006f64:	2300      	movs	r3, #0
 8006f66:	60bb      	str	r3, [r7, #8]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2108      	movs	r1, #8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 f84a 	bl	8008010 <SDMMC_CmdBlockLength>
 8006f7c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	e0ad      	b.n	80070e4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f90:	041b      	lsls	r3, r3, #16
 8006f92:	4619      	mov	r1, r3
 8006f94:	4610      	mov	r0, r2
 8006f96:	f001 f983 	bl	80082a0 <SDMMC_CmdAppCommand>
 8006f9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	e09e      	b.n	80070e4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006faa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006fac:	2308      	movs	r3, #8
 8006fae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006fb0:	2330      	movs	r3, #48	; 0x30
 8006fb2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f107 0210 	add.w	r2, r7, #16
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fff4 	bl	8007fb8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 f9c9 	bl	800836c <SDMMC_CmdSendSCR>
 8006fda:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d027      	beq.n	8007032 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	e07e      	b.n	80070e4 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d113      	bne.n	800701c <SD_FindSCR+0xcc>
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d110      	bne.n	800701c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 ff52 	bl	8007ea8 <SDMMC_ReadFIFO>
 8007004:	4603      	mov	r3, r0
 8007006:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f000 ff4b 	bl	8007ea8 <SDMMC_ReadFIFO>
 8007012:	4603      	mov	r3, r0
 8007014:	60fb      	str	r3, [r7, #12]
      index++;
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	3301      	adds	r3, #1
 800701a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800701c:	f7fa f90c 	bl	8001238 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702a:	d102      	bne.n	8007032 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800702c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007030:	e058      	b.n	80070e4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007038:	f240 532a 	movw	r3, #1322	; 0x52a
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0d1      	beq.n	8006fe6 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2208      	movs	r2, #8
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007058:	2308      	movs	r3, #8
 800705a:	e043      	b.n	80070e4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2202      	movs	r2, #2
 8007070:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007072:	2302      	movs	r3, #2
 8007074:	e036      	b.n	80070e4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2220      	movs	r2, #32
 800708a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800708c:	2320      	movs	r3, #32
 800708e:	e029      	b.n	80070e4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <SD_FindSCR+0x19c>)
 8007096:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	061a      	lsls	r2, r3, #24
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	0a1b      	lsrs	r3, r3, #8
 80070aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	0e1b      	lsrs	r3, r3, #24
 80070b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	601a      	str	r2, [r3, #0]
    scr++;
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	3304      	adds	r3, #4
 80070be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	061a      	lsls	r2, r3, #24
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	0e1b      	lsrs	r3, r3, #24
 80070dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3738      	adds	r7, #56	; 0x38
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	18000f3a 	.word	0x18000f3a

080070f0 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e095      	b.n	8007244 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	d108      	bne.n	8007132 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007128:	d009      	beq.n	800713e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	61da      	str	r2, [r3, #28]
 8007130:	e005      	b.n	800713e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7f9 feaf 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007174:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800717e:	d902      	bls.n	8007186 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	e002      	b.n	800718c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800718a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007194:	d007      	beq.n	80071a6 <HAL_SPI_Init+0xa0>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	431a      	orrs	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	431a      	orrs	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e8:	ea42 0103 	orr.w	r1, r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	f003 0204 	and.w	r2, r3, #4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	f003 0310 	and.w	r3, r3, #16
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007222:	ea42 0103 	orr.w	r1, r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e042      	b.n	80072e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007264:	2b00      	cmp	r3, #0
 8007266:	d106      	bne.n	8007276 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7f9 fe65 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2224      	movs	r2, #36	; 0x24
 800727a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0201 	bic.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f82c 	bl	80072ec <UART_SetConfig>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e022      	b.n	80072e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fb1c 	bl	80078e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fba3 	bl	8007a28 <UART_CheckIdleState>
 80072e2:	4603      	mov	r3, r0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f0:	b08c      	sub	sp, #48	; 0x30
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	431a      	orrs	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	431a      	orrs	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	4313      	orrs	r3, r2
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4baa      	ldr	r3, [pc, #680]	; (80075c4 <UART_SetConfig+0x2d8>)
 800731c:	4013      	ands	r3, r2
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007324:	430b      	orrs	r3, r1
 8007326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a9f      	ldr	r2, [pc, #636]	; (80075c8 <UART_SetConfig+0x2dc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007354:	4313      	orrs	r3, r2
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007362:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800736c:	430b      	orrs	r3, r1
 800736e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	f023 010f 	bic.w	r1, r3, #15
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a90      	ldr	r2, [pc, #576]	; (80075cc <UART_SetConfig+0x2e0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d125      	bne.n	80073dc <UART_SetConfig+0xf0>
 8007390:	4b8f      	ldr	r3, [pc, #572]	; (80075d0 <UART_SetConfig+0x2e4>)
 8007392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d81a      	bhi.n	80073d4 <UART_SetConfig+0xe8>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <UART_SetConfig+0xb8>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073c5 	.word	0x080073c5
 80073ac:	080073bd 	.word	0x080073bd
 80073b0:	080073cd 	.word	0x080073cd
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ba:	e116      	b.n	80075ea <UART_SetConfig+0x2fe>
 80073bc:	2302      	movs	r3, #2
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c2:	e112      	b.n	80075ea <UART_SetConfig+0x2fe>
 80073c4:	2304      	movs	r3, #4
 80073c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ca:	e10e      	b.n	80075ea <UART_SetConfig+0x2fe>
 80073cc:	2308      	movs	r3, #8
 80073ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073d2:	e10a      	b.n	80075ea <UART_SetConfig+0x2fe>
 80073d4:	2310      	movs	r3, #16
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073da:	e106      	b.n	80075ea <UART_SetConfig+0x2fe>
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a7c      	ldr	r2, [pc, #496]	; (80075d4 <UART_SetConfig+0x2e8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d138      	bne.n	8007458 <UART_SetConfig+0x16c>
 80073e6:	4b7a      	ldr	r3, [pc, #488]	; (80075d0 <UART_SetConfig+0x2e4>)
 80073e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ec:	f003 030c 	and.w	r3, r3, #12
 80073f0:	2b0c      	cmp	r3, #12
 80073f2:	d82d      	bhi.n	8007450 <UART_SetConfig+0x164>
 80073f4:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <UART_SetConfig+0x110>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007451 	.word	0x08007451
 8007404:	08007451 	.word	0x08007451
 8007408:	08007451 	.word	0x08007451
 800740c:	08007441 	.word	0x08007441
 8007410:	08007451 	.word	0x08007451
 8007414:	08007451 	.word	0x08007451
 8007418:	08007451 	.word	0x08007451
 800741c:	08007439 	.word	0x08007439
 8007420:	08007451 	.word	0x08007451
 8007424:	08007451 	.word	0x08007451
 8007428:	08007451 	.word	0x08007451
 800742c:	08007449 	.word	0x08007449
 8007430:	2300      	movs	r3, #0
 8007432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007436:	e0d8      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007438:	2302      	movs	r3, #2
 800743a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800743e:	e0d4      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007440:	2304      	movs	r3, #4
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007446:	e0d0      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007448:	2308      	movs	r3, #8
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e0cc      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007450:	2310      	movs	r3, #16
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e0c8      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a5e      	ldr	r2, [pc, #376]	; (80075d8 <UART_SetConfig+0x2ec>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d125      	bne.n	80074ae <UART_SetConfig+0x1c2>
 8007462:	4b5b      	ldr	r3, [pc, #364]	; (80075d0 <UART_SetConfig+0x2e4>)
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007468:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800746c:	2b30      	cmp	r3, #48	; 0x30
 800746e:	d016      	beq.n	800749e <UART_SetConfig+0x1b2>
 8007470:	2b30      	cmp	r3, #48	; 0x30
 8007472:	d818      	bhi.n	80074a6 <UART_SetConfig+0x1ba>
 8007474:	2b20      	cmp	r3, #32
 8007476:	d00a      	beq.n	800748e <UART_SetConfig+0x1a2>
 8007478:	2b20      	cmp	r3, #32
 800747a:	d814      	bhi.n	80074a6 <UART_SetConfig+0x1ba>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <UART_SetConfig+0x19a>
 8007480:	2b10      	cmp	r3, #16
 8007482:	d008      	beq.n	8007496 <UART_SetConfig+0x1aa>
 8007484:	e00f      	b.n	80074a6 <UART_SetConfig+0x1ba>
 8007486:	2300      	movs	r3, #0
 8007488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800748c:	e0ad      	b.n	80075ea <UART_SetConfig+0x2fe>
 800748e:	2302      	movs	r3, #2
 8007490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007494:	e0a9      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007496:	2304      	movs	r3, #4
 8007498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800749c:	e0a5      	b.n	80075ea <UART_SetConfig+0x2fe>
 800749e:	2308      	movs	r3, #8
 80074a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a4:	e0a1      	b.n	80075ea <UART_SetConfig+0x2fe>
 80074a6:	2310      	movs	r3, #16
 80074a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ac:	e09d      	b.n	80075ea <UART_SetConfig+0x2fe>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a4a      	ldr	r2, [pc, #296]	; (80075dc <UART_SetConfig+0x2f0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d125      	bne.n	8007504 <UART_SetConfig+0x218>
 80074b8:	4b45      	ldr	r3, [pc, #276]	; (80075d0 <UART_SetConfig+0x2e4>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074c2:	2bc0      	cmp	r3, #192	; 0xc0
 80074c4:	d016      	beq.n	80074f4 <UART_SetConfig+0x208>
 80074c6:	2bc0      	cmp	r3, #192	; 0xc0
 80074c8:	d818      	bhi.n	80074fc <UART_SetConfig+0x210>
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d00a      	beq.n	80074e4 <UART_SetConfig+0x1f8>
 80074ce:	2b80      	cmp	r3, #128	; 0x80
 80074d0:	d814      	bhi.n	80074fc <UART_SetConfig+0x210>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <UART_SetConfig+0x1f0>
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d008      	beq.n	80074ec <UART_SetConfig+0x200>
 80074da:	e00f      	b.n	80074fc <UART_SetConfig+0x210>
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e2:	e082      	b.n	80075ea <UART_SetConfig+0x2fe>
 80074e4:	2302      	movs	r3, #2
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ea:	e07e      	b.n	80075ea <UART_SetConfig+0x2fe>
 80074ec:	2304      	movs	r3, #4
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f2:	e07a      	b.n	80075ea <UART_SetConfig+0x2fe>
 80074f4:	2308      	movs	r3, #8
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074fa:	e076      	b.n	80075ea <UART_SetConfig+0x2fe>
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007502:	e072      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a35      	ldr	r2, [pc, #212]	; (80075e0 <UART_SetConfig+0x2f4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d12a      	bne.n	8007564 <UART_SetConfig+0x278>
 800750e:	4b30      	ldr	r3, [pc, #192]	; (80075d0 <UART_SetConfig+0x2e4>)
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800751c:	d01a      	beq.n	8007554 <UART_SetConfig+0x268>
 800751e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007522:	d81b      	bhi.n	800755c <UART_SetConfig+0x270>
 8007524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007528:	d00c      	beq.n	8007544 <UART_SetConfig+0x258>
 800752a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752e:	d815      	bhi.n	800755c <UART_SetConfig+0x270>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <UART_SetConfig+0x250>
 8007534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007538:	d008      	beq.n	800754c <UART_SetConfig+0x260>
 800753a:	e00f      	b.n	800755c <UART_SetConfig+0x270>
 800753c:	2300      	movs	r3, #0
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007542:	e052      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007544:	2302      	movs	r3, #2
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800754a:	e04e      	b.n	80075ea <UART_SetConfig+0x2fe>
 800754c:	2304      	movs	r3, #4
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007552:	e04a      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007554:	2308      	movs	r3, #8
 8007556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800755a:	e046      	b.n	80075ea <UART_SetConfig+0x2fe>
 800755c:	2310      	movs	r3, #16
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007562:	e042      	b.n	80075ea <UART_SetConfig+0x2fe>
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <UART_SetConfig+0x2dc>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d13a      	bne.n	80075e4 <UART_SetConfig+0x2f8>
 800756e:	4b18      	ldr	r3, [pc, #96]	; (80075d0 <UART_SetConfig+0x2e4>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800757c:	d01a      	beq.n	80075b4 <UART_SetConfig+0x2c8>
 800757e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007582:	d81b      	bhi.n	80075bc <UART_SetConfig+0x2d0>
 8007584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007588:	d00c      	beq.n	80075a4 <UART_SetConfig+0x2b8>
 800758a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800758e:	d815      	bhi.n	80075bc <UART_SetConfig+0x2d0>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <UART_SetConfig+0x2b0>
 8007594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007598:	d008      	beq.n	80075ac <UART_SetConfig+0x2c0>
 800759a:	e00f      	b.n	80075bc <UART_SetConfig+0x2d0>
 800759c:	2300      	movs	r3, #0
 800759e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075a2:	e022      	b.n	80075ea <UART_SetConfig+0x2fe>
 80075a4:	2302      	movs	r3, #2
 80075a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075aa:	e01e      	b.n	80075ea <UART_SetConfig+0x2fe>
 80075ac:	2304      	movs	r3, #4
 80075ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075b2:	e01a      	b.n	80075ea <UART_SetConfig+0x2fe>
 80075b4:	2308      	movs	r3, #8
 80075b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ba:	e016      	b.n	80075ea <UART_SetConfig+0x2fe>
 80075bc:	2310      	movs	r3, #16
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075c2:	e012      	b.n	80075ea <UART_SetConfig+0x2fe>
 80075c4:	cfff69f3 	.word	0xcfff69f3
 80075c8:	40008000 	.word	0x40008000
 80075cc:	40013800 	.word	0x40013800
 80075d0:	40021000 	.word	0x40021000
 80075d4:	40004400 	.word	0x40004400
 80075d8:	40004800 	.word	0x40004800
 80075dc:	40004c00 	.word	0x40004c00
 80075e0:	40005000 	.word	0x40005000
 80075e4:	2310      	movs	r3, #16
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4aae      	ldr	r2, [pc, #696]	; (80078a8 <UART_SetConfig+0x5bc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	f040 8097 	bne.w	8007724 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d823      	bhi.n	8007646 <UART_SetConfig+0x35a>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <UART_SetConfig+0x318>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007629 	.word	0x08007629
 8007608:	08007647 	.word	0x08007647
 800760c:	08007631 	.word	0x08007631
 8007610:	08007647 	.word	0x08007647
 8007614:	08007637 	.word	0x08007637
 8007618:	08007647 	.word	0x08007647
 800761c:	08007647 	.word	0x08007647
 8007620:	08007647 	.word	0x08007647
 8007624:	0800763f 	.word	0x0800763f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007628:	f7fc faca 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 800762c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800762e:	e010      	b.n	8007652 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007630:	4b9e      	ldr	r3, [pc, #632]	; (80078ac <UART_SetConfig+0x5c0>)
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007634:	e00d      	b.n	8007652 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007636:	f7fc fa2b 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 800763a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800763c:	e009      	b.n	8007652 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800763e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007644:	e005      	b.n	8007652 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007650:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 8130 	beq.w	80078ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	4a94      	ldr	r2, [pc, #592]	; (80078b0 <UART_SetConfig+0x5c4>)
 8007660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007664:	461a      	mov	r2, r3
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	fbb3 f3f2 	udiv	r3, r3, r2
 800766c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	4413      	add	r3, r2
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	429a      	cmp	r2, r3
 800767c:	d305      	bcc.n	800768a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	429a      	cmp	r2, r3
 8007688:	d903      	bls.n	8007692 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007690:	e113      	b.n	80078ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	2200      	movs	r2, #0
 8007696:	60bb      	str	r3, [r7, #8]
 8007698:	60fa      	str	r2, [r7, #12]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	4a84      	ldr	r2, [pc, #528]	; (80078b0 <UART_SetConfig+0x5c4>)
 80076a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2200      	movs	r2, #0
 80076a8:	603b      	str	r3, [r7, #0]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076b4:	f7f8 fdaa 	bl	800020c <__aeabi_uldivmod>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4610      	mov	r0, r2
 80076be:	4619      	mov	r1, r3
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	020b      	lsls	r3, r1, #8
 80076ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076ce:	0202      	lsls	r2, r0, #8
 80076d0:	6979      	ldr	r1, [r7, #20]
 80076d2:	6849      	ldr	r1, [r1, #4]
 80076d4:	0849      	lsrs	r1, r1, #1
 80076d6:	2000      	movs	r0, #0
 80076d8:	460c      	mov	r4, r1
 80076da:	4605      	mov	r5, r0
 80076dc:	eb12 0804 	adds.w	r8, r2, r4
 80076e0:	eb43 0905 	adc.w	r9, r3, r5
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	469a      	mov	sl, r3
 80076ec:	4693      	mov	fp, r2
 80076ee:	4652      	mov	r2, sl
 80076f0:	465b      	mov	r3, fp
 80076f2:	4640      	mov	r0, r8
 80076f4:	4649      	mov	r1, r9
 80076f6:	f7f8 fd89 	bl	800020c <__aeabi_uldivmod>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4613      	mov	r3, r2
 8007700:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007708:	d308      	bcc.n	800771c <UART_SetConfig+0x430>
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007710:	d204      	bcs.n	800771c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6a3a      	ldr	r2, [r7, #32]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	e0ce      	b.n	80078ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007722:	e0ca      	b.n	80078ba <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772c:	d166      	bne.n	80077fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800772e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007732:	2b08      	cmp	r3, #8
 8007734:	d827      	bhi.n	8007786 <UART_SetConfig+0x49a>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0x450>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	08007761 	.word	0x08007761
 8007740:	08007769 	.word	0x08007769
 8007744:	08007771 	.word	0x08007771
 8007748:	08007787 	.word	0x08007787
 800774c:	08007777 	.word	0x08007777
 8007750:	08007787 	.word	0x08007787
 8007754:	08007787 	.word	0x08007787
 8007758:	08007787 	.word	0x08007787
 800775c:	0800777f 	.word	0x0800777f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007760:	f7fc fa2e 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8007764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007766:	e014      	b.n	8007792 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007768:	f7fc fa40 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 800776c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800776e:	e010      	b.n	8007792 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007770:	4b4e      	ldr	r3, [pc, #312]	; (80078ac <UART_SetConfig+0x5c0>)
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007774:	e00d      	b.n	8007792 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007776:	f7fc f98b 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 800777a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800777c:	e009      	b.n	8007792 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800777e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007784:	e005      	b.n	8007792 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8090 	beq.w	80078ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	4a44      	ldr	r2, [pc, #272]	; (80078b0 <UART_SetConfig+0x5c4>)
 80077a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077ac:	005a      	lsls	r2, r3, #1
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	441a      	add	r2, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d916      	bls.n	80077f4 <UART_SetConfig+0x508>
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077cc:	d212      	bcs.n	80077f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f023 030f 	bic.w	r3, r3, #15
 80077d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	8bfb      	ldrh	r3, [r7, #30]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	8bfa      	ldrh	r2, [r7, #30]
 80077f0:	60da      	str	r2, [r3, #12]
 80077f2:	e062      	b.n	80078ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077fa:	e05e      	b.n	80078ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007800:	2b08      	cmp	r3, #8
 8007802:	d828      	bhi.n	8007856 <UART_SetConfig+0x56a>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0x520>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007831 	.word	0x08007831
 8007810:	08007839 	.word	0x08007839
 8007814:	08007841 	.word	0x08007841
 8007818:	08007857 	.word	0x08007857
 800781c:	08007847 	.word	0x08007847
 8007820:	08007857 	.word	0x08007857
 8007824:	08007857 	.word	0x08007857
 8007828:	08007857 	.word	0x08007857
 800782c:	0800784f 	.word	0x0800784f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007830:	f7fc f9c6 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8007834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007836:	e014      	b.n	8007862 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007838:	f7fc f9d8 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 800783c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800783e:	e010      	b.n	8007862 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007840:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <UART_SetConfig+0x5c0>)
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007844:	e00d      	b.n	8007862 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007846:	f7fc f923 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 800784a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800784c:	e009      	b.n	8007862 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007854:	e005      	b.n	8007862 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007860:	bf00      	nop
    }

    if (pclk != 0U)
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	d028      	beq.n	80078ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	4a10      	ldr	r2, [pc, #64]	; (80078b0 <UART_SetConfig+0x5c4>)
 800786e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007872:	461a      	mov	r2, r3
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	fbb3 f2f2 	udiv	r2, r3, r2
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	441a      	add	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	fbb2 f3f3 	udiv	r3, r2, r3
 800788a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	2b0f      	cmp	r3, #15
 8007890:	d910      	bls.n	80078b4 <UART_SetConfig+0x5c8>
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007898:	d20c      	bcs.n	80078b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	b29a      	uxth	r2, r3
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60da      	str	r2, [r3, #12]
 80078a4:	e009      	b.n	80078ba <UART_SetConfig+0x5ce>
 80078a6:	bf00      	nop
 80078a8:	40008000 	.word	0x40008000
 80078ac:	00f42400 	.word	0x00f42400
 80078b0:	0800f9a4 	.word	0x0800f9a4
      }
      else
      {
        ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2201      	movs	r2, #1
 80078be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2200      	movs	r2, #0
 80078ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2200      	movs	r2, #0
 80078d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80078d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3730      	adds	r7, #48	; 0x30
 80078de:	46bd      	mov	sp, r7
 80078e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	f003 0308 	and.w	r3, r3, #8
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01a      	beq.n	80079fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079e2:	d10a      	bne.n	80079fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a38:	f7f9 fbfe 	bl	8001238 <HAL_GetTick>
 8007a3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d10e      	bne.n	8007a6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f82f 	bl	8007abe <UART_WaitOnFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e025      	b.n	8007ab6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d10e      	bne.n	8007a96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f819 	bl	8007abe <UART_WaitOnFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e00f      	b.n	8007ab6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b09c      	sub	sp, #112	; 0x70
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	603b      	str	r3, [r7, #0]
 8007aca:	4613      	mov	r3, r2
 8007acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ace:	e0a9      	b.n	8007c24 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad6:	f000 80a5 	beq.w	8007c24 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ada:	f7f9 fbad 	bl	8001238 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d302      	bcc.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d140      	bne.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b04:	667b      	str	r3, [r7, #100]	; 0x64
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e6      	bne.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	f023 0301 	bic.w	r3, r3, #1
 8007b38:	663b      	str	r3, [r7, #96]	; 0x60
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b42:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e5      	bne.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e069      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d051      	beq.n	8007c24 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8e:	d149      	bne.n	8007c24 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e6      	bne.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	613b      	str	r3, [r7, #16]
   return(result);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3308      	adds	r3, #8
 8007bea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bec:	623a      	str	r2, [r7, #32]
 8007bee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	69f9      	ldr	r1, [r7, #28]
 8007bf2:	6a3a      	ldr	r2, [r7, #32]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e5      	bne.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e010      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	69da      	ldr	r2, [r3, #28]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	bf0c      	ite	eq
 8007c34:	2301      	moveq	r3, #1
 8007c36:	2300      	movne	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	f43f af46 	beq.w	8007ad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3770      	adds	r7, #112	; 0x70
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e027      	b.n	8007cb4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2224      	movs	r2, #36	; 0x24
 8007c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0201 	bic.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e02d      	b.n	8007d34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2224      	movs	r2, #36	; 0x24
 8007ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f84f 	bl	8007db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d50:	2302      	movs	r3, #2
 8007d52:	e02d      	b.n	8007db0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2224      	movs	r2, #36	; 0x24
 8007d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0201 	bic.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f811 	bl	8007db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d108      	bne.n	8007dda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007dd8:	e031      	b.n	8007e3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dda:	2308      	movs	r3, #8
 8007ddc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dde:	2308      	movs	r3, #8
 8007de0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	0e5b      	lsrs	r3, r3, #25
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	0f5b      	lsrs	r3, r3, #29
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	7b3a      	ldrb	r2, [r7, #12]
 8007e06:	4911      	ldr	r1, [pc, #68]	; (8007e4c <UARTEx_SetNbDataToProcess+0x94>)
 8007e08:	5c8a      	ldrb	r2, [r1, r2]
 8007e0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e0e:	7b3a      	ldrb	r2, [r7, #12]
 8007e10:	490f      	ldr	r1, [pc, #60]	; (8007e50 <UARTEx_SetNbDataToProcess+0x98>)
 8007e12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e14:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	7b7a      	ldrb	r2, [r7, #13]
 8007e24:	4909      	ldr	r1, [pc, #36]	; (8007e4c <UARTEx_SetNbDataToProcess+0x94>)
 8007e26:	5c8a      	ldrb	r2, [r1, r2]
 8007e28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e2c:	7b7a      	ldrb	r2, [r7, #13]
 8007e2e:	4908      	ldr	r1, [pc, #32]	; (8007e50 <UARTEx_SetNbDataToProcess+0x98>)
 8007e30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e32:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	0800f9bc 	.word	0x0800f9bc
 8007e50:	0800f9c4 	.word	0x0800f9c4

08007e54 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007e54:	b084      	sub	sp, #16
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	f107 001c 	add.w	r0, r7, #28
 8007e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007e6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007e6e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8007e72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8007e76:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8007e7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <SDMMC_Init+0x50>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	b004      	add	sp, #16
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	ffc02c00 	.word	0xffc02c00

08007ea8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f043 0203 	orr.w	r2, r3, #3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007ef8:	2002      	movs	r0, #2
 8007efa:	f7f9 f9a9 	bl	8001250 <HAL_Delay>

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0303 	and.w	r3, r3, #3
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f42:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007f48:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007f4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <SDMMC_SendCommand+0x50>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	431a      	orrs	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	fffee0c0 	.word	0xfffee0c0

08007f78 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	b2db      	uxtb	r3, r3
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007fde:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007fe4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007fea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008002:	2300      	movs	r3, #0

}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800801e:	2310      	movs	r3, #16
 8008020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800802c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008030:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008032:	f107 0308 	add.w	r3, r7, #8
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff ff73 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800803e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008042:	2110      	movs	r1, #16
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fa7b 	bl	8008540 <SDMMC_GetCmdResp1>
 800804a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800804c:	69fb      	ldr	r3, [r7, #28]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b088      	sub	sp, #32
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008064:	2311      	movs	r3, #17
 8008066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800806c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008076:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008078:	f107 0308 	add.w	r3, r7, #8
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff ff50 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008084:	f241 3288 	movw	r2, #5000	; 0x1388
 8008088:	2111      	movs	r1, #17
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa58 	bl	8008540 <SDMMC_GetCmdResp1>
 8008090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008092:	69fb      	ldr	r3, [r7, #28]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3720      	adds	r7, #32
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80080aa:	2312      	movs	r3, #18
 80080ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff ff2d 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80080ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ce:	2112      	movs	r1, #18
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fa35 	bl	8008540 <SDMMC_GetCmdResp1>
 80080d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080d8:	69fb      	ldr	r3, [r7, #28]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b088      	sub	sp, #32
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80080f0:	2318      	movs	r3, #24
 80080f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008104:	f107 0308 	add.w	r3, r7, #8
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff ff0a 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008110:	f241 3288 	movw	r2, #5000	; 0x1388
 8008114:	2118      	movs	r1, #24
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa12 	bl	8008540 <SDMMC_GetCmdResp1>
 800811c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800811e:	69fb      	ldr	r3, [r7, #28]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3720      	adds	r7, #32
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008136:	2319      	movs	r3, #25
 8008138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800813a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800813e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008140:	2300      	movs	r3, #0
 8008142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008148:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800814a:	f107 0308 	add.w	r3, r7, #8
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fee7 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008156:	f241 3288 	movw	r2, #5000	; 0x1388
 800815a:	2119      	movs	r1, #25
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f9ef 	bl	8008540 <SDMMC_GetCmdResp1>
 8008162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008164:	69fb      	ldr	r3, [r7, #28]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3720      	adds	r7, #32
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800817c:	230c      	movs	r3, #12
 800817e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800818a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800818e:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081a8:	f107 0308 	add.w	r3, r7, #8
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff feb8 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80081b4:	4a08      	ldr	r2, [pc, #32]	; (80081d8 <SDMMC_CmdStopTransfer+0x68>)
 80081b6:	210c      	movs	r1, #12
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f9c1 	bl	8008540 <SDMMC_GetCmdResp1>
 80081be:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80081cc:	69fb      	ldr	r3, [r7, #28]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3720      	adds	r7, #32
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	05f5e100 	.word	0x05f5e100

080081dc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	; 0x28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80081ec:	2307      	movs	r3, #7
 80081ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081f4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081f6:	2300      	movs	r3, #0
 80081f8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081fe:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008200:	f107 0310 	add.w	r3, r7, #16
 8008204:	4619      	mov	r1, r3
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7ff fe8c 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800820c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008210:	2107      	movs	r1, #7
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 f994 	bl	8008540 <SDMMC_GetCmdResp1>
 8008218:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800821c:	4618      	mov	r0, r3
 800821e:	3728      	adds	r7, #40	; 0x28
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008234:	2300      	movs	r3, #0
 8008236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800823c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008240:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008242:	f107 0308 	add.w	r3, r7, #8
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fe6b 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fbb8 	bl	80089c4 <SDMMC_GetCmdError>
 8008254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008256:	69fb      	ldr	r3, [r7, #28]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008268:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800826c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800826e:	2308      	movs	r3, #8
 8008270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800827c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008282:	f107 0308 	add.w	r3, r7, #8
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fe4b 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fb4a 	bl	8008928 <SDMMC_GetCmdResp7>
 8008294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008296:	69fb      	ldr	r3, [r7, #28]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80082ae:	2337      	movs	r3, #55	; 0x37
 80082b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082c2:	f107 0308 	add.w	r3, r7, #8
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fe2b 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80082ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d2:	2137      	movs	r1, #55	; 0x37
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f933 	bl	8008540 <SDMMC_GetCmdResp1>
 80082da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082dc:	69fb      	ldr	r3, [r7, #28]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b088      	sub	sp, #32
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80082f4:	2329      	movs	r3, #41	; 0x29
 80082f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008308:	f107 0308 	add.w	r3, r7, #8
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff fe08 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fa4f 	bl	80087b8 <SDMMC_GetCmdResp3>
 800831a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800831c:	69fb      	ldr	r3, [r7, #28]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3720      	adds	r7, #32
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b088      	sub	sp, #32
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008334:	2306      	movs	r3, #6
 8008336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800833c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008346:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008348:	f107 0308 	add.w	r3, r7, #8
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fde8 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008354:	f241 3288 	movw	r2, #5000	; 0x1388
 8008358:	2106      	movs	r1, #6
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f8f0 	bl	8008540 <SDMMC_GetCmdResp1>
 8008360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008362:	69fb      	ldr	r3, [r7, #28]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008378:	2333      	movs	r3, #51	; 0x33
 800837a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800837c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800838a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800838c:	f107 0308 	add.w	r3, r7, #8
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fdc6 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008398:	f241 3288 	movw	r2, #5000	; 0x1388
 800839c:	2133      	movs	r1, #51	; 0x33
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8ce 	bl	8008540 <SDMMC_GetCmdResp1>
 80083a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083a6:	69fb      	ldr	r3, [r7, #28]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80083bc:	2302      	movs	r3, #2
 80083be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80083c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80083c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083c6:	2300      	movs	r3, #0
 80083c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083d0:	f107 0308 	add.w	r3, r7, #8
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff fda4 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f9a1 	bl	8008724 <SDMMC_GetCmdResp2>
 80083e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083e4:	69fb      	ldr	r3, [r7, #28]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3720      	adds	r7, #32
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b088      	sub	sp, #32
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80083fc:	2309      	movs	r3, #9
 80083fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008400:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800840a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800840e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008410:	f107 0308 	add.w	r3, r7, #8
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff fd84 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f981 	bl	8008724 <SDMMC_GetCmdResp2>
 8008422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008424:	69fb      	ldr	r3, [r7, #28]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3720      	adds	r7, #32
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b088      	sub	sp, #32
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800843c:	2303      	movs	r3, #3
 800843e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800844a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800844e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008450:	f107 0308 	add.w	r3, r7, #8
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff fd64 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	2103      	movs	r1, #3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f9e9 	bl	8008838 <SDMMC_GetCmdResp6>
 8008466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008468:	69fb      	ldr	r3, [r7, #28]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b088      	sub	sp, #32
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008480:	230d      	movs	r3, #13
 8008482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800848e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008492:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008494:	f107 0308 	add.w	r3, r7, #8
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff fd42 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80084a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a4:	210d      	movs	r1, #13
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f84a 	bl	8008540 <SDMMC_GetCmdResp1>
 80084ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084ae:	69fb      	ldr	r3, [r7, #28]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3720      	adds	r7, #32
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80084c4:	230d      	movs	r3, #13
 80084c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084ce:	2300      	movs	r3, #0
 80084d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084d8:	f107 0308 	add.w	r3, r7, #8
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff fd20 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80084e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e8:	210d      	movs	r1, #13
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f828 	bl	8008540 <SDMMC_GetCmdResp1>
 80084f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084f2:	69fb      	ldr	r3, [r7, #28]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008504:	2300      	movs	r3, #0
 8008506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008508:	230b      	movs	r3, #11
 800850a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800850c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008512:	2300      	movs	r3, #0
 8008514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800851a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800851c:	f107 0308 	add.w	r3, r7, #8
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff fcfe 	bl	8007f24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008528:	f241 3288 	movw	r2, #5000	; 0x1388
 800852c:	210b      	movs	r1, #11
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f806 	bl	8008540 <SDMMC_GetCmdResp1>
 8008534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008536:	69fb      	ldr	r3, [r7, #28]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3720      	adds	r7, #32
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	460b      	mov	r3, r1
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800854e:	4b70      	ldr	r3, [pc, #448]	; (8008710 <SDMMC_GetCmdResp1+0x1d0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a70      	ldr	r2, [pc, #448]	; (8008714 <SDMMC_GetCmdResp1+0x1d4>)
 8008554:	fba2 2303 	umull	r2, r3, r2, r3
 8008558:	0a5a      	lsrs	r2, r3, #9
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	fb02 f303 	mul.w	r3, r2, r3
 8008560:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	1e5a      	subs	r2, r3, #1
 8008566:	61fa      	str	r2, [r7, #28]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800856c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008570:	e0c9      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	4b67      	ldr	r3, [pc, #412]	; (8008718 <SDMMC_GetCmdResp1+0x1d8>)
 800857c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0ef      	beq.n	8008562 <SDMMC_GetCmdResp1+0x22>
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1ea      	bne.n	8008562 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d004      	beq.n	80085a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2204      	movs	r2, #4
 800859c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800859e:	2304      	movs	r3, #4
 80085a0:	e0b1      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d004      	beq.n	80085b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e0a6      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4a58      	ldr	r2, [pc, #352]	; (800871c <SDMMC_GetCmdResp1+0x1dc>)
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fcda 	bl	8007f78 <SDMMC_GetCommandResponse>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d001      	beq.n	80085d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e099      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80085d2:	2100      	movs	r1, #0
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fcdc 	bl	8007f92 <SDMMC_GetResponse>
 80085da:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4b50      	ldr	r3, [pc, #320]	; (8008720 <SDMMC_GetCmdResp1+0x1e0>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80085e6:	2300      	movs	r3, #0
 80085e8:	e08d      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	da02      	bge.n	80085f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80085f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085f4:	e087      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008600:	2340      	movs	r3, #64	; 0x40
 8008602:	e080      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800860e:	2380      	movs	r3, #128	; 0x80
 8008610:	e079      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800861c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008620:	e071      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800862c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008630:	e069      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800863c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008640:	e061      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800864c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008650:	e059      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800865c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008660:	e051      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800866c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008670:	e049      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800867c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008680:	e041      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800868c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008690:	e039      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800869c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086a0:	e031      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80086ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80086b0:	e029      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80086bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80086c0:	e021      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80086cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086d0:	e019      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80086dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086e0:	e011      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80086ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80086f0:	e009      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80086fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008700:	e001      	b.n	8008706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	3720      	adds	r7, #32
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000000 	.word	0x20000000
 8008714:	10624dd3 	.word	0x10624dd3
 8008718:	00200045 	.word	0x00200045
 800871c:	002000c5 	.word	0x002000c5
 8008720:	fdffe008 	.word	0xfdffe008

08008724 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800872c:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <SDMMC_GetCmdResp2+0x88>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <SDMMC_GetCmdResp2+0x8c>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	0a5b      	lsrs	r3, r3, #9
 8008738:	f241 3288 	movw	r2, #5000	; 0x1388
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1e5a      	subs	r2, r3, #1
 8008746:	60fa      	str	r2, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800874c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008750:	e026      	b.n	80087a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008756:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0ef      	beq.n	8008742 <SDMMC_GetCmdResp2+0x1e>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1ea      	bne.n	8008742 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b00      	cmp	r3, #0
 8008776:	d004      	beq.n	8008782 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2204      	movs	r2, #4
 800877c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800877e:	2304      	movs	r3, #4
 8008780:	e00e      	b.n	80087a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d004      	beq.n	8008798 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008794:	2301      	movs	r3, #1
 8008796:	e003      	b.n	80087a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a06      	ldr	r2, [pc, #24]	; (80087b4 <SDMMC_GetCmdResp2+0x90>)
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	20000000 	.word	0x20000000
 80087b0:	10624dd3 	.word	0x10624dd3
 80087b4:	002000c5 	.word	0x002000c5

080087b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087c0:	4b1a      	ldr	r3, [pc, #104]	; (800882c <SDMMC_GetCmdResp3+0x74>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a1a      	ldr	r2, [pc, #104]	; (8008830 <SDMMC_GetCmdResp3+0x78>)
 80087c6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ca:	0a5b      	lsrs	r3, r3, #9
 80087cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d0:	fb02 f303 	mul.w	r3, r2, r3
 80087d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	1e5a      	subs	r2, r3, #1
 80087da:	60fa      	str	r2, [r7, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d102      	bne.n	80087e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087e4:	e01b      	b.n	800881e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0ef      	beq.n	80087d6 <SDMMC_GetCmdResp3+0x1e>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1ea      	bne.n	80087d6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008804:	f003 0304 	and.w	r3, r3, #4
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2204      	movs	r2, #4
 8008810:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008812:	2304      	movs	r3, #4
 8008814:	e003      	b.n	800881e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a06      	ldr	r2, [pc, #24]	; (8008834 <SDMMC_GetCmdResp3+0x7c>)
 800881a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	20000000 	.word	0x20000000
 8008830:	10624dd3 	.word	0x10624dd3
 8008834:	002000c5 	.word	0x002000c5

08008838 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	460b      	mov	r3, r1
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008846:	4b35      	ldr	r3, [pc, #212]	; (800891c <SDMMC_GetCmdResp6+0xe4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a35      	ldr	r2, [pc, #212]	; (8008920 <SDMMC_GetCmdResp6+0xe8>)
 800884c:	fba2 2303 	umull	r2, r3, r2, r3
 8008850:	0a5b      	lsrs	r3, r3, #9
 8008852:	f241 3288 	movw	r2, #5000	; 0x1388
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	1e5a      	subs	r2, r3, #1
 8008860:	61fa      	str	r2, [r7, #28]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d102      	bne.n	800886c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800886a:	e052      	b.n	8008912 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008870:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0ef      	beq.n	800885c <SDMMC_GetCmdResp6+0x24>
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1ea      	bne.n	800885c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d004      	beq.n	800889c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2204      	movs	r2, #4
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008898:	2304      	movs	r3, #4
 800889a:	e03a      	b.n	8008912 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d004      	beq.n	80088b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e02f      	b.n	8008912 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff fb60 	bl	8007f78 <SDMMC_GetCommandResponse>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	4293      	cmp	r3, r2
 80088c0:	d001      	beq.n	80088c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e025      	b.n	8008912 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4a16      	ldr	r2, [pc, #88]	; (8008924 <SDMMC_GetCmdResp6+0xec>)
 80088ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80088cc:	2100      	movs	r1, #0
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff fb5f 	bl	8007f92 <SDMMC_GetResponse>
 80088d4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	0c1b      	lsrs	r3, r3, #16
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80088ea:	2300      	movs	r3, #0
 80088ec:	e011      	b.n	8008912 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80088f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088fc:	e009      	b.n	8008912 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800890c:	e001      	b.n	8008912 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800890e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000000 	.word	0x20000000
 8008920:	10624dd3 	.word	0x10624dd3
 8008924:	002000c5 	.word	0x002000c5

08008928 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008930:	4b22      	ldr	r3, [pc, #136]	; (80089bc <SDMMC_GetCmdResp7+0x94>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a22      	ldr	r2, [pc, #136]	; (80089c0 <SDMMC_GetCmdResp7+0x98>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	0a5b      	lsrs	r3, r3, #9
 800893c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008940:	fb02 f303 	mul.w	r3, r2, r3
 8008944:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	1e5a      	subs	r2, r3, #1
 800894a:	60fa      	str	r2, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008950:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008954:	e02c      	b.n	80089b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0ef      	beq.n	8008946 <SDMMC_GetCmdResp7+0x1e>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1ea      	bne.n	8008946 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d004      	beq.n	8008986 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2204      	movs	r2, #4
 8008980:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008982:	2304      	movs	r3, #4
 8008984:	e014      	b.n	80089b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008998:	2301      	movs	r3, #1
 800899a:	e009      	b.n	80089b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2240      	movs	r2, #64	; 0x40
 80089ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80089ae:	2300      	movs	r3, #0

}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	20000000 	.word	0x20000000
 80089c0:	10624dd3 	.word	0x10624dd3

080089c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089cc:	4b11      	ldr	r3, [pc, #68]	; (8008a14 <SDMMC_GetCmdError+0x50>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a11      	ldr	r2, [pc, #68]	; (8008a18 <SDMMC_GetCmdError+0x54>)
 80089d2:	fba2 2303 	umull	r2, r3, r2, r3
 80089d6:	0a5b      	lsrs	r3, r3, #9
 80089d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089dc:	fb02 f303 	mul.w	r3, r2, r3
 80089e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	1e5a      	subs	r2, r3, #1
 80089e6:	60fa      	str	r2, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089f0:	e009      	b.n	8008a06 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0f1      	beq.n	80089e2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a06      	ldr	r2, [pc, #24]	; (8008a1c <SDMMC_GetCmdError+0x58>)
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20000000 	.word	0x20000000
 8008a18:	10624dd3 	.word	0x10624dd3
 8008a1c:	002000c5 	.word	0x002000c5

08008a20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a20:	b084      	sub	sp, #16
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	f107 001c 	add.w	r0, r7, #28
 8008a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 faf6 	bl	800a030 <USB_CoreReset>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d106      	bne.n	8008a5c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	639a      	str	r2, [r3, #56]	; 0x38
 8008a5a:	e005      	b.n	8008a68 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a74:	b004      	add	sp, #16
 8008a76:	4770      	bx	lr

08008a78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4613      	mov	r3, r2
 8008a84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d165      	bne.n	8008b58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4a3e      	ldr	r2, [pc, #248]	; (8008b88 <USB_SetTurnaroundTime+0x110>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d906      	bls.n	8008aa2 <USB_SetTurnaroundTime+0x2a>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4a3d      	ldr	r2, [pc, #244]	; (8008b8c <USB_SetTurnaroundTime+0x114>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d202      	bcs.n	8008aa2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a9c:	230f      	movs	r3, #15
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	e05c      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	4a39      	ldr	r2, [pc, #228]	; (8008b8c <USB_SetTurnaroundTime+0x114>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d306      	bcc.n	8008ab8 <USB_SetTurnaroundTime+0x40>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4a38      	ldr	r2, [pc, #224]	; (8008b90 <USB_SetTurnaroundTime+0x118>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d202      	bcs.n	8008ab8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008ab2:	230e      	movs	r3, #14
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	e051      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4a35      	ldr	r2, [pc, #212]	; (8008b90 <USB_SetTurnaroundTime+0x118>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d306      	bcc.n	8008ace <USB_SetTurnaroundTime+0x56>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4a34      	ldr	r2, [pc, #208]	; (8008b94 <USB_SetTurnaroundTime+0x11c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d202      	bcs.n	8008ace <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ac8:	230d      	movs	r3, #13
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	e046      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4a30      	ldr	r2, [pc, #192]	; (8008b94 <USB_SetTurnaroundTime+0x11c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d306      	bcc.n	8008ae4 <USB_SetTurnaroundTime+0x6c>
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a2f      	ldr	r2, [pc, #188]	; (8008b98 <USB_SetTurnaroundTime+0x120>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d802      	bhi.n	8008ae4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ade:	230c      	movs	r3, #12
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	e03b      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4a2c      	ldr	r2, [pc, #176]	; (8008b98 <USB_SetTurnaroundTime+0x120>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d906      	bls.n	8008afa <USB_SetTurnaroundTime+0x82>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a2b      	ldr	r2, [pc, #172]	; (8008b9c <USB_SetTurnaroundTime+0x124>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d802      	bhi.n	8008afa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008af4:	230b      	movs	r3, #11
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e030      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a27      	ldr	r2, [pc, #156]	; (8008b9c <USB_SetTurnaroundTime+0x124>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d906      	bls.n	8008b10 <USB_SetTurnaroundTime+0x98>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a26      	ldr	r2, [pc, #152]	; (8008ba0 <USB_SetTurnaroundTime+0x128>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d802      	bhi.n	8008b10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b0a:	230a      	movs	r3, #10
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	e025      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	4a23      	ldr	r2, [pc, #140]	; (8008ba0 <USB_SetTurnaroundTime+0x128>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d906      	bls.n	8008b26 <USB_SetTurnaroundTime+0xae>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4a22      	ldr	r2, [pc, #136]	; (8008ba4 <USB_SetTurnaroundTime+0x12c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d202      	bcs.n	8008b26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b20:	2309      	movs	r3, #9
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	e01a      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	4a1e      	ldr	r2, [pc, #120]	; (8008ba4 <USB_SetTurnaroundTime+0x12c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d306      	bcc.n	8008b3c <USB_SetTurnaroundTime+0xc4>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4a1d      	ldr	r2, [pc, #116]	; (8008ba8 <USB_SetTurnaroundTime+0x130>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d802      	bhi.n	8008b3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b36:	2308      	movs	r3, #8
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	e00f      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4a1a      	ldr	r2, [pc, #104]	; (8008ba8 <USB_SetTurnaroundTime+0x130>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d906      	bls.n	8008b52 <USB_SetTurnaroundTime+0xda>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4a19      	ldr	r2, [pc, #100]	; (8008bac <USB_SetTurnaroundTime+0x134>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d202      	bcs.n	8008b52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b4c:	2307      	movs	r3, #7
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	e004      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b52:	2306      	movs	r3, #6
 8008b54:	617b      	str	r3, [r7, #20]
 8008b56:	e001      	b.n	8008b5c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b58:	2309      	movs	r3, #9
 8008b5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	029b      	lsls	r3, r3, #10
 8008b70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b74:	431a      	orrs	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	00d8acbf 	.word	0x00d8acbf
 8008b8c:	00e4e1c0 	.word	0x00e4e1c0
 8008b90:	00f42400 	.word	0x00f42400
 8008b94:	01067380 	.word	0x01067380
 8008b98:	011a499f 	.word	0x011a499f
 8008b9c:	01312cff 	.word	0x01312cff
 8008ba0:	014ca43f 	.word	0x014ca43f
 8008ba4:	016e3600 	.word	0x016e3600
 8008ba8:	01a6ab1f 	.word	0x01a6ab1f
 8008bac:	01e84800 	.word	0x01e84800

08008bb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f043 0201 	orr.w	r2, r3, #1
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f023 0201 	bic.w	r2, r3, #1
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d115      	bne.n	8008c42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c22:	2001      	movs	r0, #1
 8008c24:	f7f8 fb14 	bl	8001250 <HAL_Delay>
      ms++;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 f985 	bl	8009f3e <USB_GetMode>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d01e      	beq.n	8008c78 <USB_SetCurrentMode+0x84>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b31      	cmp	r3, #49	; 0x31
 8008c3e:	d9f0      	bls.n	8008c22 <USB_SetCurrentMode+0x2e>
 8008c40:	e01a      	b.n	8008c78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c42:	78fb      	ldrb	r3, [r7, #3]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d115      	bne.n	8008c74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c54:	2001      	movs	r0, #1
 8008c56:	f7f8 fafb 	bl	8001250 <HAL_Delay>
      ms++;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 f96c 	bl	8009f3e <USB_GetMode>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <USB_SetCurrentMode+0x84>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b31      	cmp	r3, #49	; 0x31
 8008c70:	d9f0      	bls.n	8008c54 <USB_SetCurrentMode+0x60>
 8008c72:	e001      	b.n	8008c78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e005      	b.n	8008c84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b32      	cmp	r3, #50	; 0x32
 8008c7c:	d101      	bne.n	8008c82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e000      	b.n	8008c84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	e009      	b.n	8008cc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3340      	adds	r3, #64	; 0x40
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2b0e      	cmp	r3, #14
 8008cc4:	d9f2      	bls.n	8008cac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11c      	bne.n	8008d06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cda:	f043 0302 	orr.w	r3, r3, #2
 8008cde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e005      	b.n	8008d12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d18:	461a      	mov	r2, r3
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d24:	4619      	mov	r1, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	680b      	ldr	r3, [r1, #0]
 8008d30:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d32:	2103      	movs	r1, #3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f959 	bl	8008fec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f8f1 	bl	8008f24 <USB_FlushTxFifo>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f91d 	bl	8008f8c <USB_FlushRxFifo>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d62:	461a      	mov	r2, r3
 8008d64:	2300      	movs	r3, #0
 8008d66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6e:	461a      	mov	r2, r3
 8008d70:	2300      	movs	r3, #0
 8008d72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	e043      	b.n	8008e0e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d9c:	d118      	bne.n	8008dd0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db0:	461a      	mov	r2, r3
 8008db2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	e013      	b.n	8008de2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	e008      	b.n	8008de2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	461a      	mov	r2, r3
 8008dde:	2300      	movs	r3, #0
 8008de0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dee:	461a      	mov	r2, r3
 8008df0:	2300      	movs	r3, #0
 8008df2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e00:	461a      	mov	r2, r3
 8008e02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d3b7      	bcc.n	8008d86 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]
 8008e1a:	e043      	b.n	8008ea4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e32:	d118      	bne.n	8008e66 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10a      	bne.n	8008e50 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e46:	461a      	mov	r2, r3
 8008e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	e013      	b.n	8008e78 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	e008      	b.n	8008e78 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	461a      	mov	r2, r3
 8008e74:	2300      	movs	r3, #0
 8008e76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e84:	461a      	mov	r2, r3
 8008e86:	2300      	movs	r3, #0
 8008e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	461a      	mov	r2, r3
 8008e98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d3b7      	bcc.n	8008e1c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ebe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ecc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f043 0210 	orr.w	r2, r3, #16
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699a      	ldr	r2, [r3, #24]
 8008ede:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <USB_DevInit+0x294>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f043 0208 	orr.w	r2, r3, #8
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d107      	bne.n	8008f0e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f06:	f043 0304 	orr.w	r3, r3, #4
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f1a:	b004      	add	sp, #16
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	803c3800 	.word	0x803c3800

08008f24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3301      	adds	r3, #1
 8008f36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4a13      	ldr	r2, [pc, #76]	; (8008f88 <USB_FlushTxFifo+0x64>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d901      	bls.n	8008f44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e01b      	b.n	8008f7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	daf2      	bge.n	8008f32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	019b      	lsls	r3, r3, #6
 8008f54:	f043 0220 	orr.w	r2, r3, #32
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a08      	ldr	r2, [pc, #32]	; (8008f88 <USB_FlushTxFifo+0x64>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d901      	bls.n	8008f6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e006      	b.n	8008f7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0320 	and.w	r3, r3, #32
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	d0f0      	beq.n	8008f5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	00030d40 	.word	0x00030d40

08008f8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4a11      	ldr	r2, [pc, #68]	; (8008fe8 <USB_FlushRxFifo+0x5c>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d901      	bls.n	8008faa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e018      	b.n	8008fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	daf2      	bge.n	8008f98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2210      	movs	r2, #16
 8008fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4a08      	ldr	r2, [pc, #32]	; (8008fe8 <USB_FlushRxFifo+0x5c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d901      	bls.n	8008fce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e006      	b.n	8008fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f003 0310 	and.w	r3, r3, #16
 8008fd6:	2b10      	cmp	r3, #16
 8008fd8:	d0f0      	beq.n	8008fbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	00030d40 	.word	0x00030d40

08008fec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	78fb      	ldrb	r3, [r7, #3]
 8009006:	68f9      	ldr	r1, [r7, #12]
 8009008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800900c:	4313      	orrs	r3, r2
 800900e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800901e:	b480      	push	{r7}
 8009020:	b087      	sub	sp, #28
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f003 0306 	and.w	r3, r3, #6
 8009036:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b02      	cmp	r3, #2
 800903c:	d002      	beq.n	8009044 <USB_GetDevSpeed+0x26>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b06      	cmp	r3, #6
 8009042:	d102      	bne.n	800904a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009044:	2302      	movs	r3, #2
 8009046:	75fb      	strb	r3, [r7, #23]
 8009048:	e001      	b.n	800904e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800904a:	230f      	movs	r3, #15
 800904c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800904e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009050:	4618      	mov	r0, r3
 8009052:	371c      	adds	r7, #28
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	785b      	ldrb	r3, [r3, #1]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d13a      	bne.n	80090ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	69da      	ldr	r2, [r3, #28]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f003 030f 	and.w	r3, r3, #15
 8009088:	2101      	movs	r1, #1
 800908a:	fa01 f303 	lsl.w	r3, r1, r3
 800908e:	b29b      	uxth	r3, r3
 8009090:	68f9      	ldr	r1, [r7, #12]
 8009092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009096:	4313      	orrs	r3, r2
 8009098:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d155      	bne.n	800915c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	791b      	ldrb	r3, [r3, #4]
 80090ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	059b      	lsls	r3, r3, #22
 80090d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090d4:	4313      	orrs	r3, r2
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	0151      	lsls	r1, r2, #5
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	440a      	add	r2, r1
 80090de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	e036      	b.n	800915c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	69da      	ldr	r2, [r3, #28]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	f003 030f 	and.w	r3, r3, #15
 80090fe:	2101      	movs	r1, #1
 8009100:	fa01 f303 	lsl.w	r3, r1, r3
 8009104:	041b      	lsls	r3, r3, #16
 8009106:	68f9      	ldr	r1, [r7, #12]
 8009108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800910c:	4313      	orrs	r3, r2
 800910e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d11a      	bne.n	800915c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	791b      	ldrb	r3, [r3, #4]
 8009140:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009142:	430b      	orrs	r3, r1
 8009144:	4313      	orrs	r3, r2
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	0151      	lsls	r1, r2, #5
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	440a      	add	r2, r1
 800914e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800915a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
	...

0800916c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	785b      	ldrb	r3, [r3, #1]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d161      	bne.n	800924c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800919a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800919e:	d11f      	bne.n	80091e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	0151      	lsls	r1, r2, #5
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	440a      	add	r2, r1
 80091b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	0151      	lsls	r1, r2, #5
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	440a      	add	r2, r1
 80091d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	2101      	movs	r1, #1
 80091f2:	fa01 f303 	lsl.w	r3, r1, r3
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	43db      	mvns	r3, r3
 80091fa:	68f9      	ldr	r1, [r7, #12]
 80091fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009200:	4013      	ands	r3, r2
 8009202:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920a:	69da      	ldr	r2, [r3, #28]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f003 030f 	and.w	r3, r3, #15
 8009214:	2101      	movs	r1, #1
 8009216:	fa01 f303 	lsl.w	r3, r1, r3
 800921a:	b29b      	uxth	r3, r3
 800921c:	43db      	mvns	r3, r3
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009224:	4013      	ands	r3, r2
 8009226:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	0159      	lsls	r1, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	440b      	add	r3, r1
 800923e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009242:	4619      	mov	r1, r3
 8009244:	4b35      	ldr	r3, [pc, #212]	; (800931c <USB_DeactivateEndpoint+0x1b0>)
 8009246:	4013      	ands	r3, r2
 8009248:	600b      	str	r3, [r1, #0]
 800924a:	e060      	b.n	800930e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800925e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009262:	d11f      	bne.n	80092a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	440a      	add	r2, r1
 800927a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009282:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	0151      	lsls	r1, r2, #5
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	440a      	add	r2, r1
 800929a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	2101      	movs	r1, #1
 80092b6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ba:	041b      	lsls	r3, r3, #16
 80092bc:	43db      	mvns	r3, r3
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092c4:	4013      	ands	r3, r2
 80092c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ce:	69da      	ldr	r2, [r3, #28]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	2101      	movs	r1, #1
 80092da:	fa01 f303 	lsl.w	r3, r1, r3
 80092de:	041b      	lsls	r3, r3, #16
 80092e0:	43db      	mvns	r3, r3
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e8:	4013      	ands	r3, r2
 80092ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	0159      	lsls	r1, r3, #5
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	440b      	add	r3, r1
 8009302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009306:	4619      	mov	r1, r3
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <USB_DeactivateEndpoint+0x1b4>)
 800930a:	4013      	ands	r3, r2
 800930c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	ec337800 	.word	0xec337800
 8009320:	eff37800 	.word	0xeff37800

08009324 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	785b      	ldrb	r3, [r3, #1]
 800933c:	2b01      	cmp	r3, #1
 800933e:	f040 810a 	bne.w	8009556 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d132      	bne.n	80093b0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	440a      	add	r2, r1
 8009360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800936c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	0151      	lsls	r1, r2, #5
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	440a      	add	r2, r1
 8009384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800938c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a8:	0cdb      	lsrs	r3, r3, #19
 80093aa:	04db      	lsls	r3, r3, #19
 80093ac:	6113      	str	r3, [r2, #16]
 80093ae:	e074      	b.n	800949a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	0151      	lsls	r1, r2, #5
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	440a      	add	r2, r1
 80093c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ca:	0cdb      	lsrs	r3, r3, #19
 80093cc:	04db      	lsls	r3, r3, #19
 80093ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	6999      	ldr	r1, [r3, #24]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	440b      	add	r3, r1
 800940c:	1e59      	subs	r1, r3, #1
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	fbb1 f3f3 	udiv	r3, r1, r3
 8009416:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009418:	4b9e      	ldr	r3, [pc, #632]	; (8009694 <USB_EPStartXfer+0x370>)
 800941a:	400b      	ands	r3, r1
 800941c:	6939      	ldr	r1, [r7, #16]
 800941e:	0148      	lsls	r0, r1, #5
 8009420:	6979      	ldr	r1, [r7, #20]
 8009422:	4401      	add	r1, r0
 8009424:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009428:	4313      	orrs	r3, r2
 800942a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009442:	6939      	ldr	r1, [r7, #16]
 8009444:	0148      	lsls	r0, r1, #5
 8009446:	6979      	ldr	r1, [r7, #20]
 8009448:	4401      	add	r1, r0
 800944a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800944e:	4313      	orrs	r3, r2
 8009450:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	791b      	ldrb	r3, [r3, #4]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d11f      	bne.n	800949a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009474:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009478:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009498:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	0151      	lsls	r1, r2, #5
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	440a      	add	r2, r1
 80094b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094b8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	791b      	ldrb	r3, [r3, #4]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d015      	beq.n	80094ee <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 8106 	beq.w	80096d8 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 030f 	and.w	r3, r3, #15
 80094dc:	2101      	movs	r1, #1
 80094de:	fa01 f303 	lsl.w	r3, r1, r3
 80094e2:	6979      	ldr	r1, [r7, #20]
 80094e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094e8:	4313      	orrs	r3, r2
 80094ea:	634b      	str	r3, [r1, #52]	; 0x34
 80094ec:	e0f4      	b.n	80096d8 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d110      	bne.n	8009520 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	0151      	lsls	r1, r2, #5
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	440a      	add	r2, r1
 8009514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	e00f      	b.n	8009540 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	0151      	lsls	r1, r2, #5
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	440a      	add	r2, r1
 8009536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800953e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	6919      	ldr	r1, [r3, #16]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781a      	ldrb	r2, [r3, #0]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	b29b      	uxth	r3, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fa94 	bl	8009a7c <USB_WritePacket>
 8009554:	e0c0      	b.n	80096d8 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	440a      	add	r2, r1
 800956c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009570:	0cdb      	lsrs	r3, r3, #19
 8009572:	04db      	lsls	r3, r3, #19
 8009574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	0151      	lsls	r1, r2, #5
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	440a      	add	r2, r1
 800958c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009590:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009594:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009598:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d123      	bne.n	80095ea <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ae:	691a      	ldr	r2, [r3, #16]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b8:	6939      	ldr	r1, [r7, #16]
 80095ba:	0148      	lsls	r0, r1, #5
 80095bc:	6979      	ldr	r1, [r7, #20]
 80095be:	4401      	add	r1, r0
 80095c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095c4:	4313      	orrs	r3, r2
 80095c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095e6:	6113      	str	r3, [r2, #16]
 80095e8:	e037      	b.n	800965a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	1e5a      	subs	r2, r3, #1
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fe:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	89fa      	ldrh	r2, [r7, #14]
 8009606:	fb03 f202 	mul.w	r2, r3, r2
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	89fb      	ldrh	r3, [r7, #14]
 800961e:	04d9      	lsls	r1, r3, #19
 8009620:	4b1c      	ldr	r3, [pc, #112]	; (8009694 <USB_EPStartXfer+0x370>)
 8009622:	400b      	ands	r3, r1
 8009624:	6939      	ldr	r1, [r7, #16]
 8009626:	0148      	lsls	r0, r1, #5
 8009628:	6979      	ldr	r1, [r7, #20]
 800962a:	4401      	add	r1, r0
 800962c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009630:	4313      	orrs	r3, r2
 8009632:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800964a:	6939      	ldr	r1, [r7, #16]
 800964c:	0148      	lsls	r0, r1, #5
 800964e:	6979      	ldr	r1, [r7, #20]
 8009650:	4401      	add	r1, r0
 8009652:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009656:	4313      	orrs	r3, r2
 8009658:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	791b      	ldrb	r3, [r3, #4]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d12a      	bne.n	80096b8 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966e:	2b00      	cmp	r3, #0
 8009670:	d112      	bne.n	8009698 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800968c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	e011      	b.n	80096b8 <USB_EPStartXfer+0x394>
 8009694:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	0151      	lsls	r1, r2, #5
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	440a      	add	r2, r1
 80096ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	0151      	lsls	r1, r2, #5
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	440a      	add	r2, r1
 80096ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop

080096e4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	f040 80ab 	bne.w	8009858 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d132      	bne.n	8009770 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	0151      	lsls	r1, r2, #5
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	440a      	add	r2, r1
 8009720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009724:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009728:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800972c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800974c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	0151      	lsls	r1, r2, #5
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	440a      	add	r2, r1
 8009764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009768:	0cdb      	lsrs	r3, r3, #19
 800976a:	04db      	lsls	r3, r3, #19
 800976c:	6113      	str	r3, [r2, #16]
 800976e:	e04e      	b.n	800980e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	0151      	lsls	r1, r2, #5
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	440a      	add	r2, r1
 8009786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978a:	0cdb      	lsrs	r3, r3, #19
 800978c:	04db      	lsls	r3, r3, #19
 800978e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	699a      	ldr	r2, [r3, #24]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d903      	bls.n	80097c8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f4:	691a      	ldr	r2, [r3, #16]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097fe:	68b9      	ldr	r1, [r7, #8]
 8009800:	0148      	lsls	r0, r1, #5
 8009802:	68f9      	ldr	r1, [r7, #12]
 8009804:	4401      	add	r1, r0
 8009806:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800980a:	4313      	orrs	r3, r2
 800980c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	015a      	lsls	r2, r3, #5
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4413      	add	r3, r2
 8009816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	0151      	lsls	r1, r2, #5
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	440a      	add	r2, r1
 8009824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009828:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800982c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d071      	beq.n	800991a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	f003 030f 	and.w	r3, r3, #15
 8009846:	2101      	movs	r1, #1
 8009848:	fa01 f303 	lsl.w	r3, r1, r3
 800984c:	68f9      	ldr	r1, [r7, #12]
 800984e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009852:	4313      	orrs	r3, r2
 8009854:	634b      	str	r3, [r1, #52]	; 0x34
 8009856:	e060      	b.n	800991a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	440a      	add	r2, r1
 800986e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009872:	0cdb      	lsrs	r3, r3, #19
 8009874:	04db      	lsls	r3, r3, #19
 8009876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	0151      	lsls	r1, r2, #5
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	440a      	add	r2, r1
 800988e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009892:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009896:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800989a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	68da      	ldr	r2, [r3, #12]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68da      	ldr	r2, [r3, #12]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	0151      	lsls	r1, r2, #5
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	440a      	add	r2, r1
 80098ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	691a      	ldr	r2, [r3, #16]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	0148      	lsls	r0, r1, #5
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	4401      	add	r1, r0
 80098f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098f6:	4313      	orrs	r3, r2
 80098f8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009918:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d14a      	bne.n	80099dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800995a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800995e:	f040 8086 	bne.w	8009a6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	7812      	ldrb	r2, [r2, #0]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	440a      	add	r2, r1
 800997c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009984:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	7812      	ldrb	r2, [r2, #0]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3301      	adds	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d902      	bls.n	80099c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	75fb      	strb	r3, [r7, #23]
          break;
 80099be:	e056      	b.n	8009a6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099d8:	d0e7      	beq.n	80099aa <USB_EPStopXfer+0x82>
 80099da:	e048      	b.n	8009a6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099f4:	d13b      	bne.n	8009a6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	7812      	ldrb	r2, [r2, #0]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	7812      	ldrb	r2, [r2, #0]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3301      	adds	r3, #1
 8009a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d902      	bls.n	8009a54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	75fb      	strb	r3, [r7, #23]
          break;
 8009a52:	e00c      	b.n	8009a6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a6c:	d0e7      	beq.n	8009a3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b089      	sub	sp, #36	; 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	4611      	mov	r1, r2
 8009a88:	461a      	mov	r2, r3
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	71fb      	strb	r3, [r7, #7]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009a9a:	88bb      	ldrh	r3, [r7, #4]
 8009a9c:	3303      	adds	r3, #3
 8009a9e:	089b      	lsrs	r3, r3, #2
 8009aa0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	e018      	b.n	8009ada <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	031a      	lsls	r2, r3, #12
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	3301      	adds	r3, #1
 8009acc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d3e2      	bcc.n	8009aa8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3724      	adds	r7, #36	; 0x24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b08b      	sub	sp, #44	; 0x2c
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	4613      	mov	r3, r2
 8009afc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b06:	88fb      	ldrh	r3, [r7, #6]
 8009b08:	089b      	lsrs	r3, r3, #2
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b0e:	88fb      	ldrh	r3, [r7, #6]
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	623b      	str	r3, [r7, #32]
 8009b1a:	e014      	b.n	8009b46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	3301      	adds	r3, #1
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	3301      	adds	r3, #1
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	3301      	adds	r3, #1
 8009b44:	623b      	str	r3, [r7, #32]
 8009b46:	6a3a      	ldr	r2, [r7, #32]
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d3e6      	bcc.n	8009b1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b4e:	8bfb      	ldrh	r3, [r7, #30]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d01e      	beq.n	8009b92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f107 0310 	add.w	r3, r7, #16
 8009b64:	6812      	ldr	r2, [r2, #0]
 8009b66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	fa22 f303 	lsr.w	r3, r2, r3
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	701a      	strb	r2, [r3, #0]
      i++;
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	3301      	adds	r3, #1
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b86:	8bfb      	ldrh	r3, [r7, #30]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b8c:	8bfb      	ldrh	r3, [r7, #30]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1ea      	bne.n	8009b68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	372c      	adds	r7, #44	; 0x2c
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d12c      	bne.n	8009c16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	db12      	blt.n	8009bf4 <USB_EPSetStall+0x54>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00f      	beq.n	8009bf4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	0151      	lsls	r1, r2, #5
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	440a      	add	r2, r1
 8009bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bf2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	e02b      	b.n	8009c6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	db12      	blt.n	8009c4e <USB_EPSetStall+0xae>
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00f      	beq.n	8009c4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	0151      	lsls	r1, r2, #5
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	440a      	add	r2, r1
 8009c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	0151      	lsls	r1, r2, #5
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	440a      	add	r2, r1
 8009c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d128      	bne.n	8009cea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	0151      	lsls	r1, r2, #5
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	440a      	add	r2, r1
 8009cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	791b      	ldrb	r3, [r3, #4]
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d003      	beq.n	8009cc8 <USB_EPClearStall+0x4c>
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	791b      	ldrb	r3, [r3, #4]
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d138      	bne.n	8009d3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	0151      	lsls	r1, r2, #5
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	440a      	add	r2, r1
 8009cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	e027      	b.n	8009d3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	0151      	lsls	r1, r2, #5
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	440a      	add	r2, r1
 8009d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	791b      	ldrb	r3, [r3, #4]
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d003      	beq.n	8009d1a <USB_EPClearStall+0x9e>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	791b      	ldrb	r3, [r3, #4]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d10f      	bne.n	8009d3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	0151      	lsls	r1, r2, #5
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	440a      	add	r2, r1
 8009d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d7c:	68f9      	ldr	r1, [r7, #12]
 8009d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d82:	4313      	orrs	r3, r2
 8009d84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dae:	f023 0303 	bic.w	r3, r3, #3
 8009db2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dc2:	f023 0302 	bic.w	r3, r3, #2
 8009dc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b085      	sub	sp, #20
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e04:	f043 0302 	orr.w	r3, r3, #2
 8009e08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e30:	68fb      	ldr	r3, [r7, #12]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	4013      	ands	r3, r2
 8009e60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	0c1b      	lsrs	r3, r3, #16
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	4013      	ands	r3, r2
 8009e94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	b29b      	uxth	r3, r3
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b087      	sub	sp, #28
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	460b      	mov	r3, r1
 8009eec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	f003 030f 	and.w	r3, r3, #15
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f12:	01db      	lsls	r3, r3, #7
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f30:	68bb      	ldr	r3, [r7, #8]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b083      	sub	sp, #12
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f78:	f023 0307 	bic.w	r3, r3, #7
 8009f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	333c      	adds	r3, #60	; 0x3c
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	4a1c      	ldr	r2, [pc, #112]	; (800a02c <USB_EP0_OutStart+0x8c>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d90a      	bls.n	8009fd6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fd0:	d101      	bne.n	8009fd6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e024      	b.n	800a020 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fdc:	461a      	mov	r2, r3
 8009fde:	2300      	movs	r3, #0
 8009fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a004:	f043 0318 	orr.w	r3, r3, #24
 800a008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a018:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a01c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	4f54300a 	.word	0x4f54300a

0800a030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4a13      	ldr	r2, [pc, #76]	; (800a094 <USB_CoreReset+0x64>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d901      	bls.n	800a04e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e01b      	b.n	800a086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	daf2      	bge.n	800a03c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	f043 0201 	orr.w	r2, r3, #1
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3301      	adds	r3, #1
 800a06a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4a09      	ldr	r2, [pc, #36]	; (800a094 <USB_CoreReset+0x64>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d901      	bls.n	800a078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a074:	2303      	movs	r3, #3
 800a076:	e006      	b.n	800a086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	2b01      	cmp	r3, #1
 800a082:	d0f0      	beq.n	800a066 <USB_CoreReset+0x36>

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	00030d40 	.word	0x00030d40

0800a098 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a09c:	4904      	ldr	r1, [pc, #16]	; (800a0b0 <MX_FATFS_Init+0x18>)
 800a09e:	4805      	ldr	r0, [pc, #20]	; (800a0b4 <MX_FATFS_Init+0x1c>)
 800a0a0:	f004 fd70 	bl	800eb84 <FATFS_LinkDriver>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <MX_FATFS_Init+0x20>)
 800a0aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a0ac:	bf00      	nop
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000460 	.word	0x20000460
 800a0b4:	0800f9cc 	.word	0x0800f9cc
 800a0b8:	2000045c 	.word	0x2000045c

0800a0bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a0c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a0d6:	f000 f879 	bl	800a1cc <BSP_SD_IsDetected>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d001      	beq.n	800a0e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	e012      	b.n	800a10a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a0e4:	480b      	ldr	r0, [pc, #44]	; (800a114 <BSP_SD_Init+0x48>)
 800a0e6:	f7fb fbcf 	bl	8005888 <HAL_SD_Init>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a0f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a0f8:	4806      	ldr	r0, [pc, #24]	; (800a114 <BSP_SD_Init+0x48>)
 800a0fa:	f7fc fa9b 	bl	8006634 <HAL_SD_ConfigWideBusOperation>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a108:	79fb      	ldrb	r3, [r7, #7]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20000254 	.word	0x20000254

0800a118 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	68f9      	ldr	r1, [r7, #12]
 800a134:	4806      	ldr	r0, [pc, #24]	; (800a150 <BSP_SD_ReadBlocks+0x38>)
 800a136:	f7fb fccf 	bl	8005ad8 <HAL_SD_ReadBlocks>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20000254 	.word	0x20000254

0800a154 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af02      	add	r7, sp, #8
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	68f9      	ldr	r1, [r7, #12]
 800a170:	4806      	ldr	r0, [pc, #24]	; (800a18c <BSP_SD_WriteBlocks+0x38>)
 800a172:	f7fb fe43 	bl	8005dfc <HAL_SD_WriteBlocks>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000254 	.word	0x20000254

0800a190 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a194:	4805      	ldr	r0, [pc, #20]	; (800a1ac <BSP_SD_GetCardState+0x1c>)
 800a196:	f7fc fb61 	bl	800685c <HAL_SD_GetCardState>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b04      	cmp	r3, #4
 800a19e:	bf14      	ite	ne
 800a1a0:	2301      	movne	r3, #1
 800a1a2:	2300      	moveq	r3, #0
 800a1a4:	b2db      	uxtb	r3, r3
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20000254 	.word	0x20000254

0800a1b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4803      	ldr	r0, [pc, #12]	; (800a1c8 <BSP_SD_GetCardInfo+0x18>)
 800a1bc:	f7fc fa0e 	bl	80065dc <HAL_SD_GetCardInfo>
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20000254 	.word	0x20000254

0800a1cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a1d6:	f000 f80b 	bl	800a1f0 <BSP_PlatformIsDetected>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	b2db      	uxtb	r3, r3
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a1fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a202:	f7f7 faed 	bl	80017e0 <HAL_GPIO_ReadPin>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800a20c:	2300      	movs	r3, #0
 800a20e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a210:	79fb      	ldrb	r3, [r7, #7]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a226:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <SD_CheckStatus+0x38>)
 800a228:	2201      	movs	r2, #1
 800a22a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a22c:	f7ff ffb0 	bl	800a190 <BSP_SD_GetCardState>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d107      	bne.n	800a246 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a236:	4b07      	ldr	r3, [pc, #28]	; (800a254 <SD_CheckStatus+0x38>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f023 0301 	bic.w	r3, r3, #1
 800a240:	b2da      	uxtb	r2, r3
 800a242:	4b04      	ldr	r3, [pc, #16]	; (800a254 <SD_CheckStatus+0x38>)
 800a244:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a246:	4b03      	ldr	r3, [pc, #12]	; (800a254 <SD_CheckStatus+0x38>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b2db      	uxtb	r3, r3
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20000009 	.word	0x20000009

0800a258 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a262:	4b0b      	ldr	r3, [pc, #44]	; (800a290 <SD_initialize+0x38>)
 800a264:	2201      	movs	r2, #1
 800a266:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a268:	f7ff ff30 	bl	800a0cc <BSP_SD_Init>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d107      	bne.n	800a282 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff ffd1 	bl	800a21c <SD_CheckStatus>
 800a27a:	4603      	mov	r3, r0
 800a27c:	461a      	mov	r2, r3
 800a27e:	4b04      	ldr	r3, [pc, #16]	; (800a290 <SD_initialize+0x38>)
 800a280:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a282:	4b03      	ldr	r3, [pc, #12]	; (800a290 <SD_initialize+0x38>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	b2db      	uxtb	r3, r3
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	20000009 	.word	0x20000009

0800a294 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff ffbb 	bl	800a21c <SD_CheckStatus>
 800a2a6:	4603      	mov	r3, r0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	68b8      	ldr	r0, [r7, #8]
 800a2ce:	f7ff ff23 	bl	800a118 <BSP_SD_ReadBlocks>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d107      	bne.n	800a2e8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a2d8:	bf00      	nop
 800a2da:	f7ff ff59 	bl	800a190 <BSP_SD_GetCardState>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1fa      	bne.n	800a2da <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b086      	sub	sp, #24
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	603b      	str	r3, [r7, #0]
 800a2fe:	4603      	mov	r3, r0
 800a300:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	68b8      	ldr	r0, [r7, #8]
 800a310:	f7ff ff20 	bl	800a154 <BSP_SD_WriteBlocks>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d107      	bne.n	800a32a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a31a:	bf00      	nop
 800a31c:	f7ff ff38 	bl	800a190 <BSP_SD_GetCardState>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1fa      	bne.n	800a31c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08c      	sub	sp, #48	; 0x30
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	603a      	str	r2, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
 800a340:	460b      	mov	r3, r1
 800a342:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a34a:	4b25      	ldr	r3, [pc, #148]	; (800a3e0 <SD_ioctl+0xac>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <SD_ioctl+0x28>
 800a358:	2303      	movs	r3, #3
 800a35a:	e03c      	b.n	800a3d6 <SD_ioctl+0xa2>

  switch (cmd)
 800a35c:	79bb      	ldrb	r3, [r7, #6]
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d834      	bhi.n	800a3cc <SD_ioctl+0x98>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <SD_ioctl+0x34>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a379 	.word	0x0800a379
 800a36c:	0800a381 	.word	0x0800a381
 800a370:	0800a399 	.word	0x0800a399
 800a374:	0800a3b3 	.word	0x0800a3b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a37e:	e028      	b.n	800a3d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a380:	f107 0308 	add.w	r3, r7, #8
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff ff13 	bl	800a1b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a38a:	6a3a      	ldr	r2, [r7, #32]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a396:	e01c      	b.n	800a3d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a398:	f107 0308 	add.w	r3, r7, #8
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff ff07 	bl	800a1b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3b0:	e00f      	b.n	800a3d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3b2:	f107 0308 	add.w	r3, r7, #8
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fefa 	bl	800a1b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	0a5a      	lsrs	r2, r3, #9
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3ca:	e002      	b.n	800a3d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a3cc:	2304      	movs	r3, #4
 800a3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a3d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3730      	adds	r7, #48	; 0x30
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000009 	.word	0x20000009

0800a3e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a3f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a3f4:	f005 fa02 	bl	800f7fc <USBD_static_malloc>
 800a3f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d105      	bne.n	800a40c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a408:	2302      	movs	r3, #2
 800a40a:	e066      	b.n	800a4da <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7c1b      	ldrb	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d119      	bne.n	800a450 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a41c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a420:	2202      	movs	r2, #2
 800a422:	2181      	movs	r1, #129	; 0x81
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f004 ffd5 	bl	800f3d4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a430:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a434:	2202      	movs	r2, #2
 800a436:	2101      	movs	r1, #1
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f004 ffcb 	bl	800f3d4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2210      	movs	r2, #16
 800a44a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a44e:	e016      	b.n	800a47e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a450:	2340      	movs	r3, #64	; 0x40
 800a452:	2202      	movs	r2, #2
 800a454:	2181      	movs	r1, #129	; 0x81
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f004 ffbc 	bl	800f3d4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a462:	2340      	movs	r3, #64	; 0x40
 800a464:	2202      	movs	r2, #2
 800a466:	2101      	movs	r1, #1
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f004 ffb3 	bl	800f3d4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2210      	movs	r2, #16
 800a47a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a47e:	2308      	movs	r3, #8
 800a480:	2203      	movs	r2, #3
 800a482:	2182      	movs	r1, #130	; 0x82
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f004 ffa5 	bl	800f3d4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	7c1b      	ldrb	r3, [r3, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d109      	bne.n	800a4c8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4be:	2101      	movs	r1, #1
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f005 f901 	bl	800f6c8 <USBD_LL_PrepareReceive>
 800a4c6:	e007      	b.n	800a4d8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4ce:	2340      	movs	r3, #64	; 0x40
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f005 f8f8 	bl	800f6c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a4ee:	2181      	movs	r1, #129	; 0x81
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f004 ffad 	bl	800f450 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f004 ffa6 	bl	800f450 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a50c:	2182      	movs	r1, #130	; 0x82
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f004 ff9e 	bl	800f450 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00e      	beq.n	800a54c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a53e:	4618      	mov	r0, r3
 800a540:	f005 f96a 	bl	800f818 <USBD_static_free>
    pdev->pClassData = NULL;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a568:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e0af      	b.n	800a6e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d03f      	beq.n	800a60c <USBD_CDC_Setup+0xb4>
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	f040 809f 	bne.w	800a6d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	88db      	ldrh	r3, [r3, #6]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d02e      	beq.n	800a5f8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	b25b      	sxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	da16      	bge.n	800a5d2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a5b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	88d2      	ldrh	r2, [r2, #6]
 800a5b6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	88db      	ldrh	r3, [r3, #6]
 800a5bc:	2b07      	cmp	r3, #7
 800a5be:	bf28      	it	cs
 800a5c0:	2307      	movcs	r3, #7
 800a5c2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	89fa      	ldrh	r2, [r7, #14]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f001 fb43 	bl	800bc56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a5d0:	e085      	b.n	800a6de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	785a      	ldrb	r2, [r3, #1]
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	88db      	ldrh	r3, [r3, #6]
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a5e8:	6939      	ldr	r1, [r7, #16]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	88db      	ldrh	r3, [r3, #6]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f001 fb5c 	bl	800bcae <USBD_CtlPrepareRx>
      break;
 800a5f6:	e072      	b.n	800a6de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	7850      	ldrb	r0, [r2, #1]
 800a604:	2200      	movs	r2, #0
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	4798      	blx	r3
      break;
 800a60a:	e068      	b.n	800a6de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	2b0b      	cmp	r3, #11
 800a612:	d852      	bhi.n	800a6ba <USBD_CDC_Setup+0x162>
 800a614:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <USBD_CDC_Setup+0xc4>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a64d 	.word	0x0800a64d
 800a620:	0800a6c9 	.word	0x0800a6c9
 800a624:	0800a6bb 	.word	0x0800a6bb
 800a628:	0800a6bb 	.word	0x0800a6bb
 800a62c:	0800a6bb 	.word	0x0800a6bb
 800a630:	0800a6bb 	.word	0x0800a6bb
 800a634:	0800a6bb 	.word	0x0800a6bb
 800a638:	0800a6bb 	.word	0x0800a6bb
 800a63c:	0800a6bb 	.word	0x0800a6bb
 800a640:	0800a6bb 	.word	0x0800a6bb
 800a644:	0800a677 	.word	0x0800a677
 800a648:	0800a6a1 	.word	0x0800a6a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b03      	cmp	r3, #3
 800a656:	d107      	bne.n	800a668 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a658:	f107 030a 	add.w	r3, r7, #10
 800a65c:	2202      	movs	r2, #2
 800a65e:	4619      	mov	r1, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f001 faf8 	bl	800bc56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a666:	e032      	b.n	800a6ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fa82 	bl	800bb74 <USBD_CtlError>
            ret = USBD_FAIL;
 800a670:	2303      	movs	r3, #3
 800a672:	75fb      	strb	r3, [r7, #23]
          break;
 800a674:	e02b      	b.n	800a6ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d107      	bne.n	800a692 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a682:	f107 030d 	add.w	r3, r7, #13
 800a686:	2201      	movs	r2, #1
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f001 fae3 	bl	800bc56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a690:	e01d      	b.n	800a6ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f001 fa6d 	bl	800bb74 <USBD_CtlError>
            ret = USBD_FAIL;
 800a69a:	2303      	movs	r3, #3
 800a69c:	75fb      	strb	r3, [r7, #23]
          break;
 800a69e:	e016      	b.n	800a6ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d00f      	beq.n	800a6cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f001 fa60 	bl	800bb74 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a6b8:	e008      	b.n	800a6cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f001 fa59 	bl	800bb74 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	75fb      	strb	r3, [r7, #23]
          break;
 800a6c6:	e002      	b.n	800a6ce <USBD_CDC_Setup+0x176>
          break;
 800a6c8:	bf00      	nop
 800a6ca:	e008      	b.n	800a6de <USBD_CDC_Setup+0x186>
          break;
 800a6cc:	bf00      	nop
      }
      break;
 800a6ce:	e006      	b.n	800a6de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f001 fa4e 	bl	800bb74 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	75fb      	strb	r3, [r7, #23]
      break;
 800a6dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a706:	2303      	movs	r3, #3
 800a708:	e04f      	b.n	800a7aa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a710:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a712:	78fa      	ldrb	r2, [r7, #3]
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	440b      	add	r3, r1
 800a720:	3318      	adds	r3, #24
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d029      	beq.n	800a77c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a728:	78fa      	ldrb	r2, [r7, #3]
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	4613      	mov	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	3318      	adds	r3, #24
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	78f9      	ldrb	r1, [r7, #3]
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	460b      	mov	r3, r1
 800a740:	00db      	lsls	r3, r3, #3
 800a742:	440b      	add	r3, r1
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4403      	add	r3, r0
 800a748:	3348      	adds	r3, #72	; 0x48
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a750:	fb01 f303 	mul.w	r3, r1, r3
 800a754:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a756:	2b00      	cmp	r3, #0
 800a758:	d110      	bne.n	800a77c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a75a:	78fa      	ldrb	r2, [r7, #3]
 800a75c:	6879      	ldr	r1, [r7, #4]
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	440b      	add	r3, r1
 800a768:	3318      	adds	r3, #24
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a76e:	78f9      	ldrb	r1, [r7, #3]
 800a770:	2300      	movs	r3, #0
 800a772:	2200      	movs	r2, #0
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f004 ff6f 	bl	800f658 <USBD_LL_Transmit>
 800a77a:	e015      	b.n	800a7a8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00b      	beq.n	800a7a8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e015      	b.n	800a800 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a7d4:	78fb      	ldrb	r3, [r7, #3]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f004 ffad 	bl	800f738 <USBD_LL_GetRxDataSize>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a816:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a81e:	2303      	movs	r3, #3
 800a820:	e01b      	b.n	800a85a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d015      	beq.n	800a858 <USBD_CDC_EP0_RxReady+0x50>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a832:	2bff      	cmp	r3, #255	; 0xff
 800a834:	d010      	beq.n	800a858 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a844:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a84c:	b292      	uxth	r2, r2
 800a84e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	22ff      	movs	r2, #255	; 0xff
 800a854:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
	...

0800a864 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2243      	movs	r2, #67	; 0x43
 800a870:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a872:	4b03      	ldr	r3, [pc, #12]	; (800a880 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20000094 	.word	0x20000094

0800a884 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2243      	movs	r2, #67	; 0x43
 800a890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a892:	4b03      	ldr	r3, [pc, #12]	; (800a8a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	20000050 	.word	0x20000050

0800a8a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2243      	movs	r2, #67	; 0x43
 800a8b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a8b2:	4b03      	ldr	r3, [pc, #12]	; (800a8c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	200000d8 	.word	0x200000d8

0800a8c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	220a      	movs	r2, #10
 800a8d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a8d2:	4b03      	ldr	r3, [pc, #12]	; (800a8e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	2000000c 	.word	0x2000000c

0800a8e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e004      	b.n	800a902 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a90e:	b480      	push	{r7}
 800a910:	b087      	sub	sp, #28
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a920:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a928:	2303      	movs	r3, #3
 800a92a:	e008      	b.n	800a93e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a95a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a962:	2303      	movs	r3, #3
 800a964:	e004      	b.n	800a970 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a98a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a98c:	2301      	movs	r3, #1
 800a98e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e01a      	b.n	800a9d4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d114      	bne.n	800a9d2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a9c6:	2181      	movs	r1, #129	; 0x81
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f004 fe45 	bl	800f658 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e016      	b.n	800aa28 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	7c1b      	ldrb	r3, [r3, #16]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d109      	bne.n	800aa16 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f004 fe5a 	bl	800f6c8 <USBD_LL_PrepareReceive>
 800aa14:	e007      	b.n	800aa26 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa1c:	2340      	movs	r3, #64	; 0x40
 800aa1e:	2101      	movs	r1, #1
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f004 fe51 	bl	800f6c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e01f      	b.n	800aa88 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d003      	beq.n	800aa6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	79fa      	ldrb	r2, [r7, #7]
 800aa7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f004 fc2d 	bl	800f2dc <USBD_LL_Init>
 800aa82:	4603      	mov	r3, r0
 800aa84:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e016      	b.n	800aad6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00b      	beq.n	800aad4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac4:	f107 020e 	add.w	r2, r7, #14
 800aac8:	4610      	mov	r0, r2
 800aaca:	4798      	blx	r3
 800aacc:	4602      	mov	r2, r0
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f004 fc42 	bl	800f370 <USBD_LL_Start>
 800aaec:	4603      	mov	r3, r0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b083      	sub	sp, #12
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d009      	beq.n	800ab3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	78fa      	ldrb	r2, [r7, #3]
 800ab30:	4611      	mov	r1, r2
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	4798      	blx	r3
 800ab36:	4603      	mov	r3, r0
 800ab38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d007      	beq.n	800ab6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	78fa      	ldrb	r2, [r7, #3]
 800ab64:	4611      	mov	r1, r2
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	4798      	blx	r3
  }

  return USBD_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 ffba 	bl	800bb00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aba8:	f003 031f 	and.w	r3, r3, #31
 800abac:	2b02      	cmp	r3, #2
 800abae:	d01a      	beq.n	800abe6 <USBD_LL_SetupStage+0x72>
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d822      	bhi.n	800abfa <USBD_LL_SetupStage+0x86>
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <USBD_LL_SetupStage+0x4a>
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d00a      	beq.n	800abd2 <USBD_LL_SetupStage+0x5e>
 800abbc:	e01d      	b.n	800abfa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fa62 	bl	800b090 <USBD_StdDevReq>
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]
      break;
 800abd0:	e020      	b.n	800ac14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fac6 	bl	800b16c <USBD_StdItfReq>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73fb      	strb	r3, [r7, #15]
      break;
 800abe4:	e016      	b.n	800ac14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fb05 	bl	800b1fe <USBD_StdEPReq>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]
      break;
 800abf8:	e00c      	b.n	800ac14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f004 fc57 	bl	800f4bc <USBD_LL_StallEP>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73fb      	strb	r3, [r7, #15]
      break;
 800ac12:	bf00      	nop
  }

  return ret;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b086      	sub	sp, #24
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	460b      	mov	r3, r1
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d138      	bne.n	800aca4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d14a      	bne.n	800acda <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d913      	bls.n	800ac78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	1ad2      	subs	r2, r2, r3
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	4293      	cmp	r3, r2
 800ac68:	bf28      	it	cs
 800ac6a:	4613      	movcs	r3, r2
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f001 f839 	bl	800bce8 <USBD_CtlContinueRx>
 800ac76:	e030      	b.n	800acda <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d10b      	bne.n	800ac9c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d005      	beq.n	800ac9c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f001 f834 	bl	800bd0a <USBD_CtlSendStatus>
 800aca2:	e01a      	b.n	800acda <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b03      	cmp	r3, #3
 800acae:	d114      	bne.n	800acda <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00e      	beq.n	800acda <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	7afa      	ldrb	r2, [r7, #11]
 800acc6:	4611      	mov	r1, r2
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	4798      	blx	r3
 800accc:	4603      	mov	r3, r0
 800acce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	e000      	b.n	800acdc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	460b      	mov	r3, r1
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800acf2:	7afb      	ldrb	r3, [r7, #11]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d16b      	bne.n	800add0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	3314      	adds	r3, #20
 800acfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d156      	bne.n	800adb6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d914      	bls.n	800ad3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	689a      	ldr	r2, [r3, #8]
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	1ad2      	subs	r2, r2, r3
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	461a      	mov	r2, r3
 800ad28:	6879      	ldr	r1, [r7, #4]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f000 ffae 	bl	800bc8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad30:	2300      	movs	r3, #0
 800ad32:	2200      	movs	r2, #0
 800ad34:	2100      	movs	r1, #0
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f004 fcc6 	bl	800f6c8 <USBD_LL_PrepareReceive>
 800ad3c:	e03b      	b.n	800adb6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	68da      	ldr	r2, [r3, #12]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d11c      	bne.n	800ad84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d316      	bcc.n	800ad84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	685a      	ldr	r2, [r3, #4]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d20f      	bcs.n	800ad84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad64:	2200      	movs	r2, #0
 800ad66:	2100      	movs	r1, #0
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 ff8f 	bl	800bc8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad76:	2300      	movs	r3, #0
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f004 fca3 	bl	800f6c8 <USBD_LL_PrepareReceive>
 800ad82:	e018      	b.n	800adb6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d10b      	bne.n	800ada8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d005      	beq.n	800ada8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f004 fb86 	bl	800f4bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 ffbd 	bl	800bd30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d122      	bne.n	800ae06 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff fe98 	bl	800aaf6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800adce:	e01a      	b.n	800ae06 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b03      	cmp	r3, #3
 800adda:	d114      	bne.n	800ae06 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00e      	beq.n	800ae06 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	7afa      	ldrb	r2, [r7, #11]
 800adf2:	4611      	mov	r1, r2
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	4798      	blx	r3
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	e000      	b.n	800ae08 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e02f      	b.n	800aea4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00f      	beq.n	800ae6e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	6852      	ldr	r2, [r2, #4]
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	4611      	mov	r1, r2
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae6e:	2340      	movs	r3, #64	; 0x40
 800ae70:	2200      	movs	r2, #0
 800ae72:	2100      	movs	r1, #0
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f004 faad 	bl	800f3d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2240      	movs	r2, #64	; 0x40
 800ae86:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae8a:	2340      	movs	r3, #64	; 0x40
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	2180      	movs	r1, #128	; 0x80
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f004 fa9f 	bl	800f3d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2240      	movs	r2, #64	; 0x40
 800aea0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	78fa      	ldrb	r2, [r7, #3]
 800aebc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2204      	movs	r2, #4
 800aee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b04      	cmp	r3, #4
 800af0a:	d106      	bne.n	800af1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af12:	b2da      	uxtb	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e012      	b.n	800af64 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b03      	cmp	r3, #3
 800af48:	d10b      	bne.n	800af62 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d005      	beq.n	800af62 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800af82:	2303      	movs	r3, #3
 800af84:	e014      	b.n	800afb0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b03      	cmp	r3, #3
 800af90:	d10d      	bne.n	800afae <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d007      	beq.n	800afae <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	78fa      	ldrb	r2, [r7, #3]
 800afa8:	4611      	mov	r1, r2
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800afce:	2303      	movs	r3, #3
 800afd0:	e014      	b.n	800affc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d10d      	bne.n	800affa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d007      	beq.n	800affa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	4611      	mov	r1, r2
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b082      	sub	sp, #8
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b030:	2b00      	cmp	r3, #0
 800b032:	d009      	beq.n	800b048 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	6852      	ldr	r2, [r2, #4]
 800b040:	b2d2      	uxtb	r2, r2
 800b042:	4611      	mov	r1, r2
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	4798      	blx	r3
  }

  return USBD_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b052:	b480      	push	{r7}
 800b054:	b087      	sub	sp, #28
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3301      	adds	r3, #1
 800b068:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b070:	8a3b      	ldrh	r3, [r7, #16]
 800b072:	021b      	lsls	r3, r3, #8
 800b074:	b21a      	sxth	r2, r3
 800b076:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	b21b      	sxth	r3, r3
 800b07e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b080:	89fb      	ldrh	r3, [r7, #14]
}
 800b082:	4618      	mov	r0, r3
 800b084:	371c      	adds	r7, #28
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
	...

0800b090 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0a6:	2b40      	cmp	r3, #64	; 0x40
 800b0a8:	d005      	beq.n	800b0b6 <USBD_StdDevReq+0x26>
 800b0aa:	2b40      	cmp	r3, #64	; 0x40
 800b0ac:	d853      	bhi.n	800b156 <USBD_StdDevReq+0xc6>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00b      	beq.n	800b0ca <USBD_StdDevReq+0x3a>
 800b0b2:	2b20      	cmp	r3, #32
 800b0b4:	d14f      	bne.n	800b156 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	4798      	blx	r3
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c8:	e04a      	b.n	800b160 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	785b      	ldrb	r3, [r3, #1]
 800b0ce:	2b09      	cmp	r3, #9
 800b0d0:	d83b      	bhi.n	800b14a <USBD_StdDevReq+0xba>
 800b0d2:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <USBD_StdDevReq+0x48>)
 800b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d8:	0800b12d 	.word	0x0800b12d
 800b0dc:	0800b141 	.word	0x0800b141
 800b0e0:	0800b14b 	.word	0x0800b14b
 800b0e4:	0800b137 	.word	0x0800b137
 800b0e8:	0800b14b 	.word	0x0800b14b
 800b0ec:	0800b10b 	.word	0x0800b10b
 800b0f0:	0800b101 	.word	0x0800b101
 800b0f4:	0800b14b 	.word	0x0800b14b
 800b0f8:	0800b123 	.word	0x0800b123
 800b0fc:	0800b115 	.word	0x0800b115
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f9de 	bl	800b4c4 <USBD_GetDescriptor>
          break;
 800b108:	e024      	b.n	800b154 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fb6d 	bl	800b7ec <USBD_SetAddress>
          break;
 800b112:	e01f      	b.n	800b154 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fbac 	bl	800b874 <USBD_SetConfig>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]
          break;
 800b120:	e018      	b.n	800b154 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fc4b 	bl	800b9c0 <USBD_GetConfig>
          break;
 800b12a:	e013      	b.n	800b154 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fc7c 	bl	800ba2c <USBD_GetStatus>
          break;
 800b134:	e00e      	b.n	800b154 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fcab 	bl	800ba94 <USBD_SetFeature>
          break;
 800b13e:	e009      	b.n	800b154 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fcba 	bl	800babc <USBD_ClrFeature>
          break;
 800b148:	e004      	b.n	800b154 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fd11 	bl	800bb74 <USBD_CtlError>
          break;
 800b152:	bf00      	nop
      }
      break;
 800b154:	e004      	b.n	800b160 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fd0b 	bl	800bb74 <USBD_CtlError>
      break;
 800b15e:	bf00      	nop
  }

  return ret;
 800b160:	7bfb      	ldrb	r3, [r7, #15]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop

0800b16c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b182:	2b40      	cmp	r3, #64	; 0x40
 800b184:	d005      	beq.n	800b192 <USBD_StdItfReq+0x26>
 800b186:	2b40      	cmp	r3, #64	; 0x40
 800b188:	d82f      	bhi.n	800b1ea <USBD_StdItfReq+0x7e>
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <USBD_StdItfReq+0x26>
 800b18e:	2b20      	cmp	r3, #32
 800b190:	d12b      	bne.n	800b1ea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	3b01      	subs	r3, #1
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d81d      	bhi.n	800b1dc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	889b      	ldrh	r3, [r3, #4]
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d813      	bhi.n	800b1d2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	4798      	blx	r3
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	88db      	ldrh	r3, [r3, #6]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d110      	bne.n	800b1e6 <USBD_StdItfReq+0x7a>
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10d      	bne.n	800b1e6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fd9d 	bl	800bd0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1d0:	e009      	b.n	800b1e6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fccd 	bl	800bb74 <USBD_CtlError>
          break;
 800b1da:	e004      	b.n	800b1e6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fcc8 	bl	800bb74 <USBD_CtlError>
          break;
 800b1e4:	e000      	b.n	800b1e8 <USBD_StdItfReq+0x7c>
          break;
 800b1e6:	bf00      	nop
      }
      break;
 800b1e8:	e004      	b.n	800b1f4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fcc1 	bl	800bb74 <USBD_CtlError>
      break;
 800b1f2:	bf00      	nop
  }

  return ret;
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	889b      	ldrh	r3, [r3, #4]
 800b210:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b21a:	2b40      	cmp	r3, #64	; 0x40
 800b21c:	d007      	beq.n	800b22e <USBD_StdEPReq+0x30>
 800b21e:	2b40      	cmp	r3, #64	; 0x40
 800b220:	f200 8145 	bhi.w	800b4ae <USBD_StdEPReq+0x2b0>
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00c      	beq.n	800b242 <USBD_StdEPReq+0x44>
 800b228:	2b20      	cmp	r3, #32
 800b22a:	f040 8140 	bne.w	800b4ae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
 800b23c:	4603      	mov	r3, r0
 800b23e:	73fb      	strb	r3, [r7, #15]
      break;
 800b240:	e13a      	b.n	800b4b8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	785b      	ldrb	r3, [r3, #1]
 800b246:	2b03      	cmp	r3, #3
 800b248:	d007      	beq.n	800b25a <USBD_StdEPReq+0x5c>
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	f300 8129 	bgt.w	800b4a2 <USBD_StdEPReq+0x2a4>
 800b250:	2b00      	cmp	r3, #0
 800b252:	d07f      	beq.n	800b354 <USBD_StdEPReq+0x156>
 800b254:	2b01      	cmp	r3, #1
 800b256:	d03c      	beq.n	800b2d2 <USBD_StdEPReq+0xd4>
 800b258:	e123      	b.n	800b4a2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b02      	cmp	r3, #2
 800b264:	d002      	beq.n	800b26c <USBD_StdEPReq+0x6e>
 800b266:	2b03      	cmp	r3, #3
 800b268:	d016      	beq.n	800b298 <USBD_StdEPReq+0x9a>
 800b26a:	e02c      	b.n	800b2c6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00d      	beq.n	800b28e <USBD_StdEPReq+0x90>
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b80      	cmp	r3, #128	; 0x80
 800b276:	d00a      	beq.n	800b28e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f004 f91d 	bl	800f4bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b282:	2180      	movs	r1, #128	; 0x80
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f004 f919 	bl	800f4bc <USBD_LL_StallEP>
 800b28a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b28c:	e020      	b.n	800b2d0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fc6f 	bl	800bb74 <USBD_CtlError>
              break;
 800b296:	e01b      	b.n	800b2d0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	885b      	ldrh	r3, [r3, #2]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10e      	bne.n	800b2be <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00b      	beq.n	800b2be <USBD_StdEPReq+0xc0>
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
 800b2a8:	2b80      	cmp	r3, #128	; 0x80
 800b2aa:	d008      	beq.n	800b2be <USBD_StdEPReq+0xc0>
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	88db      	ldrh	r3, [r3, #6]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d104      	bne.n	800b2be <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f004 f8ff 	bl	800f4bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fd23 	bl	800bd0a <USBD_CtlSendStatus>

              break;
 800b2c4:	e004      	b.n	800b2d0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fc53 	bl	800bb74 <USBD_CtlError>
              break;
 800b2ce:	bf00      	nop
          }
          break;
 800b2d0:	e0ec      	b.n	800b4ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d002      	beq.n	800b2e4 <USBD_StdEPReq+0xe6>
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d016      	beq.n	800b310 <USBD_StdEPReq+0x112>
 800b2e2:	e030      	b.n	800b346 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00d      	beq.n	800b306 <USBD_StdEPReq+0x108>
 800b2ea:	7bbb      	ldrb	r3, [r7, #14]
 800b2ec:	2b80      	cmp	r3, #128	; 0x80
 800b2ee:	d00a      	beq.n	800b306 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2f0:	7bbb      	ldrb	r3, [r7, #14]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f004 f8e1 	bl	800f4bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2fa:	2180      	movs	r1, #128	; 0x80
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f004 f8dd 	bl	800f4bc <USBD_LL_StallEP>
 800b302:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b304:	e025      	b.n	800b352 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fc33 	bl	800bb74 <USBD_CtlError>
              break;
 800b30e:	e020      	b.n	800b352 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	885b      	ldrh	r3, [r3, #2]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d11b      	bne.n	800b350 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d004      	beq.n	800b32c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f004 f8fe 	bl	800f528 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fcec 	bl	800bd0a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	4798      	blx	r3
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b344:	e004      	b.n	800b350 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fc13 	bl	800bb74 <USBD_CtlError>
              break;
 800b34e:	e000      	b.n	800b352 <USBD_StdEPReq+0x154>
              break;
 800b350:	bf00      	nop
          }
          break;
 800b352:	e0ab      	b.n	800b4ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d002      	beq.n	800b366 <USBD_StdEPReq+0x168>
 800b360:	2b03      	cmp	r3, #3
 800b362:	d032      	beq.n	800b3ca <USBD_StdEPReq+0x1cc>
 800b364:	e097      	b.n	800b496 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d007      	beq.n	800b37c <USBD_StdEPReq+0x17e>
 800b36c:	7bbb      	ldrb	r3, [r7, #14]
 800b36e:	2b80      	cmp	r3, #128	; 0x80
 800b370:	d004      	beq.n	800b37c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fbfd 	bl	800bb74 <USBD_CtlError>
                break;
 800b37a:	e091      	b.n	800b4a0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b37c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b380:	2b00      	cmp	r3, #0
 800b382:	da0b      	bge.n	800b39c <USBD_StdEPReq+0x19e>
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b38a:	4613      	mov	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	3310      	adds	r3, #16
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	4413      	add	r3, r2
 800b398:	3304      	adds	r3, #4
 800b39a:	e00b      	b.n	800b3b4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
 800b39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fc47 	bl	800bc56 <USBD_CtlSendData>
              break;
 800b3c8:	e06a      	b.n	800b4a0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b3ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	da11      	bge.n	800b3f6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	f003 020f 	and.w	r2, r3, #15
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	440b      	add	r3, r1
 800b3e4:	3324      	adds	r3, #36	; 0x24
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d117      	bne.n	800b41c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fbc0 	bl	800bb74 <USBD_CtlError>
                  break;
 800b3f4:	e054      	b.n	800b4a0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3f6:	7bbb      	ldrb	r3, [r7, #14]
 800b3f8:	f003 020f 	and.w	r2, r3, #15
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	4613      	mov	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	440b      	add	r3, r1
 800b408:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d104      	bne.n	800b41c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fbad 	bl	800bb74 <USBD_CtlError>
                  break;
 800b41a:	e041      	b.n	800b4a0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b41c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b420:	2b00      	cmp	r3, #0
 800b422:	da0b      	bge.n	800b43c <USBD_StdEPReq+0x23e>
 800b424:	7bbb      	ldrb	r3, [r7, #14]
 800b426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b42a:	4613      	mov	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	3310      	adds	r3, #16
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	4413      	add	r3, r2
 800b438:	3304      	adds	r3, #4
 800b43a:	e00b      	b.n	800b454 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	4413      	add	r3, r2
 800b452:	3304      	adds	r3, #4
 800b454:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <USBD_StdEPReq+0x264>
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b80      	cmp	r3, #128	; 0x80
 800b460:	d103      	bne.n	800b46a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	e00e      	b.n	800b488 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f004 f890 	bl	800f594 <USBD_LL_IsStallEP>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2201      	movs	r2, #1
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	e002      	b.n	800b488 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2200      	movs	r2, #0
 800b486:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2202      	movs	r2, #2
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fbe1 	bl	800bc56 <USBD_CtlSendData>
              break;
 800b494:	e004      	b.n	800b4a0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fb6b 	bl	800bb74 <USBD_CtlError>
              break;
 800b49e:	bf00      	nop
          }
          break;
 800b4a0:	e004      	b.n	800b4ac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fb65 	bl	800bb74 <USBD_CtlError>
          break;
 800b4aa:	bf00      	nop
      }
      break;
 800b4ac:	e004      	b.n	800b4b8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fb5f 	bl	800bb74 <USBD_CtlError>
      break;
 800b4b6:	bf00      	nop
  }

  return ret;
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
	...

0800b4c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	885b      	ldrh	r3, [r3, #2]
 800b4de:	0a1b      	lsrs	r3, r3, #8
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	2b0e      	cmp	r3, #14
 800b4e6:	f200 8152 	bhi.w	800b78e <USBD_GetDescriptor+0x2ca>
 800b4ea:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <USBD_GetDescriptor+0x2c>)
 800b4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f0:	0800b561 	.word	0x0800b561
 800b4f4:	0800b579 	.word	0x0800b579
 800b4f8:	0800b5b9 	.word	0x0800b5b9
 800b4fc:	0800b78f 	.word	0x0800b78f
 800b500:	0800b78f 	.word	0x0800b78f
 800b504:	0800b72f 	.word	0x0800b72f
 800b508:	0800b75b 	.word	0x0800b75b
 800b50c:	0800b78f 	.word	0x0800b78f
 800b510:	0800b78f 	.word	0x0800b78f
 800b514:	0800b78f 	.word	0x0800b78f
 800b518:	0800b78f 	.word	0x0800b78f
 800b51c:	0800b78f 	.word	0x0800b78f
 800b520:	0800b78f 	.word	0x0800b78f
 800b524:	0800b78f 	.word	0x0800b78f
 800b528:	0800b52d 	.word	0x0800b52d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00b      	beq.n	800b550 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	7c12      	ldrb	r2, [r2, #16]
 800b544:	f107 0108 	add.w	r1, r7, #8
 800b548:	4610      	mov	r0, r2
 800b54a:	4798      	blx	r3
 800b54c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b54e:	e126      	b.n	800b79e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fb0e 	bl	800bb74 <USBD_CtlError>
        err++;
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	3301      	adds	r3, #1
 800b55c:	72fb      	strb	r3, [r7, #11]
      break;
 800b55e:	e11e      	b.n	800b79e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
      break;
 800b576:	e112      	b.n	800b79e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	7c1b      	ldrb	r3, [r3, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10d      	bne.n	800b59c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b588:	f107 0208 	add.w	r2, r7, #8
 800b58c:	4610      	mov	r0, r2
 800b58e:	4798      	blx	r3
 800b590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	3301      	adds	r3, #1
 800b596:	2202      	movs	r2, #2
 800b598:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b59a:	e100      	b.n	800b79e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	f107 0208 	add.w	r2, r7, #8
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	4798      	blx	r3
 800b5ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	701a      	strb	r2, [r3, #0]
      break;
 800b5b6:	e0f2      	b.n	800b79e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	885b      	ldrh	r3, [r3, #2]
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b05      	cmp	r3, #5
 800b5c0:	f200 80ac 	bhi.w	800b71c <USBD_GetDescriptor+0x258>
 800b5c4:	a201      	add	r2, pc, #4	; (adr r2, 800b5cc <USBD_GetDescriptor+0x108>)
 800b5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ca:	bf00      	nop
 800b5cc:	0800b5e5 	.word	0x0800b5e5
 800b5d0:	0800b619 	.word	0x0800b619
 800b5d4:	0800b64d 	.word	0x0800b64d
 800b5d8:	0800b681 	.word	0x0800b681
 800b5dc:	0800b6b5 	.word	0x0800b6b5
 800b5e0:	0800b6e9 	.word	0x0800b6e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00b      	beq.n	800b608 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	7c12      	ldrb	r2, [r2, #16]
 800b5fc:	f107 0108 	add.w	r1, r7, #8
 800b600:	4610      	mov	r0, r2
 800b602:	4798      	blx	r3
 800b604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b606:	e091      	b.n	800b72c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fab2 	bl	800bb74 <USBD_CtlError>
            err++;
 800b610:	7afb      	ldrb	r3, [r7, #11]
 800b612:	3301      	adds	r3, #1
 800b614:	72fb      	strb	r3, [r7, #11]
          break;
 800b616:	e089      	b.n	800b72c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00b      	beq.n	800b63c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	7c12      	ldrb	r2, [r2, #16]
 800b630:	f107 0108 	add.w	r1, r7, #8
 800b634:	4610      	mov	r0, r2
 800b636:	4798      	blx	r3
 800b638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b63a:	e077      	b.n	800b72c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b63c:	6839      	ldr	r1, [r7, #0]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fa98 	bl	800bb74 <USBD_CtlError>
            err++;
 800b644:	7afb      	ldrb	r3, [r7, #11]
 800b646:	3301      	adds	r3, #1
 800b648:	72fb      	strb	r3, [r7, #11]
          break;
 800b64a:	e06f      	b.n	800b72c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00b      	beq.n	800b670 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	7c12      	ldrb	r2, [r2, #16]
 800b664:	f107 0108 	add.w	r1, r7, #8
 800b668:	4610      	mov	r0, r2
 800b66a:	4798      	blx	r3
 800b66c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b66e:	e05d      	b.n	800b72c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fa7e 	bl	800bb74 <USBD_CtlError>
            err++;
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	3301      	adds	r3, #1
 800b67c:	72fb      	strb	r3, [r7, #11]
          break;
 800b67e:	e055      	b.n	800b72c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00b      	beq.n	800b6a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	7c12      	ldrb	r2, [r2, #16]
 800b698:	f107 0108 	add.w	r1, r7, #8
 800b69c:	4610      	mov	r0, r2
 800b69e:	4798      	blx	r3
 800b6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6a2:	e043      	b.n	800b72c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa64 	bl	800bb74 <USBD_CtlError>
            err++;
 800b6ac:	7afb      	ldrb	r3, [r7, #11]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6b2:	e03b      	b.n	800b72c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00b      	beq.n	800b6d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	7c12      	ldrb	r2, [r2, #16]
 800b6cc:	f107 0108 	add.w	r1, r7, #8
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	4798      	blx	r3
 800b6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6d6:	e029      	b.n	800b72c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fa4a 	bl	800bb74 <USBD_CtlError>
            err++;
 800b6e0:	7afb      	ldrb	r3, [r7, #11]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b6e6:	e021      	b.n	800b72c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00b      	beq.n	800b70c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	7c12      	ldrb	r2, [r2, #16]
 800b700:	f107 0108 	add.w	r1, r7, #8
 800b704:	4610      	mov	r0, r2
 800b706:	4798      	blx	r3
 800b708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b70a:	e00f      	b.n	800b72c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fa30 	bl	800bb74 <USBD_CtlError>
            err++;
 800b714:	7afb      	ldrb	r3, [r7, #11]
 800b716:	3301      	adds	r3, #1
 800b718:	72fb      	strb	r3, [r7, #11]
          break;
 800b71a:	e007      	b.n	800b72c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fa28 	bl	800bb74 <USBD_CtlError>
          err++;
 800b724:	7afb      	ldrb	r3, [r7, #11]
 800b726:	3301      	adds	r3, #1
 800b728:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b72a:	bf00      	nop
      }
      break;
 800b72c:	e037      	b.n	800b79e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	7c1b      	ldrb	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d109      	bne.n	800b74a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b73e:	f107 0208 	add.w	r2, r7, #8
 800b742:	4610      	mov	r0, r2
 800b744:	4798      	blx	r3
 800b746:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b748:	e029      	b.n	800b79e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fa11 	bl	800bb74 <USBD_CtlError>
        err++;
 800b752:	7afb      	ldrb	r3, [r7, #11]
 800b754:	3301      	adds	r3, #1
 800b756:	72fb      	strb	r3, [r7, #11]
      break;
 800b758:	e021      	b.n	800b79e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7c1b      	ldrb	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10d      	bne.n	800b77e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76a:	f107 0208 	add.w	r2, r7, #8
 800b76e:	4610      	mov	r0, r2
 800b770:	4798      	blx	r3
 800b772:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3301      	adds	r3, #1
 800b778:	2207      	movs	r2, #7
 800b77a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b77c:	e00f      	b.n	800b79e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f9f7 	bl	800bb74 <USBD_CtlError>
        err++;
 800b786:	7afb      	ldrb	r3, [r7, #11]
 800b788:	3301      	adds	r3, #1
 800b78a:	72fb      	strb	r3, [r7, #11]
      break;
 800b78c:	e007      	b.n	800b79e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f9ef 	bl	800bb74 <USBD_CtlError>
      err++;
 800b796:	7afb      	ldrb	r3, [r7, #11]
 800b798:	3301      	adds	r3, #1
 800b79a:	72fb      	strb	r3, [r7, #11]
      break;
 800b79c:	bf00      	nop
  }

  if (err != 0U)
 800b79e:	7afb      	ldrb	r3, [r7, #11]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d11e      	bne.n	800b7e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	88db      	ldrh	r3, [r3, #6]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d016      	beq.n	800b7da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b7ac:	893b      	ldrh	r3, [r7, #8]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00e      	beq.n	800b7d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	88da      	ldrh	r2, [r3, #6]
 800b7b6:	893b      	ldrh	r3, [r7, #8]
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	bf28      	it	cs
 800b7bc:	4613      	movcs	r3, r2
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7c2:	893b      	ldrh	r3, [r7, #8]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fa44 	bl	800bc56 <USBD_CtlSendData>
 800b7ce:	e009      	b.n	800b7e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f9ce 	bl	800bb74 <USBD_CtlError>
 800b7d8:	e004      	b.n	800b7e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa95 	bl	800bd0a <USBD_CtlSendStatus>
 800b7e0:	e000      	b.n	800b7e4 <USBD_GetDescriptor+0x320>
    return;
 800b7e2:	bf00      	nop
  }
}
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop

0800b7ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	889b      	ldrh	r3, [r3, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d131      	bne.n	800b862 <USBD_SetAddress+0x76>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	88db      	ldrh	r3, [r3, #6]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d12d      	bne.n	800b862 <USBD_SetAddress+0x76>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	885b      	ldrh	r3, [r3, #2]
 800b80a:	2b7f      	cmp	r3, #127	; 0x7f
 800b80c:	d829      	bhi.n	800b862 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	885b      	ldrh	r3, [r3, #2]
 800b812:	b2db      	uxtb	r3, r3
 800b814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b818:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b03      	cmp	r3, #3
 800b824:	d104      	bne.n	800b830 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f9a3 	bl	800bb74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b82e:	e01d      	b.n	800b86c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	7bfa      	ldrb	r2, [r7, #15]
 800b834:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b838:	7bfb      	ldrb	r3, [r7, #15]
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f003 fed5 	bl	800f5ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fa61 	bl	800bd0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d004      	beq.n	800b858 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2202      	movs	r2, #2
 800b852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b856:	e009      	b.n	800b86c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b860:	e004      	b.n	800b86c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f985 	bl	800bb74 <USBD_CtlError>
  }
}
 800b86a:	bf00      	nop
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	885b      	ldrh	r3, [r3, #2]
 800b886:	b2da      	uxtb	r2, r3
 800b888:	4b4c      	ldr	r3, [pc, #304]	; (800b9bc <USBD_SetConfig+0x148>)
 800b88a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b88c:	4b4b      	ldr	r3, [pc, #300]	; (800b9bc <USBD_SetConfig+0x148>)
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d905      	bls.n	800b8a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f96c 	bl	800bb74 <USBD_CtlError>
    return USBD_FAIL;
 800b89c:	2303      	movs	r3, #3
 800b89e:	e088      	b.n	800b9b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d002      	beq.n	800b8b2 <USBD_SetConfig+0x3e>
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d025      	beq.n	800b8fc <USBD_SetConfig+0x88>
 800b8b0:	e071      	b.n	800b996 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b8b2:	4b42      	ldr	r3, [pc, #264]	; (800b9bc <USBD_SetConfig+0x148>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d01c      	beq.n	800b8f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b8ba:	4b40      	ldr	r3, [pc, #256]	; (800b9bc <USBD_SetConfig+0x148>)
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8c4:	4b3d      	ldr	r3, [pc, #244]	; (800b9bc <USBD_SetConfig+0x148>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff f91e 	bl	800ab0c <USBD_SetClassConfig>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d004      	beq.n	800b8e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f949 	bl	800bb74 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8e2:	e065      	b.n	800b9b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fa10 	bl	800bd0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2203      	movs	r2, #3
 800b8ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8f2:	e05d      	b.n	800b9b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fa08 	bl	800bd0a <USBD_CtlSendStatus>
      break;
 800b8fa:	e059      	b.n	800b9b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b8fc:	4b2f      	ldr	r3, [pc, #188]	; (800b9bc <USBD_SetConfig+0x148>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d112      	bne.n	800b92a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b90c:	4b2b      	ldr	r3, [pc, #172]	; (800b9bc <USBD_SetConfig+0x148>)
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	461a      	mov	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b916:	4b29      	ldr	r3, [pc, #164]	; (800b9bc <USBD_SetConfig+0x148>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7ff f911 	bl	800ab44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f9f1 	bl	800bd0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b928:	e042      	b.n	800b9b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b92a:	4b24      	ldr	r3, [pc, #144]	; (800b9bc <USBD_SetConfig+0x148>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d02a      	beq.n	800b98e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff f8ff 	bl	800ab44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b946:	4b1d      	ldr	r3, [pc, #116]	; (800b9bc <USBD_SetConfig+0x148>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b950:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <USBD_SetConfig+0x148>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff f8d8 	bl	800ab0c <USBD_SetClassConfig>
 800b95c:	4603      	mov	r3, r0
 800b95e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00f      	beq.n	800b986 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f903 	bl	800bb74 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	b2db      	uxtb	r3, r3
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff f8e4 	bl	800ab44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2202      	movs	r2, #2
 800b980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b984:	e014      	b.n	800b9b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f9bf 	bl	800bd0a <USBD_CtlSendStatus>
      break;
 800b98c:	e010      	b.n	800b9b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f9bb 	bl	800bd0a <USBD_CtlSendStatus>
      break;
 800b994:	e00c      	b.n	800b9b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 f8eb 	bl	800bb74 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b99e:	4b07      	ldr	r3, [pc, #28]	; (800b9bc <USBD_SetConfig+0x148>)
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff f8cd 	bl	800ab44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ae:	bf00      	nop
  }

  return ret;
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	200008c4 	.word	0x200008c4

0800b9c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	88db      	ldrh	r3, [r3, #6]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d004      	beq.n	800b9dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f8cd 	bl	800bb74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b9da:	e023      	b.n	800ba24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	dc02      	bgt.n	800b9ee <USBD_GetConfig+0x2e>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	dc03      	bgt.n	800b9f4 <USBD_GetConfig+0x34>
 800b9ec:	e015      	b.n	800ba1a <USBD_GetConfig+0x5a>
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d00b      	beq.n	800ba0a <USBD_GetConfig+0x4a>
 800b9f2:	e012      	b.n	800ba1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	3308      	adds	r3, #8
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f927 	bl	800bc56 <USBD_CtlSendData>
        break;
 800ba08:	e00c      	b.n	800ba24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f91f 	bl	800bc56 <USBD_CtlSendData>
        break;
 800ba18:	e004      	b.n	800ba24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f8a9 	bl	800bb74 <USBD_CtlError>
        break;
 800ba22:	bf00      	nop
}
 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d81e      	bhi.n	800ba82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	88db      	ldrh	r3, [r3, #6]
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d004      	beq.n	800ba56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f890 	bl	800bb74 <USBD_CtlError>
        break;
 800ba54:	e01a      	b.n	800ba8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d005      	beq.n	800ba72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	f043 0202 	orr.w	r2, r3, #2
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	330c      	adds	r3, #12
 800ba76:	2202      	movs	r2, #2
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f8eb 	bl	800bc56 <USBD_CtlSendData>
      break;
 800ba80:	e004      	b.n	800ba8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f875 	bl	800bb74 <USBD_CtlError>
      break;
 800ba8a:	bf00      	nop
  }
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	885b      	ldrh	r3, [r3, #2]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d106      	bne.n	800bab4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f92b 	bl	800bd0a <USBD_CtlSendStatus>
  }
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	3b01      	subs	r3, #1
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d80b      	bhi.n	800baec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	885b      	ldrh	r3, [r3, #2]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d10c      	bne.n	800baf6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f910 	bl	800bd0a <USBD_CtlSendStatus>
      }
      break;
 800baea:	e004      	b.n	800baf6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f840 	bl	800bb74 <USBD_CtlError>
      break;
 800baf4:	e000      	b.n	800baf8 <USBD_ClrFeature+0x3c>
      break;
 800baf6:	bf00      	nop
  }
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	781a      	ldrb	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	781a      	ldrb	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3301      	adds	r3, #1
 800bb28:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff fa91 	bl	800b052 <SWAPBYTE>
 800bb30:	4603      	mov	r3, r0
 800bb32:	461a      	mov	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3301      	adds	r3, #1
 800bb42:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f7ff fa84 	bl	800b052 <SWAPBYTE>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3301      	adds	r3, #1
 800bb56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f7ff fa77 	bl	800b052 <SWAPBYTE>
 800bb64:	4603      	mov	r3, r0
 800bb66:	461a      	mov	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	80da      	strh	r2, [r3, #6]
}
 800bb6c:	bf00      	nop
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb7e:	2180      	movs	r1, #128	; 0x80
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f003 fc9b 	bl	800f4bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb86:	2100      	movs	r1, #0
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f003 fc97 	bl	800f4bc <USBD_LL_StallEP>
}
 800bb8e:	bf00      	nop
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b086      	sub	sp, #24
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bba2:	2300      	movs	r3, #0
 800bba4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d036      	beq.n	800bc1a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bbb0:	6938      	ldr	r0, [r7, #16]
 800bbb2:	f000 f836 	bl	800bc22 <USBD_GetLen>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	3301      	adds	r3, #1
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	4413      	add	r3, r2
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	7812      	ldrb	r2, [r2, #0]
 800bbce:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	4413      	add	r3, r2
 800bbdc:	2203      	movs	r2, #3
 800bbde:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bbe6:	e013      	b.n	800bc10 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	4413      	add	r3, r2
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	7812      	ldrb	r2, [r2, #0]
 800bbf2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	613b      	str	r3, [r7, #16]
    idx++;
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	4413      	add	r3, r2
 800bc06:	2200      	movs	r2, #0
 800bc08:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1e7      	bne.n	800bbe8 <USBD_GetString+0x52>
 800bc18:	e000      	b.n	800bc1c <USBD_GetString+0x86>
    return;
 800bc1a:	bf00      	nop
  }
}
 800bc1c:	3718      	adds	r7, #24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b085      	sub	sp, #20
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc32:	e005      	b.n	800bc40 <USBD_GetLen+0x1e>
  {
    len++;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	3301      	adds	r3, #1
 800bc38:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1f5      	bne.n	800bc34 <USBD_GetLen+0x12>
  }

  return len;
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b084      	sub	sp, #16
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	60f8      	str	r0, [r7, #12]
 800bc5e:	60b9      	str	r1, [r7, #8]
 800bc60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2202      	movs	r2, #2
 800bc66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f003 fceb 	bl	800f658 <USBD_LL_Transmit>

  return USBD_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f003 fcda 	bl	800f658 <USBD_LL_Transmit>

  return USBD_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	60b9      	str	r1, [r7, #8]
 800bcb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2203      	movs	r2, #3
 800bcbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f003 fcf5 	bl	800f6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f003 fce4 	bl	800f6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2204      	movs	r2, #4
 800bd16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	2100      	movs	r1, #0
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f003 fc99 	bl	800f658 <USBD_LL_Transmit>

  return USBD_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2205      	movs	r2, #5
 800bd3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd40:	2300      	movs	r3, #0
 800bd42:	2200      	movs	r2, #0
 800bd44:	2100      	movs	r1, #0
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f003 fcbe 	bl	800f6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bd62:	79fb      	ldrb	r3, [r7, #7]
 800bd64:	4a08      	ldr	r2, [pc, #32]	; (800bd88 <disk_status+0x30>)
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	79fa      	ldrb	r2, [r7, #7]
 800bd70:	4905      	ldr	r1, [pc, #20]	; (800bd88 <disk_status+0x30>)
 800bd72:	440a      	add	r2, r1
 800bd74:	7a12      	ldrb	r2, [r2, #8]
 800bd76:	4610      	mov	r0, r2
 800bd78:	4798      	blx	r3
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	200008f0 	.word	0x200008f0

0800bd8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bd96:	2300      	movs	r3, #0
 800bd98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bd9a:	79fb      	ldrb	r3, [r7, #7]
 800bd9c:	4a0d      	ldr	r2, [pc, #52]	; (800bdd4 <disk_initialize+0x48>)
 800bd9e:	5cd3      	ldrb	r3, [r2, r3]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d111      	bne.n	800bdc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	4a0b      	ldr	r2, [pc, #44]	; (800bdd4 <disk_initialize+0x48>)
 800bda8:	2101      	movs	r1, #1
 800bdaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	4a09      	ldr	r2, [pc, #36]	; (800bdd4 <disk_initialize+0x48>)
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	79fa      	ldrb	r2, [r7, #7]
 800bdba:	4906      	ldr	r1, [pc, #24]	; (800bdd4 <disk_initialize+0x48>)
 800bdbc:	440a      	add	r2, r1
 800bdbe:	7a12      	ldrb	r2, [r2, #8]
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	200008f0 	.word	0x200008f0

0800bdd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bdd8:	b590      	push	{r4, r7, lr}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	603b      	str	r3, [r7, #0]
 800bde4:	4603      	mov	r3, r0
 800bde6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
 800bdea:	4a0a      	ldr	r2, [pc, #40]	; (800be14 <disk_read+0x3c>)
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	689c      	ldr	r4, [r3, #8]
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	4a07      	ldr	r2, [pc, #28]	; (800be14 <disk_read+0x3c>)
 800bdf8:	4413      	add	r3, r2
 800bdfa:	7a18      	ldrb	r0, [r3, #8]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	68b9      	ldr	r1, [r7, #8]
 800be02:	47a0      	blx	r4
 800be04:	4603      	mov	r3, r0
 800be06:	75fb      	strb	r3, [r7, #23]
  return res;
 800be08:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	371c      	adds	r7, #28
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd90      	pop	{r4, r7, pc}
 800be12:	bf00      	nop
 800be14:	200008f0 	.word	0x200008f0

0800be18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800be18:	b590      	push	{r4, r7, lr}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60b9      	str	r1, [r7, #8]
 800be20:	607a      	str	r2, [r7, #4]
 800be22:	603b      	str	r3, [r7, #0]
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	4a0a      	ldr	r2, [pc, #40]	; (800be54 <disk_write+0x3c>)
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4413      	add	r3, r2
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	68dc      	ldr	r4, [r3, #12]
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	4a07      	ldr	r2, [pc, #28]	; (800be54 <disk_write+0x3c>)
 800be38:	4413      	add	r3, r2
 800be3a:	7a18      	ldrb	r0, [r3, #8]
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	68b9      	ldr	r1, [r7, #8]
 800be42:	47a0      	blx	r4
 800be44:	4603      	mov	r3, r0
 800be46:	75fb      	strb	r3, [r7, #23]
  return res;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd90      	pop	{r4, r7, pc}
 800be52:	bf00      	nop
 800be54:	200008f0 	.word	0x200008f0

0800be58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	603a      	str	r2, [r7, #0]
 800be62:	71fb      	strb	r3, [r7, #7]
 800be64:	460b      	mov	r3, r1
 800be66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800be68:	79fb      	ldrb	r3, [r7, #7]
 800be6a:	4a09      	ldr	r2, [pc, #36]	; (800be90 <disk_ioctl+0x38>)
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	79fa      	ldrb	r2, [r7, #7]
 800be76:	4906      	ldr	r1, [pc, #24]	; (800be90 <disk_ioctl+0x38>)
 800be78:	440a      	add	r2, r1
 800be7a:	7a10      	ldrb	r0, [r2, #8]
 800be7c:	79b9      	ldrb	r1, [r7, #6]
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4798      	blx	r3
 800be82:	4603      	mov	r3, r0
 800be84:	73fb      	strb	r3, [r7, #15]
  return res;
 800be86:	7bfb      	ldrb	r3, [r7, #15]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	200008f0 	.word	0x200008f0

0800be94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3301      	adds	r3, #1
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bea4:	89fb      	ldrh	r3, [r7, #14]
 800bea6:	021b      	lsls	r3, r3, #8
 800bea8:	b21a      	sxth	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	b21b      	sxth	r3, r3
 800beb0:	4313      	orrs	r3, r2
 800beb2:	b21b      	sxth	r3, r3
 800beb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800beb6:	89fb      	ldrh	r3, [r7, #14]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3303      	adds	r3, #3
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	3202      	adds	r2, #2
 800bedc:	7812      	ldrb	r2, [r2, #0]
 800bede:	4313      	orrs	r3, r2
 800bee0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	021b      	lsls	r3, r3, #8
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	3201      	adds	r2, #1
 800beea:	7812      	ldrb	r2, [r2, #0]
 800beec:	4313      	orrs	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	021b      	lsls	r3, r3, #8
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	7812      	ldrb	r2, [r2, #0]
 800bef8:	4313      	orrs	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]
	return rv;
 800befc:	68fb      	ldr	r3, [r7, #12]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3714      	adds	r7, #20
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	b083      	sub	sp, #12
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	460b      	mov	r3, r1
 800bf14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	887a      	ldrh	r2, [r7, #2]
 800bf1e:	b2d2      	uxtb	r2, r2
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	887b      	ldrh	r3, [r7, #2]
 800bf24:	0a1b      	lsrs	r3, r3, #8
 800bf26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	607a      	str	r2, [r7, #4]
 800bf2e:	887a      	ldrh	r2, [r7, #2]
 800bf30:	b2d2      	uxtb	r2, r2
 800bf32:	701a      	strb	r2, [r3, #0]
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	0a1b      	lsrs	r3, r3, #8
 800bf5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	607a      	str	r2, [r7, #4]
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	b2d2      	uxtb	r2, r2
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	0a1b      	lsrs	r3, r3, #8
 800bf7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	b2d2      	uxtb	r2, r2
 800bf8a:	701a      	strb	r2, [r3, #0]
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bf98:	b480      	push	{r7}
 800bf9a:	b087      	sub	sp, #28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00d      	beq.n	800bfce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	1c53      	adds	r3, r2, #1
 800bfb6:	613b      	str	r3, [r7, #16]
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	1c59      	adds	r1, r3, #1
 800bfbc:	6179      	str	r1, [r7, #20]
 800bfbe:	7812      	ldrb	r2, [r2, #0]
 800bfc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	607b      	str	r3, [r7, #4]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f1      	bne.n	800bfb2 <mem_cpy+0x1a>
	}
}
 800bfce:	bf00      	nop
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bfda:	b480      	push	{r7}
 800bfdc:	b087      	sub	sp, #28
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	617a      	str	r2, [r7, #20]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	b2d2      	uxtb	r2, r2
 800bff4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	607b      	str	r3, [r7, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1f3      	bne.n	800bfea <mem_set+0x10>
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	371c      	adds	r7, #28
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c010:	b480      	push	{r7}
 800c012:	b089      	sub	sp, #36	; 0x24
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	61fb      	str	r3, [r7, #28]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	61fa      	str	r2, [r7, #28]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	4619      	mov	r1, r3
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	61ba      	str	r2, [r7, #24]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	1acb      	subs	r3, r1, r3
 800c03c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3b01      	subs	r3, #1
 800c042:	607b      	str	r3, [r7, #4]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d002      	beq.n	800c050 <mem_cmp+0x40>
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d0eb      	beq.n	800c028 <mem_cmp+0x18>

	return r;
 800c050:	697b      	ldr	r3, [r7, #20]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3724      	adds	r7, #36	; 0x24
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c05e:	b480      	push	{r7}
 800c060:	b083      	sub	sp, #12
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c068:	e002      	b.n	800c070 <chk_chr+0x12>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3301      	adds	r3, #1
 800c06e:	607b      	str	r3, [r7, #4]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <chk_chr+0x26>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	4293      	cmp	r3, r2
 800c082:	d1f2      	bne.n	800c06a <chk_chr+0xc>
	return *str;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	781b      	ldrb	r3, [r3, #0]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60bb      	str	r3, [r7, #8]
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	60fb      	str	r3, [r7, #12]
 800c0a6:	e029      	b.n	800c0fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c0a8:	4a27      	ldr	r2, [pc, #156]	; (800c148 <chk_lock+0xb4>)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	4413      	add	r3, r2
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d01d      	beq.n	800c0f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0b6:	4a24      	ldr	r2, [pc, #144]	; (800c148 <chk_lock+0xb4>)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	011b      	lsls	r3, r3, #4
 800c0bc:	4413      	add	r3, r2
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d116      	bne.n	800c0f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c0c8:	4a1f      	ldr	r2, [pc, #124]	; (800c148 <chk_lock+0xb4>)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	011b      	lsls	r3, r3, #4
 800c0ce:	4413      	add	r3, r2
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d10c      	bne.n	800c0f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0dc:	4a1a      	ldr	r2, [pc, #104]	; (800c148 <chk_lock+0xb4>)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	011b      	lsls	r3, r3, #4
 800c0e2:	4413      	add	r3, r2
 800c0e4:	3308      	adds	r3, #8
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d102      	bne.n	800c0f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0f0:	e007      	b.n	800c102 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d9d2      	bls.n	800c0a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b02      	cmp	r3, #2
 800c106:	d109      	bne.n	800c11c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d102      	bne.n	800c114 <chk_lock+0x80>
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b02      	cmp	r3, #2
 800c112:	d101      	bne.n	800c118 <chk_lock+0x84>
 800c114:	2300      	movs	r3, #0
 800c116:	e010      	b.n	800c13a <chk_lock+0xa6>
 800c118:	2312      	movs	r3, #18
 800c11a:	e00e      	b.n	800c13a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d108      	bne.n	800c134 <chk_lock+0xa0>
 800c122:	4a09      	ldr	r2, [pc, #36]	; (800c148 <chk_lock+0xb4>)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	011b      	lsls	r3, r3, #4
 800c128:	4413      	add	r3, r2
 800c12a:	330c      	adds	r3, #12
 800c12c:	881b      	ldrh	r3, [r3, #0]
 800c12e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c132:	d101      	bne.n	800c138 <chk_lock+0xa4>
 800c134:	2310      	movs	r3, #16
 800c136:	e000      	b.n	800c13a <chk_lock+0xa6>
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	200008d0 	.word	0x200008d0

0800c14c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c152:	2300      	movs	r3, #0
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	e002      	b.n	800c15e <enq_lock+0x12>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	3301      	adds	r3, #1
 800c15c:	607b      	str	r3, [r7, #4]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d806      	bhi.n	800c172 <enq_lock+0x26>
 800c164:	4a09      	ldr	r2, [pc, #36]	; (800c18c <enq_lock+0x40>)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	011b      	lsls	r3, r3, #4
 800c16a:	4413      	add	r3, r2
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1f2      	bne.n	800c158 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b02      	cmp	r3, #2
 800c176:	bf14      	ite	ne
 800c178:	2301      	movne	r3, #1
 800c17a:	2300      	moveq	r3, #0
 800c17c:	b2db      	uxtb	r3, r3
}
 800c17e:	4618      	mov	r0, r3
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	200008d0 	.word	0x200008d0

0800c190 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	e01f      	b.n	800c1e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c1a0:	4a41      	ldr	r2, [pc, #260]	; (800c2a8 <inc_lock+0x118>)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	011b      	lsls	r3, r3, #4
 800c1a6:	4413      	add	r3, r2
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d113      	bne.n	800c1da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c1b2:	4a3d      	ldr	r2, [pc, #244]	; (800c2a8 <inc_lock+0x118>)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	011b      	lsls	r3, r3, #4
 800c1b8:	4413      	add	r3, r2
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d109      	bne.n	800c1da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c1c6:	4a38      	ldr	r2, [pc, #224]	; (800c2a8 <inc_lock+0x118>)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	011b      	lsls	r3, r3, #4
 800c1cc:	4413      	add	r3, r2
 800c1ce:	3308      	adds	r3, #8
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d006      	beq.n	800c1e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	60fb      	str	r3, [r7, #12]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d9dc      	bls.n	800c1a0 <inc_lock+0x10>
 800c1e6:	e000      	b.n	800c1ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c1e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d132      	bne.n	800c256 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	e002      	b.n	800c1fc <inc_lock+0x6c>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d806      	bhi.n	800c210 <inc_lock+0x80>
 800c202:	4a29      	ldr	r2, [pc, #164]	; (800c2a8 <inc_lock+0x118>)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	011b      	lsls	r3, r3, #4
 800c208:	4413      	add	r3, r2
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1f2      	bne.n	800c1f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d101      	bne.n	800c21a <inc_lock+0x8a>
 800c216:	2300      	movs	r3, #0
 800c218:	e040      	b.n	800c29c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	4922      	ldr	r1, [pc, #136]	; (800c2a8 <inc_lock+0x118>)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	011b      	lsls	r3, r3, #4
 800c224:	440b      	add	r3, r1
 800c226:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	689a      	ldr	r2, [r3, #8]
 800c22c:	491e      	ldr	r1, [pc, #120]	; (800c2a8 <inc_lock+0x118>)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	011b      	lsls	r3, r3, #4
 800c232:	440b      	add	r3, r1
 800c234:	3304      	adds	r3, #4
 800c236:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	695a      	ldr	r2, [r3, #20]
 800c23c:	491a      	ldr	r1, [pc, #104]	; (800c2a8 <inc_lock+0x118>)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	011b      	lsls	r3, r3, #4
 800c242:	440b      	add	r3, r1
 800c244:	3308      	adds	r3, #8
 800c246:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c248:	4a17      	ldr	r2, [pc, #92]	; (800c2a8 <inc_lock+0x118>)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	011b      	lsls	r3, r3, #4
 800c24e:	4413      	add	r3, r2
 800c250:	330c      	adds	r3, #12
 800c252:	2200      	movs	r2, #0
 800c254:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d009      	beq.n	800c270 <inc_lock+0xe0>
 800c25c:	4a12      	ldr	r2, [pc, #72]	; (800c2a8 <inc_lock+0x118>)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	011b      	lsls	r3, r3, #4
 800c262:	4413      	add	r3, r2
 800c264:	330c      	adds	r3, #12
 800c266:	881b      	ldrh	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <inc_lock+0xe0>
 800c26c:	2300      	movs	r3, #0
 800c26e:	e015      	b.n	800c29c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d108      	bne.n	800c288 <inc_lock+0xf8>
 800c276:	4a0c      	ldr	r2, [pc, #48]	; (800c2a8 <inc_lock+0x118>)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	011b      	lsls	r3, r3, #4
 800c27c:	4413      	add	r3, r2
 800c27e:	330c      	adds	r3, #12
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	3301      	adds	r3, #1
 800c284:	b29a      	uxth	r2, r3
 800c286:	e001      	b.n	800c28c <inc_lock+0xfc>
 800c288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c28c:	4906      	ldr	r1, [pc, #24]	; (800c2a8 <inc_lock+0x118>)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	011b      	lsls	r3, r3, #4
 800c292:	440b      	add	r3, r1
 800c294:	330c      	adds	r3, #12
 800c296:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	3301      	adds	r3, #1
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3714      	adds	r7, #20
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr
 800c2a8:	200008d0 	.word	0x200008d0

0800c2ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	607b      	str	r3, [r7, #4]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d825      	bhi.n	800c30c <dec_lock+0x60>
		n = Files[i].ctr;
 800c2c0:	4a17      	ldr	r2, [pc, #92]	; (800c320 <dec_lock+0x74>)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	011b      	lsls	r3, r3, #4
 800c2c6:	4413      	add	r3, r2
 800c2c8:	330c      	adds	r3, #12
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c2ce:	89fb      	ldrh	r3, [r7, #14]
 800c2d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2d4:	d101      	bne.n	800c2da <dec_lock+0x2e>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c2da:	89fb      	ldrh	r3, [r7, #14]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <dec_lock+0x3a>
 800c2e0:	89fb      	ldrh	r3, [r7, #14]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c2e6:	4a0e      	ldr	r2, [pc, #56]	; (800c320 <dec_lock+0x74>)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	011b      	lsls	r3, r3, #4
 800c2ec:	4413      	add	r3, r2
 800c2ee:	330c      	adds	r3, #12
 800c2f0:	89fa      	ldrh	r2, [r7, #14]
 800c2f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c2f4:	89fb      	ldrh	r3, [r7, #14]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d105      	bne.n	800c306 <dec_lock+0x5a>
 800c2fa:	4a09      	ldr	r2, [pc, #36]	; (800c320 <dec_lock+0x74>)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	011b      	lsls	r3, r3, #4
 800c300:	4413      	add	r3, r2
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	737b      	strb	r3, [r7, #13]
 800c30a:	e001      	b.n	800c310 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c30c:	2302      	movs	r3, #2
 800c30e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c310:	7b7b      	ldrb	r3, [r7, #13]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	200008d0 	.word	0x200008d0

0800c324 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c32c:	2300      	movs	r3, #0
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	e010      	b.n	800c354 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c332:	4a0d      	ldr	r2, [pc, #52]	; (800c368 <clear_lock+0x44>)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	011b      	lsls	r3, r3, #4
 800c338:	4413      	add	r3, r2
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d105      	bne.n	800c34e <clear_lock+0x2a>
 800c342:	4a09      	ldr	r2, [pc, #36]	; (800c368 <clear_lock+0x44>)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	011b      	lsls	r3, r3, #4
 800c348:	4413      	add	r3, r2
 800c34a:	2200      	movs	r2, #0
 800c34c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	3301      	adds	r3, #1
 800c352:	60fb      	str	r3, [r7, #12]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b01      	cmp	r3, #1
 800c358:	d9eb      	bls.n	800c332 <clear_lock+0xe>
	}
}
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	200008d0 	.word	0x200008d0

0800c36c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	78db      	ldrb	r3, [r3, #3]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d034      	beq.n	800c3ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c384:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7858      	ldrb	r0, [r3, #1]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c390:	2301      	movs	r3, #1
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	f7ff fd40 	bl	800be18 <disk_write>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	73fb      	strb	r3, [r7, #15]
 800c3a2:	e022      	b.n	800c3ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	1ad2      	subs	r2, r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d217      	bcs.n	800c3ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	789b      	ldrb	r3, [r3, #2]
 800c3be:	613b      	str	r3, [r7, #16]
 800c3c0:	e010      	b.n	800c3e4 <sync_window+0x78>
					wsect += fs->fsize;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	699b      	ldr	r3, [r3, #24]
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	7858      	ldrb	r0, [r3, #1]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	f7ff fd1d 	bl	800be18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	613b      	str	r3, [r7, #16]
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d8eb      	bhi.n	800c3c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d01b      	beq.n	800c444 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff ffad 	bl	800c36c <sync_window>
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d113      	bne.n	800c444 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	7858      	ldrb	r0, [r3, #1]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c426:	2301      	movs	r3, #1
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	f7ff fcd5 	bl	800bdd8 <disk_read>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d004      	beq.n	800c43e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c438:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c444:	7bfb      	ldrb	r3, [r7, #15]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7ff ff87 	bl	800c36c <sync_window>
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c462:	7bfb      	ldrb	r3, [r7, #15]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d158      	bne.n	800c51a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b03      	cmp	r3, #3
 800c46e:	d148      	bne.n	800c502 <sync_fs+0xb2>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	791b      	ldrb	r3, [r3, #4]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d144      	bne.n	800c502 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3330      	adds	r3, #48	; 0x30
 800c47c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c480:	2100      	movs	r1, #0
 800c482:	4618      	mov	r0, r3
 800c484:	f7ff fda9 	bl	800bfda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3330      	adds	r3, #48	; 0x30
 800c48c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c490:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff fd38 	bl	800bf0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	3330      	adds	r3, #48	; 0x30
 800c49e:	4921      	ldr	r1, [pc, #132]	; (800c524 <sync_fs+0xd4>)
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7ff fd4d 	bl	800bf40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3330      	adds	r3, #48	; 0x30
 800c4aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c4ae:	491e      	ldr	r1, [pc, #120]	; (800c528 <sync_fs+0xd8>)
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fd45 	bl	800bf40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3330      	adds	r3, #48	; 0x30
 800c4ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	f7ff fd3b 	bl	800bf40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3330      	adds	r3, #48	; 0x30
 800c4ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4610      	mov	r0, r2
 800c4da:	f7ff fd31 	bl	800bf40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	1c5a      	adds	r2, r3, #1
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	7858      	ldrb	r0, [r3, #1]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	f7ff fc8e 	bl	800be18 <disk_write>
			fs->fsi_flag = 0;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	785b      	ldrb	r3, [r3, #1]
 800c506:	2200      	movs	r2, #0
 800c508:	2100      	movs	r1, #0
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff fca4 	bl	800be58 <disk_ioctl>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <sync_fs+0xca>
 800c516:	2301      	movs	r3, #1
 800c518:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	41615252 	.word	0x41615252
 800c528:	61417272 	.word	0x61417272

0800c52c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	3b02      	subs	r3, #2
 800c53a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	3b02      	subs	r3, #2
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	429a      	cmp	r2, r3
 800c546:	d301      	bcc.n	800c54c <clust2sect+0x20>
 800c548:	2300      	movs	r3, #0
 800c54a:	e008      	b.n	800c55e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	895b      	ldrh	r3, [r3, #10]
 800c550:	461a      	mov	r2, r3
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	fb03 f202 	mul.w	r2, r3, r2
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c55c:	4413      	add	r3, r2
}
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b086      	sub	sp, #24
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d904      	bls.n	800c58a <get_fat+0x20>
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	695b      	ldr	r3, [r3, #20]
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	429a      	cmp	r2, r3
 800c588:	d302      	bcc.n	800c590 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c58a:	2301      	movs	r3, #1
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	e08f      	b.n	800c6b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c594:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	d062      	beq.n	800c664 <get_fat+0xfa>
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	dc7c      	bgt.n	800c69c <get_fat+0x132>
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d002      	beq.n	800c5ac <get_fat+0x42>
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d042      	beq.n	800c630 <get_fat+0xc6>
 800c5aa:	e077      	b.n	800c69c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	60fb      	str	r3, [r7, #12]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	085b      	lsrs	r3, r3, #1
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	6a1a      	ldr	r2, [r3, #32]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	0a5b      	lsrs	r3, r3, #9
 800c5c2:	4413      	add	r3, r2
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6938      	ldr	r0, [r7, #16]
 800c5c8:	f7ff ff14 	bl	800c3f4 <move_window>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d167      	bne.n	800c6a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	60fa      	str	r2, [r7, #12]
 800c5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	6a1a      	ldr	r2, [r3, #32]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	0a5b      	lsrs	r3, r3, #9
 800c5ee:	4413      	add	r3, r2
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6938      	ldr	r0, [r7, #16]
 800c5f4:	f7ff fefe 	bl	800c3f4 <move_window>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d153      	bne.n	800c6a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	4413      	add	r3, r2
 800c608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c60c:	021b      	lsls	r3, r3, #8
 800c60e:	461a      	mov	r2, r3
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	4313      	orrs	r3, r2
 800c614:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <get_fat+0xbc>
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	091b      	lsrs	r3, r3, #4
 800c624:	e002      	b.n	800c62c <get_fat+0xc2>
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c62c:	617b      	str	r3, [r7, #20]
			break;
 800c62e:	e03f      	b.n	800c6b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	6a1a      	ldr	r2, [r3, #32]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	0a1b      	lsrs	r3, r3, #8
 800c638:	4413      	add	r3, r2
 800c63a:	4619      	mov	r1, r3
 800c63c:	6938      	ldr	r0, [r7, #16]
 800c63e:	f7ff fed9 	bl	800c3f4 <move_window>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d130      	bne.n	800c6aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c656:	4413      	add	r3, r2
 800c658:	4618      	mov	r0, r3
 800c65a:	f7ff fc1b 	bl	800be94 <ld_word>
 800c65e:	4603      	mov	r3, r0
 800c660:	617b      	str	r3, [r7, #20]
			break;
 800c662:	e025      	b.n	800c6b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	6a1a      	ldr	r2, [r3, #32]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	09db      	lsrs	r3, r3, #7
 800c66c:	4413      	add	r3, r2
 800c66e:	4619      	mov	r1, r3
 800c670:	6938      	ldr	r0, [r7, #16]
 800c672:	f7ff febf 	bl	800c3f4 <move_window>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d118      	bne.n	800c6ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c68a:	4413      	add	r3, r2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7ff fc19 	bl	800bec4 <ld_dword>
 800c692:	4603      	mov	r3, r0
 800c694:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c698:	617b      	str	r3, [r7, #20]
			break;
 800c69a:	e009      	b.n	800c6b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c69c:	2301      	movs	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	e006      	b.n	800c6b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6a2:	bf00      	nop
 800c6a4:	e004      	b.n	800c6b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6a6:	bf00      	nop
 800c6a8:	e002      	b.n	800c6b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c6aa:	bf00      	nop
 800c6ac:	e000      	b.n	800c6b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c6ae:	bf00      	nop
		}
	}

	return val;
 800c6b0:	697b      	ldr	r3, [r7, #20]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3718      	adds	r7, #24
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c6ba:	b590      	push	{r4, r7, lr}
 800c6bc:	b089      	sub	sp, #36	; 0x24
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	f240 80d2 	bls.w	800c876 <put_fat+0x1bc>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	f080 80cc 	bcs.w	800c876 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	f000 8096 	beq.w	800c814 <put_fat+0x15a>
 800c6e8:	2b03      	cmp	r3, #3
 800c6ea:	f300 80cd 	bgt.w	800c888 <put_fat+0x1ce>
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d002      	beq.n	800c6f8 <put_fat+0x3e>
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d06e      	beq.n	800c7d4 <put_fat+0x11a>
 800c6f6:	e0c7      	b.n	800c888 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	61bb      	str	r3, [r7, #24]
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	085b      	lsrs	r3, r3, #1
 800c700:	69ba      	ldr	r2, [r7, #24]
 800c702:	4413      	add	r3, r2
 800c704:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6a1a      	ldr	r2, [r3, #32]
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	0a5b      	lsrs	r3, r3, #9
 800c70e:	4413      	add	r3, r2
 800c710:	4619      	mov	r1, r3
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f7ff fe6e 	bl	800c3f4 <move_window>
 800c718:	4603      	mov	r3, r0
 800c71a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c71c:	7ffb      	ldrb	r3, [r7, #31]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f040 80ab 	bne.w	800c87a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	1c59      	adds	r1, r3, #1
 800c72e:	61b9      	str	r1, [r7, #24]
 800c730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c734:	4413      	add	r3, r2
 800c736:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f003 0301 	and.w	r3, r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00d      	beq.n	800c75e <put_fat+0xa4>
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	b25b      	sxtb	r3, r3
 800c748:	f003 030f 	and.w	r3, r3, #15
 800c74c:	b25a      	sxtb	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	b2db      	uxtb	r3, r3
 800c752:	011b      	lsls	r3, r3, #4
 800c754:	b25b      	sxtb	r3, r3
 800c756:	4313      	orrs	r3, r2
 800c758:	b25b      	sxtb	r3, r3
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	e001      	b.n	800c762 <put_fat+0xa8>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	b2db      	uxtb	r3, r3
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2201      	movs	r2, #1
 800c76a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6a1a      	ldr	r2, [r3, #32]
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	0a5b      	lsrs	r3, r3, #9
 800c774:	4413      	add	r3, r2
 800c776:	4619      	mov	r1, r3
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f7ff fe3b 	bl	800c3f4 <move_window>
 800c77e:	4603      	mov	r3, r0
 800c780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c782:	7ffb      	ldrb	r3, [r7, #31]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d17a      	bne.n	800c87e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c794:	4413      	add	r3, r2
 800c796:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d003      	beq.n	800c7aa <put_fat+0xf0>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	091b      	lsrs	r3, r3, #4
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	e00e      	b.n	800c7c8 <put_fat+0x10e>
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	b25b      	sxtb	r3, r3
 800c7b0:	f023 030f 	bic.w	r3, r3, #15
 800c7b4:	b25a      	sxtb	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	0a1b      	lsrs	r3, r3, #8
 800c7ba:	b25b      	sxtb	r3, r3
 800c7bc:	f003 030f 	and.w	r3, r3, #15
 800c7c0:	b25b      	sxtb	r3, r3
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	b25b      	sxtb	r3, r3
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	697a      	ldr	r2, [r7, #20]
 800c7ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	70da      	strb	r2, [r3, #3]
			break;
 800c7d2:	e059      	b.n	800c888 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6a1a      	ldr	r2, [r3, #32]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	0a1b      	lsrs	r3, r3, #8
 800c7dc:	4413      	add	r3, r2
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff fe07 	bl	800c3f4 <move_window>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7ea:	7ffb      	ldrb	r3, [r7, #31]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d148      	bne.n	800c882 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	005b      	lsls	r3, r3, #1
 800c7fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c7fe:	4413      	add	r3, r2
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	b292      	uxth	r2, r2
 800c804:	4611      	mov	r1, r2
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fb7f 	bl	800bf0a <st_word>
			fs->wflag = 1;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2201      	movs	r2, #1
 800c810:	70da      	strb	r2, [r3, #3]
			break;
 800c812:	e039      	b.n	800c888 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6a1a      	ldr	r2, [r3, #32]
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	09db      	lsrs	r3, r3, #7
 800c81c:	4413      	add	r3, r2
 800c81e:	4619      	mov	r1, r3
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f7ff fde7 	bl	800c3f4 <move_window>
 800c826:	4603      	mov	r3, r0
 800c828:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c82a:	7ffb      	ldrb	r3, [r7, #31]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d12a      	bne.n	800c886 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c844:	4413      	add	r3, r2
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff fb3c 	bl	800bec4 <ld_dword>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c852:	4323      	orrs	r3, r4
 800c854:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c864:	4413      	add	r3, r2
 800c866:	6879      	ldr	r1, [r7, #4]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7ff fb69 	bl	800bf40 <st_dword>
			fs->wflag = 1;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2201      	movs	r2, #1
 800c872:	70da      	strb	r2, [r3, #3]
			break;
 800c874:	e008      	b.n	800c888 <put_fat+0x1ce>
		}
	}
 800c876:	bf00      	nop
 800c878:	e006      	b.n	800c888 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c87a:	bf00      	nop
 800c87c:	e004      	b.n	800c888 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c87e:	bf00      	nop
 800c880:	e002      	b.n	800c888 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c882:	bf00      	nop
 800c884:	e000      	b.n	800c888 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c886:	bf00      	nop
	return res;
 800c888:	7ffb      	ldrb	r3, [r7, #31]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3724      	adds	r7, #36	; 0x24
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd90      	pop	{r4, r7, pc}

0800c892 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b088      	sub	sp, #32
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d904      	bls.n	800c8b8 <remove_chain+0x26>
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d301      	bcc.n	800c8bc <remove_chain+0x2a>
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	e04b      	b.n	800c954 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d00c      	beq.n	800c8dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c8c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	69b8      	ldr	r0, [r7, #24]
 800c8ca:	f7ff fef6 	bl	800c6ba <put_fat>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c8d2:	7ffb      	ldrb	r3, [r7, #31]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d001      	beq.n	800c8dc <remove_chain+0x4a>
 800c8d8:	7ffb      	ldrb	r3, [r7, #31]
 800c8da:	e03b      	b.n	800c954 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7ff fe43 	bl	800c56a <get_fat>
 800c8e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d031      	beq.n	800c950 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d101      	bne.n	800c8f6 <remove_chain+0x64>
 800c8f2:	2302      	movs	r3, #2
 800c8f4:	e02e      	b.n	800c954 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8fc:	d101      	bne.n	800c902 <remove_chain+0x70>
 800c8fe:	2301      	movs	r3, #1
 800c900:	e028      	b.n	800c954 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c902:	2200      	movs	r2, #0
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	69b8      	ldr	r0, [r7, #24]
 800c908:	f7ff fed7 	bl	800c6ba <put_fat>
 800c90c:	4603      	mov	r3, r0
 800c90e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c910:	7ffb      	ldrb	r3, [r7, #31]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <remove_chain+0x88>
 800c916:	7ffb      	ldrb	r3, [r7, #31]
 800c918:	e01c      	b.n	800c954 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	691a      	ldr	r2, [r3, #16]
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	695b      	ldr	r3, [r3, #20]
 800c922:	3b02      	subs	r3, #2
 800c924:	429a      	cmp	r2, r3
 800c926:	d20b      	bcs.n	800c940 <remove_chain+0xae>
			fs->free_clst++;
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	791b      	ldrb	r3, [r3, #4]
 800c936:	f043 0301 	orr.w	r3, r3, #1
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d3c6      	bcc.n	800c8dc <remove_chain+0x4a>
 800c94e:	e000      	b.n	800c952 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c950:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3720      	adds	r7, #32
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b088      	sub	sp, #32
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10d      	bne.n	800c98e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d004      	beq.n	800c988 <create_chain+0x2c>
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	695b      	ldr	r3, [r3, #20]
 800c982:	69ba      	ldr	r2, [r7, #24]
 800c984:	429a      	cmp	r2, r3
 800c986:	d31b      	bcc.n	800c9c0 <create_chain+0x64>
 800c988:	2301      	movs	r3, #1
 800c98a:	61bb      	str	r3, [r7, #24]
 800c98c:	e018      	b.n	800c9c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7ff fdea 	bl	800c56a <get_fat>
 800c996:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d801      	bhi.n	800c9a2 <create_chain+0x46>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e070      	b.n	800ca84 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9a8:	d101      	bne.n	800c9ae <create_chain+0x52>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	e06a      	b.n	800ca84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d201      	bcs.n	800c9bc <create_chain+0x60>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	e063      	b.n	800ca84 <create_chain+0x128>
		scl = clst;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	69fa      	ldr	r2, [r7, #28]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d307      	bcc.n	800c9e4 <create_chain+0x88>
				ncl = 2;
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c9d8:	69fa      	ldr	r2, [r7, #28]
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d901      	bls.n	800c9e4 <create_chain+0x88>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e04f      	b.n	800ca84 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c9e4:	69f9      	ldr	r1, [r7, #28]
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7ff fdbf 	bl	800c56a <get_fat>
 800c9ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d00e      	beq.n	800ca12 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d003      	beq.n	800ca02 <create_chain+0xa6>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca00:	d101      	bne.n	800ca06 <create_chain+0xaa>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	e03e      	b.n	800ca84 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ca06:	69fa      	ldr	r2, [r7, #28]
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d1da      	bne.n	800c9c4 <create_chain+0x68>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e038      	b.n	800ca84 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ca12:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ca14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca18:	69f9      	ldr	r1, [r7, #28]
 800ca1a:	6938      	ldr	r0, [r7, #16]
 800ca1c:	f7ff fe4d 	bl	800c6ba <put_fat>
 800ca20:	4603      	mov	r3, r0
 800ca22:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d109      	bne.n	800ca3e <create_chain+0xe2>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d006      	beq.n	800ca3e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ca30:	69fa      	ldr	r2, [r7, #28]
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6938      	ldr	r0, [r7, #16]
 800ca36:	f7ff fe40 	bl	800c6ba <put_fat>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ca3e:	7dfb      	ldrb	r3, [r7, #23]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d116      	bne.n	800ca72 <create_chain+0x116>
		fs->last_clst = ncl;
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	69fa      	ldr	r2, [r7, #28]
 800ca48:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	691a      	ldr	r2, [r3, #16]
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	695b      	ldr	r3, [r3, #20]
 800ca52:	3b02      	subs	r3, #2
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d804      	bhi.n	800ca62 <create_chain+0x106>
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	1e5a      	subs	r2, r3, #1
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	791b      	ldrb	r3, [r3, #4]
 800ca66:	f043 0301 	orr.w	r3, r3, #1
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	711a      	strb	r2, [r3, #4]
 800ca70:	e007      	b.n	800ca82 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d102      	bne.n	800ca7e <create_chain+0x122>
 800ca78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca7c:	e000      	b.n	800ca80 <create_chain+0x124>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca82:	69fb      	ldr	r3, [r7, #28]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3720      	adds	r7, #32
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b087      	sub	sp, #28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa0:	3304      	adds	r3, #4
 800caa2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	0a5b      	lsrs	r3, r3, #9
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	8952      	ldrh	r2, [r2, #10]
 800caac:	fbb3 f3f2 	udiv	r3, r3, r2
 800cab0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	1d1a      	adds	r2, r3, #4
 800cab6:	613a      	str	r2, [r7, #16]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d101      	bne.n	800cac6 <clmt_clust+0x3a>
 800cac2:	2300      	movs	r3, #0
 800cac4:	e010      	b.n	800cae8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d307      	bcc.n	800cade <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	617b      	str	r3, [r7, #20]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	3304      	adds	r3, #4
 800cada:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cadc:	e7e9      	b.n	800cab2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cade:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	4413      	add	r3, r2
}
 800cae8:	4618      	mov	r0, r3
 800caea:	371c      	adds	r7, #28
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb0a:	d204      	bcs.n	800cb16 <dir_sdi+0x22>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	f003 031f 	and.w	r3, r3, #31
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <dir_sdi+0x26>
		return FR_INT_ERR;
 800cb16:	2302      	movs	r3, #2
 800cb18:	e063      	b.n	800cbe2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d106      	bne.n	800cb3a <dir_sdi+0x46>
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d902      	bls.n	800cb3a <dir_sdi+0x46>
		clst = fs->dirbase;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb38:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10c      	bne.n	800cb5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	095b      	lsrs	r3, r3, #5
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	8912      	ldrh	r2, [r2, #8]
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d301      	bcc.n	800cb50 <dir_sdi+0x5c>
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	e048      	b.n	800cbe2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	61da      	str	r2, [r3, #28]
 800cb58:	e029      	b.n	800cbae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	895b      	ldrh	r3, [r3, #10]
 800cb5e:	025b      	lsls	r3, r3, #9
 800cb60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb62:	e019      	b.n	800cb98 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6979      	ldr	r1, [r7, #20]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7ff fcfe 	bl	800c56a <get_fat>
 800cb6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb76:	d101      	bne.n	800cb7c <dir_sdi+0x88>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e032      	b.n	800cbe2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d904      	bls.n	800cb8c <dir_sdi+0x98>
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	695b      	ldr	r3, [r3, #20]
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d301      	bcc.n	800cb90 <dir_sdi+0x9c>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	e028      	b.n	800cbe2 <dir_sdi+0xee>
			ofs -= csz;
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d2e1      	bcs.n	800cb64 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cba0:	6979      	ldr	r1, [r7, #20]
 800cba2:	6938      	ldr	r0, [r7, #16]
 800cba4:	f7ff fcc2 	bl	800c52c <clust2sect>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	69db      	ldr	r3, [r3, #28]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <dir_sdi+0xcc>
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	e010      	b.n	800cbe2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	69da      	ldr	r2, [r3, #28]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	0a5b      	lsrs	r3, r3, #9
 800cbc8:	441a      	add	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbda:	441a      	add	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b086      	sub	sp, #24
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	695b      	ldr	r3, [r3, #20]
 800cbfe:	3320      	adds	r3, #32
 800cc00:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	69db      	ldr	r3, [r3, #28]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d003      	beq.n	800cc12 <dir_next+0x28>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc10:	d301      	bcc.n	800cc16 <dir_next+0x2c>
 800cc12:	2304      	movs	r3, #4
 800cc14:	e0aa      	b.n	800cd6c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f040 8098 	bne.w	800cd52 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	69db      	ldr	r3, [r3, #28]
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10b      	bne.n	800cc4c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	095b      	lsrs	r3, r3, #5
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	8912      	ldrh	r2, [r2, #8]
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	f0c0 8088 	bcc.w	800cd52 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	61da      	str	r2, [r3, #28]
 800cc48:	2304      	movs	r3, #4
 800cc4a:	e08f      	b.n	800cd6c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	0a5b      	lsrs	r3, r3, #9
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	8952      	ldrh	r2, [r2, #10]
 800cc54:	3a01      	subs	r2, #1
 800cc56:	4013      	ands	r3, r2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d17a      	bne.n	800cd52 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	4619      	mov	r1, r3
 800cc64:	4610      	mov	r0, r2
 800cc66:	f7ff fc80 	bl	800c56a <get_fat>
 800cc6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d801      	bhi.n	800cc76 <dir_next+0x8c>
 800cc72:	2302      	movs	r3, #2
 800cc74:	e07a      	b.n	800cd6c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc7c:	d101      	bne.n	800cc82 <dir_next+0x98>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e074      	b.n	800cd6c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d358      	bcc.n	800cd3e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d104      	bne.n	800cc9c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	61da      	str	r2, [r3, #28]
 800cc98:	2304      	movs	r3, #4
 800cc9a:	e067      	b.n	800cd6c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	4619      	mov	r1, r3
 800cca4:	4610      	mov	r0, r2
 800cca6:	f7ff fe59 	bl	800c95c <create_chain>
 800ccaa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <dir_next+0xcc>
 800ccb2:	2307      	movs	r3, #7
 800ccb4:	e05a      	b.n	800cd6c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d101      	bne.n	800ccc0 <dir_next+0xd6>
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	e055      	b.n	800cd6c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccc6:	d101      	bne.n	800cccc <dir_next+0xe2>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e04f      	b.n	800cd6c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7ff fb4d 	bl	800c36c <sync_window>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d001      	beq.n	800ccdc <dir_next+0xf2>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e047      	b.n	800cd6c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3330      	adds	r3, #48	; 0x30
 800cce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cce4:	2100      	movs	r1, #0
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff f977 	bl	800bfda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccec:	2300      	movs	r3, #0
 800ccee:	613b      	str	r3, [r7, #16]
 800ccf0:	6979      	ldr	r1, [r7, #20]
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff fc1a 	bl	800c52c <clust2sect>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	62da      	str	r2, [r3, #44]	; 0x2c
 800ccfe:	e012      	b.n	800cd26 <dir_next+0x13c>
						fs->wflag = 1;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2201      	movs	r2, #1
 800cd04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f7ff fb30 	bl	800c36c <sync_window>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <dir_next+0x12c>
 800cd12:	2301      	movs	r3, #1
 800cd14:	e02a      	b.n	800cd6c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	613b      	str	r3, [r7, #16]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	62da      	str	r2, [r3, #44]	; 0x2c
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	895b      	ldrh	r3, [r3, #10]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d3e6      	bcc.n	800cd00 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	1ad2      	subs	r2, r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cd44:	6979      	ldr	r1, [r7, #20]
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f7ff fbf0 	bl	800c52c <clust2sect>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd64:	441a      	add	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cd84:	2100      	movs	r1, #0
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff feb4 	bl	800caf4 <dir_sdi>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd90:	7dfb      	ldrb	r3, [r7, #23]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d12b      	bne.n	800cdee <dir_alloc+0x7a>
		n = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	69db      	ldr	r3, [r3, #28]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fb27 	bl	800c3f4 <move_window>
 800cda6:	4603      	mov	r3, r0
 800cda8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d11d      	bne.n	800cdec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6a1b      	ldr	r3, [r3, #32]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	2be5      	cmp	r3, #229	; 0xe5
 800cdb8:	d004      	beq.n	800cdc4 <dir_alloc+0x50>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a1b      	ldr	r3, [r3, #32]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d107      	bne.n	800cdd4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	613b      	str	r3, [r7, #16]
 800cdca:	693a      	ldr	r2, [r7, #16]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d102      	bne.n	800cdd8 <dir_alloc+0x64>
 800cdd2:	e00c      	b.n	800cdee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cdd8:	2101      	movs	r1, #1
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff ff05 	bl	800cbea <dir_next>
 800cde0:	4603      	mov	r3, r0
 800cde2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cde4:	7dfb      	ldrb	r3, [r7, #23]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d0d7      	beq.n	800cd9a <dir_alloc+0x26>
 800cdea:	e000      	b.n	800cdee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cdec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
 800cdf0:	2b04      	cmp	r3, #4
 800cdf2:	d101      	bne.n	800cdf8 <dir_alloc+0x84>
 800cdf4:	2307      	movs	r3, #7
 800cdf6:	75fb      	strb	r3, [r7, #23]
	return res;
 800cdf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	331a      	adds	r3, #26
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff f83f 	bl	800be94 <ld_word>
 800ce16:	4603      	mov	r3, r0
 800ce18:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b03      	cmp	r3, #3
 800ce20:	d109      	bne.n	800ce36 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	3314      	adds	r3, #20
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff f834 	bl	800be94 <ld_word>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	041b      	lsls	r3, r3, #16
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ce36:	68fb      	ldr	r3, [r7, #12]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	331a      	adds	r3, #26
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	b292      	uxth	r2, r2
 800ce54:	4611      	mov	r1, r2
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff f857 	bl	800bf0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b03      	cmp	r3, #3
 800ce62:	d109      	bne.n	800ce78 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	f103 0214 	add.w	r2, r3, #20
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	0c1b      	lsrs	r3, r3, #16
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	4619      	mov	r1, r3
 800ce72:	4610      	mov	r0, r2
 800ce74:	f7ff f849 	bl	800bf0a <st_word>
	}
}
 800ce78:	bf00      	nop
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ce8e:	2100      	movs	r1, #0
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7ff fe2f 	bl	800caf4 <dir_sdi>
 800ce96:	4603      	mov	r3, r0
 800ce98:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d001      	beq.n	800cea4 <dir_find+0x24>
 800cea0:	7dfb      	ldrb	r3, [r7, #23]
 800cea2:	e03e      	b.n	800cf22 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	69db      	ldr	r3, [r3, #28]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	6938      	ldr	r0, [r7, #16]
 800ceac:	f7ff faa2 	bl	800c3f4 <move_window>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d12f      	bne.n	800cf1a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d102      	bne.n	800cece <dir_find+0x4e>
 800cec8:	2304      	movs	r3, #4
 800ceca:	75fb      	strb	r3, [r7, #23]
 800cecc:	e028      	b.n	800cf20 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a1b      	ldr	r3, [r3, #32]
 800ced2:	330b      	adds	r3, #11
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a1b      	ldr	r3, [r3, #32]
 800cee4:	330b      	adds	r3, #11
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	f003 0308 	and.w	r3, r3, #8
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10a      	bne.n	800cf06 <dir_find+0x86>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a18      	ldr	r0, [r3, #32]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3324      	adds	r3, #36	; 0x24
 800cef8:	220b      	movs	r2, #11
 800cefa:	4619      	mov	r1, r3
 800cefc:	f7ff f888 	bl	800c010 <mem_cmp>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00b      	beq.n	800cf1e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cf06:	2100      	movs	r1, #0
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff fe6e 	bl	800cbea <dir_next>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0c5      	beq.n	800cea4 <dir_find+0x24>
 800cf18:	e002      	b.n	800cf20 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cf1a:	bf00      	nop
 800cf1c:	e000      	b.n	800cf20 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cf1e:	bf00      	nop

	return res;
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b084      	sub	sp, #16
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cf38:	2101      	movs	r1, #1
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff ff1a 	bl	800cd74 <dir_alloc>
 800cf40:	4603      	mov	r3, r0
 800cf42:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d11c      	bne.n	800cf84 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	69db      	ldr	r3, [r3, #28]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	68b8      	ldr	r0, [r7, #8]
 800cf52:	f7ff fa4f 	bl	800c3f4 <move_window>
 800cf56:	4603      	mov	r3, r0
 800cf58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d111      	bne.n	800cf84 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a1b      	ldr	r3, [r3, #32]
 800cf64:	2220      	movs	r2, #32
 800cf66:	2100      	movs	r1, #0
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7ff f836 	bl	800bfda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a18      	ldr	r0, [r3, #32]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	3324      	adds	r3, #36	; 0x24
 800cf76:	220b      	movs	r2, #11
 800cf78:	4619      	mov	r1, r3
 800cf7a:	f7ff f80d 	bl	800bf98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2201      	movs	r2, #1
 800cf82:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
	...

0800cf90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b088      	sub	sp, #32
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3324      	adds	r3, #36	; 0x24
 800cfa4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cfa6:	220b      	movs	r2, #11
 800cfa8:	2120      	movs	r1, #32
 800cfaa:	68b8      	ldr	r0, [r7, #8]
 800cfac:	f7ff f815 	bl	800bfda <mem_set>
	si = i = 0; ni = 8;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	613b      	str	r3, [r7, #16]
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	2308      	movs	r3, #8
 800cfba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	1c5a      	adds	r2, r3, #1
 800cfc0:	61fa      	str	r2, [r7, #28]
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cfca:	7efb      	ldrb	r3, [r7, #27]
 800cfcc:	2b20      	cmp	r3, #32
 800cfce:	d94e      	bls.n	800d06e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cfd0:	7efb      	ldrb	r3, [r7, #27]
 800cfd2:	2b2f      	cmp	r3, #47	; 0x2f
 800cfd4:	d006      	beq.n	800cfe4 <create_name+0x54>
 800cfd6:	7efb      	ldrb	r3, [r7, #27]
 800cfd8:	2b5c      	cmp	r3, #92	; 0x5c
 800cfda:	d110      	bne.n	800cffe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cfdc:	e002      	b.n	800cfe4 <create_name+0x54>
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	61fb      	str	r3, [r7, #28]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	4413      	add	r3, r2
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b2f      	cmp	r3, #47	; 0x2f
 800cfee:	d0f6      	beq.n	800cfde <create_name+0x4e>
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	4413      	add	r3, r2
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b5c      	cmp	r3, #92	; 0x5c
 800cffa:	d0f0      	beq.n	800cfde <create_name+0x4e>
			break;
 800cffc:	e038      	b.n	800d070 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cffe:	7efb      	ldrb	r3, [r7, #27]
 800d000:	2b2e      	cmp	r3, #46	; 0x2e
 800d002:	d003      	beq.n	800d00c <create_name+0x7c>
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d30c      	bcc.n	800d026 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	2b0b      	cmp	r3, #11
 800d010:	d002      	beq.n	800d018 <create_name+0x88>
 800d012:	7efb      	ldrb	r3, [r7, #27]
 800d014:	2b2e      	cmp	r3, #46	; 0x2e
 800d016:	d001      	beq.n	800d01c <create_name+0x8c>
 800d018:	2306      	movs	r3, #6
 800d01a:	e044      	b.n	800d0a6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d01c:	2308      	movs	r3, #8
 800d01e:	613b      	str	r3, [r7, #16]
 800d020:	230b      	movs	r3, #11
 800d022:	617b      	str	r3, [r7, #20]
			continue;
 800d024:	e022      	b.n	800d06c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d026:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	da04      	bge.n	800d038 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d02e:	7efb      	ldrb	r3, [r7, #27]
 800d030:	3b80      	subs	r3, #128	; 0x80
 800d032:	4a1f      	ldr	r2, [pc, #124]	; (800d0b0 <create_name+0x120>)
 800d034:	5cd3      	ldrb	r3, [r2, r3]
 800d036:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d038:	7efb      	ldrb	r3, [r7, #27]
 800d03a:	4619      	mov	r1, r3
 800d03c:	481d      	ldr	r0, [pc, #116]	; (800d0b4 <create_name+0x124>)
 800d03e:	f7ff f80e 	bl	800c05e <chk_chr>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d001      	beq.n	800d04c <create_name+0xbc>
 800d048:	2306      	movs	r3, #6
 800d04a:	e02c      	b.n	800d0a6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d04c:	7efb      	ldrb	r3, [r7, #27]
 800d04e:	2b60      	cmp	r3, #96	; 0x60
 800d050:	d905      	bls.n	800d05e <create_name+0xce>
 800d052:	7efb      	ldrb	r3, [r7, #27]
 800d054:	2b7a      	cmp	r3, #122	; 0x7a
 800d056:	d802      	bhi.n	800d05e <create_name+0xce>
 800d058:	7efb      	ldrb	r3, [r7, #27]
 800d05a:	3b20      	subs	r3, #32
 800d05c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	1c5a      	adds	r2, r3, #1
 800d062:	613a      	str	r2, [r7, #16]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	4413      	add	r3, r2
 800d068:	7efa      	ldrb	r2, [r7, #27]
 800d06a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d06c:	e7a6      	b.n	800cfbc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d06e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	441a      	add	r2, r3
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <create_name+0xf4>
 800d080:	2306      	movs	r3, #6
 800d082:	e010      	b.n	800d0a6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	2be5      	cmp	r3, #229	; 0xe5
 800d08a:	d102      	bne.n	800d092 <create_name+0x102>
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	2205      	movs	r2, #5
 800d090:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d092:	7efb      	ldrb	r3, [r7, #27]
 800d094:	2b20      	cmp	r3, #32
 800d096:	d801      	bhi.n	800d09c <create_name+0x10c>
 800d098:	2204      	movs	r2, #4
 800d09a:	e000      	b.n	800d09e <create_name+0x10e>
 800d09c:	2200      	movs	r2, #0
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	330b      	adds	r3, #11
 800d0a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d0a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3720      	adds	r7, #32
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	0800f9e0 	.word	0x0800f9e0
 800d0b4:	0800f8d0 	.word	0x0800f8d0

0800d0b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d0cc:	e002      	b.n	800d0d4 <follow_path+0x1c>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	603b      	str	r3, [r7, #0]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b2f      	cmp	r3, #47	; 0x2f
 800d0da:	d0f8      	beq.n	800d0ce <follow_path+0x16>
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	2b5c      	cmp	r3, #92	; 0x5c
 800d0e2:	d0f4      	beq.n	800d0ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b1f      	cmp	r3, #31
 800d0f0:	d80a      	bhi.n	800d108 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2280      	movs	r2, #128	; 0x80
 800d0f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff fcf9 	bl	800caf4 <dir_sdi>
 800d102:	4603      	mov	r3, r0
 800d104:	75fb      	strb	r3, [r7, #23]
 800d106:	e043      	b.n	800d190 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d108:	463b      	mov	r3, r7
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff ff3f 	bl	800cf90 <create_name>
 800d112:	4603      	mov	r3, r0
 800d114:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d116:	7dfb      	ldrb	r3, [r7, #23]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d134      	bne.n	800d186 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff feaf 	bl	800ce80 <dir_find>
 800d122:	4603      	mov	r3, r0
 800d124:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d12c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d12e:	7dfb      	ldrb	r3, [r7, #23]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00a      	beq.n	800d14a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d134:	7dfb      	ldrb	r3, [r7, #23]
 800d136:	2b04      	cmp	r3, #4
 800d138:	d127      	bne.n	800d18a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d13a:	7afb      	ldrb	r3, [r7, #11]
 800d13c:	f003 0304 	and.w	r3, r3, #4
 800d140:	2b00      	cmp	r3, #0
 800d142:	d122      	bne.n	800d18a <follow_path+0xd2>
 800d144:	2305      	movs	r3, #5
 800d146:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d148:	e01f      	b.n	800d18a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d14a:	7afb      	ldrb	r3, [r7, #11]
 800d14c:	f003 0304 	and.w	r3, r3, #4
 800d150:	2b00      	cmp	r3, #0
 800d152:	d11c      	bne.n	800d18e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	799b      	ldrb	r3, [r3, #6]
 800d158:	f003 0310 	and.w	r3, r3, #16
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d102      	bne.n	800d166 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d160:	2305      	movs	r3, #5
 800d162:	75fb      	strb	r3, [r7, #23]
 800d164:	e014      	b.n	800d190 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d174:	4413      	add	r3, r2
 800d176:	4619      	mov	r1, r3
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7ff fe42 	bl	800ce02 <ld_clust>
 800d17e:	4602      	mov	r2, r0
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d184:	e7c0      	b.n	800d108 <follow_path+0x50>
			if (res != FR_OK) break;
 800d186:	bf00      	nop
 800d188:	e002      	b.n	800d190 <follow_path+0xd8>
				break;
 800d18a:	bf00      	nop
 800d18c:	e000      	b.n	800d190 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d18e:	bf00      	nop
			}
		}
	}

	return res;
 800d190:	7dfb      	ldrb	r3, [r7, #23]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b087      	sub	sp, #28
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d1a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d031      	beq.n	800d214 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	617b      	str	r3, [r7, #20]
 800d1b6:	e002      	b.n	800d1be <get_ldnumber+0x24>
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	617b      	str	r3, [r7, #20]
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	d903      	bls.n	800d1ce <get_ldnumber+0x34>
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	2b3a      	cmp	r3, #58	; 0x3a
 800d1cc:	d1f4      	bne.n	800d1b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	2b3a      	cmp	r3, #58	; 0x3a
 800d1d4:	d11c      	bne.n	800d210 <get_ldnumber+0x76>
			tp = *path;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	60fa      	str	r2, [r7, #12]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	3b30      	subs	r3, #48	; 0x30
 800d1e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2b09      	cmp	r3, #9
 800d1ec:	d80e      	bhi.n	800d20c <get_ldnumber+0x72>
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d10a      	bne.n	800d20c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d107      	bne.n	800d20c <get_ldnumber+0x72>
					vol = (int)i;
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	3301      	adds	r3, #1
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	697a      	ldr	r2, [r7, #20]
 800d20a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	e002      	b.n	800d216 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d210:	2300      	movs	r3, #0
 800d212:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d214:	693b      	ldr	r3, [r7, #16]
}
 800d216:	4618      	mov	r0, r3
 800d218:	371c      	adds	r7, #28
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
	...

0800d224 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	70da      	strb	r2, [r3, #3]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d23a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff f8d8 	bl	800c3f4 <move_window>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <check_fs+0x2a>
 800d24a:	2304      	movs	r3, #4
 800d24c:	e038      	b.n	800d2c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	3330      	adds	r3, #48	; 0x30
 800d252:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fe1c 	bl	800be94 <ld_word>
 800d25c:	4603      	mov	r3, r0
 800d25e:	461a      	mov	r2, r3
 800d260:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d264:	429a      	cmp	r2, r3
 800d266:	d001      	beq.n	800d26c <check_fs+0x48>
 800d268:	2303      	movs	r3, #3
 800d26a:	e029      	b.n	800d2c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d272:	2be9      	cmp	r3, #233	; 0xe9
 800d274:	d009      	beq.n	800d28a <check_fs+0x66>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d27c:	2beb      	cmp	r3, #235	; 0xeb
 800d27e:	d11e      	bne.n	800d2be <check_fs+0x9a>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d286:	2b90      	cmp	r3, #144	; 0x90
 800d288:	d119      	bne.n	800d2be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3330      	adds	r3, #48	; 0x30
 800d28e:	3336      	adds	r3, #54	; 0x36
 800d290:	4618      	mov	r0, r3
 800d292:	f7fe fe17 	bl	800bec4 <ld_dword>
 800d296:	4603      	mov	r3, r0
 800d298:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d29c:	4a0a      	ldr	r2, [pc, #40]	; (800d2c8 <check_fs+0xa4>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d101      	bne.n	800d2a6 <check_fs+0x82>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e00c      	b.n	800d2c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3330      	adds	r3, #48	; 0x30
 800d2aa:	3352      	adds	r3, #82	; 0x52
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fe09 	bl	800bec4 <ld_dword>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	4a05      	ldr	r2, [pc, #20]	; (800d2cc <check_fs+0xa8>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d101      	bne.n	800d2be <check_fs+0x9a>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e000      	b.n	800d2c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d2be:	2302      	movs	r3, #2
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	00544146 	.word	0x00544146
 800d2cc:	33544146 	.word	0x33544146

0800d2d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b096      	sub	sp, #88	; 0x58
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7ff ff58 	bl	800d19a <get_ldnumber>
 800d2ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	da01      	bge.n	800d2f6 <find_volume+0x26>
 800d2f2:	230b      	movs	r3, #11
 800d2f4:	e22d      	b.n	800d752 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d2f6:	4aa1      	ldr	r2, [pc, #644]	; (800d57c <find_volume+0x2ac>)
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d302:	2b00      	cmp	r3, #0
 800d304:	d101      	bne.n	800d30a <find_volume+0x3a>
 800d306:	230c      	movs	r3, #12
 800d308:	e223      	b.n	800d752 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d30e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d310:	79fb      	ldrb	r3, [r7, #7]
 800d312:	f023 0301 	bic.w	r3, r3, #1
 800d316:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d01a      	beq.n	800d356 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d322:	785b      	ldrb	r3, [r3, #1]
 800d324:	4618      	mov	r0, r3
 800d326:	f7fe fd17 	bl	800bd58 <disk_status>
 800d32a:	4603      	mov	r3, r0
 800d32c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10c      	bne.n	800d356 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d33c:	79fb      	ldrb	r3, [r7, #7]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d007      	beq.n	800d352 <find_volume+0x82>
 800d342:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d346:	f003 0304 	and.w	r3, r3, #4
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d34e:	230a      	movs	r3, #10
 800d350:	e1ff      	b.n	800d752 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d352:	2300      	movs	r3, #0
 800d354:	e1fd      	b.n	800d752 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	2200      	movs	r2, #0
 800d35a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	785b      	ldrb	r3, [r3, #1]
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fe fd0f 	bl	800bd8c <disk_initialize>
 800d36e:	4603      	mov	r3, r0
 800d370:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d380:	2303      	movs	r3, #3
 800d382:	e1e6      	b.n	800d752 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d007      	beq.n	800d39a <find_volume+0xca>
 800d38a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d38e:	f003 0304 	and.w	r3, r3, #4
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d396:	230a      	movs	r3, #10
 800d398:	e1db      	b.n	800d752 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d39e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3a2:	f7ff ff3f 	bl	800d224 <check_fs>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d3ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d149      	bne.n	800d448 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	643b      	str	r3, [r7, #64]	; 0x40
 800d3b8:	e01e      	b.n	800d3f8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c2:	011b      	lsls	r3, r3, #4
 800d3c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d3c8:	4413      	add	r3, r2
 800d3ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	3304      	adds	r3, #4
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d006      	beq.n	800d3e4 <find_volume+0x114>
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d8:	3308      	adds	r3, #8
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fd72 	bl	800bec4 <ld_dword>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	e000      	b.n	800d3e6 <find_volume+0x116>
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	3358      	adds	r3, #88	; 0x58
 800d3ec:	443b      	add	r3, r7
 800d3ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	643b      	str	r3, [r7, #64]	; 0x40
 800d3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3fa:	2b03      	cmp	r3, #3
 800d3fc:	d9dd      	bls.n	800d3ba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d3fe:	2300      	movs	r3, #0
 800d400:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <find_volume+0x13e>
 800d408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d40a:	3b01      	subs	r3, #1
 800d40c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	3358      	adds	r3, #88	; 0x58
 800d414:	443b      	add	r3, r7
 800d416:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d41a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d005      	beq.n	800d42e <find_volume+0x15e>
 800d422:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d424:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d426:	f7ff fefd 	bl	800d224 <check_fs>
 800d42a:	4603      	mov	r3, r0
 800d42c:	e000      	b.n	800d430 <find_volume+0x160>
 800d42e:	2303      	movs	r3, #3
 800d430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d905      	bls.n	800d448 <find_volume+0x178>
 800d43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d43e:	3301      	adds	r3, #1
 800d440:	643b      	str	r3, [r7, #64]	; 0x40
 800d442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d444:	2b03      	cmp	r3, #3
 800d446:	d9e2      	bls.n	800d40e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d44c:	2b04      	cmp	r3, #4
 800d44e:	d101      	bne.n	800d454 <find_volume+0x184>
 800d450:	2301      	movs	r3, #1
 800d452:	e17e      	b.n	800d752 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d901      	bls.n	800d460 <find_volume+0x190>
 800d45c:	230d      	movs	r3, #13
 800d45e:	e178      	b.n	800d752 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	3330      	adds	r3, #48	; 0x30
 800d464:	330b      	adds	r3, #11
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe fd14 	bl	800be94 <ld_word>
 800d46c:	4603      	mov	r3, r0
 800d46e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d472:	d001      	beq.n	800d478 <find_volume+0x1a8>
 800d474:	230d      	movs	r3, #13
 800d476:	e16c      	b.n	800d752 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47a:	3330      	adds	r3, #48	; 0x30
 800d47c:	3316      	adds	r3, #22
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe fd08 	bl	800be94 <ld_word>
 800d484:	4603      	mov	r3, r0
 800d486:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d106      	bne.n	800d49c <find_volume+0x1cc>
 800d48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d490:	3330      	adds	r3, #48	; 0x30
 800d492:	3324      	adds	r3, #36	; 0x24
 800d494:	4618      	mov	r0, r3
 800d496:	f7fe fd15 	bl	800bec4 <ld_dword>
 800d49a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d4a0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ae:	789b      	ldrb	r3, [r3, #2]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d005      	beq.n	800d4c0 <find_volume+0x1f0>
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b6:	789b      	ldrb	r3, [r3, #2]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d001      	beq.n	800d4c0 <find_volume+0x1f0>
 800d4bc:	230d      	movs	r3, #13
 800d4be:	e148      	b.n	800d752 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	789b      	ldrb	r3, [r3, #2]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4c8:	fb02 f303 	mul.w	r3, r2, r3
 800d4cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4dc:	895b      	ldrh	r3, [r3, #10]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d008      	beq.n	800d4f4 <find_volume+0x224>
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e4:	895b      	ldrh	r3, [r3, #10]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	895b      	ldrh	r3, [r3, #10]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <find_volume+0x228>
 800d4f4:	230d      	movs	r3, #13
 800d4f6:	e12c      	b.n	800d752 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	3330      	adds	r3, #48	; 0x30
 800d4fc:	3311      	adds	r3, #17
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe fcc8 	bl	800be94 <ld_word>
 800d504:	4603      	mov	r3, r0
 800d506:	461a      	mov	r2, r3
 800d508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50e:	891b      	ldrh	r3, [r3, #8]
 800d510:	f003 030f 	and.w	r3, r3, #15
 800d514:	b29b      	uxth	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <find_volume+0x24e>
 800d51a:	230d      	movs	r3, #13
 800d51c:	e119      	b.n	800d752 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d520:	3330      	adds	r3, #48	; 0x30
 800d522:	3313      	adds	r3, #19
 800d524:	4618      	mov	r0, r3
 800d526:	f7fe fcb5 	bl	800be94 <ld_word>
 800d52a:	4603      	mov	r3, r0
 800d52c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d530:	2b00      	cmp	r3, #0
 800d532:	d106      	bne.n	800d542 <find_volume+0x272>
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	3330      	adds	r3, #48	; 0x30
 800d538:	3320      	adds	r3, #32
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe fcc2 	bl	800bec4 <ld_dword>
 800d540:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	3330      	adds	r3, #48	; 0x30
 800d546:	330e      	adds	r3, #14
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fca3 	bl	800be94 <ld_word>
 800d54e:	4603      	mov	r3, r0
 800d550:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d552:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <find_volume+0x28c>
 800d558:	230d      	movs	r3, #13
 800d55a:	e0fa      	b.n	800d752 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d55c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d560:	4413      	add	r3, r2
 800d562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d564:	8912      	ldrh	r2, [r2, #8]
 800d566:	0912      	lsrs	r2, r2, #4
 800d568:	b292      	uxth	r2, r2
 800d56a:	4413      	add	r3, r2
 800d56c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d56e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	429a      	cmp	r2, r3
 800d574:	d204      	bcs.n	800d580 <find_volume+0x2b0>
 800d576:	230d      	movs	r3, #13
 800d578:	e0eb      	b.n	800d752 <find_volume+0x482>
 800d57a:	bf00      	nop
 800d57c:	200008c8 	.word	0x200008c8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d584:	1ad3      	subs	r3, r2, r3
 800d586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d588:	8952      	ldrh	r2, [r2, #10]
 800d58a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d58e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <find_volume+0x2ca>
 800d596:	230d      	movs	r3, #13
 800d598:	e0db      	b.n	800d752 <find_volume+0x482>
		fmt = FS_FAT32;
 800d59a:	2303      	movs	r3, #3
 800d59c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d802      	bhi.n	800d5b0 <find_volume+0x2e0>
 800d5aa:	2302      	movs	r3, #2
 800d5ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d802      	bhi.n	800d5c0 <find_volume+0x2f0>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	1c9a      	adds	r2, r3, #2
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d5cc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d5ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5d2:	441a      	add	r2, r3
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d5d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5dc:	441a      	add	r2, r3
 800d5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d5e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5e6:	2b03      	cmp	r3, #3
 800d5e8:	d11e      	bne.n	800d628 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ec:	3330      	adds	r3, #48	; 0x30
 800d5ee:	332a      	adds	r3, #42	; 0x2a
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fe fc4f 	bl	800be94 <ld_word>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <find_volume+0x330>
 800d5fc:	230d      	movs	r3, #13
 800d5fe:	e0a8      	b.n	800d752 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	891b      	ldrh	r3, [r3, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d001      	beq.n	800d60c <find_volume+0x33c>
 800d608:	230d      	movs	r3, #13
 800d60a:	e0a2      	b.n	800d752 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60e:	3330      	adds	r3, #48	; 0x30
 800d610:	332c      	adds	r3, #44	; 0x2c
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe fc56 	bl	800bec4 <ld_dword>
 800d618:	4602      	mov	r2, r0
 800d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d620:	695b      	ldr	r3, [r3, #20]
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	647b      	str	r3, [r7, #68]	; 0x44
 800d626:	e01f      	b.n	800d668 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62a:	891b      	ldrh	r3, [r3, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d101      	bne.n	800d634 <find_volume+0x364>
 800d630:	230d      	movs	r3, #13
 800d632:	e08e      	b.n	800d752 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	6a1a      	ldr	r2, [r3, #32]
 800d638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d63a:	441a      	add	r2, r3
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d644:	2b02      	cmp	r3, #2
 800d646:	d103      	bne.n	800d650 <find_volume+0x380>
 800d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64a:	695b      	ldr	r3, [r3, #20]
 800d64c:	005b      	lsls	r3, r3, #1
 800d64e:	e00a      	b.n	800d666 <find_volume+0x396>
 800d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d652:	695a      	ldr	r2, [r3, #20]
 800d654:	4613      	mov	r3, r2
 800d656:	005b      	lsls	r3, r3, #1
 800d658:	4413      	add	r3, r2
 800d65a:	085a      	lsrs	r2, r3, #1
 800d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	f003 0301 	and.w	r3, r3, #1
 800d664:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d666:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	699a      	ldr	r2, [r3, #24]
 800d66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d66e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d672:	0a5b      	lsrs	r3, r3, #9
 800d674:	429a      	cmp	r2, r3
 800d676:	d201      	bcs.n	800d67c <find_volume+0x3ac>
 800d678:	230d      	movs	r3, #13
 800d67a:	e06a      	b.n	800d752 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d682:	611a      	str	r2, [r3, #16]
 800d684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d686:	691a      	ldr	r2, [r3, #16]
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68e:	2280      	movs	r2, #128	; 0x80
 800d690:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d692:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d696:	2b03      	cmp	r3, #3
 800d698:	d149      	bne.n	800d72e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	3330      	adds	r3, #48	; 0x30
 800d69e:	3330      	adds	r3, #48	; 0x30
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7fe fbf7 	bl	800be94 <ld_word>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d140      	bne.n	800d72e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6b4:	f7fe fe9e 	bl	800c3f4 <move_window>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d137      	bne.n	800d72e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c6:	3330      	adds	r3, #48	; 0x30
 800d6c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fe fbe1 	bl	800be94 <ld_word>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d127      	bne.n	800d72e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e0:	3330      	adds	r3, #48	; 0x30
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe fbee 	bl	800bec4 <ld_dword>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	4a1c      	ldr	r2, [pc, #112]	; (800d75c <find_volume+0x48c>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d11e      	bne.n	800d72e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f2:	3330      	adds	r3, #48	; 0x30
 800d6f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe fbe3 	bl	800bec4 <ld_dword>
 800d6fe:	4603      	mov	r3, r0
 800d700:	4a17      	ldr	r2, [pc, #92]	; (800d760 <find_volume+0x490>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d113      	bne.n	800d72e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d708:	3330      	adds	r3, #48	; 0x30
 800d70a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fbd8 	bl	800bec4 <ld_dword>
 800d714:	4602      	mov	r2, r0
 800d716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d718:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71c:	3330      	adds	r3, #48	; 0x30
 800d71e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe fbce 	bl	800bec4 <ld_dword>
 800d728:	4602      	mov	r2, r0
 800d72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d730:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d734:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d736:	4b0b      	ldr	r3, [pc, #44]	; (800d764 <find_volume+0x494>)
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	3301      	adds	r3, #1
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	4b09      	ldr	r3, [pc, #36]	; (800d764 <find_volume+0x494>)
 800d740:	801a      	strh	r2, [r3, #0]
 800d742:	4b08      	ldr	r3, [pc, #32]	; (800d764 <find_volume+0x494>)
 800d744:	881a      	ldrh	r2, [r3, #0]
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d74a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d74c:	f7fe fdea 	bl	800c324 <clear_lock>
#endif
	return FR_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3758      	adds	r7, #88	; 0x58
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	41615252 	.word	0x41615252
 800d760:	61417272 	.word	0x61417272
 800d764:	200008cc 	.word	0x200008cc

0800d768 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d772:	2309      	movs	r3, #9
 800d774:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d01c      	beq.n	800d7b6 <validate+0x4e>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d018      	beq.n	800d7b6 <validate+0x4e>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d013      	beq.n	800d7b6 <validate+0x4e>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	889a      	ldrh	r2, [r3, #4]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	88db      	ldrh	r3, [r3, #6]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d10c      	bne.n	800d7b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	785b      	ldrb	r3, [r3, #1]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fe fad8 	bl	800bd58 <disk_status>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	f003 0301 	and.w	r3, r3, #1
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d101      	bne.n	800d7b6 <validate+0x4e>
			res = FR_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d7b6:	7bfb      	ldrb	r3, [r7, #15]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d102      	bne.n	800d7c2 <validate+0x5a>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	e000      	b.n	800d7c4 <validate+0x5c>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	6013      	str	r3, [r2, #0]
	return res;
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
	...

0800d7d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b088      	sub	sp, #32
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d7e6:	f107 0310 	add.w	r3, r7, #16
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7ff fcd5 	bl	800d19a <get_ldnumber>
 800d7f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	da01      	bge.n	800d7fc <f_mount+0x28>
 800d7f8:	230b      	movs	r3, #11
 800d7fa:	e02b      	b.n	800d854 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d7fc:	4a17      	ldr	r2, [pc, #92]	; (800d85c <f_mount+0x88>)
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d804:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d005      	beq.n	800d818 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d80c:	69b8      	ldr	r0, [r7, #24]
 800d80e:	f7fe fd89 	bl	800c324 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	2200      	movs	r2, #0
 800d816:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d002      	beq.n	800d824 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	490d      	ldr	r1, [pc, #52]	; (800d85c <f_mount+0x88>)
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <f_mount+0x66>
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	2b01      	cmp	r3, #1
 800d838:	d001      	beq.n	800d83e <f_mount+0x6a>
 800d83a:	2300      	movs	r3, #0
 800d83c:	e00a      	b.n	800d854 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d83e:	f107 010c 	add.w	r1, r7, #12
 800d842:	f107 0308 	add.w	r3, r7, #8
 800d846:	2200      	movs	r2, #0
 800d848:	4618      	mov	r0, r3
 800d84a:	f7ff fd41 	bl	800d2d0 <find_volume>
 800d84e:	4603      	mov	r3, r0
 800d850:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d852:	7dfb      	ldrb	r3, [r7, #23]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3720      	adds	r7, #32
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	200008c8 	.word	0x200008c8

0800d860 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b09a      	sub	sp, #104	; 0x68
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	4613      	mov	r3, r2
 800d86c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d101      	bne.n	800d878 <f_open+0x18>
 800d874:	2309      	movs	r3, #9
 800d876:	e1ad      	b.n	800dbd4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d878:	79fb      	ldrb	r3, [r7, #7]
 800d87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d87e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d880:	79fa      	ldrb	r2, [r7, #7]
 800d882:	f107 0114 	add.w	r1, r7, #20
 800d886:	f107 0308 	add.w	r3, r7, #8
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fd20 	bl	800d2d0 <find_volume>
 800d890:	4603      	mov	r3, r0
 800d892:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d896:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f040 8191 	bne.w	800dbc2 <f_open+0x362>
		dj.obj.fs = fs;
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	f107 0318 	add.w	r3, r7, #24
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fc03 	bl	800d0b8 <follow_path>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d8b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d11a      	bne.n	800d8f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d8c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d8c4:	b25b      	sxtb	r3, r3
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	da03      	bge.n	800d8d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d8ca:	2306      	movs	r3, #6
 800d8cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d8d0:	e011      	b.n	800d8f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d8d2:	79fb      	ldrb	r3, [r7, #7]
 800d8d4:	f023 0301 	bic.w	r3, r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	bf14      	ite	ne
 800d8dc:	2301      	movne	r3, #1
 800d8de:	2300      	moveq	r3, #0
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	f107 0318 	add.w	r3, r7, #24
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fe fbd2 	bl	800c094 <chk_lock>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d8f6:	79fb      	ldrb	r3, [r7, #7]
 800d8f8:	f003 031c 	and.w	r3, r3, #28
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d07f      	beq.n	800da00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d904:	2b00      	cmp	r3, #0
 800d906:	d017      	beq.n	800d938 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d908:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d90c:	2b04      	cmp	r3, #4
 800d90e:	d10e      	bne.n	800d92e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d910:	f7fe fc1c 	bl	800c14c <enq_lock>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d006      	beq.n	800d928 <f_open+0xc8>
 800d91a:	f107 0318 	add.w	r3, r7, #24
 800d91e:	4618      	mov	r0, r3
 800d920:	f7ff fb03 	bl	800cf2a <dir_register>
 800d924:	4603      	mov	r3, r0
 800d926:	e000      	b.n	800d92a <f_open+0xca>
 800d928:	2312      	movs	r3, #18
 800d92a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	f043 0308 	orr.w	r3, r3, #8
 800d934:	71fb      	strb	r3, [r7, #7]
 800d936:	e010      	b.n	800d95a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d938:	7fbb      	ldrb	r3, [r7, #30]
 800d93a:	f003 0311 	and.w	r3, r3, #17
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d003      	beq.n	800d94a <f_open+0xea>
					res = FR_DENIED;
 800d942:	2307      	movs	r3, #7
 800d944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d948:	e007      	b.n	800d95a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d94a:	79fb      	ldrb	r3, [r7, #7]
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b00      	cmp	r3, #0
 800d952:	d002      	beq.n	800d95a <f_open+0xfa>
 800d954:	2308      	movs	r3, #8
 800d956:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d95a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d168      	bne.n	800da34 <f_open+0x1d4>
 800d962:	79fb      	ldrb	r3, [r7, #7]
 800d964:	f003 0308 	and.w	r3, r3, #8
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d063      	beq.n	800da34 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d96c:	f7fc fba6 	bl	800a0bc <get_fattime>
 800d970:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d974:	330e      	adds	r3, #14
 800d976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fe fae1 	bl	800bf40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d980:	3316      	adds	r3, #22
 800d982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d984:	4618      	mov	r0, r3
 800d986:	f7fe fadb 	bl	800bf40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98c:	330b      	adds	r3, #11
 800d98e:	2220      	movs	r2, #32
 800d990:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d996:	4611      	mov	r1, r2
 800d998:	4618      	mov	r0, r3
 800d99a:	f7ff fa32 	bl	800ce02 <ld_clust>
 800d99e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff fa4a 	bl	800ce40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ae:	331c      	adds	r3, #28
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe fac4 	bl	800bf40 <st_dword>
					fs->wflag = 1;
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d9be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d037      	beq.n	800da34 <f_open+0x1d4>
						dw = fs->winsect;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d9ca:	f107 0318 	add.w	r3, r7, #24
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe ff5d 	bl	800c892 <remove_chain>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d9de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d126      	bne.n	800da34 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fe fd02 	bl	800c3f4 <move_window>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d9fa:	3a01      	subs	r2, #1
 800d9fc:	60da      	str	r2, [r3, #12]
 800d9fe:	e019      	b.n	800da34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800da00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da04:	2b00      	cmp	r3, #0
 800da06:	d115      	bne.n	800da34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800da08:	7fbb      	ldrb	r3, [r7, #30]
 800da0a:	f003 0310 	and.w	r3, r3, #16
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <f_open+0x1ba>
					res = FR_NO_FILE;
 800da12:	2304      	movs	r3, #4
 800da14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800da18:	e00c      	b.n	800da34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800da1a:	79fb      	ldrb	r3, [r7, #7]
 800da1c:	f003 0302 	and.w	r3, r3, #2
 800da20:	2b00      	cmp	r3, #0
 800da22:	d007      	beq.n	800da34 <f_open+0x1d4>
 800da24:	7fbb      	ldrb	r3, [r7, #30]
 800da26:	f003 0301 	and.w	r3, r3, #1
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d002      	beq.n	800da34 <f_open+0x1d4>
						res = FR_DENIED;
 800da2e:	2307      	movs	r3, #7
 800da30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800da34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d128      	bne.n	800da8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800da3c:	79fb      	ldrb	r3, [r7, #7]
 800da3e:	f003 0308 	and.w	r3, r3, #8
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800da56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da5c:	79fb      	ldrb	r3, [r7, #7]
 800da5e:	f023 0301 	bic.w	r3, r3, #1
 800da62:	2b00      	cmp	r3, #0
 800da64:	bf14      	ite	ne
 800da66:	2301      	movne	r3, #1
 800da68:	2300      	moveq	r3, #0
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	461a      	mov	r2, r3
 800da6e:	f107 0318 	add.w	r3, r7, #24
 800da72:	4611      	mov	r1, r2
 800da74:	4618      	mov	r0, r3
 800da76:	f7fe fb8b 	bl	800c190 <inc_lock>
 800da7a:	4602      	mov	r2, r0
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d102      	bne.n	800da8e <f_open+0x22e>
 800da88:	2302      	movs	r3, #2
 800da8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800da8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da92:	2b00      	cmp	r3, #0
 800da94:	f040 8095 	bne.w	800dbc2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff f9af 	bl	800ce02 <ld_clust>
 800daa4:	4602      	mov	r2, r0
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800daaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daac:	331c      	adds	r3, #28
 800daae:	4618      	mov	r0, r3
 800dab0:	f7fe fa08 	bl	800bec4 <ld_dword>
 800dab4:	4602      	mov	r2, r0
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2200      	movs	r2, #0
 800dabe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	88da      	ldrh	r2, [r3, #6]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	79fa      	ldrb	r2, [r7, #7]
 800dad2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3330      	adds	r3, #48	; 0x30
 800daea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daee:	2100      	movs	r1, #0
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fe fa72 	bl	800bfda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800daf6:	79fb      	ldrb	r3, [r7, #7]
 800daf8:	f003 0320 	and.w	r3, r3, #32
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d060      	beq.n	800dbc2 <f_open+0x362>
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d05c      	beq.n	800dbc2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	68da      	ldr	r2, [r3, #12]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	895b      	ldrh	r3, [r3, #10]
 800db14:	025b      	lsls	r3, r3, #9
 800db16:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db24:	e016      	b.n	800db54 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fe fd1d 	bl	800c56a <get_fat>
 800db30:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800db32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db34:	2b01      	cmp	r3, #1
 800db36:	d802      	bhi.n	800db3e <f_open+0x2de>
 800db38:	2302      	movs	r3, #2
 800db3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db44:	d102      	bne.n	800db4c <f_open+0x2ec>
 800db46:	2301      	movs	r3, #1
 800db48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db50:	1ad3      	subs	r3, r2, r3
 800db52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d103      	bne.n	800db64 <f_open+0x304>
 800db5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db60:	429a      	cmp	r2, r3
 800db62:	d8e0      	bhi.n	800db26 <f_open+0x2c6>
				}
				fp->clust = clst;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800db6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d127      	bne.n	800dbc2 <f_open+0x362>
 800db72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d022      	beq.n	800dbc2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fcd3 	bl	800c52c <clust2sect>
 800db86:	64f8      	str	r0, [r7, #76]	; 0x4c
 800db88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d103      	bne.n	800db96 <f_open+0x336>
						res = FR_INT_ERR;
 800db8e:	2302      	movs	r3, #2
 800db90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800db94:	e015      	b.n	800dbc2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800db96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db98:	0a5a      	lsrs	r2, r3, #9
 800db9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db9c:	441a      	add	r2, r3
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	7858      	ldrb	r0, [r3, #1]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6a1a      	ldr	r2, [r3, #32]
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	f7fe f911 	bl	800bdd8 <disk_read>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <f_open+0x362>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dbc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <f_open+0x370>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dbd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3768      	adds	r7, #104	; 0x68
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b08e      	sub	sp, #56	; 0x38
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
 800dbe8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f107 0214 	add.w	r2, r7, #20
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7ff fdb3 	bl	800d768 <validate>
 800dc02:	4603      	mov	r3, r0
 800dc04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d107      	bne.n	800dc20 <f_read+0x44>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	7d5b      	ldrb	r3, [r3, #21]
 800dc14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <f_read+0x4a>
 800dc20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc24:	e115      	b.n	800de52 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	7d1b      	ldrb	r3, [r3, #20]
 800dc2a:	f003 0301 	and.w	r3, r3, #1
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <f_read+0x5a>
 800dc32:	2307      	movs	r3, #7
 800dc34:	e10d      	b.n	800de52 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	68da      	ldr	r2, [r3, #12]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	699b      	ldr	r3, [r3, #24]
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	6a3b      	ldr	r3, [r7, #32]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	f240 80fe 	bls.w	800de48 <f_read+0x26c>
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800dc50:	e0fa      	b.n	800de48 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	699b      	ldr	r3, [r3, #24]
 800dc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f040 80c6 	bne.w	800ddec <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	699b      	ldr	r3, [r3, #24]
 800dc64:	0a5b      	lsrs	r3, r3, #9
 800dc66:	697a      	ldr	r2, [r7, #20]
 800dc68:	8952      	ldrh	r2, [r2, #10]
 800dc6a:	3a01      	subs	r2, #1
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d12f      	bne.n	800dcd6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d103      	bne.n	800dc86 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	633b      	str	r3, [r7, #48]	; 0x30
 800dc84:	e013      	b.n	800dcae <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d007      	beq.n	800dc9e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	699b      	ldr	r3, [r3, #24]
 800dc92:	4619      	mov	r1, r3
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f7fe fef9 	bl	800ca8c <clmt_clust>
 800dc9a:	6338      	str	r0, [r7, #48]	; 0x30
 800dc9c:	e007      	b.n	800dcae <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	69db      	ldr	r3, [r3, #28]
 800dca4:	4619      	mov	r1, r3
 800dca6:	4610      	mov	r0, r2
 800dca8:	f7fe fc5f 	bl	800c56a <get_fat>
 800dcac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d804      	bhi.n	800dcbe <f_read+0xe2>
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	755a      	strb	r2, [r3, #21]
 800dcba:	2302      	movs	r3, #2
 800dcbc:	e0c9      	b.n	800de52 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcc4:	d104      	bne.n	800dcd0 <f_read+0xf4>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	755a      	strb	r2, [r3, #21]
 800dccc:	2301      	movs	r3, #1
 800dcce:	e0c0      	b.n	800de52 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcd4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dcd6:	697a      	ldr	r2, [r7, #20]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	69db      	ldr	r3, [r3, #28]
 800dcdc:	4619      	mov	r1, r3
 800dcde:	4610      	mov	r0, r2
 800dce0:	f7fe fc24 	bl	800c52c <clust2sect>
 800dce4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d104      	bne.n	800dcf6 <f_read+0x11a>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2202      	movs	r2, #2
 800dcf0:	755a      	strb	r2, [r3, #21]
 800dcf2:	2302      	movs	r3, #2
 800dcf4:	e0ad      	b.n	800de52 <f_read+0x276>
			sect += csect;
 800dcf6:	69ba      	ldr	r2, [r7, #24]
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	0a5b      	lsrs	r3, r3, #9
 800dd02:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d039      	beq.n	800dd7e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd0a:	69fa      	ldr	r2, [r7, #28]
 800dd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0e:	4413      	add	r3, r2
 800dd10:	697a      	ldr	r2, [r7, #20]
 800dd12:	8952      	ldrh	r2, [r2, #10]
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d905      	bls.n	800dd24 <f_read+0x148>
					cc = fs->csize - csect;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	895b      	ldrh	r3, [r3, #10]
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	7858      	ldrb	r0, [r3, #1]
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	69ba      	ldr	r2, [r7, #24]
 800dd2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd2e:	f7fe f853 	bl	800bdd8 <disk_read>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d004      	beq.n	800dd42 <f_read+0x166>
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	755a      	strb	r2, [r3, #21]
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e087      	b.n	800de52 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	7d1b      	ldrb	r3, [r3, #20]
 800dd46:	b25b      	sxtb	r3, r3
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	da14      	bge.n	800dd76 <f_read+0x19a>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6a1a      	ldr	r2, [r3, #32]
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d90d      	bls.n	800dd76 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6a1a      	ldr	r2, [r3, #32]
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	025b      	lsls	r3, r3, #9
 800dd64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd66:	18d0      	adds	r0, r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3330      	adds	r3, #48	; 0x30
 800dd6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd70:	4619      	mov	r1, r3
 800dd72:	f7fe f911 	bl	800bf98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd78:	025b      	lsls	r3, r3, #9
 800dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800dd7c:	e050      	b.n	800de20 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	69ba      	ldr	r2, [r7, #24]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d02e      	beq.n	800dde6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	7d1b      	ldrb	r3, [r3, #20]
 800dd8c:	b25b      	sxtb	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	da18      	bge.n	800ddc4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	7858      	ldrb	r0, [r3, #1]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6a1a      	ldr	r2, [r3, #32]
 800dda0:	2301      	movs	r3, #1
 800dda2:	f7fe f839 	bl	800be18 <disk_write>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d004      	beq.n	800ddb6 <f_read+0x1da>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	755a      	strb	r2, [r3, #21]
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e04d      	b.n	800de52 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	7d1b      	ldrb	r3, [r3, #20]
 800ddba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	7858      	ldrb	r0, [r3, #1]
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ddce:	2301      	movs	r3, #1
 800ddd0:	69ba      	ldr	r2, [r7, #24]
 800ddd2:	f7fe f801 	bl	800bdd8 <disk_read>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d004      	beq.n	800dde6 <f_read+0x20a>
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2201      	movs	r2, #1
 800dde0:	755a      	strb	r2, [r3, #21]
 800dde2:	2301      	movs	r3, #1
 800dde4:	e035      	b.n	800de52 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	69ba      	ldr	r2, [r7, #24]
 800ddea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddf4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ddf8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ddfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d901      	bls.n	800de06 <f_read+0x22a>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de14:	4413      	add	r3, r2
 800de16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de18:	4619      	mov	r1, r3
 800de1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de1c:	f7fe f8bc 	bl	800bf98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800de20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de24:	4413      	add	r3, r2
 800de26:	627b      	str	r3, [r7, #36]	; 0x24
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	699a      	ldr	r2, [r3, #24]
 800de2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2e:	441a      	add	r2, r3
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	619a      	str	r2, [r3, #24]
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3a:	441a      	add	r2, r3
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f47f af01 	bne.w	800dc52 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3738      	adds	r7, #56	; 0x38
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b08c      	sub	sp, #48	; 0x30
 800de5e:	af00      	add	r7, sp, #0
 800de60:	60f8      	str	r0, [r7, #12]
 800de62:	60b9      	str	r1, [r7, #8]
 800de64:	607a      	str	r2, [r7, #4]
 800de66:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f107 0210 	add.w	r2, r7, #16
 800de78:	4611      	mov	r1, r2
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff fc74 	bl	800d768 <validate>
 800de80:	4603      	mov	r3, r0
 800de82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800de86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d107      	bne.n	800de9e <f_write+0x44>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	7d5b      	ldrb	r3, [r3, #21]
 800de92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800de96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <f_write+0x4a>
 800de9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dea2:	e14b      	b.n	800e13c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	7d1b      	ldrb	r3, [r3, #20]
 800dea8:	f003 0302 	and.w	r3, r3, #2
 800deac:	2b00      	cmp	r3, #0
 800deae:	d101      	bne.n	800deb4 <f_write+0x5a>
 800deb0:	2307      	movs	r3, #7
 800deb2:	e143      	b.n	800e13c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	699a      	ldr	r2, [r3, #24]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	441a      	add	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	f080 812d 	bcs.w	800e120 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	699b      	ldr	r3, [r3, #24]
 800deca:	43db      	mvns	r3, r3
 800decc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dece:	e127      	b.n	800e120 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	699b      	ldr	r3, [r3, #24]
 800ded4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f040 80e3 	bne.w	800e0a4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	0a5b      	lsrs	r3, r3, #9
 800dee4:	693a      	ldr	r2, [r7, #16]
 800dee6:	8952      	ldrh	r2, [r2, #10]
 800dee8:	3a01      	subs	r2, #1
 800deea:	4013      	ands	r3, r2
 800deec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d143      	bne.n	800df7c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10c      	bne.n	800df16 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800df02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df04:	2b00      	cmp	r3, #0
 800df06:	d11a      	bne.n	800df3e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2100      	movs	r1, #0
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fe fd25 	bl	800c95c <create_chain>
 800df12:	62b8      	str	r0, [r7, #40]	; 0x28
 800df14:	e013      	b.n	800df3e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d007      	beq.n	800df2e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	699b      	ldr	r3, [r3, #24]
 800df22:	4619      	mov	r1, r3
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f7fe fdb1 	bl	800ca8c <clmt_clust>
 800df2a:	62b8      	str	r0, [r7, #40]	; 0x28
 800df2c:	e007      	b.n	800df3e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	69db      	ldr	r3, [r3, #28]
 800df34:	4619      	mov	r1, r3
 800df36:	4610      	mov	r0, r2
 800df38:	f7fe fd10 	bl	800c95c <create_chain>
 800df3c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	2b00      	cmp	r3, #0
 800df42:	f000 80f2 	beq.w	800e12a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d104      	bne.n	800df56 <f_write+0xfc>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2202      	movs	r2, #2
 800df50:	755a      	strb	r2, [r3, #21]
 800df52:	2302      	movs	r3, #2
 800df54:	e0f2      	b.n	800e13c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df5c:	d104      	bne.n	800df68 <f_write+0x10e>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2201      	movs	r2, #1
 800df62:	755a      	strb	r2, [r3, #21]
 800df64:	2301      	movs	r3, #1
 800df66:	e0e9      	b.n	800e13c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df6c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d102      	bne.n	800df7c <f_write+0x122>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df7a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	7d1b      	ldrb	r3, [r3, #20]
 800df80:	b25b      	sxtb	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	da18      	bge.n	800dfb8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	7858      	ldrb	r0, [r3, #1]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6a1a      	ldr	r2, [r3, #32]
 800df94:	2301      	movs	r3, #1
 800df96:	f7fd ff3f 	bl	800be18 <disk_write>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d004      	beq.n	800dfaa <f_write+0x150>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	755a      	strb	r2, [r3, #21]
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e0c8      	b.n	800e13c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	7d1b      	ldrb	r3, [r3, #20]
 800dfae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dfb8:	693a      	ldr	r2, [r7, #16]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	f7fe fab3 	bl	800c52c <clust2sect>
 800dfc6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d104      	bne.n	800dfd8 <f_write+0x17e>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	755a      	strb	r2, [r3, #21]
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	e0b1      	b.n	800e13c <f_write+0x2e2>
			sect += csect;
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	4413      	add	r3, r2
 800dfde:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	0a5b      	lsrs	r3, r3, #9
 800dfe4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d03c      	beq.n	800e066 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dfec:	69ba      	ldr	r2, [r7, #24]
 800dfee:	6a3b      	ldr	r3, [r7, #32]
 800dff0:	4413      	add	r3, r2
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	8952      	ldrh	r2, [r2, #10]
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d905      	bls.n	800e006 <f_write+0x1ac>
					cc = fs->csize - csect;
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	895b      	ldrh	r3, [r3, #10]
 800dffe:	461a      	mov	r2, r3
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	1ad3      	subs	r3, r2, r3
 800e004:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	7858      	ldrb	r0, [r3, #1]
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	69f9      	ldr	r1, [r7, #28]
 800e010:	f7fd ff02 	bl	800be18 <disk_write>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d004      	beq.n	800e024 <f_write+0x1ca>
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2201      	movs	r2, #1
 800e01e:	755a      	strb	r2, [r3, #21]
 800e020:	2301      	movs	r3, #1
 800e022:	e08b      	b.n	800e13c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6a1a      	ldr	r2, [r3, #32]
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	6a3a      	ldr	r2, [r7, #32]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d915      	bls.n	800e05e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6a1a      	ldr	r2, [r3, #32]
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	025b      	lsls	r3, r3, #9
 800e042:	69fa      	ldr	r2, [r7, #28]
 800e044:	4413      	add	r3, r2
 800e046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e04a:	4619      	mov	r1, r3
 800e04c:	f7fd ffa4 	bl	800bf98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	7d1b      	ldrb	r3, [r3, #20]
 800e054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	025b      	lsls	r3, r3, #9
 800e062:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e064:	e03f      	b.n	800e0e6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6a1b      	ldr	r3, [r3, #32]
 800e06a:	697a      	ldr	r2, [r7, #20]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d016      	beq.n	800e09e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	699a      	ldr	r2, [r3, #24]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e078:	429a      	cmp	r2, r3
 800e07a:	d210      	bcs.n	800e09e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	7858      	ldrb	r0, [r3, #1]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e086:	2301      	movs	r3, #1
 800e088:	697a      	ldr	r2, [r7, #20]
 800e08a:	f7fd fea5 	bl	800bdd8 <disk_read>
 800e08e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e090:	2b00      	cmp	r3, #0
 800e092:	d004      	beq.n	800e09e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2201      	movs	r2, #1
 800e098:	755a      	strb	r2, [r3, #21]
 800e09a:	2301      	movs	r3, #1
 800e09c:	e04e      	b.n	800e13c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e0b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e0b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d901      	bls.n	800e0be <f_write+0x264>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	699b      	ldr	r3, [r3, #24]
 800e0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0cc:	4413      	add	r3, r2
 800e0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0d0:	69f9      	ldr	r1, [r7, #28]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fd ff60 	bl	800bf98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	7d1b      	ldrb	r3, [r3, #20]
 800e0dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e0e6:	69fa      	ldr	r2, [r7, #28]
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	4413      	add	r3, r2
 800e0ec:	61fb      	str	r3, [r7, #28]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	699a      	ldr	r2, [r3, #24]
 800e0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f4:	441a      	add	r2, r3
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	619a      	str	r2, [r3, #24]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	68da      	ldr	r2, [r3, #12]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	429a      	cmp	r2, r3
 800e104:	bf38      	it	cc
 800e106:	461a      	movcc	r2, r3
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	60da      	str	r2, [r3, #12]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e112:	441a      	add	r2, r3
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	601a      	str	r2, [r3, #0]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	f47f aed4 	bne.w	800ded0 <f_write+0x76>
 800e128:	e000      	b.n	800e12c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e12a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	7d1b      	ldrb	r3, [r3, #20]
 800e130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e134:	b2da      	uxtb	r2, r3
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3730      	adds	r7, #48	; 0x30
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f107 0208 	add.w	r2, r7, #8
 800e152:	4611      	mov	r1, r2
 800e154:	4618      	mov	r0, r3
 800e156:	f7ff fb07 	bl	800d768 <validate>
 800e15a:	4603      	mov	r3, r0
 800e15c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e15e:	7dfb      	ldrb	r3, [r7, #23]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d168      	bne.n	800e236 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	7d1b      	ldrb	r3, [r3, #20]
 800e168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d062      	beq.n	800e236 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	7d1b      	ldrb	r3, [r3, #20]
 800e174:	b25b      	sxtb	r3, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	da15      	bge.n	800e1a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	7858      	ldrb	r0, [r3, #1]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a1a      	ldr	r2, [r3, #32]
 800e188:	2301      	movs	r3, #1
 800e18a:	f7fd fe45 	bl	800be18 <disk_write>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d001      	beq.n	800e198 <f_sync+0x54>
 800e194:	2301      	movs	r3, #1
 800e196:	e04f      	b.n	800e238 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	7d1b      	ldrb	r3, [r3, #20]
 800e19c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e1a6:	f7fb ff89 	bl	800a0bc <get_fattime>
 800e1aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	f7fe f91d 	bl	800c3f4 <move_window>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d138      	bne.n	800e236 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	330b      	adds	r3, #11
 800e1ce:	781a      	ldrb	r2, [r3, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	330b      	adds	r3, #11
 800e1d4:	f042 0220 	orr.w	r2, r2, #32
 800e1d8:	b2d2      	uxtb	r2, r2
 800e1da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6818      	ldr	r0, [r3, #0]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	68f9      	ldr	r1, [r7, #12]
 800e1e8:	f7fe fe2a 	bl	800ce40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f103 021c 	add.w	r2, r3, #28
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	f7fd fea1 	bl	800bf40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3316      	adds	r3, #22
 800e202:	6939      	ldr	r1, [r7, #16]
 800e204:	4618      	mov	r0, r3
 800e206:	f7fd fe9b 	bl	800bf40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	3312      	adds	r3, #18
 800e20e:	2100      	movs	r1, #0
 800e210:	4618      	mov	r0, r3
 800e212:	f7fd fe7a 	bl	800bf0a <st_word>
					fs->wflag = 1;
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	2201      	movs	r2, #1
 800e21a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe f916 	bl	800c450 <sync_fs>
 800e224:	4603      	mov	r3, r0
 800e226:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	7d1b      	ldrb	r3, [r3, #20]
 800e22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e230:	b2da      	uxtb	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e236:	7dfb      	ldrb	r3, [r7, #23]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3718      	adds	r7, #24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f7ff ff7b 	bl	800e144 <f_sync>
 800e24e:	4603      	mov	r3, r0
 800e250:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d118      	bne.n	800e28a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f107 0208 	add.w	r2, r7, #8
 800e25e:	4611      	mov	r1, r2
 800e260:	4618      	mov	r0, r3
 800e262:	f7ff fa81 	bl	800d768 <validate>
 800e266:	4603      	mov	r3, r0
 800e268:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e26a:	7bfb      	ldrb	r3, [r7, #15]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10c      	bne.n	800e28a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	691b      	ldr	r3, [r3, #16]
 800e274:	4618      	mov	r0, r3
 800e276:	f7fe f819 	bl	800c2ac <dec_lock>
 800e27a:	4603      	mov	r3, r0
 800e27c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e27e:	7bfb      	ldrb	r3, [r7, #15]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d102      	bne.n	800e28a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800e294:	b590      	push	{r4, r7, lr}
 800e296:	b09d      	sub	sp, #116	; 0x74
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	607a      	str	r2, [r7, #4]
 800e29e:	603b      	str	r3, [r7, #0]
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800e2a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2ac:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e2ae:	f107 030c 	add.w	r3, r7, #12
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe ff71 	bl	800d19a <get_ldnumber>
 800e2b8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	da02      	bge.n	800e2c6 <f_mkfs+0x32>
 800e2c0:	230b      	movs	r3, #11
 800e2c2:	f000 bc0d 	b.w	800eae0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800e2c6:	4a94      	ldr	r2, [pc, #592]	; (800e518 <f_mkfs+0x284>)
 800e2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d005      	beq.n	800e2de <f_mkfs+0x4a>
 800e2d2:	4a91      	ldr	r2, [pc, #580]	; (800e518 <f_mkfs+0x284>)
 800e2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800e2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800e2ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fd fd4c 	bl	800bd8c <disk_initialize>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800e2fa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e2fe:	f003 0301 	and.w	r3, r3, #1
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <f_mkfs+0x76>
 800e306:	2303      	movs	r3, #3
 800e308:	e3ea      	b.n	800eae0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e30a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e30e:	f003 0304 	and.w	r3, r3, #4
 800e312:	2b00      	cmp	r3, #0
 800e314:	d001      	beq.n	800e31a <f_mkfs+0x86>
 800e316:	230a      	movs	r3, #10
 800e318:	e3e2      	b.n	800eae0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800e31a:	f107 0214 	add.w	r2, r7, #20
 800e31e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e322:	2103      	movs	r1, #3
 800e324:	4618      	mov	r0, r3
 800e326:	f7fd fd97 	bl	800be58 <disk_ioctl>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10c      	bne.n	800e34a <f_mkfs+0xb6>
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d009      	beq.n	800e34a <f_mkfs+0xb6>
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e33c:	d805      	bhi.n	800e34a <f_mkfs+0xb6>
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	1e5a      	subs	r2, r3, #1
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	4013      	ands	r3, r2
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <f_mkfs+0xba>
 800e34a:	2301      	movs	r3, #1
 800e34c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800e34e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e352:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d003      	beq.n	800e362 <f_mkfs+0xce>
 800e35a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d309      	bcc.n	800e376 <f_mkfs+0xe2>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e368:	d805      	bhi.n	800e376 <f_mkfs+0xe2>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	1e5a      	subs	r2, r3, #1
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4013      	ands	r3, r2
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <f_mkfs+0xe6>
 800e376:	2313      	movs	r3, #19
 800e378:	e3b2      	b.n	800eae0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800e37a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e382:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800e388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e38a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e392:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800e394:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e398:	fb02 f303 	mul.w	r3, r2, r3
 800e39c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800e39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <f_mkfs+0x114>
 800e3a4:	230e      	movs	r3, #14
 800e3a6:	e39b      	b.n	800eae0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800e3a8:	f107 0210 	add.w	r2, r7, #16
 800e3ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e3b0:	2101      	movs	r1, #1
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fd fd50 	bl	800be58 <disk_ioctl>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <f_mkfs+0x12e>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e38e      	b.n	800eae0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800e3c2:	7afb      	ldrb	r3, [r7, #11]
 800e3c4:	f003 0308 	and.w	r3, r3, #8
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d001      	beq.n	800e3d0 <f_mkfs+0x13c>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	e000      	b.n	800e3d2 <f_mkfs+0x13e>
 800e3d0:	233f      	movs	r3, #63	; 0x3f
 800e3d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d901      	bls.n	800e3e0 <f_mkfs+0x14c>
 800e3dc:	230e      	movs	r3, #14
 800e3de:	e37f      	b.n	800eae0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	1ad3      	subs	r3, r2, r3
 800e3e6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	2b7f      	cmp	r3, #127	; 0x7f
 800e3ec:	d801      	bhi.n	800e3f2 <f_mkfs+0x15e>
 800e3ee:	230e      	movs	r3, #14
 800e3f0:	e376      	b.n	800eae0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b80      	cmp	r3, #128	; 0x80
 800e3f6:	d901      	bls.n	800e3fc <f_mkfs+0x168>
 800e3f8:	2313      	movs	r3, #19
 800e3fa:	e371      	b.n	800eae0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800e3fc:	7afb      	ldrb	r3, [r7, #11]
 800e3fe:	f003 0302 	and.w	r3, r3, #2
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00d      	beq.n	800e422 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800e406:	7afb      	ldrb	r3, [r7, #11]
 800e408:	f003 0307 	and.w	r3, r3, #7
 800e40c:	2b02      	cmp	r3, #2
 800e40e:	d004      	beq.n	800e41a <f_mkfs+0x186>
 800e410:	7afb      	ldrb	r3, [r7, #11]
 800e412:	f003 0301 	and.w	r3, r3, #1
 800e416:	2b00      	cmp	r3, #0
 800e418:	d103      	bne.n	800e422 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800e41a:	2303      	movs	r3, #3
 800e41c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e420:	e009      	b.n	800e436 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800e422:	7afb      	ldrb	r3, [r7, #11]
 800e424:	f003 0301 	and.w	r3, r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <f_mkfs+0x19c>
 800e42c:	2313      	movs	r3, #19
 800e42e:	e357      	b.n	800eae0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800e430:	2302      	movs	r3, #2
 800e432:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e43a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e43e:	2b03      	cmp	r3, #3
 800e440:	d13c      	bne.n	800e4bc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800e442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e444:	2b00      	cmp	r3, #0
 800e446:	d11b      	bne.n	800e480 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	0c5b      	lsrs	r3, r3, #17
 800e44c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e44e:	2300      	movs	r3, #0
 800e450:	64bb      	str	r3, [r7, #72]	; 0x48
 800e452:	2301      	movs	r3, #1
 800e454:	653b      	str	r3, [r7, #80]	; 0x50
 800e456:	e005      	b.n	800e464 <f_mkfs+0x1d0>
 800e458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e45a:	3301      	adds	r3, #1
 800e45c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	653b      	str	r3, [r7, #80]	; 0x50
 800e464:	4a2d      	ldr	r2, [pc, #180]	; (800e51c <f_mkfs+0x288>)
 800e466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d007      	beq.n	800e480 <f_mkfs+0x1ec>
 800e470:	4a2a      	ldr	r2, [pc, #168]	; (800e51c <f_mkfs+0x288>)
 800e472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e478:	461a      	mov	r2, r3
 800e47a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d2eb      	bcs.n	800e458 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e480:	693a      	ldr	r2, [r7, #16]
 800e482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e484:	fbb2 f3f3 	udiv	r3, r2, r3
 800e488:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	3302      	adds	r3, #2
 800e48e:	009a      	lsls	r2, r3, #2
 800e490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e492:	4413      	add	r3, r2
 800e494:	1e5a      	subs	r2, r3, #1
 800e496:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e498:	fbb2 f3f3 	udiv	r3, r2, r3
 800e49c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800e49e:	2320      	movs	r3, #32
 800e4a0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d903      	bls.n	800e4b8 <f_mkfs+0x224>
 800e4b0:	6a3b      	ldr	r3, [r7, #32]
 800e4b2:	4a1b      	ldr	r2, [pc, #108]	; (800e520 <f_mkfs+0x28c>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d952      	bls.n	800e55e <f_mkfs+0x2ca>
 800e4b8:	230e      	movs	r3, #14
 800e4ba:	e311      	b.n	800eae0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d11b      	bne.n	800e4fa <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	0b1b      	lsrs	r3, r3, #12
 800e4c6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	653b      	str	r3, [r7, #80]	; 0x50
 800e4d0:	e005      	b.n	800e4de <f_mkfs+0x24a>
 800e4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	653b      	str	r3, [r7, #80]	; 0x50
 800e4de:	4a11      	ldr	r2, [pc, #68]	; (800e524 <f_mkfs+0x290>)
 800e4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d007      	beq.n	800e4fa <f_mkfs+0x266>
 800e4ea:	4a0e      	ldr	r2, [pc, #56]	; (800e524 <f_mkfs+0x290>)
 800e4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d2eb      	bcs.n	800e4d2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800e4fa:	693a      	ldr	r2, [r7, #16]
 800e4fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e502:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d90c      	bls.n	800e528 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e50e:	6a3b      	ldr	r3, [r7, #32]
 800e510:	3302      	adds	r3, #2
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e516:	e012      	b.n	800e53e <f_mkfs+0x2aa>
 800e518:	200008c8 	.word	0x200008c8
 800e51c:	0800fa60 	.word	0x0800fa60
 800e520:	0ffffff5 	.word	0x0ffffff5
 800e524:	0800fa70 	.word	0x0800fa70
				} else {
					fmt = FS_FAT12;
 800e528:	2301      	movs	r3, #1
 800e52a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e52e:	6a3a      	ldr	r2, [r7, #32]
 800e530:	4613      	mov	r3, r2
 800e532:	005b      	lsls	r3, r3, #1
 800e534:	4413      	add	r3, r2
 800e536:	3301      	adds	r3, #1
 800e538:	085b      	lsrs	r3, r3, #1
 800e53a:	3303      	adds	r3, #3
 800e53c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e53e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e542:	4413      	add	r3, r2
 800e544:	1e5a      	subs	r2, r3, #1
 800e546:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e548:	fbb2 f3f3 	udiv	r3, r2, r3
 800e54c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800e54e:	2301      	movs	r3, #1
 800e550:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e554:	015a      	lsls	r2, r3, #5
 800e556:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e558:	fbb2 f3f3 	udiv	r3, r2, r3
 800e55c:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e562:	4413      	add	r3, r2
 800e564:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e56a:	fb03 f202 	mul.w	r2, r3, r2
 800e56e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e570:	4413      	add	r3, r2
 800e572:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e574:	4413      	add	r3, r2
 800e576:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e578:	697a      	ldr	r2, [r7, #20]
 800e57a:	69fb      	ldr	r3, [r7, #28]
 800e57c:	4413      	add	r3, r2
 800e57e:	1e5a      	subs	r2, r3, #1
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	425b      	negs	r3, r3
 800e584:	401a      	ands	r2, r3
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e58c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e590:	2b03      	cmp	r3, #3
 800e592:	d108      	bne.n	800e5a6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e598:	4413      	add	r3, r2
 800e59a:	657b      	str	r3, [r7, #84]	; 0x54
 800e59c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e59e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5a0:	4413      	add	r3, r2
 800e5a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5a4:	e006      	b.n	800e5b4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e5a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5b0:	4413      	add	r3, r2
 800e5b2:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5b6:	011a      	lsls	r2, r3, #4
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	441a      	add	r2, r3
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5be:	1ad2      	subs	r2, r2, r3
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d901      	bls.n	800e5ca <f_mkfs+0x336>
 800e5c6:	230e      	movs	r3, #14
 800e5c8:	e28a      	b.n	800eae0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5ce:	1ad2      	subs	r2, r2, r3
 800e5d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5d4:	fb01 f303 	mul.w	r3, r1, r3
 800e5d8:	1ad2      	subs	r2, r2, r3
 800e5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5dc:	1ad2      	subs	r2, r2, r3
 800e5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5e4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e5e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5ea:	2b03      	cmp	r3, #3
 800e5ec:	d10f      	bne.n	800e60e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e5ee:	6a3b      	ldr	r3, [r7, #32]
 800e5f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d80a      	bhi.n	800e60e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d105      	bne.n	800e60a <f_mkfs+0x376>
 800e5fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	607b      	str	r3, [r7, #4]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d144      	bne.n	800e694 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e60a:	230e      	movs	r3, #14
 800e60c:	e268      	b.n	800eae0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e60e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e612:	2b02      	cmp	r3, #2
 800e614:	d133      	bne.n	800e67e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d91e      	bls.n	800e65e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d107      	bne.n	800e636 <f_mkfs+0x3a2>
 800e626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e628:	005b      	lsls	r3, r3, #1
 800e62a:	2b40      	cmp	r3, #64	; 0x40
 800e62c:	d803      	bhi.n	800e636 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e630:	005b      	lsls	r3, r3, #1
 800e632:	607b      	str	r3, [r7, #4]
 800e634:	e033      	b.n	800e69e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e636:	7afb      	ldrb	r3, [r7, #11]
 800e638:	f003 0302 	and.w	r3, r3, #2
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d003      	beq.n	800e648 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e640:	2303      	movs	r3, #3
 800e642:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e646:	e02a      	b.n	800e69e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d105      	bne.n	800e65a <f_mkfs+0x3c6>
 800e64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e650:	005b      	lsls	r3, r3, #1
 800e652:	607b      	str	r3, [r7, #4]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b80      	cmp	r3, #128	; 0x80
 800e658:	d91e      	bls.n	800e698 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e65a:	230e      	movs	r3, #14
 800e65c:	e240      	b.n	800eae0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e664:	4293      	cmp	r3, r2
 800e666:	d80a      	bhi.n	800e67e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d105      	bne.n	800e67a <f_mkfs+0x3e6>
 800e66e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	607b      	str	r3, [r7, #4]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b80      	cmp	r3, #128	; 0x80
 800e678:	d910      	bls.n	800e69c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e67a:	230e      	movs	r3, #14
 800e67c:	e230      	b.n	800eae0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e67e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e682:	2b01      	cmp	r3, #1
 800e684:	d10c      	bne.n	800e6a0 <f_mkfs+0x40c>
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d907      	bls.n	800e6a0 <f_mkfs+0x40c>
 800e690:	230e      	movs	r3, #14
 800e692:	e225      	b.n	800eae0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e694:	bf00      	nop
 800e696:	e6ce      	b.n	800e436 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e698:	bf00      	nop
 800e69a:	e6cc      	b.n	800e436 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e69c:	bf00      	nop
			pau = au;
 800e69e:	e6ca      	b.n	800e436 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e6a0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e6a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6aa:	f7fd fc96 	bl	800bfda <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e6ae:	220b      	movs	r2, #11
 800e6b0:	49b2      	ldr	r1, [pc, #712]	; (800e97c <f_mkfs+0x6e8>)
 800e6b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6b4:	f7fd fc70 	bl	800bf98 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ba:	330b      	adds	r3, #11
 800e6bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e6be:	4611      	mov	r1, r2
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fd fc22 	bl	800bf0a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	330d      	adds	r3, #13
 800e6ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6cc:	b2d2      	uxtb	r2, r2
 800e6ce:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d2:	330e      	adds	r3, #14
 800e6d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6d6:	b292      	uxth	r2, r2
 800e6d8:	4611      	mov	r1, r2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fd fc15 	bl	800bf0a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e2:	3310      	adds	r3, #16
 800e6e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e6:	b2d2      	uxtb	r2, r2
 800e6e8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	f103 0211 	add.w	r2, r3, #17
 800e6f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e6f4:	2b03      	cmp	r3, #3
 800e6f6:	d002      	beq.n	800e6fe <f_mkfs+0x46a>
 800e6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	e000      	b.n	800e700 <f_mkfs+0x46c>
 800e6fe:	2300      	movs	r3, #0
 800e700:	4619      	mov	r1, r3
 800e702:	4610      	mov	r0, r2
 800e704:	f7fd fc01 	bl	800bf0a <st_word>
		if (sz_vol < 0x10000) {
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e70e:	d208      	bcs.n	800e722 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	3313      	adds	r3, #19
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	b292      	uxth	r2, r2
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fd fbf5 	bl	800bf0a <st_word>
 800e720:	e006      	b.n	800e730 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e724:	3320      	adds	r3, #32
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	4611      	mov	r1, r2
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fd fc08 	bl	800bf40 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e732:	3315      	adds	r3, #21
 800e734:	22f8      	movs	r2, #248	; 0xf8
 800e736:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	3318      	adds	r3, #24
 800e73c:	213f      	movs	r1, #63	; 0x3f
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fd fbe3 	bl	800bf0a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e746:	331a      	adds	r3, #26
 800e748:	21ff      	movs	r1, #255	; 0xff
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fd fbdd 	bl	800bf0a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e752:	331c      	adds	r3, #28
 800e754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e756:	4618      	mov	r0, r3
 800e758:	f7fd fbf2 	bl	800bf40 <st_dword>
		if (fmt == FS_FAT32) {
 800e75c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e760:	2b03      	cmp	r3, #3
 800e762:	d131      	bne.n	800e7c8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e766:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800e76a:	f7fb fca7 	bl	800a0bc <get_fattime>
 800e76e:	4603      	mov	r3, r0
 800e770:	4619      	mov	r1, r3
 800e772:	4620      	mov	r0, r4
 800e774:	f7fd fbe4 	bl	800bf40 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77a:	3324      	adds	r3, #36	; 0x24
 800e77c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fd fbde 	bl	800bf40 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e786:	332c      	adds	r3, #44	; 0x2c
 800e788:	2102      	movs	r1, #2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fd fbd8 	bl	800bf40 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e792:	3330      	adds	r3, #48	; 0x30
 800e794:	2101      	movs	r1, #1
 800e796:	4618      	mov	r0, r3
 800e798:	f7fd fbb7 	bl	800bf0a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79e:	3332      	adds	r3, #50	; 0x32
 800e7a0:	2106      	movs	r1, #6
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fd fbb1 	bl	800bf0a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7aa:	3340      	adds	r3, #64	; 0x40
 800e7ac:	2280      	movs	r2, #128	; 0x80
 800e7ae:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b2:	3342      	adds	r3, #66	; 0x42
 800e7b4:	2229      	movs	r2, #41	; 0x29
 800e7b6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	3347      	adds	r3, #71	; 0x47
 800e7bc:	2213      	movs	r2, #19
 800e7be:	4970      	ldr	r1, [pc, #448]	; (800e980 <f_mkfs+0x6ec>)
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fd fbe9 	bl	800bf98 <mem_cpy>
 800e7c6:	e020      	b.n	800e80a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800e7ce:	f7fb fc75 	bl	800a0bc <get_fattime>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f7fd fbb2 	bl	800bf40 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7de:	3316      	adds	r3, #22
 800e7e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7e2:	b292      	uxth	r2, r2
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fd fb8f 	bl	800bf0a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ee:	3324      	adds	r3, #36	; 0x24
 800e7f0:	2280      	movs	r2, #128	; 0x80
 800e7f2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f6:	3326      	adds	r3, #38	; 0x26
 800e7f8:	2229      	movs	r2, #41	; 0x29
 800e7fa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fe:	332b      	adds	r3, #43	; 0x2b
 800e800:	2213      	movs	r2, #19
 800e802:	4960      	ldr	r1, [pc, #384]	; (800e984 <f_mkfs+0x6f0>)
 800e804:	4618      	mov	r0, r3
 800e806:	f7fd fbc7 	bl	800bf98 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e810:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e814:	4618      	mov	r0, r3
 800e816:	f7fd fb78 	bl	800bf0a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e81a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e81e:	2301      	movs	r3, #1
 800e820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e824:	f7fd faf8 	bl	800be18 <disk_write>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <f_mkfs+0x59e>
 800e82e:	2301      	movs	r3, #1
 800e830:	e156      	b.n	800eae0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e832:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e836:	2b03      	cmp	r3, #3
 800e838:	d140      	bne.n	800e8bc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	1d9a      	adds	r2, r3, #6
 800e83e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e842:	2301      	movs	r3, #1
 800e844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e846:	f7fd fae7 	bl	800be18 <disk_write>
			mem_set(buf, 0, ss);
 800e84a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e84c:	461a      	mov	r2, r3
 800e84e:	2100      	movs	r1, #0
 800e850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e852:	f7fd fbc2 	bl	800bfda <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e856:	494c      	ldr	r1, [pc, #304]	; (800e988 <f_mkfs+0x6f4>)
 800e858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e85a:	f7fd fb71 	bl	800bf40 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e864:	4949      	ldr	r1, [pc, #292]	; (800e98c <f_mkfs+0x6f8>)
 800e866:	4618      	mov	r0, r3
 800e868:	f7fd fb6a 	bl	800bf40 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e872:	6a3b      	ldr	r3, [r7, #32]
 800e874:	3b01      	subs	r3, #1
 800e876:	4619      	mov	r1, r3
 800e878:	4610      	mov	r0, r2
 800e87a:	f7fd fb61 	bl	800bf40 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e884:	2102      	movs	r1, #2
 800e886:	4618      	mov	r0, r3
 800e888:	f7fd fb5a 	bl	800bf40 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e892:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e896:	4618      	mov	r0, r3
 800e898:	f7fd fb37 	bl	800bf0a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89e:	1dda      	adds	r2, r3, #7
 800e8a0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8a8:	f7fd fab6 	bl	800be18 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	1c5a      	adds	r2, r3, #1
 800e8b0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8b8:	f7fd faae 	bl	800be18 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8be:	2100      	movs	r1, #0
 800e8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8c2:	f7fd fb8a 	bl	800bfda <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e8c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8c8:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8ce:	e04b      	b.n	800e968 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800e8d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e8d4:	2b03      	cmp	r3, #3
 800e8d6:	d113      	bne.n	800e900 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e8d8:	f06f 0107 	mvn.w	r1, #7
 800e8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8de:	f7fd fb2f 	bl	800bf40 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fd fb28 	bl	800bf40 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fd fb21 	bl	800bf40 <st_dword>
 800e8fe:	e00b      	b.n	800e918 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e900:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e904:	2b01      	cmp	r3, #1
 800e906:	d101      	bne.n	800e90c <f_mkfs+0x678>
 800e908:	4b21      	ldr	r3, [pc, #132]	; (800e990 <f_mkfs+0x6fc>)
 800e90a:	e001      	b.n	800e910 <f_mkfs+0x67c>
 800e90c:	f06f 0307 	mvn.w	r3, #7
 800e910:	4619      	mov	r1, r3
 800e912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e914:	f7fd fb14 	bl	800bf40 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e91a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e91c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	4293      	cmp	r3, r2
 800e922:	bf28      	it	cs
 800e924:	4613      	movcs	r3, r2
 800e926:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e928:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e92c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e92e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e932:	f7fd fa71 	bl	800be18 <disk_write>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <f_mkfs+0x6ac>
 800e93c:	2301      	movs	r3, #1
 800e93e:	e0cf      	b.n	800eae0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800e940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e942:	461a      	mov	r2, r3
 800e944:	2100      	movs	r1, #0
 800e946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e948:	f7fd fb47 	bl	800bfda <mem_set>
				sect += n; nsect -= n;
 800e94c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e94e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e950:	4413      	add	r3, r2
 800e952:	667b      	str	r3, [r7, #100]	; 0x64
 800e954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800e95c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1dc      	bne.n	800e91c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e964:	3301      	adds	r3, #1
 800e966:	64bb      	str	r3, [r7, #72]	; 0x48
 800e968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d3af      	bcc.n	800e8d0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e970:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e974:	2b03      	cmp	r3, #3
 800e976:	d10d      	bne.n	800e994 <f_mkfs+0x700>
 800e978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e97a:	e00c      	b.n	800e996 <f_mkfs+0x702>
 800e97c:	0800f8e0 	.word	0x0800f8e0
 800e980:	0800f8ec 	.word	0x0800f8ec
 800e984:	0800f900 	.word	0x0800f900
 800e988:	41615252 	.word	0x41615252
 800e98c:	61417272 	.word	0x61417272
 800e990:	00fffff8 	.word	0x00fffff8
 800e994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e996:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99c:	4293      	cmp	r3, r2
 800e99e:	bf28      	it	cs
 800e9a0:	4613      	movcs	r3, r2
 800e9a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e9a4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e9a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9ae:	f7fd fa33 	bl	800be18 <disk_write>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d001      	beq.n	800e9bc <f_mkfs+0x728>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e091      	b.n	800eae0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800e9bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9c0:	4413      	add	r3, r2
 800e9c2:	667b      	str	r3, [r7, #100]	; 0x64
 800e9c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800e9cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1e2      	bne.n	800e998 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800e9d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e9d6:	2b03      	cmp	r3, #3
 800e9d8:	d103      	bne.n	800e9e2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800e9da:	230c      	movs	r3, #12
 800e9dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e9e0:	e010      	b.n	800ea04 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9e8:	d303      	bcc.n	800e9f2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e9ea:	2306      	movs	r3, #6
 800e9ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e9f0:	e008      	b.n	800ea04 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e9f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d101      	bne.n	800e9fe <f_mkfs+0x76a>
 800e9fa:	2304      	movs	r3, #4
 800e9fc:	e000      	b.n	800ea00 <f_mkfs+0x76c>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ea04:	7afb      	ldrb	r3, [r7, #11]
 800ea06:	f003 0308 	and.w	r3, r3, #8
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d15b      	bne.n	800eac6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ea0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea10:	461a      	mov	r2, r3
 800ea12:	2100      	movs	r1, #0
 800ea14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea16:	f7fd fae0 	bl	800bfda <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea20:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fd fa70 	bl	800bf0a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ea2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ea30:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	2200      	movs	r2, #0
 800ea36:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	3302      	adds	r3, #2
 800ea44:	2201      	movs	r2, #1
 800ea46:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	3303      	adds	r3, #3
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	3304      	adds	r3, #4
 800ea54:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ea58:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ea5a:	693a      	ldr	r2, [r7, #16]
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5e:	441a      	add	r2, r3
 800ea60:	4b21      	ldr	r3, [pc, #132]	; (800eae8 <f_mkfs+0x854>)
 800ea62:	fba3 1302 	umull	r1, r3, r3, r2
 800ea66:	1ad2      	subs	r2, r2, r3
 800ea68:	0852      	lsrs	r2, r2, #1
 800ea6a:	4413      	add	r3, r2
 800ea6c:	0b5b      	lsrs	r3, r3, #13
 800ea6e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	3305      	adds	r3, #5
 800ea74:	22fe      	movs	r2, #254	; 0xfe
 800ea76:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ea78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea7a:	089b      	lsrs	r3, r3, #2
 800ea7c:	b2da      	uxtb	r2, r3
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	3306      	adds	r3, #6
 800ea82:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	3307      	adds	r3, #7
 800ea8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea90:	b2d2      	uxtb	r2, r2
 800ea92:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	3308      	adds	r3, #8
 800ea98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fd fa50 	bl	800bf40 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	330c      	adds	r3, #12
 800eaa4:	693a      	ldr	r2, [r7, #16]
 800eaa6:	4611      	mov	r1, r2
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fd fa49 	bl	800bf40 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800eaae:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800eab2:	2301      	movs	r3, #1
 800eab4:	2200      	movs	r2, #0
 800eab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eab8:	f7fd f9ae 	bl	800be18 <disk_write>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <f_mkfs+0x832>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e00c      	b.n	800eae0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800eac6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eaca:	2200      	movs	r2, #0
 800eacc:	2100      	movs	r1, #0
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fd f9c2 	bl	800be58 <disk_ioctl>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <f_mkfs+0x84a>
 800eada:	2301      	movs	r3, #1
 800eadc:	e000      	b.n	800eae0 <f_mkfs+0x84c>

	return FR_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3774      	adds	r7, #116	; 0x74
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd90      	pop	{r4, r7, pc}
 800eae8:	0515565b 	.word	0x0515565b

0800eaec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b087      	sub	sp, #28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eafa:	2301      	movs	r3, #1
 800eafc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb02:	4b1f      	ldr	r3, [pc, #124]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb04:	7a5b      	ldrb	r3, [r3, #9]
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d131      	bne.n	800eb70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eb0c:	4b1c      	ldr	r3, [pc, #112]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb0e:	7a5b      	ldrb	r3, [r3, #9]
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	461a      	mov	r2, r3
 800eb14:	4b1a      	ldr	r3, [pc, #104]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb16:	2100      	movs	r1, #0
 800eb18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eb1a:	4b19      	ldr	r3, [pc, #100]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb1c:	7a5b      	ldrb	r3, [r3, #9]
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	4a17      	ldr	r2, [pc, #92]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	4413      	add	r3, r2
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eb2a:	4b15      	ldr	r3, [pc, #84]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb2c:	7a5b      	ldrb	r3, [r3, #9]
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	461a      	mov	r2, r3
 800eb32:	4b13      	ldr	r3, [pc, #76]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb34:	4413      	add	r3, r2
 800eb36:	79fa      	ldrb	r2, [r7, #7]
 800eb38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eb3a:	4b11      	ldr	r3, [pc, #68]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb3c:	7a5b      	ldrb	r3, [r3, #9]
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	1c5a      	adds	r2, r3, #1
 800eb42:	b2d1      	uxtb	r1, r2
 800eb44:	4a0e      	ldr	r2, [pc, #56]	; (800eb80 <FATFS_LinkDriverEx+0x94>)
 800eb46:	7251      	strb	r1, [r2, #9]
 800eb48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eb4a:	7dbb      	ldrb	r3, [r7, #22]
 800eb4c:	3330      	adds	r3, #48	; 0x30
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	3301      	adds	r3, #1
 800eb58:	223a      	movs	r2, #58	; 0x3a
 800eb5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	3302      	adds	r3, #2
 800eb60:	222f      	movs	r2, #47	; 0x2f
 800eb62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	3303      	adds	r3, #3
 800eb68:	2200      	movs	r2, #0
 800eb6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	371c      	adds	r7, #28
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	200008f0 	.word	0x200008f0

0800eb84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eb8e:	2200      	movs	r2, #0
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff ffaa 	bl	800eaec <FATFS_LinkDriverEx>
 800eb98:	4603      	mov	r3, r0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	4912      	ldr	r1, [pc, #72]	; (800ebf4 <MX_USB_DEVICE_Init+0x50>)
 800ebac:	4812      	ldr	r0, [pc, #72]	; (800ebf8 <MX_USB_DEVICE_Init+0x54>)
 800ebae:	f7fb ff3f 	bl	800aa30 <USBD_Init>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ebb8:	f7f2 f830 	bl	8000c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ebbc:	490f      	ldr	r1, [pc, #60]	; (800ebfc <MX_USB_DEVICE_Init+0x58>)
 800ebbe:	480e      	ldr	r0, [pc, #56]	; (800ebf8 <MX_USB_DEVICE_Init+0x54>)
 800ebc0:	f7fb ff66 	bl	800aa90 <USBD_RegisterClass>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ebca:	f7f2 f827 	bl	8000c1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ebce:	490c      	ldr	r1, [pc, #48]	; (800ec00 <MX_USB_DEVICE_Init+0x5c>)
 800ebd0:	4809      	ldr	r0, [pc, #36]	; (800ebf8 <MX_USB_DEVICE_Init+0x54>)
 800ebd2:	f7fb fe87 	bl	800a8e4 <USBD_CDC_RegisterInterface>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d001      	beq.n	800ebe0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ebdc:	f7f2 f81e 	bl	8000c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ebe0:	4805      	ldr	r0, [pc, #20]	; (800ebf8 <MX_USB_DEVICE_Init+0x54>)
 800ebe2:	f7fb ff7c 	bl	800aade <USBD_Start>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ebec:	f7f2 f816 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ebf0:	bf00      	nop
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	20000130 	.word	0x20000130
 800ebf8:	200008fc 	.word	0x200008fc
 800ebfc:	20000018 	.word	0x20000018
 800ec00:	2000011c 	.word	0x2000011c

0800ec04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ec08:	2200      	movs	r2, #0
 800ec0a:	4905      	ldr	r1, [pc, #20]	; (800ec20 <CDC_Init_FS+0x1c>)
 800ec0c:	4805      	ldr	r0, [pc, #20]	; (800ec24 <CDC_Init_FS+0x20>)
 800ec0e:	f7fb fe7e 	bl	800a90e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ec12:	4905      	ldr	r1, [pc, #20]	; (800ec28 <CDC_Init_FS+0x24>)
 800ec14:	4803      	ldr	r0, [pc, #12]	; (800ec24 <CDC_Init_FS+0x20>)
 800ec16:	f7fb fe98 	bl	800a94a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ec1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	200013cc 	.word	0x200013cc
 800ec24:	200008fc 	.word	0x200008fc
 800ec28:	20000bcc 	.word	0x20000bcc

0800ec2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ec30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4603      	mov	r3, r0
 800ec44:	6039      	str	r1, [r7, #0]
 800ec46:	71fb      	strb	r3, [r7, #7]
 800ec48:	4613      	mov	r3, r2
 800ec4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ec4c:	79fb      	ldrb	r3, [r7, #7]
 800ec4e:	2b23      	cmp	r3, #35	; 0x23
 800ec50:	d84a      	bhi.n	800ece8 <CDC_Control_FS+0xac>
 800ec52:	a201      	add	r2, pc, #4	; (adr r2, 800ec58 <CDC_Control_FS+0x1c>)
 800ec54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec58:	0800ece9 	.word	0x0800ece9
 800ec5c:	0800ece9 	.word	0x0800ece9
 800ec60:	0800ece9 	.word	0x0800ece9
 800ec64:	0800ece9 	.word	0x0800ece9
 800ec68:	0800ece9 	.word	0x0800ece9
 800ec6c:	0800ece9 	.word	0x0800ece9
 800ec70:	0800ece9 	.word	0x0800ece9
 800ec74:	0800ece9 	.word	0x0800ece9
 800ec78:	0800ece9 	.word	0x0800ece9
 800ec7c:	0800ece9 	.word	0x0800ece9
 800ec80:	0800ece9 	.word	0x0800ece9
 800ec84:	0800ece9 	.word	0x0800ece9
 800ec88:	0800ece9 	.word	0x0800ece9
 800ec8c:	0800ece9 	.word	0x0800ece9
 800ec90:	0800ece9 	.word	0x0800ece9
 800ec94:	0800ece9 	.word	0x0800ece9
 800ec98:	0800ece9 	.word	0x0800ece9
 800ec9c:	0800ece9 	.word	0x0800ece9
 800eca0:	0800ece9 	.word	0x0800ece9
 800eca4:	0800ece9 	.word	0x0800ece9
 800eca8:	0800ece9 	.word	0x0800ece9
 800ecac:	0800ece9 	.word	0x0800ece9
 800ecb0:	0800ece9 	.word	0x0800ece9
 800ecb4:	0800ece9 	.word	0x0800ece9
 800ecb8:	0800ece9 	.word	0x0800ece9
 800ecbc:	0800ece9 	.word	0x0800ece9
 800ecc0:	0800ece9 	.word	0x0800ece9
 800ecc4:	0800ece9 	.word	0x0800ece9
 800ecc8:	0800ece9 	.word	0x0800ece9
 800eccc:	0800ece9 	.word	0x0800ece9
 800ecd0:	0800ece9 	.word	0x0800ece9
 800ecd4:	0800ece9 	.word	0x0800ece9
 800ecd8:	0800ece9 	.word	0x0800ece9
 800ecdc:	0800ece9 	.word	0x0800ece9
 800ece0:	0800ece9 	.word	0x0800ece9
 800ece4:	0800ece9 	.word	0x0800ece9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ece8:	bf00      	nop
  }

  return (USBD_OK);
 800ecea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	4805      	ldr	r0, [pc, #20]	; (800ed1c <CDC_Receive_FS+0x24>)
 800ed06:	f7fb fe20 	bl	800a94a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ed0a:	4804      	ldr	r0, [pc, #16]	; (800ed1c <CDC_Receive_FS+0x24>)
 800ed0c:	f7fb fe66 	bl	800a9dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ed10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	200008fc 	.word	0x200008fc

0800ed20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ed30:	4b0d      	ldr	r3, [pc, #52]	; (800ed68 <CDC_Transmit_FS+0x48>)
 800ed32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e00b      	b.n	800ed5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ed46:	887b      	ldrh	r3, [r7, #2]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	6879      	ldr	r1, [r7, #4]
 800ed4c:	4806      	ldr	r0, [pc, #24]	; (800ed68 <CDC_Transmit_FS+0x48>)
 800ed4e:	f7fb fdde 	bl	800a90e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ed52:	4805      	ldr	r0, [pc, #20]	; (800ed68 <CDC_Transmit_FS+0x48>)
 800ed54:	f7fb fe12 	bl	800a97c <USBD_CDC_TransmitPacket>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ed5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	200008fc 	.word	0x200008fc

0800ed6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	4613      	mov	r3, r2
 800ed78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ed7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	371c      	adds	r7, #28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr
	...

0800ed90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	4603      	mov	r3, r0
 800ed98:	6039      	str	r1, [r7, #0]
 800ed9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	2212      	movs	r2, #18
 800eda0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eda2:	4b03      	ldr	r3, [pc, #12]	; (800edb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr
 800edb0:	20000150 	.word	0x20000150

0800edb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	4603      	mov	r3, r0
 800edbc:	6039      	str	r1, [r7, #0]
 800edbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	2204      	movs	r2, #4
 800edc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800edc6:	4b03      	ldr	r3, [pc, #12]	; (800edd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800edc8:	4618      	mov	r0, r3
 800edca:	370c      	adds	r7, #12
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr
 800edd4:	20000170 	.word	0x20000170

0800edd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	4603      	mov	r3, r0
 800ede0:	6039      	str	r1, [r7, #0]
 800ede2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ede4:	79fb      	ldrb	r3, [r7, #7]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d105      	bne.n	800edf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800edea:	683a      	ldr	r2, [r7, #0]
 800edec:	4907      	ldr	r1, [pc, #28]	; (800ee0c <USBD_FS_ProductStrDescriptor+0x34>)
 800edee:	4808      	ldr	r0, [pc, #32]	; (800ee10 <USBD_FS_ProductStrDescriptor+0x38>)
 800edf0:	f7fc fed1 	bl	800bb96 <USBD_GetString>
 800edf4:	e004      	b.n	800ee00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800edf6:	683a      	ldr	r2, [r7, #0]
 800edf8:	4904      	ldr	r1, [pc, #16]	; (800ee0c <USBD_FS_ProductStrDescriptor+0x34>)
 800edfa:	4805      	ldr	r0, [pc, #20]	; (800ee10 <USBD_FS_ProductStrDescriptor+0x38>)
 800edfc:	f7fc fecb 	bl	800bb96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee00:	4b02      	ldr	r3, [pc, #8]	; (800ee0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3708      	adds	r7, #8
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	20001bcc 	.word	0x20001bcc
 800ee10:	0800f914 	.word	0x0800f914

0800ee14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	6039      	str	r1, [r7, #0]
 800ee1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	4904      	ldr	r1, [pc, #16]	; (800ee34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ee24:	4804      	ldr	r0, [pc, #16]	; (800ee38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ee26:	f7fc feb6 	bl	800bb96 <USBD_GetString>
  return USBD_StrDesc;
 800ee2a:	4b02      	ldr	r3, [pc, #8]	; (800ee34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	20001bcc 	.word	0x20001bcc
 800ee38:	0800f92c 	.word	0x0800f92c

0800ee3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	4603      	mov	r3, r0
 800ee44:	6039      	str	r1, [r7, #0]
 800ee46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	221a      	movs	r2, #26
 800ee4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ee4e:	f000 f855 	bl	800eefc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ee52:	4b02      	ldr	r3, [pc, #8]	; (800ee5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20000174 	.word	0x20000174

0800ee60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4603      	mov	r3, r0
 800ee68:	6039      	str	r1, [r7, #0]
 800ee6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ee6c:	79fb      	ldrb	r3, [r7, #7]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d105      	bne.n	800ee7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ee72:	683a      	ldr	r2, [r7, #0]
 800ee74:	4907      	ldr	r1, [pc, #28]	; (800ee94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ee76:	4808      	ldr	r0, [pc, #32]	; (800ee98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ee78:	f7fc fe8d 	bl	800bb96 <USBD_GetString>
 800ee7c:	e004      	b.n	800ee88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	4904      	ldr	r1, [pc, #16]	; (800ee94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ee82:	4805      	ldr	r0, [pc, #20]	; (800ee98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ee84:	f7fc fe87 	bl	800bb96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee88:	4b02      	ldr	r3, [pc, #8]	; (800ee94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3708      	adds	r7, #8
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20001bcc 	.word	0x20001bcc
 800ee98:	0800f940 	.word	0x0800f940

0800ee9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	4603      	mov	r3, r0
 800eea4:	6039      	str	r1, [r7, #0]
 800eea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eea8:	79fb      	ldrb	r3, [r7, #7]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d105      	bne.n	800eeba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	4907      	ldr	r1, [pc, #28]	; (800eed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eeb2:	4808      	ldr	r0, [pc, #32]	; (800eed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eeb4:	f7fc fe6f 	bl	800bb96 <USBD_GetString>
 800eeb8:	e004      	b.n	800eec4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	4904      	ldr	r1, [pc, #16]	; (800eed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eebe:	4805      	ldr	r0, [pc, #20]	; (800eed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eec0:	f7fc fe69 	bl	800bb96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eec4:	4b02      	ldr	r3, [pc, #8]	; (800eed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3708      	adds	r7, #8
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	20001bcc 	.word	0x20001bcc
 800eed4:	0800f94c 	.word	0x0800f94c

0800eed8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	6039      	str	r1, [r7, #0]
 800eee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	220c      	movs	r2, #12
 800eee8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800eeea:	4b03      	ldr	r3, [pc, #12]	; (800eef8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr
 800eef8:	20000164 	.word	0x20000164

0800eefc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef02:	4b0f      	ldr	r3, [pc, #60]	; (800ef40 <Get_SerialNum+0x44>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ef08:	4b0e      	ldr	r3, [pc, #56]	; (800ef44 <Get_SerialNum+0x48>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ef0e:	4b0e      	ldr	r3, [pc, #56]	; (800ef48 <Get_SerialNum+0x4c>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ef14:	68fa      	ldr	r2, [r7, #12]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4413      	add	r3, r2
 800ef1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d009      	beq.n	800ef36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ef22:	2208      	movs	r2, #8
 800ef24:	4909      	ldr	r1, [pc, #36]	; (800ef4c <Get_SerialNum+0x50>)
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f000 f814 	bl	800ef54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ef2c:	2204      	movs	r2, #4
 800ef2e:	4908      	ldr	r1, [pc, #32]	; (800ef50 <Get_SerialNum+0x54>)
 800ef30:	68b8      	ldr	r0, [r7, #8]
 800ef32:	f000 f80f 	bl	800ef54 <IntToUnicode>
  }
}
 800ef36:	bf00      	nop
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	1fff7590 	.word	0x1fff7590
 800ef44:	1fff7594 	.word	0x1fff7594
 800ef48:	1fff7598 	.word	0x1fff7598
 800ef4c:	20000176 	.word	0x20000176
 800ef50:	20000186 	.word	0x20000186

0800ef54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b087      	sub	sp, #28
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	4613      	mov	r3, r2
 800ef60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ef66:	2300      	movs	r3, #0
 800ef68:	75fb      	strb	r3, [r7, #23]
 800ef6a:	e027      	b.n	800efbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	0f1b      	lsrs	r3, r3, #28
 800ef70:	2b09      	cmp	r3, #9
 800ef72:	d80b      	bhi.n	800ef8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	0f1b      	lsrs	r3, r3, #28
 800ef78:	b2da      	uxtb	r2, r3
 800ef7a:	7dfb      	ldrb	r3, [r7, #23]
 800ef7c:	005b      	lsls	r3, r3, #1
 800ef7e:	4619      	mov	r1, r3
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	440b      	add	r3, r1
 800ef84:	3230      	adds	r2, #48	; 0x30
 800ef86:	b2d2      	uxtb	r2, r2
 800ef88:	701a      	strb	r2, [r3, #0]
 800ef8a:	e00a      	b.n	800efa2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	0f1b      	lsrs	r3, r3, #28
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	7dfb      	ldrb	r3, [r7, #23]
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	4619      	mov	r1, r3
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	440b      	add	r3, r1
 800ef9c:	3237      	adds	r2, #55	; 0x37
 800ef9e:	b2d2      	uxtb	r2, r2
 800efa0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	011b      	lsls	r3, r3, #4
 800efa6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800efa8:	7dfb      	ldrb	r3, [r7, #23]
 800efaa:	005b      	lsls	r3, r3, #1
 800efac:	3301      	adds	r3, #1
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	4413      	add	r3, r2
 800efb2:	2200      	movs	r2, #0
 800efb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800efb6:	7dfb      	ldrb	r3, [r7, #23]
 800efb8:	3301      	adds	r3, #1
 800efba:	75fb      	strb	r3, [r7, #23]
 800efbc:	7dfa      	ldrb	r2, [r7, #23]
 800efbe:	79fb      	ldrb	r3, [r7, #7]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d3d3      	bcc.n	800ef6c <IntToUnicode+0x18>
  }
}
 800efc4:	bf00      	nop
 800efc6:	bf00      	nop
 800efc8:	371c      	adds	r7, #28
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
	...

0800efd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b0b0      	sub	sp, #192	; 0xc0
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efdc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800efe0:	2200      	movs	r2, #0
 800efe2:	601a      	str	r2, [r3, #0]
 800efe4:	605a      	str	r2, [r3, #4]
 800efe6:	609a      	str	r2, [r3, #8]
 800efe8:	60da      	str	r2, [r3, #12]
 800efea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800efec:	f107 0318 	add.w	r3, r7, #24
 800eff0:	2294      	movs	r2, #148	; 0x94
 800eff2:	2100      	movs	r1, #0
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fc43 	bl	800f880 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f002:	d163      	bne.n	800f0cc <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f008:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f00a:	2300      	movs	r3, #0
 800f00c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f010:	f107 0318 	add.w	r3, r7, #24
 800f014:	4618      	mov	r0, r3
 800f016:	f7f4 feeb 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d001      	beq.n	800f024 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f020:	f7f1 fdfc 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f024:	4b2b      	ldr	r3, [pc, #172]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f028:	4a2a      	ldr	r2, [pc, #168]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f02a:	f043 0301 	orr.w	r3, r3, #1
 800f02e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f030:	4b28      	ldr	r3, [pc, #160]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f034:	f003 0301 	and.w	r3, r3, #1
 800f038:	617b      	str	r3, [r7, #20]
 800f03a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f03c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f044:	2302      	movs	r3, #2
 800f046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f050:	2303      	movs	r3, #3
 800f052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f056:	230a      	movs	r3, #10
 800f058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f05c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f060:	4619      	mov	r1, r3
 800f062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f066:	f7f2 fa29 	bl	80014bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f06a:	4b1a      	ldr	r3, [pc, #104]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f06e:	4a19      	ldr	r2, [pc, #100]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f074:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f076:	4b17      	ldr	r3, [pc, #92]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f07a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f07e:	613b      	str	r3, [r7, #16]
 800f080:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f082:	4b14      	ldr	r3, [pc, #80]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d114      	bne.n	800f0b8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f08e:	4b11      	ldr	r3, [pc, #68]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f092:	4a10      	ldr	r2, [pc, #64]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f098:	6593      	str	r3, [r2, #88]	; 0x58
 800f09a:	4b0e      	ldr	r3, [pc, #56]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f09e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0a2:	60fb      	str	r3, [r7, #12]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f0a6:	f7f3 ff8f 	bl	8002fc8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f0aa:	4b0a      	ldr	r3, [pc, #40]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0ae:	4a09      	ldr	r2, [pc, #36]	; (800f0d4 <HAL_PCD_MspInit+0x100>)
 800f0b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f0b4:	6593      	str	r3, [r2, #88]	; 0x58
 800f0b6:	e001      	b.n	800f0bc <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f0b8:	f7f3 ff86 	bl	8002fc8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f0bc:	2200      	movs	r2, #0
 800f0be:	2100      	movs	r1, #0
 800f0c0:	2043      	movs	r0, #67	; 0x43
 800f0c2:	f7f2 f9c4 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f0c6:	2043      	movs	r0, #67	; 0x43
 800f0c8:	f7f2 f9dd 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f0cc:	bf00      	nop
 800f0ce:	37c0      	adds	r7, #192	; 0xc0
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	40021000 	.word	0x40021000

0800f0d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	f7fb fd40 	bl	800ab74 <USBD_LL_SetupStage>
}
 800f0f4:	bf00      	nop
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f10e:	78fa      	ldrb	r2, [r7, #3]
 800f110:	6879      	ldr	r1, [r7, #4]
 800f112:	4613      	mov	r3, r2
 800f114:	00db      	lsls	r3, r3, #3
 800f116:	4413      	add	r3, r2
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	440b      	add	r3, r1
 800f11c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	78fb      	ldrb	r3, [r7, #3]
 800f124:	4619      	mov	r1, r3
 800f126:	f7fb fd7a 	bl	800ac1e <USBD_LL_DataOutStage>
}
 800f12a:	bf00      	nop
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b082      	sub	sp, #8
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
 800f13a:	460b      	mov	r3, r1
 800f13c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f144:	78fa      	ldrb	r2, [r7, #3]
 800f146:	6879      	ldr	r1, [r7, #4]
 800f148:	4613      	mov	r3, r2
 800f14a:	00db      	lsls	r3, r3, #3
 800f14c:	4413      	add	r3, r2
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	440b      	add	r3, r1
 800f152:	334c      	adds	r3, #76	; 0x4c
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	78fb      	ldrb	r3, [r7, #3]
 800f158:	4619      	mov	r1, r3
 800f15a:	f7fb fdc3 	bl	800ace4 <USBD_LL_DataInStage>
}
 800f15e:	bf00      	nop
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f174:	4618      	mov	r0, r3
 800f176:	f7fb fed7 	bl	800af28 <USBD_LL_SOF>
}
 800f17a:	bf00      	nop
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b084      	sub	sp, #16
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f18a:	2301      	movs	r3, #1
 800f18c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	2b02      	cmp	r3, #2
 800f194:	d001      	beq.n	800f19a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f196:	f7f1 fd41 	bl	8000c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f1a0:	7bfa      	ldrb	r2, [r7, #15]
 800f1a2:	4611      	mov	r1, r2
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7fb fe81 	bl	800aeac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fb fe2d 	bl	800ae10 <USBD_LL_Reset>
}
 800f1b6:	bf00      	nop
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
	...

0800f1c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	6812      	ldr	r2, [r2, #0]
 800f1d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f1da:	f043 0301 	orr.w	r3, r3, #1
 800f1de:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7fb fe70 	bl	800aecc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6a1b      	ldr	r3, [r3, #32]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d005      	beq.n	800f200 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1f4:	4b04      	ldr	r3, [pc, #16]	; (800f208 <HAL_PCD_SuspendCallback+0x48>)
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	4a03      	ldr	r2, [pc, #12]	; (800f208 <HAL_PCD_SuspendCallback+0x48>)
 800f1fa:	f043 0306 	orr.w	r3, r3, #6
 800f1fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f200:	bf00      	nop
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	e000ed00 	.word	0xe000ed00

0800f20c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	6812      	ldr	r2, [r2, #0]
 800f222:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f226:	f023 0301 	bic.w	r3, r3, #1
 800f22a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a1b      	ldr	r3, [r3, #32]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d007      	beq.n	800f244 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f234:	4b08      	ldr	r3, [pc, #32]	; (800f258 <HAL_PCD_ResumeCallback+0x4c>)
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	4a07      	ldr	r2, [pc, #28]	; (800f258 <HAL_PCD_ResumeCallback+0x4c>)
 800f23a:	f023 0306 	bic.w	r3, r3, #6
 800f23e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f240:	f000 faf4 	bl	800f82c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fb fe54 	bl	800aef8 <USBD_LL_Resume>
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	e000ed00 	.word	0xe000ed00

0800f25c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	460b      	mov	r3, r1
 800f266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f26e:	78fa      	ldrb	r2, [r7, #3]
 800f270:	4611      	mov	r1, r2
 800f272:	4618      	mov	r0, r3
 800f274:	f7fb fea0 	bl	800afb8 <USBD_LL_IsoOUTIncomplete>
}
 800f278:	bf00      	nop
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	460b      	mov	r3, r1
 800f28a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f292:	78fa      	ldrb	r2, [r7, #3]
 800f294:	4611      	mov	r1, r2
 800f296:	4618      	mov	r0, r3
 800f298:	f7fb fe68 	bl	800af6c <USBD_LL_IsoINIncomplete>
}
 800f29c:	bf00      	nop
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fb fea6 	bl	800b004 <USBD_LL_DevConnected>
}
 800f2b8:	bf00      	nop
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fb fea3 	bl	800b01a <USBD_LL_DevDisconnected>
}
 800f2d4:	bf00      	nop
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d139      	bne.n	800f360 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f2ec:	4a1f      	ldr	r2, [pc, #124]	; (800f36c <USBD_LL_Init+0x90>)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	4a1d      	ldr	r2, [pc, #116]	; (800f36c <USBD_LL_Init+0x90>)
 800f2f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f2fc:	4b1b      	ldr	r3, [pc, #108]	; (800f36c <USBD_LL_Init+0x90>)
 800f2fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f302:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f304:	4b19      	ldr	r3, [pc, #100]	; (800f36c <USBD_LL_Init+0x90>)
 800f306:	2206      	movs	r2, #6
 800f308:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f30a:	4b18      	ldr	r3, [pc, #96]	; (800f36c <USBD_LL_Init+0x90>)
 800f30c:	2202      	movs	r2, #2
 800f30e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f310:	4b16      	ldr	r3, [pc, #88]	; (800f36c <USBD_LL_Init+0x90>)
 800f312:	2200      	movs	r2, #0
 800f314:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f316:	4b15      	ldr	r3, [pc, #84]	; (800f36c <USBD_LL_Init+0x90>)
 800f318:	2200      	movs	r2, #0
 800f31a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f31c:	4b13      	ldr	r3, [pc, #76]	; (800f36c <USBD_LL_Init+0x90>)
 800f31e:	2200      	movs	r2, #0
 800f320:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f322:	4b12      	ldr	r3, [pc, #72]	; (800f36c <USBD_LL_Init+0x90>)
 800f324:	2200      	movs	r2, #0
 800f326:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f328:	4b10      	ldr	r3, [pc, #64]	; (800f36c <USBD_LL_Init+0x90>)
 800f32a:	2200      	movs	r2, #0
 800f32c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f32e:	4b0f      	ldr	r3, [pc, #60]	; (800f36c <USBD_LL_Init+0x90>)
 800f330:	2200      	movs	r2, #0
 800f332:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f334:	480d      	ldr	r0, [pc, #52]	; (800f36c <USBD_LL_Init+0x90>)
 800f336:	f7f2 fbc3 	bl	8001ac0 <HAL_PCD_Init>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800f340:	f7f1 fc6c 	bl	8000c1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f344:	2180      	movs	r1, #128	; 0x80
 800f346:	4809      	ldr	r0, [pc, #36]	; (800f36c <USBD_LL_Init+0x90>)
 800f348:	f7f3 fd45 	bl	8002dd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f34c:	2240      	movs	r2, #64	; 0x40
 800f34e:	2100      	movs	r1, #0
 800f350:	4806      	ldr	r0, [pc, #24]	; (800f36c <USBD_LL_Init+0x90>)
 800f352:	f7f3 fcf9 	bl	8002d48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f356:	2280      	movs	r2, #128	; 0x80
 800f358:	2101      	movs	r1, #1
 800f35a:	4804      	ldr	r0, [pc, #16]	; (800f36c <USBD_LL_Init+0x90>)
 800f35c:	f7f3 fcf4 	bl	8002d48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f360:	2300      	movs	r3, #0
}
 800f362:	4618      	mov	r0, r3
 800f364:	3708      	adds	r7, #8
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	20001dcc 	.word	0x20001dcc

0800f370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f378:	2300      	movs	r3, #0
 800f37a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f37c:	2300      	movs	r3, #0
 800f37e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f386:	4618      	mov	r0, r3
 800f388:	f7f2 fcbe 	bl	8001d08 <HAL_PCD_Start>
 800f38c:	4603      	mov	r3, r0
 800f38e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f390:	7bbb      	ldrb	r3, [r7, #14]
 800f392:	2b03      	cmp	r3, #3
 800f394:	d816      	bhi.n	800f3c4 <USBD_LL_Start+0x54>
 800f396:	a201      	add	r2, pc, #4	; (adr r2, 800f39c <USBD_LL_Start+0x2c>)
 800f398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39c:	0800f3ad 	.word	0x0800f3ad
 800f3a0:	0800f3b3 	.word	0x0800f3b3
 800f3a4:	0800f3b9 	.word	0x0800f3b9
 800f3a8:	0800f3bf 	.word	0x0800f3bf
    case HAL_OK :
      usb_status = USBD_OK;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f3b0:	e00b      	b.n	800f3ca <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f3b2:	2303      	movs	r3, #3
 800f3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f3b6:	e008      	b.n	800f3ca <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f3bc:	e005      	b.n	800f3ca <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3be:	2303      	movs	r3, #3
 800f3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800f3c2:	e002      	b.n	800f3ca <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f3c8:	bf00      	nop
  }
  return usb_status;
 800f3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	4608      	mov	r0, r1
 800f3de:	4611      	mov	r1, r2
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	70fb      	strb	r3, [r7, #3]
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	70bb      	strb	r3, [r7, #2]
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f3fc:	78bb      	ldrb	r3, [r7, #2]
 800f3fe:	883a      	ldrh	r2, [r7, #0]
 800f400:	78f9      	ldrb	r1, [r7, #3]
 800f402:	f7f3 f968 	bl	80026d6 <HAL_PCD_EP_Open>
 800f406:	4603      	mov	r3, r0
 800f408:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f40a:	7bbb      	ldrb	r3, [r7, #14]
 800f40c:	2b03      	cmp	r3, #3
 800f40e:	d817      	bhi.n	800f440 <USBD_LL_OpenEP+0x6c>
 800f410:	a201      	add	r2, pc, #4	; (adr r2, 800f418 <USBD_LL_OpenEP+0x44>)
 800f412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f416:	bf00      	nop
 800f418:	0800f429 	.word	0x0800f429
 800f41c:	0800f42f 	.word	0x0800f42f
 800f420:	0800f435 	.word	0x0800f435
 800f424:	0800f43b 	.word	0x0800f43b
    case HAL_OK :
      usb_status = USBD_OK;
 800f428:	2300      	movs	r3, #0
 800f42a:	73fb      	strb	r3, [r7, #15]
    break;
 800f42c:	e00b      	b.n	800f446 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f42e:	2303      	movs	r3, #3
 800f430:	73fb      	strb	r3, [r7, #15]
    break;
 800f432:	e008      	b.n	800f446 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f434:	2301      	movs	r3, #1
 800f436:	73fb      	strb	r3, [r7, #15]
    break;
 800f438:	e005      	b.n	800f446 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f43a:	2303      	movs	r3, #3
 800f43c:	73fb      	strb	r3, [r7, #15]
    break;
 800f43e:	e002      	b.n	800f446 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f440:	2303      	movs	r3, #3
 800f442:	73fb      	strb	r3, [r7, #15]
    break;
 800f444:	bf00      	nop
  }
  return usb_status;
 800f446:	7bfb      	ldrb	r3, [r7, #15]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3710      	adds	r7, #16
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	460b      	mov	r3, r1
 800f45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f45c:	2300      	movs	r3, #0
 800f45e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f46a:	78fa      	ldrb	r2, [r7, #3]
 800f46c:	4611      	mov	r1, r2
 800f46e:	4618      	mov	r0, r3
 800f470:	f7f3 f999 	bl	80027a6 <HAL_PCD_EP_Close>
 800f474:	4603      	mov	r3, r0
 800f476:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f478:	7bbb      	ldrb	r3, [r7, #14]
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d816      	bhi.n	800f4ac <USBD_LL_CloseEP+0x5c>
 800f47e:	a201      	add	r2, pc, #4	; (adr r2, 800f484 <USBD_LL_CloseEP+0x34>)
 800f480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f484:	0800f495 	.word	0x0800f495
 800f488:	0800f49b 	.word	0x0800f49b
 800f48c:	0800f4a1 	.word	0x0800f4a1
 800f490:	0800f4a7 	.word	0x0800f4a7
    case HAL_OK :
      usb_status = USBD_OK;
 800f494:	2300      	movs	r3, #0
 800f496:	73fb      	strb	r3, [r7, #15]
    break;
 800f498:	e00b      	b.n	800f4b2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f49a:	2303      	movs	r3, #3
 800f49c:	73fb      	strb	r3, [r7, #15]
    break;
 800f49e:	e008      	b.n	800f4b2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f4a4:	e005      	b.n	800f4b2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f4a6:	2303      	movs	r3, #3
 800f4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800f4aa:	e002      	b.n	800f4b2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f4ac:	2303      	movs	r3, #3
 800f4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b0:	bf00      	nop
  }
  return usb_status;
 800f4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3710      	adds	r7, #16
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4d6:	78fa      	ldrb	r2, [r7, #3]
 800f4d8:	4611      	mov	r1, r2
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7f3 fa40 	bl	8002960 <HAL_PCD_EP_SetStall>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f4e4:	7bbb      	ldrb	r3, [r7, #14]
 800f4e6:	2b03      	cmp	r3, #3
 800f4e8:	d816      	bhi.n	800f518 <USBD_LL_StallEP+0x5c>
 800f4ea:	a201      	add	r2, pc, #4	; (adr r2, 800f4f0 <USBD_LL_StallEP+0x34>)
 800f4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f0:	0800f501 	.word	0x0800f501
 800f4f4:	0800f507 	.word	0x0800f507
 800f4f8:	0800f50d 	.word	0x0800f50d
 800f4fc:	0800f513 	.word	0x0800f513
    case HAL_OK :
      usb_status = USBD_OK;
 800f500:	2300      	movs	r3, #0
 800f502:	73fb      	strb	r3, [r7, #15]
    break;
 800f504:	e00b      	b.n	800f51e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f506:	2303      	movs	r3, #3
 800f508:	73fb      	strb	r3, [r7, #15]
    break;
 800f50a:	e008      	b.n	800f51e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f50c:	2301      	movs	r3, #1
 800f50e:	73fb      	strb	r3, [r7, #15]
    break;
 800f510:	e005      	b.n	800f51e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f512:	2303      	movs	r3, #3
 800f514:	73fb      	strb	r3, [r7, #15]
    break;
 800f516:	e002      	b.n	800f51e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f518:	2303      	movs	r3, #3
 800f51a:	73fb      	strb	r3, [r7, #15]
    break;
 800f51c:	bf00      	nop
  }
  return usb_status;
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f534:	2300      	movs	r3, #0
 800f536:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f538:	2300      	movs	r3, #0
 800f53a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f542:	78fa      	ldrb	r2, [r7, #3]
 800f544:	4611      	mov	r1, r2
 800f546:	4618      	mov	r0, r3
 800f548:	f7f3 fa6c 	bl	8002a24 <HAL_PCD_EP_ClrStall>
 800f54c:	4603      	mov	r3, r0
 800f54e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f550:	7bbb      	ldrb	r3, [r7, #14]
 800f552:	2b03      	cmp	r3, #3
 800f554:	d816      	bhi.n	800f584 <USBD_LL_ClearStallEP+0x5c>
 800f556:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <USBD_LL_ClearStallEP+0x34>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f56d 	.word	0x0800f56d
 800f560:	0800f573 	.word	0x0800f573
 800f564:	0800f579 	.word	0x0800f579
 800f568:	0800f57f 	.word	0x0800f57f
    case HAL_OK :
      usb_status = USBD_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	73fb      	strb	r3, [r7, #15]
    break;
 800f570:	e00b      	b.n	800f58a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f572:	2303      	movs	r3, #3
 800f574:	73fb      	strb	r3, [r7, #15]
    break;
 800f576:	e008      	b.n	800f58a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f578:	2301      	movs	r3, #1
 800f57a:	73fb      	strb	r3, [r7, #15]
    break;
 800f57c:	e005      	b.n	800f58a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f57e:	2303      	movs	r3, #3
 800f580:	73fb      	strb	r3, [r7, #15]
    break;
 800f582:	e002      	b.n	800f58a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f584:	2303      	movs	r3, #3
 800f586:	73fb      	strb	r3, [r7, #15]
    break;
 800f588:	bf00      	nop
  }
  return usb_status;
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f594:	b480      	push	{r7}
 800f596:	b085      	sub	sp, #20
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f5a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f5a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	da0b      	bge.n	800f5c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f5b0:	78fb      	ldrb	r3, [r7, #3]
 800f5b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5b6:	68f9      	ldr	r1, [r7, #12]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	4413      	add	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	440b      	add	r3, r1
 800f5c2:	333e      	adds	r3, #62	; 0x3e
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	e00b      	b.n	800f5e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f5c8:	78fb      	ldrb	r3, [r7, #3]
 800f5ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5ce:	68f9      	ldr	r1, [r7, #12]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	4413      	add	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	440b      	add	r3, r1
 800f5da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f5de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f606:	78fa      	ldrb	r2, [r7, #3]
 800f608:	4611      	mov	r1, r2
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7f3 f83e 	bl	800268c <HAL_PCD_SetAddress>
 800f610:	4603      	mov	r3, r0
 800f612:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f614:	7bbb      	ldrb	r3, [r7, #14]
 800f616:	2b03      	cmp	r3, #3
 800f618:	d816      	bhi.n	800f648 <USBD_LL_SetUSBAddress+0x5c>
 800f61a:	a201      	add	r2, pc, #4	; (adr r2, 800f620 <USBD_LL_SetUSBAddress+0x34>)
 800f61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f620:	0800f631 	.word	0x0800f631
 800f624:	0800f637 	.word	0x0800f637
 800f628:	0800f63d 	.word	0x0800f63d
 800f62c:	0800f643 	.word	0x0800f643
    case HAL_OK :
      usb_status = USBD_OK;
 800f630:	2300      	movs	r3, #0
 800f632:	73fb      	strb	r3, [r7, #15]
    break;
 800f634:	e00b      	b.n	800f64e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f636:	2303      	movs	r3, #3
 800f638:	73fb      	strb	r3, [r7, #15]
    break;
 800f63a:	e008      	b.n	800f64e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f63c:	2301      	movs	r3, #1
 800f63e:	73fb      	strb	r3, [r7, #15]
    break;
 800f640:	e005      	b.n	800f64e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f642:	2303      	movs	r3, #3
 800f644:	73fb      	strb	r3, [r7, #15]
    break;
 800f646:	e002      	b.n	800f64e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f648:	2303      	movs	r3, #3
 800f64a:	73fb      	strb	r3, [r7, #15]
    break;
 800f64c:	bf00      	nop
  }
  return usb_status;
 800f64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f650:	4618      	mov	r0, r3
 800f652:	3710      	adds	r7, #16
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	607a      	str	r2, [r7, #4]
 800f662:	603b      	str	r3, [r7, #0]
 800f664:	460b      	mov	r3, r1
 800f666:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f66c:	2300      	movs	r3, #0
 800f66e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f676:	7af9      	ldrb	r1, [r7, #11]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	f7f3 f933 	bl	80028e6 <HAL_PCD_EP_Transmit>
 800f680:	4603      	mov	r3, r0
 800f682:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f684:	7dbb      	ldrb	r3, [r7, #22]
 800f686:	2b03      	cmp	r3, #3
 800f688:	d816      	bhi.n	800f6b8 <USBD_LL_Transmit+0x60>
 800f68a:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <USBD_LL_Transmit+0x38>)
 800f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f690:	0800f6a1 	.word	0x0800f6a1
 800f694:	0800f6a7 	.word	0x0800f6a7
 800f698:	0800f6ad 	.word	0x0800f6ad
 800f69c:	0800f6b3 	.word	0x0800f6b3
    case HAL_OK :
      usb_status = USBD_OK;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	75fb      	strb	r3, [r7, #23]
    break;
 800f6a4:	e00b      	b.n	800f6be <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6a6:	2303      	movs	r3, #3
 800f6a8:	75fb      	strb	r3, [r7, #23]
    break;
 800f6aa:	e008      	b.n	800f6be <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	75fb      	strb	r3, [r7, #23]
    break;
 800f6b0:	e005      	b.n	800f6be <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6b2:	2303      	movs	r3, #3
 800f6b4:	75fb      	strb	r3, [r7, #23]
    break;
 800f6b6:	e002      	b.n	800f6be <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	75fb      	strb	r3, [r7, #23]
    break;
 800f6bc:	bf00      	nop
  }
  return usb_status;
 800f6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3718      	adds	r7, #24
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b086      	sub	sp, #24
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	607a      	str	r2, [r7, #4]
 800f6d2:	603b      	str	r3, [r7, #0]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f6e6:	7af9      	ldrb	r1, [r7, #11]
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	f7f3 f8a5 	bl	800283a <HAL_PCD_EP_Receive>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f6f4:	7dbb      	ldrb	r3, [r7, #22]
 800f6f6:	2b03      	cmp	r3, #3
 800f6f8:	d816      	bhi.n	800f728 <USBD_LL_PrepareReceive+0x60>
 800f6fa:	a201      	add	r2, pc, #4	; (adr r2, 800f700 <USBD_LL_PrepareReceive+0x38>)
 800f6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f700:	0800f711 	.word	0x0800f711
 800f704:	0800f717 	.word	0x0800f717
 800f708:	0800f71d 	.word	0x0800f71d
 800f70c:	0800f723 	.word	0x0800f723
    case HAL_OK :
      usb_status = USBD_OK;
 800f710:	2300      	movs	r3, #0
 800f712:	75fb      	strb	r3, [r7, #23]
    break;
 800f714:	e00b      	b.n	800f72e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f716:	2303      	movs	r3, #3
 800f718:	75fb      	strb	r3, [r7, #23]
    break;
 800f71a:	e008      	b.n	800f72e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f71c:	2301      	movs	r3, #1
 800f71e:	75fb      	strb	r3, [r7, #23]
    break;
 800f720:	e005      	b.n	800f72e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f722:	2303      	movs	r3, #3
 800f724:	75fb      	strb	r3, [r7, #23]
    break;
 800f726:	e002      	b.n	800f72e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f728:	2303      	movs	r3, #3
 800f72a:	75fb      	strb	r3, [r7, #23]
    break;
 800f72c:	bf00      	nop
  }
  return usb_status;
 800f72e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f730:	4618      	mov	r0, r3
 800f732:	3718      	adds	r7, #24
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	460b      	mov	r3, r1
 800f742:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f74a:	78fa      	ldrb	r2, [r7, #3]
 800f74c:	4611      	mov	r1, r2
 800f74e:	4618      	mov	r0, r3
 800f750:	f7f3 f8b1 	bl	80028b6 <HAL_PCD_EP_GetRxCount>
 800f754:	4603      	mov	r3, r0
}
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
	...

0800f760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	460b      	mov	r3, r1
 800f76a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f76c:	78fb      	ldrb	r3, [r7, #3]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <HAL_PCDEx_LPM_Callback+0x18>
 800f772:	2b01      	cmp	r3, #1
 800f774:	d01f      	beq.n	800f7b6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f776:	e03b      	b.n	800f7f0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a1b      	ldr	r3, [r3, #32]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d007      	beq.n	800f790 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f780:	f000 f854 	bl	800f82c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f784:	4b1c      	ldr	r3, [pc, #112]	; (800f7f8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	4a1b      	ldr	r2, [pc, #108]	; (800f7f8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f78a:	f023 0306 	bic.w	r3, r3, #6
 800f78e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	6812      	ldr	r2, [r2, #0]
 800f79e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f7a2:	f023 0301 	bic.w	r3, r3, #1
 800f7a6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fb fba2 	bl	800aef8 <USBD_LL_Resume>
    break;
 800f7b4:	e01c      	b.n	800f7f0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	6812      	ldr	r2, [r2, #0]
 800f7c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f7c8:	f043 0301 	orr.w	r3, r3, #1
 800f7cc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fb fb79 	bl	800aecc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6a1b      	ldr	r3, [r3, #32]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d005      	beq.n	800f7ee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7e2:	4b05      	ldr	r3, [pc, #20]	; (800f7f8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f7e4:	691b      	ldr	r3, [r3, #16]
 800f7e6:	4a04      	ldr	r2, [pc, #16]	; (800f7f8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f7e8:	f043 0306 	orr.w	r3, r3, #6
 800f7ec:	6113      	str	r3, [r2, #16]
    break;
 800f7ee:	bf00      	nop
}
 800f7f0:	bf00      	nop
 800f7f2:	3708      	adds	r7, #8
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	e000ed00 	.word	0xe000ed00

0800f7fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f804:	4b03      	ldr	r3, [pc, #12]	; (800f814 <USBD_static_malloc+0x18>)
}
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	200022d8 	.word	0x200022d8

0800f818 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f818:	b480      	push	{r7}
 800f81a:	b083      	sub	sp, #12
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]

}
 800f820:	bf00      	nop
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr

0800f82c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f830:	f7f0 ff4c 	bl	80006cc <SystemClock_Config>
}
 800f834:	bf00      	nop
 800f836:	bd80      	pop	{r7, pc}

0800f838 <__libc_init_array>:
 800f838:	b570      	push	{r4, r5, r6, lr}
 800f83a:	4d0d      	ldr	r5, [pc, #52]	; (800f870 <__libc_init_array+0x38>)
 800f83c:	4c0d      	ldr	r4, [pc, #52]	; (800f874 <__libc_init_array+0x3c>)
 800f83e:	1b64      	subs	r4, r4, r5
 800f840:	10a4      	asrs	r4, r4, #2
 800f842:	2600      	movs	r6, #0
 800f844:	42a6      	cmp	r6, r4
 800f846:	d109      	bne.n	800f85c <__libc_init_array+0x24>
 800f848:	4d0b      	ldr	r5, [pc, #44]	; (800f878 <__libc_init_array+0x40>)
 800f84a:	4c0c      	ldr	r4, [pc, #48]	; (800f87c <__libc_init_array+0x44>)
 800f84c:	f000 f820 	bl	800f890 <_init>
 800f850:	1b64      	subs	r4, r4, r5
 800f852:	10a4      	asrs	r4, r4, #2
 800f854:	2600      	movs	r6, #0
 800f856:	42a6      	cmp	r6, r4
 800f858:	d105      	bne.n	800f866 <__libc_init_array+0x2e>
 800f85a:	bd70      	pop	{r4, r5, r6, pc}
 800f85c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f860:	4798      	blx	r3
 800f862:	3601      	adds	r6, #1
 800f864:	e7ee      	b.n	800f844 <__libc_init_array+0xc>
 800f866:	f855 3b04 	ldr.w	r3, [r5], #4
 800f86a:	4798      	blx	r3
 800f86c:	3601      	adds	r6, #1
 800f86e:	e7f2      	b.n	800f856 <__libc_init_array+0x1e>
 800f870:	0800fa88 	.word	0x0800fa88
 800f874:	0800fa88 	.word	0x0800fa88
 800f878:	0800fa88 	.word	0x0800fa88
 800f87c:	0800fa8c 	.word	0x0800fa8c

0800f880 <memset>:
 800f880:	4402      	add	r2, r0
 800f882:	4603      	mov	r3, r0
 800f884:	4293      	cmp	r3, r2
 800f886:	d100      	bne.n	800f88a <memset+0xa>
 800f888:	4770      	bx	lr
 800f88a:	f803 1b01 	strb.w	r1, [r3], #1
 800f88e:	e7f9      	b.n	800f884 <memset+0x4>

0800f890 <_init>:
 800f890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f892:	bf00      	nop
 800f894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f896:	bc08      	pop	{r3}
 800f898:	469e      	mov	lr, r3
 800f89a:	4770      	bx	lr

0800f89c <_fini>:
 800f89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89e:	bf00      	nop
 800f8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8a2:	bc08      	pop	{r3}
 800f8a4:	469e      	mov	lr, r3
 800f8a6:	4770      	bx	lr
