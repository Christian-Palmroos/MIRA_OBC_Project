
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c4c0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  0801c680  0801c680  0002c680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d130  0801d130  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d130  0801d130  0002d130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d138  0801d138  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d138  0801d138  0002d138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d13c  0801d13c  0002d13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0801d140  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  200002d0  0801d410  000302d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002fd0  0801d410  00032fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049924  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b3f  00000000  00000000  00079c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003658  00000000  00000000  00080768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000033d8  00000000  00000000  00083dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000358e8  00000000  00000000  00087198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003cbed  00000000  00000000  000bca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a6b7  00000000  00000000  000f966d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00223d24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fe50  00000000  00000000  00223d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00233bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00233c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801c668 	.word	0x0801c668

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	0801c668 	.word	0x0801c668

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0801c680 	.word	0x0801c680

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f017 fdcc 	bl	80196ac <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	0801c684 	.word	0x0801c684

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f016 f96e 	bl	8018be8 <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f016 f969 	bl	8018be8 <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f016 f964 	bl	8018be8 <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f016 f95f 	bl	8018be8 <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f016 f95a 	bl	8018be8 <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f016 f955 	bl	8018be8 <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f016 f950 	bl	8018be8 <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f016 f94b 	bl	8018be8 <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	0801c6cc 	.word	0x0801c6cc
 8002964:	0801c6d4 	.word	0x0801c6d4
 8002968:	0801c6dc 	.word	0x0801c6dc
 800296c:	0801c6e4 	.word	0x0801c6e4
 8002970:	0801c6ec 	.word	0x0801c6ec
 8002974:	0801c6f4 	.word	0x0801c6f4
 8002978:	0801c6fc 	.word	0x0801c6fc
 800297c:	0801c704 	.word	0x0801c704

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	200002ec 	.word	0x200002ec
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f005 fad2 	bl	8007ff8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f005 fbe1 	bl	8008228 <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200004f0 	.word	0x200004f0

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f016 fe03 	bl	80196ac <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f005 fa9e 	bl	8007ff8 <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200002f0 	.word	0x200002f0
 8002acc:	200002f1 	.word	0x200002f1
 8002ad0:	200004f0 	.word	0x200004f0

08002ad4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <BSP_I2C2_Init+0x74>)
 8002ae2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4918      	ldr	r1, [pc, #96]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002aec:	600a      	str	r2, [r1, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d122      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002af4:	f005 ffc5 	bl	8008a82 <HAL_I2C_GetState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b00:	f000 f8fe 	bl	8002d00 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b0c:	f000 f8b4 	bl	8002c78 <MX_I2C2_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b16:	f06f 0307 	mvn.w	r3, #7
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e00c      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4808      	ldr	r0, [pc, #32]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b22:	f006 fb03 	bl	800912c <HAL_I2CEx_ConfigAnalogFilter>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b2c:	f06f 0307 	mvn.w	r3, #7
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e001      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200004f0 	.word	0x200004f0
 8002b48:	40005800 	.word	0x40005800
 8002b4c:	20000544 	.word	0x20000544

08002b50 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b76:	f000 f923 	bl	8002dc0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b7c:	f005 fa0d 	bl	8007f9a <HAL_I2C_DeInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b86:	f06f 0307 	mvn.w	r3, #7
 8002b8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b8c:	687b      	ldr	r3, [r7, #4]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000544 	.word	0x20000544
 8002b9c:	200004f0 	.word	0x200004f0

08002ba0 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	81fb      	strh	r3, [r7, #14]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	81bb      	strh	r3, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	89f9      	ldrh	r1, [r7, #14]
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	480c      	ldr	r0, [pc, #48]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bd0:	f005 fc20 	bl	8008414 <HAL_I2C_Mem_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bdc:	f005 ff5f 	bl	8008a9e <HAL_I2C_GetError>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d103      	bne.n	8002bee <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002be6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e002      	b.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002bee:	f06f 0303 	mvn.w	r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bf4:	697b      	ldr	r3, [r7, #20]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200004f0 	.word	0x200004f0

08002c04 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	460b      	mov	r3, r1
 8002c14:	81bb      	strh	r3, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002c1e:	89ba      	ldrh	r2, [r7, #12]
 8002c20:	89f9      	ldrh	r1, [r7, #14]
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c34:	f005 fd02 	bl	800863c <HAL_I2C_Mem_Read>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c40:	f005 ff2d 	bl	8008a9e <HAL_I2C_GetError>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d103      	bne.n	8002c52 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e002      	b.n	8002c58 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c52:	f06f 0303 	mvn.w	r3, #3
 8002c56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002c58:	697b      	ldr	r3, [r7, #20]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200004f0 	.word	0x200004f0

08002c68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002c6c:	f004 f9bc 	bl	8006fe8 <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_I2C2_Init+0x80>)
 8002c88:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_I2C2_Init+0x84>)
 8002c8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f005 f8d2 	bl	8007e64 <HAL_I2C_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f006 fa2d 	bl	800912c <HAL_I2CEx_ConfigAnalogFilter>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f006 fa6f 	bl	80091c2 <HAL_I2CEx_ConfigDigitalFilter>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005800 	.word	0x40005800
 8002cfc:	307075b1 	.word	0x307075b1

08002d00 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0ae      	sub	sp, #184	; 0xb8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2294      	movs	r2, #148	; 0x94
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f016 fcd9 	bl	80196c8 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f008 fc24 	bl	800b570 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4815      	ldr	r0, [pc, #84]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d68:	f004 fdae 	bl	80078c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d90:	4619      	mov	r1, r3
 8002d92:	480a      	ldr	r0, [pc, #40]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d94:	f004 fd98 	bl	80078c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	37b8      	adds	r7, #184	; 0xb8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002dda:	f004 ff07 	bl	8007bec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002de4:	f004 ff02 	bl	8007bec <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6858      	ldr	r0, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8adb      	ldrh	r3, [r3, #22]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f004 ffef 	bl	8007e00 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	1cf9      	adds	r1, r7, #3
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f00b fe83 	bl	800eb38 <HAL_SPI_Transmit>
 8002e32:	4603      	mov	r3, r0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f107 010f 	add.w	r1, r7, #15
 8002e42:	2201      	movs	r2, #1
 8002e44:	f00b ffed 	bl	800ee22 <HAL_SPI_Receive>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6858      	ldr	r0, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8adb      	ldrh	r3, [r3, #22]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4619      	mov	r1, r3
 8002e58:	f004 ffd2 	bl	8007e00 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]
 8002e72:	4613      	mov	r3, r2
 8002e74:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e7c:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8002e7e:	78bb      	ldrb	r3, [r7, #2]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	b21a      	sxth	r2, r3
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6858      	ldr	r0, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8adb      	ldrh	r3, [r3, #22]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f004 ffb0 	bl	8007e00 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f107 010a 	add.w	r1, r7, #10
 8002eac:	2202      	movs	r2, #2
 8002eae:	f00b fe43 	bl	800eb38 <HAL_SPI_Transmit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6858      	ldr	r0, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8adb      	ldrh	r3, [r3, #22]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f004 ff9d 	bl	8007e00 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	461a      	mov	r2, r3
 8002edc:	460b      	mov	r3, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6858      	ldr	r0, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8adb      	ldrh	r3, [r3, #22]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f004 ff84 	bl	8007e00 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f107 0117 	add.w	r1, r7, #23
 8002f04:	2201      	movs	r2, #1
 8002f06:	f00b fe17 	bl	800eb38 <HAL_SPI_Transmit>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8002f0e:	79bb      	ldrb	r3, [r7, #6]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	79fa      	ldrb	r2, [r7, #7]
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f00c fad8 	bl	800f4d4 <HAL_SPI_Transmit_DMA>
 8002f24:	e012      	b.n	8002f4c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	f00b fe00 	bl	800eb38 <HAL_SPI_Transmit>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6858      	ldr	r0, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8adb      	ldrh	r3, [r3, #22]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	f004 ff5a 	bl	8007e00 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	2101      	movs	r1, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ff7b 	bl	8002e66 <write_register>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b2c      	cmp	r3, #44	; 0x2c
 8002f88:	d801      	bhi.n	8002f8e <set_OCP+0x16>
    imax = 45;
 8002f8a:	232d      	movs	r3, #45	; 0x2d
 8002f8c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	2bf0      	cmp	r3, #240	; 0xf0
 8002f92:	d901      	bls.n	8002f98 <set_OCP+0x20>
    imax = 240;
 8002f94:	23f0      	movs	r3, #240	; 0xf0
 8002f96:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2b81      	cmp	r3, #129	; 0x81
 8002f9c:	d809      	bhi.n	8002fb2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	3b2d      	subs	r3, #45	; 0x2d
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <set_OCP+0x68>)
 8002fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8002fa8:	1052      	asrs	r2, r2, #1
 8002faa:	17db      	asrs	r3, r3, #31
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e008      	b.n	8002fc4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	331e      	adds	r3, #30
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <set_OCP+0x68>)
 8002fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8002fbc:	1092      	asrs	r2, r2, #2
 8002fbe:	17db      	asrs	r3, r3, #31
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	f043 0320 	orr.w	r3, r3, #32
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	210b      	movs	r1, #11
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff48 	bl	8002e66 <write_register>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	66666667 	.word	0x66666667

08002fe4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8002fec:	211d      	movs	r1, #29
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff02 	bl	8002df8 <read_register>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	461c      	mov	r4, r3
 8003000:	4615      	mov	r5, r2
 8003002:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8003006:	211e      	movs	r1, #30
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fef5 	bl	8002df8 <read_register>
 800300e:	4603      	mov	r3, r0
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8003014:	2304      	movs	r3, #4
 8003016:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b0a      	cmp	r3, #10
 800301c:	d908      	bls.n	8003030 <set_low_data_rate_optimization+0x4c>
 800301e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003022:	1fd1      	subs	r1, r2, #7
 8003024:	430b      	orrs	r3, r1
 8003026:	d103      	bne.n	8003030 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	461a      	mov	r2, r3
 8003034:	2126      	movs	r1, #38	; 0x26
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ff15 	bl	8002e66 <write_register>
}
 800303c:	bf00      	nop
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bdb0      	pop	{r4, r5, r7, pc}

08003044 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff7f 	bl	8002f52 <set_mode>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8003064:	2101      	movs	r1, #1
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff73 	bl	8002f52 <set_mode>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800307c:	211d      	movs	r1, #29
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff feba 	bl	8002df8 <read_register>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	461a      	mov	r2, r3
 8003094:	211d      	movs	r1, #29
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fee5 	bl	8002e66 <write_register>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d901      	bls.n	80030c2 <lora_set_tx_power+0x1e>
      level = 15;
 80030be:	230f      	movs	r3, #15
 80030c0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	2109      	movs	r1, #9
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fec9 	bl	8002e66 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80030d4:	e02e      	b.n	8003134 <lora_set_tx_power+0x90>
    if (level > 20) {
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	2b14      	cmp	r3, #20
 80030da:	d901      	bls.n	80030e0 <lora_set_tx_power+0x3c>
      level = 20;
 80030dc:	2314      	movs	r3, #20
 80030de:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d801      	bhi.n	80030ea <lora_set_tx_power+0x46>
      level = 2;
 80030e6:	2302      	movs	r3, #2
 80030e8:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	2b11      	cmp	r3, #17
 80030ee:	d90c      	bls.n	800310a <lora_set_tx_power+0x66>
      level -= 3;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	3b03      	subs	r3, #3
 80030f4:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80030f6:	2287      	movs	r2, #135	; 0x87
 80030f8:	214d      	movs	r1, #77	; 0x4d
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff feb3 	bl	8002e66 <write_register>
      set_OCP(lora, 140);
 8003100:	218c      	movs	r1, #140	; 0x8c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff38 	bl	8002f78 <set_OCP>
 8003108:	e008      	b.n	800311c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800310a:	2284      	movs	r2, #132	; 0x84
 800310c:	214d      	movs	r1, #77	; 0x4d
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fea9 	bl	8002e66 <write_register>
      set_OCP(lora, 97);
 8003114:	2161      	movs	r1, #97	; 0x61
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ff2e 	bl	8002f78 <set_OCP>
    level -= 2;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	3b02      	subs	r3, #2
 8003120:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	2109      	movs	r1, #9
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fe99 	bl	8002e66 <write_register>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8003148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314c:	f04f 0000 	mov.w	r0, #0
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	04d9      	lsls	r1, r3, #19
 8003156:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800315a:	04d0      	lsls	r0, r2, #19
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <lora_set_frequency+0x88>)
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	f7fd fd89 	bl	8000c78 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800316e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	0c02      	lsrs	r2, r0, #16
 800317c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003180:	0c0b      	lsrs	r3, r1, #16
 8003182:	b2d3      	uxtb	r3, r2
 8003184:	461a      	mov	r2, r3
 8003186:	2106      	movs	r1, #6
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fe6c 	bl	8002e66 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800318e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	0a02      	lsrs	r2, r0, #8
 800319c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80031a0:	0a0b      	lsrs	r3, r1, #8
 80031a2:	b2d3      	uxtb	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	2107      	movs	r1, #7
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fe5c 	bl	8002e66 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80031ae:	7c3b      	ldrb	r3, [r7, #16]
 80031b0:	461a      	mov	r2, r3
 80031b2:	2108      	movs	r1, #8
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fe56 	bl	8002e66 <write_register>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	01e84800 	.word	0x01e84800

080031c8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d802      	bhi.n	80031e0 <lora_set_spreading_factor+0x18>
    sf = 6;
 80031da:	2306      	movs	r3, #6
 80031dc:	70fb      	strb	r3, [r7, #3]
 80031de:	e004      	b.n	80031ea <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d901      	bls.n	80031ea <lora_set_spreading_factor+0x22>
    sf = 12;
 80031e6:	230c      	movs	r3, #12
 80031e8:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d10a      	bne.n	8003206 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80031f0:	22c5      	movs	r2, #197	; 0xc5
 80031f2:	2131      	movs	r1, #49	; 0x31
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fe36 	bl	8002e66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80031fa:	220c      	movs	r2, #12
 80031fc:	2137      	movs	r1, #55	; 0x37
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fe31 	bl	8002e66 <write_register>
 8003204:	e009      	b.n	800321a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8003206:	22c3      	movs	r2, #195	; 0xc3
 8003208:	2131      	movs	r1, #49	; 0x31
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe2b 	bl	8002e66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8003210:	220a      	movs	r2, #10
 8003212:	2137      	movs	r1, #55	; 0x37
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fe26 	bl	8002e66 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800321a:	211e      	movs	r1, #30
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fdeb 	bl	8002df8 <read_register>
 8003222:	4603      	mov	r3, r0
 8003224:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	b25a      	sxtb	r2, r3
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	b25b      	sxtb	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b25b      	sxtb	r3, r3
 800323a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	461a      	mov	r2, r3
 8003240:	211e      	movs	r1, #30
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fe0f 	bl	8002e66 <write_register>

  set_low_data_rate_optimization(lora);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fecb 	bl	8002fe4 <set_low_data_rate_optimization>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	2120      	movs	r1, #32
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fdf9 	bl	8002e66 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	2121      	movs	r1, #33	; 0x21
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fdef 	bl	8002e66 <write_register>
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8003298:	2142      	movs	r1, #66	; 0x42
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fdac 	bl	8002df8 <read_register>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80032b2:	2101      	movs	r1, #1
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fd9f 	bl	8002df8 <read_register>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d101      	bne.n	80032cc <lora_is_transmitting+0x22>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e000      	b.n	80032ce <lora_is_transmitting+0x24>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	4611      	mov	r1, r2
 80032e2:	461a      	mov	r2, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ffdc 	bl	80032aa <lora_is_transmitting>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80032f8:	2305      	movs	r3, #5
 80032fa:	e02a      	b.n	8003352 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80032fc:	2101      	movs	r1, #1
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff fe27 	bl	8002f52 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f83a 	bl	800337e <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	7d1b      	ldrb	r3, [r3, #20]
 800330e:	461a      	mov	r2, r3
 8003310:	210d      	movs	r1, #13
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fda7 	bl	8002e66 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	7d1b      	ldrb	r3, [r3, #20]
 800331c:	461a      	mov	r2, r3
 800331e:	210e      	movs	r1, #14
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fda0 	bl	8002e66 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	461a      	mov	r2, r3
 800332a:	2122      	movs	r1, #34	; 0x22
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fd9a 	bl	8002e66 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	79fa      	ldrb	r2, [r7, #7]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fdc8 	bl	8002ece <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800333e:	79bb      	ldrb	r3, [r7, #6]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <lora_send_packet_base+0x72>
    return LORA_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e004      	b.n	8003352 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8003348:	2103      	movs	r1, #3
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fe01 	bl	8002f52 <set_mode>
  return LORA_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	4613      	mov	r3, r2
 8003366:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	2302      	movs	r3, #2
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ffb1 	bl	80032d6 <lora_send_packet_base>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8003386:	2208      	movs	r2, #8
 8003388:	2112      	movs	r1, #18
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fd6b 	bl	8002e66 <write_register>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033d6:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff ff59 	bl	8003290 <lora_version>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d001      	beq.n	80033ec <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80033e8:	2304      	movs	r3, #4
 80033ea:	e031      	b.n	8003450 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fe29 	bl	8003044 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff fe26 	bl	8003044 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80033f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fe9d 	bl	800313c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8003402:	2107      	movs	r1, #7
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fedf 	bl	80031c8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800340a:	210a      	movs	r1, #10
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff ff22 	bl	8003256 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff fe2e 	bl	8003074 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8003418:	210c      	movs	r1, #12
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fcec 	bl	8002df8 <read_register>
 8003420:	4603      	mov	r3, r0
 8003422:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8003424:	7dbb      	ldrb	r3, [r7, #22]
 8003426:	f043 0303 	orr.w	r3, r3, #3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	210c      	movs	r1, #12
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fd18 	bl	8002e66 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8003436:	2204      	movs	r2, #4
 8003438:	2126      	movs	r1, #38	; 0x26
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff fd13 	bl	8002e66 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8003440:	2102      	movs	r1, #2
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff fe2e 	bl	80030a4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fe07 	bl	800305c <lora_mode_standby>

  return LORA_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <add_to_buffer>:
	put_one_char(x + 48);

	return 0;
}

void add_to_buffer(uint8_t* data_buffer, uint8_t* data, int size) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]

	for (int i = 0; i < size; i++) {
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e010      	b.n	800348c <add_to_buffer+0x34>
		sprintf(data_buffer + strlen(data_buffer), "%c", data[i]);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7fc fec8 	bl	8000200 <strlen>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1898      	adds	r0, r3, r2
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4907      	ldr	r1, [pc, #28]	; (80034a0 <add_to_buffer+0x48>)
 8003482:	f016 fe9b 	bl	801a1bc <siprintf>
	for (int i = 0; i < size; i++) {
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbea      	blt.n	800346a <add_to_buffer+0x12>
	}

}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	0801c7ac 	.word	0x0801c7ac
 80034a4:	00000000 	.word	0x00000000

080034a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 80034ae:	b082      	sub	sp, #8
 80034b0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "Start of operation\n"; /* File write buffer. */
 80034b2:	4bcd      	ldr	r3, [pc, #820]	; (80037e8 <main+0x340>)
 80034b4:	f507 5498 	add.w	r4, r7, #4864	; 0x1300
 80034b8:	461d      	mov	r5, r3
 80034ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80034c6:	f103 0314 	add.w	r3, r3, #20
 80034ca:	221e      	movs	r2, #30
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f016 f8fa 	bl	80196c8 <memset>

	// Buffer for all data to be stored into in the same way as it has been printed to the PC
	uint8_t data_buffer[LORA_MAX_PACKET_SIZE]; //LORA_MAX_PACKET_SIZE

	uint8_t gps_buffer[1000];
	char *gps_buffer_ptr1 = gps_buffer;
 80034d4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80034d8:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80034dc:	f102 020c 	add.w	r2, r2, #12
 80034e0:	6013      	str	r3, [r2, #0]
	char *gps_buffer_ptr2 = gps_buffer;
 80034e2:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80034e6:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80034ea:	f102 0210 	add.w	r2, r2, #16
 80034ee:	6013      	str	r3, [r2, #0]
	uint8_t gps_parsed_buffer[1000];
	int parser_i;
	int parser_sub_i;
	gps_buffer[0] = '\0';
 80034f0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80034f4:	f6a3 43e8 	subw	r3, r3, #3304	; 0xce8
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
	gps_parsed_buffer[0] = '\0';
 80034fc:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003500:	2200      	movs	r2, #0
 8003502:	f803 2cd0 	strb.w	r2, [r3, #-208]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 8003506:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800350a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800350e:	461a      	mov	r2, r3
 8003510:	2300      	movs	r3, #0
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	6053      	str	r3, [r2, #4]
 8003516:	6093      	str	r3, [r2, #8]
 8003518:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 800351a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800351e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 800352c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003530:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 800353c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003540:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	3304      	adds	r3, #4
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	611a      	str	r2, [r3, #16]
 8003556:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 8003558:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800355c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	3304      	adds	r3, #4
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	611a      	str	r2, [r3, #16]
 8003572:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 8003574:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003578:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	3304      	adds	r3, #4
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	611a      	str	r2, [r3, #16]
 800358e:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8003590:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003594:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003598:	4a94      	ldr	r2, [pc, #592]	; (80037ec <main+0x344>)
 800359a:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 800359c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80035a0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f016 f88a 	bl	80196c8 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 80035b4:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80035b8:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f016 f87e 	bl	80196c8 <memset>

	//LoRa
	lora_sx1276 lora;

	//MIRA
	uint8_t mira_target_reg = 0x00;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80035d2:	f102 0217 	add.w	r2, r2, #23
 80035d6:	7013      	strb	r3, [r2, #0]
	uint8_t mira_Tx_payload[4] = {0x00,0x00,0x00,0x00};
 80035d8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80035dc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
	//	int message;
	//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80035f0:	f101 0118 	add.w	r1, r1, #24
 80035f4:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80035f8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80035fc:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	3304      	adds	r3, #4
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	611a      	str	r2, [r3, #16]
 8003612:	751a      	strb	r2, [r3, #20]
	static uint8_t USB_TIMERS = 0x07;

	static uint8_t USB_PING = 0x08;
	static uint8_t USB_FLIGHTMODE = 0x09;

	uint8_t lora_test_packet[10] = {0,1,2,3,4,5,6,7,8,9};
 8003614:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003618:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800361c:	4a74      	ldr	r2, [pc, #464]	; (80037f0 <main+0x348>)
 800361e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003620:	c303      	stmia	r3!, {r0, r1}
 8003622:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003624:	f003 fc78 	bl	8006f18 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 8003628:	f001 fc1a 	bl	8004e60 <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 800362c:	f7ff fa52 	bl	8002ad4 <BSP_I2C2_Init>


	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 8003630:	4870      	ldr	r0, [pc, #448]	; (80037f4 <main+0x34c>)
 8003632:	f001 fda7 	bl	8005184 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 8003636:	4870      	ldr	r0, [pc, #448]	; (80037f8 <main+0x350>)
 8003638:	f001 fda4 	bl	8005184 <HAL_UART_MspInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800363c:	f000 fe3e 	bl	80042bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003640:	f001 f890 	bl	8004764 <MX_GPIO_Init>
  MX_DMA_Init();
 8003644:	f001 f86a 	bl	800471c <MX_DMA_Init>
  MX_I2C1_Init();
 8003648:	f000 feb6 	bl	80043b8 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 800364c:	f000 fef4 	bl	8004438 <MX_SDMMC1_SD_Init>
  // Initialize SD card
  BSP_SD_Init();
 8003650:	f010 feaa 	bl	80143a8 <BSP_SD_Init>
  MX_SPI1_Init();
 8003654:	f000 ff12 	bl	800447c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003658:	f000 ffc4 	bl	80045e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800365c:	f001 f80e 	bl	800467c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003660:	f010 fe88 	bl	8014374 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8003664:	f015 f9f2 	bl	8018a4c <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8003668:	f000 ff46 	bl	80044f8 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800366c:	f000 fe78 	bl	8004360 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8003670:	2108      	movs	r1, #8
 8003672:	4862      	ldr	r0, [pc, #392]	; (80037fc <main+0x354>)
 8003674:	f004 fbdc 	bl	8007e30 <HAL_GPIO_TogglePin>
	/// MIRA Init /////////////////////////////////////////////////////////////////////////////////


	// Enalbe MIRA power from OBC
	HAL_GPIO_WritePin(MIRA_EN_PWR_GPIO_Port, MIRA_EN_PWR_Pin, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800367e:	4860      	ldr	r0, [pc, #384]	; (8003800 <main+0x358>)
 8003680:	f004 fbbe 	bl	8007e00 <HAL_GPIO_WritePin>
	// Enable Over Current Protection at U4
	HAL_GPIO_WritePin(OCPEN_GPIO_Port, OCPEN_Pin, GPIO_PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800368a:	485d      	ldr	r0, [pc, #372]	; (8003800 <main+0x358>)
 800368c:	f004 fbb8 	bl	8007e00 <HAL_GPIO_WritePin>

	// enable channel 1 for MIRA communication
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 8003690:	2201      	movs	r2, #1
 8003692:	2104      	movs	r1, #4
 8003694:	485a      	ldr	r0, [pc, #360]	; (8003800 <main+0x358>)
 8003696:	f004 fbb3 	bl	8007e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 800369a:	2201      	movs	r2, #1
 800369c:	2108      	movs	r1, #8
 800369e:	4858      	ldr	r0, [pc, #352]	; (8003800 <main+0x358>)
 80036a0:	f004 fbae 	bl	8007e00 <HAL_GPIO_WritePin>

	// disable channel 2
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 80036a4:	2201      	movs	r2, #1
 80036a6:	2110      	movs	r1, #16
 80036a8:	4855      	ldr	r0, [pc, #340]	; (8003800 <main+0x358>)
 80036aa:	f004 fba9 	bl	8007e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_RESET);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2120      	movs	r1, #32
 80036b2:	4853      	ldr	r0, [pc, #332]	; (8003800 <main+0x358>)
 80036b4:	f004 fba4 	bl	8007e00 <HAL_GPIO_WritePin>

	// WAIT FOR USB CONNECTION
	// Comment this out once build finished
	HAL_Delay(1000);
 80036b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036bc:	f003 fca0 	bl	8007000 <HAL_Delay>
	while (CDC_Transmit_FS ("START\n", 6) == USBD_BUSY);
 80036c0:	bf00      	nop
 80036c2:	2106      	movs	r1, #6
 80036c4:	484f      	ldr	r0, [pc, #316]	; (8003804 <main+0x35c>)
 80036c6:	f015 fa8f 	bl	8018be8 <CDC_Transmit_FS>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d0f8      	beq.n	80036c2 <main+0x21a>

//	while(1){
	// Run test sequence for MIRA
//	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
	status = mira_test_sequence(&huart1, mira_science_Rx_buffer, mira_response_Rx_buffer, 5000);
 80036d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80036d4:	3a14      	subs	r2, #20
 80036d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80036da:	3908      	subs	r1, #8
 80036dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80036e0:	4844      	ldr	r0, [pc, #272]	; (80037f4 <main+0x34c>)
 80036e2:	f001 fa40 	bl	8004b66 <mira_test_sequence>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80036ec:	f102 021e 	add.w	r2, r2, #30
 80036f0:	7013      	strb	r3, [r2, #0]
	// Comment this out once build finished
	HAL_Delay(1000);
 80036f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036f6:	f003 fc83 	bl	8007000 <HAL_Delay>
//	}


	/// LoRa Init /////////////////////////////////////////////////////////////////////////////////
	uint8_t lora_res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_435);
 80036fa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80036fe:	381c      	subs	r0, #28
 8003700:	a337      	add	r3, pc, #220	; (adr r3, 80037e0 <main+0x338>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	e9cd 2300 	strd	r2, r3, [sp]
 800370a:	2320      	movs	r3, #32
 800370c:	4a3e      	ldr	r2, [pc, #248]	; (8003808 <main+0x360>)
 800370e:	493f      	ldr	r1, [pc, #252]	; (800380c <main+0x364>)
 8003710:	f7ff fe42 	bl	8003398 <lora_init>
 8003714:	4603      	mov	r3, r0
 8003716:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800371a:	f102 021d 	add.w	r2, r2, #29
 800371e:	7013      	strb	r3, [r2, #0]
	// Comment this out once build finished
	if (lora_res != LORA_OK) {
 8003720:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003724:	f103 031d 	add.w	r3, r3, #29
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <main+0x296>
		// Initialization failed
		while (CDC_Transmit_FS ("LORA INIT NOT OK!\n", 18) == USBD_BUSY);
 800372e:	bf00      	nop
 8003730:	2112      	movs	r1, #18
 8003732:	4837      	ldr	r0, [pc, #220]	; (8003810 <main+0x368>)
 8003734:	f015 fa58 	bl	8018be8 <CDC_Transmit_FS>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d0f8      	beq.n	8003730 <main+0x288>
	}
	if (lora_res == LORA_OK) {
 800373e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003742:	f103 031d 	add.w	r3, r3, #29
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <main+0x2b4>
		// All good
		while (CDC_Transmit_FS ("LORA OK!\n", 9) == USBD_BUSY);
 800374c:	bf00      	nop
 800374e:	2109      	movs	r1, #9
 8003750:	4830      	ldr	r0, [pc, #192]	; (8003814 <main+0x36c>)
 8003752:	f015 fa49 	bl	8018be8 <CDC_Transmit_FS>
 8003756:	4603      	mov	r3, r0
 8003758:	2b01      	cmp	r3, #1
 800375a:	d0f8      	beq.n	800374e <main+0x2a6>
	}
	lora_res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 800375c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003760:	3b1c      	subs	r3, #28
 8003762:	2204      	movs	r2, #4
 8003764:	492c      	ldr	r1, [pc, #176]	; (8003818 <main+0x370>)
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fdf7 	bl	800335a <lora_send_packet>
 800376c:	4603      	mov	r3, r0
 800376e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003772:	f102 021d 	add.w	r2, r2, #29
 8003776:	7013      	strb	r3, [r2, #0]
	if (lora_res != LORA_OK) {
 8003778:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800377c:	f103 031d 	add.w	r3, r3, #29
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <main+0x2ee>
		// Send failed
		while (CDC_Transmit_FS ("LORA SEND NOT OK!\n", 18) == USBD_BUSY);
 8003786:	bf00      	nop
 8003788:	2112      	movs	r1, #18
 800378a:	4824      	ldr	r0, [pc, #144]	; (800381c <main+0x374>)
 800378c:	f015 fa2c 	bl	8018be8 <CDC_Transmit_FS>
 8003790:	4603      	mov	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d0f8      	beq.n	8003788 <main+0x2e0>


	/// Gyro Init /////////////////////////////////////////////////////////////////////////////////

	// Set gyro io functions and values
	gyro_io.Init = BSP_I2C2_Init;
 8003796:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800379a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800379e:	4a20      	ldr	r2, [pc, #128]	; (8003820 <main+0x378>)
 80037a0:	601a      	str	r2, [r3, #0]
	gyro_io.DeInit = BSP_I2C2_DeInit;
 80037a2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80037a6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <main+0x37c>)
 80037ac:	605a      	str	r2, [r3, #4]
	gyro_io.BusType = 0;
 80037ae:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80037b2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
	gyro_io.Address = LSM6DSO_I2C_ADD_L;
 80037ba:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80037be:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80037c2:	22d5      	movs	r2, #213	; 0xd5
 80037c4:	731a      	strb	r2, [r3, #12]
	gyro_io.WriteReg = BSP_I2C2_WriteReg;
 80037c6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80037ca:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80037ce:	4a16      	ldr	r2, [pc, #88]	; (8003828 <main+0x380>)
 80037d0:	611a      	str	r2, [r3, #16]
	gyro_io.ReadReg = BSP_I2C2_ReadReg;
 80037d2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80037d6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80037da:	4a14      	ldr	r2, [pc, #80]	; (800382c <main+0x384>)
 80037dc:	615a      	str	r2, [r3, #20]
 80037de:	e027      	b.n	8003830 <main+0x388>
 80037e0:	19ed92c0 	.word	0x19ed92c0
 80037e4:	00000000 	.word	0x00000000
 80037e8:	0801c90c 	.word	0x0801c90c
 80037ec:	00202d20 	.word	0x00202d20
 80037f0:	0801c940 	.word	0x0801c940
 80037f4:	200006cc 	.word	0x200006cc
 80037f8:	20000760 	.word	0x20000760
 80037fc:	48000c00 	.word	0x48000c00
 8003800:	48001000 	.word	0x48001000
 8003804:	0801c7b0 	.word	0x0801c7b0
 8003808:	48000800 	.word	0x48000800
 800380c:	2000061c 	.word	0x2000061c
 8003810:	0801c7b8 	.word	0x0801c7b8
 8003814:	0801c7cc 	.word	0x0801c7cc
 8003818:	0801c7d8 	.word	0x0801c7d8
 800381c:	0801c7e0 	.word	0x0801c7e0
 8003820:	08002ad5 	.word	0x08002ad5
 8003824:	08002b51 	.word	0x08002b51
 8003828:	08002ba1 	.word	0x08002ba1
 800382c:	08002c05 	.word	0x08002c05
	gyro_io.GetTick = BSP_GetTick;
 8003830:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003834:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003838:	4a16      	ldr	r2, [pc, #88]	; (8003894 <main+0x3ec>)
 800383a:	619a      	str	r2, [r3, #24]
	gyro_io.Delay = HAL_Delay;
 800383c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003840:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <main+0x3f0>)
 8003846:	61da      	str	r2, [r3, #28]

	// Initialize gyro
	LSM6DSO_RegisterBusIO(&gyro_device, &gyro_io);
 8003848:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800384c:	3a04      	subs	r2, #4
 800384e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003852:	3b1c      	subs	r3, #28
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f001 feb6 	bl	80055c8 <LSM6DSO_RegisterBusIO>
	gyro_result_init = LSM6DSO_Init(&gyro_device);
 800385c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003860:	3b1c      	subs	r3, #28
 8003862:	4618      	mov	r0, r3
 8003864:	f001 ff1a 	bl	800569c <LSM6DSO_Init>
 8003868:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800386c:	f103 0318 	add.w	r3, r3, #24
 8003870:	6018      	str	r0, [r3, #0]

	// Check and print gyro device status
	// Comment this out once build finished
	if (gyro_result_init == 0) {while (CDC_Transmit_FS ("GYRO OK!\n", 9) == USBD_BUSY);}
 8003872:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003876:	f103 0318 	add.w	r3, r3, #24
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <main+0x3f8>
 8003880:	bf00      	nop
 8003882:	2109      	movs	r1, #9
 8003884:	4805      	ldr	r0, [pc, #20]	; (800389c <main+0x3f4>)
 8003886:	f015 f9af 	bl	8018be8 <CDC_Transmit_FS>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d0f8      	beq.n	8003882 <main+0x3da>
 8003890:	e00e      	b.n	80038b0 <main+0x408>
 8003892:	bf00      	nop
 8003894:	08002c69 	.word	0x08002c69
 8003898:	08007001 	.word	0x08007001
 800389c:	0801c7f4 	.word	0x0801c7f4
	else {while (CDC_Transmit_FS ("GYRO NOT OK!\n", 13) == USBD_BUSY);}
 80038a0:	bf00      	nop
 80038a2:	210d      	movs	r1, #13
 80038a4:	48cb      	ldr	r0, [pc, #812]	; (8003bd4 <main+0x72c>)
 80038a6:	f015 f99f 	bl	8018be8 <CDC_Transmit_FS>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d0f8      	beq.n	80038a2 <main+0x3fa>

	// Enabling translational and angular acceleration measurements
	LSM6DSO_ACC_Enable(&gyro_device);
 80038b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80038b4:	3b1c      	subs	r3, #28
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 ff65 	bl	8005786 <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&gyro_device);
 80038bc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80038c0:	3b1c      	subs	r3, #28
 80038c2:	4618      	mov	r0, r3
 80038c4:	f002 f9d1 	bl	8005c6a <LSM6DSO_GYRO_Enable>
	LSM6DSO_ACC_SetOutputDataRate(&gyro_device, 104.0f);
 80038c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80038cc:	3b1c      	subs	r3, #28
 80038ce:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8003bd8 <main+0x730>
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 ffc2 	bl	800585c <LSM6DSO_ACC_SetOutputDataRate>
	LSM6DSO_GYRO_SetOutputDataRate(&gyro_device, 104.0f);
 80038d8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80038dc:	3b1c      	subs	r3, #28
 80038de:	ed9f 0abe 	vldr	s0, [pc, #760]	; 8003bd8 <main+0x730>
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fa66 	bl	8005db4 <LSM6DSO_GYRO_SetOutputDataRate>
	/// BMP Init /////////////////////////////////////////////////////////////////////////////////
	/* Interface reference is given as a parameter
	 *         For I2C : BMP3_I2C_INTF
	 *         For SPI : BMP3_SPI_INTF
	 */
	bmp_result = bmp3_interface_init(&bmp_device, BMP3_I2C_INTF);
 80038e8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff f846 	bl	8002980 <bmp3_interface_init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038fa:	f102 0217 	add.w	r2, r2, #23
 80038fe:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_interface_init", bmp_result);
 8003900:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003904:	f103 0317 	add.w	r3, r3, #23
 8003908:	f993 3000 	ldrsb.w	r3, [r3]
 800390c:	4619      	mov	r1, r3
 800390e:	48b3      	ldr	r0, [pc, #716]	; (8003bdc <main+0x734>)
 8003910:	f7fe ffd6 	bl	80028c0 <bmp3_check_rslt>

	bmp_result = bmp3_init(&bmp_device);
 8003914:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fb2f 	bl	8000f7c <bmp3_init>
 800391e:	4603      	mov	r3, r0
 8003920:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003924:	f102 0217 	add.w	r2, r2, #23
 8003928:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_init", bmp_result);
 800392a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800392e:	f103 0317 	add.w	r3, r3, #23
 8003932:	f993 3000 	ldrsb.w	r3, [r3]
 8003936:	4619      	mov	r1, r3
 8003938:	48a9      	ldr	r0, [pc, #676]	; (8003be0 <main+0x738>)
 800393a:	f7fe ffc1 	bl	80028c0 <bmp3_check_rslt>


	bmp_settings.int_settings.drdy_en = BMP3_DISABLE;
 800393e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003942:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003946:	2200      	movs	r2, #0
 8003948:	729a      	strb	r2, [r3, #10]
	bmp_settings.int_settings.latch = BMP3_ENABLE;
 800394a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800394e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003952:	2201      	movs	r2, #1
 8003954:	725a      	strb	r2, [r3, #9]
	bmp_settings.press_en = BMP3_ENABLE;
 8003956:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800395a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800395e:	2201      	movs	r2, #1
 8003960:	705a      	strb	r2, [r3, #1]
	bmp_settings.temp_en = BMP3_ENABLE;
 8003962:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003966:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800396a:	2201      	movs	r2, #1
 800396c:	709a      	strb	r2, [r3, #2]

	bmp_settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 800396e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003972:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003976:	2202      	movs	r2, #2
 8003978:	70da      	strb	r2, [r3, #3]
	bmp_settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 800397a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800397e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003982:	2200      	movs	r2, #0
 8003984:	711a      	strb	r2, [r3, #4]
	bmp_settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8003986:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800398a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800398e:	2201      	movs	r2, #1
 8003990:	719a      	strb	r2, [r3, #6]

	bmp_settings_select = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_DRDY_EN;
 8003992:	23be      	movs	r3, #190	; 0xbe
 8003994:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003998:	f102 0214 	add.w	r2, r2, #20
 800399c:	8013      	strh	r3, [r2, #0]

	bmp_result = bmp3_set_sensor_settings(bmp_settings_select, &bmp_settings, &bmp_device);
 800399e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80039a2:	f103 0314 	add.w	r3, r3, #20
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80039ac:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd fc4b 	bl	800124c <bmp3_set_sensor_settings>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80039bc:	f102 0217 	add.w	r2, r2, #23
 80039c0:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_set_sensor_settings", bmp_result);
 80039c2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80039c6:	f103 0317 	add.w	r3, r3, #23
 80039ca:	f993 3000 	ldrsb.w	r3, [r3]
 80039ce:	4619      	mov	r1, r3
 80039d0:	4884      	ldr	r0, [pc, #528]	; (8003be4 <main+0x73c>)
 80039d2:	f7fe ff75 	bl	80028c0 <bmp3_check_rslt>

	// Comment this out once build finished
	if (bmp_result == BMP3_OK) {
 80039d6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80039da:	f103 0317 	add.w	r3, r3, #23
 80039de:	f993 3000 	ldrsb.w	r3, [r3]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d107      	bne.n	80039f6 <main+0x54e>
		while (CDC_Transmit_FS ("BMP OK!\n", 8) == USBD_BUSY);
 80039e6:	bf00      	nop
 80039e8:	2108      	movs	r1, #8
 80039ea:	487f      	ldr	r0, [pc, #508]	; (8003be8 <main+0x740>)
 80039ec:	f015 f8fc 	bl	8018be8 <CDC_Transmit_FS>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d0f8      	beq.n	80039e8 <main+0x540>


	/// GPS Init /////////////////////////////////////////////////////////////////////////////////

	// Setting the buffer for UART2 data reading
	gps_rxBuffer = gps_rxBuffer1;
 80039f6:	4b7d      	ldr	r3, [pc, #500]	; (8003bec <main+0x744>)
 80039f8:	4a7d      	ldr	r2, [pc, #500]	; (8003bf0 <main+0x748>)
 80039fa:	601a      	str	r2, [r3, #0]
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 80039fc:	4b7d      	ldr	r3, [pc, #500]	; (8003bf4 <main+0x74c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003a04:	f102 0204 	add.w	r2, r2, #4
 8003a08:	6013      	str	r3, [r2, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003a0e:	f103 0304 	add.w	r3, r3, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003a1c:	6013      	str	r3, [r2, #0]
   return(result);
 8003a1e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003a2c:	f102 0210 	add.w	r2, r2, #16
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <main+0x74c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003a3c:	f103 0310 	add.w	r3, r3, #16
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f507 519b 	add.w	r1, r7, #4960	; 0x1360
 8003a46:	f101 0110 	add.w	r1, r1, #16
 8003a4a:	600b      	str	r3, [r1, #0]
 8003a4c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003a50:	f103 030c 	add.w	r3, r3, #12
 8003a54:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003a5a:	f103 030c 	add.w	r3, r3, #12
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003a64:	f103 0310 	add.w	r3, r3, #16
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003a72:	f102 0208 	add.w	r2, r2, #8
 8003a76:	6013      	str	r3, [r2, #0]
   return(result);
 8003a78:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003a7c:	f103 0308 	add.w	r3, r3, #8
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ba      	bne.n	80039fc <main+0x554>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8003a86:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <main+0x74c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003a8e:	f102 0210 	add.w	r2, r2, #16
 8003a92:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003a98:	f103 0310 	add.w	r3, r3, #16
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003aa6:	f102 020c 	add.w	r2, r2, #12
 8003aaa:	6013      	str	r3, [r2, #0]
   return(result);
 8003aac:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003ab0:	f103 030c 	add.w	r3, r3, #12
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003abe:	f102 020c 	add.w	r2, r2, #12
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b4b      	ldr	r3, [pc, #300]	; (8003bf4 <main+0x74c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003ace:	f103 030c 	add.w	r3, r3, #12
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8003ad8:	f101 011c 	add.w	r1, r1, #28
 8003adc:	600b      	str	r3, [r1, #0]
 8003ade:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003ae2:	f103 0318 	add.w	r3, r3, #24
 8003ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003aec:	f103 0318 	add.w	r3, r3, #24
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003af6:	f103 031c 	add.w	r3, r3, #28
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003b04:	f102 0214 	add.w	r2, r2, #20
 8003b08:	6013      	str	r3, [r2, #0]
   return(result);
 8003b0a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b0e:	f103 0314 	add.w	r3, r3, #20
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1b6      	bne.n	8003a86 <main+0x5de>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <main+0x74c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8003b20:	f102 021c 	add.w	r2, r2, #28
 8003b24:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003b2a:	f103 031c 	add.w	r3, r3, #28
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8003b38:	f102 0218 	add.w	r2, r2, #24
 8003b3c:	6013      	str	r3, [r2, #0]
   return(result);
 8003b3e:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003b42:	f103 0318 	add.w	r3, r3, #24
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003b50:	f102 0208 	add.w	r2, r2, #8
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <main+0x74c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003b60:	f103 0308 	add.w	r3, r3, #8
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8003b6a:	f101 0108 	add.w	r1, r1, #8
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b74:	f103 0304 	add.w	r3, r3, #4
 8003b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b7e:	f103 0304 	add.w	r3, r3, #4
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b88:	f103 0308 	add.w	r3, r3, #8
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003b96:	6013      	str	r3, [r2, #0]
   return(result);
 8003b98:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ba      	bne.n	8003b18 <main+0x670>
//
//			}
//		}
//	}
//	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	sd_status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	4914      	ldr	r1, [pc, #80]	; (8003bf8 <main+0x750>)
 8003ba6:	4815      	ldr	r0, [pc, #84]	; (8003bfc <main+0x754>)
 8003ba8:	f014 fafc 	bl	80181a4 <f_mount>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bb2:	f102 021f 	add.w	r2, r2, #31
 8003bb6:	7013      	strb	r3, [r2, #0]
	// Comment this out once build finished
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(CARD_DETECT_GPIO_Port, CARD_DETECT_Pin);
 8003bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc0:	f004 f906 	bl	8007dd0 <HAL_GPIO_ReadPin>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bca:	f102 0207 	add.w	r2, r2, #7
 8003bce:	7013      	strb	r3, [r2, #0]
	while(sd_status != FR_OK)
 8003bd0:	e029      	b.n	8003c26 <main+0x77e>
 8003bd2:	bf00      	nop
 8003bd4:	0801c800 	.word	0x0801c800
 8003bd8:	42d00000 	.word	0x42d00000
 8003bdc:	0801c810 	.word	0x0801c810
 8003be0:	0801c824 	.word	0x0801c824
 8003be4:	0801c830 	.word	0x0801c830
 8003be8:	0801c84c 	.word	0x0801c84c
 8003bec:	20000ef4 	.word	0x20000ef4
 8003bf0:	200008b4 	.word	0x200008b4
 8003bf4:	20000760 	.word	0x20000760
 8003bf8:	20000f0c 	.word	0x20000f0c
 8003bfc:	20000f10 	.word	0x20000f10
	{
		while (CDC_Transmit_FS ("Mount failed!\n", 14) == USBD_BUSY);
 8003c00:	bf00      	nop
 8003c02:	210e      	movs	r1, #14
 8003c04:	483a      	ldr	r0, [pc, #232]	; (8003cf0 <main+0x848>)
 8003c06:	f014 ffef 	bl	8018be8 <CDC_Transmit_FS>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d0f8      	beq.n	8003c02 <main+0x75a>

		//while (CDC_Transmit_FS (, 14) == USBD_BUSY);
		sd_status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8003c10:	2201      	movs	r2, #1
 8003c12:	4938      	ldr	r1, [pc, #224]	; (8003cf4 <main+0x84c>)
 8003c14:	4838      	ldr	r0, [pc, #224]	; (8003cf8 <main+0x850>)
 8003c16:	f014 fac5 	bl	80181a4 <f_mount>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c20:	f102 021f 	add.w	r2, r2, #31
 8003c24:	7013      	strb	r3, [r2, #0]
	while(sd_status != FR_OK)
 8003c26:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003c2a:	f103 031f 	add.w	r3, r3, #31
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e5      	bne.n	8003c00 <main+0x758>
	}
	sd_status = f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE);
 8003c34:	2232      	movs	r2, #50	; 0x32
 8003c36:	4931      	ldr	r1, [pc, #196]	; (8003cfc <main+0x854>)
 8003c38:	4831      	ldr	r0, [pc, #196]	; (8003d00 <main+0x858>)
 8003c3a:	f014 faf9 	bl	8018230 <f_open>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c44:	f102 021f 	add.w	r2, r2, #31
 8003c48:	7013      	strb	r3, [r2, #0]
	if(sd_status != FR_OK)
 8003c4a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003c4e:	f103 031f 	add.w	r3, r3, #31
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <main+0x7c0>
	{
		while (CDC_Transmit_FS ("Open file failed!\n", 18) == USBD_BUSY);
 8003c58:	bf00      	nop
 8003c5a:	2112      	movs	r1, #18
 8003c5c:	4829      	ldr	r0, [pc, #164]	; (8003d04 <main+0x85c>)
 8003c5e:	f014 ffc3 	bl	8018be8 <CDC_Transmit_FS>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d0f8      	beq.n	8003c5a <main+0x7b2>


	/// System timers Init /////////////////////////////////////////////////////////////////////////////////

	// Start timers
	HAL_TIM_Base_Start_IT(&htim17);
 8003c68:	4827      	ldr	r0, [pc, #156]	; (8003d08 <main+0x860>)
 8003c6a:	f00b ffd7 	bl	800fc1c <HAL_TIM_Base_Start_IT>
	tick = 600;
 8003c6e:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <main+0x864>)
 8003c70:	2258      	movs	r2, #88	; 0x58
 8003c72:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003c74:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <main+0x868>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]


	/// I2C scanning /////////////////////////////////////////////////////////////////////////////////
	// Comment this out once build finished
	//-[ I2C Bus Scanning ]-
	uint8_t i = 0, ret;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003c80:	f102 020b 	add.w	r2, r2, #11
 8003c84:	7013      	strb	r3, [r2, #0]
	for(i = 1; i < 128; i++)
 8003c86:	2301      	movs	r3, #1
 8003c88:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003c8c:	f102 020b 	add.w	r2, r2, #11
 8003c90:	7013      	strb	r3, [r2, #0]
 8003c92:	e06f      	b.n	8003d74 <main+0x8cc>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8003c94:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003c98:	f103 030b 	add.w	r3, r3, #11
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	b299      	uxth	r1, r3
 8003ca4:	2305      	movs	r3, #5
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	481a      	ldr	r0, [pc, #104]	; (8003d14 <main+0x86c>)
 8003caa:	f004 fde1 	bl	8008870 <HAL_I2C_IsDeviceReady>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003cb4:	f102 0216 	add.w	r2, r2, #22
 8003cb8:	7013      	strb	r3, [r2, #0]
		if (ret != HAL_OK) // No ACK Received At That Address
 8003cba:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003cbe:	f103 0316 	add.w	r3, r3, #22
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d027      	beq.n	8003d18 <main+0x870>
		{
			while (CDC_Transmit_FS (i2c2check_space, strlen(i2c2check_space)) == USBD_BUSY);
 8003cc8:	bf00      	nop
 8003cca:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fc fa95 	bl	8000200 <strlen>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003cde:	3b04      	subs	r3, #4
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f014 ff80 	bl	8018be8 <CDC_Transmit_FS>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d0ed      	beq.n	8003cca <main+0x822>
 8003cee:	e036      	b.n	8003d5e <main+0x8b6>
 8003cf0:	0801c858 	.word	0x0801c858
 8003cf4:	20000f0c 	.word	0x20000f0c
 8003cf8:	20000f10 	.word	0x20000f10
 8003cfc:	0801c868 	.word	0x0801c868
 8003d00:	20001140 	.word	0x20001140
 8003d04:	0801c874 	.word	0x0801c874
 8003d08:	20000680 	.word	0x20000680
 8003d0c:	20000f00 	.word	0x20000f00
 8003d10:	20000f01 	.word	0x20000f01
 8003d14:	200004f0 	.word	0x200004f0
		}
		else if(ret == HAL_OK)
 8003d18:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003d1c:	f103 0316 	add.w	r3, r3, #22
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11b      	bne.n	8003d5e <main+0x8b6>
		{
			sprintf(i2c2check_active_address, "0x%X", i);
 8003d26:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003d2a:	f103 030b 	add.w	r3, r3, #11
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003d34:	49d6      	ldr	r1, [pc, #856]	; (8004090 <main+0xbe8>)
 8003d36:	4618      	mov	r0, r3
 8003d38:	f016 fa40 	bl	801a1bc <siprintf>
			while (CDC_Transmit_FS (i2c2check_active_address, strlen(i2c2check_active_address)) == USBD_BUSY);
 8003d3c:	bf00      	nop
 8003d3e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fa5c 	bl	8000200 <strlen>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f014 ff48 	bl	8018be8 <CDC_Transmit_FS>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d0ef      	beq.n	8003d3e <main+0x896>
	for(i = 1; i < 128; i++)
 8003d5e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003d62:	f103 030b 	add.w	r3, r3, #11
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003d6e:	f102 020b 	add.w	r2, r2, #11
 8003d72:	7013      	strb	r3, [r2, #0]
 8003d74:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003d78:	f103 030b 	add.w	r3, r3, #11
 8003d7c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	da87      	bge.n	8003c94 <main+0x7ec>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	// Have a timer to break the USB loop in case of power cycle
	tick = 600;
 8003d84:	4bc3      	ldr	r3, [pc, #780]	; (8004094 <main+0xbec>)
 8003d86:	2258      	movs	r2, #88	; 0x58
 8003d88:	701a      	strb	r2, [r3, #0]

	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////

	while (0) {
 8003d8a:	bf00      	nop
			}
		}
	}


	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	48c2      	ldr	r0, [pc, #776]	; (8004098 <main+0xbf0>)
 8003d90:	f004 f84e 	bl	8007e30 <HAL_GPIO_TogglePin>
	// Reset timers before main program
	tick = 0;
 8003d94:	4bbf      	ldr	r3, [pc, #764]	; (8004094 <main+0xbec>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003d9a:	4bc0      	ldr	r3, [pc, #768]	; (800409c <main+0xbf4>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
	tickSync = 0;
 8003da0:	4bbf      	ldr	r3, [pc, #764]	; (80040a0 <main+0xbf8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	48bb      	ldr	r0, [pc, #748]	; (8004098 <main+0xbf0>)
 8003daa:	f004 f841 	bl	8007e30 <HAL_GPIO_TogglePin>
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	while (1) {

		// Flush SD card every minute
		if (tickSync == 0) {
 8003dae:	4bbc      	ldr	r3, [pc, #752]	; (80040a0 <main+0xbf8>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11a      	bne.n	8003dee <main+0x946>
			tickSync = 600;
 8003db8:	4bb9      	ldr	r3, [pc, #740]	; (80040a0 <main+0xbf8>)
 8003dba:	2258      	movs	r2, #88	; 0x58
 8003dbc:	701a      	strb	r2, [r3, #0]
			sd_status = f_sync(&SDFile);
 8003dbe:	48b9      	ldr	r0, [pc, #740]	; (80040a4 <main+0xbfc>)
 8003dc0:	f014 fd69 	bl	8018896 <f_sync>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003dca:	f102 021f 	add.w	r2, r2, #31
 8003dce:	7013      	strb	r3, [r2, #0]
			// Comment this out once build finished
			if(sd_status != FR_OK)
 8003dd0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003dd4:	f103 031f 	add.w	r3, r3, #31
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <main+0x946>
			{
				while (CDC_Transmit_FS ("Sync failed!\n", 14) == USBD_BUSY);
 8003dde:	bf00      	nop
 8003de0:	210e      	movs	r1, #14
 8003de2:	48b1      	ldr	r0, [pc, #708]	; (80040a8 <main+0xc00>)
 8003de4:	f014 ff00 	bl	8018be8 <CDC_Transmit_FS>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d0f8      	beq.n	8003de0 <main+0x938>

		}


		// Read temperature, pressure and gyro data every second and send everything to SD and lora every second
		if (tick == 0) {
 8003dee:	4ba9      	ldr	r3, [pc, #676]	; (8004094 <main+0xbec>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 8222 	bne.w	800423e <main+0xd96>
			// Start timer again
			tick = 10;
 8003dfa:	4ba6      	ldr	r3, [pc, #664]	; (8004094 <main+0xbec>)
 8003dfc:	220a      	movs	r2, #10
 8003dfe:	701a      	strb	r2, [r3, #0]

			/// TIMER /////////////////////////////////////////////////////////////////////////////////
			// Print current time
			sprintf(system_time_buffer, "t:%.0f\n", system_time_counter);
 8003e00:	f107 0020 	add.w	r0, r7, #32
 8003e04:	3810      	subs	r0, #16
 8003e06:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e0a:	f103 0318 	add.w	r3, r3, #24
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	49a6      	ldr	r1, [pc, #664]	; (80040ac <main+0xc04>)
 8003e14:	f016 f9d2 	bl	801a1bc <siprintf>

			//while (CDC_Transmit_FS (system_time_buffer, strlen(system_time_buffer)) == USBD_BUSY);
			add_to_buffer(&data_buffer, &system_time_buffer, strlen(system_time_buffer));
 8003e18:	f107 0320 	add.w	r3, r7, #32
 8003e1c:	3b10      	subs	r3, #16
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fc f9ee 	bl	8000200 <strlen>
 8003e24:	4603      	mov	r3, r0
 8003e26:	461a      	mov	r2, r3
 8003e28:	f107 0320 	add.w	r3, r7, #32
 8003e2c:	3b10      	subs	r3, #16
 8003e2e:	f507 602c 	add.w	r0, r7, #2752	; 0xac0
 8003e32:	4619      	mov	r1, r3
 8003e34:	f7ff fb10 	bl	8003458 <add_to_buffer>

			system_time_counter++;
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	4b9c      	ldr	r3, [pc, #624]	; (80040b0 <main+0xc08>)
 8003e3e:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8003e42:	f101 0118 	add.w	r1, r1, #24
 8003e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e4a:	f7fc fa37 	bl	80002bc <__adddf3>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8003e56:	f101 0118 	add.w	r1, r1, #24
 8003e5a:	e9c1 2300 	strd	r2, r3, [r1]

			// Toggle LED on board to indicate succesful timer management
			HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003e5e:	2110      	movs	r1, #16
 8003e60:	488d      	ldr	r0, [pc, #564]	; (8004098 <main+0xbf0>)
 8003e62:	f003 ffe5 	bl	8007e30 <HAL_GPIO_TogglePin>


			/// BMP  /////////////////////////////////////////////////////////////////////////////////
			// bmp needed to be forced for this kind of data reading, as now FIFO buffers or dready interrupts are being used
			bmp_settings.op_mode = BMP3_MODE_FORCED;
 8003e66:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003e6a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
			bmp_result = bmp3_set_op_mode(&bmp_settings, &bmp_device);
 8003e72:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8003e76:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd faa8 	bl	80013d2 <bmp3_set_op_mode>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e88:	f102 0217 	add.w	r2, r2, #23
 8003e8c:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_set_op_mode", bmp_result);
 8003e8e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003e92:	f103 0317 	add.w	r3, r3, #23
 8003e96:	f993 3000 	ldrsb.w	r3, [r3]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4885      	ldr	r0, [pc, #532]	; (80040b4 <main+0xc0c>)
 8003e9e:	f7fe fd0f 	bl	80028c0 <bmp3_check_rslt>
			 * BMP3_TEMP       : To read only temperature data
			 * BMP3_PRESS      : To read only pressure data
			 */

			// Check sensor measurements
			bmp_result = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmp_data, &bmp_device);
 8003ea2:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8003ea6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003eaa:	3b10      	subs	r3, #16
 8003eac:	4619      	mov	r1, r3
 8003eae:	2003      	movs	r0, #3
 8003eb0:	f7fd fb03 	bl	80014ba <bmp3_get_sensor_data>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003eba:	f102 0217 	add.w	r2, r2, #23
 8003ebe:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_get_sensor_data", bmp_result);
 8003ec0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003ec4:	f103 0317 	add.w	r3, r3, #23
 8003ec8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	487a      	ldr	r0, [pc, #488]	; (80040b8 <main+0xc10>)
 8003ed0:	f7fe fcf6 	bl	80028c0 <bmp3_check_rslt>

			// NOTE : Read status register again to clear data ready interrupt status
			bmp_result = bmp3_get_status(&bmp_status, &bmp_device);
 8003ed4:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8003ed8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003edc:	3b0c      	subs	r3, #12
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fd fa01 	bl	80012e8 <bmp3_get_status>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003eec:	f102 0217 	add.w	r2, r2, #23
 8003ef0:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_get_status", bmp_result);
 8003ef2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003ef6:	f103 0317 	add.w	r3, r3, #23
 8003efa:	f993 3000 	ldrsb.w	r3, [r3]
 8003efe:	4619      	mov	r1, r3
 8003f00:	486e      	ldr	r0, [pc, #440]	; (80040bc <main+0xc14>)
 8003f02:	f7fe fcdd 	bl	80028c0 <bmp3_check_rslt>

			// Print bmp measurements
			sprintf(bmp_temperature_buffer, "%.2f\n", bmp_data.temperature);
 8003f06:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003f0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8003f16:	3808      	subs	r0, #8
 8003f18:	4969      	ldr	r1, [pc, #420]	; (80040c0 <main+0xc18>)
 8003f1a:	f016 f94f 	bl	801a1bc <siprintf>
			sprintf(bmp_pressure_buffer, "%.2f\n", bmp_data.pressure);
 8003f1e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003f22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f2a:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 8003f2e:	3804      	subs	r0, #4
 8003f30:	4963      	ldr	r1, [pc, #396]	; (80040c0 <main+0xc18>)
 8003f32:	f016 f943 	bl	801a1bc <siprintf>

			add_to_buffer(&data_buffer, &bmp_temperature_buffer, strlen(bmp_temperature_buffer));
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	3b08      	subs	r3, #8
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc f95f 	bl	8000200 <strlen>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461a      	mov	r2, r3
 8003f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4a:	3b08      	subs	r3, #8
 8003f4c:	f507 602c 	add.w	r0, r7, #2752	; 0xac0
 8003f50:	4619      	mov	r1, r3
 8003f52:	f7ff fa81 	bl	8003458 <add_to_buffer>
			add_to_buffer(&data_buffer, &bmp_pressure_buffer, strlen(bmp_pressure_buffer));
 8003f56:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc f94f 	bl	8000200 <strlen>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f6a:	3b04      	subs	r3, #4
 8003f6c:	f507 602c 	add.w	r0, r7, #2752	; 0xac0
 8003f70:	4619      	mov	r1, r3
 8003f72:	f7ff fa71 	bl	8003458 <add_to_buffer>
			//while (CDC_Transmit_FS (bmp_pressure_buffer, strlen(bmp_pressure_buffer)) == USBD_BUSY);


			/// Gyro /////////////////////////////////////////////////////////////////////////////////
			// Read gyro acceleration and angular velocity data
			gyro_result_acceleration = LSM6DSO_ACC_GetAxes (&gyro_device, &gyro_acceleration_object);
 8003f76:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003f7a:	3a08      	subs	r2, #8
 8003f7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003f80:	3b1c      	subs	r3, #28
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 fe19 	bl	8005bbc <LSM6DSO_ACC_GetAxes>
 8003f8a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003f8e:	6018      	str	r0, [r3, #0]
			gyro_result_angularvel = LSM6DSO_GYRO_GetAxes (&gyro_device, &gyro_angularvel_object);
 8003f90:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003f94:	3a1c      	subs	r2, #28
 8003f96:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003f9a:	3b1c      	subs	r3, #28
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 ffb0 	bl	8005f04 <LSM6DSO_GYRO_GetAxes>
 8003fa4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003fa8:	f103 031c 	add.w	r3, r3, #28
 8003fac:	6018      	str	r0, [r3, #0]

			sprintf(gyro_acceleration_buffer, "%"PRId32",%"PRId32",%"PRId32"\n", gyro_acceleration_object.x, gyro_acceleration_object.y, gyro_acceleration_object.z);
 8003fae:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003fb2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003fbc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003fc6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8003fd0:	3810      	subs	r0, #16
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	493b      	ldr	r1, [pc, #236]	; (80040c4 <main+0xc1c>)
 8003fd8:	f016 f8f0 	bl	801a1bc <siprintf>
			sprintf(gyro_angularvel_buffer, "%"PRId32",%"PRId32",%"PRId32"\n", gyro_angularvel_object.x, gyro_angularvel_object.y, gyro_angularvel_object.z);
 8003fdc:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003fe0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003fea:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003ff4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8003ffe:	3804      	subs	r0, #4
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	460b      	mov	r3, r1
 8004004:	492f      	ldr	r1, [pc, #188]	; (80040c4 <main+0xc1c>)
 8004006:	f016 f8d9 	bl	801a1bc <siprintf>

			add_to_buffer(&data_buffer, &gyro_acceleration_buffer, strlen(gyro_acceleration_buffer));
 800400a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800400e:	3b10      	subs	r3, #16
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc f8f5 	bl	8000200 <strlen>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800401e:	3b10      	subs	r3, #16
 8004020:	f507 602c 	add.w	r0, r7, #2752	; 0xac0
 8004024:	4619      	mov	r1, r3
 8004026:	f7ff fa17 	bl	8003458 <add_to_buffer>
			add_to_buffer(&data_buffer, &gyro_angularvel_buffer, strlen(gyro_angularvel_buffer));
 800402a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800402e:	3b04      	subs	r3, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc f8e5 	bl	8000200 <strlen>
 8004036:	4603      	mov	r3, r0
 8004038:	461a      	mov	r2, r3
 800403a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800403e:	3b04      	subs	r3, #4
 8004040:	f507 602c 	add.w	r0, r7, #2752	; 0xac0
 8004044:	4619      	mov	r1, r3
 8004046:	f7ff fa07 	bl	8003458 <add_to_buffer>
//			}


			//add_to_buffer(&data_buffer, &gps_buffer, strlen(gps_buffer));
			char *token;
			char *gps_buffer_copy = strdup(gps_buffer);
 800404a:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800404e:	4618      	mov	r0, r3
 8004050:	f016 f8d4 	bl	801a1fc <strdup>
 8004054:	4603      	mov	r3, r0
 8004056:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800405a:	f102 0218 	add.w	r2, r2, #24
 800405e:	6013      	str	r3, [r2, #0]

			parser_i = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8004066:	6013      	str	r3, [r2, #0]
			token = strtok(strstr(gps_buffer_copy, "$GNGGA"), ",");
 8004068:	4917      	ldr	r1, [pc, #92]	; (80040c8 <main+0xc20>)
 800406a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800406e:	f103 0318 	add.w	r3, r3, #24
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f016 f8df 	bl	801a236 <strstr>
 8004078:	4603      	mov	r3, r0
 800407a:	4914      	ldr	r1, [pc, #80]	; (80040cc <main+0xc24>)
 800407c:	4618      	mov	r0, r3
 800407e:	f016 f8f1 	bl	801a264 <strtok>
 8004082:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004086:	f103 0304 	add.w	r3, r3, #4
 800408a:	6018      	str	r0, [r3, #0]
			while (token != NULL && parser_i < 10) {
 800408c:	e066      	b.n	800415c <main+0xcb4>
 800408e:	bf00      	nop
 8004090:	0801c888 	.word	0x0801c888
 8004094:	20000f00 	.word	0x20000f00
 8004098:	48000c00 	.word	0x48000c00
 800409c:	20000f01 	.word	0x20000f01
 80040a0:	20000f02 	.word	0x20000f02
 80040a4:	20001140 	.word	0x20001140
 80040a8:	0801c890 	.word	0x0801c890
 80040ac:	0801c8a0 	.word	0x0801c8a0
 80040b0:	3ff00000 	.word	0x3ff00000
 80040b4:	0801c8a8 	.word	0x0801c8a8
 80040b8:	0801c8bc 	.word	0x0801c8bc
 80040bc:	0801c8d4 	.word	0x0801c8d4
 80040c0:	0801c8e4 	.word	0x0801c8e4
 80040c4:	0801c8ec 	.word	0x0801c8ec
 80040c8:	0801c8fc 	.word	0x0801c8fc
 80040cc:	0801c904 	.word	0x0801c904
			    if ((parser_i == 1) || (parser_i == 2) || (parser_i == 4) || (parser_i == 9)) {
 80040d0:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d00e      	beq.n	80040f8 <main+0xc50>
 80040da:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d009      	beq.n	80040f8 <main+0xc50>
 80040e4:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d004      	beq.n	80040f8 <main+0xc50>
 80040ee:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d121      	bne.n	800413c <main+0xc94>
			        add_to_buffer(&data_buffer, token, strlen(token));
 80040f8:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80040fc:	f103 0304 	add.w	r3, r3, #4
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	f7fc f87d 	bl	8000200 <strlen>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800410e:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8004112:	f101 0104 	add.w	r1, r1, #4
 8004116:	6809      	ldr	r1, [r1, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff f99d 	bl	8003458 <add_to_buffer>
			        strcat(data_buffer, ",");
 800411e:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc f86c 	bl	8000200 <strlen>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004130:	4413      	add	r3, r2
 8004132:	495a      	ldr	r1, [pc, #360]	; (800429c <main+0xdf4>)
 8004134:	461a      	mov	r2, r3
 8004136:	460b      	mov	r3, r1
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	8013      	strh	r3, [r2, #0]
			    }
			    token = strtok(NULL, ",");
 800413c:	4957      	ldr	r1, [pc, #348]	; (800429c <main+0xdf4>)
 800413e:	2000      	movs	r0, #0
 8004140:	f016 f890 	bl	801a264 <strtok>
 8004144:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004148:	f103 0304 	add.w	r3, r3, #4
 800414c:	6018      	str	r0, [r3, #0]
			    parser_i++;
 800414e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 800415a:	6013      	str	r3, [r2, #0]
			while (token != NULL && parser_i < 10) {
 800415c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004160:	f103 0304 	add.w	r3, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <main+0xccc>
 800416a:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b09      	cmp	r3, #9
 8004172:	ddad      	ble.n	80040d0 <main+0xc28>
			}
			strcat(data_buffer, "\n");
 8004174:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc f841 	bl	8000200 <strlen>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004186:	4413      	add	r3, r2
 8004188:	4945      	ldr	r1, [pc, #276]	; (80042a0 <main+0xdf8>)
 800418a:	461a      	mov	r2, r3
 800418c:	460b      	mov	r3, r1
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	8013      	strh	r3, [r2, #0]

			free(gps_buffer_copy); // Free the memory allocated for the copy
 8004192:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8004196:	f103 0318 	add.w	r3, r3, #24
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	f015 fa7e 	bl	801969c <free>
			free(token);
 80041a0:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80041a4:	f103 0304 	add.w	r3, r3, #4
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	f015 fa77 	bl	801969c <free>

			gps_buffer[0] = '\0';
 80041ae:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80041b2:	f6a3 43e8 	subw	r3, r3, #3304	; 0xce8
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]


			/// DATA RECORDING /////////////////////////////////////////////////////////////////////////////////
			//write gps data to SD
			//if (sd_status == FR_OK){
			sd_result_write = f_write(&SDFile, data_buffer, strlen((char *)data_buffer), (void *)&sd_err_byteswritten);
 80041ba:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f81e 	bl	8000200 <strlen>
 80041c4:	4602      	mov	r2, r0
 80041c6:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80041ca:	f103 0314 	add.w	r3, r3, #20
 80041ce:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 80041d2:	4834      	ldr	r0, [pc, #208]	; (80042a4 <main+0xdfc>)
 80041d4:	f014 f9ea 	bl	80185ac <f_write>
 80041d8:	4603      	mov	r3, r0
 80041da:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80041de:	f102 0217 	add.w	r2, r2, #23
 80041e2:	7013      	strb	r3, [r2, #0]
			//}
			// Sendgps data to LORA
			if (lora_res == LORA_OK) {
 80041e4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80041e8:	f103 031d 	add.w	r3, r3, #29
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10e      	bne.n	8004210 <main+0xd68>
				lora_send_packet(&lora, data_buffer, strlen(data_buffer));
 80041f2:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc f802 	bl	8000200 <strlen>
 80041fc:	4603      	mov	r3, r0
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8004204:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004208:	3b1c      	subs	r3, #28
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f8a5 	bl	800335a <lora_send_packet>
			}

			// Comment this out once build finished
			while (CDC_Transmit_FS (data_buffer, strlen(data_buffer)) == USBD_BUSY);
 8004210:	bf00      	nop
 8004212:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004216:	4618      	mov	r0, r3
 8004218:	f7fb fff2 	bl	8000200 <strlen>
 800421c:	4603      	mov	r3, r0
 800421e:	b29a      	uxth	r2, r3
 8004220:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f014 fcde 	bl	8018be8 <CDC_Transmit_FS>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d0ef      	beq.n	8004212 <main+0xd6a>
			data_buffer[0] = '\0';
 8004232:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004236:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]

		}

		/// GPS /////////////////////////////////////////////////////////////////////////////////
		// Read GPS data whenever UART interrupt raises gps_data_ready flag
		if (gps_data_ready) {
 800423e:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <main+0xe00>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f43f adb3 	beq.w	8003dae <main+0x906>
			// Choose the buffer from the two data buffers that is not currently being written into and print it
			if (gps_rxBuffer == gps_rxBuffer1) {
 8004248:	4b18      	ldr	r3, [pc, #96]	; (80042ac <main+0xe04>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <main+0xe08>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10b      	bne.n	800426a <main+0xdc2>
				//while (CDC_Transmit_FS (gps_rxBuffer2, strlen(gps_rxBuffer2)) == USBD_BUSY);
				add_to_buffer(&gps_buffer, &gps_rxBuffer2, strlen(gps_rxBuffer2));
 8004252:	4818      	ldr	r0, [pc, #96]	; (80042b4 <main+0xe0c>)
 8004254:	f7fb ffd4 	bl	8000200 <strlen>
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8004260:	4914      	ldr	r1, [pc, #80]	; (80042b4 <main+0xe0c>)
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff f8f8 	bl	8003458 <add_to_buffer>
 8004268:	e00a      	b.n	8004280 <main+0xdd8>

			}
			else {
				//while (CDC_Transmit_FS (gps_rxBuffer1, strlen(gps_rxBuffer1)) == USBD_BUSY);
				add_to_buffer(&gps_buffer, &gps_rxBuffer1, strlen(gps_rxBuffer1));
 800426a:	4811      	ldr	r0, [pc, #68]	; (80042b0 <main+0xe08>)
 800426c:	f7fb ffc8 	bl	8000200 <strlen>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8004278:	490d      	ldr	r1, [pc, #52]	; (80042b0 <main+0xe08>)
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff f8ec 	bl	8003458 <add_to_buffer>
			}

			// Toggle flags to allow for buffer swapping and next data batch sending
			gps_data_ready ^= 1;
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <main+0xe00>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f083 0301 	eor.w	r3, r3, #1
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <main+0xe00>)
 800428a:	6013      	str	r3, [r2, #0]
			gps_send_ready |= 1;
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <main+0xe10>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <main+0xe10>)
 8004296:	6013      	str	r3, [r2, #0]
		if (tickSync == 0) {
 8004298:	e589      	b.n	8003dae <main+0x906>
 800429a:	bf00      	nop
 800429c:	0801c904 	.word	0x0801c904
 80042a0:	0801c908 	.word	0x0801c908
 80042a4:	20001140 	.word	0x20001140
 80042a8:	20000efc 	.word	0x20000efc
 80042ac:	20000ef4 	.word	0x20000ef4
 80042b0:	200008b4 	.word	0x200008b4
 80042b4:	20000bd4 	.word	0x20000bd4
 80042b8:	20000000 	.word	0x20000000

080042bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b096      	sub	sp, #88	; 0x58
 80042c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042c2:	f107 0314 	add.w	r3, r7, #20
 80042c6:	2244      	movs	r2, #68	; 0x44
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f015 f9fc 	bl	80196c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042d0:	463b      	mov	r3, r7
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	60da      	str	r2, [r3, #12]
 80042dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80042de:	2000      	movs	r0, #0
 80042e0:	f006 f98e 	bl	800a600 <HAL_PWREx_ControlVoltageScaling>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80042ea:	f000 fb19 	bl	8004920 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80042ee:	2321      	movs	r3, #33	; 0x21
 80042f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80042f8:	2301      	movs	r3, #1
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042fc:	2302      	movs	r3, #2
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004300:	2303      	movs	r3, #3
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004304:	2301      	movs	r3, #1
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8004308:	231e      	movs	r3, #30
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800430c:	2302      	movs	r3, #2
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004310:	2302      	movs	r3, #2
 8004312:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004314:	2302      	movs	r3, #2
 8004316:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4618      	mov	r0, r3
 800431e:	f006 fa23 	bl	800a768 <HAL_RCC_OscConfig>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8004328:	f000 fafa 	bl	8004920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800432c:	230f      	movs	r3, #15
 800432e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004330:	2303      	movs	r3, #3
 8004332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004340:	463b      	mov	r3, r7
 8004342:	2105      	movs	r1, #5
 8004344:	4618      	mov	r0, r3
 8004346:	f006 fe29 	bl	800af9c <HAL_RCC_ClockConfig>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004350:	f000 fae6 	bl	8004920 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004354:	f007 f820 	bl	800b398 <HAL_RCC_EnableCSS>
}
 8004358:	bf00      	nop
 800435a:	3758      	adds	r7, #88	; 0x58
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	2100      	movs	r1, #0
 8004368:	201a      	movs	r0, #26
 800436a:	f002 ff48 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800436e:	201a      	movs	r0, #26
 8004370:	f002 ff61 	bl	8007236 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004374:	2200      	movs	r2, #0
 8004376:	2100      	movs	r1, #0
 8004378:	2026      	movs	r0, #38	; 0x26
 800437a:	f002 ff40 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800437e:	2026      	movs	r0, #38	; 0x26
 8004380:	f002 ff59 	bl	8007236 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004384:	2200      	movs	r2, #0
 8004386:	2100      	movs	r1, #0
 8004388:	2025      	movs	r0, #37	; 0x25
 800438a:	f002 ff38 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800438e:	2025      	movs	r0, #37	; 0x25
 8004390:	f002 ff51 	bl	8007236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004394:	2200      	movs	r2, #0
 8004396:	2100      	movs	r1, #0
 8004398:	200b      	movs	r0, #11
 800439a:	f002 ff30 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800439e:	200b      	movs	r0, #11
 80043a0:	f002 ff49 	bl	8007236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80043a4:	2200      	movs	r2, #0
 80043a6:	2100      	movs	r1, #0
 80043a8:	200c      	movs	r0, #12
 80043aa:	f002 ff28 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80043ae:	200c      	movs	r0, #12
 80043b0:	f002 ff41 	bl	8007236 <HAL_NVIC_EnableIRQ>
}
 80043b4:	bf00      	nop
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <MX_I2C1_Init+0x74>)
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <MX_I2C1_Init+0x78>)
 80043c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80043c2:	4b1a      	ldr	r3, [pc, #104]	; (800442c <MX_I2C1_Init+0x74>)
 80043c4:	4a1b      	ldr	r2, [pc, #108]	; (8004434 <MX_I2C1_Init+0x7c>)
 80043c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <MX_I2C1_Init+0x74>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043ce:	4b17      	ldr	r3, [pc, #92]	; (800442c <MX_I2C1_Init+0x74>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043d4:	4b15      	ldr	r3, [pc, #84]	; (800442c <MX_I2C1_Init+0x74>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <MX_I2C1_Init+0x74>)
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <MX_I2C1_Init+0x74>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <MX_I2C1_Init+0x74>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <MX_I2C1_Init+0x74>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043f2:	480e      	ldr	r0, [pc, #56]	; (800442c <MX_I2C1_Init+0x74>)
 80043f4:	f003 fd36 	bl	8007e64 <HAL_I2C_Init>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80043fe:	f000 fa8f 	bl	8004920 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004402:	2100      	movs	r1, #0
 8004404:	4809      	ldr	r0, [pc, #36]	; (800442c <MX_I2C1_Init+0x74>)
 8004406:	f004 fe91 	bl	800912c <HAL_I2CEx_ConfigAnalogFilter>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004410:	f000 fa86 	bl	8004920 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004414:	2100      	movs	r1, #0
 8004416:	4805      	ldr	r0, [pc, #20]	; (800442c <MX_I2C1_Init+0x74>)
 8004418:	f004 fed3 	bl	80091c2 <HAL_I2CEx_ConfigDigitalFilter>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004422:	f000 fa7d 	bl	8004920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000548 	.word	0x20000548
 8004430:	40005400 	.word	0x40005400
 8004434:	307075b1 	.word	0x307075b1

08004438 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800443c:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <MX_SDMMC1_SD_Init+0x3c>)
 800443e:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <MX_SDMMC1_SD_Init+0x40>)
 8004440:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <MX_SDMMC1_SD_Init+0x3c>)
 8004444:	2200      	movs	r2, #0
 8004446:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <MX_SDMMC1_SD_Init+0x3c>)
 800444a:	2200      	movs	r2, #0
 800444c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800444e:	4b09      	ldr	r3, [pc, #36]	; (8004474 <MX_SDMMC1_SD_Init+0x3c>)
 8004450:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004454:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <MX_SDMMC1_SD_Init+0x3c>)
 8004458:	2200      	movs	r2, #0
 800445a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <MX_SDMMC1_SD_Init+0x3c>)
 800445e:	2200      	movs	r2, #0
 8004460:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <MX_SDMMC1_SD_Init+0x3c>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	2000059c 	.word	0x2000059c
 8004478:	50062400 	.word	0x50062400

0800447c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <MX_SPI1_Init+0x74>)
 8004482:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <MX_SPI1_Init+0x78>)
 8004484:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <MX_SPI1_Init+0x74>)
 8004488:	f44f 7282 	mov.w	r2, #260	; 0x104
 800448c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800448e:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <MX_SPI1_Init+0x74>)
 8004490:	2200      	movs	r2, #0
 8004492:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <MX_SPI1_Init+0x74>)
 8004496:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800449a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <MX_SPI1_Init+0x74>)
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044a2:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044b2:	2228      	movs	r2, #40	; 0x28
 80044b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044be:	2200      	movs	r2, #0
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044ca:	2207      	movs	r2, #7
 80044cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044d6:	2208      	movs	r2, #8
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044da:	4805      	ldr	r0, [pc, #20]	; (80044f0 <MX_SPI1_Init+0x74>)
 80044dc:	f00a fa89 	bl	800e9f2 <HAL_SPI_Init>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80044e6:	f000 fa1b 	bl	8004920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000061c 	.word	0x2000061c
 80044f4:	40013000 	.word	0x40013000

080044f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b092      	sub	sp, #72	; 0x48
 80044fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	60da      	str	r2, [r3, #12]
 800450c:	611a      	str	r2, [r3, #16]
 800450e:	615a      	str	r2, [r3, #20]
 8004510:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004512:	463b      	mov	r3, r7
 8004514:	222c      	movs	r2, #44	; 0x2c
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f015 f8d5 	bl	80196c8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800451e:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <MX_TIM17_Init+0xe4>)
 8004520:	4a2f      	ldr	r2, [pc, #188]	; (80045e0 <MX_TIM17_Init+0xe8>)
 8004522:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8004524:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <MX_TIM17_Init+0xe4>)
 8004526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800452a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <MX_TIM17_Init+0xe4>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8004532:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <MX_TIM17_Init+0xe4>)
 8004534:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004538:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <MX_TIM17_Init+0xe4>)
 800453c:	2200      	movs	r2, #0
 800453e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <MX_TIM17_Init+0xe4>)
 8004542:	2200      	movs	r2, #0
 8004544:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004546:	4b25      	ldr	r3, [pc, #148]	; (80045dc <MX_TIM17_Init+0xe4>)
 8004548:	2280      	movs	r2, #128	; 0x80
 800454a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800454c:	4823      	ldr	r0, [pc, #140]	; (80045dc <MX_TIM17_Init+0xe4>)
 800454e:	f00b fb0d 	bl	800fb6c <HAL_TIM_Base_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8004558:	f000 f9e2 	bl	8004920 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800455c:	481f      	ldr	r0, [pc, #124]	; (80045dc <MX_TIM17_Init+0xe4>)
 800455e:	f00b fbcd 	bl	800fcfc <HAL_TIM_OC_Init>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8004568:	f000 f9da 	bl	8004920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800456c:	2300      	movs	r3, #0
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004574:	2300      	movs	r3, #0
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004578:	2300      	movs	r3, #0
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800458c:	2200      	movs	r2, #0
 800458e:	4619      	mov	r1, r3
 8004590:	4812      	ldr	r0, [pc, #72]	; (80045dc <MX_TIM17_Init+0xe4>)
 8004592:	f00b fd17 	bl	800ffc4 <HAL_TIM_OC_ConfigChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 800459c:	f000 f9c0 	bl	8004920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80045be:	463b      	mov	r3, r7
 80045c0:	4619      	mov	r1, r3
 80045c2:	4806      	ldr	r0, [pc, #24]	; (80045dc <MX_TIM17_Init+0xe4>)
 80045c4:	f00c f91a 	bl	80107fc <HAL_TIMEx_ConfigBreakDeadTime>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80045ce:	f000 f9a7 	bl	8004920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80045d2:	bf00      	nop
 80045d4:	3748      	adds	r7, #72	; 0x48
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000680 	.word	0x20000680
 80045e0:	40014800 	.word	0x40014800

080045e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045e8:	4b22      	ldr	r3, [pc, #136]	; (8004674 <MX_USART1_UART_Init+0x90>)
 80045ea:	4a23      	ldr	r2, [pc, #140]	; (8004678 <MX_USART1_UART_Init+0x94>)
 80045ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045ee:	4b21      	ldr	r3, [pc, #132]	; (8004674 <MX_USART1_UART_Init+0x90>)
 80045f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045f6:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <MX_USART1_UART_Init+0x90>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <MX_USART1_UART_Init+0x90>)
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004602:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <MX_USART1_UART_Init+0x90>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004608:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <MX_USART1_UART_Init+0x90>)
 800460a:	220c      	movs	r2, #12
 800460c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800460e:	4b19      	ldr	r3, [pc, #100]	; (8004674 <MX_USART1_UART_Init+0x90>)
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004614:	4b17      	ldr	r3, [pc, #92]	; (8004674 <MX_USART1_UART_Init+0x90>)
 8004616:	2200      	movs	r2, #0
 8004618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <MX_USART1_UART_Init+0x90>)
 800461c:	2200      	movs	r2, #0
 800461e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004620:	4b14      	ldr	r3, [pc, #80]	; (8004674 <MX_USART1_UART_Init+0x90>)
 8004622:	2200      	movs	r2, #0
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004626:	4b13      	ldr	r3, [pc, #76]	; (8004674 <MX_USART1_UART_Init+0x90>)
 8004628:	2200      	movs	r2, #0
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800462c:	4811      	ldr	r0, [pc, #68]	; (8004674 <MX_USART1_UART_Init+0x90>)
 800462e:	f00c f981 	bl	8010934 <HAL_UART_Init>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004638:	f000 f972 	bl	8004920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800463c:	2100      	movs	r1, #0
 800463e:	480d      	ldr	r0, [pc, #52]	; (8004674 <MX_USART1_UART_Init+0x90>)
 8004640:	f00d fd86 	bl	8012150 <HAL_UARTEx_SetTxFifoThreshold>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800464a:	f000 f969 	bl	8004920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800464e:	2100      	movs	r1, #0
 8004650:	4808      	ldr	r0, [pc, #32]	; (8004674 <MX_USART1_UART_Init+0x90>)
 8004652:	f00d fdbb 	bl	80121cc <HAL_UARTEx_SetRxFifoThreshold>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800465c:	f000 f960 	bl	8004920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004660:	4804      	ldr	r0, [pc, #16]	; (8004674 <MX_USART1_UART_Init+0x90>)
 8004662:	f00d fd3c 	bl	80120de <HAL_UARTEx_DisableFifoMode>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800466c:	f000 f958 	bl	8004920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004670:	bf00      	nop
 8004672:	bd80      	pop	{r7, pc}
 8004674:	200006cc 	.word	0x200006cc
 8004678:	40013800 	.word	0x40013800

0800467c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004680:	4b24      	ldr	r3, [pc, #144]	; (8004714 <MX_USART2_UART_Init+0x98>)
 8004682:	4a25      	ldr	r2, [pc, #148]	; (8004718 <MX_USART2_UART_Init+0x9c>)
 8004684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004686:	4b23      	ldr	r3, [pc, #140]	; (8004714 <MX_USART2_UART_Init+0x98>)
 8004688:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800468c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800468e:	4b21      	ldr	r3, [pc, #132]	; (8004714 <MX_USART2_UART_Init+0x98>)
 8004690:	2200      	movs	r2, #0
 8004692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004694:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <MX_USART2_UART_Init+0x98>)
 8004696:	2200      	movs	r2, #0
 8004698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800469a:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <MX_USART2_UART_Init+0x98>)
 800469c:	2200      	movs	r2, #0
 800469e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046a0:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046a2:	220c      	movs	r2, #12
 80046a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046b2:	4b18      	ldr	r3, [pc, #96]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046b8:	4b16      	ldr	r3, [pc, #88]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046c0:	2210      	movs	r2, #16
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046ca:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046cc:	4811      	ldr	r0, [pc, #68]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046ce:	f00c f931 	bl	8010934 <HAL_UART_Init>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80046d8:	f000 f922 	bl	8004920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046dc:	2100      	movs	r1, #0
 80046de:	480d      	ldr	r0, [pc, #52]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046e0:	f00d fd36 	bl	8012150 <HAL_UARTEx_SetTxFifoThreshold>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80046ea:	f000 f919 	bl	8004920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046ee:	2100      	movs	r1, #0
 80046f0:	4808      	ldr	r0, [pc, #32]	; (8004714 <MX_USART2_UART_Init+0x98>)
 80046f2:	f00d fd6b 	bl	80121cc <HAL_UARTEx_SetRxFifoThreshold>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80046fc:	f000 f910 	bl	8004920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004700:	4804      	ldr	r0, [pc, #16]	; (8004714 <MX_USART2_UART_Init+0x98>)
 8004702:	f00d fcec 	bl	80120de <HAL_UARTEx_DisableFifoMode>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800470c:	f000 f908 	bl	8004920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004710:	bf00      	nop
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000760 	.word	0x20000760
 8004718:	40004400 	.word	0x40004400

0800471c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <MX_DMA_Init+0x44>)
 8004724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004726:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <MX_DMA_Init+0x44>)
 8004728:	f043 0304 	orr.w	r3, r3, #4
 800472c:	6493      	str	r3, [r2, #72]	; 0x48
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <MX_DMA_Init+0x44>)
 8004730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	607b      	str	r3, [r7, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800473a:	4b09      	ldr	r3, [pc, #36]	; (8004760 <MX_DMA_Init+0x44>)
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	4a08      	ldr	r2, [pc, #32]	; (8004760 <MX_DMA_Init+0x44>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6493      	str	r3, [r2, #72]	; 0x48
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <MX_DMA_Init+0x44>)
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	683b      	ldr	r3, [r7, #0]

}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000

08004764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08c      	sub	sp, #48	; 0x30
 8004768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476a:	f107 031c 	add.w	r3, r7, #28
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800477a:	4b64      	ldr	r3, [pc, #400]	; (800490c <MX_GPIO_Init+0x1a8>)
 800477c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477e:	4a63      	ldr	r2, [pc, #396]	; (800490c <MX_GPIO_Init+0x1a8>)
 8004780:	f043 0310 	orr.w	r3, r3, #16
 8004784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004786:	4b61      	ldr	r3, [pc, #388]	; (800490c <MX_GPIO_Init+0x1a8>)
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004792:	4b5e      	ldr	r3, [pc, #376]	; (800490c <MX_GPIO_Init+0x1a8>)
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	4a5d      	ldr	r2, [pc, #372]	; (800490c <MX_GPIO_Init+0x1a8>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800479e:	4b5b      	ldr	r3, [pc, #364]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047aa:	4b58      	ldr	r3, [pc, #352]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	4a57      	ldr	r2, [pc, #348]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047b6:	4b55      	ldr	r3, [pc, #340]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c2:	4b52      	ldr	r3, [pc, #328]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	4a51      	ldr	r2, [pc, #324]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ce:	4b4f      	ldr	r3, [pc, #316]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047da:	4b4c      	ldr	r3, [pc, #304]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047de:	4a4b      	ldr	r2, [pc, #300]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047e6:	4b49      	ldr	r3, [pc, #292]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047f2:	4b46      	ldr	r3, [pc, #280]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f6:	4a45      	ldr	r2, [pc, #276]	; (800490c <MX_GPIO_Init+0x1a8>)
 80047f8:	f043 0308 	orr.w	r3, r3, #8
 80047fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047fe:	4b43      	ldr	r3, [pc, #268]	; (800490c <MX_GPIO_Init+0x1a8>)
 8004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 800480a:	2200      	movs	r2, #0
 800480c:	f641 013c 	movw	r1, #6204	; 0x183c
 8004810:	483f      	ldr	r0, [pc, #252]	; (8004910 <MX_GPIO_Init+0x1ac>)
 8004812:	f003 faf5 	bl	8007e00 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8004816:	2201      	movs	r2, #1
 8004818:	2130      	movs	r1, #48	; 0x30
 800481a:	483e      	ldr	r0, [pc, #248]	; (8004914 <MX_GPIO_Init+0x1b0>)
 800481c:	f003 faf0 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8004820:	2200      	movs	r2, #0
 8004822:	2178      	movs	r1, #120	; 0x78
 8004824:	483c      	ldr	r0, [pc, #240]	; (8004918 <MX_GPIO_Init+0x1b4>)
 8004826:	f003 faeb 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 800482a:	f641 033c 	movw	r3, #6204	; 0x183c
 800482e:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004830:	2301      	movs	r3, #1
 8004832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004838:	2300      	movs	r3, #0
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800483c:	f107 031c 	add.w	r3, r7, #28
 8004840:	4619      	mov	r1, r3
 8004842:	4833      	ldr	r0, [pc, #204]	; (8004910 <MX_GPIO_Init+0x1ac>)
 8004844:	f003 f840 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8004848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800484c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484e:	2300      	movs	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8004856:	f107 031c 	add.w	r3, r7, #28
 800485a:	4619      	mov	r1, r3
 800485c:	482d      	ldr	r0, [pc, #180]	; (8004914 <MX_GPIO_Init+0x1b0>)
 800485e:	f003 f833 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8004862:	2302      	movs	r3, #2
 8004864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004866:	2300      	movs	r3, #0
 8004868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 800486e:	f107 031c 	add.w	r3, r7, #28
 8004872:	4619      	mov	r1, r3
 8004874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004878:	f003 f826 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 800487c:	2330      	movs	r3, #48	; 0x30
 800487e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004880:	2301      	movs	r3, #1
 8004882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004888:	2300      	movs	r3, #0
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800488c:	f107 031c 	add.w	r3, r7, #28
 8004890:	4619      	mov	r1, r3
 8004892:	4820      	ldr	r0, [pc, #128]	; (8004914 <MX_GPIO_Init+0x1b0>)
 8004894:	f003 f818 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8004898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800489c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048a2:	2301      	movs	r3, #1
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 80048a6:	f107 031c 	add.w	r3, r7, #28
 80048aa:	4619      	mov	r1, r3
 80048ac:	4818      	ldr	r0, [pc, #96]	; (8004910 <MX_GPIO_Init+0x1ac>)
 80048ae:	f003 f80b 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 80048b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048b8:	2300      	movs	r3, #0
 80048ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048bc:	2301      	movs	r3, #1
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80048c0:	f107 031c 	add.w	r3, r7, #28
 80048c4:	4619      	mov	r1, r3
 80048c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048ca:	f002 fffd 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80048ce:	2378      	movs	r3, #120	; 0x78
 80048d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048d2:	2301      	movs	r3, #1
 80048d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048da:	2300      	movs	r3, #0
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048de:	f107 031c 	add.w	r3, r7, #28
 80048e2:	4619      	mov	r1, r3
 80048e4:	480c      	ldr	r0, [pc, #48]	; (8004918 <MX_GPIO_Init+0x1b4>)
 80048e6:	f002 ffef 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 80048ea:	2320      	movs	r3, #32
 80048ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ee:	2300      	movs	r3, #0
 80048f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 80048f6:	f107 031c 	add.w	r3, r7, #28
 80048fa:	4619      	mov	r1, r3
 80048fc:	4807      	ldr	r0, [pc, #28]	; (800491c <MX_GPIO_Init+0x1b8>)
 80048fe:	f002 ffe3 	bl	80078c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004902:	bf00      	nop
 8004904:	3730      	adds	r7, #48	; 0x30
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	48001000 	.word	0x48001000
 8004914:	48000800 	.word	0x48000800
 8004918:	48000c00 	.word	0x48000c00
 800491c:	48000400 	.word	0x48000400

08004920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004924:	b672      	cpsid	i
}
 8004926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 8004928:	4801      	ldr	r0, [pc, #4]	; (8004930 <Error_Handler+0x10>)
 800492a:	f015 fc1f 	bl	801a16c <iprintf>
	while (1)
 800492e:	e7fe      	b.n	800492e <Error_Handler+0xe>
 8004930:	0801c94c 	.word	0x0801c94c

08004934 <CRC16>:
//MIRA communication status
//volatile unsigned mira_ready_for_comm = 1;


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
			0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
			0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
			0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 8004940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004944:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 8004946:	e011      	b.n	800496c <CRC16+0x38>
	{
		nTemp = *nData++ ^ wCRCWord;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	89fb      	ldrh	r3, [r7, #14]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4053      	eors	r3, r2
 8004956:	737b      	strb	r3, [r7, #13]
		wCRCWord >>= 8;
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	81fb      	strh	r3, [r7, #14]
		wCRCWord ^= wCRCTable[nTemp];
 800495e:	7b7b      	ldrb	r3, [r7, #13]
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <CRC16+0x50>)
 8004962:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004966:	89fb      	ldrh	r3, [r7, #14]
 8004968:	4053      	eors	r3, r2
 800496a:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 800496c:	887b      	ldrh	r3, [r7, #2]
 800496e:	1e5a      	subs	r2, r3, #1
 8004970:	807a      	strh	r2, [r7, #2]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e8      	bne.n	8004948 <CRC16+0x14>
	}
	return wCRCWord;
 8004976:	89fb      	ldrh	r3, [r7, #14]

}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	0801c9f0 	.word	0x0801c9f0

08004988 <mira_command>:


HAL_StatusTypeDef mira_command(UART_HandleTypeDef *huart, uint8_t command, uint8_t reg, uint8_t *data, uint8_t *rxBuffer, uint32_t Timeout){
 8004988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800498c:	b08e      	sub	sp, #56	; 0x38
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	72fb      	strb	r3, [r7, #11]
 8004998:	4613      	mov	r3, r2
 800499a:	72bb      	strb	r3, [r7, #10]
 800499c:	466b      	mov	r3, sp
 800499e:	469a      	mov	sl, r3
	//Wait that previous instance of communication is done (toggled by HAL_UART_RxCpltCallback)
	//while (!mira_ready_for_comm);//{HAL_Delay(100);}
//	HAL_Delay(500);
//	mira_ready_for_comm = 0;

	uint8_t length_val = sizeof(data)+1;
 80049a0:	2305      	movs	r3, #5
 80049a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_StatusTypeDef status;
	uint8_t message[9+length_val];
 80049a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049aa:	f103 0609 	add.w	r6, r3, #9
 80049ae:	1e73      	subs	r3, r6, #1
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b2:	4632      	mov	r2, r6
 80049b4:	2300      	movs	r3, #0
 80049b6:	4690      	mov	r8, r2
 80049b8:	4699      	mov	r9, r3
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ce:	4632      	mov	r2, r6
 80049d0:	2300      	movs	r3, #0
 80049d2:	4614      	mov	r4, r2
 80049d4:	461d      	mov	r5, r3
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	00eb      	lsls	r3, r5, #3
 80049e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e4:	00e2      	lsls	r2, r4, #3
 80049e6:	4633      	mov	r3, r6
 80049e8:	3307      	adds	r3, #7
 80049ea:	08db      	lsrs	r3, r3, #3
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	ebad 0d03 	sub.w	sp, sp, r3
 80049f2:	466b      	mov	r3, sp
 80049f4:	3300      	adds	r3, #0
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t sync[2] = {0x5a, 0xce};
 80049f8:	f64c 635a 	movw	r3, #52826	; 0xce5a
 80049fc:	843b      	strh	r3, [r7, #32]
	// do this (below) properly some other time
	uint8_t length[2] = {0x00, length_val};
 80049fe:	2300      	movs	r3, #0
 8004a00:	773b      	strb	r3, [r7, #28]
 8004a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a06:	777b      	strb	r3, [r7, #29]
	uint8_t src[1] = {0xc1};
 8004a08:	23c1      	movs	r3, #193	; 0xc1
 8004a0a:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8004a0c:	23e1      	movs	r3, #225	; 0xe1
 8004a0e:	753b      	strb	r3, [r7, #20]
	uint16_t sum = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[0] = sync[0];
 8004a14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	701a      	strb	r2, [r3, #0]
	message[1] = sync[1];
 8004a1c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	705a      	strb	r2, [r3, #1]
	message[2] = length[0];
 8004a24:	7f3a      	ldrb	r2, [r7, #28]
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	709a      	strb	r2, [r3, #2]
	message[3] = length[1];
 8004a2a:	7f7a      	ldrb	r2, [r7, #29]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	70da      	strb	r2, [r3, #3]
	message[4] = src[0];
 8004a30:	7e3a      	ldrb	r2, [r7, #24]
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	711a      	strb	r2, [r3, #4]
	message[5] = dest[0];
 8004a36:	7d3a      	ldrb	r2, [r7, #20]
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	715a      	strb	r2, [r3, #5]
	message[6] = command;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	7afa      	ldrb	r2, [r7, #11]
 8004a40:	719a      	strb	r2, [r3, #6]
	message[7] = reg;
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	7aba      	ldrb	r2, [r7, #10]
 8004a46:	71da      	strb	r2, [r3, #7]

	int i;
	for (i = 0; i < length_val; i++) {
 8004a48:	2300      	movs	r3, #0
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a4c:	e00a      	b.n	8004a64 <mira_command+0xdc>
		message[8+i] = data[i];
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	441a      	add	r2, r3
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	3308      	adds	r3, #8
 8004a58:	7811      	ldrb	r1, [r2, #0]
 8004a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a5c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < length_val; i++) {
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	3301      	adds	r3, #1
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
 8004a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	dbef      	blt.n	8004a4e <mira_command+0xc6>
	}

	sum = CRC16(message+2, 10);
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	3302      	adds	r3, #2
 8004a72:	210a      	movs	r1, #10
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff5d 	bl	8004934 <CRC16>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[9+i] = (sum&0xFF00)>>8;
 8004a7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	3309      	adds	r3, #9
 8004a88:	b2d1      	uxtb	r1, r2
 8004a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a8c:	54d1      	strb	r1, [r2, r3]

	message[10+i] = (sum&0x00FF);
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	330a      	adds	r3, #10
 8004a92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004a94:	b2d1      	uxtb	r1, r2
 8004a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a98:	54d1      	strb	r1, [r2, r3]

	// Enable transmitter and disable receiver
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	2104      	movs	r1, #4
 8004a9e:	4817      	ldr	r0, [pc, #92]	; (8004afc <mira_command+0x174>)
 8004aa0:	f003 f9ae 	bl	8007e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	2108      	movs	r1, #8
 8004aa8:	4814      	ldr	r0, [pc, #80]	; (8004afc <mira_command+0x174>)
 8004aaa:	f003 f9a9 	bl	8007e00 <HAL_GPIO_WritePin>

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, sizeof(message), Timeout);
 8004aae:	b2b2      	uxth	r2, r6
 8004ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f00b ff8d 	bl	80109d4 <HAL_UART_Transmit>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	// Enable receiver and disable transmitter
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_RESET);
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	480d      	ldr	r0, [pc, #52]	; (8004afc <mira_command+0x174>)
 8004ac6:	f003 f99b 	bl	8007e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_RESET);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2108      	movs	r1, #8
 8004ace:	480b      	ldr	r0, [pc, #44]	; (8004afc <mira_command+0x174>)
 8004ad0:	f003 f996 	bl	8007e00 <HAL_GPIO_WritePin>

	status = HAL_UART_Receive_DMA(huart, rxBuffer, sizeof(rxBuffer));
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f00c f80b 	bl	8010af4 <HAL_UART_Receive_DMA>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_Delay(3);
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	f002 fa8b 	bl	8007000 <HAL_Delay>

	return status;
 8004aea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004aee:	46d5      	mov	sp, sl

}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3738      	adds	r7, #56	; 0x38
 8004af4:	46bd      	mov	sp, r7
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	bf00      	nop
 8004afc:	48001000 	.word	0x48001000

08004b00 <mira_science_data>:


HAL_StatusTypeDef mira_science_data(UART_HandleTypeDef *huart, uint8_t *science_Rx, uint8_t *response_Rx, uint32_t Timeout){
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t mira_empty_Tx_payload[0] = {};
	uint8_t mira_write_Tx_payload[4] = {0x00, 0x00, 0x00, 0x00};
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]

	// Get the science data and save it to rxBuffer
	status = mira_command(huart, GET_SCIENCE_DATA, 0x00, mira_empty_Tx_payload, science_Rx, Timeout);
 8004b12:	2140      	movs	r1, #64	; 0x40
 8004b14:	f107 0214 	add.w	r2, r7, #20
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	2200      	movs	r2, #0
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff ff2f 	bl	8004988 <mira_command>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {return status;}
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <mira_science_data+0x38>
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	e012      	b.n	8004b5e <mira_science_data+0x5e>

	// Mark as read
	mira_write_Tx_payload[3] = MARK_AS_READ;
 8004b38:	2381      	movs	r3, #129	; 0x81
 8004b3a:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, CHECK_FOR_READ, mira_write_Tx_payload, response_Rx, 5000);
 8004b3c:	2103      	movs	r1, #3
 8004b3e:	2080      	movs	r0, #128	; 0x80
 8004b40:	f107 0210 	add.w	r2, r7, #16
 8004b44:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	4602      	mov	r2, r0
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff ff18 	bl	8004988 <mira_command>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

	// return status
	return status;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <mira_test_sequence>:

HAL_StatusTypeDef mira_test_sequence(UART_HandleTypeDef *huart, uint8_t *science_Rx, uint8_t *response_Rx, uint32_t Timeout) {
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b08a      	sub	sp, #40	; 0x28
 8004b6a:	af02      	add	r7, sp, #8
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t mira_response_Rx[10];
	uint8_t mira_write_Tx_payload[4] = {0x00, 0x00, 0x00, 0x00};
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
	// Set time to 0
//	status = mira_command(huart, WRITE_REGISTER, 0x0F, mira_write_Tx_payload, mira_response_Rx, Timeout);
//	if (status != HAL_OK) {return status;}

	// Activate ADC
	mira_write_Tx_payload[3] = 0x01;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x02, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004b7c:	2103      	movs	r1, #3
 8004b7e:	f107 0210 	add.w	r2, r7, #16
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	f107 0314 	add.w	r3, r7, #20
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	2202      	movs	r2, #2
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7ff fef9 	bl	8004988 <mira_command>
 8004b96:	4603      	mov	r3, r0
 8004b98:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <mira_test_sequence+0x3e>
 8004ba0:	7ffb      	ldrb	r3, [r7, #31]
 8004ba2:	e158      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[3] = 0x00;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	74fb      	strb	r3, [r7, #19]

	// Select ADC channel for analysis
	mira_write_Tx_payload[3] = 0x05;
 8004ba8:	2305      	movs	r3, #5
 8004baa:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x03, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004bac:	2103      	movs	r1, #3
 8004bae:	f107 0210 	add.w	r2, r7, #16
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	f107 0314 	add.w	r3, r7, #20
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff fee1 	bl	8004988 <mira_command>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <mira_test_sequence+0x6e>
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	e140      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[3] = 0x00;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	74fb      	strb	r3, [r7, #19]

	// Set calibration multiplier, 3250 = 0xCB2
	mira_write_Tx_payload[2] = 0x0C;
 8004bd8:	230c      	movs	r3, #12
 8004bda:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0xB2;
 8004bdc:	23b2      	movs	r3, #178	; 0xb2
 8004bde:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0E, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004be0:	2103      	movs	r1, #3
 8004be2:	f107 0210 	add.w	r2, r7, #16
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	220e      	movs	r2, #14
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff fec7 	bl	8004988 <mira_command>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <mira_test_sequence+0xa2>
 8004c04:	7ffb      	ldrb	r3, [r7, #31]
 8004c06:	e126      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[2] = 0x00;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	74fb      	strb	r3, [r7, #19]


	// Set integration time to 5 seconds
	mira_write_Tx_payload[3] = 0x05;
 8004c10:	2305      	movs	r3, #5
 8004c12:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x07, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004c14:	2103      	movs	r1, #3
 8004c16:	f107 0210 	add.w	r2, r7, #16
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	f107 0314 	add.w	r3, r7, #20
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	2207      	movs	r2, #7
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff fead 	bl	8004988 <mira_command>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004c32:	7ffb      	ldrb	r3, [r7, #31]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <mira_test_sequence+0xd6>
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
 8004c3a:	e10c      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[3] = 0x00;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	74fb      	strb	r3, [r7, #19]

	// Skipping read spectrum status

	// Set test pulser size
	mira_write_Tx_payload[2] = 0x07;
 8004c40:	2307      	movs	r3, #7
 8004c42:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0xFF;
 8004c44:	23ff      	movs	r3, #255	; 0xff
 8004c46:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004c48:	2103      	movs	r1, #3
 8004c4a:	f107 0210 	add.w	r2, r7, #16
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	220d      	movs	r2, #13
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff fe93 	bl	8004988 <mira_command>
 8004c62:	4603      	mov	r3, r0
 8004c64:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <mira_test_sequence+0x10a>
 8004c6c:	7ffb      	ldrb	r3, [r7, #31]
 8004c6e:	e0f2      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[2] = 0x00;
 8004c70:	2300      	movs	r3, #0
 8004c72:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 8004c74:	2300      	movs	r3, #0
 8004c76:	74fb      	strb	r3, [r7, #19]

	// Activate test pulser
	mira_write_Tx_payload[3] = 0x01;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0C, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004c7c:	2103      	movs	r1, #3
 8004c7e:	f107 0210 	add.w	r2, r7, #16
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	f107 0314 	add.w	r3, r7, #20
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	220c      	movs	r2, #12
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fe79 	bl	8004988 <mira_command>
 8004c96:	4603      	mov	r3, r0
 8004c98:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <mira_test_sequence+0x13e>
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	e0d8      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[3] = 0x00;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	74fb      	strb	r3, [r7, #19]

	// Activate analysis using default parameters
	mira_write_Tx_payload[3] = 0x01;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x06, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004cac:	2103      	movs	r1, #3
 8004cae:	f107 0210 	add.w	r2, r7, #16
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	2206      	movs	r2, #6
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fe61 	bl	8004988 <mira_command>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <mira_test_sequence+0x16e>
 8004cd0:	7ffb      	ldrb	r3, [r7, #31]
 8004cd2:	e0c0      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[3] = 0x00;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	74fb      	strb	r3, [r7, #19]

	// Pause while integration happens
	HAL_Delay(800);
 8004cd8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004cdc:	f002 f990 	bl	8007000 <HAL_Delay>

	// Set test pulser size
	mira_write_Tx_payload[2] = 0x04;
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004ce8:	2103      	movs	r1, #3
 8004cea:	f107 0210 	add.w	r2, r7, #16
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	220d      	movs	r2, #13
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff fe43 	bl	8004988 <mira_command>
 8004d02:	4603      	mov	r3, r0
 8004d04:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <mira_test_sequence+0x1aa>
 8004d0c:	7ffb      	ldrb	r3, [r7, #31]
 8004d0e:	e0a2      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[2] = 0x00;
 8004d10:	2300      	movs	r3, #0
 8004d12:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 8004d14:	2300      	movs	r3, #0
 8004d16:	74fb      	strb	r3, [r7, #19]

	// Pause while integration happens
	HAL_Delay(1500);
 8004d18:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004d1c:	f002 f970 	bl	8007000 <HAL_Delay>

	// Set test pulser size
	mira_write_Tx_payload[2] = 0x05;
 8004d20:	2305      	movs	r3, #5
 8004d22:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0xDC;
 8004d24:	23dc      	movs	r3, #220	; 0xdc
 8004d26:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004d28:	2103      	movs	r1, #3
 8004d2a:	f107 0210 	add.w	r2, r7, #16
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	f107 0314 	add.w	r3, r7, #20
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	220d      	movs	r2, #13
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff fe23 	bl	8004988 <mira_command>
 8004d42:	4603      	mov	r3, r0
 8004d44:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004d46:	7ffb      	ldrb	r3, [r7, #31]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <mira_test_sequence+0x1ea>
 8004d4c:	7ffb      	ldrb	r3, [r7, #31]
 8004d4e:	e082      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[2] = 0x00;
 8004d50:	2300      	movs	r3, #0
 8004d52:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 8004d54:	2300      	movs	r3, #0
 8004d56:	74fb      	strb	r3, [r7, #19]

	// Pause while integration happens
	HAL_Delay(1000);
 8004d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d5c:	f002 f950 	bl	8007000 <HAL_Delay>

	// Set test pulser size
	mira_write_Tx_payload[2] = 0x09;
 8004d60:	2309      	movs	r3, #9
 8004d62:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0xC4;
 8004d64:	23c4      	movs	r3, #196	; 0xc4
 8004d66:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004d68:	2103      	movs	r1, #3
 8004d6a:	f107 0210 	add.w	r2, r7, #16
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	f107 0314 	add.w	r3, r7, #20
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	220d      	movs	r2, #13
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff fe03 	bl	8004988 <mira_command>
 8004d82:	4603      	mov	r3, r0
 8004d84:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004d86:	7ffb      	ldrb	r3, [r7, #31]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <mira_test_sequence+0x22a>
 8004d8c:	7ffb      	ldrb	r3, [r7, #31]
 8004d8e:	e062      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[2] = 0x00;
 8004d90:	2300      	movs	r3, #0
 8004d92:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 8004d94:	2300      	movs	r3, #0
 8004d96:	74fb      	strb	r3, [r7, #19]

	// Pause while integration happens
	HAL_Delay(500);
 8004d98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d9c:	f002 f930 	bl	8007000 <HAL_Delay>

	// Set test pulser size
	mira_write_Tx_payload[3] = 0x00;
 8004da0:	2300      	movs	r3, #0
 8004da2:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004da4:	2103      	movs	r1, #3
 8004da6:	f107 0210 	add.w	r2, r7, #16
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	f107 0314 	add.w	r3, r7, #20
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	220d      	movs	r2, #13
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff fde5 	bl	8004988 <mira_command>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <mira_test_sequence+0x266>
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
 8004dca:	e044      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[3] = 0x00;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	74fb      	strb	r3, [r7, #19]

	// Pause while integration happens
	HAL_Delay(1200);
 8004dd0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004dd4:	f002 f914 	bl	8007000 <HAL_Delay>

	// Skipping read spectrum status

	// Read spectrum
	status = mira_science_data(huart, science_Rx, response_Rx, 5000);
 8004dd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff fe8d 	bl	8004b00 <mira_science_data>
 8004de6:	4603      	mov	r3, r0
 8004de8:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <mira_test_sequence+0x28e>
 8004df0:	7ffb      	ldrb	r3, [r7, #31]
 8004df2:	e030      	b.n	8004e56 <mira_test_sequence+0x2f0>

	// Deactivate analysis
	mira_write_Tx_payload[3] = 0x00;
 8004df4:	2300      	movs	r3, #0
 8004df6:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x06, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004df8:	2103      	movs	r1, #3
 8004dfa:	f107 0210 	add.w	r2, r7, #16
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	f107 0314 	add.w	r3, r7, #20
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	2206      	movs	r2, #6
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f7ff fdbb 	bl	8004988 <mira_command>
 8004e12:	4603      	mov	r3, r0
 8004e14:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004e16:	7ffb      	ldrb	r3, [r7, #31]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <mira_test_sequence+0x2ba>
 8004e1c:	7ffb      	ldrb	r3, [r7, #31]
 8004e1e:	e01a      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[3] = 0x00;
 8004e20:	2300      	movs	r3, #0
 8004e22:	74fb      	strb	r3, [r7, #19]

	// Deactivate test pulser
	mira_write_Tx_payload[3] = 0x00;
 8004e24:	2300      	movs	r3, #0
 8004e26:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0C, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004e28:	2103      	movs	r1, #3
 8004e2a:	f107 0210 	add.w	r2, r7, #16
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	f107 0314 	add.w	r3, r7, #20
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	220c      	movs	r2, #12
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff fda3 	bl	8004988 <mira_command>
 8004e42:	4603      	mov	r3, r0
 8004e44:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004e46:	7ffb      	ldrb	r3, [r7, #31]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <mira_test_sequence+0x2ea>
 8004e4c:	7ffb      	ldrb	r3, [r7, #31]
 8004e4e:	e002      	b.n	8004e56 <mira_test_sequence+0x2f0>
	mira_write_Tx_payload[3] = 0x00;
 8004e50:	2300      	movs	r3, #0
 8004e52:	74fb      	strb	r3, [r7, #19]

	return status;
 8004e54:	7ffb      	ldrb	r3, [r7, #31]

}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <HAL_MspInit+0x44>)
 8004e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <HAL_MspInit+0x44>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	6613      	str	r3, [r2, #96]	; 0x60
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <HAL_MspInit+0x44>)
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_MspInit+0x44>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <HAL_MspInit+0x44>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6593      	str	r3, [r2, #88]	; 0x58
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_MspInit+0x44>)
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b0ae      	sub	sp, #184	; 0xb8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ec0:	f107 0310 	add.w	r3, r7, #16
 8004ec4:	2294      	movs	r2, #148	; 0x94
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f014 fbfd 	bl	80196c8 <memset>
  if(hi2c->Instance==I2C1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a21      	ldr	r2, [pc, #132]	; (8004f58 <HAL_I2C_MspInit+0xb0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d13a      	bne.n	8004f4e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004ed8:	2340      	movs	r3, #64	; 0x40
 8004eda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004edc:	2300      	movs	r3, #0
 8004ede:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ee0:	f107 0310 	add.w	r3, r7, #16
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f006 fb43 	bl	800b570 <HAL_RCCEx_PeriphCLKConfig>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004ef0:	f7ff fd16 	bl	8004920 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_I2C_MspInit+0xb4>)
 8004ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <HAL_I2C_MspInit+0xb4>)
 8004efa:	f043 0302 	orr.w	r3, r3, #2
 8004efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f00:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <HAL_I2C_MspInit+0xb4>)
 8004f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f0c:	23c0      	movs	r3, #192	; 0xc0
 8004f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f12:	2312      	movs	r3, #18
 8004f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f24:	2304      	movs	r3, #4
 8004f26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	480b      	ldr	r0, [pc, #44]	; (8004f60 <HAL_I2C_MspInit+0xb8>)
 8004f32:	f002 fcc9 	bl	80078c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_I2C_MspInit+0xb4>)
 8004f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3a:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <HAL_I2C_MspInit+0xb4>)
 8004f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f40:	6593      	str	r3, [r2, #88]	; 0x58
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_I2C_MspInit+0xb4>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f4e:	bf00      	nop
 8004f50:	37b8      	adds	r7, #184	; 0xb8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40005400 	.word	0x40005400
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	48000400 	.word	0x48000400

08004f64 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <HAL_I2C_MspDeInit+0x38>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10d      	bne.n	8004f92 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_I2C_MspDeInit+0x3c>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <HAL_I2C_MspDeInit+0x3c>)
 8004f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f80:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	4807      	ldr	r0, [pc, #28]	; (8004fa4 <HAL_I2C_MspDeInit+0x40>)
 8004f86:	f002 fe31 	bl	8007bec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <HAL_I2C_MspDeInit+0x40>)
 8004f8e:	f002 fe2d 	bl	8007bec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40005400 	.word	0x40005400
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	48000400 	.word	0x48000400

08004fa8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b0b0      	sub	sp, #192	; 0xc0
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fc0:	f107 0318 	add.w	r3, r7, #24
 8004fc4:	2294      	movs	r2, #148	; 0x94
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f014 fb7d 	bl	80196c8 <memset>
  if(hsd->Instance==SDMMC1)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a37      	ldr	r2, [pc, #220]	; (80050b0 <HAL_SD_MspInit+0x108>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d166      	bne.n	80050a6 <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8004fd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fe4:	f107 0318 	add.w	r3, r7, #24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f006 fac1 	bl	800b570 <HAL_RCCEx_PeriphCLKConfig>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8004ff4:	f7ff fc94 	bl	8004920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004ff8:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffc:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 8004ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005004:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 8005006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005010:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 8005012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005014:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 8005016:	f043 0304 	orr.w	r3, r3, #4
 800501a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800501c:	4b25      	ldr	r3, [pc, #148]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 800501e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005028:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 800502e:	f043 0308 	orr.w	r3, r3, #8
 8005032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005034:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_SD_MspInit+0x10c>)
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005040:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005048:	2302      	movs	r3, #2
 800504a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504e:	2300      	movs	r3, #0
 8005050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005054:	2303      	movs	r3, #3
 8005056:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800505a:	230c      	movs	r3, #12
 800505c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005060:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005064:	4619      	mov	r1, r3
 8005066:	4814      	ldr	r0, [pc, #80]	; (80050b8 <HAL_SD_MspInit+0x110>)
 8005068:	f002 fc2e 	bl	80078c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800506c:	2304      	movs	r3, #4
 800506e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005072:	2302      	movs	r3, #2
 8005074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	2300      	movs	r3, #0
 800507a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507e:	2303      	movs	r3, #3
 8005080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005084:	230c      	movs	r3, #12
 8005086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800508a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800508e:	4619      	mov	r1, r3
 8005090:	480a      	ldr	r0, [pc, #40]	; (80050bc <HAL_SD_MspInit+0x114>)
 8005092:	f002 fc19 	bl	80078c8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8005096:	2200      	movs	r2, #0
 8005098:	2100      	movs	r1, #0
 800509a:	2031      	movs	r0, #49	; 0x31
 800509c:	f002 f8af 	bl	80071fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80050a0:	2031      	movs	r0, #49	; 0x31
 80050a2:	f002 f8c8 	bl	8007236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80050a6:	bf00      	nop
 80050a8:	37c0      	adds	r7, #192	; 0xc0
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	50062400 	.word	0x50062400
 80050b4:	40021000 	.word	0x40021000
 80050b8:	48000800 	.word	0x48000800
 80050bc:	48000c00 	.word	0x48000c00

080050c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a17      	ldr	r2, [pc, #92]	; (800513c <HAL_SPI_MspInit+0x7c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d128      	bne.n	8005134 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050e2:	4b17      	ldr	r3, [pc, #92]	; (8005140 <HAL_SPI_MspInit+0x80>)
 80050e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e6:	4a16      	ldr	r2, [pc, #88]	; (8005140 <HAL_SPI_MspInit+0x80>)
 80050e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ec:	6613      	str	r3, [r2, #96]	; 0x60
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_SPI_MspInit+0x80>)
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <HAL_SPI_MspInit+0x80>)
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fe:	4a10      	ldr	r2, [pc, #64]	; (8005140 <HAL_SPI_MspInit+0x80>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <HAL_SPI_MspInit+0x80>)
 8005108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8005112:	23f0      	movs	r3, #240	; 0xf0
 8005114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005116:	2302      	movs	r3, #2
 8005118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800511e:	2303      	movs	r3, #3
 8005120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005122:	2305      	movs	r3, #5
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005126:	f107 0314 	add.w	r3, r7, #20
 800512a:	4619      	mov	r1, r3
 800512c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005130:	f002 fbca 	bl	80078c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005134:	bf00      	nop
 8005136:	3728      	adds	r7, #40	; 0x28
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40013000 	.word	0x40013000
 8005140:	40021000 	.word	0x40021000

08005144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <HAL_TIM_Base_MspInit+0x38>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10b      	bne.n	800516e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_TIM_Base_MspInit+0x3c>)
 8005158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <HAL_TIM_Base_MspInit+0x3c>)
 800515c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005160:	6613      	str	r3, [r2, #96]	; 0x60
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <HAL_TIM_Base_MspInit+0x3c>)
 8005164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40014800 	.word	0x40014800
 8005180:	40021000 	.word	0x40021000

08005184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b0b0      	sub	sp, #192	; 0xc0
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800518c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	609a      	str	r2, [r3, #8]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800519c:	f107 0318 	add.w	r3, r7, #24
 80051a0:	2294      	movs	r2, #148	; 0x94
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f014 fa8f 	bl	80196c8 <memset>
  if(huart->Instance==USART1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6d      	ldr	r2, [pc, #436]	; (8005364 <HAL_UART_MspInit+0x1e0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	f040 8091 	bne.w	80052d8 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80051b6:	2301      	movs	r3, #1
 80051b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80051ba:	2300      	movs	r3, #0
 80051bc:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051be:	f107 0318 	add.w	r3, r7, #24
 80051c2:	4618      	mov	r0, r3
 80051c4:	f006 f9d4 	bl	800b570 <HAL_RCCEx_PeriphCLKConfig>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80051ce:	f7ff fba7 	bl	8004920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80051d2:	4b65      	ldr	r3, [pc, #404]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	4a64      	ldr	r2, [pc, #400]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 80051d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051dc:	6613      	str	r3, [r2, #96]	; 0x60
 80051de:	4b62      	ldr	r3, [pc, #392]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 80051e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ea:	4b5f      	ldr	r3, [pc, #380]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 80051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ee:	4a5e      	ldr	r2, [pc, #376]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051f6:	4b5c      	ldr	r3, [pc, #368]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8005202:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520a:	2302      	movs	r3, #2
 800520c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	2300      	movs	r3, #0
 8005212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005216:	2303      	movs	r3, #3
 8005218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800521c:	2307      	movs	r3, #7
 800521e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005222:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005226:	4619      	mov	r1, r3
 8005228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800522c:	f002 fb4c 	bl	80078c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8005230:	4b4e      	ldr	r3, [pc, #312]	; (800536c <HAL_UART_MspInit+0x1e8>)
 8005232:	4a4f      	ldr	r2, [pc, #316]	; (8005370 <HAL_UART_MspInit+0x1ec>)
 8005234:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005236:	4b4d      	ldr	r3, [pc, #308]	; (800536c <HAL_UART_MspInit+0x1e8>)
 8005238:	2218      	movs	r2, #24
 800523a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <HAL_UART_MspInit+0x1e8>)
 800523e:	2200      	movs	r2, #0
 8005240:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005242:	4b4a      	ldr	r3, [pc, #296]	; (800536c <HAL_UART_MspInit+0x1e8>)
 8005244:	2200      	movs	r2, #0
 8005246:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005248:	4b48      	ldr	r3, [pc, #288]	; (800536c <HAL_UART_MspInit+0x1e8>)
 800524a:	2280      	movs	r2, #128	; 0x80
 800524c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800524e:	4b47      	ldr	r3, [pc, #284]	; (800536c <HAL_UART_MspInit+0x1e8>)
 8005250:	2200      	movs	r2, #0
 8005252:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005254:	4b45      	ldr	r3, [pc, #276]	; (800536c <HAL_UART_MspInit+0x1e8>)
 8005256:	2200      	movs	r2, #0
 8005258:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800525a:	4b44      	ldr	r3, [pc, #272]	; (800536c <HAL_UART_MspInit+0x1e8>)
 800525c:	2200      	movs	r2, #0
 800525e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005260:	4b42      	ldr	r3, [pc, #264]	; (800536c <HAL_UART_MspInit+0x1e8>)
 8005262:	2200      	movs	r2, #0
 8005264:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005266:	4841      	ldr	r0, [pc, #260]	; (800536c <HAL_UART_MspInit+0x1e8>)
 8005268:	f002 f800 	bl	800726c <HAL_DMA_Init>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8005272:	f7ff fb55 	bl	8004920 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a3c      	ldr	r2, [pc, #240]	; (800536c <HAL_UART_MspInit+0x1e8>)
 800527a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800527e:	4a3b      	ldr	r2, [pc, #236]	; (800536c <HAL_UART_MspInit+0x1e8>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8005284:	4b3b      	ldr	r3, [pc, #236]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 8005286:	4a3c      	ldr	r2, [pc, #240]	; (8005378 <HAL_UART_MspInit+0x1f4>)
 8005288:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800528a:	4b3a      	ldr	r3, [pc, #232]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 800528c:	2219      	movs	r2, #25
 800528e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005290:	4b38      	ldr	r3, [pc, #224]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 8005292:	2210      	movs	r2, #16
 8005294:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005296:	4b37      	ldr	r3, [pc, #220]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 8005298:	2200      	movs	r2, #0
 800529a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800529c:	4b35      	ldr	r3, [pc, #212]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052a2:	4b34      	ldr	r3, [pc, #208]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052a8:	4b32      	ldr	r3, [pc, #200]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80052ae:	4b31      	ldr	r3, [pc, #196]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80052b4:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80052ba:	482e      	ldr	r0, [pc, #184]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 80052bc:	f001 ffd6 	bl	800726c <HAL_DMA_Init>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 80052c6:	f7ff fb2b 	bl	8004920 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a29      	ldr	r2, [pc, #164]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 80052ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80052d0:	4a28      	ldr	r2, [pc, #160]	; (8005374 <HAL_UART_MspInit+0x1f0>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80052d6:	e040      	b.n	800535a <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a27      	ldr	r2, [pc, #156]	; (800537c <HAL_UART_MspInit+0x1f8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d13b      	bne.n	800535a <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80052e2:	2302      	movs	r3, #2
 80052e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80052e6:	2300      	movs	r3, #0
 80052e8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052ea:	f107 0318 	add.w	r3, r7, #24
 80052ee:	4618      	mov	r0, r3
 80052f0:	f006 f93e 	bl	800b570 <HAL_RCCEx_PeriphCLKConfig>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_UART_MspInit+0x17a>
      Error_Handler();
 80052fa:	f7ff fb11 	bl	8004920 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80052fe:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 8005304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005308:	6593      	str	r3, [r2, #88]	; 0x58
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 8005318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531a:	4a13      	ldr	r2, [pc, #76]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <HAL_UART_MspInit+0x1e4>)
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800532e:	230c      	movs	r3, #12
 8005330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005334:	2302      	movs	r3, #2
 8005336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533a:	2300      	movs	r3, #0
 800533c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005340:	2303      	movs	r3, #3
 8005342:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005346:	2307      	movs	r3, #7
 8005348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800534c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005350:	4619      	mov	r1, r3
 8005352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005356:	f002 fab7 	bl	80078c8 <HAL_GPIO_Init>
}
 800535a:	bf00      	nop
 800535c:	37c0      	adds	r7, #192	; 0xc0
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40013800 	.word	0x40013800
 8005368:	40021000 	.word	0x40021000
 800536c:	200007f4 	.word	0x200007f4
 8005370:	40020008 	.word	0x40020008
 8005374:	20000854 	.word	0x20000854
 8005378:	4002001c 	.word	0x4002001c
 800537c:	40004400 	.word	0x40004400

08005380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005384:	f006 f818 	bl	800b3b8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8005388:	e7fe      	b.n	8005388 <NMI_Handler+0x8>

0800538a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800538a:	b480      	push	{r7}
 800538c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800538e:	e7fe      	b.n	800538e <HardFault_Handler+0x4>

08005390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005394:	e7fe      	b.n	8005394 <MemManage_Handler+0x4>

08005396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800539a:	e7fe      	b.n	800539a <BusFault_Handler+0x4>

0800539c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053a0:	e7fe      	b.n	80053a0 <UsageFault_Handler+0x4>

080053a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053be:	b480      	push	{r7}
 80053c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053d0:	f001 fdf6 	bl	8006fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80053dc:	4802      	ldr	r0, [pc, #8]	; (80053e8 <DMA1_Channel1_IRQHandler+0x10>)
 80053de:	f002 f923 	bl	8007628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200007f4 	.word	0x200007f4

080053ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <DMA1_Channel2_IRQHandler+0x10>)
 80053f2:	f002 f919 	bl	8007628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000854 	.word	0x20000854

08005400 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 8005404:	4b14      	ldr	r3, [pc, #80]	; (8005458 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d006      	beq.n	800541c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 800541a:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d006      	beq.n	8005434 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b2da      	uxtb	r2, r3
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8005432:	701a      	strb	r2, [r3, #0]
	if (tickSync) {tickSync--;}
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <TIM1_TRG_COM_TIM17_IRQHandler+0x4c>
 800543e:	4b08      	ldr	r3, [pc, #32]	; (8005460 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 800544a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800544c:	4805      	ldr	r0, [pc, #20]	; (8005464 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 800544e:	f00a fcb6 	bl	800fdbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005452:	bf00      	nop
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000f00 	.word	0x20000f00
 800545c:	20000f01 	.word	0x20000f01
 8005460:	20000f02 	.word	0x20000f02
 8005464:	20000680 	.word	0x20000680

08005468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800546c:	4802      	ldr	r0, [pc, #8]	; (8005478 <USART1_IRQHandler+0x10>)
 800546e:	f00b fb8d 	bl	8010b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200006cc 	.word	0x200006cc

0800547c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 8005482:	4b22      	ldr	r3, [pc, #136]	; (800550c <USART2_IRQHandler+0x90>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005488:	b29b      	uxth	r3, r3
 800548a:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 800548c:	4b20      	ldr	r3, [pc, #128]	; (8005510 <USART2_IRQHandler+0x94>)
 800548e:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8005490:	4b20      	ldr	r3, [pc, #128]	; (8005514 <USART2_IRQHandler+0x98>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <USART2_IRQHandler+0x94>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	b2c8      	uxtb	r0, r1
 800549e:	491c      	ldr	r1, [pc, #112]	; (8005510 <USART2_IRQHandler+0x94>)
 80054a0:	7008      	strb	r0, [r1, #0]
 80054a2:	4413      	add	r3, r2
 80054a4:	79fa      	ldrb	r2, [r7, #7]
 80054a6:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b0a      	cmp	r3, #10
 80054ac:	d126      	bne.n	80054fc <USART2_IRQHandler+0x80>
 80054ae:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <USART2_IRQHandler+0x9c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d022      	beq.n	80054fc <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 80054b6:	4b17      	ldr	r3, [pc, #92]	; (8005514 <USART2_IRQHandler+0x98>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a15      	ldr	r2, [pc, #84]	; (8005510 <USART2_IRQHandler+0x94>)
 80054bc:	7812      	ldrb	r2, [r2, #0]
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	4413      	add	r3, r2
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <USART2_IRQHandler+0xa0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	4a13      	ldr	r2, [pc, #76]	; (800551c <USART2_IRQHandler+0xa0>)
 80054d0:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 80054d2:	4b11      	ldr	r3, [pc, #68]	; (8005518 <USART2_IRQHandler+0x9c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f083 0301 	eor.w	r3, r3, #1
 80054da:	4a0f      	ldr	r2, [pc, #60]	; (8005518 <USART2_IRQHandler+0x9c>)
 80054dc:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <USART2_IRQHandler+0x94>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <USART2_IRQHandler+0x98>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <USART2_IRQHandler+0xa4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d103      	bne.n	80054f6 <USART2_IRQHandler+0x7a>
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <USART2_IRQHandler+0x98>)
 80054f0:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <USART2_IRQHandler+0xa8>)
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	e002      	b.n	80054fc <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <USART2_IRQHandler+0x98>)
 80054f8:	4a09      	ldr	r2, [pc, #36]	; (8005520 <USART2_IRQHandler+0xa4>)
 80054fa:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054fc:	4803      	ldr	r0, [pc, #12]	; (800550c <USART2_IRQHandler+0x90>)
 80054fe:	f00b fb45 	bl	8010b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000760 	.word	0x20000760
 8005510:	20000ef8 	.word	0x20000ef8
 8005514:	20000ef4 	.word	0x20000ef4
 8005518:	20000000 	.word	0x20000000
 800551c:	20000efc 	.word	0x20000efc
 8005520:	200008b4 	.word	0x200008b4
 8005524:	20000bd4 	.word	0x20000bd4

08005528 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800552c:	4802      	ldr	r0, [pc, #8]	; (8005538 <SDMMC1_IRQHandler+0x10>)
 800552e:	f007 ffe3 	bl	800d4f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005532:	bf00      	nop
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	2000059c 	.word	0x2000059c

0800553c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005540:	4802      	ldr	r0, [pc, #8]	; (800554c <OTG_FS_IRQHandler+0x10>)
 8005542:	f003 ffdd 	bl	8009500 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005546:	bf00      	nop
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20002890 	.word	0x20002890

08005550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <SystemInit+0x20>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	4a05      	ldr	r2, [pc, #20]	; (8005570 <SystemInit+0x20>)
 800555c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	e000ed00 	.word	0xe000ed00

08005574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005578:	f7ff ffea 	bl	8005550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800557c:	480c      	ldr	r0, [pc, #48]	; (80055b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800557e:	490d      	ldr	r1, [pc, #52]	; (80055b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005580:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <LoopForever+0xe>)
  movs r3, #0
 8005582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005584:	e002      	b.n	800558c <LoopCopyDataInit>

08005586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800558a:	3304      	adds	r3, #4

0800558c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800558c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800558e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005590:	d3f9      	bcc.n	8005586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005594:	4c0a      	ldr	r4, [pc, #40]	; (80055c0 <LoopForever+0x16>)
  movs r3, #0
 8005596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005598:	e001      	b.n	800559e <LoopFillZerobss>

0800559a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800559a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800559c:	3204      	adds	r2, #4

0800559e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800559e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055a0:	d3fb      	bcc.n	800559a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80055a2:	f014 f84f 	bl	8019644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055a6:	f7fd ff7f 	bl	80034a8 <main>

080055aa <LoopForever>:

LoopForever:
    b LoopForever
 80055aa:	e7fe      	b.n	80055aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80055ac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80055b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055b4:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80055b8:	0801d140 	.word	0x0801d140
  ldr r2, =_sbss
 80055bc:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80055c0:	20002fd0 	.word	0x20002fd0

080055c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055c4:	e7fe      	b.n	80055c4 <ADC1_IRQHandler>
	...

080055c8 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e051      	b.n	8005688 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	7b1a      	ldrb	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <LSM6DSO_RegisterBusIO+0xcc>)
 8005620:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1c      	ldr	r2, [pc, #112]	; (8005698 <LSM6DSO_RegisterBusIO+0xd0>)
 8005626:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e020      	b.n	8005688 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4798      	blx	r3
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e016      	b.n	8005688 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d112      	bne.n	8005688 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800566c:	230c      	movs	r3, #12
 800566e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005670:	7afb      	ldrb	r3, [r7, #11]
 8005672:	461a      	mov	r2, r3
 8005674:	2112      	movs	r1, #18
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fc98 	bl	8005fac <LSM6DSO_Write_Reg>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005686:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	08006451 	.word	0x08006451
 8005698:	08006487 	.word	0x08006487

0800569c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3320      	adds	r3, #32
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 fb5e 	bl	8006d6c <lsm6dso_i3c_disable_set>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ba:	e060      	b.n	800577e <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3320      	adds	r3, #32
 80056c0:	2101      	movs	r1, #1
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fb2c 	bl	8006d20 <lsm6dso_auto_increment_set>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d2:	e054      	b.n	800577e <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3320      	adds	r3, #32
 80056d8:	2101      	movs	r1, #1
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 fa3e 	bl	8006b5c <lsm6dso_block_data_update_set>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ea:	e048      	b.n	800577e <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3320      	adds	r3, #32
 80056f0:	2100      	movs	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 fb80 	bl	8006df8 <lsm6dso_fifo_mode_set>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005702:	e03c      	b.n	800577e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2204      	movs	r2, #4
 8005708:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3320      	adds	r3, #32
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f000 ff60 	bl	80065d8 <lsm6dso_xl_data_rate_set>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005722:	e02c      	b.n	800577e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3320      	adds	r3, #32
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fef6 	bl	800651c <lsm6dso_xl_full_scale_set>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8005736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800573a:	e020      	b.n	800577e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2204      	movs	r2, #4
 8005740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3320      	adds	r3, #32
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f8a8 	bl	80068a0 <lsm6dso_gy_data_rate_set>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575a:	e010      	b.n	800577e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3320      	adds	r3, #32
 8005760:	2106      	movs	r1, #6
 8005762:	4618      	mov	r0, r3
 8005764:	f001 f834 	bl	80067d0 <lsm6dso_gy_full_scale_set>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800576e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005772:	e004      	b.n	800577e <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e014      	b.n	80057c6 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f103 0220 	add.w	r2, r3, #32
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f000 ff14 	bl	80065d8 <lsm6dso_xl_data_rate_set>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80057b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ba:	e004      	b.n	80057c6 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3320      	adds	r3, #32
 80057e2:	f107 020b 	add.w	r2, r7, #11
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 febd 	bl	8006568 <lsm6dso_xl_full_scale_get>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f8:	e023      	b.n	8005842 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d81b      	bhi.n	8005838 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	08005819 	.word	0x08005819
 800580c:	08005831 	.word	0x08005831
 8005810:	08005821 	.word	0x08005821
 8005814:	08005829 	.word	0x08005829
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	4a0c      	ldr	r2, [pc, #48]	; (800584c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800581c:	601a      	str	r2, [r3, #0]
      break;
 800581e:	e00f      	b.n	8005840 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	4a0b      	ldr	r2, [pc, #44]	; (8005850 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005824:	601a      	str	r2, [r3, #0]
      break;
 8005826:	e00b      	b.n	8005840 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <LSM6DSO_ACC_GetSensitivity+0x84>)
 800582c:	601a      	str	r2, [r3, #0]
      break;
 800582e:	e007      	b.n	8005840 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4a09      	ldr	r2, [pc, #36]	; (8005858 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005834:	601a      	str	r2, [r3, #0]
      break;
 8005836:	e003      	b.n	8005840 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800583c:	60fb      	str	r3, [r7, #12]
      break;
 800583e:	bf00      	nop
  }

  return ret;
 8005840:	68fb      	ldr	r3, [r7, #12]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	3d79db23 	.word	0x3d79db23
 8005850:	3df9db23 	.word	0x3df9db23
 8005854:	3e79db23 	.word	0x3e79db23
 8005858:	3ef9db23 	.word	0x3ef9db23

0800585c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005868:	2100      	movs	r1, #0
 800586a:	ed97 0a00 	vldr	s0, [r7]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f806 	bl	8005880 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005874:	4603      	mov	r3, r0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08c      	sub	sp, #48	; 0x30
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	ed87 0a02 	vstr	s0, [r7, #8]
 800588c:	460b      	mov	r3, r1
 800588e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	2b02      	cmp	r3, #2
 800589c:	f000 80ea 	beq.w	8005a74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	f300 8163 	bgt.w	8005b6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d074      	beq.n	8005998 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80058ae:	e15d      	b.n	8005b6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f103 0020 	add.w	r0, r3, #32
 80058b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058ba:	2301      	movs	r3, #1
 80058bc:	2114      	movs	r1, #20
 80058be:	f000 fdfd 	bl	80064bc <lsm6dso_read_reg>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058cc:	e16c      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80058ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d025      	beq.n	8005928 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d10b      	bne.n	80058fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3320      	adds	r3, #32
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fe73 	bl	80065d8 <lsm6dso_xl_data_rate_set>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058fc:	e154      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80058fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005902:	f36f 13c7 	bfc	r3, #7, #1
 8005906:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f103 0020 	add.w	r0, r3, #32
 8005910:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005914:	2301      	movs	r3, #1
 8005916:	2114      	movs	r1, #20
 8005918:	f000 fde8 	bl	80064ec <lsm6dso_write_reg>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005926:	e13f      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f103 0020 	add.w	r0, r3, #32
 800592e:	f107 0220 	add.w	r2, r7, #32
 8005932:	2301      	movs	r3, #1
 8005934:	2115      	movs	r1, #21
 8005936:	f000 fdc1 	bl	80064bc <lsm6dso_read_reg>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005944:	e130      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005946:	f897 3020 	ldrb.w	r3, [r7, #32]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d014      	beq.n	800597e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8005954:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005958:	f36f 1304 	bfc	r3, #4, #1
 800595c:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f103 0020 	add.w	r0, r3, #32
 8005966:	f107 0220 	add.w	r2, r7, #32
 800596a:	2301      	movs	r3, #1
 800596c:	2115      	movs	r1, #21
 800596e:	f000 fdbd 	bl	80064ec <lsm6dso_write_reg>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800597c:	e114      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800597e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005982:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800598a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598e:	d400      	bmi.n	8005992 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8005990:	e0f0      	b.n	8005b74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8005992:	4b87      	ldr	r3, [pc, #540]	; (8005bb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
 8005996:	e0ed      	b.n	8005b74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f103 0020 	add.w	r0, r3, #32
 800599e:	f107 021c 	add.w	r2, r7, #28
 80059a2:	2301      	movs	r3, #1
 80059a4:	2114      	movs	r1, #20
 80059a6:	f000 fd89 	bl	80064bc <lsm6dso_read_reg>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059b4:	e0f8      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80059b6:	7f3b      	ldrb	r3, [r7, #28]
 80059b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d023      	beq.n	8005a0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d10b      	bne.n	80059e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3320      	adds	r3, #32
 80059d0:	2100      	movs	r1, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fe00 	bl	80065d8 <lsm6dso_xl_data_rate_set>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80059de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059e2:	e0e1      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80059e4:	7f3b      	ldrb	r3, [r7, #28]
 80059e6:	f36f 13c7 	bfc	r3, #7, #1
 80059ea:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f103 0020 	add.w	r0, r3, #32
 80059f2:	f107 021c 	add.w	r2, r7, #28
 80059f6:	2301      	movs	r3, #1
 80059f8:	2114      	movs	r1, #20
 80059fa:	f000 fd77 	bl	80064ec <lsm6dso_write_reg>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8005a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a08:	e0ce      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f103 0020 	add.w	r0, r3, #32
 8005a10:	f107 0218 	add.w	r2, r7, #24
 8005a14:	2301      	movs	r3, #1
 8005a16:	2115      	movs	r1, #21
 8005a18:	f000 fd50 	bl	80064bc <lsm6dso_read_reg>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a26:	e0bf      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8005a28:	7e3b      	ldrb	r3, [r7, #24]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d112      	bne.n	8005a5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8005a34:	7e3b      	ldrb	r3, [r7, #24]
 8005a36:	f043 0310 	orr.w	r3, r3, #16
 8005a3a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f103 0020 	add.w	r0, r3, #32
 8005a42:	f107 0218 	add.w	r2, r7, #24
 8005a46:	2301      	movs	r3, #1
 8005a48:	2115      	movs	r1, #21
 8005a4a:	f000 fd4f 	bl	80064ec <lsm6dso_write_reg>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a58:	e0a6      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005a5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005a5e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005bb4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6a:	dc00      	bgt.n	8005a6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8005a6c:	e082      	b.n	8005b74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005a6e:	4b52      	ldr	r3, [pc, #328]	; (8005bb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a72:	e07f      	b.n	8005b74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f103 0020 	add.w	r0, r3, #32
 8005a7a:	f107 0210 	add.w	r2, r7, #16
 8005a7e:	2301      	movs	r3, #1
 8005a80:	2115      	movs	r1, #21
 8005a82:	f000 fd1b 	bl	80064bc <lsm6dso_read_reg>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a90:	e08a      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005a92:	7c3b      	ldrb	r3, [r7, #16]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d012      	beq.n	8005ac4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8005a9e:	7c3b      	ldrb	r3, [r7, #16]
 8005aa0:	f36f 1304 	bfc	r3, #4, #1
 8005aa4:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f103 0020 	add.w	r0, r3, #32
 8005aac:	f107 0210 	add.w	r2, r7, #16
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	2115      	movs	r1, #21
 8005ab4:	f000 fd1a 	bl	80064ec <lsm6dso_write_reg>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac2:	e071      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d108      	bne.n	8005ae0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f8ef 	bl	8005cb2 <LSM6DSO_GYRO_Disable>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8005ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ade:	e063      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f103 0020 	add.w	r0, r3, #32
 8005ae6:	f107 0214 	add.w	r2, r7, #20
 8005aea:	2301      	movs	r3, #1
 8005aec:	2114      	movs	r1, #20
 8005aee:	f000 fce5 	bl	80064bc <lsm6dso_read_reg>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005afc:	e054      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8005afe:	7d3b      	ldrb	r3, [r7, #20]
 8005b00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d123      	bne.n	8005b52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10b      	bne.n	8005b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3320      	adds	r3, #32
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fd5c 	bl	80065d8 <lsm6dso_xl_data_rate_set>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8005b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b2a:	e03d      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8005b2c:	7d3b      	ldrb	r3, [r7, #20]
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f103 0020 	add.w	r0, r3, #32
 8005b3a:	f107 0214 	add.w	r2, r7, #20
 8005b3e:	2301      	movs	r3, #1
 8005b40:	2114      	movs	r1, #20
 8005b42:	f000 fcd3 	bl	80064ec <lsm6dso_write_reg>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b50:	e02a      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005b52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005b56:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005bb4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b62:	dc00      	bgt.n	8005b66 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8005b64:	e006      	b.n	8005b74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6a:	e003      	b.n	8005b74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005b72:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b7a:	d102      	bne.n	8005b82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b80:	e012      	b.n	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d106      	bne.n	8005b9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005b8c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fa27 	bl	8005fe4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8005b96:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b98:	e005      	b.n	8005ba6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005b9a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fab8 	bl	8006114 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8005ba4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3730      	adds	r7, #48	; 0x30
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	41480000 	.word	0x41480000
 8005bb4:	43500000 	.word	0x43500000
 8005bb8:	43500000 	.word	0x43500000

08005bbc <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3320      	adds	r3, #32
 8005bd0:	f107 0210 	add.w	r2, r7, #16
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 f831 	bl	8006c3e <lsm6dso_acceleration_raw_get>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8005be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005be6:	e03c      	b.n	8005c62 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005be8:	f107 030c 	add.w	r3, r7, #12
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fdee 	bl	80057d0 <LSM6DSO_ACC_GetSensitivity>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8005bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bfe:	e030      	b.n	8005c62 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005c00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c18:	ee17 2a90 	vmov	r2, s15
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005c20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c38:	ee17 2a90 	vmov	r2, s15
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005c40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c58:	ee17 2a90 	vmov	r2, s15
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e014      	b.n	8005caa <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f103 0220 	add.w	r2, r3, #32
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f000 fe06 	bl	80068a0 <lsm6dso_gy_data_rate_set>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c9e:	e004      	b.n	8005caa <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e01f      	b.n	8005d08 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f103 0220 	add.w	r2, r3, #32
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3334      	adds	r3, #52	; 0x34
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f000 fedf 	bl	8006a98 <lsm6dso_gy_data_rate_get>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ce4:	e010      	b.n	8005d08 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3320      	adds	r3, #32
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fdd7 	bl	80068a0 <lsm6dso_gy_data_rate_set>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cfc:	e004      	b.n	8005d08 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3320      	adds	r3, #32
 8005d22:	f107 020b 	add.w	r2, r7, #11
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fd77 	bl	800681c <lsm6dso_gy_full_scale_get>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d38:	e02d      	b.n	8005d96 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005d3a:	7afb      	ldrb	r3, [r7, #11]
 8005d3c:	2b06      	cmp	r3, #6
 8005d3e:	d825      	bhi.n	8005d8c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8005d40:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d65 	.word	0x08005d65
 8005d50:	08005d75 	.word	0x08005d75
 8005d54:	08005d8d 	.word	0x08005d8d
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d8d 	.word	0x08005d8d
 8005d60:	08005d85 	.word	0x08005d85
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	4a0e      	ldr	r2, [pc, #56]	; (8005da0 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8005d68:	601a      	str	r2, [r3, #0]
      break;
 8005d6a:	e013      	b.n	8005d94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4a0d      	ldr	r2, [pc, #52]	; (8005da4 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8005d70:	601a      	str	r2, [r3, #0]
      break;
 8005d72:	e00f      	b.n	8005d94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	4a0c      	ldr	r2, [pc, #48]	; (8005da8 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8005d78:	601a      	str	r2, [r3, #0]
      break;
 8005d7a:	e00b      	b.n	8005d94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	4a0b      	ldr	r2, [pc, #44]	; (8005dac <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005d80:	601a      	str	r2, [r3, #0]
      break;
 8005d82:	e007      	b.n	8005d94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8005d88:	601a      	str	r2, [r3, #0]
      break;
 8005d8a:	e003      	b.n	8005d94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8005d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d90:	60fb      	str	r3, [r7, #12]
      break;
 8005d92:	bf00      	nop
  }

  return ret;
 8005d94:	68fb      	ldr	r3, [r7, #12]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	408c0000 	.word	0x408c0000
 8005da4:	410c0000 	.word	0x410c0000
 8005da8:	418c0000 	.word	0x418c0000
 8005dac:	420c0000 	.word	0x420c0000
 8005db0:	428c0000 	.word	0x428c0000

08005db4 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	ed97 0a00 	vldr	s0, [r7]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f806 	bl	8005dd8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005dcc:	4603      	mov	r3, r0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005de4:	460b      	mov	r3, r1
 8005de6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d028      	beq.n	8005e4c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005dfa:	e05c      	b.n	8005eb6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f103 0020 	add.w	r0, r3, #32
 8005e02:	f107 0214 	add.w	r2, r7, #20
 8005e06:	2301      	movs	r3, #1
 8005e08:	2116      	movs	r1, #22
 8005e0a:	f000 fb57 	bl	80064bc <lsm6dso_read_reg>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e18:	e06c      	b.n	8005ef4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8005e1a:	7d3b      	ldrb	r3, [r7, #20]
 8005e1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d04b      	beq.n	8005ebe <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005e26:	7d3b      	ldrb	r3, [r7, #20]
 8005e28:	f36f 13c7 	bfc	r3, #7, #1
 8005e2c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f103 0020 	add.w	r0, r3, #32
 8005e34:	f107 0214 	add.w	r2, r7, #20
 8005e38:	2301      	movs	r3, #1
 8005e3a:	2116      	movs	r1, #22
 8005e3c:	f000 fb56 	bl	80064ec <lsm6dso_write_reg>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d03b      	beq.n	8005ebe <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e4a:	e053      	b.n	8005ef4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f103 0020 	add.w	r0, r3, #32
 8005e52:	f107 0210 	add.w	r2, r7, #16
 8005e56:	2301      	movs	r3, #1
 8005e58:	2116      	movs	r1, #22
 8005e5a:	f000 fb2f 	bl	80064bc <lsm6dso_read_reg>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e68:	e044      	b.n	8005ef4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8005e6a:	7c3b      	ldrb	r3, [r7, #16]
 8005e6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d112      	bne.n	8005e9c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8005e76:	7c3b      	ldrb	r3, [r7, #16]
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f103 0020 	add.w	r0, r3, #32
 8005e84:	f107 0210 	add.w	r2, r7, #16
 8005e88:	2301      	movs	r3, #1
 8005e8a:	2116      	movs	r1, #22
 8005e8c:	f000 fb2e 	bl	80064ec <lsm6dso_write_reg>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e9a:	e02b      	b.n	8005ef4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ea0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005efc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8005ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eac:	dc00      	bgt.n	8005eb0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8005eae:	e007      	b.n	8005ec0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8005eb0:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	e004      	b.n	8005ec0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eba:	61fb      	str	r3, [r7, #28]
      break;
 8005ebc:	e000      	b.n	8005ec0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8005ebe:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec6:	d102      	bne.n	8005ece <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ecc:	e012      	b.n	8005ef4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005ed8:	ed97 0a06 	vldr	s0, [r7, #24]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 f9a9 	bl	8006234 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8005ee2:	61f8      	str	r0, [r7, #28]
 8005ee4:	e005      	b.n	8005ef2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005ee6:	ed97 0a06 	vldr	s0, [r7, #24]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fa2e 	bl	800634c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8005ef0:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3720      	adds	r7, #32
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	43500000 	.word	0x43500000
 8005f00:	43500000 	.word	0x43500000

08005f04 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3320      	adds	r3, #32
 8005f12:	f107 0210 	add.w	r2, r7, #16
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fe45 	bl	8006ba8 <lsm6dso_angular_rate_raw_get>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f28:	e03c      	b.n	8005fa4 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005f2a:	f107 030c 	add.w	r3, r7, #12
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff feed 	bl	8005d10 <LSM6DSO_GYRO_GetSensitivity>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8005f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f40:	e030      	b.n	8005fa4 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005f42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f5a:	ee17 2a90 	vmov	r2, s15
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005f62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f7a:	ee17 2a90 	vmov	r2, s15
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005f82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f9a:	ee17 2a90 	vmov	r2, s15
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f103 0020 	add.w	r0, r3, #32
 8005fc2:	1cba      	adds	r2, r7, #2
 8005fc4:	78f9      	ldrb	r1, [r7, #3]
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f000 fa90 	bl	80064ec <lsm6dso_write_reg>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd6:	e000      	b.n	8005fda <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005ff0:	edd7 7a00 	vldr	s15, [r7]
 8005ff4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80060f4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006000:	d801      	bhi.n	8006006 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006002:	230b      	movs	r3, #11
 8006004:	e063      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006006:	edd7 7a00 	vldr	s15, [r7]
 800600a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800600e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006016:	d801      	bhi.n	800601c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006018:	2301      	movs	r3, #1
 800601a:	e058      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800601c:	edd7 7a00 	vldr	s15, [r7]
 8006020:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602c:	d801      	bhi.n	8006032 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800602e:	2302      	movs	r3, #2
 8006030:	e04d      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006032:	edd7 7a00 	vldr	s15, [r7]
 8006036:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80060f8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800603a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800603e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006042:	d801      	bhi.n	8006048 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006044:	2303      	movs	r3, #3
 8006046:	e042      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006048:	edd7 7a00 	vldr	s15, [r7]
 800604c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80060fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006058:	d801      	bhi.n	800605e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800605a:	2304      	movs	r3, #4
 800605c:	e037      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800605e:	edd7 7a00 	vldr	s15, [r7]
 8006062:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006100 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800606a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606e:	d801      	bhi.n	8006074 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006070:	2305      	movs	r3, #5
 8006072:	e02c      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006074:	edd7 7a00 	vldr	s15, [r7]
 8006078:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006104 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 800607c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006084:	d801      	bhi.n	800608a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006086:	2306      	movs	r3, #6
 8006088:	e021      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800608a:	edd7 7a00 	vldr	s15, [r7]
 800608e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006108 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609a:	d801      	bhi.n	80060a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800609c:	2307      	movs	r3, #7
 800609e:	e016      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80060a0:	edd7 7a00 	vldr	s15, [r7]
 80060a4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800610c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80060a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b0:	d801      	bhi.n	80060b6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80060b2:	2308      	movs	r3, #8
 80060b4:	e00b      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80060b6:	edd7 7a00 	vldr	s15, [r7]
 80060ba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006110 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80060be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c6:	d801      	bhi.n	80060cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80060c8:	2309      	movs	r3, #9
 80060ca:	e000      	b.n	80060ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80060cc:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80060ce:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3320      	adds	r3, #32
 80060d4:	7bfa      	ldrb	r2, [r7, #15]
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fa7d 	bl	80065d8 <lsm6dso_xl_data_rate_set>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80060e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060e8:	e000      	b.n	80060ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	3fcccccd 	.word	0x3fcccccd
 80060f8:	42500000 	.word	0x42500000
 80060fc:	42d00000 	.word	0x42d00000
 8006100:	43500000 	.word	0x43500000
 8006104:	43d08000 	.word	0x43d08000
 8006108:	44504000 	.word	0x44504000
 800610c:	44d06000 	.word	0x44d06000
 8006110:	45505000 	.word	0x45505000

08006114 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006120:	edd7 7a00 	vldr	s15, [r7]
 8006124:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006214 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006130:	d801      	bhi.n	8006136 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006132:	230b      	movs	r3, #11
 8006134:	e063      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006136:	edd7 7a00 	vldr	s15, [r7]
 800613a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800613e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006146:	d801      	bhi.n	800614c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006148:	2301      	movs	r3, #1
 800614a:	e058      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800614c:	edd7 7a00 	vldr	s15, [r7]
 8006150:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615c:	d801      	bhi.n	8006162 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800615e:	2302      	movs	r3, #2
 8006160:	e04d      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006162:	edd7 7a00 	vldr	s15, [r7]
 8006166:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006218 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800616a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800616e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006172:	d801      	bhi.n	8006178 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006174:	2303      	movs	r3, #3
 8006176:	e042      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006178:	edd7 7a00 	vldr	s15, [r7]
 800617c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800621c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	d801      	bhi.n	800618e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800618a:	2304      	movs	r3, #4
 800618c:	e037      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800618e:	edd7 7a00 	vldr	s15, [r7]
 8006192:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006220 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619e:	d801      	bhi.n	80061a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80061a0:	2305      	movs	r3, #5
 80061a2:	e02c      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80061a4:	edd7 7a00 	vldr	s15, [r7]
 80061a8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006224 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80061ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b4:	d801      	bhi.n	80061ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80061b6:	2306      	movs	r3, #6
 80061b8:	e021      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80061ba:	edd7 7a00 	vldr	s15, [r7]
 80061be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006228 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80061c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ca:	d801      	bhi.n	80061d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80061cc:	2307      	movs	r3, #7
 80061ce:	e016      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80061d0:	edd7 7a00 	vldr	s15, [r7]
 80061d4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800622c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80061d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e0:	d801      	bhi.n	80061e6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80061e2:	2308      	movs	r3, #8
 80061e4:	e00b      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80061e6:	edd7 7a00 	vldr	s15, [r7]
 80061ea:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006230 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80061ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	d801      	bhi.n	80061fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80061f8:	2309      	movs	r3, #9
 80061fa:	e000      	b.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80061fc:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	3fcccccd 	.word	0x3fcccccd
 8006218:	42500000 	.word	0x42500000
 800621c:	42d00000 	.word	0x42d00000
 8006220:	43500000 	.word	0x43500000
 8006224:	43d08000 	.word	0x43d08000
 8006228:	44504000 	.word	0x44504000
 800622c:	44d06000 	.word	0x44d06000
 8006230:	45505000 	.word	0x45505000

08006234 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006240:	edd7 7a00 	vldr	s15, [r7]
 8006244:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800624c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006250:	d801      	bhi.n	8006256 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006252:	2301      	movs	r3, #1
 8006254:	e058      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006256:	edd7 7a00 	vldr	s15, [r7]
 800625a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800625e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006266:	d801      	bhi.n	800626c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006268:	2302      	movs	r3, #2
 800626a:	e04d      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800626c:	edd7 7a00 	vldr	s15, [r7]
 8006270:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006330 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627c:	d801      	bhi.n	8006282 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800627e:	2303      	movs	r3, #3
 8006280:	e042      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006282:	edd7 7a00 	vldr	s15, [r7]
 8006286:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006334 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800628a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800628e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006292:	d801      	bhi.n	8006298 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006294:	2304      	movs	r3, #4
 8006296:	e037      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006298:	edd7 7a00 	vldr	s15, [r7]
 800629c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006338 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80062a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	d801      	bhi.n	80062ae <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80062aa:	2305      	movs	r3, #5
 80062ac:	e02c      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80062ae:	edd7 7a00 	vldr	s15, [r7]
 80062b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800633c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80062b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062be:	d801      	bhi.n	80062c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80062c0:	2306      	movs	r3, #6
 80062c2:	e021      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80062c4:	edd7 7a00 	vldr	s15, [r7]
 80062c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006340 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80062cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d4:	d801      	bhi.n	80062da <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80062d6:	2307      	movs	r3, #7
 80062d8:	e016      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80062da:	edd7 7a00 	vldr	s15, [r7]
 80062de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006344 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80062e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ea:	d801      	bhi.n	80062f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80062ec:	2308      	movs	r3, #8
 80062ee:	e00b      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80062f0:	edd7 7a00 	vldr	s15, [r7]
 80062f4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006348 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80062f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006300:	d801      	bhi.n	8006306 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006302:	2309      	movs	r3, #9
 8006304:	e000      	b.n	8006308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006306:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006308:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3320      	adds	r3, #32
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fac4 	bl	80068a0 <lsm6dso_gy_data_rate_set>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800631e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006322:	e000      	b.n	8006326 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	42500000 	.word	0x42500000
 8006334:	42d00000 	.word	0x42d00000
 8006338:	43500000 	.word	0x43500000
 800633c:	43d08000 	.word	0x43d08000
 8006340:	44504000 	.word	0x44504000
 8006344:	44d06000 	.word	0x44d06000
 8006348:	45505000 	.word	0x45505000

0800634c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006358:	edd7 7a00 	vldr	s15, [r7]
 800635c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006368:	d801      	bhi.n	800636e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800636a:	2301      	movs	r3, #1
 800636c:	e058      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800636e:	edd7 7a00 	vldr	s15, [r7]
 8006372:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800637a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637e:	d801      	bhi.n	8006384 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006380:	2302      	movs	r3, #2
 8006382:	e04d      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006384:	edd7 7a00 	vldr	s15, [r7]
 8006388:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006434 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800638c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006394:	d801      	bhi.n	800639a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006396:	2303      	movs	r3, #3
 8006398:	e042      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800639a:	edd7 7a00 	vldr	s15, [r7]
 800639e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006438 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80063a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063aa:	d801      	bhi.n	80063b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80063ac:	2304      	movs	r3, #4
 80063ae:	e037      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063b0:	edd7 7a00 	vldr	s15, [r7]
 80063b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800643c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80063b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c0:	d801      	bhi.n	80063c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80063c2:	2305      	movs	r3, #5
 80063c4:	e02c      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063c6:	edd7 7a00 	vldr	s15, [r7]
 80063ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006440 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80063ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d6:	d801      	bhi.n	80063dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80063d8:	2306      	movs	r3, #6
 80063da:	e021      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063dc:	edd7 7a00 	vldr	s15, [r7]
 80063e0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006444 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80063e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ec:	d801      	bhi.n	80063f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80063ee:	2307      	movs	r3, #7
 80063f0:	e016      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063f2:	edd7 7a00 	vldr	s15, [r7]
 80063f6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006448 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80063fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006402:	d801      	bhi.n	8006408 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006404:	2308      	movs	r3, #8
 8006406:	e00b      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006408:	edd7 7a00 	vldr	s15, [r7]
 800640c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800644c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006418:	d801      	bhi.n	800641e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800641a:	2309      	movs	r3, #9
 800641c:	e000      	b.n	8006420 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800641e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	42500000 	.word	0x42500000
 8006438:	42d00000 	.word	0x42d00000
 800643c:	43500000 	.word	0x43500000
 8006440:	43d08000 	.word	0x43d08000
 8006444:	44504000 	.word	0x44504000
 8006448:	44d06000 	.word	0x44d06000
 800644c:	45505000 	.word	0x45505000

08006450 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006450:	b590      	push	{r4, r7, lr}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	461a      	mov	r2, r3
 800645c:	460b      	mov	r3, r1
 800645e:	72fb      	strb	r3, [r7, #11]
 8006460:	4613      	mov	r3, r2
 8006462:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	695c      	ldr	r4, [r3, #20]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	7b1b      	ldrb	r3, [r3, #12]
 8006470:	b298      	uxth	r0, r3
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	b299      	uxth	r1, r3
 8006476:	893b      	ldrh	r3, [r7, #8]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	47a0      	blx	r4
 800647c:	4603      	mov	r3, r0
}
 800647e:	4618      	mov	r0, r3
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	bd90      	pop	{r4, r7, pc}

08006486 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006486:	b590      	push	{r4, r7, lr}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	461a      	mov	r2, r3
 8006492:	460b      	mov	r3, r1
 8006494:	72fb      	strb	r3, [r7, #11]
 8006496:	4613      	mov	r3, r2
 8006498:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	691c      	ldr	r4, [r3, #16]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	7b1b      	ldrb	r3, [r3, #12]
 80064a6:	b298      	uxth	r0, r3
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	b299      	uxth	r1, r3
 80064ac:	893b      	ldrh	r3, [r7, #8]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	47a0      	blx	r4
 80064b2:	4603      	mov	r3, r0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd90      	pop	{r4, r7, pc}

080064bc <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	461a      	mov	r2, r3
 80064c8:	460b      	mov	r3, r1
 80064ca:	72fb      	strb	r3, [r7, #11]
 80064cc:	4613      	mov	r3, r2
 80064ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685c      	ldr	r4, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68d8      	ldr	r0, [r3, #12]
 80064d8:	893b      	ldrh	r3, [r7, #8]
 80064da:	7af9      	ldrb	r1, [r7, #11]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	47a0      	blx	r4
 80064e0:	6178      	str	r0, [r7, #20]

  return ret;
 80064e2:	697b      	ldr	r3, [r7, #20]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd90      	pop	{r4, r7, pc}

080064ec <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	461a      	mov	r2, r3
 80064f8:	460b      	mov	r3, r1
 80064fa:	72fb      	strb	r3, [r7, #11]
 80064fc:	4613      	mov	r3, r2
 80064fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681c      	ldr	r4, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68d8      	ldr	r0, [r3, #12]
 8006508:	893b      	ldrh	r3, [r7, #8]
 800650a:	7af9      	ldrb	r1, [r7, #11]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	47a0      	blx	r4
 8006510:	6178      	str	r0, [r7, #20]

  return ret;
 8006512:	697b      	ldr	r3, [r7, #20]
}
 8006514:	4618      	mov	r0, r3
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	bd90      	pop	{r4, r7, pc}

0800651c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006528:	f107 0208 	add.w	r2, r7, #8
 800652c:	2301      	movs	r3, #1
 800652e:	2110      	movs	r1, #16
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff ffc3 	bl	80064bc <lsm6dso_read_reg>
 8006536:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10f      	bne.n	800655e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	b2da      	uxtb	r2, r3
 8006546:	7a3b      	ldrb	r3, [r7, #8]
 8006548:	f362 0383 	bfi	r3, r2, #2, #2
 800654c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800654e:	f107 0208 	add.w	r2, r7, #8
 8006552:	2301      	movs	r3, #1
 8006554:	2110      	movs	r1, #16
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff ffc8 	bl	80064ec <lsm6dso_write_reg>
 800655c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006572:	f107 0208 	add.w	r2, r7, #8
 8006576:	2301      	movs	r3, #1
 8006578:	2110      	movs	r1, #16
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff ff9e 	bl	80064bc <lsm6dso_read_reg>
 8006580:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8006582:	7a3b      	ldrb	r3, [r7, #8]
 8006584:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d81a      	bhi.n	80065c4 <lsm6dso_xl_full_scale_get+0x5c>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <lsm6dso_xl_full_scale_get+0x2c>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065ad 	.word	0x080065ad
 800659c:	080065b5 	.word	0x080065b5
 80065a0:	080065bd 	.word	0x080065bd
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
      break;
 80065aa:	e00f      	b.n	80065cc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
      break;
 80065b2:	e00b      	b.n	80065cc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2202      	movs	r2, #2
 80065b8:	701a      	strb	r2, [r3, #0]
      break;
 80065ba:	e007      	b.n	80065cc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2203      	movs	r2, #3
 80065c0:	701a      	strb	r2, [r3, #0]
      break;
 80065c2:	e003      	b.n	80065cc <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
      break;
 80065ca:	bf00      	nop
  }

  return ret;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop

080065d8 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fc28 	bl	8006e44 <lsm6dso_fsm_enable_get>
 80065f4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 80c4 	bne.w	8006786 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80065fe:	7b3b      	ldrb	r3, [r7, #12]
 8006600:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006604:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006606:	7b3b      	ldrb	r3, [r7, #12]
 8006608:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800660c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800660e:	4313      	orrs	r3, r2
 8006610:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006612:	7b3b      	ldrb	r3, [r7, #12]
 8006614:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006618:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800661a:	4313      	orrs	r3, r2
 800661c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800661e:	7b3b      	ldrb	r3, [r7, #12]
 8006620:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006624:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006626:	4313      	orrs	r3, r2
 8006628:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800662a:	7b3b      	ldrb	r3, [r7, #12]
 800662c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006630:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006632:	4313      	orrs	r3, r2
 8006634:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006636:	7b3b      	ldrb	r3, [r7, #12]
 8006638:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800663c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800663e:	4313      	orrs	r3, r2
 8006640:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006642:	7b3b      	ldrb	r3, [r7, #12]
 8006644:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006648:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800664a:	4313      	orrs	r3, r2
 800664c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800664e:	7b3b      	ldrb	r3, [r7, #12]
 8006650:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006656:	4313      	orrs	r3, r2
 8006658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800665a:	7b7b      	ldrb	r3, [r7, #13]
 800665c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006660:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006662:	4313      	orrs	r3, r2
 8006664:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006666:	7b7b      	ldrb	r3, [r7, #13]
 8006668:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800666c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800666e:	4313      	orrs	r3, r2
 8006670:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006672:	7b7b      	ldrb	r3, [r7, #13]
 8006674:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006678:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800667a:	4313      	orrs	r3, r2
 800667c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800667e:	7b7b      	ldrb	r3, [r7, #13]
 8006680:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006684:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006686:	4313      	orrs	r3, r2
 8006688:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800668a:	7b7b      	ldrb	r3, [r7, #13]
 800668c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006690:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006692:	4313      	orrs	r3, r2
 8006694:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006696:	7b7b      	ldrb	r3, [r7, #13]
 8006698:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800669c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800669e:	4313      	orrs	r3, r2
 80066a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80066a2:	7b7b      	ldrb	r3, [r7, #13]
 80066a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80066a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80066aa:	4313      	orrs	r3, r2
 80066ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80066ae:	7b7b      	ldrb	r3, [r7, #13]
 80066b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80066b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80066b6:	4313      	orrs	r3, r2
 80066b8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d163      	bne.n	8006786 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80066be:	f107 030b 	add.w	r3, r7, #11
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fbdf 	bl	8006e88 <lsm6dso_fsm_data_rate_get>
 80066ca:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d159      	bne.n	8006786 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80066d2:	7afb      	ldrb	r3, [r7, #11]
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d853      	bhi.n	8006780 <lsm6dso_xl_data_rate_set+0x1a8>
 80066d8:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <lsm6dso_xl_data_rate_set+0x108>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	08006703 	.word	0x08006703
 80066e8:	08006721 	.word	0x08006721
 80066ec:	0800674b 	.word	0x0800674b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80066fa:	e045      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	75fb      	strb	r3, [r7, #23]
            break;
 8006700:	e042      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006708:	2302      	movs	r3, #2
 800670a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800670c:	e03c      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d102      	bne.n	800671a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006714:	2302      	movs	r3, #2
 8006716:	75fb      	strb	r3, [r7, #23]
            break;
 8006718:	e036      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	75fb      	strb	r3, [r7, #23]
            break;
 800671e:	e033      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006726:	2303      	movs	r3, #3
 8006728:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800672a:	e02d      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d102      	bne.n	8006738 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006732:	2303      	movs	r3, #3
 8006734:	75fb      	strb	r3, [r7, #23]
            break;
 8006736:	e027      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d102      	bne.n	8006744 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800673e:	2303      	movs	r3, #3
 8006740:	75fb      	strb	r3, [r7, #23]
            break;
 8006742:	e021      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	75fb      	strb	r3, [r7, #23]
            break;
 8006748:	e01e      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006750:	2304      	movs	r3, #4
 8006752:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006754:	e018      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d102      	bne.n	8006762 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800675c:	2304      	movs	r3, #4
 800675e:	75fb      	strb	r3, [r7, #23]
            break;
 8006760:	e012      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d102      	bne.n	800676e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006768:	2304      	movs	r3, #4
 800676a:	75fb      	strb	r3, [r7, #23]
            break;
 800676c:	e00c      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d102      	bne.n	800677a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006774:	2304      	movs	r3, #4
 8006776:	75fb      	strb	r3, [r7, #23]
            break;
 8006778:	e006      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	75fb      	strb	r3, [r7, #23]
            break;
 800677e:	e003      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	75fb      	strb	r3, [r7, #23]
            break;
 8006784:	e000      	b.n	8006788 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8006786:	bf00      	nop
    }
  }

  if (ret == 0)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800678e:	f107 0208 	add.w	r2, r7, #8
 8006792:	2301      	movs	r3, #1
 8006794:	2110      	movs	r1, #16
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fe90 	bl	80064bc <lsm6dso_read_reg>
 800679c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10f      	bne.n	80067c4 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	7a3b      	ldrb	r3, [r7, #8]
 80067ae:	f362 1307 	bfi	r3, r2, #4, #4
 80067b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80067b4:	f107 0208 	add.w	r2, r7, #8
 80067b8:	2301      	movs	r3, #1
 80067ba:	2110      	movs	r1, #16
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fe95 	bl	80064ec <lsm6dso_write_reg>
 80067c2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80067c4:	693b      	ldr	r3, [r7, #16]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop

080067d0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80067dc:	f107 0208 	add.w	r2, r7, #8
 80067e0:	2301      	movs	r3, #1
 80067e2:	2111      	movs	r1, #17
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff fe69 	bl	80064bc <lsm6dso_read_reg>
 80067ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10f      	bne.n	8006812 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	7a3b      	ldrb	r3, [r7, #8]
 80067fc:	f362 0343 	bfi	r3, r2, #1, #3
 8006800:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006802:	f107 0208 	add.w	r2, r7, #8
 8006806:	2301      	movs	r3, #1
 8006808:	2111      	movs	r1, #17
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff fe6e 	bl	80064ec <lsm6dso_write_reg>
 8006810:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006826:	f107 0208 	add.w	r2, r7, #8
 800682a:	2301      	movs	r3, #1
 800682c:	2111      	movs	r1, #17
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fe44 	bl	80064bc <lsm6dso_read_reg>
 8006834:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8006836:	7a3b      	ldrb	r3, [r7, #8]
 8006838:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b06      	cmp	r3, #6
 8006840:	d824      	bhi.n	800688c <lsm6dso_gy_full_scale_get+0x70>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <lsm6dso_gy_full_scale_get+0x2c>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006865 	.word	0x08006865
 800684c:	0800686d 	.word	0x0800686d
 8006850:	08006875 	.word	0x08006875
 8006854:	0800688d 	.word	0x0800688d
 8006858:	0800687d 	.word	0x0800687d
 800685c:	0800688d 	.word	0x0800688d
 8006860:	08006885 	.word	0x08006885
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]
      break;
 800686a:	e013      	b.n	8006894 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2201      	movs	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
      break;
 8006872:	e00f      	b.n	8006894 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2202      	movs	r2, #2
 8006878:	701a      	strb	r2, [r3, #0]
      break;
 800687a:	e00b      	b.n	8006894 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2204      	movs	r2, #4
 8006880:	701a      	strb	r2, [r3, #0]
      break;
 8006882:	e007      	b.n	8006894 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2206      	movs	r2, #6
 8006888:	701a      	strb	r2, [r3, #0]
      break;
 800688a:	e003      	b.n	8006894 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
      break;
 8006892:	bf00      	nop
  }

  return ret;
 8006894:	68fb      	ldr	r3, [r7, #12]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop

080068a0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80068b0:	f107 030c 	add.w	r3, r7, #12
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fac4 	bl	8006e44 <lsm6dso_fsm_enable_get>
 80068bc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f040 80c4 	bne.w	8006a4e <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80068c6:	7b3b      	ldrb	r3, [r7, #12]
 80068c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80068ce:	7b3b      	ldrb	r3, [r7, #12]
 80068d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80068d4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80068d6:	4313      	orrs	r3, r2
 80068d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80068da:	7b3b      	ldrb	r3, [r7, #12]
 80068dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80068e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80068e6:	7b3b      	ldrb	r3, [r7, #12]
 80068e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80068ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80068ee:	4313      	orrs	r3, r2
 80068f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80068f2:	7b3b      	ldrb	r3, [r7, #12]
 80068f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80068f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80068fe:	7b3b      	ldrb	r3, [r7, #12]
 8006900:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006904:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006906:	4313      	orrs	r3, r2
 8006908:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800690a:	7b3b      	ldrb	r3, [r7, #12]
 800690c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006910:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006912:	4313      	orrs	r3, r2
 8006914:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006916:	7b3b      	ldrb	r3, [r7, #12]
 8006918:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800691c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800691e:	4313      	orrs	r3, r2
 8006920:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006922:	7b7b      	ldrb	r3, [r7, #13]
 8006924:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006928:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800692a:	4313      	orrs	r3, r2
 800692c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800692e:	7b7b      	ldrb	r3, [r7, #13]
 8006930:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006934:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006936:	4313      	orrs	r3, r2
 8006938:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800693a:	7b7b      	ldrb	r3, [r7, #13]
 800693c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006940:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006942:	4313      	orrs	r3, r2
 8006944:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006946:	7b7b      	ldrb	r3, [r7, #13]
 8006948:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800694c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800694e:	4313      	orrs	r3, r2
 8006950:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006952:	7b7b      	ldrb	r3, [r7, #13]
 8006954:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006958:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800695a:	4313      	orrs	r3, r2
 800695c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800695e:	7b7b      	ldrb	r3, [r7, #13]
 8006960:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006964:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006966:	4313      	orrs	r3, r2
 8006968:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800696a:	7b7b      	ldrb	r3, [r7, #13]
 800696c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006970:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006972:	4313      	orrs	r3, r2
 8006974:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006976:	7b7b      	ldrb	r3, [r7, #13]
 8006978:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800697c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800697e:	4313      	orrs	r3, r2
 8006980:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006982:	2b01      	cmp	r3, #1
 8006984:	d163      	bne.n	8006a4e <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006986:	f107 030b 	add.w	r3, r7, #11
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fa7b 	bl	8006e88 <lsm6dso_fsm_data_rate_get>
 8006992:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d159      	bne.n	8006a4e <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800699a:	7afb      	ldrb	r3, [r7, #11]
 800699c:	2b03      	cmp	r3, #3
 800699e:	d853      	bhi.n	8006a48 <lsm6dso_gy_data_rate_set+0x1a8>
 80069a0:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <lsm6dso_gy_data_rate_set+0x108>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	080069cb 	.word	0x080069cb
 80069b0:	080069e9 	.word	0x080069e9
 80069b4:	08006a13 	.word	0x08006a13
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80069c2:	e045      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	75fb      	strb	r3, [r7, #23]
            break;
 80069c8:	e042      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80069d0:	2302      	movs	r3, #2
 80069d2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80069d4:	e03c      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d102      	bne.n	80069e2 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80069dc:	2302      	movs	r3, #2
 80069de:	75fb      	strb	r3, [r7, #23]
            break;
 80069e0:	e036      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	75fb      	strb	r3, [r7, #23]
            break;
 80069e6:	e033      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80069ee:	2303      	movs	r3, #3
 80069f0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80069f2:	e02d      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d102      	bne.n	8006a00 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80069fa:	2303      	movs	r3, #3
 80069fc:	75fb      	strb	r3, [r7, #23]
            break;
 80069fe:	e027      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d102      	bne.n	8006a0c <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006a06:	2303      	movs	r3, #3
 8006a08:	75fb      	strb	r3, [r7, #23]
            break;
 8006a0a:	e021      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	75fb      	strb	r3, [r7, #23]
            break;
 8006a10:	e01e      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006a18:	2304      	movs	r3, #4
 8006a1a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006a1c:	e018      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d102      	bne.n	8006a2a <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006a24:	2304      	movs	r3, #4
 8006a26:	75fb      	strb	r3, [r7, #23]
            break;
 8006a28:	e012      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d102      	bne.n	8006a36 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006a30:	2304      	movs	r3, #4
 8006a32:	75fb      	strb	r3, [r7, #23]
            break;
 8006a34:	e00c      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d102      	bne.n	8006a42 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8006a40:	e006      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	75fb      	strb	r3, [r7, #23]
            break;
 8006a46:	e003      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8006a4c:	e000      	b.n	8006a50 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006a4e:	bf00      	nop
    }
  }

  if (ret == 0)
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d107      	bne.n	8006a66 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006a56:	f107 0208 	add.w	r2, r7, #8
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	2111      	movs	r1, #17
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fd2c 	bl	80064bc <lsm6dso_read_reg>
 8006a64:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10f      	bne.n	8006a8c <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	7a3b      	ldrb	r3, [r7, #8]
 8006a76:	f362 1307 	bfi	r3, r2, #4, #4
 8006a7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006a7c:	f107 0208 	add.w	r2, r7, #8
 8006a80:	2301      	movs	r3, #1
 8006a82:	2111      	movs	r1, #17
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff fd31 	bl	80064ec <lsm6dso_write_reg>
 8006a8a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006a8c:	693b      	ldr	r3, [r7, #16]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop

08006a98 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006aa2:	f107 0208 	add.w	r2, r7, #8
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	2111      	movs	r1, #17
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff fd06 	bl	80064bc <lsm6dso_read_reg>
 8006ab0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8006ab2:	7a3b      	ldrb	r3, [r7, #8]
 8006ab4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b0a      	cmp	r3, #10
 8006abc:	d844      	bhi.n	8006b48 <lsm6dso_gy_data_rate_get+0xb0>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <lsm6dso_gy_data_rate_get+0x2c>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006af1 	.word	0x08006af1
 8006ac8:	08006af9 	.word	0x08006af9
 8006acc:	08006b01 	.word	0x08006b01
 8006ad0:	08006b09 	.word	0x08006b09
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006b19 	.word	0x08006b19
 8006adc:	08006b21 	.word	0x08006b21
 8006ae0:	08006b29 	.word	0x08006b29
 8006ae4:	08006b31 	.word	0x08006b31
 8006ae8:	08006b39 	.word	0x08006b39
 8006aec:	08006b41 	.word	0x08006b41
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
      break;
 8006af6:	e02b      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
      break;
 8006afe:	e027      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2202      	movs	r2, #2
 8006b04:	701a      	strb	r2, [r3, #0]
      break;
 8006b06:	e023      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	701a      	strb	r2, [r3, #0]
      break;
 8006b0e:	e01f      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2204      	movs	r2, #4
 8006b14:	701a      	strb	r2, [r3, #0]
      break;
 8006b16:	e01b      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	701a      	strb	r2, [r3, #0]
      break;
 8006b1e:	e017      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2206      	movs	r2, #6
 8006b24:	701a      	strb	r2, [r3, #0]
      break;
 8006b26:	e013      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2207      	movs	r2, #7
 8006b2c:	701a      	strb	r2, [r3, #0]
      break;
 8006b2e:	e00f      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2208      	movs	r2, #8
 8006b34:	701a      	strb	r2, [r3, #0]
      break;
 8006b36:	e00b      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2209      	movs	r2, #9
 8006b3c:	701a      	strb	r2, [r3, #0]
      break;
 8006b3e:	e007      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	220a      	movs	r2, #10
 8006b44:	701a      	strb	r2, [r3, #0]
      break;
 8006b46:	e003      	b.n	8006b50 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	701a      	strb	r2, [r3, #0]
      break;
 8006b4e:	bf00      	nop
  }

  return ret;
 8006b50:	68fb      	ldr	r3, [r7, #12]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop

08006b5c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006b68:	f107 0208 	add.w	r2, r7, #8
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	2112      	movs	r1, #18
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fca3 	bl	80064bc <lsm6dso_read_reg>
 8006b76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10f      	bne.n	8006b9e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	7a3b      	ldrb	r3, [r7, #8]
 8006b88:	f362 1386 	bfi	r3, r2, #6, #1
 8006b8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006b8e:	f107 0208 	add.w	r2, r7, #8
 8006b92:	2301      	movs	r3, #1
 8006b94:	2112      	movs	r1, #18
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fca8 	bl	80064ec <lsm6dso_write_reg>
 8006b9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006bb2:	f107 020c 	add.w	r2, r7, #12
 8006bb6:	2306      	movs	r3, #6
 8006bb8:	2122      	movs	r1, #34	; 0x22
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fc7e 	bl	80064bc <lsm6dso_read_reg>
 8006bc0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006bc2:	7b7b      	ldrb	r3, [r7, #13]
 8006bc4:	b21a      	sxth	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	7b3b      	ldrb	r3, [r7, #12]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	b21a      	sxth	r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006be4:	7bfa      	ldrb	r2, [r7, #15]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	3302      	adds	r3, #2
 8006bea:	b212      	sxth	r2, r2
 8006bec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	3302      	adds	r3, #2
 8006c08:	b212      	sxth	r2, r2
 8006c0a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006c0c:	7c7a      	ldrb	r2, [r7, #17]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	3304      	adds	r3, #4
 8006c12:	b212      	sxth	r2, r2
 8006c14:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	7c3b      	ldrb	r3, [r7, #16]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	4413      	add	r3, r2
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	b212      	sxth	r2, r2
 8006c32:	801a      	strh	r2, [r3, #0]

  return ret;
 8006c34:	697b      	ldr	r3, [r7, #20]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b086      	sub	sp, #24
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006c48:	f107 020c 	add.w	r2, r7, #12
 8006c4c:	2306      	movs	r3, #6
 8006c4e:	2128      	movs	r1, #40	; 0x28
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff fc33 	bl	80064bc <lsm6dso_read_reg>
 8006c56:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006c58:	7b7b      	ldrb	r3, [r7, #13]
 8006c5a:	b21a      	sxth	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	7b3b      	ldrb	r3, [r7, #12]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	4413      	add	r3, r2
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	b21a      	sxth	r2, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006c7a:	7bfa      	ldrb	r2, [r7, #15]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	3302      	adds	r3, #2
 8006c80:	b212      	sxth	r2, r2
 8006c82:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	3302      	adds	r3, #2
 8006c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	b212      	sxth	r2, r2
 8006ca0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006ca2:	7c7a      	ldrb	r2, [r7, #17]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	b212      	sxth	r2, r2
 8006caa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	7c3b      	ldrb	r3, [r7, #16]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	4413      	add	r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	b212      	sxth	r2, r2
 8006cc8:	801a      	strh	r2, [r3, #0]

  return ret;
 8006cca:	697b      	ldr	r3, [r7, #20]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006ce0:	f107 0208 	add.w	r2, r7, #8
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff fbe7 	bl	80064bc <lsm6dso_read_reg>
 8006cee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10f      	bne.n	8006d16 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	f003 0303 	and.w	r3, r3, #3
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	7a3b      	ldrb	r3, [r7, #8]
 8006d00:	f362 1387 	bfi	r3, r2, #6, #2
 8006d04:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006d06:	f107 0208 	add.w	r2, r7, #8
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fbec 	bl	80064ec <lsm6dso_write_reg>
 8006d14:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d16:	68fb      	ldr	r3, [r7, #12]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006d2c:	f107 0208 	add.w	r2, r7, #8
 8006d30:	2301      	movs	r3, #1
 8006d32:	2112      	movs	r1, #18
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fbc1 	bl	80064bc <lsm6dso_read_reg>
 8006d3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10f      	bne.n	8006d62 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	7a3b      	ldrb	r3, [r7, #8]
 8006d4c:	f362 0382 	bfi	r3, r2, #2, #1
 8006d50:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006d52:	f107 0208 	add.w	r2, r7, #8
 8006d56:	2301      	movs	r3, #1
 8006d58:	2112      	movs	r1, #18
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff fbc6 	bl	80064ec <lsm6dso_write_reg>
 8006d60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d62:	68fb      	ldr	r3, [r7, #12]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006d78:	f107 020c 	add.w	r2, r7, #12
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	2118      	movs	r1, #24
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff fb9b 	bl	80064bc <lsm6dso_read_reg>
 8006d86:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d111      	bne.n	8006db2 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	09db      	lsrs	r3, r3, #7
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	7b3b      	ldrb	r3, [r7, #12]
 8006d9c:	f362 0341 	bfi	r3, r2, #1, #1
 8006da0:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006da2:	f107 020c 	add.w	r2, r7, #12
 8006da6:	2301      	movs	r3, #1
 8006da8:	2118      	movs	r1, #24
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fb9e 	bl	80064ec <lsm6dso_write_reg>
 8006db0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d107      	bne.n	8006dc8 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006db8:	f107 0210 	add.w	r2, r7, #16
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	2162      	movs	r1, #98	; 0x62
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fb7b 	bl	80064bc <lsm6dso_read_reg>
 8006dc6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10f      	bne.n	8006dee <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	7c3b      	ldrb	r3, [r7, #16]
 8006dd8:	f362 03c4 	bfi	r3, r2, #3, #2
 8006ddc:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006dde:	f107 0210 	add.w	r2, r7, #16
 8006de2:	2301      	movs	r3, #1
 8006de4:	2162      	movs	r1, #98	; 0x62
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff fb80 	bl	80064ec <lsm6dso_write_reg>
 8006dec:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006dee:	697b      	ldr	r3, [r7, #20]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006e04:	f107 0208 	add.w	r2, r7, #8
 8006e08:	2301      	movs	r3, #1
 8006e0a:	210a      	movs	r1, #10
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff fb55 	bl	80064bc <lsm6dso_read_reg>
 8006e12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10f      	bne.n	8006e3a <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	7a3b      	ldrb	r3, [r7, #8]
 8006e24:	f362 0302 	bfi	r3, r2, #0, #3
 8006e28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006e2a:	f107 0208 	add.w	r2, r7, #8
 8006e2e:	2301      	movs	r3, #1
 8006e30:	210a      	movs	r1, #10
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff fb5a 	bl	80064ec <lsm6dso_write_reg>
 8006e38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006e4e:	2102      	movs	r1, #2
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff ff3f 	bl	8006cd4 <lsm6dso_mem_bank_set>
 8006e56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8006e5e:	2302      	movs	r3, #2
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	2146      	movs	r1, #70	; 0x46
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fb29 	bl	80064bc <lsm6dso_read_reg>
 8006e6a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff ff2d 	bl	8006cd4 <lsm6dso_mem_bank_set>
 8006e7a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006e92:	2102      	movs	r1, #2
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ff1d 	bl	8006cd4 <lsm6dso_mem_bank_set>
 8006e9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8006ea2:	f107 0208 	add.w	r2, r7, #8
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	215f      	movs	r1, #95	; 0x5f
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff fb06 	bl	80064bc <lsm6dso_read_reg>
 8006eb0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d12a      	bne.n	8006f0e <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8006eb8:	7a3b      	ldrb	r3, [r7, #8]
 8006eba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d81b      	bhi.n	8006efc <lsm6dso_fsm_data_rate_get+0x74>
 8006ec4:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <lsm6dso_fsm_data_rate_get+0x44>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006ee5 	.word	0x08006ee5
 8006ed4:	08006eed 	.word	0x08006eed
 8006ed8:	08006ef5 	.word	0x08006ef5
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
        break;
 8006ee2:	e00f      	b.n	8006f04 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]
        break;
 8006eea:	e00b      	b.n	8006f04 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	701a      	strb	r2, [r3, #0]
        break;
 8006ef2:	e007      	b.n	8006f04 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	701a      	strb	r2, [r3, #0]
        break;
 8006efa:	e003      	b.n	8006f04 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
        break;
 8006f02:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006f04:	2100      	movs	r1, #0
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fee4 	bl	8006cd4 <lsm6dso_mem_bank_set>
 8006f0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f22:	2003      	movs	r0, #3
 8006f24:	f000 f960 	bl	80071e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006f28:	200f      	movs	r0, #15
 8006f2a:	f000 f80d 	bl	8006f48 <HAL_InitTick>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	71fb      	strb	r3, [r7, #7]
 8006f38:	e001      	b.n	8006f3e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006f3a:	f7fd ff91 	bl	8004e60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006f54:	4b17      	ldr	r3, [pc, #92]	; (8006fb4 <HAL_InitTick+0x6c>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d023      	beq.n	8006fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006f5c:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <HAL_InitTick+0x70>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4b14      	ldr	r3, [pc, #80]	; (8006fb4 <HAL_InitTick+0x6c>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	4619      	mov	r1, r3
 8006f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 f96d 	bl	8007252 <HAL_SYSTICK_Config>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10f      	bne.n	8006f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	d809      	bhi.n	8006f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f84:	2200      	movs	r2, #0
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f8c:	f000 f937 	bl	80071fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006f90:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <HAL_InitTick+0x74>)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e007      	b.n	8006fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
 8006f9c:	e004      	b.n	8006fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	73fb      	strb	r3, [r7, #15]
 8006fa2:	e001      	b.n	8006fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	2000000c 	.word	0x2000000c
 8006fb8:	20000004 	.word	0x20000004
 8006fbc:	20000008 	.word	0x20000008

08006fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006fc4:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <HAL_IncTick+0x20>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <HAL_IncTick+0x24>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4413      	add	r3, r2
 8006fd0:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <HAL_IncTick+0x24>)
 8006fd2:	6013      	str	r3, [r2, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	2000000c 	.word	0x2000000c
 8006fe4:	20000f04 	.word	0x20000f04

08006fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return uwTick;
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <HAL_GetTick+0x14>)
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000f04 	.word	0x20000f04

08007000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007008:	f7ff ffee 	bl	8006fe8 <HAL_GetTick>
 800700c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007018:	d005      	beq.n	8007026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800701a:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <HAL_Delay+0x44>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007026:	bf00      	nop
 8007028:	f7ff ffde 	bl	8006fe8 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	429a      	cmp	r2, r3
 8007036:	d8f7      	bhi.n	8007028 <HAL_Delay+0x28>
  {
  }
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	2000000c 	.word	0x2000000c

08007048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <__NVIC_SetPriorityGrouping+0x44>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007064:	4013      	ands	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800707a:	4a04      	ldr	r2, [pc, #16]	; (800708c <__NVIC_SetPriorityGrouping+0x44>)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	60d3      	str	r3, [r2, #12]
}
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	e000ed00 	.word	0xe000ed00

08007090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <__NVIC_GetPriorityGrouping+0x18>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	0a1b      	lsrs	r3, r3, #8
 800709a:	f003 0307 	and.w	r3, r3, #7
}
 800709e:	4618      	mov	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	e000ed00 	.word	0xe000ed00

080070ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	db0b      	blt.n	80070d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	f003 021f 	and.w	r2, r3, #31
 80070c4:	4907      	ldr	r1, [pc, #28]	; (80070e4 <__NVIC_EnableIRQ+0x38>)
 80070c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	2001      	movs	r0, #1
 80070ce:	fa00 f202 	lsl.w	r2, r0, r2
 80070d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	e000e100 	.word	0xe000e100

080070e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	db0a      	blt.n	8007112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	490c      	ldr	r1, [pc, #48]	; (8007134 <__NVIC_SetPriority+0x4c>)
 8007102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007106:	0112      	lsls	r2, r2, #4
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	440b      	add	r3, r1
 800710c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007110:	e00a      	b.n	8007128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	4908      	ldr	r1, [pc, #32]	; (8007138 <__NVIC_SetPriority+0x50>)
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	3b04      	subs	r3, #4
 8007120:	0112      	lsls	r2, r2, #4
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	440b      	add	r3, r1
 8007126:	761a      	strb	r2, [r3, #24]
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	e000e100 	.word	0xe000e100
 8007138:	e000ed00 	.word	0xe000ed00

0800713c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800713c:	b480      	push	{r7}
 800713e:	b089      	sub	sp, #36	; 0x24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f1c3 0307 	rsb	r3, r3, #7
 8007156:	2b04      	cmp	r3, #4
 8007158:	bf28      	it	cs
 800715a:	2304      	movcs	r3, #4
 800715c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	3304      	adds	r3, #4
 8007162:	2b06      	cmp	r3, #6
 8007164:	d902      	bls.n	800716c <NVIC_EncodePriority+0x30>
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	3b03      	subs	r3, #3
 800716a:	e000      	b.n	800716e <NVIC_EncodePriority+0x32>
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	fa02 f303 	lsl.w	r3, r2, r3
 800717a:	43da      	mvns	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	401a      	ands	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	fa01 f303 	lsl.w	r3, r1, r3
 800718e:	43d9      	mvns	r1, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007194:	4313      	orrs	r3, r2
         );
}
 8007196:	4618      	mov	r0, r3
 8007198:	3724      	adds	r7, #36	; 0x24
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
	...

080071a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071b4:	d301      	bcc.n	80071ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071b6:	2301      	movs	r3, #1
 80071b8:	e00f      	b.n	80071da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071ba:	4a0a      	ldr	r2, [pc, #40]	; (80071e4 <SysTick_Config+0x40>)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3b01      	subs	r3, #1
 80071c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071c2:	210f      	movs	r1, #15
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c8:	f7ff ff8e 	bl	80070e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <SysTick_Config+0x40>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <SysTick_Config+0x40>)
 80071d4:	2207      	movs	r2, #7
 80071d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	e000e010 	.word	0xe000e010

080071e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff ff29 	bl	8007048 <__NVIC_SetPriorityGrouping>
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	4603      	mov	r3, r0
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007210:	f7ff ff3e 	bl	8007090 <__NVIC_GetPriorityGrouping>
 8007214:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	6978      	ldr	r0, [r7, #20]
 800721c:	f7ff ff8e 	bl	800713c <NVIC_EncodePriority>
 8007220:	4602      	mov	r2, r0
 8007222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007226:	4611      	mov	r1, r2
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff ff5d 	bl	80070e8 <__NVIC_SetPriority>
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	4603      	mov	r3, r0
 800723e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff ff31 	bl	80070ac <__NVIC_EnableIRQ>
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff ffa2 	bl	80071a4 <SysTick_Config>
 8007260:	4603      	mov	r3, r0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e08d      	b.n	800739a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	4b47      	ldr	r3, [pc, #284]	; (80073a4 <HAL_DMA_Init+0x138>)
 8007286:	429a      	cmp	r2, r3
 8007288:	d80f      	bhi.n	80072aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	4b45      	ldr	r3, [pc, #276]	; (80073a8 <HAL_DMA_Init+0x13c>)
 8007292:	4413      	add	r3, r2
 8007294:	4a45      	ldr	r2, [pc, #276]	; (80073ac <HAL_DMA_Init+0x140>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	091b      	lsrs	r3, r3, #4
 800729c:	009a      	lsls	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a42      	ldr	r2, [pc, #264]	; (80073b0 <HAL_DMA_Init+0x144>)
 80072a6:	641a      	str	r2, [r3, #64]	; 0x40
 80072a8:	e00e      	b.n	80072c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	4b40      	ldr	r3, [pc, #256]	; (80073b4 <HAL_DMA_Init+0x148>)
 80072b2:	4413      	add	r3, r2
 80072b4:	4a3d      	ldr	r2, [pc, #244]	; (80073ac <HAL_DMA_Init+0x140>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	091b      	lsrs	r3, r3, #4
 80072bc:	009a      	lsls	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a3c      	ldr	r2, [pc, #240]	; (80073b8 <HAL_DMA_Init+0x14c>)
 80072c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80072ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa72 	bl	8007804 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007328:	d102      	bne.n	8007330 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007344:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d010      	beq.n	8007370 <HAL_DMA_Init+0x104>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b04      	cmp	r3, #4
 8007354:	d80c      	bhi.n	8007370 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa92 	bl	8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	e008      	b.n	8007382 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40020407 	.word	0x40020407
 80073a8:	bffdfff8 	.word	0xbffdfff8
 80073ac:	cccccccd 	.word	0xcccccccd
 80073b0:	40020000 	.word	0x40020000
 80073b4:	bffdfbf8 	.word	0xbffdfbf8
 80073b8:	40020400 	.word	0x40020400

080073bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_DMA_Start_IT+0x20>
 80073d8:	2302      	movs	r3, #2
 80073da:	e066      	b.n	80074aa <HAL_DMA_Start_IT+0xee>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d155      	bne.n	800749c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0201 	bic.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f9b6 	bl	8007786 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	2b00      	cmp	r3, #0
 8007420:	d008      	beq.n	8007434 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 020e 	orr.w	r2, r2, #14
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e00f      	b.n	8007454 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0204 	bic.w	r2, r2, #4
 8007442:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 020a 	orr.w	r2, r2, #10
 8007452:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800746c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007470:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007488:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0201 	orr.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	e005      	b.n	80074a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80074a4:	2302      	movs	r3, #2
 80074a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d008      	beq.n	80074dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2204      	movs	r2, #4
 80074ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e040      	b.n	800755e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 020e 	bic.w	r2, r2, #14
 80074ea:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074fa:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007510:	f003 021c 	and.w	r2, r3, #28
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	2101      	movs	r1, #1
 800751a:	fa01 f202 	lsl.w	r2, r1, r2
 800751e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007528:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00c      	beq.n	800754c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007540:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800754a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d005      	beq.n	800758e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2204      	movs	r2, #4
 8007586:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	e047      	b.n	800761e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 020e 	bic.w	r2, r2, #14
 800759c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0201 	bic.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	f003 021c 	and.w	r2, r3, #28
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	2101      	movs	r1, #1
 80075cc:	fa01 f202 	lsl.w	r2, r1, r2
 80075d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00c      	beq.n	80075fe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80075fc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
    }
  }
  return status;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	f003 031c 	and.w	r3, r3, #28
 8007648:	2204      	movs	r2, #4
 800764a:	409a      	lsls	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4013      	ands	r3, r2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d026      	beq.n	80076a2 <HAL_DMA_IRQHandler+0x7a>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	d021      	beq.n	80076a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d107      	bne.n	800767c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0204 	bic.w	r2, r2, #4
 800767a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007680:	f003 021c 	and.w	r2, r3, #28
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	2104      	movs	r1, #4
 800768a:	fa01 f202 	lsl.w	r2, r1, r2
 800768e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	2b00      	cmp	r3, #0
 8007696:	d071      	beq.n	800777c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80076a0:	e06c      	b.n	800777c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a6:	f003 031c 	and.w	r3, r3, #28
 80076aa:	2202      	movs	r2, #2
 80076ac:	409a      	lsls	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d02e      	beq.n	8007714 <HAL_DMA_IRQHandler+0xec>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d029      	beq.n	8007714 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10b      	bne.n	80076e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 020a 	bic.w	r2, r2, #10
 80076dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	f003 021c 	and.w	r2, r3, #28
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	2102      	movs	r1, #2
 80076f4:	fa01 f202 	lsl.w	r2, r1, r2
 80076f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d038      	beq.n	800777c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007712:	e033      	b.n	800777c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007718:	f003 031c 	and.w	r3, r3, #28
 800771c:	2208      	movs	r2, #8
 800771e:	409a      	lsls	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4013      	ands	r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d02a      	beq.n	800777e <HAL_DMA_IRQHandler+0x156>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d025      	beq.n	800777e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 020e 	bic.w	r2, r2, #14
 8007740:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007746:	f003 021c 	and.w	r2, r3, #28
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	2101      	movs	r1, #1
 8007750:	fa01 f202 	lsl.w	r2, r1, r2
 8007754:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	2b00      	cmp	r3, #0
 8007772:	d004      	beq.n	800777e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800777c:	bf00      	nop
 800777e:	bf00      	nop
}
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800779c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d004      	beq.n	80077b0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80077ae:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	f003 021c 	and.w	r2, r3, #28
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	2101      	movs	r1, #1
 80077be:	fa01 f202 	lsl.w	r2, r1, r2
 80077c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d108      	bne.n	80077e6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80077e4:	e007      	b.n	80077f6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	60da      	str	r2, [r3, #12]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	4b17      	ldr	r3, [pc, #92]	; (8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007814:	429a      	cmp	r2, r3
 8007816:	d80a      	bhi.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781c:	089b      	lsrs	r3, r3, #2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007824:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6493      	str	r3, [r2, #72]	; 0x48
 800782c:	e007      	b.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007832:	089b      	lsrs	r3, r3, #2
 8007834:	009a      	lsls	r2, r3, #2
 8007836:	4b0f      	ldr	r3, [pc, #60]	; (8007874 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007838:	4413      	add	r3, r2
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	3b08      	subs	r3, #8
 8007846:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	091b      	lsrs	r3, r3, #4
 800784e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a0a      	ldr	r2, [pc, #40]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007854:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	2201      	movs	r2, #1
 800785e:	409a      	lsls	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	40020407 	.word	0x40020407
 8007874:	4002081c 	.word	0x4002081c
 8007878:	cccccccd 	.word	0xcccccccd
 800787c:	40020880 	.word	0x40020880

08007880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	461a      	mov	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80078a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	1000823f 	.word	0x1000823f
 80078c4:	40020940 	.word	0x40020940

080078c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80078d6:	e166      	b.n	8007ba6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	2101      	movs	r1, #1
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	fa01 f303 	lsl.w	r3, r1, r3
 80078e4:	4013      	ands	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8158 	beq.w	8007ba0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d005      	beq.n	8007908 <HAL_GPIO_Init+0x40>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d130      	bne.n	800796a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	2203      	movs	r2, #3
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	43db      	mvns	r3, r3
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4013      	ands	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	fa02 f303 	lsl.w	r3, r2, r3
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800793e:	2201      	movs	r2, #1
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	43db      	mvns	r3, r3
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4013      	ands	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	f003 0201 	and.w	r2, r3, #1
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	2b03      	cmp	r3, #3
 8007974:	d017      	beq.n	80079a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	2203      	movs	r2, #3
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	43db      	mvns	r3, r3
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4013      	ands	r3, r2
 800798c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	fa02 f303 	lsl.w	r3, r2, r3
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d123      	bne.n	80079fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	08da      	lsrs	r2, r3, #3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3208      	adds	r2, #8
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	220f      	movs	r2, #15
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	43db      	mvns	r3, r3
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4013      	ands	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	08da      	lsrs	r2, r3, #3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3208      	adds	r2, #8
 80079f4:	6939      	ldr	r1, [r7, #16]
 80079f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	2203      	movs	r2, #3
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	43db      	mvns	r3, r3
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 0203 	and.w	r2, r3, #3
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 80b2 	beq.w	8007ba0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a3c:	4b61      	ldr	r3, [pc, #388]	; (8007bc4 <HAL_GPIO_Init+0x2fc>)
 8007a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a40:	4a60      	ldr	r2, [pc, #384]	; (8007bc4 <HAL_GPIO_Init+0x2fc>)
 8007a42:	f043 0301 	orr.w	r3, r3, #1
 8007a46:	6613      	str	r3, [r2, #96]	; 0x60
 8007a48:	4b5e      	ldr	r3, [pc, #376]	; (8007bc4 <HAL_GPIO_Init+0x2fc>)
 8007a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	60bb      	str	r3, [r7, #8]
 8007a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007a54:	4a5c      	ldr	r2, [pc, #368]	; (8007bc8 <HAL_GPIO_Init+0x300>)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	3302      	adds	r3, #2
 8007a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	220f      	movs	r2, #15
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	43db      	mvns	r3, r3
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4013      	ands	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007a7e:	d02b      	beq.n	8007ad8 <HAL_GPIO_Init+0x210>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a52      	ldr	r2, [pc, #328]	; (8007bcc <HAL_GPIO_Init+0x304>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d025      	beq.n	8007ad4 <HAL_GPIO_Init+0x20c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a51      	ldr	r2, [pc, #324]	; (8007bd0 <HAL_GPIO_Init+0x308>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d01f      	beq.n	8007ad0 <HAL_GPIO_Init+0x208>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a50      	ldr	r2, [pc, #320]	; (8007bd4 <HAL_GPIO_Init+0x30c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d019      	beq.n	8007acc <HAL_GPIO_Init+0x204>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a4f      	ldr	r2, [pc, #316]	; (8007bd8 <HAL_GPIO_Init+0x310>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <HAL_GPIO_Init+0x200>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a4e      	ldr	r2, [pc, #312]	; (8007bdc <HAL_GPIO_Init+0x314>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00d      	beq.n	8007ac4 <HAL_GPIO_Init+0x1fc>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a4d      	ldr	r2, [pc, #308]	; (8007be0 <HAL_GPIO_Init+0x318>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d007      	beq.n	8007ac0 <HAL_GPIO_Init+0x1f8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a4c      	ldr	r2, [pc, #304]	; (8007be4 <HAL_GPIO_Init+0x31c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d101      	bne.n	8007abc <HAL_GPIO_Init+0x1f4>
 8007ab8:	2307      	movs	r3, #7
 8007aba:	e00e      	b.n	8007ada <HAL_GPIO_Init+0x212>
 8007abc:	2308      	movs	r3, #8
 8007abe:	e00c      	b.n	8007ada <HAL_GPIO_Init+0x212>
 8007ac0:	2306      	movs	r3, #6
 8007ac2:	e00a      	b.n	8007ada <HAL_GPIO_Init+0x212>
 8007ac4:	2305      	movs	r3, #5
 8007ac6:	e008      	b.n	8007ada <HAL_GPIO_Init+0x212>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	e006      	b.n	8007ada <HAL_GPIO_Init+0x212>
 8007acc:	2303      	movs	r3, #3
 8007ace:	e004      	b.n	8007ada <HAL_GPIO_Init+0x212>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e002      	b.n	8007ada <HAL_GPIO_Init+0x212>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e000      	b.n	8007ada <HAL_GPIO_Init+0x212>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	f002 0203 	and.w	r2, r2, #3
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	4093      	lsls	r3, r2
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007aea:	4937      	ldr	r1, [pc, #220]	; (8007bc8 <HAL_GPIO_Init+0x300>)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	089b      	lsrs	r3, r3, #2
 8007af0:	3302      	adds	r3, #2
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007af8:	4b3b      	ldr	r3, [pc, #236]	; (8007be8 <HAL_GPIO_Init+0x320>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	43db      	mvns	r3, r3
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4013      	ands	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b1c:	4a32      	ldr	r2, [pc, #200]	; (8007be8 <HAL_GPIO_Init+0x320>)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007b22:	4b31      	ldr	r3, [pc, #196]	; (8007be8 <HAL_GPIO_Init+0x320>)
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007b46:	4a28      	ldr	r2, [pc, #160]	; (8007be8 <HAL_GPIO_Init+0x320>)
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007b4c:	4b26      	ldr	r3, [pc, #152]	; (8007be8 <HAL_GPIO_Init+0x320>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	43db      	mvns	r3, r3
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b70:	4a1d      	ldr	r2, [pc, #116]	; (8007be8 <HAL_GPIO_Init+0x320>)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007b76:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <HAL_GPIO_Init+0x320>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	43db      	mvns	r3, r3
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	4013      	ands	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b9a:	4a13      	ldr	r2, [pc, #76]	; (8007be8 <HAL_GPIO_Init+0x320>)
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f47f ae91 	bne.w	80078d8 <HAL_GPIO_Init+0x10>
  }
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	40021000 	.word	0x40021000
 8007bc8:	40010000 	.word	0x40010000
 8007bcc:	48000400 	.word	0x48000400
 8007bd0:	48000800 	.word	0x48000800
 8007bd4:	48000c00 	.word	0x48000c00
 8007bd8:	48001000 	.word	0x48001000
 8007bdc:	48001400 	.word	0x48001400
 8007be0:	48001800 	.word	0x48001800
 8007be4:	48001c00 	.word	0x48001c00
 8007be8:	40010400 	.word	0x40010400

08007bec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007bfa:	e0c9      	b.n	8007d90 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	fa02 f303 	lsl.w	r3, r2, r3
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	4013      	ands	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 80bc 	beq.w	8007d8a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007c12:	4a66      	ldr	r2, [pc, #408]	; (8007dac <HAL_GPIO_DeInit+0x1c0>)
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	089b      	lsrs	r3, r3, #2
 8007c18:	3302      	adds	r3, #2
 8007c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c1e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	220f      	movs	r2, #15
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007c3a:	d02b      	beq.n	8007c94 <HAL_GPIO_DeInit+0xa8>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a5c      	ldr	r2, [pc, #368]	; (8007db0 <HAL_GPIO_DeInit+0x1c4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d025      	beq.n	8007c90 <HAL_GPIO_DeInit+0xa4>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a5b      	ldr	r2, [pc, #364]	; (8007db4 <HAL_GPIO_DeInit+0x1c8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d01f      	beq.n	8007c8c <HAL_GPIO_DeInit+0xa0>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a5a      	ldr	r2, [pc, #360]	; (8007db8 <HAL_GPIO_DeInit+0x1cc>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d019      	beq.n	8007c88 <HAL_GPIO_DeInit+0x9c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a59      	ldr	r2, [pc, #356]	; (8007dbc <HAL_GPIO_DeInit+0x1d0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d013      	beq.n	8007c84 <HAL_GPIO_DeInit+0x98>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a58      	ldr	r2, [pc, #352]	; (8007dc0 <HAL_GPIO_DeInit+0x1d4>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00d      	beq.n	8007c80 <HAL_GPIO_DeInit+0x94>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a57      	ldr	r2, [pc, #348]	; (8007dc4 <HAL_GPIO_DeInit+0x1d8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d007      	beq.n	8007c7c <HAL_GPIO_DeInit+0x90>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a56      	ldr	r2, [pc, #344]	; (8007dc8 <HAL_GPIO_DeInit+0x1dc>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d101      	bne.n	8007c78 <HAL_GPIO_DeInit+0x8c>
 8007c74:	2307      	movs	r3, #7
 8007c76:	e00e      	b.n	8007c96 <HAL_GPIO_DeInit+0xaa>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	e00c      	b.n	8007c96 <HAL_GPIO_DeInit+0xaa>
 8007c7c:	2306      	movs	r3, #6
 8007c7e:	e00a      	b.n	8007c96 <HAL_GPIO_DeInit+0xaa>
 8007c80:	2305      	movs	r3, #5
 8007c82:	e008      	b.n	8007c96 <HAL_GPIO_DeInit+0xaa>
 8007c84:	2304      	movs	r3, #4
 8007c86:	e006      	b.n	8007c96 <HAL_GPIO_DeInit+0xaa>
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e004      	b.n	8007c96 <HAL_GPIO_DeInit+0xaa>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e002      	b.n	8007c96 <HAL_GPIO_DeInit+0xaa>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <HAL_GPIO_DeInit+0xaa>
 8007c94:	2300      	movs	r3, #0
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	f002 0203 	and.w	r2, r2, #3
 8007c9c:	0092      	lsls	r2, r2, #2
 8007c9e:	4093      	lsls	r3, r2
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d132      	bne.n	8007d0c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007ca6:	4b49      	ldr	r3, [pc, #292]	; (8007dcc <HAL_GPIO_DeInit+0x1e0>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	43db      	mvns	r3, r3
 8007cae:	4947      	ldr	r1, [pc, #284]	; (8007dcc <HAL_GPIO_DeInit+0x1e0>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007cb4:	4b45      	ldr	r3, [pc, #276]	; (8007dcc <HAL_GPIO_DeInit+0x1e0>)
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	4943      	ldr	r1, [pc, #268]	; (8007dcc <HAL_GPIO_DeInit+0x1e0>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007cc2:	4b42      	ldr	r3, [pc, #264]	; (8007dcc <HAL_GPIO_DeInit+0x1e0>)
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	4940      	ldr	r1, [pc, #256]	; (8007dcc <HAL_GPIO_DeInit+0x1e0>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007cd0:	4b3e      	ldr	r3, [pc, #248]	; (8007dcc <HAL_GPIO_DeInit+0x1e0>)
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	43db      	mvns	r3, r3
 8007cd8:	493c      	ldr	r1, [pc, #240]	; (8007dcc <HAL_GPIO_DeInit+0x1e0>)
 8007cda:	4013      	ands	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	220f      	movs	r2, #15
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007cee:	4a2f      	ldr	r2, [pc, #188]	; (8007dac <HAL_GPIO_DeInit+0x1c0>)
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	089b      	lsrs	r3, r3, #2
 8007cf4:	3302      	adds	r3, #2
 8007cf6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	43da      	mvns	r2, r3
 8007cfe:	482b      	ldr	r0, [pc, #172]	; (8007dac <HAL_GPIO_DeInit+0x1c0>)
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	089b      	lsrs	r3, r3, #2
 8007d04:	400a      	ands	r2, r1
 8007d06:	3302      	adds	r3, #2
 8007d08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	2103      	movs	r1, #3
 8007d16:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	08da      	lsrs	r2, r3, #3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3208      	adds	r2, #8
 8007d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	220f      	movs	r2, #15
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	08d2      	lsrs	r2, r2, #3
 8007d40:	4019      	ands	r1, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3208      	adds	r2, #8
 8007d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	2103      	movs	r1, #3
 8007d54:	fa01 f303 	lsl.w	r3, r1, r3
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	2101      	movs	r1, #1
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	401a      	ands	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	2103      	movs	r1, #3
 8007d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d82:	43db      	mvns	r3, r3
 8007d84:	401a      	ands	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	fa22 f303 	lsr.w	r3, r2, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f47f af2f 	bne.w	8007bfc <HAL_GPIO_DeInit+0x10>
  }
}
 8007d9e:	bf00      	nop
 8007da0:	bf00      	nop
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40010000 	.word	0x40010000
 8007db0:	48000400 	.word	0x48000400
 8007db4:	48000800 	.word	0x48000800
 8007db8:	48000c00 	.word	0x48000c00
 8007dbc:	48001000 	.word	0x48001000
 8007dc0:	48001400 	.word	0x48001400
 8007dc4:	48001800 	.word	0x48001800
 8007dc8:	48001c00 	.word	0x48001c00
 8007dcc:	40010400 	.word	0x40010400

08007dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	887b      	ldrh	r3, [r7, #2]
 8007de2:	4013      	ands	r3, r2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
 8007dec:	e001      	b.n	8007df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	807b      	strh	r3, [r7, #2]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e10:	787b      	ldrb	r3, [r7, #1]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e16:	887a      	ldrh	r2, [r7, #2]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e1c:	e002      	b.n	8007e24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e1e:	887a      	ldrh	r2, [r7, #2]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e42:	887a      	ldrh	r2, [r7, #2]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4013      	ands	r3, r2
 8007e48:	041a      	lsls	r2, r3, #16
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	43d9      	mvns	r1, r3
 8007e4e:	887b      	ldrh	r3, [r7, #2]
 8007e50:	400b      	ands	r3, r1
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	619a      	str	r2, [r3, #24]
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e08d      	b.n	8007f92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fd f80c 	bl	8004ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2224      	movs	r2, #36	; 0x24
 8007e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007eb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ec4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d107      	bne.n	8007ede <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007eda:	609a      	str	r2, [r3, #8]
 8007edc:	e006      	b.n	8007eec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007eea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d108      	bne.n	8007f06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f02:	605a      	str	r2, [r3, #4]
 8007f04:	e007      	b.n	8007f16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6812      	ldr	r2, [r2, #0]
 8007f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69d9      	ldr	r1, [r3, #28]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1a      	ldr	r2, [r3, #32]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e021      	b.n	8007ff0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2224      	movs	r2, #36	; 0x24
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0201 	bic.w	r2, r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7fc ffcd 	bl	8004f64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	461a      	mov	r2, r3
 8008004:	460b      	mov	r3, r1
 8008006:	817b      	strh	r3, [r7, #10]
 8008008:	4613      	mov	r3, r2
 800800a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b20      	cmp	r3, #32
 8008016:	f040 80fd 	bne.w	8008214 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_I2C_Master_Transmit+0x30>
 8008024:	2302      	movs	r3, #2
 8008026:	e0f6      	b.n	8008216 <HAL_I2C_Master_Transmit+0x21e>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008030:	f7fe ffda 	bl	8006fe8 <HAL_GetTick>
 8008034:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	2319      	movs	r3, #25
 800803c:	2201      	movs	r2, #1
 800803e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fe04 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e0e1      	b.n	8008216 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2221      	movs	r2, #33	; 0x21
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2210      	movs	r2, #16
 800805e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	893a      	ldrh	r2, [r7, #8]
 8008072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807e:	b29b      	uxth	r3, r3
 8008080:	2bff      	cmp	r3, #255	; 0xff
 8008082:	d906      	bls.n	8008092 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	22ff      	movs	r2, #255	; 0xff
 8008088:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800808a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	e007      	b.n	80080a2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800809c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080a0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d024      	beq.n	80080f4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	3301      	adds	r3, #1
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	8979      	ldrh	r1, [r7, #10]
 80080e6:	4b4e      	ldr	r3, [pc, #312]	; (8008220 <HAL_I2C_Master_Transmit+0x228>)
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 ffeb 	bl	80090c8 <I2C_TransferConfig>
 80080f2:	e066      	b.n	80081c2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	8979      	ldrh	r1, [r7, #10]
 80080fc:	4b48      	ldr	r3, [pc, #288]	; (8008220 <HAL_I2C_Master_Transmit+0x228>)
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 ffe0 	bl	80090c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008108:	e05b      	b.n	80081c2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	6a39      	ldr	r1, [r7, #32]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fded 	bl	8008cee <I2C_WaitOnTXISFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e07b      	b.n	8008216 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	781a      	ldrb	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008152:	b29b      	uxth	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d034      	beq.n	80081c2 <HAL_I2C_Master_Transmit+0x1ca>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	d130      	bne.n	80081c2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	2200      	movs	r2, #0
 8008168:	2180      	movs	r1, #128	; 0x80
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fd70 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e04d      	b.n	8008216 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817e:	b29b      	uxth	r3, r3
 8008180:	2bff      	cmp	r3, #255	; 0xff
 8008182:	d90e      	bls.n	80081a2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	22ff      	movs	r2, #255	; 0xff
 8008188:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800818e:	b2da      	uxtb	r2, r3
 8008190:	8979      	ldrh	r1, [r7, #10]
 8008192:	2300      	movs	r3, #0
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 ff94 	bl	80090c8 <I2C_TransferConfig>
 80081a0:	e00f      	b.n	80081c2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	8979      	ldrh	r1, [r7, #10]
 80081b4:	2300      	movs	r3, #0
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 ff83 	bl	80090c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d19e      	bne.n	800810a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	6a39      	ldr	r1, [r7, #32]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fdd3 	bl	8008d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e01a      	b.n	8008216 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2220      	movs	r2, #32
 80081e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6859      	ldr	r1, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <HAL_I2C_Master_Transmit+0x22c>)
 80081f4:	400b      	ands	r3, r1
 80081f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e000      	b.n	8008216 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008214:	2302      	movs	r3, #2
  }
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	80002000 	.word	0x80002000
 8008224:	fe00e800 	.word	0xfe00e800

08008228 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	461a      	mov	r2, r3
 8008234:	460b      	mov	r3, r1
 8008236:	817b      	strh	r3, [r7, #10]
 8008238:	4613      	mov	r3, r2
 800823a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b20      	cmp	r3, #32
 8008246:	f040 80db 	bne.w	8008400 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_I2C_Master_Receive+0x30>
 8008254:	2302      	movs	r3, #2
 8008256:	e0d4      	b.n	8008402 <HAL_I2C_Master_Receive+0x1da>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008260:	f7fe fec2 	bl	8006fe8 <HAL_GetTick>
 8008264:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	2319      	movs	r3, #25
 800826c:	2201      	movs	r2, #1
 800826e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 fcec 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e0bf      	b.n	8008402 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2222      	movs	r2, #34	; 0x22
 8008286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2210      	movs	r2, #16
 800828e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	893a      	ldrh	r2, [r7, #8]
 80082a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2bff      	cmp	r3, #255	; 0xff
 80082b2:	d90e      	bls.n	80082d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	22ff      	movs	r2, #255	; 0xff
 80082b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	8979      	ldrh	r1, [r7, #10]
 80082c2:	4b52      	ldr	r3, [pc, #328]	; (800840c <HAL_I2C_Master_Receive+0x1e4>)
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 fefc 	bl	80090c8 <I2C_TransferConfig>
 80082d0:	e06d      	b.n	80083ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	8979      	ldrh	r1, [r7, #10]
 80082e4:	4b49      	ldr	r3, [pc, #292]	; (800840c <HAL_I2C_Master_Receive+0x1e4>)
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 feeb 	bl	80090c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80082f2:	e05c      	b.n	80083ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	6a39      	ldr	r1, [r7, #32]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fd83 	bl	8008e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e07c      	b.n	8008402 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008324:	3b01      	subs	r3, #1
 8008326:	b29a      	uxth	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008330:	b29b      	uxth	r3, r3
 8008332:	3b01      	subs	r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d034      	beq.n	80083ae <HAL_I2C_Master_Receive+0x186>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	d130      	bne.n	80083ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	2200      	movs	r2, #0
 8008354:	2180      	movs	r1, #128	; 0x80
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fc7a 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e04d      	b.n	8008402 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836a:	b29b      	uxth	r3, r3
 800836c:	2bff      	cmp	r3, #255	; 0xff
 800836e:	d90e      	bls.n	800838e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	22ff      	movs	r2, #255	; 0xff
 8008374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837a:	b2da      	uxtb	r2, r3
 800837c:	8979      	ldrh	r1, [r7, #10]
 800837e:	2300      	movs	r3, #0
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fe9e 	bl	80090c8 <I2C_TransferConfig>
 800838c:	e00f      	b.n	80083ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839c:	b2da      	uxtb	r2, r3
 800839e:	8979      	ldrh	r1, [r7, #10]
 80083a0:	2300      	movs	r3, #0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fe8d 	bl	80090c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d19d      	bne.n	80082f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	6a39      	ldr	r1, [r7, #32]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fcdd 	bl	8008d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e01a      	b.n	8008402 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2220      	movs	r2, #32
 80083d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6859      	ldr	r1, [r3, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <HAL_I2C_Master_Receive+0x1e8>)
 80083e0:	400b      	ands	r3, r1
 80083e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e000      	b.n	8008402 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008400:	2302      	movs	r3, #2
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	80002400 	.word	0x80002400
 8008410:	fe00e800 	.word	0xfe00e800

08008414 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af02      	add	r7, sp, #8
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	4608      	mov	r0, r1
 800841e:	4611      	mov	r1, r2
 8008420:	461a      	mov	r2, r3
 8008422:	4603      	mov	r3, r0
 8008424:	817b      	strh	r3, [r7, #10]
 8008426:	460b      	mov	r3, r1
 8008428:	813b      	strh	r3, [r7, #8]
 800842a:	4613      	mov	r3, r2
 800842c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b20      	cmp	r3, #32
 8008438:	f040 80f9 	bne.w	800862e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <HAL_I2C_Mem_Write+0x34>
 8008442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800844e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e0ed      	b.n	8008630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_I2C_Mem_Write+0x4e>
 800845e:	2302      	movs	r3, #2
 8008460:	e0e6      	b.n	8008630 <HAL_I2C_Mem_Write+0x21c>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800846a:	f7fe fdbd 	bl	8006fe8 <HAL_GetTick>
 800846e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	2319      	movs	r3, #25
 8008476:	2201      	movs	r2, #1
 8008478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fbe7 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e0d1      	b.n	8008630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2221      	movs	r2, #33	; 0x21
 8008490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2240      	movs	r2, #64	; 0x40
 8008498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a3a      	ldr	r2, [r7, #32]
 80084a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084b4:	88f8      	ldrh	r0, [r7, #6]
 80084b6:	893a      	ldrh	r2, [r7, #8]
 80084b8:	8979      	ldrh	r1, [r7, #10]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	4603      	mov	r3, r0
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 faf7 	bl	8008ab8 <I2C_RequestMemoryWrite>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e0a9      	b.n	8008630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	2bff      	cmp	r3, #255	; 0xff
 80084e4:	d90e      	bls.n	8008504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	22ff      	movs	r2, #255	; 0xff
 80084ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	8979      	ldrh	r1, [r7, #10]
 80084f4:	2300      	movs	r3, #0
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fde3 	bl	80090c8 <I2C_TransferConfig>
 8008502:	e00f      	b.n	8008524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008512:	b2da      	uxtb	r2, r3
 8008514:	8979      	ldrh	r1, [r7, #10]
 8008516:	2300      	movs	r3, #0
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 fdd2 	bl	80090c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fbe0 	bl	8008cee <I2C_WaitOnTXISFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e07b      	b.n	8008630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d034      	beq.n	80085dc <HAL_I2C_Mem_Write+0x1c8>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	d130      	bne.n	80085dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	2200      	movs	r2, #0
 8008582:	2180      	movs	r1, #128	; 0x80
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fb63 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e04d      	b.n	8008630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008598:	b29b      	uxth	r3, r3
 800859a:	2bff      	cmp	r3, #255	; 0xff
 800859c:	d90e      	bls.n	80085bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	22ff      	movs	r2, #255	; 0xff
 80085a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	8979      	ldrh	r1, [r7, #10]
 80085ac:	2300      	movs	r3, #0
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 fd87 	bl	80090c8 <I2C_TransferConfig>
 80085ba:	e00f      	b.n	80085dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	8979      	ldrh	r1, [r7, #10]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 fd76 	bl	80090c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d19e      	bne.n	8008524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 fbc6 	bl	8008d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e01a      	b.n	8008630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2220      	movs	r2, #32
 8008600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6859      	ldr	r1, [r3, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <HAL_I2C_Mem_Write+0x224>)
 800860e:	400b      	ands	r3, r1
 8008610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	e000      	b.n	8008630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800862e:	2302      	movs	r3, #2
  }
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	fe00e800 	.word	0xfe00e800

0800863c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af02      	add	r7, sp, #8
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	461a      	mov	r2, r3
 800864a:	4603      	mov	r3, r0
 800864c:	817b      	strh	r3, [r7, #10]
 800864e:	460b      	mov	r3, r1
 8008650:	813b      	strh	r3, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b20      	cmp	r3, #32
 8008660:	f040 80fd 	bne.w	800885e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_I2C_Mem_Read+0x34>
 800866a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800866c:	2b00      	cmp	r3, #0
 800866e:	d105      	bne.n	800867c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008676:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e0f1      	b.n	8008860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_I2C_Mem_Read+0x4e>
 8008686:	2302      	movs	r3, #2
 8008688:	e0ea      	b.n	8008860 <HAL_I2C_Mem_Read+0x224>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008692:	f7fe fca9 	bl	8006fe8 <HAL_GetTick>
 8008696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	2319      	movs	r3, #25
 800869e:	2201      	movs	r2, #1
 80086a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fad3 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0d5      	b.n	8008860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2222      	movs	r2, #34	; 0x22
 80086b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2240      	movs	r2, #64	; 0x40
 80086c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086dc:	88f8      	ldrh	r0, [r7, #6]
 80086de:	893a      	ldrh	r2, [r7, #8]
 80086e0:	8979      	ldrh	r1, [r7, #10]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	4603      	mov	r3, r0
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 fa37 	bl	8008b60 <I2C_RequestMemoryRead>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e0ad      	b.n	8008860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d90e      	bls.n	800872c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	22ff      	movs	r2, #255	; 0xff
 8008712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008718:	b2da      	uxtb	r2, r3
 800871a:	8979      	ldrh	r1, [r7, #10]
 800871c:	4b52      	ldr	r3, [pc, #328]	; (8008868 <HAL_I2C_Mem_Read+0x22c>)
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fccf 	bl	80090c8 <I2C_TransferConfig>
 800872a:	e00f      	b.n	800874c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873a:	b2da      	uxtb	r2, r3
 800873c:	8979      	ldrh	r1, [r7, #10]
 800873e:	4b4a      	ldr	r3, [pc, #296]	; (8008868 <HAL_I2C_Mem_Read+0x22c>)
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fcbe 	bl	80090c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	2200      	movs	r2, #0
 8008754:	2104      	movs	r1, #4
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 fa7a 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e07c      	b.n	8008860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008782:	3b01      	subs	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800879c:	b29b      	uxth	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d034      	beq.n	800880c <HAL_I2C_Mem_Read+0x1d0>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d130      	bne.n	800880c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	2200      	movs	r2, #0
 80087b2:	2180      	movs	r1, #128	; 0x80
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 fa4b 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e04d      	b.n	8008860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2bff      	cmp	r3, #255	; 0xff
 80087cc:	d90e      	bls.n	80087ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	22ff      	movs	r2, #255	; 0xff
 80087d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	8979      	ldrh	r1, [r7, #10]
 80087dc:	2300      	movs	r3, #0
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 fc6f 	bl	80090c8 <I2C_TransferConfig>
 80087ea:	e00f      	b.n	800880c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	8979      	ldrh	r1, [r7, #10]
 80087fe:	2300      	movs	r3, #0
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 fc5e 	bl	80090c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d19a      	bne.n	800874c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 faae 	bl	8008d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e01a      	b.n	8008860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2220      	movs	r2, #32
 8008830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6859      	ldr	r1, [r3, #4]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	4b0b      	ldr	r3, [pc, #44]	; (800886c <HAL_I2C_Mem_Read+0x230>)
 800883e:	400b      	ands	r3, r1
 8008840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	e000      	b.n	8008860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800885e:	2302      	movs	r3, #2
  }
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	80002400 	.word	0x80002400
 800886c:	fe00e800 	.word	0xfe00e800

08008870 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08a      	sub	sp, #40	; 0x28
 8008874:	af02      	add	r7, sp, #8
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	460b      	mov	r3, r1
 800887e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b20      	cmp	r3, #32
 800888e:	f040 80f3 	bne.w	8008a78 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800889c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a0:	d101      	bne.n	80088a6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80088a2:	2302      	movs	r3, #2
 80088a4:	e0e9      	b.n	8008a7a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_I2C_IsDeviceReady+0x44>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e0e2      	b.n	8008a7a <HAL_I2C_IsDeviceReady+0x20a>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2224      	movs	r2, #36	; 0x24
 80088c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d107      	bne.n	80088e2 <HAL_I2C_IsDeviceReady+0x72>
 80088d2:	897b      	ldrh	r3, [r7, #10]
 80088d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80088dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80088e0:	e006      	b.n	80088f0 <HAL_I2C_IsDeviceReady+0x80>
 80088e2:	897b      	ldrh	r3, [r7, #10]
 80088e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80088ec:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	6812      	ldr	r2, [r2, #0]
 80088f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80088f6:	f7fe fb77 	bl	8006fe8 <HAL_GetTick>
 80088fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b20      	cmp	r3, #32
 8008908:	bf0c      	ite	eq
 800890a:	2301      	moveq	r3, #1
 800890c:	2300      	movne	r3, #0
 800890e:	b2db      	uxtb	r3, r3
 8008910:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b10      	cmp	r3, #16
 800891e:	bf0c      	ite	eq
 8008920:	2301      	moveq	r3, #1
 8008922:	2300      	movne	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008928:	e034      	b.n	8008994 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008930:	d01a      	beq.n	8008968 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008932:	f7fe fb59 	bl	8006fe8 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d302      	bcc.n	8008948 <HAL_I2C_IsDeviceReady+0xd8>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10f      	bne.n	8008968 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2220      	movs	r2, #32
 800894c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008954:	f043 0220 	orr.w	r2, r3, #32
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e088      	b.n	8008a7a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b20      	cmp	r3, #32
 8008974:	bf0c      	ite	eq
 8008976:	2301      	moveq	r3, #1
 8008978:	2300      	movne	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b10      	cmp	r3, #16
 800898a:	bf0c      	ite	eq
 800898c:	2301      	moveq	r3, #1
 800898e:	2300      	movne	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008994:	7ffb      	ldrb	r3, [r7, #31]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d102      	bne.n	80089a0 <HAL_I2C_IsDeviceReady+0x130>
 800899a:	7fbb      	ldrb	r3, [r7, #30]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0c4      	beq.n	800892a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b10      	cmp	r3, #16
 80089ac:	d01a      	beq.n	80089e4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2200      	movs	r2, #0
 80089b6:	2120      	movs	r1, #32
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 f949 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e058      	b.n	8008a7a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2220      	movs	r2, #32
 80089ce:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e04a      	b.n	8008a7a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	2120      	movs	r1, #32
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 f92e 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e03d      	b.n	8008a7a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2210      	movs	r2, #16
 8008a04:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d118      	bne.n	8008a48 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a24:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2120      	movs	r1, #32
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 f90d 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e01c      	b.n	8008a7a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2220      	movs	r2, #32
 8008a46:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	f63f af39 	bhi.w	80088ca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a64:	f043 0220 	orr.w	r2, r3, #32
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e000      	b.n	8008a7a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8008a78:	2302      	movs	r3, #2
  }
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3720      	adds	r7, #32
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a90:	b2db      	uxtb	r3, r3
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	817b      	strh	r3, [r7, #10]
 8008aca:	460b      	mov	r3, r1
 8008acc:	813b      	strh	r3, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	8979      	ldrh	r1, [r7, #10]
 8008ad8:	4b20      	ldr	r3, [pc, #128]	; (8008b5c <I2C_RequestMemoryWrite+0xa4>)
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 faf1 	bl	80090c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ae6:	69fa      	ldr	r2, [r7, #28]
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 f8ff 	bl	8008cee <I2C_WaitOnTXISFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e02c      	b.n	8008b54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d105      	bne.n	8008b0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b00:	893b      	ldrh	r3, [r7, #8]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	629a      	str	r2, [r3, #40]	; 0x28
 8008b0a:	e015      	b.n	8008b38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b0c:	893b      	ldrh	r3, [r7, #8]
 8008b0e:	0a1b      	lsrs	r3, r3, #8
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b1a:	69fa      	ldr	r2, [r7, #28]
 8008b1c:	69b9      	ldr	r1, [r7, #24]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f8e5 	bl	8008cee <I2C_WaitOnTXISFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e012      	b.n	8008b54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2180      	movs	r1, #128	; 0x80
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 f884 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	80002000 	.word	0x80002000

08008b60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4603      	mov	r3, r0
 8008b70:	817b      	strh	r3, [r7, #10]
 8008b72:	460b      	mov	r3, r1
 8008b74:	813b      	strh	r3, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	8979      	ldrh	r1, [r7, #10]
 8008b80:	4b20      	ldr	r3, [pc, #128]	; (8008c04 <I2C_RequestMemoryRead+0xa4>)
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 fa9e 	bl	80090c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	69b9      	ldr	r1, [r7, #24]
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 f8ac 	bl	8008cee <I2C_WaitOnTXISFlagUntilTimeout>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e02c      	b.n	8008bfa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d105      	bne.n	8008bb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ba6:	893b      	ldrh	r3, [r7, #8]
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	629a      	str	r2, [r3, #40]	; 0x28
 8008bb0:	e015      	b.n	8008bde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008bb2:	893b      	ldrh	r3, [r7, #8]
 8008bb4:	0a1b      	lsrs	r3, r3, #8
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	69b9      	ldr	r1, [r7, #24]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f892 	bl	8008cee <I2C_WaitOnTXISFlagUntilTimeout>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e012      	b.n	8008bfa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bd4:	893b      	ldrh	r3, [r7, #8]
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	2200      	movs	r2, #0
 8008be6:	2140      	movs	r1, #64	; 0x40
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f831 	bl	8008c50 <I2C_WaitOnFlagUntilTimeout>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e000      	b.n	8008bfa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	80002000 	.word	0x80002000

08008c08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d103      	bne.n	8008c26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2200      	movs	r2, #0
 8008c24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d007      	beq.n	8008c44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0201 	orr.w	r2, r2, #1
 8008c42:	619a      	str	r2, [r3, #24]
  }
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c60:	e031      	b.n	8008cc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c68:	d02d      	beq.n	8008cc6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c6a:	f7fe f9bd 	bl	8006fe8 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d302      	bcc.n	8008c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d122      	bne.n	8008cc6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	699a      	ldr	r2, [r3, #24]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	bf0c      	ite	eq
 8008c90:	2301      	moveq	r3, #1
 8008c92:	2300      	movne	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	461a      	mov	r2, r3
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d113      	bne.n	8008cc6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca2:	f043 0220 	orr.w	r2, r3, #32
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e00f      	b.n	8008ce6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	699a      	ldr	r2, [r3, #24]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	bf0c      	ite	eq
 8008cd6:	2301      	moveq	r3, #1
 8008cd8:	2300      	movne	r3, #0
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	461a      	mov	r2, r3
 8008cde:	79fb      	ldrb	r3, [r7, #7]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d0be      	beq.n	8008c62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cfa:	e033      	b.n	8008d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f901 	bl	8008f08 <I2C_IsErrorOccurred>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e031      	b.n	8008d74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d16:	d025      	beq.n	8008d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d18:	f7fe f966 	bl	8006fe8 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d302      	bcc.n	8008d2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d11a      	bne.n	8008d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d013      	beq.n	8008d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d40:	f043 0220 	orr.w	r2, r3, #32
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e007      	b.n	8008d74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d1c4      	bne.n	8008cfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d88:	e02f      	b.n	8008dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f8ba 	bl	8008f08 <I2C_IsErrorOccurred>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e02d      	b.n	8008dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9e:	f7fe f923 	bl	8006fe8 <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d302      	bcc.n	8008db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d11a      	bne.n	8008dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	d013      	beq.n	8008dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc6:	f043 0220 	orr.w	r2, r3, #32
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e007      	b.n	8008dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	d1c8      	bne.n	8008d8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e10:	e06b      	b.n	8008eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 f876 	bl	8008f08 <I2C_IsErrorOccurred>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e069      	b.n	8008efa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b20      	cmp	r3, #32
 8008e32:	d138      	bne.n	8008ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d105      	bne.n	8008e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e055      	b.n	8008efa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b10      	cmp	r3, #16
 8008e5a:	d107      	bne.n	8008e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2210      	movs	r2, #16
 8008e62:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2204      	movs	r2, #4
 8008e68:	645a      	str	r2, [r3, #68]	; 0x44
 8008e6a:	e002      	b.n	8008e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2220      	movs	r2, #32
 8008e78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6859      	ldr	r1, [r3, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	4b1f      	ldr	r3, [pc, #124]	; (8008f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008e86:	400b      	ands	r3, r1
 8008e88:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e029      	b.n	8008efa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ea6:	f7fe f89f 	bl	8006fe8 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d302      	bcc.n	8008ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d116      	bne.n	8008eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d00f      	beq.n	8008eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	f043 0220 	orr.w	r2, r3, #32
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e007      	b.n	8008efa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f003 0304 	and.w	r3, r3, #4
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d18c      	bne.n	8008e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	fe00e800 	.word	0xfe00e800

08008f08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08a      	sub	sp, #40	; 0x28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f003 0310 	and.w	r3, r3, #16
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d068      	beq.n	8009006 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2210      	movs	r2, #16
 8008f3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f3c:	e049      	b.n	8008fd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f44:	d045      	beq.n	8008fd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f46:	f7fe f84f 	bl	8006fe8 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d302      	bcc.n	8008f5c <I2C_IsErrorOccurred+0x54>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d13a      	bne.n	8008fd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f7e:	d121      	bne.n	8008fc4 <I2C_IsErrorOccurred+0xbc>
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f86:	d01d      	beq.n	8008fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008f88:	7cfb      	ldrb	r3, [r7, #19]
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	d01a      	beq.n	8008fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008f9e:	f7fe f823 	bl	8006fe8 <HAL_GetTick>
 8008fa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fa4:	e00e      	b.n	8008fc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008fa6:	f7fe f81f 	bl	8006fe8 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b19      	cmp	r3, #25
 8008fb2:	d907      	bls.n	8008fc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	f043 0320 	orr.w	r3, r3, #32
 8008fba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008fc2:	e006      	b.n	8008fd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b20      	cmp	r3, #32
 8008fd0:	d1e9      	bne.n	8008fa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d003      	beq.n	8008fe8 <I2C_IsErrorOccurred+0xe0>
 8008fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0aa      	beq.n	8008f3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	f043 0304 	orr.w	r3, r3, #4
 8008ffe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	f043 0301 	orr.w	r3, r3, #1
 800901e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00b      	beq.n	8009052 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	f043 0308 	orr.w	r3, r3, #8
 8009040:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800904a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	f043 0302 	orr.w	r3, r3, #2
 8009062:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800906c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01c      	beq.n	80090b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff fdc3 	bl	8008c08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6859      	ldr	r1, [r3, #4]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <I2C_IsErrorOccurred+0x1bc>)
 800908e:	400b      	ands	r3, r1
 8009090:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	431a      	orrs	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80090b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3728      	adds	r7, #40	; 0x28
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	fe00e800 	.word	0xfe00e800

080090c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	607b      	str	r3, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	817b      	strh	r3, [r7, #10]
 80090d6:	4613      	mov	r3, r2
 80090d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090da:	897b      	ldrh	r3, [r7, #10]
 80090dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090e0:	7a7b      	ldrb	r3, [r7, #9]
 80090e2:	041b      	lsls	r3, r3, #16
 80090e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	0d5b      	lsrs	r3, r3, #21
 8009102:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009106:	4b08      	ldr	r3, [pc, #32]	; (8009128 <I2C_TransferConfig+0x60>)
 8009108:	430b      	orrs	r3, r1
 800910a:	43db      	mvns	r3, r3
 800910c:	ea02 0103 	and.w	r1, r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	430a      	orrs	r2, r1
 8009118:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	03ff63ff 	.word	0x03ff63ff

0800912c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b20      	cmp	r3, #32
 8009140:	d138      	bne.n	80091b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800914c:	2302      	movs	r3, #2
 800914e:	e032      	b.n	80091b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2224      	movs	r2, #36	; 0x24
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0201 	bic.w	r2, r2, #1
 800916e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800917e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6819      	ldr	r1, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0201 	orr.w	r2, r2, #1
 800919e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2220      	movs	r2, #32
 80091a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	e000      	b.n	80091b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091b4:	2302      	movs	r3, #2
  }
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b085      	sub	sp, #20
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d139      	bne.n	800924c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d101      	bne.n	80091e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091e2:	2302      	movs	r3, #2
 80091e4:	e033      	b.n	800924e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2224      	movs	r2, #36	; 0x24
 80091f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 0201 	bic.w	r2, r2, #1
 8009204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	e000      	b.n	800924e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800924c:	2302      	movs	r3, #2
  }
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800925a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800925c:	b08f      	sub	sp, #60	; 0x3c
 800925e:	af0a      	add	r7, sp, #40	; 0x28
 8009260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e116      	b.n	800949a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f00f fdf6 	bl	8018e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2203      	movs	r2, #3
 8009290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f009 fed9 	bl	8013062 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	687e      	ldr	r6, [r7, #4]
 80092b8:	466d      	mov	r5, sp
 80092ba:	f106 0410 	add.w	r4, r6, #16
 80092be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80092ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80092ce:	1d33      	adds	r3, r6, #4
 80092d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092d2:	6838      	ldr	r0, [r7, #0]
 80092d4:	f009 fdec 	bl	8012eb0 <USB_CoreInit>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e0d7      	b.n	800949a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2100      	movs	r1, #0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f009 fec7 	bl	8013084 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
 80092fa:	e04a      	b.n	8009392 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80092fc:	7bfa      	ldrb	r2, [r7, #15]
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4613      	mov	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	333d      	adds	r3, #61	; 0x3d
 800930c:	2201      	movs	r2, #1
 800930e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009310:	7bfa      	ldrb	r2, [r7, #15]
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	333c      	adds	r3, #60	; 0x3c
 8009320:	7bfa      	ldrb	r2, [r7, #15]
 8009322:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009324:	7bfa      	ldrb	r2, [r7, #15]
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	b298      	uxth	r0, r3
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	3356      	adds	r3, #86	; 0x56
 8009338:	4602      	mov	r2, r0
 800933a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800933c:	7bfa      	ldrb	r2, [r7, #15]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	3340      	adds	r3, #64	; 0x40
 800934c:	2200      	movs	r2, #0
 800934e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009350:	7bfa      	ldrb	r2, [r7, #15]
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4613      	mov	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	3344      	adds	r3, #68	; 0x44
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009364:	7bfa      	ldrb	r2, [r7, #15]
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	4613      	mov	r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	3348      	adds	r3, #72	; 0x48
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009378:	7bfa      	ldrb	r2, [r7, #15]
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	4613      	mov	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	440b      	add	r3, r1
 8009386:	334c      	adds	r3, #76	; 0x4c
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	3301      	adds	r3, #1
 8009390:	73fb      	strb	r3, [r7, #15]
 8009392:	7bfa      	ldrb	r2, [r7, #15]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	429a      	cmp	r2, r3
 800939a:	d3af      	bcc.n	80092fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
 80093a0:	e044      	b.n	800942c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	4613      	mov	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	440b      	add	r3, r1
 80093b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80093b8:	7bfa      	ldrb	r2, [r7, #15]
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	4613      	mov	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80093ca:	7bfa      	ldrb	r2, [r7, #15]
 80093cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80093ce:	7bfa      	ldrb	r2, [r7, #15]
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093e0:	2200      	movs	r2, #0
 80093e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80093e4:	7bfa      	ldrb	r2, [r7, #15]
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	4613      	mov	r3, r2
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	440b      	add	r3, r1
 80093f2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80093f6:	2200      	movs	r2, #0
 80093f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80093fa:	7bfa      	ldrb	r2, [r7, #15]
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009410:	7bfa      	ldrb	r2, [r7, #15]
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	4613      	mov	r3, r2
 8009416:	00db      	lsls	r3, r3, #3
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	3301      	adds	r3, #1
 800942a:	73fb      	strb	r3, [r7, #15]
 800942c:	7bfa      	ldrb	r2, [r7, #15]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	429a      	cmp	r2, r3
 8009434:	d3b5      	bcc.n	80093a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	687e      	ldr	r6, [r7, #4]
 800943e:	466d      	mov	r5, sp
 8009440:	f106 0410 	add.w	r4, r6, #16
 8009444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800944a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800944c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009450:	e885 0003 	stmia.w	r5, {r0, r1}
 8009454:	1d33      	adds	r3, r6, #4
 8009456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009458:	6838      	ldr	r0, [r7, #0]
 800945a:	f009 fe5f 	bl	801311c <USB_DevInit>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2202      	movs	r2, #2
 8009468:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e014      	b.n	800949a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	2b01      	cmp	r3, #1
 8009486:	d102      	bne.n	800948e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 f869 	bl	800a560 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f00a fe0d 	bl	80140b2 <USB_DevDisconnect>

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d101      	bne.n	80094be <HAL_PCD_Start+0x1c>
 80094ba:	2302      	movs	r3, #2
 80094bc:	e01c      	b.n	80094f8 <HAL_PCD_Start+0x56>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d105      	bne.n	80094da <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f009 fdae 	bl	8013040 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f00a fdc1 	bl	8014070 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009500:	b590      	push	{r4, r7, lr}
 8009502:	b08d      	sub	sp, #52	; 0x34
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f00a fe7f 	bl	801421a <USB_GetMode>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	f040 847e 	bne.w	8009e20 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4618      	mov	r0, r3
 800952a:	f00a fde3 	bl	80140f4 <USB_ReadInterrupts>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8474 	beq.w	8009e1e <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f00a fdd0 	bl	80140f4 <USB_ReadInterrupts>
 8009554:	4603      	mov	r3, r0
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b02      	cmp	r3, #2
 800955c:	d107      	bne.n	800956e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	695a      	ldr	r2, [r3, #20]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f002 0202 	and.w	r2, r2, #2
 800956c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f00a fdbe 	bl	80140f4 <USB_ReadInterrupts>
 8009578:	4603      	mov	r3, r0
 800957a:	f003 0310 	and.w	r3, r3, #16
 800957e:	2b10      	cmp	r3, #16
 8009580:	d161      	bne.n	8009646 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0210 	bic.w	r2, r2, #16
 8009590:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	f003 020f 	and.w	r2, r3, #15
 800959e:	4613      	mov	r3, r2
 80095a0:	00db      	lsls	r3, r3, #3
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	4413      	add	r3, r2
 80095ae:	3304      	adds	r3, #4
 80095b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	0c5b      	lsrs	r3, r3, #17
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d124      	bne.n	8009608 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80095c4:	4013      	ands	r3, r2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d035      	beq.n	8009636 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	091b      	lsrs	r3, r3, #4
 80095d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80095d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095d8:	b29b      	uxth	r3, r3
 80095da:	461a      	mov	r2, r3
 80095dc:	6a38      	ldr	r0, [r7, #32]
 80095de:	f00a fbf5 	bl	8013dcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	091b      	lsrs	r3, r3, #4
 80095ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095ee:	441a      	add	r2, r3
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	695a      	ldr	r2, [r3, #20]
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	091b      	lsrs	r3, r3, #4
 80095fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009600:	441a      	add	r2, r3
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	615a      	str	r2, [r3, #20]
 8009606:	e016      	b.n	8009636 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	0c5b      	lsrs	r3, r3, #17
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	2b06      	cmp	r3, #6
 8009612:	d110      	bne.n	8009636 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800961a:	2208      	movs	r2, #8
 800961c:	4619      	mov	r1, r3
 800961e:	6a38      	ldr	r0, [r7, #32]
 8009620:	f00a fbd4 	bl	8013dcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	695a      	ldr	r2, [r3, #20]
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	091b      	lsrs	r3, r3, #4
 800962c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009630:	441a      	add	r2, r3
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699a      	ldr	r2, [r3, #24]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f042 0210 	orr.w	r2, r2, #16
 8009644:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4618      	mov	r0, r3
 800964c:	f00a fd52 	bl	80140f4 <USB_ReadInterrupts>
 8009650:	4603      	mov	r3, r0
 8009652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009656:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800965a:	f040 80a7 	bne.w	80097ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	f00a fd57 	bl	801411a <USB_ReadDevAllOutEpInterrupt>
 800966c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800966e:	e099      	b.n	80097a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 808e 	beq.w	8009798 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	4611      	mov	r1, r2
 8009686:	4618      	mov	r0, r3
 8009688:	f00a fd7b 	bl	8014182 <USB_ReadDevOutEPInterrupt>
 800968c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00c      	beq.n	80096b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	461a      	mov	r2, r3
 80096a6:	2301      	movs	r3, #1
 80096a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80096aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fe7d 	bl	800a3ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f003 0308 	and.w	r3, r3, #8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00c      	beq.n	80096d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c8:	461a      	mov	r2, r3
 80096ca:	2308      	movs	r3, #8
 80096cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80096ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 feb9 	bl	800a448 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f003 0310 	and.w	r3, r3, #16
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ec:	461a      	mov	r2, r3
 80096ee:	2310      	movs	r3, #16
 80096f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d030      	beq.n	800975e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009704:	2b80      	cmp	r3, #128	; 0x80
 8009706:	d109      	bne.n	800971c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	69fa      	ldr	r2, [r7, #28]
 8009712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800971a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800971c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971e:	4613      	mov	r3, r2
 8009720:	00db      	lsls	r3, r3, #3
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	4413      	add	r3, r2
 800972e:	3304      	adds	r3, #4
 8009730:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	78db      	ldrb	r3, [r3, #3]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d108      	bne.n	800974c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2200      	movs	r2, #0
 800973e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	b2db      	uxtb	r3, r3
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f00f fcda 	bl	8019100 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	461a      	mov	r2, r3
 800975a:	2302      	movs	r3, #2
 800975c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f003 0320 	and.w	r3, r3, #32
 8009764:	2b00      	cmp	r3, #0
 8009766:	d008      	beq.n	800977a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	461a      	mov	r2, r3
 8009776:	2320      	movs	r3, #32
 8009778:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009790:	461a      	mov	r2, r3
 8009792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009796:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	3301      	adds	r3, #1
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	085b      	lsrs	r3, r3, #1
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f47f af62 	bne.w	8009670 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f00a fc9f 	bl	80140f4 <USB_ReadInterrupts>
 80097b6:	4603      	mov	r3, r0
 80097b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097c0:	f040 80a4 	bne.w	800990c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f00a fcc0 	bl	801414e <USB_ReadDevAllInEpInterrupt>
 80097ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80097d4:	e096      	b.n	8009904 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80097d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 808b 	beq.w	80098f8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e8:	b2d2      	uxtb	r2, r2
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f00a fce6 	bl	80141be <USB_ReadDevInEPInterrupt>
 80097f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d020      	beq.n	8009840 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	f003 030f 	and.w	r3, r3, #15
 8009804:	2201      	movs	r2, #1
 8009806:	fa02 f303 	lsl.w	r3, r2, r3
 800980a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	43db      	mvns	r3, r3
 8009818:	69f9      	ldr	r1, [r7, #28]
 800981a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800981e:	4013      	ands	r3, r2
 8009820:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982e:	461a      	mov	r2, r3
 8009830:	2301      	movs	r3, #1
 8009832:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	b2db      	uxtb	r3, r3
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f00f fbcb 	bl	8018fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f003 0308 	and.w	r3, r3, #8
 8009846:	2b00      	cmp	r3, #0
 8009848:	d008      	beq.n	800985c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009856:	461a      	mov	r2, r3
 8009858:	2308      	movs	r3, #8
 800985a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f003 0310 	and.w	r3, r3, #16
 8009862:	2b00      	cmp	r3, #0
 8009864:	d008      	beq.n	8009878 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009872:	461a      	mov	r2, r3
 8009874:	2310      	movs	r3, #16
 8009876:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d008      	beq.n	8009894 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988e:	461a      	mov	r2, r3
 8009890:	2340      	movs	r3, #64	; 0x40
 8009892:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d023      	beq.n	80098e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800989e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098a0:	6a38      	ldr	r0, [r7, #32]
 80098a2:	f009 fd7d 	bl	80133a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80098a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a8:	4613      	mov	r3, r2
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	3338      	adds	r3, #56	; 0x38
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	4413      	add	r3, r2
 80098b6:	3304      	adds	r3, #4
 80098b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	78db      	ldrb	r3, [r3, #3]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d108      	bne.n	80098d4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2200      	movs	r2, #0
 80098c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f00f fc28 	bl	8019124 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	461a      	mov	r2, r3
 80098e2:	2302      	movs	r3, #2
 80098e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d003      	beq.n	80098f8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80098f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fcd2 	bl	800a29c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	3301      	adds	r3, #1
 80098fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	085b      	lsrs	r3, r3, #1
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009906:	2b00      	cmp	r3, #0
 8009908:	f47f af65 	bne.w	80097d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4618      	mov	r0, r3
 8009912:	f00a fbef 	bl	80140f4 <USB_ReadInterrupts>
 8009916:	4603      	mov	r3, r0
 8009918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800991c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009920:	d122      	bne.n	8009968 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009930:	f023 0301 	bic.w	r3, r3, #1
 8009934:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800993c:	2b01      	cmp	r3, #1
 800993e:	d108      	bne.n	8009952 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fe2c 	bl	800a5a8 <HAL_PCDEx_LPM_Callback>
 8009950:	e002      	b.n	8009958 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f00f fbac 	bl	80190b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	695a      	ldr	r2, [r3, #20]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	f00a fbc1 	bl	80140f4 <USB_ReadInterrupts>
 8009972:	4603      	mov	r3, r0
 8009974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800997c:	d112      	bne.n	80099a4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b01      	cmp	r3, #1
 800998c:	d102      	bne.n	8009994 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f00f fb68 	bl	8019064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	695a      	ldr	r2, [r3, #20]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80099a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f00a fba3 	bl	80140f4 <USB_ReadInterrupts>
 80099ae:	4603      	mov	r3, r0
 80099b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099b8:	d121      	bne.n	80099fe <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	695a      	ldr	r2, [r3, #20]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80099c8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d111      	bne.n	80099f8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	089b      	lsrs	r3, r3, #2
 80099e4:	f003 020f 	and.w	r2, r3, #15
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80099ee:	2101      	movs	r1, #1
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fdd9 	bl	800a5a8 <HAL_PCDEx_LPM_Callback>
 80099f6:	e002      	b.n	80099fe <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f00f fb33 	bl	8019064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f00a fb76 	bl	80140f4 <USB_ReadInterrupts>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a12:	f040 80b5 	bne.w	8009b80 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	69fa      	ldr	r2, [r7, #28]
 8009a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2110      	movs	r1, #16
 8009a30:	4618      	mov	r0, r3
 8009a32:	f009 fcb5 	bl	80133a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a36:	2300      	movs	r3, #0
 8009a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a3a:	e046      	b.n	8009aca <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a94:	0151      	lsls	r1, r2, #5
 8009a96:	69fa      	ldr	r2, [r7, #28]
 8009a98:	440a      	add	r2, r1
 8009a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aa2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab4:	0151      	lsls	r1, r2, #5
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	440a      	add	r2, r1
 8009aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009abe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ac2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d3b3      	bcc.n	8009a3c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	69fa      	ldr	r2, [r7, #28]
 8009ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ae2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009ae6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d016      	beq.n	8009b1e <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b00:	f043 030b 	orr.w	r3, r3, #11
 8009b04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b10:	69fa      	ldr	r2, [r7, #28]
 8009b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b16:	f043 030b 	orr.w	r3, r3, #11
 8009b1a:	6453      	str	r3, [r2, #68]	; 0x44
 8009b1c:	e015      	b.n	8009b4a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	69fa      	ldr	r2, [r7, #28]
 8009b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b30:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009b34:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	69fa      	ldr	r2, [r7, #28]
 8009b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b44:	f043 030b 	orr.w	r3, r3, #11
 8009b48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f00a fb86 	bl	801427c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	695a      	ldr	r2, [r3, #20]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f00a fab5 	bl	80140f4 <USB_ReadInterrupts>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b94:	d124      	bne.n	8009be0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f00a fb4b 	bl	8014236 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f009 fc78 	bl	801349a <USB_GetDevSpeed>
 8009baa:	4603      	mov	r3, r0
 8009bac:	461a      	mov	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681c      	ldr	r4, [r3, #0]
 8009bb6:	f001 fbb7 	bl	800b328 <HAL_RCC_GetHCLKFreq>
 8009bba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f009 f99f 	bl	8012f08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f00f fa2b 	bl	8019026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	695a      	ldr	r2, [r3, #20]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f00a fa85 	bl	80140f4 <USB_ReadInterrupts>
 8009bea:	4603      	mov	r3, r0
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d10a      	bne.n	8009c0a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f00f fa08 	bl	801900a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695a      	ldr	r2, [r3, #20]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f002 0208 	and.w	r2, r2, #8
 8009c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f00a fa70 	bl	80140f4 <USB_ReadInterrupts>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1a:	2b80      	cmp	r3, #128	; 0x80
 8009c1c:	d122      	bne.n	8009c64 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c2e:	e014      	b.n	8009c5a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c34:	4613      	mov	r3, r2
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d105      	bne.n	8009c54 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 faf3 	bl	800a23a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	3301      	adds	r3, #1
 8009c58:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d3e5      	bcc.n	8009c30 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f00a fa43 	bl	80140f4 <USB_ReadInterrupts>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c78:	d13b      	bne.n	8009cf2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c7e:	e02b      	b.n	8009cd8 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c94:	4613      	mov	r3, r2
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	4413      	add	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	3340      	adds	r3, #64	; 0x40
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d115      	bne.n	8009cd2 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009ca6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	da12      	bge.n	8009cd2 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	440b      	add	r3, r1
 8009cba:	333f      	adds	r3, #63	; 0x3f
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fab4 	bl	800a23a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d3ce      	bcc.n	8009c80 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695a      	ldr	r2, [r3, #20]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f00a f9fc 	bl	80140f4 <USB_ReadInterrupts>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d06:	d155      	bne.n	8009db4 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d08:	2301      	movs	r3, #1
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d0c:	e045      	b.n	8009d9a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d22:	4613      	mov	r3, r2
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d12e      	bne.n	8009d94 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009d36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	da2b      	bge.n	8009d94 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009d48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d121      	bne.n	8009d94 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d54:	4613      	mov	r3, r2
 8009d56:	00db      	lsls	r3, r3, #3
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009d62:	2201      	movs	r2, #1
 8009d64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d90:	6053      	str	r3, [r2, #4]
            break;
 8009d92:	e007      	b.n	8009da4 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	3301      	adds	r3, #1
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d3b4      	bcc.n	8009d0e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	695a      	ldr	r2, [r3, #20]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f00a f99b 	bl	80140f4 <USB_ReadInterrupts>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc8:	d10a      	bne.n	8009de0 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f00f f9bc 	bl	8019148 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	695a      	ldr	r2, [r3, #20]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f00a f985 	bl	80140f4 <USB_ReadInterrupts>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d115      	bne.n	8009e20 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	f003 0304 	and.w	r3, r3, #4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f00f f9ac 	bl	8019164 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6859      	ldr	r1, [r3, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	605a      	str	r2, [r3, #4]
 8009e1c:	e000      	b.n	8009e20 <HAL_PCD_IRQHandler+0x920>
      return;
 8009e1e:	bf00      	nop
    }
  }
}
 8009e20:	3734      	adds	r7, #52	; 0x34
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd90      	pop	{r4, r7, pc}

08009e26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b082      	sub	sp, #8
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <HAL_PCD_SetAddress+0x1a>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e013      	b.n	8009e68 <HAL_PCD_SetAddress+0x42>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	78fa      	ldrb	r2, [r7, #3]
 8009e56:	4611      	mov	r1, r2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f00a f8e3 	bl	8014024 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	4608      	mov	r0, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	70fb      	strb	r3, [r7, #3]
 8009e82:	460b      	mov	r3, r1
 8009e84:	803b      	strh	r3, [r7, #0]
 8009e86:	4613      	mov	r3, r2
 8009e88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	da0f      	bge.n	8009eb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	f003 020f 	and.w	r2, r3, #15
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	3338      	adds	r3, #56	; 0x38
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	3304      	adds	r3, #4
 8009eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	705a      	strb	r2, [r3, #1]
 8009eb4:	e00f      	b.n	8009ed6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	f003 020f 	and.w	r2, r3, #15
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	4413      	add	r3, r2
 8009ecc:	3304      	adds	r3, #4
 8009ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	f003 030f 	and.w	r3, r3, #15
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009ee2:	883a      	ldrh	r2, [r7, #0]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	78ba      	ldrb	r2, [r7, #2]
 8009eec:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	785b      	ldrb	r3, [r3, #1]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009f00:	78bb      	ldrb	r3, [r7, #2]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d102      	bne.n	8009f0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_PCD_EP_Open+0xaa>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e00e      	b.n	8009f38 <HAL_PCD_EP_Open+0xc8>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68f9      	ldr	r1, [r7, #12]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f009 fad5 	bl	80134d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009f36:	7afb      	ldrb	r3, [r7, #11]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	da0f      	bge.n	8009f74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	f003 020f 	and.w	r2, r3, #15
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	3338      	adds	r3, #56	; 0x38
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	4413      	add	r3, r2
 8009f68:	3304      	adds	r3, #4
 8009f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	705a      	strb	r2, [r3, #1]
 8009f72:	e00f      	b.n	8009f94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	f003 020f 	and.w	r2, r3, #15
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4413      	add	r3, r2
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <HAL_PCD_EP_Close+0x6e>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e00e      	b.n	8009fcc <HAL_PCD_EP_Close+0x8c>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68f9      	ldr	r1, [r7, #12]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f009 fb13 	bl	80135e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	607a      	str	r2, [r7, #4]
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fe4:	7afb      	ldrb	r3, [r7, #11]
 8009fe6:	f003 020f 	and.w	r2, r3, #15
 8009fea:	4613      	mov	r3, r2
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2200      	movs	r2, #0
 800a00e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2200      	movs	r2, #0
 800a014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6979      	ldr	r1, [r7, #20]
 800a028:	4618      	mov	r0, r3
 800a02a:	f009 fbb9 	bl	80137a0 <USB_EPStartXfer>

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	f003 020f 	and.w	r2, r3, #15
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	4613      	mov	r3, r2
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a05a:	681b      	ldr	r3, [r3, #0]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	607a      	str	r2, [r7, #4]
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	460b      	mov	r3, r1
 800a076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	f003 020f 	and.w	r2, r3, #15
 800a07e:	4613      	mov	r3, r2
 800a080:	00db      	lsls	r3, r3, #3
 800a082:	4413      	add	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	3338      	adds	r3, #56	; 0x38
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	3304      	adds	r3, #4
 800a08e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0a8:	7afb      	ldrb	r3, [r7, #11]
 800a0aa:	f003 030f 	and.w	r3, r3, #15
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6979      	ldr	r1, [r7, #20]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f009 fb70 	bl	80137a0 <USB_EPStartXfer>

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a0d6:	78fb      	ldrb	r3, [r7, #3]
 800a0d8:	f003 020f 	and.w	r2, r3, #15
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d901      	bls.n	800a0e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e04e      	b.n	800a186 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a0e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	da0f      	bge.n	800a110 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	f003 020f 	and.w	r2, r3, #15
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	00db      	lsls	r3, r3, #3
 800a0fa:	4413      	add	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	3338      	adds	r3, #56	; 0x38
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	4413      	add	r3, r2
 800a104:	3304      	adds	r3, #4
 800a106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	705a      	strb	r2, [r3, #1]
 800a10e:	e00d      	b.n	800a12c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	4613      	mov	r3, r2
 800a114:	00db      	lsls	r3, r3, #3
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	4413      	add	r3, r2
 800a122:	3304      	adds	r3, #4
 800a124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2201      	movs	r2, #1
 800a130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a144:	2b01      	cmp	r3, #1
 800a146:	d101      	bne.n	800a14c <HAL_PCD_EP_SetStall+0x82>
 800a148:	2302      	movs	r3, #2
 800a14a:	e01c      	b.n	800a186 <HAL_PCD_EP_SetStall+0xbc>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68f9      	ldr	r1, [r7, #12]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f009 fe8e 	bl	8013e7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	f003 030f 	and.w	r3, r3, #15
 800a166:	2b00      	cmp	r3, #0
 800a168:	d108      	bne.n	800a17c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a174:	4619      	mov	r1, r3
 800a176:	4610      	mov	r0, r2
 800a178:	f00a f880 	bl	801427c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a19a:	78fb      	ldrb	r3, [r7, #3]
 800a19c:	f003 020f 	and.w	r2, r3, #15
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d901      	bls.n	800a1ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e042      	b.n	800a232 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a1ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	da0f      	bge.n	800a1d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	f003 020f 	and.w	r2, r3, #15
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	00db      	lsls	r3, r3, #3
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	3338      	adds	r3, #56	; 0x38
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	705a      	strb	r2, [r3, #1]
 800a1d2:	e00f      	b.n	800a1f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	f003 020f 	and.w	r2, r3, #15
 800a1da:	4613      	mov	r3, r2
 800a1dc:	00db      	lsls	r3, r3, #3
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1fa:	78fb      	ldrb	r3, [r7, #3]
 800a1fc:	f003 030f 	and.w	r3, r3, #15
 800a200:	b2da      	uxtb	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <HAL_PCD_EP_ClrStall+0x86>
 800a210:	2302      	movs	r3, #2
 800a212:	e00e      	b.n	800a232 <HAL_PCD_EP_ClrStall+0xa4>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68f9      	ldr	r1, [r7, #12]
 800a222:	4618      	mov	r0, r3
 800a224:	f009 fe98 	bl	8013f58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	da0c      	bge.n	800a268 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	f003 020f 	and.w	r2, r3, #15
 800a254:	4613      	mov	r3, r2
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	4413      	add	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	3338      	adds	r3, #56	; 0x38
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	4413      	add	r3, r2
 800a262:	3304      	adds	r3, #4
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	e00c      	b.n	800a282 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	f003 020f 	and.w	r2, r3, #15
 800a26e:	4613      	mov	r3, r2
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	4413      	add	r3, r2
 800a27e:	3304      	adds	r3, #4
 800a280:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68f9      	ldr	r1, [r7, #12]
 800a288:	4618      	mov	r0, r3
 800a28a:	f009 fcbb 	bl	8013c04 <USB_EPStopXfer>
 800a28e:	4603      	mov	r3, r0
 800a290:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a292:	7afb      	ldrb	r3, [r7, #11]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b088      	sub	sp, #32
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a2b0:	683a      	ldr	r2, [r7, #0]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	00db      	lsls	r3, r3, #3
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	3338      	adds	r3, #56	; 0x38
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	4413      	add	r3, r2
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	695a      	ldr	r2, [r3, #20]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d901      	bls.n	800a2d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e067      	b.n	800a3a4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	691a      	ldr	r2, [r3, #16]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d902      	bls.n	800a2f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	3303      	adds	r3, #3
 800a2f4:	089b      	lsrs	r3, r3, #2
 800a2f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a2f8:	e026      	b.n	800a348 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	691a      	ldr	r2, [r3, #16]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	69fa      	ldr	r2, [r7, #28]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d902      	bls.n	800a316 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	3303      	adds	r3, #3
 800a31a:	089b      	lsrs	r3, r3, #2
 800a31c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68d9      	ldr	r1, [r3, #12]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	b2da      	uxtb	r2, r3
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	6978      	ldr	r0, [r7, #20]
 800a32c:	f009 fd14 	bl	8013d58 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68da      	ldr	r2, [r3, #12]
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	441a      	add	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	695a      	ldr	r2, [r3, #20]
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	441a      	add	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	b29b      	uxth	r3, r3
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d809      	bhi.n	800a372 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	695a      	ldr	r2, [r3, #20]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a366:	429a      	cmp	r2, r3
 800a368:	d203      	bcs.n	800a372 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1c3      	bne.n	800a2fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	691a      	ldr	r2, [r3, #16]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d811      	bhi.n	800a3a2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	f003 030f 	and.w	r3, r3, #15
 800a384:	2201      	movs	r2, #1
 800a386:	fa02 f303 	lsl.w	r3, r2, r3
 800a38a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	43db      	mvns	r3, r3
 800a398:	6939      	ldr	r1, [r7, #16]
 800a39a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a39e:	4013      	ands	r3, r2
 800a3a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3720      	adds	r7, #32
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	333c      	adds	r3, #60	; 0x3c
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	4a19      	ldr	r2, [pc, #100]	; (800a444 <PCD_EP_OutXfrComplete_int+0x98>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d124      	bne.n	800a42c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00a      	beq.n	800a402 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3fe:	6093      	str	r3, [r2, #8]
 800a400:	e01a      	b.n	800a438 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	f003 0320 	and.w	r3, r3, #32
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d008      	beq.n	800a41e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a418:	461a      	mov	r2, r3
 800a41a:	2320      	movs	r3, #32
 800a41c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	b2db      	uxtb	r3, r3
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f00e fdbb 	bl	8018fa0 <HAL_PCD_DataOutStageCallback>
 800a42a:	e005      	b.n	800a438 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f00e fdb4 	bl	8018fa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	4f54310a 	.word	0x4f54310a

0800a448 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	333c      	adds	r3, #60	; 0x3c
 800a460:	3304      	adds	r3, #4
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4a0c      	ldr	r2, [pc, #48]	; (800a4ac <PCD_EP_OutSetupPacket_int+0x64>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d90e      	bls.n	800a49c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a484:	2b00      	cmp	r3, #0
 800a486:	d009      	beq.n	800a49c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a494:	461a      	mov	r2, r3
 800a496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f00e fd6d 	bl	8018f7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	4f54300a 	.word	0x4f54300a

0800a4b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d107      	bne.n	800a4de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a4ce:	883b      	ldrh	r3, [r7, #0]
 800a4d0:	0419      	lsls	r1, r3, #16
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	629a      	str	r2, [r3, #40]	; 0x28
 800a4dc:	e028      	b.n	800a530 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e4:	0c1b      	lsrs	r3, r3, #16
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
 800a4f0:	e00d      	b.n	800a50e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
 800a4f8:	3340      	adds	r3, #64	; 0x40
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	0c1b      	lsrs	r3, r3, #16
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	4413      	add	r3, r2
 800a506:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a508:	7bfb      	ldrb	r3, [r7, #15]
 800a50a:	3301      	adds	r3, #1
 800a50c:	73fb      	strb	r3, [r7, #15]
 800a50e:	7bfa      	ldrb	r2, [r7, #15]
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	3b01      	subs	r3, #1
 800a514:	429a      	cmp	r2, r3
 800a516:	d3ec      	bcc.n	800a4f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a518:	883b      	ldrh	r3, [r7, #0]
 800a51a:	0418      	lsls	r0, r3, #16
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6819      	ldr	r1, [r3, #0]
 800a520:	78fb      	ldrb	r3, [r7, #3]
 800a522:	3b01      	subs	r3, #1
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	4302      	orrs	r2, r0
 800a528:	3340      	adds	r3, #64	; 0x40
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	440b      	add	r3, r1
 800a52e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	460b      	mov	r3, r1
 800a548:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	887a      	ldrh	r2, [r7, #2]
 800a550:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a58e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a592:	f043 0303 	orr.w	r3, r3, #3
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a5c4:	4b0d      	ldr	r3, [pc, #52]	; (800a5fc <HAL_PWREx_GetVoltageRange+0x3c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5d0:	d102      	bne.n	800a5d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800a5d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d6:	e00b      	b.n	800a5f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800a5d8:	4b08      	ldr	r3, [pc, #32]	; (800a5fc <HAL_PWREx_GetVoltageRange+0x3c>)
 800a5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e6:	d102      	bne.n	800a5ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800a5e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ec:	e000      	b.n	800a5f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800a5ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	40007000 	.word	0x40007000

0800a600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d141      	bne.n	800a692 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a60e:	4b4b      	ldr	r3, [pc, #300]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a61a:	d131      	bne.n	800a680 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a61c:	4b47      	ldr	r3, [pc, #284]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a622:	4a46      	ldr	r2, [pc, #280]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a62c:	4b43      	ldr	r3, [pc, #268]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a634:	4a41      	ldr	r2, [pc, #260]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a63a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a63c:	4b40      	ldr	r3, [pc, #256]	; (800a740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2232      	movs	r2, #50	; 0x32
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	4a3f      	ldr	r2, [pc, #252]	; (800a744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a648:	fba2 2303 	umull	r2, r3, r2, r3
 800a64c:	0c9b      	lsrs	r3, r3, #18
 800a64e:	3301      	adds	r3, #1
 800a650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a652:	e002      	b.n	800a65a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3b01      	subs	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a65a:	4b38      	ldr	r3, [pc, #224]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a666:	d102      	bne.n	800a66e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1f2      	bne.n	800a654 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a66e:	4b33      	ldr	r3, [pc, #204]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a67a:	d158      	bne.n	800a72e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e057      	b.n	800a730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a680:	4b2e      	ldr	r3, [pc, #184]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a686:	4a2d      	ldr	r2, [pc, #180]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a68c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a690:	e04d      	b.n	800a72e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a698:	d141      	bne.n	800a71e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a69a:	4b28      	ldr	r3, [pc, #160]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a6:	d131      	bne.n	800a70c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a6a8:	4b24      	ldr	r3, [pc, #144]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ae:	4a23      	ldr	r2, [pc, #140]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a6b8:	4b20      	ldr	r3, [pc, #128]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a6c0:	4a1e      	ldr	r2, [pc, #120]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a6c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a6c8:	4b1d      	ldr	r3, [pc, #116]	; (800a740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2232      	movs	r2, #50	; 0x32
 800a6ce:	fb02 f303 	mul.w	r3, r2, r3
 800a6d2:	4a1c      	ldr	r2, [pc, #112]	; (800a744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a6d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d8:	0c9b      	lsrs	r3, r3, #18
 800a6da:	3301      	adds	r3, #1
 800a6dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a6de:	e002      	b.n	800a6e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a6e6:	4b15      	ldr	r3, [pc, #84]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6f2:	d102      	bne.n	800a6fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1f2      	bne.n	800a6e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a6fa:	4b10      	ldr	r3, [pc, #64]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a706:	d112      	bne.n	800a72e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e011      	b.n	800a730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a70c:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a712:	4a0a      	ldr	r2, [pc, #40]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a71c:	e007      	b.n	800a72e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a71e:	4b07      	ldr	r3, [pc, #28]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a726:	4a05      	ldr	r2, [pc, #20]	; (800a73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a72c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	40007000 	.word	0x40007000
 800a740:	20000004 	.word	0x20000004
 800a744:	431bde83 	.word	0x431bde83

0800a748 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a748:	b480      	push	{r7}
 800a74a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a74c:	4b05      	ldr	r3, [pc, #20]	; (800a764 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4a04      	ldr	r2, [pc, #16]	; (800a764 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a756:	6053      	str	r3, [r2, #4]
}
 800a758:	bf00      	nop
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	40007000 	.word	0x40007000

0800a768 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d102      	bne.n	800a77c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	f000 bc08 	b.w	800af8c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a77c:	4b96      	ldr	r3, [pc, #600]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	f003 030c 	and.w	r3, r3, #12
 800a784:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a786:	4b94      	ldr	r3, [pc, #592]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f003 0303 	and.w	r3, r3, #3
 800a78e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 80e4 	beq.w	800a966 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d007      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x4c>
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	2b0c      	cmp	r3, #12
 800a7a8:	f040 808b 	bne.w	800a8c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	f040 8087 	bne.w	800a8c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a7b4:	4b88      	ldr	r3, [pc, #544]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d005      	beq.n	800a7cc <HAL_RCC_OscConfig+0x64>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e3df      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a1a      	ldr	r2, [r3, #32]
 800a7d0:	4b81      	ldr	r3, [pc, #516]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0308 	and.w	r3, r3, #8
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d004      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x7e>
 800a7dc:	4b7e      	ldr	r3, [pc, #504]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7e4:	e005      	b.n	800a7f2 <HAL_RCC_OscConfig+0x8a>
 800a7e6:	4b7c      	ldr	r3, [pc, #496]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a7e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7ec:	091b      	lsrs	r3, r3, #4
 800a7ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d223      	bcs.n	800a83e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fdf8 	bl	800b3f0 <RCC_SetFlashLatencyFromMSIRange>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e3c0      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a80a:	4b73      	ldr	r3, [pc, #460]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a72      	ldr	r2, [pc, #456]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a810:	f043 0308 	orr.w	r3, r3, #8
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	4b70      	ldr	r3, [pc, #448]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	496d      	ldr	r1, [pc, #436]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a824:	4313      	orrs	r3, r2
 800a826:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a828:	4b6b      	ldr	r3, [pc, #428]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	69db      	ldr	r3, [r3, #28]
 800a834:	021b      	lsls	r3, r3, #8
 800a836:	4968      	ldr	r1, [pc, #416]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	604b      	str	r3, [r1, #4]
 800a83c:	e025      	b.n	800a88a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a83e:	4b66      	ldr	r3, [pc, #408]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a65      	ldr	r2, [pc, #404]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a844:	f043 0308 	orr.w	r3, r3, #8
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	4b63      	ldr	r3, [pc, #396]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	4960      	ldr	r1, [pc, #384]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a858:	4313      	orrs	r3, r2
 800a85a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a85c:	4b5e      	ldr	r3, [pc, #376]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	021b      	lsls	r3, r3, #8
 800a86a:	495b      	ldr	r1, [pc, #364]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d109      	bne.n	800a88a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 fdb8 	bl	800b3f0 <RCC_SetFlashLatencyFromMSIRange>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e380      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a88a:	f000 fcc1 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800a88e:	4602      	mov	r2, r0
 800a890:	4b51      	ldr	r3, [pc, #324]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	091b      	lsrs	r3, r3, #4
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	4950      	ldr	r1, [pc, #320]	; (800a9dc <HAL_RCC_OscConfig+0x274>)
 800a89c:	5ccb      	ldrb	r3, [r1, r3]
 800a89e:	f003 031f 	and.w	r3, r3, #31
 800a8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a6:	4a4e      	ldr	r2, [pc, #312]	; (800a9e0 <HAL_RCC_OscConfig+0x278>)
 800a8a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a8aa:	4b4e      	ldr	r3, [pc, #312]	; (800a9e4 <HAL_RCC_OscConfig+0x27c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fc fb4a 	bl	8006f48 <HAL_InitTick>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d052      	beq.n	800a964 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	e364      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d032      	beq.n	800a930 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a8ca:	4b43      	ldr	r3, [pc, #268]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a42      	ldr	r2, [pc, #264]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a8d0:	f043 0301 	orr.w	r3, r3, #1
 800a8d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a8d6:	f7fc fb87 	bl	8006fe8 <HAL_GetTick>
 800a8da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a8dc:	e008      	b.n	800a8f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a8de:	f7fc fb83 	bl	8006fe8 <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d901      	bls.n	800a8f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e34d      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a8f0:	4b39      	ldr	r3, [pc, #228]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0f0      	beq.n	800a8de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8fc:	4b36      	ldr	r3, [pc, #216]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a35      	ldr	r2, [pc, #212]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a902:	f043 0308 	orr.w	r3, r3, #8
 800a906:	6013      	str	r3, [r2, #0]
 800a908:	4b33      	ldr	r3, [pc, #204]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	4930      	ldr	r1, [pc, #192]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a916:	4313      	orrs	r3, r2
 800a918:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a91a:	4b2f      	ldr	r3, [pc, #188]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	021b      	lsls	r3, r3, #8
 800a928:	492b      	ldr	r1, [pc, #172]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	604b      	str	r3, [r1, #4]
 800a92e:	e01a      	b.n	800a966 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a930:	4b29      	ldr	r3, [pc, #164]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a28      	ldr	r2, [pc, #160]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a936:	f023 0301 	bic.w	r3, r3, #1
 800a93a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a93c:	f7fc fb54 	bl	8006fe8 <HAL_GetTick>
 800a940:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a942:	e008      	b.n	800a956 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a944:	f7fc fb50 	bl	8006fe8 <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d901      	bls.n	800a956 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e31a      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a956:	4b20      	ldr	r3, [pc, #128]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1f0      	bne.n	800a944 <HAL_RCC_OscConfig+0x1dc>
 800a962:	e000      	b.n	800a966 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a964:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d073      	beq.n	800aa5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	2b08      	cmp	r3, #8
 800a976:	d005      	beq.n	800a984 <HAL_RCC_OscConfig+0x21c>
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	2b0c      	cmp	r3, #12
 800a97c:	d10e      	bne.n	800a99c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b03      	cmp	r3, #3
 800a982:	d10b      	bne.n	800a99c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a984:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d063      	beq.n	800aa58 <HAL_RCC_OscConfig+0x2f0>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d15f      	bne.n	800aa58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e2f7      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a4:	d106      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x24c>
 800a9a6:	4b0c      	ldr	r3, [pc, #48]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a0b      	ldr	r2, [pc, #44]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a9ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	e025      	b.n	800aa00 <HAL_RCC_OscConfig+0x298>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9bc:	d114      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x280>
 800a9be:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a05      	ldr	r2, [pc, #20]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a9c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	4b03      	ldr	r3, [pc, #12]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a02      	ldr	r2, [pc, #8]	; (800a9d8 <HAL_RCC_OscConfig+0x270>)
 800a9d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	e013      	b.n	800aa00 <HAL_RCC_OscConfig+0x298>
 800a9d8:	40021000 	.word	0x40021000
 800a9dc:	0801cbf0 	.word	0x0801cbf0
 800a9e0:	20000004 	.word	0x20000004
 800a9e4:	20000008 	.word	0x20000008
 800a9e8:	4ba0      	ldr	r3, [pc, #640]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a9f      	ldr	r2, [pc, #636]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800a9ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	4b9d      	ldr	r3, [pc, #628]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a9c      	ldr	r2, [pc, #624]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800a9fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d013      	beq.n	800aa30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa08:	f7fc faee 	bl	8006fe8 <HAL_GetTick>
 800aa0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa0e:	e008      	b.n	800aa22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa10:	f7fc faea 	bl	8006fe8 <HAL_GetTick>
 800aa14:	4602      	mov	r2, r0
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	2b64      	cmp	r3, #100	; 0x64
 800aa1c:	d901      	bls.n	800aa22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e2b4      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa22:	4b92      	ldr	r3, [pc, #584]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0f0      	beq.n	800aa10 <HAL_RCC_OscConfig+0x2a8>
 800aa2e:	e014      	b.n	800aa5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa30:	f7fc fada 	bl	8006fe8 <HAL_GetTick>
 800aa34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aa36:	e008      	b.n	800aa4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa38:	f7fc fad6 	bl	8006fe8 <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	2b64      	cmp	r3, #100	; 0x64
 800aa44:	d901      	bls.n	800aa4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e2a0      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aa4a:	4b88      	ldr	r3, [pc, #544]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1f0      	bne.n	800aa38 <HAL_RCC_OscConfig+0x2d0>
 800aa56:	e000      	b.n	800aa5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0302 	and.w	r3, r3, #2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d060      	beq.n	800ab28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d005      	beq.n	800aa78 <HAL_RCC_OscConfig+0x310>
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	2b0c      	cmp	r3, #12
 800aa70:	d119      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d116      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa78:	4b7c      	ldr	r3, [pc, #496]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <HAL_RCC_OscConfig+0x328>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e27d      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa90:	4b76      	ldr	r3, [pc, #472]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	061b      	lsls	r3, r3, #24
 800aa9e:	4973      	ldr	r1, [pc, #460]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aaa4:	e040      	b.n	800ab28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d023      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aaae:	4b6f      	ldr	r3, [pc, #444]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a6e      	ldr	r2, [pc, #440]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaba:	f7fc fa95 	bl	8006fe8 <HAL_GetTick>
 800aabe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aac0:	e008      	b.n	800aad4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aac2:	f7fc fa91 	bl	8006fe8 <HAL_GetTick>
 800aac6:	4602      	mov	r2, r0
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d901      	bls.n	800aad4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e25b      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aad4:	4b65      	ldr	r3, [pc, #404]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0f0      	beq.n	800aac2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aae0:	4b62      	ldr	r3, [pc, #392]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	061b      	lsls	r3, r3, #24
 800aaee:	495f      	ldr	r1, [pc, #380]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	604b      	str	r3, [r1, #4]
 800aaf4:	e018      	b.n	800ab28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aaf6:	4b5d      	ldr	r3, [pc, #372]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a5c      	ldr	r2, [pc, #368]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aafc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab02:	f7fc fa71 	bl	8006fe8 <HAL_GetTick>
 800ab06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ab08:	e008      	b.n	800ab1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab0a:	f7fc fa6d 	bl	8006fe8 <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d901      	bls.n	800ab1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e237      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ab1c:	4b53      	ldr	r3, [pc, #332]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1f0      	bne.n	800ab0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0308 	and.w	r3, r3, #8
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d03c      	beq.n	800abae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	695b      	ldr	r3, [r3, #20]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d01c      	beq.n	800ab76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab3c:	4b4b      	ldr	r3, [pc, #300]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ab3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab42:	4a4a      	ldr	r2, [pc, #296]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ab44:	f043 0301 	orr.w	r3, r3, #1
 800ab48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab4c:	f7fc fa4c 	bl	8006fe8 <HAL_GetTick>
 800ab50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab52:	e008      	b.n	800ab66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab54:	f7fc fa48 	bl	8006fe8 <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d901      	bls.n	800ab66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ab62:	2303      	movs	r3, #3
 800ab64:	e212      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab66:	4b41      	ldr	r3, [pc, #260]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ab68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d0ef      	beq.n	800ab54 <HAL_RCC_OscConfig+0x3ec>
 800ab74:	e01b      	b.n	800abae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab76:	4b3d      	ldr	r3, [pc, #244]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ab78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab7c:	4a3b      	ldr	r2, [pc, #236]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ab7e:	f023 0301 	bic.w	r3, r3, #1
 800ab82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab86:	f7fc fa2f 	bl	8006fe8 <HAL_GetTick>
 800ab8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ab8c:	e008      	b.n	800aba0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab8e:	f7fc fa2b 	bl	8006fe8 <HAL_GetTick>
 800ab92:	4602      	mov	r2, r0
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d901      	bls.n	800aba0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e1f5      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aba0:	4b32      	ldr	r3, [pc, #200]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800aba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1ef      	bne.n	800ab8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 80a6 	beq.w	800ad08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800abbc:	2300      	movs	r3, #0
 800abbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800abc0:	4b2a      	ldr	r3, [pc, #168]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800abc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10d      	bne.n	800abe8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abcc:	4b27      	ldr	r3, [pc, #156]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800abce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd0:	4a26      	ldr	r2, [pc, #152]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800abd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abd6:	6593      	str	r3, [r2, #88]	; 0x58
 800abd8:	4b24      	ldr	r3, [pc, #144]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800abda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abe0:	60bb      	str	r3, [r7, #8]
 800abe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800abe4:	2301      	movs	r3, #1
 800abe6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800abe8:	4b21      	ldr	r3, [pc, #132]	; (800ac70 <HAL_RCC_OscConfig+0x508>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d118      	bne.n	800ac26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800abf4:	4b1e      	ldr	r3, [pc, #120]	; (800ac70 <HAL_RCC_OscConfig+0x508>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a1d      	ldr	r2, [pc, #116]	; (800ac70 <HAL_RCC_OscConfig+0x508>)
 800abfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac00:	f7fc f9f2 	bl	8006fe8 <HAL_GetTick>
 800ac04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac06:	e008      	b.n	800ac1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac08:	f7fc f9ee 	bl	8006fe8 <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d901      	bls.n	800ac1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e1b8      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac1a:	4b15      	ldr	r3, [pc, #84]	; (800ac70 <HAL_RCC_OscConfig+0x508>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0f0      	beq.n	800ac08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d108      	bne.n	800ac40 <HAL_RCC_OscConfig+0x4d8>
 800ac2e:	4b0f      	ldr	r3, [pc, #60]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ac30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac34:	4a0d      	ldr	r2, [pc, #52]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ac36:	f043 0301 	orr.w	r3, r3, #1
 800ac3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac3e:	e029      	b.n	800ac94 <HAL_RCC_OscConfig+0x52c>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	2b05      	cmp	r3, #5
 800ac46:	d115      	bne.n	800ac74 <HAL_RCC_OscConfig+0x50c>
 800ac48:	4b08      	ldr	r3, [pc, #32]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ac4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac4e:	4a07      	ldr	r2, [pc, #28]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ac50:	f043 0304 	orr.w	r3, r3, #4
 800ac54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac58:	4b04      	ldr	r3, [pc, #16]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ac5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac5e:	4a03      	ldr	r2, [pc, #12]	; (800ac6c <HAL_RCC_OscConfig+0x504>)
 800ac60:	f043 0301 	orr.w	r3, r3, #1
 800ac64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac68:	e014      	b.n	800ac94 <HAL_RCC_OscConfig+0x52c>
 800ac6a:	bf00      	nop
 800ac6c:	40021000 	.word	0x40021000
 800ac70:	40007000 	.word	0x40007000
 800ac74:	4b9d      	ldr	r3, [pc, #628]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ac76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac7a:	4a9c      	ldr	r2, [pc, #624]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ac7c:	f023 0301 	bic.w	r3, r3, #1
 800ac80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac84:	4b99      	ldr	r3, [pc, #612]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ac86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac8a:	4a98      	ldr	r2, [pc, #608]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ac8c:	f023 0304 	bic.w	r3, r3, #4
 800ac90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d016      	beq.n	800acca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac9c:	f7fc f9a4 	bl	8006fe8 <HAL_GetTick>
 800aca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aca2:	e00a      	b.n	800acba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aca4:	f7fc f9a0 	bl	8006fe8 <HAL_GetTick>
 800aca8:	4602      	mov	r2, r0
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	f241 3288 	movw	r2, #5000	; 0x1388
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d901      	bls.n	800acba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e168      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acba:	4b8c      	ldr	r3, [pc, #560]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800acbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d0ed      	beq.n	800aca4 <HAL_RCC_OscConfig+0x53c>
 800acc8:	e015      	b.n	800acf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acca:	f7fc f98d 	bl	8006fe8 <HAL_GetTick>
 800acce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800acd0:	e00a      	b.n	800ace8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acd2:	f7fc f989 	bl	8006fe8 <HAL_GetTick>
 800acd6:	4602      	mov	r2, r0
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d901      	bls.n	800ace8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e151      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ace8:	4b80      	ldr	r3, [pc, #512]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800acea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acee:	f003 0302 	and.w	r3, r3, #2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1ed      	bne.n	800acd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800acf6:	7ffb      	ldrb	r3, [r7, #31]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d105      	bne.n	800ad08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800acfc:	4b7b      	ldr	r3, [pc, #492]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800acfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad00:	4a7a      	ldr	r2, [pc, #488]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ad02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d03c      	beq.n	800ad8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01c      	beq.n	800ad56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ad1c:	4b73      	ldr	r3, [pc, #460]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ad1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad22:	4a72      	ldr	r2, [pc, #456]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ad24:	f043 0301 	orr.w	r3, r3, #1
 800ad28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad2c:	f7fc f95c 	bl	8006fe8 <HAL_GetTick>
 800ad30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ad32:	e008      	b.n	800ad46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad34:	f7fc f958 	bl	8006fe8 <HAL_GetTick>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d901      	bls.n	800ad46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	e122      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ad46:	4b69      	ldr	r3, [pc, #420]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ad48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad4c:	f003 0302 	and.w	r3, r3, #2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0ef      	beq.n	800ad34 <HAL_RCC_OscConfig+0x5cc>
 800ad54:	e01b      	b.n	800ad8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad56:	4b65      	ldr	r3, [pc, #404]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ad58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad5c:	4a63      	ldr	r2, [pc, #396]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ad5e:	f023 0301 	bic.w	r3, r3, #1
 800ad62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad66:	f7fc f93f 	bl	8006fe8 <HAL_GetTick>
 800ad6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad6c:	e008      	b.n	800ad80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad6e:	f7fc f93b 	bl	8006fe8 <HAL_GetTick>
 800ad72:	4602      	mov	r2, r0
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d901      	bls.n	800ad80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e105      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad80:	4b5a      	ldr	r3, [pc, #360]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ad82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1ef      	bne.n	800ad6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 80f9 	beq.w	800af8a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	f040 80cf 	bne.w	800af40 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ada2:	4b52      	ldr	r3, [pc, #328]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f003 0203 	and.w	r2, r3, #3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d12c      	bne.n	800ae10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc0:	3b01      	subs	r3, #1
 800adc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d123      	bne.n	800ae10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800add4:	429a      	cmp	r2, r3
 800add6:	d11b      	bne.n	800ae10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d113      	bne.n	800ae10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf2:	085b      	lsrs	r3, r3, #1
 800adf4:	3b01      	subs	r3, #1
 800adf6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d109      	bne.n	800ae10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	085b      	lsrs	r3, r3, #1
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d071      	beq.n	800aef4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2b0c      	cmp	r3, #12
 800ae14:	d068      	beq.n	800aee8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ae16:	4b35      	ldr	r3, [pc, #212]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d105      	bne.n	800ae2e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ae22:	4b32      	ldr	r3, [pc, #200]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e0ac      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ae32:	4b2e      	ldr	r3, [pc, #184]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a2d      	ldr	r2, [pc, #180]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ae38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ae3e:	f7fc f8d3 	bl	8006fe8 <HAL_GetTick>
 800ae42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae44:	e008      	b.n	800ae58 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae46:	f7fc f8cf 	bl	8006fe8 <HAL_GetTick>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d901      	bls.n	800ae58 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e099      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae58:	4b24      	ldr	r3, [pc, #144]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1f0      	bne.n	800ae46 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae64:	4b21      	ldr	r3, [pc, #132]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800ae66:	68da      	ldr	r2, [r3, #12]
 800ae68:	4b21      	ldr	r3, [pc, #132]	; (800aef0 <HAL_RCC_OscConfig+0x788>)
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae74:	3a01      	subs	r2, #1
 800ae76:	0112      	lsls	r2, r2, #4
 800ae78:	4311      	orrs	r1, r2
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae7e:	0212      	lsls	r2, r2, #8
 800ae80:	4311      	orrs	r1, r2
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ae86:	0852      	lsrs	r2, r2, #1
 800ae88:	3a01      	subs	r2, #1
 800ae8a:	0552      	lsls	r2, r2, #21
 800ae8c:	4311      	orrs	r1, r2
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ae92:	0852      	lsrs	r2, r2, #1
 800ae94:	3a01      	subs	r2, #1
 800ae96:	0652      	lsls	r2, r2, #25
 800ae98:	4311      	orrs	r1, r2
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae9e:	06d2      	lsls	r2, r2, #27
 800aea0:	430a      	orrs	r2, r1
 800aea2:	4912      	ldr	r1, [pc, #72]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800aea4:	4313      	orrs	r3, r2
 800aea6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800aea8:	4b10      	ldr	r3, [pc, #64]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a0f      	ldr	r2, [pc, #60]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800aeae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	4a0c      	ldr	r2, [pc, #48]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800aeba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aebe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aec0:	f7fc f892 	bl	8006fe8 <HAL_GetTick>
 800aec4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aec6:	e008      	b.n	800aeda <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aec8:	f7fc f88e 	bl	8006fe8 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d901      	bls.n	800aeda <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e058      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aeda:	4b04      	ldr	r3, [pc, #16]	; (800aeec <HAL_RCC_OscConfig+0x784>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0f0      	beq.n	800aec8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aee6:	e050      	b.n	800af8a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e04f      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
 800aeec:	40021000 	.word	0x40021000
 800aef0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aef4:	4b27      	ldr	r3, [pc, #156]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d144      	bne.n	800af8a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800af00:	4b24      	ldr	r3, [pc, #144]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a23      	ldr	r2, [pc, #140]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800af0c:	4b21      	ldr	r3, [pc, #132]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	4a20      	ldr	r2, [pc, #128]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af18:	f7fc f866 	bl	8006fe8 <HAL_GetTick>
 800af1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af1e:	e008      	b.n	800af32 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af20:	f7fc f862 	bl	8006fe8 <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d901      	bls.n	800af32 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800af2e:	2303      	movs	r3, #3
 800af30:	e02c      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af32:	4b18      	ldr	r3, [pc, #96]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0f0      	beq.n	800af20 <HAL_RCC_OscConfig+0x7b8>
 800af3e:	e024      	b.n	800af8a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	2b0c      	cmp	r3, #12
 800af44:	d01f      	beq.n	800af86 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af46:	4b13      	ldr	r3, [pc, #76]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a12      	ldr	r2, [pc, #72]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af52:	f7fc f849 	bl	8006fe8 <HAL_GetTick>
 800af56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af58:	e008      	b.n	800af6c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af5a:	f7fc f845 	bl	8006fe8 <HAL_GetTick>
 800af5e:	4602      	mov	r2, r0
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	2b02      	cmp	r3, #2
 800af66:	d901      	bls.n	800af6c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e00f      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af6c:	4b09      	ldr	r3, [pc, #36]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1f0      	bne.n	800af5a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800af78:	4b06      	ldr	r3, [pc, #24]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af7a:	68da      	ldr	r2, [r3, #12]
 800af7c:	4905      	ldr	r1, [pc, #20]	; (800af94 <HAL_RCC_OscConfig+0x82c>)
 800af7e:	4b06      	ldr	r3, [pc, #24]	; (800af98 <HAL_RCC_OscConfig+0x830>)
 800af80:	4013      	ands	r3, r2
 800af82:	60cb      	str	r3, [r1, #12]
 800af84:	e001      	b.n	800af8a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e000      	b.n	800af8c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3720      	adds	r7, #32
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	40021000 	.word	0x40021000
 800af98:	feeefffc 	.word	0xfeeefffc

0800af9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e11d      	b.n	800b1f0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800afb4:	4b90      	ldr	r3, [pc, #576]	; (800b1f8 <HAL_RCC_ClockConfig+0x25c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 030f 	and.w	r3, r3, #15
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d910      	bls.n	800afe4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afc2:	4b8d      	ldr	r3, [pc, #564]	; (800b1f8 <HAL_RCC_ClockConfig+0x25c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f023 020f 	bic.w	r2, r3, #15
 800afca:	498b      	ldr	r1, [pc, #556]	; (800b1f8 <HAL_RCC_ClockConfig+0x25c>)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	4313      	orrs	r3, r2
 800afd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afd2:	4b89      	ldr	r3, [pc, #548]	; (800b1f8 <HAL_RCC_ClockConfig+0x25c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 030f 	and.w	r3, r3, #15
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d001      	beq.n	800afe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e105      	b.n	800b1f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 0302 	and.w	r3, r3, #2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d010      	beq.n	800b012 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	4b81      	ldr	r3, [pc, #516]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800affc:	429a      	cmp	r2, r3
 800affe:	d908      	bls.n	800b012 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b000:	4b7e      	ldr	r3, [pc, #504]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	497b      	ldr	r1, [pc, #492]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b00e:	4313      	orrs	r3, r2
 800b010:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d079      	beq.n	800b112 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	2b03      	cmp	r3, #3
 800b024:	d11e      	bne.n	800b064 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b026:	4b75      	ldr	r3, [pc, #468]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e0dc      	b.n	800b1f0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800b036:	f000 fa35 	bl	800b4a4 <RCC_GetSysClockFreqFromPLLSource>
 800b03a:	4603      	mov	r3, r0
 800b03c:	4a70      	ldr	r2, [pc, #448]	; (800b200 <HAL_RCC_ClockConfig+0x264>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d946      	bls.n	800b0d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b042:	4b6e      	ldr	r3, [pc, #440]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d140      	bne.n	800b0d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b04e:	4b6b      	ldr	r3, [pc, #428]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b056:	4a69      	ldr	r2, [pc, #420]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b05c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b05e:	2380      	movs	r3, #128	; 0x80
 800b060:	617b      	str	r3, [r7, #20]
 800b062:	e035      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d107      	bne.n	800b07c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b06c:	4b63      	ldr	r3, [pc, #396]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d115      	bne.n	800b0a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e0b9      	b.n	800b1f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d107      	bne.n	800b094 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b084:	4b5d      	ldr	r3, [pc, #372]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0302 	and.w	r3, r3, #2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d109      	bne.n	800b0a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e0ad      	b.n	800b1f0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b094:	4b59      	ldr	r3, [pc, #356]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e0a5      	b.n	800b1f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800b0a4:	f000 f8b4 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	4a55      	ldr	r2, [pc, #340]	; (800b200 <HAL_RCC_ClockConfig+0x264>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d90f      	bls.n	800b0d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b0b0:	4b52      	ldr	r3, [pc, #328]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d109      	bne.n	800b0d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b0bc:	4b4f      	ldr	r3, [pc, #316]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0c4:	4a4d      	ldr	r2, [pc, #308]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b0cc:	2380      	movs	r3, #128	; 0x80
 800b0ce:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b0d0:	4b4a      	ldr	r3, [pc, #296]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f023 0203 	bic.w	r2, r3, #3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	4947      	ldr	r1, [pc, #284]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0e2:	f7fb ff81 	bl	8006fe8 <HAL_GetTick>
 800b0e6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0e8:	e00a      	b.n	800b100 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0ea:	f7fb ff7d 	bl	8006fe8 <HAL_GetTick>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d901      	bls.n	800b100 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e077      	b.n	800b1f0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b100:	4b3e      	ldr	r3, [pc, #248]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f003 020c 	and.w	r2, r3, #12
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	429a      	cmp	r2, r3
 800b110:	d1eb      	bne.n	800b0ea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b80      	cmp	r3, #128	; 0x80
 800b116:	d105      	bne.n	800b124 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b118:	4b38      	ldr	r3, [pc, #224]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	4a37      	ldr	r2, [pc, #220]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b11e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b122:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d010      	beq.n	800b152 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	689a      	ldr	r2, [r3, #8]
 800b134:	4b31      	ldr	r3, [pc, #196]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d208      	bcs.n	800b152 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b140:	4b2e      	ldr	r3, [pc, #184]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	492b      	ldr	r1, [pc, #172]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b152:	4b29      	ldr	r3, [pc, #164]	; (800b1f8 <HAL_RCC_ClockConfig+0x25c>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 030f 	and.w	r3, r3, #15
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d210      	bcs.n	800b182 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b160:	4b25      	ldr	r3, [pc, #148]	; (800b1f8 <HAL_RCC_ClockConfig+0x25c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f023 020f 	bic.w	r2, r3, #15
 800b168:	4923      	ldr	r1, [pc, #140]	; (800b1f8 <HAL_RCC_ClockConfig+0x25c>)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b170:	4b21      	ldr	r3, [pc, #132]	; (800b1f8 <HAL_RCC_ClockConfig+0x25c>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 030f 	and.w	r3, r3, #15
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d001      	beq.n	800b182 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e036      	b.n	800b1f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f003 0304 	and.w	r3, r3, #4
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d008      	beq.n	800b1a0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b18e:	4b1b      	ldr	r3, [pc, #108]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	4918      	ldr	r1, [pc, #96]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b19c:	4313      	orrs	r3, r2
 800b19e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0308 	and.w	r3, r3, #8
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d009      	beq.n	800b1c0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b1ac:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	00db      	lsls	r3, r3, #3
 800b1ba:	4910      	ldr	r1, [pc, #64]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b1c0:	f000 f826 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	; (800b1fc <HAL_RCC_ClockConfig+0x260>)
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	091b      	lsrs	r3, r3, #4
 800b1cc:	f003 030f 	and.w	r3, r3, #15
 800b1d0:	490c      	ldr	r1, [pc, #48]	; (800b204 <HAL_RCC_ClockConfig+0x268>)
 800b1d2:	5ccb      	ldrb	r3, [r1, r3]
 800b1d4:	f003 031f 	and.w	r3, r3, #31
 800b1d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1dc:	4a0a      	ldr	r2, [pc, #40]	; (800b208 <HAL_RCC_ClockConfig+0x26c>)
 800b1de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b1e0:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <HAL_RCC_ClockConfig+0x270>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fb feaf 	bl	8006f48 <HAL_InitTick>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73fb      	strb	r3, [r7, #15]

  return status;
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	40022000 	.word	0x40022000
 800b1fc:	40021000 	.word	0x40021000
 800b200:	04c4b400 	.word	0x04c4b400
 800b204:	0801cbf0 	.word	0x0801cbf0
 800b208:	20000004 	.word	0x20000004
 800b20c:	20000008 	.word	0x20000008

0800b210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b210:	b480      	push	{r7}
 800b212:	b089      	sub	sp, #36	; 0x24
 800b214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	61fb      	str	r3, [r7, #28]
 800b21a:	2300      	movs	r3, #0
 800b21c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b21e:	4b3e      	ldr	r3, [pc, #248]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f003 030c 	and.w	r3, r3, #12
 800b226:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b228:	4b3b      	ldr	r3, [pc, #236]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f003 0303 	and.w	r3, r3, #3
 800b230:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d005      	beq.n	800b244 <HAL_RCC_GetSysClockFreq+0x34>
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	2b0c      	cmp	r3, #12
 800b23c:	d121      	bne.n	800b282 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d11e      	bne.n	800b282 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b244:	4b34      	ldr	r3, [pc, #208]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0308 	and.w	r3, r3, #8
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d107      	bne.n	800b260 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b250:	4b31      	ldr	r3, [pc, #196]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b256:	0a1b      	lsrs	r3, r3, #8
 800b258:	f003 030f 	and.w	r3, r3, #15
 800b25c:	61fb      	str	r3, [r7, #28]
 800b25e:	e005      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b260:	4b2d      	ldr	r3, [pc, #180]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	091b      	lsrs	r3, r3, #4
 800b266:	f003 030f 	and.w	r3, r3, #15
 800b26a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b26c:	4a2b      	ldr	r2, [pc, #172]	; (800b31c <HAL_RCC_GetSysClockFreq+0x10c>)
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b274:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10d      	bne.n	800b298 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b280:	e00a      	b.n	800b298 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b04      	cmp	r3, #4
 800b286:	d102      	bne.n	800b28e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b288:	4b25      	ldr	r3, [pc, #148]	; (800b320 <HAL_RCC_GetSysClockFreq+0x110>)
 800b28a:	61bb      	str	r3, [r7, #24]
 800b28c:	e004      	b.n	800b298 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2b08      	cmp	r3, #8
 800b292:	d101      	bne.n	800b298 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b294:	4b23      	ldr	r3, [pc, #140]	; (800b324 <HAL_RCC_GetSysClockFreq+0x114>)
 800b296:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2b0c      	cmp	r3, #12
 800b29c:	d134      	bne.n	800b308 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b29e:	4b1e      	ldr	r3, [pc, #120]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	f003 0303 	and.w	r3, r3, #3
 800b2a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d003      	beq.n	800b2b6 <HAL_RCC_GetSysClockFreq+0xa6>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d003      	beq.n	800b2bc <HAL_RCC_GetSysClockFreq+0xac>
 800b2b4:	e005      	b.n	800b2c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b2b6:	4b1a      	ldr	r3, [pc, #104]	; (800b320 <HAL_RCC_GetSysClockFreq+0x110>)
 800b2b8:	617b      	str	r3, [r7, #20]
      break;
 800b2ba:	e005      	b.n	800b2c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b2bc:	4b19      	ldr	r3, [pc, #100]	; (800b324 <HAL_RCC_GetSysClockFreq+0x114>)
 800b2be:	617b      	str	r3, [r7, #20]
      break;
 800b2c0:	e002      	b.n	800b2c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	617b      	str	r3, [r7, #20]
      break;
 800b2c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b2c8:	4b13      	ldr	r3, [pc, #76]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	091b      	lsrs	r3, r3, #4
 800b2ce:	f003 030f 	and.w	r3, r3, #15
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b2d6:	4b10      	ldr	r3, [pc, #64]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	0a1b      	lsrs	r3, r3, #8
 800b2dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	fb03 f202 	mul.w	r2, r3, r2
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	0e5b      	lsrs	r3, r3, #25
 800b2f4:	f003 0303 	and.w	r3, r3, #3
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	fbb2 f3f3 	udiv	r3, r2, r3
 800b306:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b308:	69bb      	ldr	r3, [r7, #24]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3724      	adds	r7, #36	; 0x24
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	40021000 	.word	0x40021000
 800b31c:	0801cc08 	.word	0x0801cc08
 800b320:	00f42400 	.word	0x00f42400
 800b324:	007a1200 	.word	0x007a1200

0800b328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b328:	b480      	push	{r7}
 800b32a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b32c:	4b03      	ldr	r3, [pc, #12]	; (800b33c <HAL_RCC_GetHCLKFreq+0x14>)
 800b32e:	681b      	ldr	r3, [r3, #0]
}
 800b330:	4618      	mov	r0, r3
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	20000004 	.word	0x20000004

0800b340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b344:	f7ff fff0 	bl	800b328 <HAL_RCC_GetHCLKFreq>
 800b348:	4602      	mov	r2, r0
 800b34a:	4b06      	ldr	r3, [pc, #24]	; (800b364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	0a1b      	lsrs	r3, r3, #8
 800b350:	f003 0307 	and.w	r3, r3, #7
 800b354:	4904      	ldr	r1, [pc, #16]	; (800b368 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b356:	5ccb      	ldrb	r3, [r1, r3]
 800b358:	f003 031f 	and.w	r3, r3, #31
 800b35c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b360:	4618      	mov	r0, r3
 800b362:	bd80      	pop	{r7, pc}
 800b364:	40021000 	.word	0x40021000
 800b368:	0801cc00 	.word	0x0801cc00

0800b36c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b370:	f7ff ffda 	bl	800b328 <HAL_RCC_GetHCLKFreq>
 800b374:	4602      	mov	r2, r0
 800b376:	4b06      	ldr	r3, [pc, #24]	; (800b390 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	0adb      	lsrs	r3, r3, #11
 800b37c:	f003 0307 	and.w	r3, r3, #7
 800b380:	4904      	ldr	r1, [pc, #16]	; (800b394 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b382:	5ccb      	ldrb	r3, [r1, r3]
 800b384:	f003 031f 	and.w	r3, r3, #31
 800b388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	40021000 	.word	0x40021000
 800b394:	0801cc00 	.word	0x0801cc00

0800b398 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800b39c:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <HAL_RCC_EnableCSS+0x1c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a04      	ldr	r2, [pc, #16]	; (800b3b4 <HAL_RCC_EnableCSS+0x1c>)
 800b3a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3a6:	6013      	str	r3, [r2, #0]
}
 800b3a8:	bf00      	nop
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	40021000 	.word	0x40021000

0800b3b8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b3bc:	4b07      	ldr	r3, [pc, #28]	; (800b3dc <HAL_RCC_NMI_IRQHandler+0x24>)
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c8:	d105      	bne.n	800b3d6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800b3ca:	f000 f809 	bl	800b3e0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b3ce:	4b03      	ldr	r3, [pc, #12]	; (800b3dc <HAL_RCC_NMI_IRQHandler+0x24>)
 800b3d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3d4:	621a      	str	r2, [r3, #32]
  }
}
 800b3d6:	bf00      	nop
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	40021000 	.word	0x40021000

0800b3e0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800b3e4:	bf00      	nop
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b3fc:	4b27      	ldr	r3, [pc, #156]	; (800b49c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b408:	f7ff f8da 	bl	800a5c0 <HAL_PWREx_GetVoltageRange>
 800b40c:	6178      	str	r0, [r7, #20]
 800b40e:	e014      	b.n	800b43a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b410:	4b22      	ldr	r3, [pc, #136]	; (800b49c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b414:	4a21      	ldr	r2, [pc, #132]	; (800b49c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b41a:	6593      	str	r3, [r2, #88]	; 0x58
 800b41c:	4b1f      	ldr	r3, [pc, #124]	; (800b49c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b424:	60fb      	str	r3, [r7, #12]
 800b426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b428:	f7ff f8ca 	bl	800a5c0 <HAL_PWREx_GetVoltageRange>
 800b42c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b42e:	4b1b      	ldr	r3, [pc, #108]	; (800b49c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b432:	4a1a      	ldr	r2, [pc, #104]	; (800b49c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b438:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b440:	d10b      	bne.n	800b45a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b80      	cmp	r3, #128	; 0x80
 800b446:	d913      	bls.n	800b470 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2ba0      	cmp	r3, #160	; 0xa0
 800b44c:	d902      	bls.n	800b454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b44e:	2302      	movs	r3, #2
 800b450:	613b      	str	r3, [r7, #16]
 800b452:	e00d      	b.n	800b470 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b454:	2301      	movs	r3, #1
 800b456:	613b      	str	r3, [r7, #16]
 800b458:	e00a      	b.n	800b470 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b7f      	cmp	r3, #127	; 0x7f
 800b45e:	d902      	bls.n	800b466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800b460:	2302      	movs	r3, #2
 800b462:	613b      	str	r3, [r7, #16]
 800b464:	e004      	b.n	800b470 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b70      	cmp	r3, #112	; 0x70
 800b46a:	d101      	bne.n	800b470 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b46c:	2301      	movs	r3, #1
 800b46e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b470:	4b0b      	ldr	r3, [pc, #44]	; (800b4a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f023 020f 	bic.w	r2, r3, #15
 800b478:	4909      	ldr	r1, [pc, #36]	; (800b4a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b480:	4b07      	ldr	r3, [pc, #28]	; (800b4a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 030f 	and.w	r3, r3, #15
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d001      	beq.n	800b492 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e000      	b.n	800b494 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3718      	adds	r7, #24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	40021000 	.word	0x40021000
 800b4a0:	40022000 	.word	0x40022000

0800b4a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b4aa:	4b2d      	ldr	r3, [pc, #180]	; (800b560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	f003 0303 	and.w	r3, r3, #3
 800b4b2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d00b      	beq.n	800b4d2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d825      	bhi.n	800b50c <RCC_GetSysClockFreqFromPLLSource+0x68>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d008      	beq.n	800b4d8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d11f      	bne.n	800b50c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800b4cc:	4b25      	ldr	r3, [pc, #148]	; (800b564 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b4ce:	613b      	str	r3, [r7, #16]
    break;
 800b4d0:	e01f      	b.n	800b512 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800b4d2:	4b25      	ldr	r3, [pc, #148]	; (800b568 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800b4d4:	613b      	str	r3, [r7, #16]
    break;
 800b4d6:	e01c      	b.n	800b512 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b4d8:	4b21      	ldr	r3, [pc, #132]	; (800b560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0308 	and.w	r3, r3, #8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d107      	bne.n	800b4f4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b4e4:	4b1e      	ldr	r3, [pc, #120]	; (800b560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b4e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4ea:	0a1b      	lsrs	r3, r3, #8
 800b4ec:	f003 030f 	and.w	r3, r3, #15
 800b4f0:	617b      	str	r3, [r7, #20]
 800b4f2:	e005      	b.n	800b500 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b4f4:	4b1a      	ldr	r3, [pc, #104]	; (800b560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	091b      	lsrs	r3, r3, #4
 800b4fa:	f003 030f 	and.w	r3, r3, #15
 800b4fe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800b500:	4a1a      	ldr	r2, [pc, #104]	; (800b56c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b508:	613b      	str	r3, [r7, #16]
    break;
 800b50a:	e002      	b.n	800b512 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	613b      	str	r3, [r7, #16]
    break;
 800b510:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	091b      	lsrs	r3, r3, #4
 800b518:	f003 030f 	and.w	r3, r3, #15
 800b51c:	3301      	adds	r3, #1
 800b51e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b520:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	fb03 f202 	mul.w	r2, r3, r2
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	fbb2 f3f3 	udiv	r3, r2, r3
 800b536:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	0e5b      	lsrs	r3, r3, #25
 800b53e:	f003 0303 	and.w	r3, r3, #3
 800b542:	3301      	adds	r3, #1
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b550:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800b552:	683b      	ldr	r3, [r7, #0]
}
 800b554:	4618      	mov	r0, r3
 800b556:	371c      	adds	r7, #28
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	40021000 	.word	0x40021000
 800b564:	00f42400 	.word	0x00f42400
 800b568:	007a1200 	.word	0x007a1200
 800b56c:	0801cc08 	.word	0x0801cc08

0800b570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b578:	2300      	movs	r3, #0
 800b57a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b57c:	2300      	movs	r3, #0
 800b57e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d040      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b590:	2b80      	cmp	r3, #128	; 0x80
 800b592:	d02a      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b594:	2b80      	cmp	r3, #128	; 0x80
 800b596:	d825      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b598:	2b60      	cmp	r3, #96	; 0x60
 800b59a:	d026      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b59c:	2b60      	cmp	r3, #96	; 0x60
 800b59e:	d821      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b5a0:	2b40      	cmp	r3, #64	; 0x40
 800b5a2:	d006      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800b5a4:	2b40      	cmp	r3, #64	; 0x40
 800b5a6:	d81d      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d009      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	d010      	beq.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b5b0:	e018      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b5b2:	4b89      	ldr	r3, [pc, #548]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	4a88      	ldr	r2, [pc, #544]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b5b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5bc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b5be:	e015      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f001 fa24 	bl	800ca14 <RCCEx_PLLSAI1_Config>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b5d0:	e00c      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3320      	adds	r3, #32
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 fb0f 	bl	800cbfc <RCCEx_PLLSAI2_Config>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b5e2:	e003      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	74fb      	strb	r3, [r7, #19]
      break;
 800b5e8:	e000      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800b5ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5ec:	7cfb      	ldrb	r3, [r7, #19]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5f2:	4b79      	ldr	r3, [pc, #484]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b5f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5f8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b600:	4975      	ldr	r1, [pc, #468]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b602:	4313      	orrs	r3, r2
 800b604:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b608:	e001      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b60a:	7cfb      	ldrb	r3, [r7, #19]
 800b60c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d047      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b622:	d030      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b628:	d82a      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b62a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b62e:	d02a      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b634:	d824      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b63a:	d008      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800b63c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b640:	d81e      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00a      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xec>
 800b646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b64a:	d010      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b64c:	e018      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b64e:	4b62      	ldr	r3, [pc, #392]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	4a61      	ldr	r2, [pc, #388]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b658:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b65a:	e015      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3304      	adds	r3, #4
 800b660:	2100      	movs	r1, #0
 800b662:	4618      	mov	r0, r3
 800b664:	f001 f9d6 	bl	800ca14 <RCCEx_PLLSAI1_Config>
 800b668:	4603      	mov	r3, r0
 800b66a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b66c:	e00c      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3320      	adds	r3, #32
 800b672:	2100      	movs	r1, #0
 800b674:	4618      	mov	r0, r3
 800b676:	f001 fac1 	bl	800cbfc <RCCEx_PLLSAI2_Config>
 800b67a:	4603      	mov	r3, r0
 800b67c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b67e:	e003      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	74fb      	strb	r3, [r7, #19]
      break;
 800b684:	e000      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800b686:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b688:	7cfb      	ldrb	r3, [r7, #19]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10b      	bne.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b68e:	4b52      	ldr	r3, [pc, #328]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69c:	494e      	ldr	r1, [pc, #312]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b6a4:	e001      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a6:	7cfb      	ldrb	r3, [r7, #19]
 800b6a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 809f 	beq.w	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b6bc:	4b46      	ldr	r3, [pc, #280]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e000      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00d      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6d2:	4b41      	ldr	r3, [pc, #260]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6d6:	4a40      	ldr	r2, [pc, #256]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b6d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6dc:	6593      	str	r3, [r2, #88]	; 0x58
 800b6de:	4b3e      	ldr	r3, [pc, #248]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6e6:	60bb      	str	r3, [r7, #8]
 800b6e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6ee:	4b3b      	ldr	r3, [pc, #236]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a3a      	ldr	r2, [pc, #232]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b6f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6fa:	f7fb fc75 	bl	8006fe8 <HAL_GetTick>
 800b6fe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b700:	e009      	b.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b702:	f7fb fc71 	bl	8006fe8 <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d902      	bls.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	74fb      	strb	r3, [r7, #19]
        break;
 800b714:	e005      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b716:	4b31      	ldr	r3, [pc, #196]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0ef      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800b722:	7cfb      	ldrb	r3, [r7, #19]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d15b      	bne.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b728:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b72e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b732:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d01f      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b740:	697a      	ldr	r2, [r7, #20]
 800b742:	429a      	cmp	r2, r3
 800b744:	d019      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b746:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b74c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b750:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b752:	4b21      	ldr	r3, [pc, #132]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b758:	4a1f      	ldr	r2, [pc, #124]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b75a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b75e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b762:	4b1d      	ldr	r3, [pc, #116]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b768:	4a1b      	ldr	r2, [pc, #108]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b76a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b76e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b772:	4a19      	ldr	r2, [pc, #100]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d016      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b784:	f7fb fc30 	bl	8006fe8 <HAL_GetTick>
 800b788:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b78a:	e00b      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b78c:	f7fb fc2c 	bl	8006fe8 <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	f241 3288 	movw	r2, #5000	; 0x1388
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d902      	bls.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	74fb      	strb	r3, [r7, #19]
            break;
 800b7a2:	e006      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7a4:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7aa:	f003 0302 	and.w	r3, r3, #2
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d0ec      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800b7b2:	7cfb      	ldrb	r3, [r7, #19]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10c      	bne.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7b8:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c8:	4903      	ldr	r1, [pc, #12]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b7d0:	e008      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b7d2:	7cfb      	ldrb	r3, [r7, #19]
 800b7d4:	74bb      	strb	r3, [r7, #18]
 800b7d6:	e005      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800b7d8:	40021000 	.word	0x40021000
 800b7dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e0:	7cfb      	ldrb	r3, [r7, #19]
 800b7e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b7e4:	7c7b      	ldrb	r3, [r7, #17]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d105      	bne.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7ea:	4ba0      	ldr	r3, [pc, #640]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ee:	4a9f      	ldr	r2, [pc, #636]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b802:	4b9a      	ldr	r3, [pc, #616]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b808:	f023 0203 	bic.w	r2, r3, #3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b810:	4996      	ldr	r1, [pc, #600]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b812:	4313      	orrs	r3, r2
 800b814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0302 	and.w	r3, r3, #2
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00a      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b824:	4b91      	ldr	r3, [pc, #580]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b82a:	f023 020c 	bic.w	r2, r3, #12
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b832:	498e      	ldr	r1, [pc, #568]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b834:	4313      	orrs	r3, r2
 800b836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 0304 	and.w	r3, r3, #4
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b846:	4b89      	ldr	r3, [pc, #548]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b84c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b854:	4985      	ldr	r1, [pc, #532]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b856:	4313      	orrs	r3, r2
 800b858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0308 	and.w	r3, r3, #8
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00a      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b868:	4b80      	ldr	r3, [pc, #512]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b86e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b876:	497d      	ldr	r1, [pc, #500]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b878:	4313      	orrs	r3, r2
 800b87a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 0310 	and.w	r3, r3, #16
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b88a:	4b78      	ldr	r3, [pc, #480]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b898:	4974      	ldr	r1, [pc, #464]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0320 	and.w	r3, r3, #32
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00a      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b8ac:	4b6f      	ldr	r3, [pc, #444]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ba:	496c      	ldr	r1, [pc, #432]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00a      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8ce:	4b67      	ldr	r3, [pc, #412]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8dc:	4963      	ldr	r1, [pc, #396]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00a      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8f0:	4b5e      	ldr	r3, [pc, #376]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8fe:	495b      	ldr	r1, [pc, #364]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b900:	4313      	orrs	r3, r2
 800b902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b912:	4b56      	ldr	r3, [pc, #344]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b918:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b920:	4952      	ldr	r1, [pc, #328]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b922:	4313      	orrs	r3, r2
 800b924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b934:	4b4d      	ldr	r3, [pc, #308]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b93a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b942:	494a      	ldr	r1, [pc, #296]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b944:	4313      	orrs	r3, r2
 800b946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b956:	4b45      	ldr	r3, [pc, #276]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b95c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b964:	4941      	ldr	r1, [pc, #260]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b966:	4313      	orrs	r3, r2
 800b968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00a      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b978:	4b3c      	ldr	r3, [pc, #240]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b97a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b97e:	f023 0203 	bic.w	r2, r3, #3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b986:	4939      	ldr	r1, [pc, #228]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d028      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b99a:	4b34      	ldr	r3, [pc, #208]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a8:	4930      	ldr	r1, [pc, #192]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9b8:	d106      	bne.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b9ba:	4b2c      	ldr	r3, [pc, #176]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	4a2b      	ldr	r2, [pc, #172]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b9c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9c4:	60d3      	str	r3, [r2, #12]
 800b9c6:	e011      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9d0:	d10c      	bne.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	2101      	movs	r1, #1
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f001 f81b 	bl	800ca14 <RCCEx_PLLSAI1_Config>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b9e2:	7cfb      	ldrb	r3, [r7, #19]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800b9e8:	7cfb      	ldrb	r3, [r7, #19]
 800b9ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d04d      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba00:	d108      	bne.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800ba02:	4b1a      	ldr	r3, [pc, #104]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba08:	4a18      	ldr	r2, [pc, #96]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ba12:	e012      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800ba14:	4b15      	ldr	r3, [pc, #84]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba1a:	4a14      	ldr	r2, [pc, #80]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ba24:	4b11      	ldr	r3, [pc, #68]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba32:	490e      	ldr	r1, [pc, #56]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba34:	4313      	orrs	r3, r2
 800ba36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba42:	d106      	bne.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba44:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	4a08      	ldr	r2, [pc, #32]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba4e:	60d3      	str	r3, [r2, #12]
 800ba50:	e020      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba5a:	d109      	bne.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ba5c:	4b03      	ldr	r3, [pc, #12]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	4a02      	ldr	r2, [pc, #8]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ba62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba66:	60d3      	str	r3, [r2, #12]
 800ba68:	e014      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ba6a:	bf00      	nop
 800ba6c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba78:	d10c      	bne.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	2101      	movs	r1, #1
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 ffc7 	bl	800ca14 <RCCEx_PLLSAI1_Config>
 800ba86:	4603      	mov	r3, r0
 800ba88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ba8a:	7cfb      	ldrb	r3, [r7, #19]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800ba90:	7cfb      	ldrb	r3, [r7, #19]
 800ba92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d028      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800baa0:	4b4a      	ldr	r3, [pc, #296]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800baa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baae:	4947      	ldr	r1, [pc, #284]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bab0:	4313      	orrs	r3, r2
 800bab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800babe:	d106      	bne.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bac0:	4b42      	ldr	r3, [pc, #264]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	4a41      	ldr	r2, [pc, #260]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baca:	60d3      	str	r3, [r2, #12]
 800bacc:	e011      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bad6:	d10c      	bne.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3304      	adds	r3, #4
 800badc:	2101      	movs	r1, #1
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 ff98 	bl	800ca14 <RCCEx_PLLSAI1_Config>
 800bae4:	4603      	mov	r3, r0
 800bae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bae8:	7cfb      	ldrb	r3, [r7, #19]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800baee:	7cfb      	ldrb	r3, [r7, #19]
 800baf0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d01e      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bafe:	4b33      	ldr	r3, [pc, #204]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb0e:	492f      	ldr	r1, [pc, #188]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb20:	d10c      	bne.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3304      	adds	r3, #4
 800bb26:	2102      	movs	r1, #2
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 ff73 	bl	800ca14 <RCCEx_PLLSAI1_Config>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bb32:	7cfb      	ldrb	r3, [r7, #19]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800bb38:	7cfb      	ldrb	r3, [r7, #19]
 800bb3a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00b      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb48:	4b20      	ldr	r3, [pc, #128]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb4e:	f023 0204 	bic.w	r2, r3, #4
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb58:	491c      	ldr	r1, [pc, #112]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00b      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bb6c:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb72:	f023 0218 	bic.w	r2, r3, #24
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb7c:	4913      	ldr	r1, [pc, #76]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d017      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bb90:	4b0e      	ldr	r3, [pc, #56]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bba0:	490a      	ldr	r1, [pc, #40]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbb2:	d105      	bne.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbb4:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	4a04      	ldr	r2, [pc, #16]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bbc0:	7cbb      	ldrb	r3, [r7, #18]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	40021000 	.word	0x40021000

0800bbd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbe2:	d13e      	bne.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800bbe4:	4bb6      	ldr	r3, [pc, #728]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bbe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbee:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbf6:	d028      	beq.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbfe:	f200 86f4 	bhi.w	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc08:	d005      	beq.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc10:	d00e      	beq.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800bc12:	f000 beea 	b.w	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bc16:	4baa      	ldr	r3, [pc, #680]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bc18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc1c:	f003 0302 	and.w	r3, r3, #2
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	f040 86e4 	bne.w	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800bc26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc2a:	61fb      	str	r3, [r7, #28]
      break;
 800bc2c:	f000 bedf 	b.w	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800bc30:	4ba3      	ldr	r3, [pc, #652]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bc32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	f040 86d9 	bne.w	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800bc40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bc44:	61fb      	str	r3, [r7, #28]
      break;
 800bc46:	f000 bed4 	b.w	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc4a:	4b9d      	ldr	r3, [pc, #628]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc56:	f040 86ce 	bne.w	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800bc5a:	4b9a      	ldr	r3, [pc, #616]	; (800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800bc5c:	61fb      	str	r3, [r7, #28]
      break;
 800bc5e:	f000 beca 	b.w	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bc62:	4b97      	ldr	r3, [pc, #604]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	f003 0303 	and.w	r3, r3, #3
 800bc6a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d036      	beq.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b03      	cmp	r3, #3
 800bc76:	d840      	bhi.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d003      	beq.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d020      	beq.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800bc84:	e039      	b.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800bc86:	4b8e      	ldr	r3, [pc, #568]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 0302 	and.w	r3, r3, #2
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d116      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800bc92:	4b8b      	ldr	r3, [pc, #556]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 0308 	and.w	r3, r3, #8
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d005      	beq.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800bc9e:	4b88      	ldr	r3, [pc, #544]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	091b      	lsrs	r3, r3, #4
 800bca4:	f003 030f 	and.w	r3, r3, #15
 800bca8:	e005      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800bcaa:	4b85      	ldr	r3, [pc, #532]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bcac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcb0:	0a1b      	lsrs	r3, r3, #8
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	4a84      	ldr	r2, [pc, #528]	; (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800bcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800bcbe:	e01f      	b.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	61bb      	str	r3, [r7, #24]
      break;
 800bcc4:	e01c      	b.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bcc6:	4b7e      	ldr	r3, [pc, #504]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcd2:	d102      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800bcd4:	4b7d      	ldr	r3, [pc, #500]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800bcd6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800bcd8:	e012      	b.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	61bb      	str	r3, [r7, #24]
      break;
 800bcde:	e00f      	b.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bce0:	4b77      	ldr	r3, [pc, #476]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcec:	d102      	bne.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800bcee:	4b78      	ldr	r3, [pc, #480]	; (800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800bcf0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800bcf2:	e005      	b.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	61bb      	str	r3, [r7, #24]
      break;
 800bcf8:	e002      	b.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	61bb      	str	r3, [r7, #24]
      break;
 800bcfe:	bf00      	nop
    }

    switch(PeriphClk)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd06:	f000 8606 	beq.w	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd10:	f200 8673 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd1a:	f000 8469 	beq.w	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd24:	f200 8669 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd2e:	f000 8531 	beq.w	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd38:	f200 865f 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd42:	f000 8187 	beq.w	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd4c:	f200 8655 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd56:	f000 80cd 	beq.w	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd60:	f200 864b 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd6a:	f000 8430 	beq.w	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd74:	f200 8641 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd7e:	f000 83e4 	beq.w	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd88:	f200 8637 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd92:	f000 80af 	beq.w	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd9c:	f200 862d 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bda6:	f000 809d 	beq.w	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdb0:	f200 8623 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdba:	f000 808b 	beq.w	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdc4:	f200 8619 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdce:	f000 8554 	beq.w	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdd8:	f200 860f 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bde2:	f000 8500 	beq.w	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdec:	f200 8605 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf6:	f000 84a1 	beq.w	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be00:	f200 85fb 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b80      	cmp	r3, #128	; 0x80
 800be08:	f000 846c 	beq.w	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b80      	cmp	r3, #128	; 0x80
 800be10:	f200 85f3 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b20      	cmp	r3, #32
 800be18:	d84c      	bhi.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 85ec 	beq.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3b01      	subs	r3, #1
 800be26:	2b1f      	cmp	r3, #31
 800be28:	f200 85e7 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800be2c:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800c249 	.word	0x0800c249
 800be38:	0800c2b7 	.word	0x0800c2b7
 800be3c:	0800c9fb 	.word	0x0800c9fb
 800be40:	0800c34b 	.word	0x0800c34b
 800be44:	0800c9fb 	.word	0x0800c9fb
 800be48:	0800c9fb 	.word	0x0800c9fb
 800be4c:	0800c9fb 	.word	0x0800c9fb
 800be50:	0800c3c3 	.word	0x0800c3c3
 800be54:	0800c9fb 	.word	0x0800c9fb
 800be58:	0800c9fb 	.word	0x0800c9fb
 800be5c:	0800c9fb 	.word	0x0800c9fb
 800be60:	0800c9fb 	.word	0x0800c9fb
 800be64:	0800c9fb 	.word	0x0800c9fb
 800be68:	0800c9fb 	.word	0x0800c9fb
 800be6c:	0800c9fb 	.word	0x0800c9fb
 800be70:	0800c447 	.word	0x0800c447
 800be74:	0800c9fb 	.word	0x0800c9fb
 800be78:	0800c9fb 	.word	0x0800c9fb
 800be7c:	0800c9fb 	.word	0x0800c9fb
 800be80:	0800c9fb 	.word	0x0800c9fb
 800be84:	0800c9fb 	.word	0x0800c9fb
 800be88:	0800c9fb 	.word	0x0800c9fb
 800be8c:	0800c9fb 	.word	0x0800c9fb
 800be90:	0800c9fb 	.word	0x0800c9fb
 800be94:	0800c9fb 	.word	0x0800c9fb
 800be98:	0800c9fb 	.word	0x0800c9fb
 800be9c:	0800c9fb 	.word	0x0800c9fb
 800bea0:	0800c9fb 	.word	0x0800c9fb
 800bea4:	0800c9fb 	.word	0x0800c9fb
 800bea8:	0800c9fb 	.word	0x0800c9fb
 800beac:	0800c9fb 	.word	0x0800c9fb
 800beb0:	0800c4c9 	.word	0x0800c4c9
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b40      	cmp	r3, #64	; 0x40
 800beb8:	f000 83e8 	beq.w	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800bebc:	f000 bd9d 	b.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800bec0:	40021000 	.word	0x40021000
 800bec4:	0003d090 	.word	0x0003d090
 800bec8:	0801cc08 	.word	0x0801cc08
 800becc:	00f42400 	.word	0x00f42400
 800bed0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800bed4:	69b9      	ldr	r1, [r7, #24]
 800bed6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800beda:	f000 ff83 	bl	800cde4 <RCCEx_GetSAIxPeriphCLKFreq>
 800bede:	61f8      	str	r0, [r7, #28]
      break;
 800bee0:	f000 bd8e 	b.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800bee4:	69b9      	ldr	r1, [r7, #24]
 800bee6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800beea:	f000 ff7b 	bl	800cde4 <RCCEx_GetSAIxPeriphCLKFreq>
 800beee:	61f8      	str	r0, [r7, #28]
      break;
 800bef0:	f000 bd86 	b.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800bef4:	4b9a      	ldr	r3, [pc, #616]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800befa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800befe:	60fb      	str	r3, [r7, #12]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bf06:	d015      	beq.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bf0e:	f200 8092 	bhi.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf18:	d029      	beq.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf20:	f200 8089 	bhi.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d07b      	beq.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf30:	d04a      	beq.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800bf32:	e080      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800bf34:	4b8a      	ldr	r3, [pc, #552]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d17d      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800bf40:	4b87      	ldr	r3, [pc, #540]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 0308 	and.w	r3, r3, #8
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d005      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800bf4c:	4b84      	ldr	r3, [pc, #528]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	091b      	lsrs	r3, r3, #4
 800bf52:	f003 030f 	and.w	r3, r3, #15
 800bf56:	e005      	b.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800bf58:	4b81      	ldr	r3, [pc, #516]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bf5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf5e:	0a1b      	lsrs	r3, r3, #8
 800bf60:	f003 030f 	and.w	r3, r3, #15
 800bf64:	4a7f      	ldr	r2, [pc, #508]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800bf66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf6a:	61fb      	str	r3, [r7, #28]
          break;
 800bf6c:	e066      	b.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800bf6e:	4b7c      	ldr	r3, [pc, #496]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf7a:	d162      	bne.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800bf7c:	4b78      	ldr	r3, [pc, #480]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf88:	d15b      	bne.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800bf8a:	4b75      	ldr	r3, [pc, #468]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	0a1b      	lsrs	r3, r3, #8
 800bf90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf94:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	fb03 f202 	mul.w	r2, r3, r2
 800bf9e:	4b70      	ldr	r3, [pc, #448]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	091b      	lsrs	r3, r3, #4
 800bfa4:	f003 030f 	and.w	r3, r3, #15
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfae:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800bfb0:	4b6b      	ldr	r3, [pc, #428]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	0d5b      	lsrs	r3, r3, #21
 800bfb6:	f003 0303 	and.w	r3, r3, #3
 800bfba:	3301      	adds	r3, #1
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc4:	61fb      	str	r3, [r7, #28]
          break;
 800bfc6:	e03c      	b.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800bfc8:	4b65      	ldr	r3, [pc, #404]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfd4:	d138      	bne.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800bfd6:	4b62      	ldr	r3, [pc, #392]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfe2:	d131      	bne.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800bfe4:	4b5e      	ldr	r3, [pc, #376]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	0a1b      	lsrs	r3, r3, #8
 800bfea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfee:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	fb03 f202 	mul.w	r2, r3, r2
 800bff8:	4b59      	ldr	r3, [pc, #356]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	091b      	lsrs	r3, r3, #4
 800bffe:	f003 030f 	and.w	r3, r3, #15
 800c002:	3301      	adds	r3, #1
 800c004:	fbb2 f3f3 	udiv	r3, r2, r3
 800c008:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c00a:	4b55      	ldr	r3, [pc, #340]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	0d5b      	lsrs	r3, r3, #21
 800c010:	f003 0303 	and.w	r3, r3, #3
 800c014:	3301      	adds	r3, #1
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	69ba      	ldr	r2, [r7, #24]
 800c01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c01e:	61fb      	str	r3, [r7, #28]
          break;
 800c020:	e012      	b.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c022:	4b4f      	ldr	r3, [pc, #316]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c028:	f003 0302 	and.w	r3, r3, #2
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d10e      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800c030:	4b4d      	ldr	r3, [pc, #308]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c032:	61fb      	str	r3, [r7, #28]
          break;
 800c034:	e00b      	b.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800c036:	bf00      	nop
 800c038:	f000 bce2 	b.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c03c:	bf00      	nop
 800c03e:	f000 bcdf 	b.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c042:	bf00      	nop
 800c044:	f000 bcdc 	b.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c048:	bf00      	nop
 800c04a:	f000 bcd9 	b.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c04e:	bf00      	nop
        break;
 800c050:	f000 bcd6 	b.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800c054:	4b42      	ldr	r3, [pc, #264]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c05a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c05e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c062:	d13d      	bne.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c064:	4b3e      	ldr	r3, [pc, #248]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c06c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c070:	f040 84c5 	bne.w	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800c074:	4b3a      	ldr	r3, [pc, #232]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c07c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c080:	f040 84bd 	bne.w	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c084:	4b36      	ldr	r3, [pc, #216]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	0a1b      	lsrs	r3, r3, #8
 800c08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c08e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	fb03 f202 	mul.w	r2, r3, r2
 800c098:	4b31      	ldr	r3, [pc, #196]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	091b      	lsrs	r3, r3, #4
 800c09e:	f003 030f 	and.w	r3, r3, #15
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800c0aa:	4b2d      	ldr	r3, [pc, #180]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	0edb      	lsrs	r3, r3, #27
 800c0b0:	f003 031f 	and.w	r3, r3, #31
 800c0b4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800c0bc:	4b28      	ldr	r3, [pc, #160]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800c0c8:	2311      	movs	r3, #17
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	e001      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800c0ce:	2307      	movs	r3, #7
 800c0d0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0da:	61fb      	str	r3, [r7, #28]
      break;
 800c0dc:	f000 bc8f 	b.w	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c0e0:	4b1f      	ldr	r3, [pc, #124]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c0f2:	d016      	beq.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c0fa:	f200 809b 	bhi.w	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c104:	d032      	beq.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c10c:	f200 8092 	bhi.w	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b00      	cmp	r3, #0
 800c114:	f000 8084 	beq.w	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c11e:	d052      	beq.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800c120:	e088      	b.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c122:	4b0f      	ldr	r3, [pc, #60]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 0302 	and.w	r3, r3, #2
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	f040 8084 	bne.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c130:	4b0b      	ldr	r3, [pc, #44]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 0308 	and.w	r3, r3, #8
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d005      	beq.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800c13c:	4b08      	ldr	r3, [pc, #32]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	091b      	lsrs	r3, r3, #4
 800c142:	f003 030f 	and.w	r3, r3, #15
 800c146:	e005      	b.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800c148:	4b05      	ldr	r3, [pc, #20]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c14a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c14e:	0a1b      	lsrs	r3, r3, #8
 800c150:	f003 030f 	and.w	r3, r3, #15
 800c154:	4a03      	ldr	r2, [pc, #12]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c15a:	61fb      	str	r3, [r7, #28]
          break;
 800c15c:	e06c      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800c15e:	bf00      	nop
 800c160:	40021000 	.word	0x40021000
 800c164:	0801cc08 	.word	0x0801cc08
 800c168:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c16c:	4ba5      	ldr	r3, [pc, #660]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c178:	d160      	bne.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c17a:	4ba2      	ldr	r3, [pc, #648]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c186:	d159      	bne.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c188:	4b9e      	ldr	r3, [pc, #632]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	0a1b      	lsrs	r3, r3, #8
 800c18e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c192:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	fb03 f202 	mul.w	r2, r3, r2
 800c19c:	4b99      	ldr	r3, [pc, #612]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	091b      	lsrs	r3, r3, #4
 800c1a2:	f003 030f 	and.w	r3, r3, #15
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c1ae:	4b95      	ldr	r3, [pc, #596]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	0d5b      	lsrs	r3, r3, #21
 800c1b4:	f003 0303 	and.w	r3, r3, #3
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c2:	61fb      	str	r3, [r7, #28]
          break;
 800c1c4:	e03a      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c1c6:	4b8f      	ldr	r3, [pc, #572]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1d2:	d135      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c1d4:	4b8b      	ldr	r3, [pc, #556]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1e0:	d12e      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c1e2:	4b88      	ldr	r3, [pc, #544]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c1e4:	691b      	ldr	r3, [r3, #16]
 800c1e6:	0a1b      	lsrs	r3, r3, #8
 800c1e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1ec:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	fb03 f202 	mul.w	r2, r3, r2
 800c1f6:	4b83      	ldr	r3, [pc, #524]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	091b      	lsrs	r3, r3, #4
 800c1fc:	f003 030f 	and.w	r3, r3, #15
 800c200:	3301      	adds	r3, #1
 800c202:	fbb2 f3f3 	udiv	r3, r2, r3
 800c206:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c208:	4b7e      	ldr	r3, [pc, #504]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	0d5b      	lsrs	r3, r3, #21
 800c20e:	f003 0303 	and.w	r3, r3, #3
 800c212:	3301      	adds	r3, #1
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	69ba      	ldr	r2, [r7, #24]
 800c218:	fbb2 f3f3 	udiv	r3, r2, r3
 800c21c:	61fb      	str	r3, [r7, #28]
          break;
 800c21e:	e00f      	b.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c220:	4b78      	ldr	r3, [pc, #480]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c226:	f003 0302 	and.w	r3, r3, #2
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d10a      	bne.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800c22e:	4b76      	ldr	r3, [pc, #472]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c230:	61fb      	str	r3, [r7, #28]
          break;
 800c232:	e007      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800c234:	bf00      	nop
 800c236:	e3e2      	b.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c238:	bf00      	nop
 800c23a:	e3e0      	b.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c23c:	bf00      	nop
 800c23e:	e3de      	b.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c240:	bf00      	nop
 800c242:	e3dc      	b.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c244:	bf00      	nop
      break;
 800c246:	e3da      	b.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c248:	4b6e      	ldr	r3, [pc, #440]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c24e:	f003 0303 	and.w	r3, r3, #3
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2b03      	cmp	r3, #3
 800c258:	d827      	bhi.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800c25a:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800c25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c260:	0800c271 	.word	0x0800c271
 800c264:	0800c279 	.word	0x0800c279
 800c268:	0800c281 	.word	0x0800c281
 800c26c:	0800c295 	.word	0x0800c295
          frequency = HAL_RCC_GetPCLK2Freq();
 800c270:	f7ff f87c 	bl	800b36c <HAL_RCC_GetPCLK2Freq>
 800c274:	61f8      	str	r0, [r7, #28]
          break;
 800c276:	e01d      	b.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800c278:	f7fe ffca 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c27c:	61f8      	str	r0, [r7, #28]
          break;
 800c27e:	e019      	b.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c280:	4b60      	ldr	r3, [pc, #384]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c28c:	d10f      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800c28e:	4b5f      	ldr	r3, [pc, #380]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c290:	61fb      	str	r3, [r7, #28]
          break;
 800c292:	e00c      	b.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c294:	4b5b      	ldr	r3, [pc, #364]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c29a:	f003 0302 	and.w	r3, r3, #2
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d107      	bne.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800c2a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2a6:	61fb      	str	r3, [r7, #28]
          break;
 800c2a8:	e003      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800c2aa:	bf00      	nop
 800c2ac:	e3a8      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c2ae:	bf00      	nop
 800c2b0:	e3a6      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c2b2:	bf00      	nop
        break;
 800c2b4:	e3a4      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c2b6:	4b53      	ldr	r3, [pc, #332]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c2b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2bc:	f003 030c 	and.w	r3, r3, #12
 800c2c0:	60fb      	str	r3, [r7, #12]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b0c      	cmp	r3, #12
 800c2c6:	d83a      	bhi.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c2c8:	a201      	add	r2, pc, #4	; (adr r2, 800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800c2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ce:	bf00      	nop
 800c2d0:	0800c305 	.word	0x0800c305
 800c2d4:	0800c33f 	.word	0x0800c33f
 800c2d8:	0800c33f 	.word	0x0800c33f
 800c2dc:	0800c33f 	.word	0x0800c33f
 800c2e0:	0800c30d 	.word	0x0800c30d
 800c2e4:	0800c33f 	.word	0x0800c33f
 800c2e8:	0800c33f 	.word	0x0800c33f
 800c2ec:	0800c33f 	.word	0x0800c33f
 800c2f0:	0800c315 	.word	0x0800c315
 800c2f4:	0800c33f 	.word	0x0800c33f
 800c2f8:	0800c33f 	.word	0x0800c33f
 800c2fc:	0800c33f 	.word	0x0800c33f
 800c300:	0800c329 	.word	0x0800c329
          frequency = HAL_RCC_GetPCLK1Freq();
 800c304:	f7ff f81c 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c308:	61f8      	str	r0, [r7, #28]
          break;
 800c30a:	e01d      	b.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800c30c:	f7fe ff80 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c310:	61f8      	str	r0, [r7, #28]
          break;
 800c312:	e019      	b.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c314:	4b3b      	ldr	r3, [pc, #236]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c31c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c320:	d10f      	bne.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800c322:	4b3a      	ldr	r3, [pc, #232]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c324:	61fb      	str	r3, [r7, #28]
          break;
 800c326:	e00c      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c328:	4b36      	ldr	r3, [pc, #216]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c32e:	f003 0302 	and.w	r3, r3, #2
 800c332:	2b02      	cmp	r3, #2
 800c334:	d107      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800c336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c33a:	61fb      	str	r3, [r7, #28]
          break;
 800c33c:	e003      	b.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800c33e:	bf00      	nop
 800c340:	e35e      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c342:	bf00      	nop
 800c344:	e35c      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c346:	bf00      	nop
        break;
 800c348:	e35a      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c34a:	4b2e      	ldr	r3, [pc, #184]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c350:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c354:	60fb      	str	r3, [r7, #12]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b30      	cmp	r3, #48	; 0x30
 800c35a:	d021      	beq.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2b30      	cmp	r3, #48	; 0x30
 800c360:	d829      	bhi.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b20      	cmp	r3, #32
 800c366:	d011      	beq.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b20      	cmp	r3, #32
 800c36c:	d823      	bhi.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d003      	beq.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2b10      	cmp	r3, #16
 800c378:	d004      	beq.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800c37a:	e01c      	b.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c37c:	f7fe ffe0 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c380:	61f8      	str	r0, [r7, #28]
          break;
 800c382:	e01d      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c384:	f7fe ff44 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c388:	61f8      	str	r0, [r7, #28]
          break;
 800c38a:	e019      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c38c:	4b1d      	ldr	r3, [pc, #116]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c398:	d10f      	bne.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800c39a:	4b1c      	ldr	r3, [pc, #112]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c39c:	61fb      	str	r3, [r7, #28]
          break;
 800c39e:	e00c      	b.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c3a0:	4b18      	ldr	r3, [pc, #96]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3a6:	f003 0302 	and.w	r3, r3, #2
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d107      	bne.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800c3ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3b2:	61fb      	str	r3, [r7, #28]
          break;
 800c3b4:	e003      	b.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800c3b6:	bf00      	nop
 800c3b8:	e322      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c3ba:	bf00      	nop
 800c3bc:	e320      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c3be:	bf00      	nop
        break;
 800c3c0:	e31e      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c3c2:	4b10      	ldr	r3, [pc, #64]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c3cc:	60fb      	str	r3, [r7, #12]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2bc0      	cmp	r3, #192	; 0xc0
 800c3d2:	d027      	beq.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2bc0      	cmp	r3, #192	; 0xc0
 800c3d8:	d82f      	bhi.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2b80      	cmp	r3, #128	; 0x80
 800c3de:	d017      	beq.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b80      	cmp	r3, #128	; 0x80
 800c3e4:	d829      	bhi.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d003      	beq.n	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2b40      	cmp	r3, #64	; 0x40
 800c3f0:	d004      	beq.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800c3f2:	e022      	b.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c3f4:	f7fe ffa4 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c3f8:	61f8      	str	r0, [r7, #28]
          break;
 800c3fa:	e023      	b.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800c3fc:	f7fe ff08 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c400:	61f8      	str	r0, [r7, #28]
          break;
 800c402:	e01f      	b.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800c404:	40021000 	.word	0x40021000
 800c408:	02dc6c00 	.word	0x02dc6c00
 800c40c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c410:	4b9b      	ldr	r3, [pc, #620]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c41c:	d10f      	bne.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800c41e:	4b99      	ldr	r3, [pc, #612]	; (800c684 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c420:	61fb      	str	r3, [r7, #28]
          break;
 800c422:	e00c      	b.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c424:	4b96      	ldr	r3, [pc, #600]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c42a:	f003 0302 	and.w	r3, r3, #2
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d107      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800c432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c436:	61fb      	str	r3, [r7, #28]
          break;
 800c438:	e003      	b.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800c43a:	bf00      	nop
 800c43c:	e2e0      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c43e:	bf00      	nop
 800c440:	e2de      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c442:	bf00      	nop
        break;
 800c444:	e2dc      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c446:	4b8e      	ldr	r3, [pc, #568]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c44c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c458:	d025      	beq.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c460:	d82c      	bhi.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c468:	d013      	beq.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c470:	d824      	bhi.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d004      	beq.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c47e:	d004      	beq.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800c480:	e01c      	b.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c482:	f7fe ff5d 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c486:	61f8      	str	r0, [r7, #28]
          break;
 800c488:	e01d      	b.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800c48a:	f7fe fec1 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c48e:	61f8      	str	r0, [r7, #28]
          break;
 800c490:	e019      	b.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c492:	4b7b      	ldr	r3, [pc, #492]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c49e:	d10f      	bne.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800c4a0:	4b78      	ldr	r3, [pc, #480]	; (800c684 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c4a2:	61fb      	str	r3, [r7, #28]
          break;
 800c4a4:	e00c      	b.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c4a6:	4b76      	ldr	r3, [pc, #472]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ac:	f003 0302 	and.w	r3, r3, #2
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d107      	bne.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800c4b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4b8:	61fb      	str	r3, [r7, #28]
          break;
 800c4ba:	e003      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800c4bc:	bf00      	nop
 800c4be:	e29f      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c4c0:	bf00      	nop
 800c4c2:	e29d      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c4c4:	bf00      	nop
        break;
 800c4c6:	e29b      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c4c8:	4b6d      	ldr	r3, [pc, #436]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c4d2:	60fb      	str	r3, [r7, #12]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4da:	d025      	beq.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4e2:	d82c      	bhi.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4ea:	d013      	beq.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4f2:	d824      	bhi.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d004      	beq.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c500:	d004      	beq.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800c502:	e01c      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c504:	f7fe ff1c 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c508:	61f8      	str	r0, [r7, #28]
          break;
 800c50a:	e01d      	b.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800c50c:	f7fe fe80 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c510:	61f8      	str	r0, [r7, #28]
          break;
 800c512:	e019      	b.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c514:	4b5a      	ldr	r3, [pc, #360]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c51c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c520:	d10f      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800c522:	4b58      	ldr	r3, [pc, #352]	; (800c684 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c524:	61fb      	str	r3, [r7, #28]
          break;
 800c526:	e00c      	b.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c528:	4b55      	ldr	r3, [pc, #340]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c52e:	f003 0302 	and.w	r3, r3, #2
 800c532:	2b02      	cmp	r3, #2
 800c534:	d107      	bne.n	800c546 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800c536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c53a:	61fb      	str	r3, [r7, #28]
          break;
 800c53c:	e003      	b.n	800c546 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800c53e:	bf00      	nop
 800c540:	e25e      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c542:	bf00      	nop
 800c544:	e25c      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c546:	bf00      	nop
        break;
 800c548:	e25a      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c54a:	4b4d      	ldr	r3, [pc, #308]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c55c:	d007      	beq.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c564:	d12f      	bne.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800c566:	f7fe fe53 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c56a:	61f8      	str	r0, [r7, #28]
          break;
 800c56c:	e02e      	b.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800c56e:	4b44      	ldr	r3, [pc, #272]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c57a:	d126      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800c57c:	4b40      	ldr	r3, [pc, #256]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c584:	2b00      	cmp	r3, #0
 800c586:	d020      	beq.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c588:	4b3d      	ldr	r3, [pc, #244]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	0a1b      	lsrs	r3, r3, #8
 800c58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c592:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	fb03 f202 	mul.w	r2, r3, r2
 800c59c:	4b38      	ldr	r3, [pc, #224]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	091b      	lsrs	r3, r3, #4
 800c5a2:	f003 030f 	and.w	r3, r3, #15
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800c5ae:	4b34      	ldr	r3, [pc, #208]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	0e5b      	lsrs	r3, r3, #25
 800c5b4:	f003 0303 	and.w	r3, r3, #3
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	005b      	lsls	r3, r3, #1
 800c5bc:	69ba      	ldr	r2, [r7, #24]
 800c5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5c2:	61fb      	str	r3, [r7, #28]
          break;
 800c5c4:	e001      	b.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800c5c6:	bf00      	nop
 800c5c8:	e21a      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c5ca:	bf00      	nop
        break;
 800c5cc:	e218      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800c5ce:	4b2c      	ldr	r3, [pc, #176]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c5d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5d4:	f003 0304 	and.w	r3, r3, #4
 800c5d8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d103      	bne.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800c5e0:	f7fe fec4 	bl	800b36c <HAL_RCC_GetPCLK2Freq>
 800c5e4:	61f8      	str	r0, [r7, #28]
        break;
 800c5e6:	e20b      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800c5e8:	f7fe fe12 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c5ec:	61f8      	str	r0, [r7, #28]
        break;
 800c5ee:	e207      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800c5f0:	4b23      	ldr	r3, [pc, #140]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c5f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5f6:	f003 0318 	and.w	r3, r3, #24
 800c5fa:	60fb      	str	r3, [r7, #12]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2b10      	cmp	r3, #16
 800c600:	d010      	beq.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b10      	cmp	r3, #16
 800c606:	d834      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b08      	cmp	r3, #8
 800c612:	d024      	beq.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800c614:	e02d      	b.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c616:	69b9      	ldr	r1, [r7, #24]
 800c618:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c61c:	f000 fbe2 	bl	800cde4 <RCCEx_GetSAIxPeriphCLKFreq>
 800c620:	61f8      	str	r0, [r7, #28]
          break;
 800c622:	e02b      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c624:	4b16      	ldr	r3, [pc, #88]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0302 	and.w	r3, r3, #2
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d122      	bne.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c630:	4b13      	ldr	r3, [pc, #76]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 0308 	and.w	r3, r3, #8
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d005      	beq.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800c63c:	4b10      	ldr	r3, [pc, #64]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	091b      	lsrs	r3, r3, #4
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	e005      	b.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800c648:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c64a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c64e:	0a1b      	lsrs	r3, r3, #8
 800c650:	f003 030f 	and.w	r3, r3, #15
 800c654:	4a0c      	ldr	r2, [pc, #48]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800c656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c65a:	61fb      	str	r3, [r7, #28]
          break;
 800c65c:	e00b      	b.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c65e:	4b08      	ldr	r3, [pc, #32]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c66a:	d106      	bne.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800c66c:	4b05      	ldr	r3, [pc, #20]	; (800c684 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c66e:	61fb      	str	r3, [r7, #28]
          break;
 800c670:	e003      	b.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800c672:	bf00      	nop
 800c674:	e1c4      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c676:	bf00      	nop
 800c678:	e1c2      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c67a:	bf00      	nop
        break;
 800c67c:	e1c0      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800c67e:	bf00      	nop
 800c680:	40021000 	.word	0x40021000
 800c684:	00f42400 	.word	0x00f42400
 800c688:	0801cc08 	.word	0x0801cc08
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c68c:	4b96      	ldr	r3, [pc, #600]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c692:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c69e:	d013      	beq.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6a6:	d819      	bhi.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d004      	beq.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6b4:	d004      	beq.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800c6b6:	e011      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c6b8:	f7fe fe42 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c6bc:	61f8      	str	r0, [r7, #28]
          break;
 800c6be:	e010      	b.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800c6c0:	f7fe fda6 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c6c4:	61f8      	str	r0, [r7, #28]
          break;
 800c6c6:	e00c      	b.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6c8:	4b87      	ldr	r3, [pc, #540]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6d4:	d104      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800c6d6:	4b85      	ldr	r3, [pc, #532]	; (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c6d8:	61fb      	str	r3, [r7, #28]
          break;
 800c6da:	e001      	b.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800c6dc:	bf00      	nop
 800c6de:	e18f      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c6e0:	bf00      	nop
        break;
 800c6e2:	e18d      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c6e4:	4b80      	ldr	r3, [pc, #512]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c6ee:	60fb      	str	r3, [r7, #12]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6f6:	d013      	beq.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6fe:	d819      	bhi.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d004      	beq.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c70c:	d004      	beq.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800c70e:	e011      	b.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c710:	f7fe fe16 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c714:	61f8      	str	r0, [r7, #28]
          break;
 800c716:	e010      	b.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800c718:	f7fe fd7a 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c71c:	61f8      	str	r0, [r7, #28]
          break;
 800c71e:	e00c      	b.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c720:	4b71      	ldr	r3, [pc, #452]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c72c:	d104      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800c72e:	4b6f      	ldr	r3, [pc, #444]	; (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c730:	61fb      	str	r3, [r7, #28]
          break;
 800c732:	e001      	b.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800c734:	bf00      	nop
 800c736:	e163      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c738:	bf00      	nop
        break;
 800c73a:	e161      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c73c:	4b6a      	ldr	r3, [pc, #424]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c74e:	d013      	beq.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c756:	d819      	bhi.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d004      	beq.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c764:	d004      	beq.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800c766:	e011      	b.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c768:	f7fe fdea 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c76c:	61f8      	str	r0, [r7, #28]
          break;
 800c76e:	e010      	b.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800c770:	f7fe fd4e 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c774:	61f8      	str	r0, [r7, #28]
          break;
 800c776:	e00c      	b.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c778:	4b5b      	ldr	r3, [pc, #364]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c784:	d104      	bne.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800c786:	4b59      	ldr	r3, [pc, #356]	; (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c788:	61fb      	str	r3, [r7, #28]
          break;
 800c78a:	e001      	b.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800c78c:	bf00      	nop
 800c78e:	e137      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c790:	bf00      	nop
        break;
 800c792:	e135      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c794:	4b54      	ldr	r3, [pc, #336]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c79a:	f003 0303 	and.w	r3, r3, #3
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d011      	beq.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d818      	bhi.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d004      	beq.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800c7b8:	e011      	b.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c7ba:	f7fe fdc1 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c7be:	61f8      	str	r0, [r7, #28]
          break;
 800c7c0:	e010      	b.n	800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800c7c2:	f7fe fd25 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c7c6:	61f8      	str	r0, [r7, #28]
          break;
 800c7c8:	e00c      	b.n	800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7ca:	4b47      	ldr	r3, [pc, #284]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7d6:	d104      	bne.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800c7d8:	4b44      	ldr	r3, [pc, #272]	; (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c7da:	61fb      	str	r3, [r7, #28]
          break;
 800c7dc:	e001      	b.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800c7de:	bf00      	nop
 800c7e0:	e10e      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c7e2:	bf00      	nop
        break;
 800c7e4:	e10c      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c7e6:	4b40      	ldr	r3, [pc, #256]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c7e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c7f8:	d02c      	beq.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c800:	d833      	bhi.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c808:	d01a      	beq.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c810:	d82b      	bhi.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d004      	beq.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c81e:	d004      	beq.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800c820:	e023      	b.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c822:	f7fe fd8d 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c826:	61f8      	str	r0, [r7, #28]
          break;
 800c828:	e026      	b.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c82a:	4b2f      	ldr	r3, [pc, #188]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c82c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c830:	f003 0302 	and.w	r3, r3, #2
 800c834:	2b02      	cmp	r3, #2
 800c836:	d11a      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800c838:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c83c:	61fb      	str	r3, [r7, #28]
          break;
 800c83e:	e016      	b.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c840:	4b29      	ldr	r3, [pc, #164]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c84c:	d111      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800c84e:	4b27      	ldr	r3, [pc, #156]	; (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c850:	61fb      	str	r3, [r7, #28]
          break;
 800c852:	e00e      	b.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c854:	4b24      	ldr	r3, [pc, #144]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c85a:	f003 0302 	and.w	r3, r3, #2
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d109      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800c862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c866:	61fb      	str	r3, [r7, #28]
          break;
 800c868:	e005      	b.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800c86a:	bf00      	nop
 800c86c:	e0c8      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c86e:	bf00      	nop
 800c870:	e0c6      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c872:	bf00      	nop
 800c874:	e0c4      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c876:	bf00      	nop
        break;
 800c878:	e0c2      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c87a:	4b1b      	ldr	r3, [pc, #108]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c880:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c884:	60fb      	str	r3, [r7, #12]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c88c:	d030      	beq.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c894:	d837      	bhi.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c89c:	d01a      	beq.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8a4:	d82f      	bhi.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d004      	beq.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8b2:	d004      	beq.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800c8b4:	e027      	b.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c8b6:	f7fe fd43 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 800c8ba:	61f8      	str	r0, [r7, #28]
          break;
 800c8bc:	e02a      	b.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c8be:	4b0a      	ldr	r3, [pc, #40]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c8c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8c4:	f003 0302 	and.w	r3, r3, #2
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d11e      	bne.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800c8cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c8d0:	61fb      	str	r3, [r7, #28]
          break;
 800c8d2:	e01a      	b.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8d4:	4b04      	ldr	r3, [pc, #16]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8e0:	d115      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800c8e2:	4b02      	ldr	r3, [pc, #8]	; (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c8e4:	61fb      	str	r3, [r7, #28]
          break;
 800c8e6:	e012      	b.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800c8e8:	40021000 	.word	0x40021000
 800c8ec:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c8f0:	4b46      	ldr	r3, [pc, #280]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8f6:	f003 0302 	and.w	r3, r3, #2
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d109      	bne.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800c8fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c902:	61fb      	str	r3, [r7, #28]
          break;
 800c904:	e005      	b.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800c906:	bf00      	nop
 800c908:	e07a      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c90a:	bf00      	nop
 800c90c:	e078      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c90e:	bf00      	nop
 800c910:	e076      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c912:	bf00      	nop
        break;
 800c914:	e074      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c916:	4b3d      	ldr	r3, [pc, #244]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c918:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c91c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c920:	60fb      	str	r3, [r7, #12]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c928:	d02c      	beq.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c930:	d855      	bhi.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d004      	beq.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c93e:	d004      	beq.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800c940:	e04d      	b.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800c942:	f7fe fc65 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 800c946:	61f8      	str	r0, [r7, #28]
          break;
 800c948:	e04e      	b.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c94a:	4b30      	ldr	r3, [pc, #192]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f003 0302 	and.w	r3, r3, #2
 800c952:	2b02      	cmp	r3, #2
 800c954:	d145      	bne.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c956:	4b2d      	ldr	r3, [pc, #180]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 0308 	and.w	r3, r3, #8
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d005      	beq.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800c962:	4b2a      	ldr	r3, [pc, #168]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	091b      	lsrs	r3, r3, #4
 800c968:	f003 030f 	and.w	r3, r3, #15
 800c96c:	e005      	b.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800c96e:	4b27      	ldr	r3, [pc, #156]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c974:	0a1b      	lsrs	r3, r3, #8
 800c976:	f003 030f 	and.w	r3, r3, #15
 800c97a:	4a25      	ldr	r2, [pc, #148]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800c97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c980:	61fb      	str	r3, [r7, #28]
          break;
 800c982:	e02e      	b.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c984:	4b21      	ldr	r3, [pc, #132]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c98c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c990:	d129      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c992:	4b1e      	ldr	r3, [pc, #120]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c99a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c99e:	d122      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c9a0:	4b1a      	ldr	r3, [pc, #104]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	0a1b      	lsrs	r3, r3, #8
 800c9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9aa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	fb03 f202 	mul.w	r2, r3, r2
 800c9b4:	4b15      	ldr	r3, [pc, #84]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	091b      	lsrs	r3, r3, #4
 800c9ba:	f003 030f 	and.w	r3, r3, #15
 800c9be:	3301      	adds	r3, #1
 800c9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c9c6:	4b11      	ldr	r3, [pc, #68]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	0d5b      	lsrs	r3, r3, #21
 800c9cc:	f003 0303 	and.w	r3, r3, #3
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	69ba      	ldr	r2, [r7, #24]
 800c9d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9da:	61fb      	str	r3, [r7, #28]
          break;
 800c9dc:	e003      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800c9de:	bf00      	nop
 800c9e0:	e00e      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c9e2:	bf00      	nop
 800c9e4:	e00c      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c9e6:	bf00      	nop
        break;
 800c9e8:	e00a      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c9ea:	bf00      	nop
 800c9ec:	e008      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c9ee:	bf00      	nop
 800c9f0:	e006      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c9f2:	bf00      	nop
 800c9f4:	e004      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c9f6:	bf00      	nop
 800c9f8:	e002      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c9fa:	bf00      	nop
 800c9fc:	e000      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c9fe:	bf00      	nop
    }
  }

  return(frequency);
 800ca00:	69fb      	ldr	r3, [r7, #28]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3720      	adds	r7, #32
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	40021000 	.word	0x40021000
 800ca10:	0801cc08 	.word	0x0801cc08

0800ca14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ca22:	4b72      	ldr	r3, [pc, #456]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00e      	beq.n	800ca4c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ca2e:	4b6f      	ldr	r3, [pc, #444]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	f003 0203 	and.w	r2, r3, #3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d103      	bne.n	800ca46 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
       ||
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d142      	bne.n	800cacc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	73fb      	strb	r3, [r7, #15]
 800ca4a:	e03f      	b.n	800cacc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b03      	cmp	r3, #3
 800ca52:	d018      	beq.n	800ca86 <RCCEx_PLLSAI1_Config+0x72>
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	d825      	bhi.n	800caa4 <RCCEx_PLLSAI1_Config+0x90>
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d002      	beq.n	800ca62 <RCCEx_PLLSAI1_Config+0x4e>
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d009      	beq.n	800ca74 <RCCEx_PLLSAI1_Config+0x60>
 800ca60:	e020      	b.n	800caa4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ca62:	4b62      	ldr	r3, [pc, #392]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f003 0302 	and.w	r3, r3, #2
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d11d      	bne.n	800caaa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca72:	e01a      	b.n	800caaa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ca74:	4b5d      	ldr	r3, [pc, #372]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d116      	bne.n	800caae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca84:	e013      	b.n	800caae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ca86:	4b59      	ldr	r3, [pc, #356]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10f      	bne.n	800cab2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ca92:	4b56      	ldr	r3, [pc, #344]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d109      	bne.n	800cab2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800caa2:	e006      	b.n	800cab2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	73fb      	strb	r3, [r7, #15]
      break;
 800caa8:	e004      	b.n	800cab4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800caaa:	bf00      	nop
 800caac:	e002      	b.n	800cab4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800caae:	bf00      	nop
 800cab0:	e000      	b.n	800cab4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cab2:	bf00      	nop
    }

    if(status == HAL_OK)
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d108      	bne.n	800cacc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800caba:	4b4c      	ldr	r3, [pc, #304]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	f023 0203 	bic.w	r2, r3, #3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4949      	ldr	r1, [pc, #292]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cac8:	4313      	orrs	r3, r2
 800caca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f040 8086 	bne.w	800cbe0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cad4:	4b45      	ldr	r3, [pc, #276]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a44      	ldr	r2, [pc, #272]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cada:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cae0:	f7fa fa82 	bl	8006fe8 <HAL_GetTick>
 800cae4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cae6:	e009      	b.n	800cafc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cae8:	f7fa fa7e 	bl	8006fe8 <HAL_GetTick>
 800caec:	4602      	mov	r2, r0
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d902      	bls.n	800cafc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800caf6:	2303      	movs	r3, #3
 800caf8:	73fb      	strb	r3, [r7, #15]
        break;
 800cafa:	e005      	b.n	800cb08 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cafc:	4b3b      	ldr	r3, [pc, #236]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1ef      	bne.n	800cae8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800cb08:	7bfb      	ldrb	r3, [r7, #15]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d168      	bne.n	800cbe0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d113      	bne.n	800cb3c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb14:	4b35      	ldr	r3, [pc, #212]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cb16:	691a      	ldr	r2, [r3, #16]
 800cb18:	4b35      	ldr	r3, [pc, #212]	; (800cbf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	6892      	ldr	r2, [r2, #8]
 800cb20:	0211      	lsls	r1, r2, #8
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	68d2      	ldr	r2, [r2, #12]
 800cb26:	06d2      	lsls	r2, r2, #27
 800cb28:	4311      	orrs	r1, r2
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	6852      	ldr	r2, [r2, #4]
 800cb2e:	3a01      	subs	r2, #1
 800cb30:	0112      	lsls	r2, r2, #4
 800cb32:	430a      	orrs	r2, r1
 800cb34:	492d      	ldr	r1, [pc, #180]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cb36:	4313      	orrs	r3, r2
 800cb38:	610b      	str	r3, [r1, #16]
 800cb3a:	e02d      	b.n	800cb98 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d115      	bne.n	800cb6e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb42:	4b2a      	ldr	r3, [pc, #168]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cb44:	691a      	ldr	r2, [r3, #16]
 800cb46:	4b2b      	ldr	r3, [pc, #172]	; (800cbf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb48:	4013      	ands	r3, r2
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	6892      	ldr	r2, [r2, #8]
 800cb4e:	0211      	lsls	r1, r2, #8
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	6912      	ldr	r2, [r2, #16]
 800cb54:	0852      	lsrs	r2, r2, #1
 800cb56:	3a01      	subs	r2, #1
 800cb58:	0552      	lsls	r2, r2, #21
 800cb5a:	4311      	orrs	r1, r2
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	6852      	ldr	r2, [r2, #4]
 800cb60:	3a01      	subs	r2, #1
 800cb62:	0112      	lsls	r2, r2, #4
 800cb64:	430a      	orrs	r2, r1
 800cb66:	4921      	ldr	r1, [pc, #132]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	610b      	str	r3, [r1, #16]
 800cb6c:	e014      	b.n	800cb98 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb6e:	4b1f      	ldr	r3, [pc, #124]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cb70:	691a      	ldr	r2, [r3, #16]
 800cb72:	4b21      	ldr	r3, [pc, #132]	; (800cbf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cb74:	4013      	ands	r3, r2
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	6892      	ldr	r2, [r2, #8]
 800cb7a:	0211      	lsls	r1, r2, #8
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	6952      	ldr	r2, [r2, #20]
 800cb80:	0852      	lsrs	r2, r2, #1
 800cb82:	3a01      	subs	r2, #1
 800cb84:	0652      	lsls	r2, r2, #25
 800cb86:	4311      	orrs	r1, r2
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	6852      	ldr	r2, [r2, #4]
 800cb8c:	3a01      	subs	r2, #1
 800cb8e:	0112      	lsls	r2, r2, #4
 800cb90:	430a      	orrs	r2, r1
 800cb92:	4916      	ldr	r1, [pc, #88]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cb94:	4313      	orrs	r3, r2
 800cb96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cb98:	4b14      	ldr	r3, [pc, #80]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a13      	ldr	r2, [pc, #76]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cb9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cba2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cba4:	f7fa fa20 	bl	8006fe8 <HAL_GetTick>
 800cba8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cbaa:	e009      	b.n	800cbc0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cbac:	f7fa fa1c 	bl	8006fe8 <HAL_GetTick>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d902      	bls.n	800cbc0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	73fb      	strb	r3, [r7, #15]
          break;
 800cbbe:	e005      	b.n	800cbcc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cbc0:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d0ef      	beq.n	800cbac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800cbcc:	7bfb      	ldrb	r3, [r7, #15]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d106      	bne.n	800cbe0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cbd2:	4b06      	ldr	r3, [pc, #24]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cbd4:	691a      	ldr	r2, [r3, #16]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	699b      	ldr	r3, [r3, #24]
 800cbda:	4904      	ldr	r1, [pc, #16]	; (800cbec <RCCEx_PLLSAI1_Config+0x1d8>)
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	40021000 	.word	0x40021000
 800cbf0:	07ff800f 	.word	0x07ff800f
 800cbf4:	ff9f800f 	.word	0xff9f800f
 800cbf8:	f9ff800f 	.word	0xf9ff800f

0800cbfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cc0a:	4b72      	ldr	r3, [pc, #456]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	f003 0303 	and.w	r3, r3, #3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00e      	beq.n	800cc34 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cc16:	4b6f      	ldr	r3, [pc, #444]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	f003 0203 	and.w	r2, r3, #3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d103      	bne.n	800cc2e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
       ||
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d142      	bne.n	800ccb4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	73fb      	strb	r3, [r7, #15]
 800cc32:	e03f      	b.n	800ccb4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	d018      	beq.n	800cc6e <RCCEx_PLLSAI2_Config+0x72>
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	d825      	bhi.n	800cc8c <RCCEx_PLLSAI2_Config+0x90>
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d002      	beq.n	800cc4a <RCCEx_PLLSAI2_Config+0x4e>
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d009      	beq.n	800cc5c <RCCEx_PLLSAI2_Config+0x60>
 800cc48:	e020      	b.n	800cc8c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cc4a:	4b62      	ldr	r3, [pc, #392]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0302 	and.w	r3, r3, #2
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d11d      	bne.n	800cc92 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc5a:	e01a      	b.n	800cc92 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cc5c:	4b5d      	ldr	r3, [pc, #372]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d116      	bne.n	800cc96 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc6c:	e013      	b.n	800cc96 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cc6e:	4b59      	ldr	r3, [pc, #356]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10f      	bne.n	800cc9a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cc7a:	4b56      	ldr	r3, [pc, #344]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d109      	bne.n	800cc9a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc8a:	e006      	b.n	800cc9a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc90:	e004      	b.n	800cc9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800cc92:	bf00      	nop
 800cc94:	e002      	b.n	800cc9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800cc96:	bf00      	nop
 800cc98:	e000      	b.n	800cc9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800cc9a:	bf00      	nop
    }

    if(status == HAL_OK)
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d108      	bne.n	800ccb4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800cca2:	4b4c      	ldr	r3, [pc, #304]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	f023 0203 	bic.w	r2, r3, #3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4949      	ldr	r1, [pc, #292]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f040 8086 	bne.w	800cdc8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ccbc:	4b45      	ldr	r3, [pc, #276]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a44      	ldr	r2, [pc, #272]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ccc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccc8:	f7fa f98e 	bl	8006fe8 <HAL_GetTick>
 800cccc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ccce:	e009      	b.n	800cce4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ccd0:	f7fa f98a 	bl	8006fe8 <HAL_GetTick>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d902      	bls.n	800cce4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800ccde:	2303      	movs	r3, #3
 800cce0:	73fb      	strb	r3, [r7, #15]
        break;
 800cce2:	e005      	b.n	800ccf0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800cce4:	4b3b      	ldr	r3, [pc, #236]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1ef      	bne.n	800ccd0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d168      	bne.n	800cdc8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d113      	bne.n	800cd24 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ccfc:	4b35      	ldr	r3, [pc, #212]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ccfe:	695a      	ldr	r2, [r3, #20]
 800cd00:	4b35      	ldr	r3, [pc, #212]	; (800cdd8 <RCCEx_PLLSAI2_Config+0x1dc>)
 800cd02:	4013      	ands	r3, r2
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	6892      	ldr	r2, [r2, #8]
 800cd08:	0211      	lsls	r1, r2, #8
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	68d2      	ldr	r2, [r2, #12]
 800cd0e:	06d2      	lsls	r2, r2, #27
 800cd10:	4311      	orrs	r1, r2
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	6852      	ldr	r2, [r2, #4]
 800cd16:	3a01      	subs	r2, #1
 800cd18:	0112      	lsls	r2, r2, #4
 800cd1a:	430a      	orrs	r2, r1
 800cd1c:	492d      	ldr	r1, [pc, #180]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	614b      	str	r3, [r1, #20]
 800cd22:	e02d      	b.n	800cd80 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d115      	bne.n	800cd56 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800cd2a:	4b2a      	ldr	r3, [pc, #168]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cd2c:	695a      	ldr	r2, [r3, #20]
 800cd2e:	4b2b      	ldr	r3, [pc, #172]	; (800cddc <RCCEx_PLLSAI2_Config+0x1e0>)
 800cd30:	4013      	ands	r3, r2
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	6892      	ldr	r2, [r2, #8]
 800cd36:	0211      	lsls	r1, r2, #8
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	6912      	ldr	r2, [r2, #16]
 800cd3c:	0852      	lsrs	r2, r2, #1
 800cd3e:	3a01      	subs	r2, #1
 800cd40:	0552      	lsls	r2, r2, #21
 800cd42:	4311      	orrs	r1, r2
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	6852      	ldr	r2, [r2, #4]
 800cd48:	3a01      	subs	r2, #1
 800cd4a:	0112      	lsls	r2, r2, #4
 800cd4c:	430a      	orrs	r2, r1
 800cd4e:	4921      	ldr	r1, [pc, #132]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cd50:	4313      	orrs	r3, r2
 800cd52:	614b      	str	r3, [r1, #20]
 800cd54:	e014      	b.n	800cd80 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800cd56:	4b1f      	ldr	r3, [pc, #124]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cd58:	695a      	ldr	r2, [r3, #20]
 800cd5a:	4b21      	ldr	r3, [pc, #132]	; (800cde0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	6892      	ldr	r2, [r2, #8]
 800cd62:	0211      	lsls	r1, r2, #8
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	6952      	ldr	r2, [r2, #20]
 800cd68:	0852      	lsrs	r2, r2, #1
 800cd6a:	3a01      	subs	r2, #1
 800cd6c:	0652      	lsls	r2, r2, #25
 800cd6e:	4311      	orrs	r1, r2
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	6852      	ldr	r2, [r2, #4]
 800cd74:	3a01      	subs	r2, #1
 800cd76:	0112      	lsls	r2, r2, #4
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	4916      	ldr	r1, [pc, #88]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800cd80:	4b14      	ldr	r3, [pc, #80]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a13      	ldr	r2, [pc, #76]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cd86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd8c:	f7fa f92c 	bl	8006fe8 <HAL_GetTick>
 800cd90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cd92:	e009      	b.n	800cda8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800cd94:	f7fa f928 	bl	8006fe8 <HAL_GetTick>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d902      	bls.n	800cda8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	73fb      	strb	r3, [r7, #15]
          break;
 800cda6:	e005      	b.n	800cdb4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cda8:	4b0a      	ldr	r3, [pc, #40]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0ef      	beq.n	800cd94 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d106      	bne.n	800cdc8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800cdba:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cdbc:	695a      	ldr	r2, [r3, #20]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	4904      	ldr	r1, [pc, #16]	; (800cdd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	40021000 	.word	0x40021000
 800cdd8:	07ff800f 	.word	0x07ff800f
 800cddc:	ff9f800f 	.word	0xff9f800f
 800cde0:	f9ff800f 	.word	0xf9ff800f

0800cde4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b089      	sub	sp, #36	; 0x24
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce00:	d10b      	bne.n	800ce1a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ce02:	4b7e      	ldr	r3, [pc, #504]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ce04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce08:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ce0c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	2b60      	cmp	r3, #96	; 0x60
 800ce12:	d112      	bne.n	800ce3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ce14:	4b7a      	ldr	r3, [pc, #488]	; (800d000 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800ce16:	61fb      	str	r3, [r7, #28]
 800ce18:	e00f      	b.n	800ce3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce20:	d10b      	bne.n	800ce3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ce22:	4b76      	ldr	r3, [pc, #472]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ce24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce2c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce34:	d101      	bne.n	800ce3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800ce36:	4b72      	ldr	r3, [pc, #456]	; (800d000 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800ce38:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f040 80d6 	bne.w	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	2b40      	cmp	r3, #64	; 0x40
 800ce4a:	d003      	beq.n	800ce54 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce52:	d13b      	bne.n	800cecc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ce54:	4b69      	ldr	r3, [pc, #420]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce60:	f040 80c4 	bne.w	800cfec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800ce64:	4b65      	ldr	r3, [pc, #404]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 80bd 	beq.w	800cfec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ce72:	4b62      	ldr	r3, [pc, #392]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	091b      	lsrs	r3, r3, #4
 800ce78:	f003 030f 	and.w	r3, r3, #15
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	693a      	ldr	r2, [r7, #16]
 800ce80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce84:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ce86:	4b5d      	ldr	r3, [pc, #372]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	0a1b      	lsrs	r3, r3, #8
 800ce8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce90:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ce92:	4b5a      	ldr	r3, [pc, #360]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	0edb      	lsrs	r3, r3, #27
 800ce98:	f003 031f 	and.w	r3, r3, #31
 800ce9c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10a      	bne.n	800ceba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800cea4:	4b55      	ldr	r3, [pc, #340]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d002      	beq.n	800ceb6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800ceb0:	2311      	movs	r3, #17
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	e001      	b.n	800ceba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800ceb6:	2307      	movs	r3, #7
 800ceb8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	fb03 f202 	mul.w	r2, r3, r2
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ceca:	e08f      	b.n	800cfec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d13a      	bne.n	800cf48 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ced2:	4b4a      	ldr	r3, [pc, #296]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cede:	f040 8086 	bne.w	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800cee2:	4b46      	ldr	r3, [pc, #280]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d07f      	beq.n	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ceee:	4b43      	ldr	r3, [pc, #268]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	091b      	lsrs	r3, r3, #4
 800cef4:	f003 030f 	and.w	r3, r3, #15
 800cef8:	3301      	adds	r3, #1
 800cefa:	693a      	ldr	r2, [r7, #16]
 800cefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf00:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800cf02:	4b3e      	ldr	r3, [pc, #248]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	0a1b      	lsrs	r3, r3, #8
 800cf08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf0c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800cf0e:	4b3b      	ldr	r3, [pc, #236]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cf10:	691b      	ldr	r3, [r3, #16]
 800cf12:	0edb      	lsrs	r3, r3, #27
 800cf14:	f003 031f 	and.w	r3, r3, #31
 800cf18:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800cf20:	4b36      	ldr	r3, [pc, #216]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cf22:	691b      	ldr	r3, [r3, #16]
 800cf24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800cf2c:	2311      	movs	r3, #17
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	e001      	b.n	800cf36 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800cf32:	2307      	movs	r3, #7
 800cf34:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	fb03 f202 	mul.w	r2, r3, r2
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf44:	61fb      	str	r3, [r7, #28]
 800cf46:	e052      	b.n	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	2b80      	cmp	r3, #128	; 0x80
 800cf4c:	d003      	beq.n	800cf56 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf54:	d109      	bne.n	800cf6a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf56:	4b29      	ldr	r3, [pc, #164]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf62:	d144      	bne.n	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800cf64:	4b27      	ldr	r3, [pc, #156]	; (800d004 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800cf66:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf68:	e041      	b.n	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	2b20      	cmp	r3, #32
 800cf6e:	d003      	beq.n	800cf78 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf76:	d13a      	bne.n	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800cf78:	4b20      	ldr	r3, [pc, #128]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf84:	d133      	bne.n	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800cf86:	4b1d      	ldr	r3, [pc, #116]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d02d      	beq.n	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800cf92:	4b1a      	ldr	r3, [pc, #104]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cf94:	695b      	ldr	r3, [r3, #20]
 800cf96:	091b      	lsrs	r3, r3, #4
 800cf98:	f003 030f 	and.w	r3, r3, #15
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	693a      	ldr	r2, [r7, #16]
 800cfa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfa4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800cfa6:	4b15      	ldr	r3, [pc, #84]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cfa8:	695b      	ldr	r3, [r3, #20]
 800cfaa:	0a1b      	lsrs	r3, r3, #8
 800cfac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfb0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800cfb2:	4b12      	ldr	r3, [pc, #72]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	0edb      	lsrs	r3, r3, #27
 800cfb8:	f003 031f 	and.w	r3, r3, #31
 800cfbc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10a      	bne.n	800cfda <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800cfc4:	4b0d      	ldr	r3, [pc, #52]	; (800cffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800cfd0:	2311      	movs	r3, #17
 800cfd2:	617b      	str	r3, [r7, #20]
 800cfd4:	e001      	b.n	800cfda <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800cfd6:	2307      	movs	r3, #7
 800cfd8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	fb03 f202 	mul.w	r2, r3, r2
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfe8:	61fb      	str	r3, [r7, #28]
 800cfea:	e000      	b.n	800cfee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800cfec:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800cfee:	69fb      	ldr	r3, [r7, #28]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3724      	adds	r7, #36	; 0x24
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	40021000 	.word	0x40021000
 800d000:	001fff68 	.word	0x001fff68
 800d004:	00f42400 	.word	0x00f42400

0800d008 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08a      	sub	sp, #40	; 0x28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e078      	b.n	800d10c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d105      	bne.n	800d032 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7f7 ffbb 	bl	8004fa8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2203      	movs	r2, #3
 800d036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f86a 	bl	800d114 <HAL_SD_InitCard>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	e060      	b.n	800d10c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d04a:	f107 0308 	add.w	r3, r7, #8
 800d04e:	4619      	mov	r1, r3
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fdb5 	bl	800dbc0 <HAL_SD_GetCardStatus>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e055      	b.n	800d10c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d060:	7e3b      	ldrb	r3, [r7, #24]
 800d062:	b2db      	uxtb	r3, r3
 800d064:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d066:	7e7b      	ldrb	r3, [r7, #25]
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d070:	2b01      	cmp	r3, #1
 800d072:	d10a      	bne.n	800d08a <HAL_SD_Init+0x82>
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	2b00      	cmp	r3, #0
 800d078:	d102      	bne.n	800d080 <HAL_SD_Init+0x78>
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d004      	beq.n	800d08a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d086:	65da      	str	r2, [r3, #92]	; 0x5c
 800d088:	e00b      	b.n	800d0a2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d104      	bne.n	800d09c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d098:	65da      	str	r2, [r3, #92]	; 0x5c
 800d09a:	e002      	b.n	800d0a2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fe6b 	bl	800dd84 <HAL_SD_ConfigWideBusOperation>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e029      	b.n	800d10c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d0b8:	f7f9 ff96 	bl	8006fe8 <HAL_GetTick>
 800d0bc:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0be:	e014      	b.n	800d0ea <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800d0c0:	f7f9 ff92 	bl	8006fe8 <HAL_GetTick>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0ce:	d10c      	bne.n	800d0ea <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e010      	b.n	800d10c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 ff5e 	bl	800dfac <HAL_SD_GetCardState>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b04      	cmp	r3, #4
 800d0f4:	d1e4      	bne.n	800d0c0 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2201      	movs	r2, #1
 800d106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3728      	adds	r7, #40	; 0x28
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d114:	b5b0      	push	{r4, r5, r7, lr}
 800d116:	b08e      	sub	sp, #56	; 0x38
 800d118:	af04      	add	r7, sp, #16
 800d11a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d11c:	2300      	movs	r3, #0
 800d11e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d120:	2300      	movs	r3, #0
 800d122:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d124:	2300      	movs	r3, #0
 800d126:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d128:	2300      	movs	r3, #0
 800d12a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800d12c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d130:	f7fe fd4e 	bl	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d134:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d109      	bne.n	800d150 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d14a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e079      	b.n	800d244 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	0a1b      	lsrs	r3, r3, #8
 800d154:	4a3d      	ldr	r2, [pc, #244]	; (800d24c <HAL_SD_InitCard+0x138>)
 800d156:	fba2 2303 	umull	r2, r3, r2, r3
 800d15a:	091b      	lsrs	r3, r3, #4
 800d15c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d107      	bne.n	800d17c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f042 0210 	orr.w	r2, r2, #16
 800d17a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681d      	ldr	r5, [r3, #0]
 800d180:	466c      	mov	r4, sp
 800d182:	f107 0314 	add.w	r3, r7, #20
 800d186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d18a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d194:	4628      	mov	r0, r5
 800d196:	f005 f8a5 	bl	80122e4 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f005 f8e8 	bl	8012374 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	005b      	lsls	r3, r3, #1
 800d1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800d1b0:	4a27      	ldr	r2, [pc, #156]	; (800d250 <HAL_SD_InitCard+0x13c>)
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7f9 ff20 	bl	8007000 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 ffd3 	bl	800e16c <SD_PowerON>
 800d1c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00b      	beq.n	800d1e6 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	431a      	orrs	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e02e      	b.n	800d244 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 ff00 	bl	800dfec <SD_InitCard>
 800d1ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00b      	beq.n	800d20c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d200:	6a3b      	ldr	r3, [r7, #32]
 800d202:	431a      	orrs	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	e01b      	b.n	800d244 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d214:	4618      	mov	r0, r3
 800d216:	f005 f943 	bl	80124a0 <SDMMC_CmdBlockLength>
 800d21a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00f      	beq.n	800d242 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a0b      	ldr	r2, [pc, #44]	; (800d254 <HAL_SD_InitCard+0x140>)
 800d228:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	431a      	orrs	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	e000      	b.n	800d244 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3728      	adds	r7, #40	; 0x28
 800d248:	46bd      	mov	sp, r7
 800d24a:	bdb0      	pop	{r4, r5, r7, pc}
 800d24c:	014f8b59 	.word	0x014f8b59
 800d250:	00012110 	.word	0x00012110
 800d254:	1fe00fff 	.word	0x1fe00fff

0800d258 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08c      	sub	sp, #48	; 0x30
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d107      	bne.n	800d280 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d274:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	e08d      	b.n	800d39c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b01      	cmp	r3, #1
 800d28a:	f040 8086 	bne.w	800d39a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2200      	movs	r2, #0
 800d292:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	441a      	add	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d907      	bls.n	800d2b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e074      	b.n	800d39c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2203      	movs	r2, #3
 800d2b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	025a      	lsls	r2, r3, #9
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d002      	beq.n	800d2de <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2da:	025b      	lsls	r3, r3, #9
 800d2dc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2e2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	025b      	lsls	r3, r3, #9
 800d2e8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2ea:	2390      	movs	r3, #144	; 0x90
 800d2ec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2ee:	2302      	movs	r3, #2
 800d2f0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f107 0210 	add.w	r2, r7, #16
 800d302:	4611      	mov	r1, r2
 800d304:	4618      	mov	r0, r3
 800d306:	f005 f89f 	bl	8012448 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68da      	ldr	r2, [r3, #12]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d318:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2201      	movs	r2, #1
 800d328:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d90a      	bls.n	800d346 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2282      	movs	r2, #130	; 0x82
 800d334:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d33c:	4618      	mov	r0, r3
 800d33e:	f005 f8f5 	bl	801252c <SDMMC_CmdReadMultiBlock>
 800d342:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d344:	e009      	b.n	800d35a <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2281      	movs	r2, #129	; 0x81
 800d34a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d352:	4618      	mov	r0, r3
 800d354:	f005 f8c7 	bl	80124e6 <SDMMC_CmdReadSingleBlock>
 800d358:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d012      	beq.n	800d386 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a0f      	ldr	r2, [pc, #60]	; (800d3a4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d366:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	431a      	orrs	r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2200      	movs	r2, #0
 800d380:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	e00a      	b.n	800d39c <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d394:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	e000      	b.n	800d39c <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800d39a:	2302      	movs	r3, #2
  }
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3730      	adds	r7, #48	; 0x30
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	1fe00fff 	.word	0x1fe00fff

0800d3a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b08c      	sub	sp, #48	; 0x30
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d107      	bne.n	800d3d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e08d      	b.n	800d4ec <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	f040 8086 	bne.w	800d4ea <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	441a      	add	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d907      	bls.n	800d402 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d3fe:	2301      	movs	r3, #1
 800d400:	e074      	b.n	800d4ec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2203      	movs	r2, #3
 800d406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2200      	movs	r2, #0
 800d410:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	025a      	lsls	r2, r3, #9
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d424:	2b01      	cmp	r3, #1
 800d426:	d002      	beq.n	800d42e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	025b      	lsls	r3, r3, #9
 800d42c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d42e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d432:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	025b      	lsls	r3, r3, #9
 800d438:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d43a:	2390      	movs	r3, #144	; 0x90
 800d43c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d43e:	2300      	movs	r3, #0
 800d440:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d442:	2300      	movs	r3, #0
 800d444:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d446:	2300      	movs	r3, #0
 800d448:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f107 0210 	add.w	r2, r7, #16
 800d452:	4611      	mov	r1, r2
 800d454:	4618      	mov	r0, r3
 800d456:	f004 fff7 	bl	8012448 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68da      	ldr	r2, [r3, #12]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d468:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	68ba      	ldr	r2, [r7, #8]
 800d470:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2201      	movs	r2, #1
 800d478:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d90a      	bls.n	800d496 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	22a0      	movs	r2, #160	; 0xa0
 800d484:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d48c:	4618      	mov	r0, r3
 800d48e:	f005 f893 	bl	80125b8 <SDMMC_CmdWriteMultiBlock>
 800d492:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d494:	e009      	b.n	800d4aa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2290      	movs	r2, #144	; 0x90
 800d49a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f005 f865 	bl	8012572 <SDMMC_CmdWriteSingleBlock>
 800d4a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d012      	beq.n	800d4d6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a0f      	ldr	r2, [pc, #60]	; (800d4f4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e00a      	b.n	800d4ec <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d4e4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	e000      	b.n	800d4ec <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800d4ea:	2302      	movs	r3, #2
  }
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3730      	adds	r7, #48	; 0x30
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	1fe00fff 	.word	0x1fe00fff

0800d4f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d504:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d50c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d510:	2b00      	cmp	r3, #0
 800d512:	d008      	beq.n	800d526 <HAL_SD_IRQHandler+0x2e>
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f003 0308 	and.w	r3, r3, #8
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d003      	beq.n	800d526 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f001 f98e 	bl	800e840 <SD_Read_IT>
 800d524:	e199      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 80ae 	beq.w	800d692 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d53e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	6812      	ldr	r2, [r2, #0]
 800d54a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d54e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d552:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d562:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68da      	ldr	r2, [r3, #12]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d572:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f003 0308 	and.w	r3, r3, #8
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d038      	beq.n	800d5f0 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f003 0302 	and.w	r3, r3, #2
 800d584:	2b00      	cmp	r3, #0
 800d586:	d104      	bne.n	800d592 <HAL_SD_IRQHandler+0x9a>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f003 0320 	and.w	r3, r3, #32
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d011      	beq.n	800d5b6 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4618      	mov	r0, r3
 800d598:	f005 f832 	bl	8012600 <SDMMC_CmdStopTransfer>
 800d59c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d008      	beq.n	800d5b6 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f957 	bl	800d864 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a90      	ldr	r2, [pc, #576]	; (800d7fc <HAL_SD_IRQHandler+0x304>)
 800d5bc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f003 0301 	and.w	r3, r3, #1
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d104      	bne.n	800d5e0 <HAL_SD_IRQHandler+0xe8>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f003 0302 	and.w	r3, r3, #2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d003      	beq.n	800d5e8 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f006 ff63 	bl	80144ac <HAL_SD_RxCpltCallback>
 800d5e6:	e138      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f006 ff55 	bl	8014498 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800d5ee:	e134      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f000 812f 	beq.w	800d85a <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2200      	movs	r2, #0
 800d602:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2200      	movs	r2, #0
 800d60a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2200      	movs	r2, #0
 800d612:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f003 0302 	and.w	r3, r3, #2
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d104      	bne.n	800d628 <HAL_SD_IRQHandler+0x130>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f003 0320 	and.w	r3, r3, #32
 800d624:	2b00      	cmp	r3, #0
 800d626:	d011      	beq.n	800d64c <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f004 ffe7 	bl	8012600 <SDMMC_CmdStopTransfer>
 800d632:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d008      	beq.n	800d64c <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	431a      	orrs	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f90c 	bl	800d864 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f003 0310 	and.w	r3, r3, #16
 800d660:	2b00      	cmp	r3, #0
 800d662:	d104      	bne.n	800d66e <HAL_SD_IRQHandler+0x176>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0320 	and.w	r3, r3, #32
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d002      	beq.n	800d674 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f006 ff12 	bl	8014498 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d105      	bne.n	800d68a <HAL_SD_IRQHandler+0x192>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f003 0302 	and.w	r3, r3, #2
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 80e8 	beq.w	800d85a <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f006 ff0e 	bl	80144ac <HAL_SD_RxCpltCallback>
}
 800d690:	e0e3      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d008      	beq.n	800d6b2 <HAL_SD_IRQHandler+0x1ba>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f003 0308 	and.w	r3, r3, #8
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d003      	beq.n	800d6b2 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f001 f919 	bl	800e8e2 <SD_Write_IT>
 800d6b0:	e0d3      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f000 809f 	beq.w	800d800 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c8:	f003 0302 	and.w	r3, r3, #2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d005      	beq.n	800d6dc <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d4:	f043 0202 	orr.w	r2, r3, #2
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e2:	f003 0308 	and.w	r3, r3, #8
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d005      	beq.n	800d6f6 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ee:	f043 0208 	orr.w	r2, r3, #8
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fc:	f003 0320 	and.w	r3, r3, #32
 800d700:	2b00      	cmp	r3, #0
 800d702:	d005      	beq.n	800d710 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d708:	f043 0220 	orr.w	r2, r3, #32
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d716:	f003 0310 	and.w	r3, r3, #16
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d005      	beq.n	800d72a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d722:	f043 0210 	orr.w	r2, r3, #16
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a33      	ldr	r2, [pc, #204]	; (800d7fc <HAL_SD_IRQHandler+0x304>)
 800d730:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d740:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68da      	ldr	r2, [r3, #12]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d750:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d760:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68da      	ldr	r2, [r3, #12]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d770:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4618      	mov	r0, r3
 800d778:	f004 ff42 	bl	8012600 <SDMMC_CmdStopTransfer>
 800d77c:	4602      	mov	r2, r0
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	431a      	orrs	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68da      	ldr	r2, [r3, #12]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d796:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7a0:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f003 0308 	and.w	r3, r3, #8
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00a      	beq.n	800d7c2 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f852 	bl	800d864 <HAL_SD_ErrorCallback>
}
 800d7c0:	e04b      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d046      	beq.n	800d85a <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d042      	beq.n	800d85a <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7e2:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 f835 	bl	800d864 <HAL_SD_ErrorCallback>
}
 800d7fa:	e02e      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
 800d7fc:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d025      	beq.n	800d85a <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d816:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d81e:	f003 0304 	and.w	r3, r3, #4
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10c      	bne.n	800d840 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f003 0320 	and.w	r3, r3, #32
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d003      	beq.n	800d838 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f001 f8d4 	bl	800e9de <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800d836:	e010      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f001 f8bc 	bl	800e9b6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800d83e:	e00c      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f003 0320 	and.w	r3, r3, #32
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f001 f8bd 	bl	800e9ca <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800d850:	e003      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f001 f8a5 	bl	800e9a2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800d858:	e7ff      	b.n	800d85a <HAL_SD_IRQHandler+0x362>
 800d85a:	bf00      	nop
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop

0800d864 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d86c:	bf00      	nop
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d886:	0f9b      	lsrs	r3, r3, #30
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d892:	0e9b      	lsrs	r3, r3, #26
 800d894:	b2db      	uxtb	r3, r3
 800d896:	f003 030f 	and.w	r3, r3, #15
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8a4:	0e1b      	lsrs	r3, r3, #24
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f003 0303 	and.w	r3, r3, #3
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8b6:	0c1b      	lsrs	r3, r3, #16
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8c2:	0a1b      	lsrs	r3, r3, #8
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8d8:	0d1b      	lsrs	r3, r3, #20
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e4:	0c1b      	lsrs	r3, r3, #16
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	f003 030f 	and.w	r3, r3, #15
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f6:	0bdb      	lsrs	r3, r3, #15
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	f003 0301 	and.w	r3, r3, #1
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d908:	0b9b      	lsrs	r3, r3, #14
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	b2da      	uxtb	r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d91a:	0b5b      	lsrs	r3, r3, #13
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 0301 	and.w	r3, r3, #1
 800d922:	b2da      	uxtb	r2, r3
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d92c:	0b1b      	lsrs	r3, r3, #12
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	b2da      	uxtb	r2, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2200      	movs	r2, #0
 800d93e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d163      	bne.n	800da10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d94c:	009a      	lsls	r2, r3, #2
 800d94e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d952:	4013      	ands	r3, r2
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d958:	0f92      	lsrs	r2, r2, #30
 800d95a:	431a      	orrs	r2, r3
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d964:	0edb      	lsrs	r3, r3, #27
 800d966:	b2db      	uxtb	r3, r3
 800d968:	f003 0307 	and.w	r3, r3, #7
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d976:	0e1b      	lsrs	r3, r3, #24
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 0307 	and.w	r3, r3, #7
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d988:	0d5b      	lsrs	r3, r3, #21
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 0307 	and.w	r3, r3, #7
 800d990:	b2da      	uxtb	r2, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d99a:	0c9b      	lsrs	r3, r3, #18
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	f003 0307 	and.w	r3, r3, #7
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ac:	0bdb      	lsrs	r3, r3, #15
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 0307 	and.w	r3, r3, #7
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	7e1b      	ldrb	r3, [r3, #24]
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	f003 0307 	and.w	r3, r3, #7
 800d9ce:	3302      	adds	r3, #2
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d9da:	fb03 f202 	mul.w	r2, r3, r2
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	7a1b      	ldrb	r3, [r3, #8]
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	f003 030f 	and.w	r3, r3, #15
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	409a      	lsls	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d9fc:	0a52      	lsrs	r2, r2, #9
 800d9fe:	fb03 f202 	mul.w	r2, r3, r2
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da0c:	659a      	str	r2, [r3, #88]	; 0x58
 800da0e:	e031      	b.n	800da74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da14:	2b01      	cmp	r3, #1
 800da16:	d11d      	bne.n	800da54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da1c:	041b      	lsls	r3, r3, #16
 800da1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da26:	0c1b      	lsrs	r3, r3, #16
 800da28:	431a      	orrs	r2, r3
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	3301      	adds	r3, #1
 800da34:	029a      	lsls	r2, r3, #10
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da48:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	659a      	str	r2, [r3, #88]	; 0x58
 800da52:	e00f      	b.n	800da74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a58      	ldr	r2, [pc, #352]	; (800dbbc <HAL_SD_GetCardCSD+0x344>)
 800da5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	e09d      	b.n	800dbb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da78:	0b9b      	lsrs	r3, r3, #14
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	f003 0301 	and.w	r3, r3, #1
 800da80:	b2da      	uxtb	r2, r3
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da8a:	09db      	lsrs	r3, r3, #7
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da92:	b2da      	uxtb	r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daac:	0fdb      	lsrs	r3, r3, #31
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab8:	0f5b      	lsrs	r3, r3, #29
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	f003 0303 	and.w	r3, r3, #3
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daca:	0e9b      	lsrs	r3, r3, #26
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0307 	and.w	r3, r3, #7
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dadc:	0d9b      	lsrs	r3, r3, #22
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	f003 030f 	and.w	r3, r3, #15
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daee:	0d5b      	lsrs	r3, r3, #21
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db0a:	0c1b      	lsrs	r3, r3, #16
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	b2da      	uxtb	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db1e:	0bdb      	lsrs	r3, r3, #15
 800db20:	b2db      	uxtb	r3, r3
 800db22:	f003 0301 	and.w	r3, r3, #1
 800db26:	b2da      	uxtb	r2, r3
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db32:	0b9b      	lsrs	r3, r3, #14
 800db34:	b2db      	uxtb	r3, r3
 800db36:	f003 0301 	and.w	r3, r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db46:	0b5b      	lsrs	r3, r3, #13
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db5a:	0b1b      	lsrs	r3, r3, #12
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	f003 0301 	and.w	r3, r3, #1
 800db62:	b2da      	uxtb	r2, r3
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db6e:	0a9b      	lsrs	r3, r3, #10
 800db70:	b2db      	uxtb	r3, r3
 800db72:	f003 0303 	and.w	r3, r3, #3
 800db76:	b2da      	uxtb	r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db82:	0a1b      	lsrs	r3, r3, #8
 800db84:	b2db      	uxtb	r3, r3
 800db86:	f003 0303 	and.w	r3, r3, #3
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db96:	085b      	lsrs	r3, r3, #1
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	1fe00fff 	.word	0x1fe00fff

0800dbc0 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b094      	sub	sp, #80	; 0x50
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dbd0:	f107 0308 	add.w	r3, r7, #8
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fbd4 	bl	800e384 <SD_SendSDStatus>
 800dbdc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d011      	beq.n	800dc08 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a4f      	ldr	r2, [pc, #316]	; (800dd28 <HAL_SD_GetCardStatus+0x168>)
 800dbea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbf2:	431a      	orrs	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dc06:	e070      	b.n	800dcea <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	099b      	lsrs	r3, r3, #6
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	f003 0303 	and.w	r3, r3, #3
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	095b      	lsrs	r3, r3, #5
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	f003 0301 	and.w	r3, r3, #1
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	0a1b      	lsrs	r3, r3, #8
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc32:	b29a      	uxth	r2, r3
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	0e1b      	lsrs	r3, r3, #24
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	b29a      	uxth	r2, r3
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	061a      	lsls	r2, r3, #24
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	021b      	lsls	r3, r3, #8
 800dc4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc4e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	0a1b      	lsrs	r3, r3, #8
 800dc54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc58:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	0e1b      	lsrs	r3, r3, #24
 800dc5e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	b2da      	uxtb	r2, r3
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	0a1b      	lsrs	r3, r3, #8
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	0d1b      	lsrs	r3, r3, #20
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	f003 030f 	and.w	r3, r3, #15
 800dc80:	b2da      	uxtb	r2, r3
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	0c1b      	lsrs	r3, r3, #16
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	0a9b      	lsrs	r3, r3, #10
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	0a1b      	lsrs	r3, r3, #8
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	f003 0303 	and.w	r3, r3, #3
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	091b      	lsrs	r3, r3, #4
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	f003 030f 	and.w	r3, r3, #15
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	f003 030f 	and.w	r3, r3, #15
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	0e1b      	lsrs	r3, r3, #24
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f004 fbd4 	bl	80124a0 <SDMMC_CmdBlockLength>
 800dcf8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00d      	beq.n	800dd1c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a08      	ldr	r2, [pc, #32]	; (800dd28 <HAL_SD_GetCardStatus+0x168>)
 800dd06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2201      	movs	r2, #1
 800dd12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dd16:	2301      	movs	r3, #1
 800dd18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800dd1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3750      	adds	r7, #80	; 0x50
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	1fe00fff 	.word	0x1fe00fff

0800dd2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd84:	b5b0      	push	{r4, r5, r7, lr}
 800dd86:	b090      	sub	sp, #64	; 0x40
 800dd88:	af04      	add	r7, sp, #16
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2203      	movs	r2, #3
 800dd98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda0:	2b03      	cmp	r3, #3
 800dda2:	d02e      	beq.n	800de02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddaa:	d106      	bne.n	800ddba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	639a      	str	r2, [r3, #56]	; 0x38
 800ddb8:	e029      	b.n	800de0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddc0:	d10a      	bne.n	800ddd8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fbd6 	bl	800e574 <SD_WideBus_Enable>
 800ddc8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd0:	431a      	orrs	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	639a      	str	r2, [r3, #56]	; 0x38
 800ddd6:	e01a      	b.n	800de0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10a      	bne.n	800ddf4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 fc13 	bl	800e60a <SD_WideBus_Disable>
 800dde4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddec:	431a      	orrs	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	639a      	str	r2, [r3, #56]	; 0x38
 800ddf2:	e00c      	b.n	800de0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	639a      	str	r2, [r3, #56]	; 0x38
 800de00:	e005      	b.n	800de0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de12:	2b00      	cmp	r3, #0
 800de14:	d007      	beq.n	800de26 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a60      	ldr	r2, [pc, #384]	; (800df9c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de1e:	2301      	movs	r3, #1
 800de20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800de24:	e097      	b.n	800df56 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800de26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800de2a:	f7fd fed1 	bl	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq>
 800de2e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	2b00      	cmp	r3, #0
 800de34:	f000 8086 	beq.w	800df44 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	695a      	ldr	r2, [r3, #20]
 800de52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de54:	4952      	ldr	r1, [pc, #328]	; (800dfa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de56:	fba1 1303 	umull	r1, r3, r1, r3
 800de5a:	0e1b      	lsrs	r3, r3, #24
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d303      	bcc.n	800de68 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	61fb      	str	r3, [r7, #28]
 800de66:	e05a      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de70:	d103      	bne.n	800de7a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	61fb      	str	r3, [r7, #28]
 800de78:	e051      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de82:	d126      	bne.n	800ded2 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d10e      	bne.n	800deaa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800de8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8e:	4a45      	ldr	r2, [pc, #276]	; (800dfa4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d906      	bls.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	4a42      	ldr	r2, [pc, #264]	; (800dfa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de98:	fba2 2303 	umull	r2, r3, r2, r3
 800de9c:	0e5b      	lsrs	r3, r3, #25
 800de9e:	61fb      	str	r3, [r7, #28]
 800dea0:	e03d      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	61fb      	str	r3, [r7, #28]
 800dea8:	e039      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800deb6:	4a3b      	ldr	r2, [pc, #236]	; (800dfa4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d906      	bls.n	800deca <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	4a38      	ldr	r2, [pc, #224]	; (800dfa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dec0:	fba2 2303 	umull	r2, r3, r2, r3
 800dec4:	0e5b      	lsrs	r3, r3, #25
 800dec6:	61fb      	str	r3, [r7, #28]
 800dec8:	e029      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	695b      	ldr	r3, [r3, #20]
 800dece:	61fb      	str	r3, [r7, #28]
 800ded0:	e025      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10e      	bne.n	800def8 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800deda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dedc:	4a32      	ldr	r2, [pc, #200]	; (800dfa8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d906      	bls.n	800def0 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee4:	4a2e      	ldr	r2, [pc, #184]	; (800dfa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dee6:	fba2 2303 	umull	r2, r3, r2, r3
 800deea:	0e1b      	lsrs	r3, r3, #24
 800deec:	61fb      	str	r3, [r7, #28]
 800deee:	e016      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	695b      	ldr	r3, [r3, #20]
 800def4:	61fb      	str	r3, [r7, #28]
 800def6:	e012      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	695b      	ldr	r3, [r3, #20]
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df00:	fbb2 f3f3 	udiv	r3, r2, r3
 800df04:	4a28      	ldr	r2, [pc, #160]	; (800dfa8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d906      	bls.n	800df18 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	4a24      	ldr	r2, [pc, #144]	; (800dfa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800df0e:	fba2 2303 	umull	r2, r3, r2, r3
 800df12:	0e1b      	lsrs	r3, r3, #24
 800df14:	61fb      	str	r3, [r7, #28]
 800df16:	e002      	b.n	800df1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	695b      	ldr	r3, [r3, #20]
 800df1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	699b      	ldr	r3, [r3, #24]
 800df22:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681d      	ldr	r5, [r3, #0]
 800df28:	466c      	mov	r4, sp
 800df2a:	f107 0318 	add.w	r3, r7, #24
 800df2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df36:	f107 030c 	add.w	r3, r7, #12
 800df3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df3c:	4628      	mov	r0, r5
 800df3e:	f004 f9d1 	bl	80122e4 <SDMMC_Init>
 800df42:	e008      	b.n	800df56 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800df50:	2301      	movs	r3, #1
 800df52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df5e:	4618      	mov	r0, r3
 800df60:	f004 fa9e 	bl	80124a0 <SDMMC_CmdBlockLength>
 800df64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00c      	beq.n	800df86 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a0a      	ldr	r2, [pc, #40]	; (800df9c <HAL_SD_ConfigWideBusOperation+0x218>)
 800df72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	431a      	orrs	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800df8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df92:	4618      	mov	r0, r3
 800df94:	3730      	adds	r7, #48	; 0x30
 800df96:	46bd      	mov	sp, r7
 800df98:	bdb0      	pop	{r4, r5, r7, pc}
 800df9a:	bf00      	nop
 800df9c:	1fe00fff 	.word	0x1fe00fff
 800dfa0:	55e63b89 	.word	0x55e63b89
 800dfa4:	02faf080 	.word	0x02faf080
 800dfa8:	017d7840 	.word	0x017d7840

0800dfac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfb8:	f107 030c 	add.w	r3, r7, #12
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 fab0 	bl	800e524 <SD_SendStatus>
 800dfc4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	431a      	orrs	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	0a5b      	lsrs	r3, r3, #9
 800dfdc:	f003 030f 	and.w	r3, r3, #15
 800dfe0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfe2:	693b      	ldr	r3, [r7, #16]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3718      	adds	r7, #24
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfec:	b5b0      	push	{r4, r5, r7, lr}
 800dfee:	b090      	sub	sp, #64	; 0x40
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dff4:	2301      	movs	r3, #1
 800dff6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f004 f9cb 	bl	8012398 <SDMMC_GetPowerState>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d102      	bne.n	800e00e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e008:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e00c:	e0a9      	b.n	800e162 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e012:	2b03      	cmp	r3, #3
 800e014:	d02e      	beq.n	800e074 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f004 fc10 	bl	8012840 <SDMMC_CmdSendCID>
 800e020:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d001      	beq.n	800e02c <SD_InitCard+0x40>
    {
      return errorstate;
 800e028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02a:	e09a      	b.n	800e162 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2100      	movs	r1, #0
 800e032:	4618      	mov	r0, r3
 800e034:	f004 f9f5 	bl	8012422 <SDMMC_GetResponse>
 800e038:	4602      	mov	r2, r0
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2104      	movs	r1, #4
 800e044:	4618      	mov	r0, r3
 800e046:	f004 f9ec 	bl	8012422 <SDMMC_GetResponse>
 800e04a:	4602      	mov	r2, r0
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2108      	movs	r1, #8
 800e056:	4618      	mov	r0, r3
 800e058:	f004 f9e3 	bl	8012422 <SDMMC_GetResponse>
 800e05c:	4602      	mov	r2, r0
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	210c      	movs	r1, #12
 800e068:	4618      	mov	r0, r3
 800e06a:	f004 f9da 	bl	8012422 <SDMMC_GetResponse>
 800e06e:	4602      	mov	r2, r0
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e078:	2b03      	cmp	r3, #3
 800e07a:	d00d      	beq.n	800e098 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f107 020e 	add.w	r2, r7, #14
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f004 fc19 	bl	80128be <SDMMC_CmdSetRelAdd>
 800e08c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <SD_InitCard+0xac>
    {
      return errorstate;
 800e094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e096:	e064      	b.n	800e162 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	d036      	beq.n	800e10e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0a0:	89fb      	ldrh	r3, [r7, #14]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0b0:	041b      	lsls	r3, r3, #16
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	f004 fbe2 	bl	801287e <SDMMC_CmdSendCSD>
 800e0ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <SD_InitCard+0xda>
    {
      return errorstate;
 800e0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c4:	e04d      	b.n	800e162 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f004 f9a8 	bl	8012422 <SDMMC_GetResponse>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2104      	movs	r1, #4
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f004 f99f 	bl	8012422 <SDMMC_GetResponse>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2108      	movs	r1, #8
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f004 f996 	bl	8012422 <SDMMC_GetResponse>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	210c      	movs	r1, #12
 800e102:	4618      	mov	r0, r3
 800e104:	f004 f98d 	bl	8012422 <SDMMC_GetResponse>
 800e108:	4602      	mov	r2, r0
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2104      	movs	r1, #4
 800e114:	4618      	mov	r0, r3
 800e116:	f004 f984 	bl	8012422 <SDMMC_GetResponse>
 800e11a:	4603      	mov	r3, r0
 800e11c:	0d1a      	lsrs	r2, r3, #20
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e122:	f107 0310 	add.w	r3, r7, #16
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7ff fba5 	bl	800d878 <HAL_SD_GetCardCSD>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e138:	e013      	b.n	800e162 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6819      	ldr	r1, [r3, #0]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e142:	041b      	lsls	r3, r3, #16
 800e144:	2200      	movs	r2, #0
 800e146:	461c      	mov	r4, r3
 800e148:	4615      	mov	r5, r2
 800e14a:	4622      	mov	r2, r4
 800e14c:	462b      	mov	r3, r5
 800e14e:	4608      	mov	r0, r1
 800e150:	f004 fa8c 	bl	801266c <SDMMC_CmdSelDesel>
 800e154:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <SD_InitCard+0x174>
  {
    return errorstate;
 800e15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15e:	e000      	b.n	800e162 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3740      	adds	r7, #64	; 0x40
 800e166:	46bd      	mov	sp, r7
 800e168:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e16c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b088      	sub	sp, #32
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	61fb      	str	r3, [r7, #28]
 800e17c:	2300      	movs	r3, #0
 800e17e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800e180:	f7f8 ff32 	bl	8006fe8 <HAL_GetTick>
 800e184:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f004 fa92 	bl	80126b4 <SDMMC_CmdGoIdleState>
 800e190:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <SD_PowerON+0x30>
  {
    return errorstate;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	e0ed      	b.n	800e378 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f004 faa5 	bl	80126f0 <SDMMC_CmdOperCond>
 800e1a6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00d      	beq.n	800e1ca <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f004 fa7b 	bl	80126b4 <SDMMC_CmdGoIdleState>
 800e1be:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d004      	beq.n	800e1d0 <SD_PowerON+0x64>
    {
      return errorstate;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	e0d6      	b.n	800e378 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d137      	bne.n	800e248 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2100      	movs	r1, #0
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f004 faa6 	bl	8012730 <SDMMC_CmdAppCommand>
 800e1e4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d02d      	beq.n	800e248 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1f0:	e0c2      	b.n	800e378 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f004 fa99 	bl	8012730 <SDMMC_CmdAppCommand>
 800e1fe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <SD_PowerON+0x9e>
    {
      return errorstate;
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	e0b6      	b.n	800e378 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	495c      	ldr	r1, [pc, #368]	; (800e380 <SD_PowerON+0x214>)
 800e210:	4618      	mov	r0, r3
 800e212:	f004 fab0 	bl	8012776 <SDMMC_CmdAppOperCommand>
 800e216:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e21e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e222:	e0a9      	b.n	800e378 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2100      	movs	r1, #0
 800e22a:	4618      	mov	r0, r3
 800e22c:	f004 f8f9 	bl	8012422 <SDMMC_GetResponse>
 800e230:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	0fdb      	lsrs	r3, r3, #31
 800e236:	2b01      	cmp	r3, #1
 800e238:	d101      	bne.n	800e23e <SD_PowerON+0xd2>
 800e23a:	2301      	movs	r3, #1
 800e23c:	e000      	b.n	800e240 <SD_PowerON+0xd4>
 800e23e:	2300      	movs	r3, #0
 800e240:	61bb      	str	r3, [r7, #24]

    count++;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3301      	adds	r3, #1
 800e246:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e24e:	4293      	cmp	r3, r2
 800e250:	d802      	bhi.n	800e258 <SD_PowerON+0xec>
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d0cc      	beq.n	800e1f2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e25e:	4293      	cmp	r3, r2
 800e260:	d902      	bls.n	800e268 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e266:	e087      	b.n	800e378 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d07e      	beq.n	800e370 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2201      	movs	r2, #1
 800e276:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d17a      	bne.n	800e376 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e286:	2b00      	cmp	r3, #0
 800e288:	d075      	beq.n	800e376 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e290:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f042 0208 	orr.w	r2, r2, #8
 800e2a0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f004 fb70 	bl	801298c <SDMMC_CmdVoltageSwitch>
 800e2ac:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00c      	beq.n	800e2ce <SD_PowerON+0x162>
        {
          return errorstate;
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	e05f      	b.n	800e378 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2b8:	f7f8 fe96 	bl	8006fe8 <HAL_GetTick>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2c6:	d102      	bne.n	800e2ce <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e2c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2cc:	e054      	b.n	800e378 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e2dc:	d1ec      	bne.n	800e2b8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e2e6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2f6:	d002      	beq.n	800e2fe <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e2f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2fc:	e03c      	b.n	800e378 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800e2fe:	2001      	movs	r0, #1
 800e300:	f000 fb44 	bl	800e98c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f042 0204 	orr.w	r2, r2, #4
 800e312:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e314:	e00a      	b.n	800e32c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e316:	f7f8 fe67 	bl	8006fe8 <HAL_GetTick>
 800e31a:	4602      	mov	r2, r0
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e324:	d102      	bne.n	800e32c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e326:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e32a:	e025      	b.n	800e378 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e33a:	d1ec      	bne.n	800e316 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e344:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e354:	d102      	bne.n	800e35c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e35a:	e00d      	b.n	800e378 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2213      	movs	r2, #19
 800e362:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e36c:	639a      	str	r2, [r3, #56]	; 0x38
 800e36e:	e002      	b.n	800e376 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3720      	adds	r7, #32
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	c1100000 	.word	0xc1100000

0800e384 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08c      	sub	sp, #48	; 0x30
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e38e:	f7f8 fe2b 	bl	8006fe8 <HAL_GetTick>
 800e392:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2100      	movs	r1, #0
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f004 f83f 	bl	8012422 <SDMMC_GetResponse>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3ae:	d102      	bne.n	800e3b6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3b4:	e0b0      	b.n	800e518 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2140      	movs	r1, #64	; 0x40
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f004 f86f 	bl	80124a0 <SDMMC_CmdBlockLength>
 800e3c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3c4:	6a3b      	ldr	r3, [r7, #32]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d005      	beq.n	800e3d6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	e0a0      	b.n	800e518 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3de:	041b      	lsls	r3, r3, #16
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f004 f9a4 	bl	8012730 <SDMMC_CmdAppCommand>
 800e3e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3ea:	6a3b      	ldr	r3, [r7, #32]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3f8:	6a3b      	ldr	r3, [r7, #32]
 800e3fa:	e08d      	b.n	800e518 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e400:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e402:	2340      	movs	r3, #64	; 0x40
 800e404:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e406:	2360      	movs	r3, #96	; 0x60
 800e408:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e40a:	2302      	movs	r3, #2
 800e40c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e40e:	2300      	movs	r3, #0
 800e410:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e412:	2301      	movs	r3, #1
 800e414:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f107 0208 	add.w	r2, r7, #8
 800e41e:	4611      	mov	r1, r2
 800e420:	4618      	mov	r0, r3
 800e422:	f004 f811 	bl	8012448 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f004 fa8c 	bl	8012948 <SDMMC_CmdStatusRegister>
 800e430:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d02b      	beq.n	800e490 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	e069      	b.n	800e518 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d013      	beq.n	800e47a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e452:	2300      	movs	r3, #0
 800e454:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e456:	e00d      	b.n	800e474 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f003 ff6b 	bl	8012338 <SDMMC_ReadFIFO>
 800e462:	4602      	mov	r2, r0
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	601a      	str	r2, [r3, #0]
        pData++;
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	3304      	adds	r3, #4
 800e46c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	3301      	adds	r3, #1
 800e472:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e476:	2b07      	cmp	r3, #7
 800e478:	d9ee      	bls.n	800e458 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e47a:	f7f8 fdb5 	bl	8006fe8 <HAL_GetTick>
 800e47e:	4602      	mov	r2, r0
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	1ad3      	subs	r3, r2, r3
 800e484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e488:	d102      	bne.n	800e490 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e48a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e48e:	e043      	b.n	800e518 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e496:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d0d2      	beq.n	800e444 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a4:	f003 0308 	and.w	r3, r3, #8
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d001      	beq.n	800e4b0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e4ac:	2308      	movs	r3, #8
 800e4ae:	e033      	b.n	800e518 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b6:	f003 0302 	and.w	r3, r3, #2
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e4be:	2302      	movs	r3, #2
 800e4c0:	e02a      	b.n	800e518 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c8:	f003 0320 	and.w	r3, r3, #32
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d017      	beq.n	800e500 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e4d0:	2320      	movs	r3, #32
 800e4d2:	e021      	b.n	800e518 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f003 ff2d 	bl	8012338 <SDMMC_ReadFIFO>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	601a      	str	r2, [r3, #0]
    pData++;
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4ea:	f7f8 fd7d 	bl	8006fe8 <HAL_GetTick>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4f8:	d102      	bne.n	800e500 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4fe:	e00b      	b.n	800e518 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1e2      	bne.n	800e4d4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a03      	ldr	r2, [pc, #12]	; (800e520 <SD_SendSDStatus+0x19c>)
 800e514:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e516:	2300      	movs	r3, #0
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3730      	adds	r7, #48	; 0x30
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	18000f3a 	.word	0x18000f3a

0800e524 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d102      	bne.n	800e53a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e534:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e538:	e018      	b.n	800e56c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e542:	041b      	lsls	r3, r3, #16
 800e544:	4619      	mov	r1, r3
 800e546:	4610      	mov	r0, r2
 800e548:	f004 f9db 	bl	8012902 <SDMMC_CmdSendStatus>
 800e54c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	e009      	b.n	800e56c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2100      	movs	r1, #0
 800e55e:	4618      	mov	r0, r3
 800e560:	f003 ff5f 	bl	8012422 <SDMMC_GetResponse>
 800e564:	4602      	mov	r2, r0
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e57c:	2300      	movs	r3, #0
 800e57e:	60fb      	str	r3, [r7, #12]
 800e580:	2300      	movs	r3, #0
 800e582:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2100      	movs	r1, #0
 800e58a:	4618      	mov	r0, r3
 800e58c:	f003 ff49 	bl	8012422 <SDMMC_GetResponse>
 800e590:	4603      	mov	r3, r0
 800e592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e59a:	d102      	bne.n	800e5a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e59c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5a0:	e02f      	b.n	800e602 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e5a2:	f107 030c 	add.w	r3, r7, #12
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 f879 	bl	800e6a0 <SD_FindSCR>
 800e5ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	e023      	b.n	800e602 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d01c      	beq.n	800e5fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5cc:	041b      	lsls	r3, r3, #16
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f004 f8ad 	bl	8012730 <SDMMC_CmdAppCommand>
 800e5d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	e00f      	b.n	800e602 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2102      	movs	r1, #2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f004 f8e4 	bl	80127b6 <SDMMC_CmdBusWidth>
 800e5ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	e003      	b.n	800e602 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e001      	b.n	800e602 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e602:	4618      	mov	r0, r3
 800e604:	3718      	adds	r7, #24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b086      	sub	sp, #24
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e612:	2300      	movs	r3, #0
 800e614:	60fb      	str	r3, [r7, #12]
 800e616:	2300      	movs	r3, #0
 800e618:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2100      	movs	r1, #0
 800e620:	4618      	mov	r0, r3
 800e622:	f003 fefe 	bl	8012422 <SDMMC_GetResponse>
 800e626:	4603      	mov	r3, r0
 800e628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e62c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e630:	d102      	bne.n	800e638 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e636:	e02f      	b.n	800e698 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e638:	f107 030c 	add.w	r3, r7, #12
 800e63c:	4619      	mov	r1, r3
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f82e 	bl	800e6a0 <SD_FindSCR>
 800e644:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	e023      	b.n	800e698 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e656:	2b00      	cmp	r3, #0
 800e658:	d01c      	beq.n	800e694 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e662:	041b      	lsls	r3, r3, #16
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f004 f862 	bl	8012730 <SDMMC_CmdAppCommand>
 800e66c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d001      	beq.n	800e678 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	e00f      	b.n	800e698 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2100      	movs	r1, #0
 800e67e:	4618      	mov	r0, r3
 800e680:	f004 f899 	bl	80127b6 <SDMMC_CmdBusWidth>
 800e684:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	e003      	b.n	800e698 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e690:	2300      	movs	r3, #0
 800e692:	e001      	b.n	800e698 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e694:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b08e      	sub	sp, #56	; 0x38
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e6aa:	f7f8 fc9d 	bl	8006fe8 <HAL_GetTick>
 800e6ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60bb      	str	r3, [r7, #8]
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2108      	movs	r1, #8
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f003 feea 	bl	80124a0 <SDMMC_CmdBlockLength>
 800e6cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d6:	e0ad      	b.n	800e834 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e0:	041b      	lsls	r3, r3, #16
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	f004 f823 	bl	8012730 <SDMMC_CmdAppCommand>
 800e6ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f4:	e09e      	b.n	800e834 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e6fc:	2308      	movs	r3, #8
 800e6fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e700:	2330      	movs	r3, #48	; 0x30
 800e702:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e704:	2302      	movs	r3, #2
 800e706:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e708:	2300      	movs	r3, #0
 800e70a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e70c:	2301      	movs	r3, #1
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f107 0210 	add.w	r2, r7, #16
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f003 fe94 	bl	8012448 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4618      	mov	r0, r3
 800e726:	f004 f869 	bl	80127fc <SDMMC_CmdSendSCR>
 800e72a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d027      	beq.n	800e782 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	e07e      	b.n	800e834 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e73c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e740:	2b00      	cmp	r3, #0
 800e742:	d113      	bne.n	800e76c <SD_FindSCR+0xcc>
 800e744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e746:	2b00      	cmp	r3, #0
 800e748:	d110      	bne.n	800e76c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4618      	mov	r0, r3
 800e750:	f003 fdf2 	bl	8012338 <SDMMC_ReadFIFO>
 800e754:	4603      	mov	r3, r0
 800e756:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f003 fdeb 	bl	8012338 <SDMMC_ReadFIFO>
 800e762:	4603      	mov	r3, r0
 800e764:	60fb      	str	r3, [r7, #12]
      index++;
 800e766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e768:	3301      	adds	r3, #1
 800e76a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e76c:	f7f8 fc3c 	bl	8006fe8 <HAL_GetTick>
 800e770:	4602      	mov	r2, r0
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e77a:	d102      	bne.n	800e782 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e77c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e780:	e058      	b.n	800e834 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e788:	f240 532a 	movw	r3, #1322	; 0x52a
 800e78c:	4013      	ands	r3, r2
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d0d1      	beq.n	800e736 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e798:	f003 0308 	and.w	r3, r3, #8
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d005      	beq.n	800e7ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2208      	movs	r2, #8
 800e7a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e7a8:	2308      	movs	r3, #8
 800e7aa:	e043      	b.n	800e834 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b2:	f003 0302 	and.w	r3, r3, #2
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d005      	beq.n	800e7c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2202      	movs	r2, #2
 800e7c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e7c2:	2302      	movs	r3, #2
 800e7c4:	e036      	b.n	800e834 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7cc:	f003 0320 	and.w	r3, r3, #32
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d005      	beq.n	800e7e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2220      	movs	r2, #32
 800e7da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e7dc:	2320      	movs	r3, #32
 800e7de:	e029      	b.n	800e834 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a15      	ldr	r2, [pc, #84]	; (800e83c <SD_FindSCR+0x19c>)
 800e7e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	061a      	lsls	r2, r3, #24
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	021b      	lsls	r3, r3, #8
 800e7f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	0a1b      	lsrs	r3, r3, #8
 800e7fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	0e1b      	lsrs	r3, r3, #24
 800e804:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e808:	601a      	str	r2, [r3, #0]
    scr++;
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80c:	3304      	adds	r3, #4
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	061a      	lsls	r2, r3, #24
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	021b      	lsls	r3, r3, #8
 800e818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e81c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	0a1b      	lsrs	r3, r3, #8
 800e822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e826:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	0e1b      	lsrs	r3, r3, #24
 800e82c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e830:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3738      	adds	r7, #56	; 0x38
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	18000f3a 	.word	0x18000f3a

0800e840 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e84c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e852:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d03f      	beq.n	800e8da <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e85a:	2300      	movs	r3, #0
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e033      	b.n	800e8c8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4618      	mov	r0, r3
 800e866:	f003 fd67 	bl	8012338 <SDMMC_ReadFIFO>
 800e86a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	3301      	adds	r3, #1
 800e878:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	3b01      	subs	r3, #1
 800e87e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	0a1b      	lsrs	r3, r3, #8
 800e884:	b2da      	uxtb	r2, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	3301      	adds	r3, #1
 800e88e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	3b01      	subs	r3, #1
 800e894:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	0c1b      	lsrs	r3, r3, #16
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	0e1b      	lsrs	r3, r3, #24
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	617b      	str	r3, [r7, #20]
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	2b07      	cmp	r3, #7
 800e8cc:	d9c8      	bls.n	800e860 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e8da:	bf00      	nop
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b086      	sub	sp, #24
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6a1b      	ldr	r3, [r3, #32]
 800e8ee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d043      	beq.n	800e984 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	617b      	str	r3, [r7, #20]
 800e900:	e037      	b.n	800e972 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	3301      	adds	r3, #1
 800e90c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	3b01      	subs	r3, #1
 800e912:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	021a      	lsls	r2, r3, #8
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	4313      	orrs	r3, r2
 800e91e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	3301      	adds	r3, #1
 800e924:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	3b01      	subs	r3, #1
 800e92a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	041a      	lsls	r2, r3, #16
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	4313      	orrs	r3, r2
 800e936:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	3301      	adds	r3, #1
 800e93c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	3b01      	subs	r3, #1
 800e942:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	061a      	lsls	r2, r3, #24
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	4313      	orrs	r3, r2
 800e94e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3301      	adds	r3, #1
 800e954:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	3b01      	subs	r3, #1
 800e95a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f107 0208 	add.w	r2, r7, #8
 800e964:	4611      	mov	r1, r2
 800e966:	4618      	mov	r0, r3
 800e968:	f003 fcf3 	bl	8012352 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	3301      	adds	r3, #1
 800e970:	617b      	str	r3, [r7, #20]
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2b07      	cmp	r3, #7
 800e976:	d9c4      	bls.n	800e902 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	693a      	ldr	r2, [r7, #16]
 800e982:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e984:	bf00      	nop
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	4603      	mov	r3, r0
 800e994:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800e996:	bf00      	nop
 800e998:	370c      	adds	r7, #12
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr

0800e9a2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e9a2:	b480      	push	{r7}
 800e9a4:	b083      	sub	sp, #12
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800e9aa:	bf00      	nop
 800e9ac:	370c      	adds	r7, #12
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr

0800e9b6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e9b6:	b480      	push	{r7}
 800e9b8:	b083      	sub	sp, #12
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800e9be:	bf00      	nop
 800e9c0:	370c      	adds	r7, #12
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e9ca:	b480      	push	{r7}
 800e9cc:	b083      	sub	sp, #12
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800e9d2:	bf00      	nop
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr

0800e9de <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e9de:	b480      	push	{r7}
 800e9e0:	b083      	sub	sp, #12
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800e9e6:	bf00      	nop
 800e9e8:	370c      	adds	r7, #12
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b084      	sub	sp, #16
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d101      	bne.n	800ea04 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	e095      	b.n	800eb30 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d108      	bne.n	800ea1e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea14:	d009      	beq.n	800ea2a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	61da      	str	r2, [r3, #28]
 800ea1c:	e005      	b.n	800ea2a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d106      	bne.n	800ea4a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7f6 fb3b 	bl	80050c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2202      	movs	r2, #2
 800ea4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ea6a:	d902      	bls.n	800ea72 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	60fb      	str	r3, [r7, #12]
 800ea70:	e002      	b.n	800ea78 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ea72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ea80:	d007      	beq.n	800ea92 <HAL_SPI_Init+0xa0>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ea8a:	d002      	beq.n	800ea92 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800eaa2:	431a      	orrs	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	f003 0302 	and.w	r3, r3, #2
 800eaac:	431a      	orrs	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	695b      	ldr	r3, [r3, #20]
 800eab2:	f003 0301 	and.w	r3, r3, #1
 800eab6:	431a      	orrs	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eac0:	431a      	orrs	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	69db      	ldr	r3, [r3, #28]
 800eac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eaca:	431a      	orrs	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a1b      	ldr	r3, [r3, #32]
 800ead0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead4:	ea42 0103 	orr.w	r1, r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eadc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	430a      	orrs	r2, r1
 800eae6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	0c1b      	lsrs	r3, r3, #16
 800eaee:	f003 0204 	and.w	r2, r3, #4
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf6:	f003 0310 	and.w	r3, r3, #16
 800eafa:	431a      	orrs	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb00:	f003 0308 	and.w	r3, r3, #8
 800eb04:	431a      	orrs	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800eb0e:	ea42 0103 	orr.w	r1, r2, r3
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	430a      	orrs	r2, r1
 800eb1e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2201      	movs	r2, #1
 800eb2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	4613      	mov	r3, r2
 800eb46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d101      	bne.n	800eb5a <HAL_SPI_Transmit+0x22>
 800eb56:	2302      	movs	r3, #2
 800eb58:	e15f      	b.n	800ee1a <HAL_SPI_Transmit+0x2e2>
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb62:	f7f8 fa41 	bl	8006fe8 <HAL_GetTick>
 800eb66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800eb68:	88fb      	ldrh	r3, [r7, #6]
 800eb6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d002      	beq.n	800eb7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800eb78:	2302      	movs	r3, #2
 800eb7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eb7c:	e148      	b.n	800ee10 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d002      	beq.n	800eb8a <HAL_SPI_Transmit+0x52>
 800eb84:	88fb      	ldrh	r3, [r7, #6]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d102      	bne.n	800eb90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eb8e:	e13f      	b.n	800ee10 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2203      	movs	r2, #3
 800eb94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	88fa      	ldrh	r2, [r7, #6]
 800eba8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	88fa      	ldrh	r2, [r7, #6]
 800ebae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebda:	d10f      	bne.n	800ebfc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ebfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec06:	2b40      	cmp	r3, #64	; 0x40
 800ec08:	d007      	beq.n	800ec1a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec22:	d94f      	bls.n	800ecc4 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <HAL_SPI_Transmit+0xfa>
 800ec2c:	8afb      	ldrh	r3, [r7, #22]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d142      	bne.n	800ecb8 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec36:	881a      	ldrh	r2, [r3, #0]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec42:	1c9a      	adds	r2, r3, #2
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	3b01      	subs	r3, #1
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ec56:	e02f      	b.n	800ecb8 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	f003 0302 	and.w	r3, r3, #2
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d112      	bne.n	800ec8c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec6a:	881a      	ldrh	r2, [r3, #0]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec76:	1c9a      	adds	r2, r3, #2
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	3b01      	subs	r3, #1
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ec8a:	e015      	b.n	800ecb8 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec8c:	f7f8 f9ac 	bl	8006fe8 <HAL_GetTick>
 800ec90:	4602      	mov	r2, r0
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	683a      	ldr	r2, [r7, #0]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d803      	bhi.n	800eca4 <HAL_SPI_Transmit+0x16c>
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eca2:	d102      	bne.n	800ecaa <HAL_SPI_Transmit+0x172>
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d106      	bne.n	800ecb8 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ecb6:	e0ab      	b.n	800ee10 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d1ca      	bne.n	800ec58 <HAL_SPI_Transmit+0x120>
 800ecc2:	e080      	b.n	800edc6 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d002      	beq.n	800ecd2 <HAL_SPI_Transmit+0x19a>
 800eccc:	8afb      	ldrh	r3, [r7, #22]
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d174      	bne.n	800edbc <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d912      	bls.n	800ed02 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece0:	881a      	ldrh	r2, [r3, #0]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecec:	1c9a      	adds	r2, r3, #2
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	3b02      	subs	r3, #2
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ed00:	e05c      	b.n	800edbc <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	330c      	adds	r3, #12
 800ed0c:	7812      	ldrb	r2, [r2, #0]
 800ed0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed14:	1c5a      	adds	r2, r3, #1
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	3b01      	subs	r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ed28:	e048      	b.n	800edbc <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	f003 0302 	and.w	r3, r3, #2
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d12b      	bne.n	800ed90 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d912      	bls.n	800ed68 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed46:	881a      	ldrh	r2, [r3, #0]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed52:	1c9a      	adds	r2, r3, #2
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	3b02      	subs	r3, #2
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ed66:	e029      	b.n	800edbc <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	330c      	adds	r3, #12
 800ed72:	7812      	ldrb	r2, [r2, #0]
 800ed74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed7a:	1c5a      	adds	r2, r3, #1
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	3b01      	subs	r3, #1
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ed8e:	e015      	b.n	800edbc <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed90:	f7f8 f92a 	bl	8006fe8 <HAL_GetTick>
 800ed94:	4602      	mov	r2, r0
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	683a      	ldr	r2, [r7, #0]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d803      	bhi.n	800eda8 <HAL_SPI_Transmit+0x270>
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eda6:	d102      	bne.n	800edae <HAL_SPI_Transmit+0x276>
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d106      	bne.n	800edbc <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800edae:	2303      	movs	r3, #3
 800edb0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2201      	movs	r2, #1
 800edb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800edba:	e029      	b.n	800ee10 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1b1      	bne.n	800ed2a <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800edc6:	69ba      	ldr	r2, [r7, #24]
 800edc8:	6839      	ldr	r1, [r7, #0]
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f000 fe88 	bl	800fae0 <SPI_EndRxTxTransaction>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d002      	beq.n	800eddc <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2220      	movs	r2, #32
 800edda:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d10a      	bne.n	800edfa <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ede4:	2300      	movs	r3, #0
 800ede6:	613b      	str	r3, [r7, #16]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	613b      	str	r3, [r7, #16]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	613b      	str	r3, [r7, #16]
 800edf8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d002      	beq.n	800ee08 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800ee02:	2301      	movs	r3, #1
 800ee04:	77fb      	strb	r3, [r7, #31]
 800ee06:	e003      	b.n	800ee10 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2200      	movs	r2, #0
 800ee14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ee18:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b088      	sub	sp, #32
 800ee26:	af02      	add	r7, sp, #8
 800ee28:	60f8      	str	r0, [r7, #12]
 800ee2a:	60b9      	str	r1, [r7, #8]
 800ee2c:	603b      	str	r3, [r7, #0]
 800ee2e:	4613      	mov	r3, r2
 800ee30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d002      	beq.n	800ee48 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800ee42:	2302      	movs	r3, #2
 800ee44:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ee46:	e11a      	b.n	800f07e <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee50:	d112      	bne.n	800ee78 <HAL_SPI_Receive+0x56>
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d10e      	bne.n	800ee78 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2204      	movs	r2, #4
 800ee5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ee62:	88fa      	ldrh	r2, [r7, #6]
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	4613      	mov	r3, r2
 800ee6a:	68ba      	ldr	r2, [r7, #8]
 800ee6c:	68b9      	ldr	r1, [r7, #8]
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f000 f90e 	bl	800f090 <HAL_SPI_TransmitReceive>
 800ee74:	4603      	mov	r3, r0
 800ee76:	e107      	b.n	800f088 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d101      	bne.n	800ee86 <HAL_SPI_Receive+0x64>
 800ee82:	2302      	movs	r3, #2
 800ee84:	e100      	b.n	800f088 <HAL_SPI_Receive+0x266>
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee8e:	f7f8 f8ab 	bl	8006fe8 <HAL_GetTick>
 800ee92:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <HAL_SPI_Receive+0x7e>
 800ee9a:	88fb      	ldrh	r3, [r7, #6]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d102      	bne.n	800eea6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800eea0:	2301      	movs	r3, #1
 800eea2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eea4:	e0eb      	b.n	800f07e <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2204      	movs	r2, #4
 800eeaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	88fa      	ldrh	r2, [r7, #6]
 800eebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	88fa      	ldrh	r2, [r7, #6]
 800eec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2200      	movs	r2, #0
 800eece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2200      	movs	r2, #0
 800eeda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2200      	movs	r2, #0
 800eee0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800eef0:	d908      	bls.n	800ef04 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ef00:	605a      	str	r2, [r3, #4]
 800ef02:	e007      	b.n	800ef14 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	685a      	ldr	r2, [r3, #4]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef12:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef1c:	d10f      	bne.n	800ef3e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ef3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef48:	2b40      	cmp	r3, #64	; 0x40
 800ef4a:	d007      	beq.n	800ef5c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef64:	d86f      	bhi.n	800f046 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ef66:	e034      	b.n	800efd2 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d117      	bne.n	800efa6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f103 020c 	add.w	r2, r3, #12
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef82:	7812      	ldrb	r2, [r2, #0]
 800ef84:	b2d2      	uxtb	r2, r2
 800ef86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8c:	1c5a      	adds	r2, r3, #1
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800efa4:	e015      	b.n	800efd2 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efa6:	f7f8 f81f 	bl	8006fe8 <HAL_GetTick>
 800efaa:	4602      	mov	r2, r0
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d803      	bhi.n	800efbe <HAL_SPI_Receive+0x19c>
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efbc:	d102      	bne.n	800efc4 <HAL_SPI_Receive+0x1a2>
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d106      	bne.n	800efd2 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800efc4:	2303      	movs	r3, #3
 800efc6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2201      	movs	r2, #1
 800efcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800efd0:	e055      	b.n	800f07e <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800efd8:	b29b      	uxth	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1c4      	bne.n	800ef68 <HAL_SPI_Receive+0x146>
 800efde:	e038      	b.n	800f052 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	f003 0301 	and.w	r3, r3, #1
 800efea:	2b01      	cmp	r3, #1
 800efec:	d115      	bne.n	800f01a <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68da      	ldr	r2, [r3, #12]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff8:	b292      	uxth	r2, r2
 800effa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f000:	1c9a      	adds	r2, r3, #2
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	3b01      	subs	r3, #1
 800f010:	b29a      	uxth	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f018:	e015      	b.n	800f046 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f01a:	f7f7 ffe5 	bl	8006fe8 <HAL_GetTick>
 800f01e:	4602      	mov	r2, r0
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	1ad3      	subs	r3, r2, r3
 800f024:	683a      	ldr	r2, [r7, #0]
 800f026:	429a      	cmp	r2, r3
 800f028:	d803      	bhi.n	800f032 <HAL_SPI_Receive+0x210>
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f030:	d102      	bne.n	800f038 <HAL_SPI_Receive+0x216>
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d106      	bne.n	800f046 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800f038:	2303      	movs	r3, #3
 800f03a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f044:	e01b      	b.n	800f07e <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1c6      	bne.n	800efe0 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f052:	693a      	ldr	r2, [r7, #16]
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f000 fcea 	bl	800fa30 <SPI_EndRxTransaction>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d002      	beq.n	800f068 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2220      	movs	r2, #32
 800f066:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800f070:	2301      	movs	r3, #1
 800f072:	75fb      	strb	r3, [r7, #23]
 800f074:	e003      	b.n	800f07e <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2201      	movs	r2, #1
 800f07a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2200      	movs	r2, #0
 800f082:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f086:	7dfb      	ldrb	r3, [r7, #23]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b08a      	sub	sp, #40	; 0x28
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
 800f09c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d101      	bne.n	800f0b6 <HAL_SPI_TransmitReceive+0x26>
 800f0b2:	2302      	movs	r3, #2
 800f0b4:	e20a      	b.n	800f4cc <HAL_SPI_TransmitReceive+0x43c>
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0be:	f7f7 ff93 	bl	8006fe8 <HAL_GetTick>
 800f0c2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f0ca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f0d2:	887b      	ldrh	r3, [r7, #2]
 800f0d4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f0d6:	887b      	ldrh	r3, [r7, #2]
 800f0d8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f0da:	7efb      	ldrb	r3, [r7, #27]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d00e      	beq.n	800f0fe <HAL_SPI_TransmitReceive+0x6e>
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f0e6:	d106      	bne.n	800f0f6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d102      	bne.n	800f0f6 <HAL_SPI_TransmitReceive+0x66>
 800f0f0:	7efb      	ldrb	r3, [r7, #27]
 800f0f2:	2b04      	cmp	r3, #4
 800f0f4:	d003      	beq.n	800f0fe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f0fc:	e1e0      	b.n	800f4c0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d005      	beq.n	800f110 <HAL_SPI_TransmitReceive+0x80>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d002      	beq.n	800f110 <HAL_SPI_TransmitReceive+0x80>
 800f10a:	887b      	ldrh	r3, [r7, #2]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d103      	bne.n	800f118 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f110:	2301      	movs	r3, #1
 800f112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f116:	e1d3      	b.n	800f4c0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	2b04      	cmp	r3, #4
 800f122:	d003      	beq.n	800f12c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2205      	movs	r2, #5
 800f128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	887a      	ldrh	r2, [r7, #2]
 800f13c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	887a      	ldrh	r2, [r7, #2]
 800f144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	887a      	ldrh	r2, [r7, #2]
 800f152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	887a      	ldrh	r2, [r7, #2]
 800f158:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2200      	movs	r2, #0
 800f15e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f16e:	d802      	bhi.n	800f176 <HAL_SPI_TransmitReceive+0xe6>
 800f170:	8a3b      	ldrh	r3, [r7, #16]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d908      	bls.n	800f188 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	685a      	ldr	r2, [r3, #4]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f184:	605a      	str	r2, [r3, #4]
 800f186:	e007      	b.n	800f198 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	685a      	ldr	r2, [r3, #4]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f196:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1a2:	2b40      	cmp	r3, #64	; 0x40
 800f1a4:	d007      	beq.n	800f1b6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f1be:	f240 8081 	bls.w	800f2c4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <HAL_SPI_TransmitReceive+0x140>
 800f1ca:	8a7b      	ldrh	r3, [r7, #18]
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d16d      	bne.n	800f2ac <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d4:	881a      	ldrh	r2, [r3, #0]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e0:	1c9a      	adds	r2, r3, #2
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f1f4:	e05a      	b.n	800f2ac <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	f003 0302 	and.w	r3, r3, #2
 800f200:	2b02      	cmp	r3, #2
 800f202:	d11b      	bne.n	800f23c <HAL_SPI_TransmitReceive+0x1ac>
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f208:	b29b      	uxth	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d016      	beq.n	800f23c <HAL_SPI_TransmitReceive+0x1ac>
 800f20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f210:	2b01      	cmp	r3, #1
 800f212:	d113      	bne.n	800f23c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f218:	881a      	ldrh	r2, [r3, #0]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f224:	1c9a      	adds	r2, r3, #2
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f22e:	b29b      	uxth	r3, r3
 800f230:	3b01      	subs	r3, #1
 800f232:	b29a      	uxth	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f238:	2300      	movs	r3, #0
 800f23a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	689b      	ldr	r3, [r3, #8]
 800f242:	f003 0301 	and.w	r3, r3, #1
 800f246:	2b01      	cmp	r3, #1
 800f248:	d11c      	bne.n	800f284 <HAL_SPI_TransmitReceive+0x1f4>
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f250:	b29b      	uxth	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d016      	beq.n	800f284 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	68da      	ldr	r2, [r3, #12]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f260:	b292      	uxth	r2, r2
 800f262:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f268:	1c9a      	adds	r2, r3, #2
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f274:	b29b      	uxth	r3, r3
 800f276:	3b01      	subs	r3, #1
 800f278:	b29a      	uxth	r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f280:	2301      	movs	r3, #1
 800f282:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f284:	f7f7 feb0 	bl	8006fe8 <HAL_GetTick>
 800f288:	4602      	mov	r2, r0
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f290:	429a      	cmp	r2, r3
 800f292:	d80b      	bhi.n	800f2ac <HAL_SPI_TransmitReceive+0x21c>
 800f294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f29a:	d007      	beq.n	800f2ac <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800f29c:	2303      	movs	r3, #3
 800f29e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800f2aa:	e109      	b.n	800f4c0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d19f      	bne.n	800f1f6 <HAL_SPI_TransmitReceive+0x166>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d199      	bne.n	800f1f6 <HAL_SPI_TransmitReceive+0x166>
 800f2c2:	e0e3      	b.n	800f48c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d003      	beq.n	800f2d4 <HAL_SPI_TransmitReceive+0x244>
 800f2cc:	8a7b      	ldrh	r3, [r7, #18]
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	f040 80cf 	bne.w	800f472 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d912      	bls.n	800f304 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e2:	881a      	ldrh	r2, [r3, #0]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ee:	1c9a      	adds	r2, r3, #2
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	3b02      	subs	r3, #2
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f302:	e0b6      	b.n	800f472 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	330c      	adds	r3, #12
 800f30e:	7812      	ldrb	r2, [r2, #0]
 800f310:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f320:	b29b      	uxth	r3, r3
 800f322:	3b01      	subs	r3, #1
 800f324:	b29a      	uxth	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f32a:	e0a2      	b.n	800f472 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	f003 0302 	and.w	r3, r3, #2
 800f336:	2b02      	cmp	r3, #2
 800f338:	d134      	bne.n	800f3a4 <HAL_SPI_TransmitReceive+0x314>
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f33e:	b29b      	uxth	r3, r3
 800f340:	2b00      	cmp	r3, #0
 800f342:	d02f      	beq.n	800f3a4 <HAL_SPI_TransmitReceive+0x314>
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	2b01      	cmp	r3, #1
 800f348:	d12c      	bne.n	800f3a4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f34e:	b29b      	uxth	r3, r3
 800f350:	2b01      	cmp	r3, #1
 800f352:	d912      	bls.n	800f37a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f358:	881a      	ldrh	r2, [r3, #0]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f364:	1c9a      	adds	r2, r3, #2
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f36e:	b29b      	uxth	r3, r3
 800f370:	3b02      	subs	r3, #2
 800f372:	b29a      	uxth	r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f378:	e012      	b.n	800f3a0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	330c      	adds	r3, #12
 800f384:	7812      	ldrb	r2, [r2, #0]
 800f386:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f38c:	1c5a      	adds	r2, r3, #1
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f396:	b29b      	uxth	r3, r3
 800f398:	3b01      	subs	r3, #1
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	f003 0301 	and.w	r3, r3, #1
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d148      	bne.n	800f444 <HAL_SPI_TransmitReceive+0x3b4>
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d042      	beq.n	800f444 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d923      	bls.n	800f412 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	68da      	ldr	r2, [r3, #12]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d4:	b292      	uxth	r2, r2
 800f3d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3dc:	1c9a      	adds	r2, r3, #2
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	3b02      	subs	r3, #2
 800f3ec:	b29a      	uxth	r2, r3
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d81f      	bhi.n	800f440 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	685a      	ldr	r2, [r3, #4]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f40e:	605a      	str	r2, [r3, #4]
 800f410:	e016      	b.n	800f440 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f103 020c 	add.w	r2, r3, #12
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41e:	7812      	ldrb	r2, [r2, #0]
 800f420:	b2d2      	uxtb	r2, r2
 800f422:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f428:	1c5a      	adds	r2, r3, #1
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f434:	b29b      	uxth	r3, r3
 800f436:	3b01      	subs	r3, #1
 800f438:	b29a      	uxth	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f440:	2301      	movs	r3, #1
 800f442:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f444:	f7f7 fdd0 	bl	8006fe8 <HAL_GetTick>
 800f448:	4602      	mov	r2, r0
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	1ad3      	subs	r3, r2, r3
 800f44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f450:	429a      	cmp	r2, r3
 800f452:	d803      	bhi.n	800f45c <HAL_SPI_TransmitReceive+0x3cc>
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f45a:	d102      	bne.n	800f462 <HAL_SPI_TransmitReceive+0x3d2>
 800f45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d107      	bne.n	800f472 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800f462:	2303      	movs	r3, #3
 800f464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2201      	movs	r2, #1
 800f46c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800f470:	e026      	b.n	800f4c0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f476:	b29b      	uxth	r3, r3
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f47f af57 	bne.w	800f32c <HAL_SPI_TransmitReceive+0x29c>
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f484:	b29b      	uxth	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	f47f af50 	bne.w	800f32c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f48c:	69fa      	ldr	r2, [r7, #28]
 800f48e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f490:	68f8      	ldr	r0, [r7, #12]
 800f492:	f000 fb25 	bl	800fae0 <SPI_EndRxTxTransaction>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d005      	beq.n	800f4a8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800f49c:	2301      	movs	r3, #1
 800f49e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2220      	movs	r2, #32
 800f4a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d003      	beq.n	800f4b8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4b6:	e003      	b.n	800f4c0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f4c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3728      	adds	r7, #40	; 0x28
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b086      	sub	sp, #24
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	d101      	bne.n	800f4f4 <HAL_SPI_Transmit_DMA+0x20>
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	e0d4      	b.n	800f69e <HAL_SPI_Transmit_DMA+0x1ca>
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2b01      	cmp	r3, #1
 800f506:	d002      	beq.n	800f50e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800f508:	2302      	movs	r3, #2
 800f50a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f50c:	e0c2      	b.n	800f694 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d002      	beq.n	800f51a <HAL_SPI_Transmit_DMA+0x46>
 800f514:	88fb      	ldrh	r3, [r7, #6]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d102      	bne.n	800f520 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800f51a:	2301      	movs	r3, #1
 800f51c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f51e:	e0b9      	b.n	800f694 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2203      	movs	r2, #3
 800f524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2200      	movs	r2, #0
 800f52c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	68ba      	ldr	r2, [r7, #8]
 800f532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	88fa      	ldrh	r2, [r7, #6]
 800f538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	88fa      	ldrh	r2, [r7, #6]
 800f53e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2200      	movs	r2, #0
 800f544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2200      	movs	r2, #0
 800f54a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2200      	movs	r2, #0
 800f550:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2200      	movs	r2, #0
 800f55e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f56a:	d10f      	bne.n	800f58c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f57a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f58a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f590:	4a45      	ldr	r2, [pc, #276]	; (800f6a8 <HAL_SPI_Transmit_DMA+0x1d4>)
 800f592:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f598:	4a44      	ldr	r2, [pc, #272]	; (800f6ac <HAL_SPI_Transmit_DMA+0x1d8>)
 800f59a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5a0:	4a43      	ldr	r2, [pc, #268]	; (800f6b0 <HAL_SPI_Transmit_DMA+0x1dc>)
 800f5a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f5ba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f5c4:	d82d      	bhi.n	800f622 <HAL_SPI_Transmit_DMA+0x14e>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5d0:	d127      	bne.n	800f622 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	f003 0301 	and.w	r3, r3, #1
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10f      	bne.n	800f600 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	685a      	ldr	r2, [r3, #4]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f5ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	085b      	lsrs	r3, r3, #1
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f5fe:	e010      	b.n	800f622 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	685a      	ldr	r2, [r3, #4]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f60e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f614:	b29b      	uxth	r3, r3
 800f616:	085b      	lsrs	r3, r3, #1
 800f618:	b29b      	uxth	r3, r3
 800f61a:	3301      	adds	r3, #1
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f62a:	4619      	mov	r1, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	330c      	adds	r3, #12
 800f632:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f638:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f63a:	f7f7 febf 	bl	80073bc <HAL_DMA_Start_IT>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d008      	beq.n	800f656 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f648:	f043 0210 	orr.w	r2, r3, #16
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800f650:	2301      	movs	r3, #1
 800f652:	75fb      	strb	r3, [r7, #23]

    goto error;
 800f654:	e01e      	b.n	800f694 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f660:	2b40      	cmp	r3, #64	; 0x40
 800f662:	d007      	beq.n	800f674 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f672:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	685a      	ldr	r2, [r3, #4]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f042 0220 	orr.w	r2, r2, #32
 800f682:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	685a      	ldr	r2, [r3, #4]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f042 0202 	orr.w	r2, r2, #2
 800f692:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2200      	movs	r2, #0
 800f698:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3718      	adds	r7, #24
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	0800f797 	.word	0x0800f797
 800f6ac:	0800f6f1 	.word	0x0800f6f1
 800f6b0:	0800f7b3 	.word	0x0800f7b3

0800f6b4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800f6bc:	bf00      	nop
 800f6be:	370c      	adds	r7, #12
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f6d0:	bf00      	nop
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f6e4:	bf00      	nop
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f6fe:	f7f7 fc73 	bl	8006fe8 <HAL_GetTick>
 800f702:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f003 0320 	and.w	r3, r3, #32
 800f70e:	2b20      	cmp	r3, #32
 800f710:	d03b      	beq.n	800f78a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	685a      	ldr	r2, [r3, #4]
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f022 0220 	bic.w	r2, r2, #32
 800f720:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f022 0202 	bic.w	r2, r2, #2
 800f730:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f732:	693a      	ldr	r2, [r7, #16]
 800f734:	2164      	movs	r1, #100	; 0x64
 800f736:	6978      	ldr	r0, [r7, #20]
 800f738:	f000 f9d2 	bl	800fae0 <SPI_EndRxTxTransaction>
 800f73c:	4603      	mov	r3, r0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d005      	beq.n	800f74e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f746:	f043 0220 	orr.w	r2, r3, #32
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d10a      	bne.n	800f76c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f756:	2300      	movs	r3, #0
 800f758:	60fb      	str	r3, [r7, #12]
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	60fb      	str	r3, [r7, #12]
 800f76a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	2200      	movs	r2, #0
 800f770:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	2201      	movs	r2, #1
 800f776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d003      	beq.n	800f78a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f782:	6978      	ldr	r0, [r7, #20]
 800f784:	f7ff ffaa 	bl	800f6dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f788:	e002      	b.n	800f790 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f78a:	6978      	ldr	r0, [r7, #20]
 800f78c:	f7ff ff92 	bl	800f6b4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f790:	3718      	adds	r7, #24
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b084      	sub	sp, #16
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7a2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f7ff ff8f 	bl	800f6c8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f7aa:	bf00      	nop
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b084      	sub	sp, #16
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7be:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	685a      	ldr	r2, [r3, #4]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f022 0203 	bic.w	r2, r2, #3
 800f7ce:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7d4:	f043 0210 	orr.w	r2, r3, #16
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f7e4:	68f8      	ldr	r0, [r7, #12]
 800f7e6:	f7ff ff79 	bl	800f6dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f7ea:	bf00      	nop
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
	...

0800f7f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b088      	sub	sp, #32
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	603b      	str	r3, [r7, #0]
 800f800:	4613      	mov	r3, r2
 800f802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f804:	f7f7 fbf0 	bl	8006fe8 <HAL_GetTick>
 800f808:	4602      	mov	r2, r0
 800f80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80c:	1a9b      	subs	r3, r3, r2
 800f80e:	683a      	ldr	r2, [r7, #0]
 800f810:	4413      	add	r3, r2
 800f812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f814:	f7f7 fbe8 	bl	8006fe8 <HAL_GetTick>
 800f818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f81a:	4b39      	ldr	r3, [pc, #228]	; (800f900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	015b      	lsls	r3, r3, #5
 800f820:	0d1b      	lsrs	r3, r3, #20
 800f822:	69fa      	ldr	r2, [r7, #28]
 800f824:	fb02 f303 	mul.w	r3, r2, r3
 800f828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f82a:	e054      	b.n	800f8d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f832:	d050      	beq.n	800f8d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f834:	f7f7 fbd8 	bl	8006fe8 <HAL_GetTick>
 800f838:	4602      	mov	r2, r0
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	69fa      	ldr	r2, [r7, #28]
 800f840:	429a      	cmp	r2, r3
 800f842:	d902      	bls.n	800f84a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d13d      	bne.n	800f8c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	685a      	ldr	r2, [r3, #4]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f862:	d111      	bne.n	800f888 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f86c:	d004      	beq.n	800f878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f876:	d107      	bne.n	800f888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f88c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f890:	d10f      	bne.n	800f8b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f8b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	e017      	b.n	800f8f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d101      	bne.n	800f8d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	689a      	ldr	r2, [r3, #8]
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	4013      	ands	r3, r2
 800f8e0:	68ba      	ldr	r2, [r7, #8]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	bf0c      	ite	eq
 800f8e6:	2301      	moveq	r3, #1
 800f8e8:	2300      	movne	r3, #0
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	79fb      	ldrb	r3, [r7, #7]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d19b      	bne.n	800f82c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3720      	adds	r7, #32
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	20000004 	.word	0x20000004

0800f904 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b08a      	sub	sp, #40	; 0x28
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f912:	2300      	movs	r3, #0
 800f914:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f916:	f7f7 fb67 	bl	8006fe8 <HAL_GetTick>
 800f91a:	4602      	mov	r2, r0
 800f91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91e:	1a9b      	subs	r3, r3, r2
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	4413      	add	r3, r2
 800f924:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f926:	f7f7 fb5f 	bl	8006fe8 <HAL_GetTick>
 800f92a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	330c      	adds	r3, #12
 800f932:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f934:	4b3d      	ldr	r3, [pc, #244]	; (800fa2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	4613      	mov	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4413      	add	r3, r2
 800f93e:	00da      	lsls	r2, r3, #3
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	0d1b      	lsrs	r3, r3, #20
 800f944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f946:	fb02 f303 	mul.w	r3, r2, r3
 800f94a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f94c:	e060      	b.n	800fa10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f954:	d107      	bne.n	800f966 <SPI_WaitFifoStateUntilTimeout+0x62>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d104      	bne.n	800f966 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	b2db      	uxtb	r3, r3
 800f962:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f964:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f96c:	d050      	beq.n	800fa10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f96e:	f7f7 fb3b 	bl	8006fe8 <HAL_GetTick>
 800f972:	4602      	mov	r2, r0
 800f974:	6a3b      	ldr	r3, [r7, #32]
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d902      	bls.n	800f984 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	2b00      	cmp	r3, #0
 800f982:	d13d      	bne.n	800fa00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	685a      	ldr	r2, [r3, #4]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f992:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f99c:	d111      	bne.n	800f9c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9a6:	d004      	beq.n	800f9b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9b0:	d107      	bne.n	800f9c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f9c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9ca:	d10f      	bne.n	800f9ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9da:	601a      	str	r2, [r3, #0]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f9fc:	2303      	movs	r3, #3
 800f9fe:	e010      	b.n	800fa22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d101      	bne.n	800fa0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800fa06:	2300      	movs	r3, #0
 800fa08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800fa0a:	69bb      	ldr	r3, [r7, #24]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	689a      	ldr	r2, [r3, #8]
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	4013      	ands	r3, r2
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d196      	bne.n	800f94e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3728      	adds	r7, #40	; 0x28
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20000004 	.word	0x20000004

0800fa30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af02      	add	r7, sp, #8
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa44:	d111      	bne.n	800fa6a <SPI_EndRxTransaction+0x3a>
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa4e:	d004      	beq.n	800fa5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa58:	d107      	bne.n	800fa6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	2200      	movs	r2, #0
 800fa72:	2180      	movs	r1, #128	; 0x80
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f7ff febd 	bl	800f7f4 <SPI_WaitFlagStateUntilTimeout>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d007      	beq.n	800fa90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa84:	f043 0220 	orr.w	r2, r3, #32
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fa8c:	2303      	movs	r3, #3
 800fa8e:	e023      	b.n	800fad8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa98:	d11d      	bne.n	800fad6 <SPI_EndRxTransaction+0xa6>
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faa2:	d004      	beq.n	800faae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	689b      	ldr	r3, [r3, #8]
 800faa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800faac:	d113      	bne.n	800fad6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f7ff ff22 	bl	800f904 <SPI_WaitFifoStateUntilTimeout>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d007      	beq.n	800fad6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800faca:	f043 0220 	orr.w	r2, r3, #32
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800fad2:	2303      	movs	r3, #3
 800fad4:	e000      	b.n	800fad8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800fad6:	2300      	movs	r3, #0
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3710      	adds	r7, #16
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af02      	add	r7, sp, #8
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	f7ff ff03 	bl	800f904 <SPI_WaitFifoStateUntilTimeout>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d007      	beq.n	800fb14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb08:	f043 0220 	orr.w	r2, r3, #32
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb10:	2303      	movs	r3, #3
 800fb12:	e027      	b.n	800fb64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	2180      	movs	r1, #128	; 0x80
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f7ff fe68 	bl	800f7f4 <SPI_WaitFlagStateUntilTimeout>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d007      	beq.n	800fb3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb2e:	f043 0220 	orr.w	r2, r3, #32
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb36:	2303      	movs	r3, #3
 800fb38:	e014      	b.n	800fb64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	2200      	movs	r2, #0
 800fb42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	f7ff fedc 	bl	800f904 <SPI_WaitFifoStateUntilTimeout>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d007      	beq.n	800fb62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb56:	f043 0220 	orr.w	r2, r3, #32
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	e000      	b.n	800fb64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d101      	bne.n	800fb7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e049      	b.n	800fc12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d106      	bne.n	800fb98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f7f5 fad6 	bl	8005144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	3304      	adds	r3, #4
 800fba8:	4619      	mov	r1, r3
 800fbaa:	4610      	mov	r0, r2
 800fbac:	f000 fab6 	bl	801011c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2201      	movs	r2, #1
 800fbbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2201      	movs	r2, #1
 800fbcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2201      	movs	r2, #1
 800fc04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
	...

0800fc1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d001      	beq.n	800fc34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fc30:	2301      	movs	r3, #1
 800fc32:	e04f      	b.n	800fcd4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2202      	movs	r2, #2
 800fc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	68da      	ldr	r2, [r3, #12]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f042 0201 	orr.w	r2, r2, #1
 800fc4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4a23      	ldr	r2, [pc, #140]	; (800fce0 <HAL_TIM_Base_Start_IT+0xc4>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d01d      	beq.n	800fc92 <HAL_TIM_Base_Start_IT+0x76>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc5e:	d018      	beq.n	800fc92 <HAL_TIM_Base_Start_IT+0x76>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a1f      	ldr	r2, [pc, #124]	; (800fce4 <HAL_TIM_Base_Start_IT+0xc8>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d013      	beq.n	800fc92 <HAL_TIM_Base_Start_IT+0x76>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	4a1e      	ldr	r2, [pc, #120]	; (800fce8 <HAL_TIM_Base_Start_IT+0xcc>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d00e      	beq.n	800fc92 <HAL_TIM_Base_Start_IT+0x76>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a1c      	ldr	r2, [pc, #112]	; (800fcec <HAL_TIM_Base_Start_IT+0xd0>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d009      	beq.n	800fc92 <HAL_TIM_Base_Start_IT+0x76>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a1b      	ldr	r2, [pc, #108]	; (800fcf0 <HAL_TIM_Base_Start_IT+0xd4>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d004      	beq.n	800fc92 <HAL_TIM_Base_Start_IT+0x76>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a19      	ldr	r2, [pc, #100]	; (800fcf4 <HAL_TIM_Base_Start_IT+0xd8>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d115      	bne.n	800fcbe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	689a      	ldr	r2, [r3, #8]
 800fc98:	4b17      	ldr	r3, [pc, #92]	; (800fcf8 <HAL_TIM_Base_Start_IT+0xdc>)
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2b06      	cmp	r3, #6
 800fca2:	d015      	beq.n	800fcd0 <HAL_TIM_Base_Start_IT+0xb4>
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcaa:	d011      	beq.n	800fcd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f042 0201 	orr.w	r2, r2, #1
 800fcba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcbc:	e008      	b.n	800fcd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f042 0201 	orr.w	r2, r2, #1
 800fccc:	601a      	str	r2, [r3, #0]
 800fcce:	e000      	b.n	800fcd2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fcd2:	2300      	movs	r3, #0
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	40012c00 	.word	0x40012c00
 800fce4:	40000400 	.word	0x40000400
 800fce8:	40000800 	.word	0x40000800
 800fcec:	40000c00 	.word	0x40000c00
 800fcf0:	40013400 	.word	0x40013400
 800fcf4:	40014000 	.word	0x40014000
 800fcf8:	00010007 	.word	0x00010007

0800fcfc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d101      	bne.n	800fd0e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e049      	b.n	800fda2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d106      	bne.n	800fd28 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f841 	bl	800fdaa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2202      	movs	r2, #2
 800fd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3304      	adds	r3, #4
 800fd38:	4619      	mov	r1, r3
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	f000 f9ee 	bl	801011c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2201      	movs	r2, #1
 800fd44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2201      	movs	r2, #1
 800fd54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2201      	movs	r2, #1
 800fd64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2201      	movs	r2, #1
 800fd74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2201      	movs	r2, #1
 800fd84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2201      	movs	r2, #1
 800fd94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fda0:	2300      	movs	r3, #0
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}

0800fdaa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800fdaa:	b480      	push	{r7}
 800fdac:	b083      	sub	sp, #12
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800fdb2:	bf00      	nop
 800fdb4:	370c      	adds	r7, #12
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr

0800fdbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b084      	sub	sp, #16
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	f003 0302 	and.w	r3, r3, #2
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d020      	beq.n	800fe22 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f003 0302 	and.w	r3, r3, #2
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d01b      	beq.n	800fe22 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f06f 0202 	mvn.w	r2, #2
 800fdf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	699b      	ldr	r3, [r3, #24]
 800fe00:	f003 0303 	and.w	r3, r3, #3
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d003      	beq.n	800fe10 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f000 f969 	bl	80100e0 <HAL_TIM_IC_CaptureCallback>
 800fe0e:	e005      	b.n	800fe1c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 f95b 	bl	80100cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 f96c 	bl	80100f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	f003 0304 	and.w	r3, r3, #4
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d020      	beq.n	800fe6e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f003 0304 	and.w	r3, r3, #4
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d01b      	beq.n	800fe6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f06f 0204 	mvn.w	r2, #4
 800fe3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2202      	movs	r2, #2
 800fe44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	699b      	ldr	r3, [r3, #24]
 800fe4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d003      	beq.n	800fe5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 f943 	bl	80100e0 <HAL_TIM_IC_CaptureCallback>
 800fe5a:	e005      	b.n	800fe68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f935 	bl	80100cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 f946 	bl	80100f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	f003 0308 	and.w	r3, r3, #8
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d020      	beq.n	800feba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f003 0308 	and.w	r3, r3, #8
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d01b      	beq.n	800feba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f06f 0208 	mvn.w	r2, #8
 800fe8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2204      	movs	r2, #4
 800fe90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	69db      	ldr	r3, [r3, #28]
 800fe98:	f003 0303 	and.w	r3, r3, #3
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d003      	beq.n	800fea8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f000 f91d 	bl	80100e0 <HAL_TIM_IC_CaptureCallback>
 800fea6:	e005      	b.n	800feb4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f90f 	bl	80100cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f920 	bl	80100f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	f003 0310 	and.w	r3, r3, #16
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d020      	beq.n	800ff06 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f003 0310 	and.w	r3, r3, #16
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d01b      	beq.n	800ff06 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f06f 0210 	mvn.w	r2, #16
 800fed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2208      	movs	r2, #8
 800fedc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	69db      	ldr	r3, [r3, #28]
 800fee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d003      	beq.n	800fef4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 f8f7 	bl	80100e0 <HAL_TIM_IC_CaptureCallback>
 800fef2:	e005      	b.n	800ff00 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 f8e9 	bl	80100cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 f8fa 	bl	80100f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2200      	movs	r2, #0
 800ff04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	f003 0301 	and.w	r3, r3, #1
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00c      	beq.n	800ff2a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f003 0301 	and.w	r3, r3, #1
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d007      	beq.n	800ff2a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f06f 0201 	mvn.w	r2, #1
 800ff22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f8c7 	bl	80100b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00c      	beq.n	800ff4e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d007      	beq.n	800ff4e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ff46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 fcdf 	bl	801090c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00c      	beq.n	800ff72 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d007      	beq.n	800ff72 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ff6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 fcd7 	bl	8010920 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d00c      	beq.n	800ff96 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d007      	beq.n	800ff96 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ff8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f000 f8b9 	bl	8010108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	f003 0320 	and.w	r3, r3, #32
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00c      	beq.n	800ffba <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f003 0320 	and.w	r3, r3, #32
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d007      	beq.n	800ffba <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f06f 0220 	mvn.w	r2, #32
 800ffb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 fc9f 	bl	80108f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ffba:	bf00      	nop
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
	...

0800ffc4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d101      	bne.n	800ffe2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800ffde:	2302      	movs	r3, #2
 800ffe0:	e066      	b.n	80100b0 <HAL_TIM_OC_ConfigChannel+0xec>
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2b14      	cmp	r3, #20
 800ffee:	d857      	bhi.n	80100a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800fff0:	a201      	add	r2, pc, #4	; (adr r2, 800fff8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800fff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff6:	bf00      	nop
 800fff8:	0801004d 	.word	0x0801004d
 800fffc:	080100a1 	.word	0x080100a1
 8010000:	080100a1 	.word	0x080100a1
 8010004:	080100a1 	.word	0x080100a1
 8010008:	0801005b 	.word	0x0801005b
 801000c:	080100a1 	.word	0x080100a1
 8010010:	080100a1 	.word	0x080100a1
 8010014:	080100a1 	.word	0x080100a1
 8010018:	08010069 	.word	0x08010069
 801001c:	080100a1 	.word	0x080100a1
 8010020:	080100a1 	.word	0x080100a1
 8010024:	080100a1 	.word	0x080100a1
 8010028:	08010077 	.word	0x08010077
 801002c:	080100a1 	.word	0x080100a1
 8010030:	080100a1 	.word	0x080100a1
 8010034:	080100a1 	.word	0x080100a1
 8010038:	08010085 	.word	0x08010085
 801003c:	080100a1 	.word	0x080100a1
 8010040:	080100a1 	.word	0x080100a1
 8010044:	080100a1 	.word	0x080100a1
 8010048:	08010093 	.word	0x08010093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68b9      	ldr	r1, [r7, #8]
 8010052:	4618      	mov	r0, r3
 8010054:	f000 f8fc 	bl	8010250 <TIM_OC1_SetConfig>
      break;
 8010058:	e025      	b.n	80100a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	68b9      	ldr	r1, [r7, #8]
 8010060:	4618      	mov	r0, r3
 8010062:	f000 f985 	bl	8010370 <TIM_OC2_SetConfig>
      break;
 8010066:	e01e      	b.n	80100a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	68b9      	ldr	r1, [r7, #8]
 801006e:	4618      	mov	r0, r3
 8010070:	f000 fa08 	bl	8010484 <TIM_OC3_SetConfig>
      break;
 8010074:	e017      	b.n	80100a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	68b9      	ldr	r1, [r7, #8]
 801007c:	4618      	mov	r0, r3
 801007e:	f000 fa89 	bl	8010594 <TIM_OC4_SetConfig>
      break;
 8010082:	e010      	b.n	80100a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	68b9      	ldr	r1, [r7, #8]
 801008a:	4618      	mov	r0, r3
 801008c:	f000 faec 	bl	8010668 <TIM_OC5_SetConfig>
      break;
 8010090:	e009      	b.n	80100a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	68b9      	ldr	r1, [r7, #8]
 8010098:	4618      	mov	r0, r3
 801009a:	f000 fb49 	bl	8010730 <TIM_OC6_SetConfig>
      break;
 801009e:	e002      	b.n	80100a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80100a0:	2301      	movs	r3, #1
 80100a2:	75fb      	strb	r3, [r7, #23]
      break;
 80100a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2200      	movs	r2, #0
 80100aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80100ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3718      	adds	r7, #24
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	4a40      	ldr	r2, [pc, #256]	; (8010230 <TIM_Base_SetConfig+0x114>)
 8010130:	4293      	cmp	r3, r2
 8010132:	d013      	beq.n	801015c <TIM_Base_SetConfig+0x40>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801013a:	d00f      	beq.n	801015c <TIM_Base_SetConfig+0x40>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4a3d      	ldr	r2, [pc, #244]	; (8010234 <TIM_Base_SetConfig+0x118>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d00b      	beq.n	801015c <TIM_Base_SetConfig+0x40>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a3c      	ldr	r2, [pc, #240]	; (8010238 <TIM_Base_SetConfig+0x11c>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d007      	beq.n	801015c <TIM_Base_SetConfig+0x40>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a3b      	ldr	r2, [pc, #236]	; (801023c <TIM_Base_SetConfig+0x120>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d003      	beq.n	801015c <TIM_Base_SetConfig+0x40>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a3a      	ldr	r2, [pc, #232]	; (8010240 <TIM_Base_SetConfig+0x124>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d108      	bne.n	801016e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	4313      	orrs	r3, r2
 801016c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4a2f      	ldr	r2, [pc, #188]	; (8010230 <TIM_Base_SetConfig+0x114>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d01f      	beq.n	80101b6 <TIM_Base_SetConfig+0x9a>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801017c:	d01b      	beq.n	80101b6 <TIM_Base_SetConfig+0x9a>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4a2c      	ldr	r2, [pc, #176]	; (8010234 <TIM_Base_SetConfig+0x118>)
 8010182:	4293      	cmp	r3, r2
 8010184:	d017      	beq.n	80101b6 <TIM_Base_SetConfig+0x9a>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4a2b      	ldr	r2, [pc, #172]	; (8010238 <TIM_Base_SetConfig+0x11c>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d013      	beq.n	80101b6 <TIM_Base_SetConfig+0x9a>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a2a      	ldr	r2, [pc, #168]	; (801023c <TIM_Base_SetConfig+0x120>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d00f      	beq.n	80101b6 <TIM_Base_SetConfig+0x9a>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4a29      	ldr	r2, [pc, #164]	; (8010240 <TIM_Base_SetConfig+0x124>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d00b      	beq.n	80101b6 <TIM_Base_SetConfig+0x9a>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a28      	ldr	r2, [pc, #160]	; (8010244 <TIM_Base_SetConfig+0x128>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d007      	beq.n	80101b6 <TIM_Base_SetConfig+0x9a>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a27      	ldr	r2, [pc, #156]	; (8010248 <TIM_Base_SetConfig+0x12c>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d003      	beq.n	80101b6 <TIM_Base_SetConfig+0x9a>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4a26      	ldr	r2, [pc, #152]	; (801024c <TIM_Base_SetConfig+0x130>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d108      	bne.n	80101c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	4313      	orrs	r3, r2
 80101c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	695b      	ldr	r3, [r3, #20]
 80101d2:	4313      	orrs	r3, r2
 80101d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	689a      	ldr	r2, [r3, #8]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	4a10      	ldr	r2, [pc, #64]	; (8010230 <TIM_Base_SetConfig+0x114>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d00f      	beq.n	8010214 <TIM_Base_SetConfig+0xf8>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4a12      	ldr	r2, [pc, #72]	; (8010240 <TIM_Base_SetConfig+0x124>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d00b      	beq.n	8010214 <TIM_Base_SetConfig+0xf8>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4a11      	ldr	r2, [pc, #68]	; (8010244 <TIM_Base_SetConfig+0x128>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d007      	beq.n	8010214 <TIM_Base_SetConfig+0xf8>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4a10      	ldr	r2, [pc, #64]	; (8010248 <TIM_Base_SetConfig+0x12c>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d003      	beq.n	8010214 <TIM_Base_SetConfig+0xf8>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4a0f      	ldr	r2, [pc, #60]	; (801024c <TIM_Base_SetConfig+0x130>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d103      	bne.n	801021c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	691a      	ldr	r2, [r3, #16]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2201      	movs	r2, #1
 8010220:	615a      	str	r2, [r3, #20]
}
 8010222:	bf00      	nop
 8010224:	3714      	adds	r7, #20
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	40012c00 	.word	0x40012c00
 8010234:	40000400 	.word	0x40000400
 8010238:	40000800 	.word	0x40000800
 801023c:	40000c00 	.word	0x40000c00
 8010240:	40013400 	.word	0x40013400
 8010244:	40014000 	.word	0x40014000
 8010248:	40014400 	.word	0x40014400
 801024c:	40014800 	.word	0x40014800

08010250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010250:	b480      	push	{r7}
 8010252:	b087      	sub	sp, #28
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6a1b      	ldr	r3, [r3, #32]
 801025e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6a1b      	ldr	r3, [r3, #32]
 8010264:	f023 0201 	bic.w	r2, r3, #1
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	699b      	ldr	r3, [r3, #24]
 8010276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801027e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f023 0303 	bic.w	r3, r3, #3
 801028a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	4313      	orrs	r3, r2
 8010294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	f023 0302 	bic.w	r3, r3, #2
 801029c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	689b      	ldr	r3, [r3, #8]
 80102a2:	697a      	ldr	r2, [r7, #20]
 80102a4:	4313      	orrs	r3, r2
 80102a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4a2c      	ldr	r2, [pc, #176]	; (801035c <TIM_OC1_SetConfig+0x10c>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d00f      	beq.n	80102d0 <TIM_OC1_SetConfig+0x80>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4a2b      	ldr	r2, [pc, #172]	; (8010360 <TIM_OC1_SetConfig+0x110>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d00b      	beq.n	80102d0 <TIM_OC1_SetConfig+0x80>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4a2a      	ldr	r2, [pc, #168]	; (8010364 <TIM_OC1_SetConfig+0x114>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d007      	beq.n	80102d0 <TIM_OC1_SetConfig+0x80>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a29      	ldr	r2, [pc, #164]	; (8010368 <TIM_OC1_SetConfig+0x118>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d003      	beq.n	80102d0 <TIM_OC1_SetConfig+0x80>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4a28      	ldr	r2, [pc, #160]	; (801036c <TIM_OC1_SetConfig+0x11c>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d10c      	bne.n	80102ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	f023 0308 	bic.w	r3, r3, #8
 80102d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	697a      	ldr	r2, [r7, #20]
 80102de:	4313      	orrs	r3, r2
 80102e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	f023 0304 	bic.w	r3, r3, #4
 80102e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4a1b      	ldr	r2, [pc, #108]	; (801035c <TIM_OC1_SetConfig+0x10c>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d00f      	beq.n	8010312 <TIM_OC1_SetConfig+0xc2>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a1a      	ldr	r2, [pc, #104]	; (8010360 <TIM_OC1_SetConfig+0x110>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d00b      	beq.n	8010312 <TIM_OC1_SetConfig+0xc2>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4a19      	ldr	r2, [pc, #100]	; (8010364 <TIM_OC1_SetConfig+0x114>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d007      	beq.n	8010312 <TIM_OC1_SetConfig+0xc2>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4a18      	ldr	r2, [pc, #96]	; (8010368 <TIM_OC1_SetConfig+0x118>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d003      	beq.n	8010312 <TIM_OC1_SetConfig+0xc2>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4a17      	ldr	r2, [pc, #92]	; (801036c <TIM_OC1_SetConfig+0x11c>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d111      	bne.n	8010336 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	695b      	ldr	r3, [r3, #20]
 8010326:	693a      	ldr	r2, [r7, #16]
 8010328:	4313      	orrs	r3, r2
 801032a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	693a      	ldr	r2, [r7, #16]
 8010332:	4313      	orrs	r3, r2
 8010334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	693a      	ldr	r2, [r7, #16]
 801033a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	68fa      	ldr	r2, [r7, #12]
 8010340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	685a      	ldr	r2, [r3, #4]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	697a      	ldr	r2, [r7, #20]
 801034e:	621a      	str	r2, [r3, #32]
}
 8010350:	bf00      	nop
 8010352:	371c      	adds	r7, #28
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr
 801035c:	40012c00 	.word	0x40012c00
 8010360:	40013400 	.word	0x40013400
 8010364:	40014000 	.word	0x40014000
 8010368:	40014400 	.word	0x40014400
 801036c:	40014800 	.word	0x40014800

08010370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010370:	b480      	push	{r7}
 8010372:	b087      	sub	sp, #28
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6a1b      	ldr	r3, [r3, #32]
 801037e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6a1b      	ldr	r3, [r3, #32]
 8010384:	f023 0210 	bic.w	r2, r3, #16
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	699b      	ldr	r3, [r3, #24]
 8010396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801039e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	021b      	lsls	r3, r3, #8
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	4313      	orrs	r3, r2
 80103b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	f023 0320 	bic.w	r3, r3, #32
 80103be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	011b      	lsls	r3, r3, #4
 80103c6:	697a      	ldr	r2, [r7, #20]
 80103c8:	4313      	orrs	r3, r2
 80103ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a28      	ldr	r2, [pc, #160]	; (8010470 <TIM_OC2_SetConfig+0x100>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d003      	beq.n	80103dc <TIM_OC2_SetConfig+0x6c>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a27      	ldr	r2, [pc, #156]	; (8010474 <TIM_OC2_SetConfig+0x104>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d10d      	bne.n	80103f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	011b      	lsls	r3, r3, #4
 80103ea:	697a      	ldr	r2, [r7, #20]
 80103ec:	4313      	orrs	r3, r2
 80103ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4a1d      	ldr	r2, [pc, #116]	; (8010470 <TIM_OC2_SetConfig+0x100>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d00f      	beq.n	8010420 <TIM_OC2_SetConfig+0xb0>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a1c      	ldr	r2, [pc, #112]	; (8010474 <TIM_OC2_SetConfig+0x104>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d00b      	beq.n	8010420 <TIM_OC2_SetConfig+0xb0>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	4a1b      	ldr	r2, [pc, #108]	; (8010478 <TIM_OC2_SetConfig+0x108>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d007      	beq.n	8010420 <TIM_OC2_SetConfig+0xb0>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4a1a      	ldr	r2, [pc, #104]	; (801047c <TIM_OC2_SetConfig+0x10c>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d003      	beq.n	8010420 <TIM_OC2_SetConfig+0xb0>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	4a19      	ldr	r2, [pc, #100]	; (8010480 <TIM_OC2_SetConfig+0x110>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d113      	bne.n	8010448 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801042e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	695b      	ldr	r3, [r3, #20]
 8010434:	009b      	lsls	r3, r3, #2
 8010436:	693a      	ldr	r2, [r7, #16]
 8010438:	4313      	orrs	r3, r2
 801043a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	699b      	ldr	r3, [r3, #24]
 8010440:	009b      	lsls	r3, r3, #2
 8010442:	693a      	ldr	r2, [r7, #16]
 8010444:	4313      	orrs	r3, r2
 8010446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	685a      	ldr	r2, [r3, #4]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	697a      	ldr	r2, [r7, #20]
 8010460:	621a      	str	r2, [r3, #32]
}
 8010462:	bf00      	nop
 8010464:	371c      	adds	r7, #28
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	40012c00 	.word	0x40012c00
 8010474:	40013400 	.word	0x40013400
 8010478:	40014000 	.word	0x40014000
 801047c:	40014400 	.word	0x40014400
 8010480:	40014800 	.word	0x40014800

08010484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010484:	b480      	push	{r7}
 8010486:	b087      	sub	sp, #28
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6a1b      	ldr	r3, [r3, #32]
 8010492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6a1b      	ldr	r3, [r3, #32]
 8010498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	69db      	ldr	r3, [r3, #28]
 80104aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f023 0303 	bic.w	r3, r3, #3
 80104be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	68fa      	ldr	r2, [r7, #12]
 80104c6:	4313      	orrs	r3, r2
 80104c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	021b      	lsls	r3, r3, #8
 80104d8:	697a      	ldr	r2, [r7, #20]
 80104da:	4313      	orrs	r3, r2
 80104dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4a27      	ldr	r2, [pc, #156]	; (8010580 <TIM_OC3_SetConfig+0xfc>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d003      	beq.n	80104ee <TIM_OC3_SetConfig+0x6a>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4a26      	ldr	r2, [pc, #152]	; (8010584 <TIM_OC3_SetConfig+0x100>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d10d      	bne.n	801050a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	021b      	lsls	r3, r3, #8
 80104fc:	697a      	ldr	r2, [r7, #20]
 80104fe:	4313      	orrs	r3, r2
 8010500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4a1c      	ldr	r2, [pc, #112]	; (8010580 <TIM_OC3_SetConfig+0xfc>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d00f      	beq.n	8010532 <TIM_OC3_SetConfig+0xae>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a1b      	ldr	r2, [pc, #108]	; (8010584 <TIM_OC3_SetConfig+0x100>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d00b      	beq.n	8010532 <TIM_OC3_SetConfig+0xae>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4a1a      	ldr	r2, [pc, #104]	; (8010588 <TIM_OC3_SetConfig+0x104>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d007      	beq.n	8010532 <TIM_OC3_SetConfig+0xae>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4a19      	ldr	r2, [pc, #100]	; (801058c <TIM_OC3_SetConfig+0x108>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d003      	beq.n	8010532 <TIM_OC3_SetConfig+0xae>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4a18      	ldr	r2, [pc, #96]	; (8010590 <TIM_OC3_SetConfig+0x10c>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d113      	bne.n	801055a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	695b      	ldr	r3, [r3, #20]
 8010546:	011b      	lsls	r3, r3, #4
 8010548:	693a      	ldr	r2, [r7, #16]
 801054a:	4313      	orrs	r3, r2
 801054c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	699b      	ldr	r3, [r3, #24]
 8010552:	011b      	lsls	r3, r3, #4
 8010554:	693a      	ldr	r2, [r7, #16]
 8010556:	4313      	orrs	r3, r2
 8010558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	685a      	ldr	r2, [r3, #4]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	697a      	ldr	r2, [r7, #20]
 8010572:	621a      	str	r2, [r3, #32]
}
 8010574:	bf00      	nop
 8010576:	371c      	adds	r7, #28
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr
 8010580:	40012c00 	.word	0x40012c00
 8010584:	40013400 	.word	0x40013400
 8010588:	40014000 	.word	0x40014000
 801058c:	40014400 	.word	0x40014400
 8010590:	40014800 	.word	0x40014800

08010594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010594:	b480      	push	{r7}
 8010596:	b087      	sub	sp, #28
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6a1b      	ldr	r3, [r3, #32]
 80105a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6a1b      	ldr	r3, [r3, #32]
 80105a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	69db      	ldr	r3, [r3, #28]
 80105ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80105c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	021b      	lsls	r3, r3, #8
 80105d6:	68fa      	ldr	r2, [r7, #12]
 80105d8:	4313      	orrs	r3, r2
 80105da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	031b      	lsls	r3, r3, #12
 80105ea:	693a      	ldr	r2, [r7, #16]
 80105ec:	4313      	orrs	r3, r2
 80105ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4a18      	ldr	r2, [pc, #96]	; (8010654 <TIM_OC4_SetConfig+0xc0>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d00f      	beq.n	8010618 <TIM_OC4_SetConfig+0x84>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4a17      	ldr	r2, [pc, #92]	; (8010658 <TIM_OC4_SetConfig+0xc4>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d00b      	beq.n	8010618 <TIM_OC4_SetConfig+0x84>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4a16      	ldr	r2, [pc, #88]	; (801065c <TIM_OC4_SetConfig+0xc8>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d007      	beq.n	8010618 <TIM_OC4_SetConfig+0x84>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	4a15      	ldr	r2, [pc, #84]	; (8010660 <TIM_OC4_SetConfig+0xcc>)
 801060c:	4293      	cmp	r3, r2
 801060e:	d003      	beq.n	8010618 <TIM_OC4_SetConfig+0x84>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	4a14      	ldr	r2, [pc, #80]	; (8010664 <TIM_OC4_SetConfig+0xd0>)
 8010614:	4293      	cmp	r3, r2
 8010616:	d109      	bne.n	801062c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801061e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	695b      	ldr	r3, [r3, #20]
 8010624:	019b      	lsls	r3, r3, #6
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	4313      	orrs	r3, r2
 801062a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	68fa      	ldr	r2, [r7, #12]
 8010636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	693a      	ldr	r2, [r7, #16]
 8010644:	621a      	str	r2, [r3, #32]
}
 8010646:	bf00      	nop
 8010648:	371c      	adds	r7, #28
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop
 8010654:	40012c00 	.word	0x40012c00
 8010658:	40013400 	.word	0x40013400
 801065c:	40014000 	.word	0x40014000
 8010660:	40014400 	.word	0x40014400
 8010664:	40014800 	.word	0x40014800

08010668 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010668:	b480      	push	{r7}
 801066a:	b087      	sub	sp, #28
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6a1b      	ldr	r3, [r3, #32]
 8010676:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6a1b      	ldr	r3, [r3, #32]
 801067c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801068e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801069a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	4313      	orrs	r3, r2
 80106a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80106ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	689b      	ldr	r3, [r3, #8]
 80106b2:	041b      	lsls	r3, r3, #16
 80106b4:	693a      	ldr	r2, [r7, #16]
 80106b6:	4313      	orrs	r3, r2
 80106b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4a17      	ldr	r2, [pc, #92]	; (801071c <TIM_OC5_SetConfig+0xb4>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d00f      	beq.n	80106e2 <TIM_OC5_SetConfig+0x7a>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a16      	ldr	r2, [pc, #88]	; (8010720 <TIM_OC5_SetConfig+0xb8>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d00b      	beq.n	80106e2 <TIM_OC5_SetConfig+0x7a>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a15      	ldr	r2, [pc, #84]	; (8010724 <TIM_OC5_SetConfig+0xbc>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d007      	beq.n	80106e2 <TIM_OC5_SetConfig+0x7a>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a14      	ldr	r2, [pc, #80]	; (8010728 <TIM_OC5_SetConfig+0xc0>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d003      	beq.n	80106e2 <TIM_OC5_SetConfig+0x7a>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a13      	ldr	r2, [pc, #76]	; (801072c <TIM_OC5_SetConfig+0xc4>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d109      	bne.n	80106f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	695b      	ldr	r3, [r3, #20]
 80106ee:	021b      	lsls	r3, r3, #8
 80106f0:	697a      	ldr	r2, [r7, #20]
 80106f2:	4313      	orrs	r3, r2
 80106f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	697a      	ldr	r2, [r7, #20]
 80106fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	685a      	ldr	r2, [r3, #4]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	621a      	str	r2, [r3, #32]
}
 8010710:	bf00      	nop
 8010712:	371c      	adds	r7, #28
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr
 801071c:	40012c00 	.word	0x40012c00
 8010720:	40013400 	.word	0x40013400
 8010724:	40014000 	.word	0x40014000
 8010728:	40014400 	.word	0x40014400
 801072c:	40014800 	.word	0x40014800

08010730 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010730:	b480      	push	{r7}
 8010732:	b087      	sub	sp, #28
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6a1b      	ldr	r3, [r3, #32]
 801073e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6a1b      	ldr	r3, [r3, #32]
 8010744:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801075e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	021b      	lsls	r3, r3, #8
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	4313      	orrs	r3, r2
 801076e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	051b      	lsls	r3, r3, #20
 801077e:	693a      	ldr	r2, [r7, #16]
 8010780:	4313      	orrs	r3, r2
 8010782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	4a18      	ldr	r2, [pc, #96]	; (80107e8 <TIM_OC6_SetConfig+0xb8>)
 8010788:	4293      	cmp	r3, r2
 801078a:	d00f      	beq.n	80107ac <TIM_OC6_SetConfig+0x7c>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4a17      	ldr	r2, [pc, #92]	; (80107ec <TIM_OC6_SetConfig+0xbc>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d00b      	beq.n	80107ac <TIM_OC6_SetConfig+0x7c>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a16      	ldr	r2, [pc, #88]	; (80107f0 <TIM_OC6_SetConfig+0xc0>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d007      	beq.n	80107ac <TIM_OC6_SetConfig+0x7c>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4a15      	ldr	r2, [pc, #84]	; (80107f4 <TIM_OC6_SetConfig+0xc4>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d003      	beq.n	80107ac <TIM_OC6_SetConfig+0x7c>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a14      	ldr	r2, [pc, #80]	; (80107f8 <TIM_OC6_SetConfig+0xc8>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d109      	bne.n	80107c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80107b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	695b      	ldr	r3, [r3, #20]
 80107b8:	029b      	lsls	r3, r3, #10
 80107ba:	697a      	ldr	r2, [r7, #20]
 80107bc:	4313      	orrs	r3, r2
 80107be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	68fa      	ldr	r2, [r7, #12]
 80107ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	685a      	ldr	r2, [r3, #4]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	693a      	ldr	r2, [r7, #16]
 80107d8:	621a      	str	r2, [r3, #32]
}
 80107da:	bf00      	nop
 80107dc:	371c      	adds	r7, #28
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	40012c00 	.word	0x40012c00
 80107ec:	40013400 	.word	0x40013400
 80107f0:	40014000 	.word	0x40014000
 80107f4:	40014400 	.word	0x40014400
 80107f8:	40014800 	.word	0x40014800

080107fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010806:	2300      	movs	r3, #0
 8010808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010810:	2b01      	cmp	r3, #1
 8010812:	d101      	bne.n	8010818 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010814:	2302      	movs	r3, #2
 8010816:	e065      	b.n	80108e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	68db      	ldr	r3, [r3, #12]
 801082a:	4313      	orrs	r3, r2
 801082c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	689b      	ldr	r3, [r3, #8]
 8010838:	4313      	orrs	r3, r2
 801083a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	4313      	orrs	r3, r2
 8010848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4313      	orrs	r3, r2
 8010856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	691b      	ldr	r3, [r3, #16]
 8010862:	4313      	orrs	r3, r2
 8010864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	695b      	ldr	r3, [r3, #20]
 8010870:	4313      	orrs	r3, r2
 8010872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801087e:	4313      	orrs	r3, r2
 8010880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	699b      	ldr	r3, [r3, #24]
 801088c:	041b      	lsls	r3, r3, #16
 801088e:	4313      	orrs	r3, r2
 8010890:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a16      	ldr	r2, [pc, #88]	; (80108f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d004      	beq.n	80108a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a14      	ldr	r2, [pc, #80]	; (80108f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d115      	bne.n	80108d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b0:	051b      	lsls	r3, r3, #20
 80108b2:	4313      	orrs	r3, r2
 80108b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	69db      	ldr	r3, [r3, #28]
 80108c0:	4313      	orrs	r3, r2
 80108c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	6a1b      	ldr	r3, [r3, #32]
 80108ce:	4313      	orrs	r3, r2
 80108d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	68fa      	ldr	r2, [r7, #12]
 80108d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2200      	movs	r2, #0
 80108de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80108e2:	2300      	movs	r3, #0
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3714      	adds	r7, #20
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr
 80108f0:	40012c00 	.word	0x40012c00
 80108f4:	40013400 	.word	0x40013400

080108f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010900:	bf00      	nop
 8010902:	370c      	adds	r7, #12
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010914:	bf00      	nop
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010928:	bf00      	nop
 801092a:	370c      	adds	r7, #12
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d101      	bne.n	8010946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010942:	2301      	movs	r3, #1
 8010944:	e042      	b.n	80109cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801094c:	2b00      	cmp	r3, #0
 801094e:	d106      	bne.n	801095e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7f4 fc13 	bl	8005184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2224      	movs	r2, #36	; 0x24
 8010962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f022 0201 	bic.w	r2, r2, #1
 8010974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801097a:	2b00      	cmp	r3, #0
 801097c:	d002      	beq.n	8010984 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 ff58 	bl	8011834 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f000 fc59 	bl	801123c <UART_SetConfig>
 801098a:	4603      	mov	r3, r0
 801098c:	2b01      	cmp	r3, #1
 801098e:	d101      	bne.n	8010994 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010990:	2301      	movs	r3, #1
 8010992:	e01b      	b.n	80109cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	685a      	ldr	r2, [r3, #4]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	689a      	ldr	r2, [r3, #8]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80109b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f042 0201 	orr.w	r2, r2, #1
 80109c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 ffd7 	bl	8011978 <UART_CheckIdleState>
 80109ca:	4603      	mov	r3, r0
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b08a      	sub	sp, #40	; 0x28
 80109d8:	af02      	add	r7, sp, #8
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	60b9      	str	r1, [r7, #8]
 80109de:	603b      	str	r3, [r7, #0]
 80109e0:	4613      	mov	r3, r2
 80109e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109ea:	2b20      	cmp	r3, #32
 80109ec:	d17c      	bne.n	8010ae8 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d002      	beq.n	80109fa <HAL_UART_Transmit+0x26>
 80109f4:	88fb      	ldrh	r3, [r7, #6]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d101      	bne.n	80109fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80109fa:	2301      	movs	r3, #1
 80109fc:	e075      	b.n	8010aea <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2200      	movs	r2, #0
 8010a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2221      	movs	r2, #33	; 0x21
 8010a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010a0e:	f7f6 faeb 	bl	8006fe8 <HAL_GetTick>
 8010a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	88fa      	ldrh	r2, [r7, #6]
 8010a18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	88fa      	ldrh	r2, [r7, #6]
 8010a20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	689b      	ldr	r3, [r3, #8]
 8010a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a2c:	d108      	bne.n	8010a40 <HAL_UART_Transmit+0x6c>
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	691b      	ldr	r3, [r3, #16]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d104      	bne.n	8010a40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010a36:	2300      	movs	r3, #0
 8010a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	61bb      	str	r3, [r7, #24]
 8010a3e:	e003      	b.n	8010a48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010a44:	2300      	movs	r3, #0
 8010a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010a48:	e031      	b.n	8010aae <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	9300      	str	r3, [sp, #0]
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	2200      	movs	r2, #0
 8010a52:	2180      	movs	r1, #128	; 0x80
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f001 f839 	bl	8011acc <UART_WaitOnFlagUntilTimeout>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d005      	beq.n	8010a6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2220      	movs	r2, #32
 8010a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010a68:	2303      	movs	r3, #3
 8010a6a:	e03e      	b.n	8010aea <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d10b      	bne.n	8010a8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	881a      	ldrh	r2, [r3, #0]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010a7e:	b292      	uxth	r2, r2
 8010a80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010a82:	69bb      	ldr	r3, [r7, #24]
 8010a84:	3302      	adds	r3, #2
 8010a86:	61bb      	str	r3, [r7, #24]
 8010a88:	e008      	b.n	8010a9c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	781a      	ldrb	r2, [r3, #0]
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	b292      	uxth	r2, r2
 8010a94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1c7      	bne.n	8010a4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	9300      	str	r3, [sp, #0]
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	2140      	movs	r1, #64	; 0x40
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f001 f801 	bl	8011acc <UART_WaitOnFlagUntilTimeout>
 8010aca:	4603      	mov	r3, r0
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d005      	beq.n	8010adc <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010ad8:	2303      	movs	r3, #3
 8010ada:	e006      	b.n	8010aea <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2220      	movs	r2, #32
 8010ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	e000      	b.n	8010aea <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8010ae8:	2302      	movs	r3, #2
  }
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3720      	adds	r7, #32
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
	...

08010af4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08a      	sub	sp, #40	; 0x28
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	4613      	mov	r3, r2
 8010b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b08:	2b20      	cmp	r3, #32
 8010b0a:	d137      	bne.n	8010b7c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d002      	beq.n	8010b18 <HAL_UART_Receive_DMA+0x24>
 8010b12:	88fb      	ldrh	r3, [r7, #6]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d101      	bne.n	8010b1c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e030      	b.n	8010b7e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a18      	ldr	r2, [pc, #96]	; (8010b88 <HAL_UART_Receive_DMA+0x94>)
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d01f      	beq.n	8010b6c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d018      	beq.n	8010b6c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	e853 3f00 	ldrex	r3, [r3]
 8010b46:	613b      	str	r3, [r7, #16]
   return(result);
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	461a      	mov	r2, r3
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	623b      	str	r3, [r7, #32]
 8010b5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b5c:	69f9      	ldr	r1, [r7, #28]
 8010b5e:	6a3a      	ldr	r2, [r7, #32]
 8010b60:	e841 2300 	strex	r3, r2, [r1]
 8010b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d1e6      	bne.n	8010b3a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010b6c:	88fb      	ldrh	r3, [r7, #6]
 8010b6e:	461a      	mov	r2, r3
 8010b70:	68b9      	ldr	r1, [r7, #8]
 8010b72:	68f8      	ldr	r0, [r7, #12]
 8010b74:	f001 f812 	bl	8011b9c <UART_Start_Receive_DMA>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	e000      	b.n	8010b7e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010b7c:	2302      	movs	r3, #2
  }
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3728      	adds	r7, #40	; 0x28
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	40008000 	.word	0x40008000

08010b8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b0ba      	sub	sp, #232	; 0xe8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	69db      	ldr	r3, [r3, #28]
 8010b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010bb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010bb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8010bba:	4013      	ands	r3, r2
 8010bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d11b      	bne.n	8010c00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bcc:	f003 0320 	and.w	r3, r3, #32
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d015      	beq.n	8010c00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bd8:	f003 0320 	and.w	r3, r3, #32
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d105      	bne.n	8010bec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d009      	beq.n	8010c00 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f000 82e3 	beq.w	80111bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	4798      	blx	r3
      }
      return;
 8010bfe:	e2dd      	b.n	80111bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8010c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	f000 8123 	beq.w	8010e50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010c0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010c0e:	4b8d      	ldr	r3, [pc, #564]	; (8010e44 <HAL_UART_IRQHandler+0x2b8>)
 8010c10:	4013      	ands	r3, r2
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d106      	bne.n	8010c24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010c16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010c1a:	4b8b      	ldr	r3, [pc, #556]	; (8010e48 <HAL_UART_IRQHandler+0x2bc>)
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f000 8116 	beq.w	8010e50 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c28:	f003 0301 	and.w	r3, r3, #1
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d011      	beq.n	8010c54 <HAL_UART_IRQHandler+0xc8>
 8010c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00b      	beq.n	8010c54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2201      	movs	r2, #1
 8010c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c4a:	f043 0201 	orr.w	r2, r3, #1
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c58:	f003 0302 	and.w	r3, r3, #2
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d011      	beq.n	8010c84 <HAL_UART_IRQHandler+0xf8>
 8010c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c64:	f003 0301 	and.w	r3, r3, #1
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00b      	beq.n	8010c84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2202      	movs	r2, #2
 8010c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c7a:	f043 0204 	orr.w	r2, r3, #4
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c88:	f003 0304 	and.w	r3, r3, #4
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d011      	beq.n	8010cb4 <HAL_UART_IRQHandler+0x128>
 8010c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c94:	f003 0301 	and.w	r3, r3, #1
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00b      	beq.n	8010cb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2204      	movs	r2, #4
 8010ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010caa:	f043 0202 	orr.w	r2, r3, #2
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cb8:	f003 0308 	and.w	r3, r3, #8
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d017      	beq.n	8010cf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cc4:	f003 0320 	and.w	r3, r3, #32
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d105      	bne.n	8010cd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010ccc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010cd0:	4b5c      	ldr	r3, [pc, #368]	; (8010e44 <HAL_UART_IRQHandler+0x2b8>)
 8010cd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00b      	beq.n	8010cf0 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2208      	movs	r2, #8
 8010cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ce6:	f043 0208 	orr.w	r2, r3, #8
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d012      	beq.n	8010d22 <HAL_UART_IRQHandler+0x196>
 8010cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00c      	beq.n	8010d22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d18:	f043 0220 	orr.w	r2, r3, #32
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 8249 	beq.w	80111c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d32:	f003 0320 	and.w	r3, r3, #32
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d013      	beq.n	8010d62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d3e:	f003 0320 	and.w	r3, r3, #32
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d105      	bne.n	8010d52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d007      	beq.n	8010d62 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d003      	beq.n	8010d62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	689b      	ldr	r3, [r3, #8]
 8010d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d76:	2b40      	cmp	r3, #64	; 0x40
 8010d78:	d005      	beq.n	8010d86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d054      	beq.n	8010e30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 ffef 	bl	8011d6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	689b      	ldr	r3, [r3, #8]
 8010d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d96:	2b40      	cmp	r3, #64	; 0x40
 8010d98:	d146      	bne.n	8010e28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	3308      	adds	r3, #8
 8010da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010da8:	e853 3f00 	ldrex	r3, [r3]
 8010dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	3308      	adds	r3, #8
 8010dc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010dc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010dd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010dd6:	e841 2300 	strex	r3, r2, [r1]
 8010dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1d9      	bne.n	8010d9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d017      	beq.n	8010e20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010df6:	4a15      	ldr	r2, [pc, #84]	; (8010e4c <HAL_UART_IRQHandler+0x2c0>)
 8010df8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f6 fbb2 	bl	800756a <HAL_DMA_Abort_IT>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d019      	beq.n	8010e40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010e1a:	4610      	mov	r0, r2
 8010e1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e1e:	e00f      	b.n	8010e40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 f9f5 	bl	8011210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e26:	e00b      	b.n	8010e40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f000 f9f1 	bl	8011210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e2e:	e007      	b.n	8010e40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f000 f9ed 	bl	8011210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010e3e:	e1bf      	b.n	80111c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e40:	bf00      	nop
    return;
 8010e42:	e1bd      	b.n	80111c0 <HAL_UART_IRQHandler+0x634>
 8010e44:	10000001 	.word	0x10000001
 8010e48:	04000120 	.word	0x04000120
 8010e4c:	08012021 	.word	0x08012021

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	f040 8153 	bne.w	8011100 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e5e:	f003 0310 	and.w	r3, r3, #16
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f000 814c 	beq.w	8011100 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e6c:	f003 0310 	and.w	r3, r3, #16
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f000 8145 	beq.w	8011100 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	2210      	movs	r2, #16
 8010e7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	689b      	ldr	r3, [r3, #8]
 8010e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e88:	2b40      	cmp	r3, #64	; 0x40
 8010e8a:	f040 80bb 	bne.w	8011004 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010e9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f000 818f 	beq.w	80111c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010eac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	f080 8187 	bcs.w	80111c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f003 0320 	and.w	r3, r3, #32
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f040 8087 	bne.w	8010fe2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ee0:	e853 3f00 	ldrex	r3, [r3]
 8010ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	461a      	mov	r2, r3
 8010efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010f0e:	e841 2300 	strex	r3, r2, [r1]
 8010f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1da      	bne.n	8010ed4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	3308      	adds	r3, #8
 8010f24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f28:	e853 3f00 	ldrex	r3, [r3]
 8010f2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f30:	f023 0301 	bic.w	r3, r3, #1
 8010f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	3308      	adds	r3, #8
 8010f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010f42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010f46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f4e:	e841 2300 	strex	r3, r2, [r1]
 8010f52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1e1      	bne.n	8010f1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	3308      	adds	r3, #8
 8010f60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f64:	e853 3f00 	ldrex	r3, [r3]
 8010f68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	3308      	adds	r3, #8
 8010f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010f7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010f80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010f86:	e841 2300 	strex	r3, r2, [r1]
 8010f8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d1e3      	bne.n	8010f5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2220      	movs	r2, #32
 8010f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fa8:	e853 3f00 	ldrex	r3, [r3]
 8010fac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fb0:	f023 0310 	bic.w	r3, r3, #16
 8010fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8010fc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010fca:	e841 2300 	strex	r3, r2, [r1]
 8010fce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d1e4      	bne.n	8010fa0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7f6 fa68 	bl	80074b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2202      	movs	r2, #2
 8010fe6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	1ad3      	subs	r3, r2, r3
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 f911 	bl	8011224 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011002:	e0df      	b.n	80111c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011010:	b29b      	uxth	r3, r3
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801101e:	b29b      	uxth	r3, r3
 8011020:	2b00      	cmp	r3, #0
 8011022:	f000 80d1 	beq.w	80111c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8011026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801102a:	2b00      	cmp	r3, #0
 801102c:	f000 80cc 	beq.w	80111c8 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011038:	e853 3f00 	ldrex	r3, [r3]
 801103c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801103e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	461a      	mov	r2, r3
 801104e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011052:	647b      	str	r3, [r7, #68]	; 0x44
 8011054:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801105a:	e841 2300 	strex	r3, r2, [r1]
 801105e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1e4      	bne.n	8011030 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	3308      	adds	r3, #8
 801106c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011070:	e853 3f00 	ldrex	r3, [r3]
 8011074:	623b      	str	r3, [r7, #32]
   return(result);
 8011076:	6a3b      	ldr	r3, [r7, #32]
 8011078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801107c:	f023 0301 	bic.w	r3, r3, #1
 8011080:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	3308      	adds	r3, #8
 801108a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801108e:	633a      	str	r2, [r7, #48]	; 0x30
 8011090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011096:	e841 2300 	strex	r3, r2, [r1]
 801109a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d1e1      	bne.n	8011066 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2220      	movs	r2, #32
 80110a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2200      	movs	r2, #0
 80110ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2200      	movs	r2, #0
 80110b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	e853 3f00 	ldrex	r3, [r3]
 80110c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f023 0310 	bic.w	r3, r3, #16
 80110ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80110d8:	61fb      	str	r3, [r7, #28]
 80110da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110dc:	69b9      	ldr	r1, [r7, #24]
 80110de:	69fa      	ldr	r2, [r7, #28]
 80110e0:	e841 2300 	strex	r3, r2, [r1]
 80110e4:	617b      	str	r3, [r7, #20]
   return(result);
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1e4      	bne.n	80110b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2202      	movs	r2, #2
 80110f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80110f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80110f6:	4619      	mov	r1, r3
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f893 	bl	8011224 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110fe:	e063      	b.n	80111c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00e      	beq.n	801112a <HAL_UART_IRQHandler+0x59e>
 801110c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011114:	2b00      	cmp	r3, #0
 8011116:	d008      	beq.n	801112a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f000 ffbd 	bl	80120a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011128:	e051      	b.n	80111ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801112a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011132:	2b00      	cmp	r3, #0
 8011134:	d014      	beq.n	8011160 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801113e:	2b00      	cmp	r3, #0
 8011140:	d105      	bne.n	801114e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801114a:	2b00      	cmp	r3, #0
 801114c:	d008      	beq.n	8011160 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011152:	2b00      	cmp	r3, #0
 8011154:	d03a      	beq.n	80111cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	4798      	blx	r3
    }
    return;
 801115e:	e035      	b.n	80111cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011168:	2b00      	cmp	r3, #0
 801116a:	d009      	beq.n	8011180 <HAL_UART_IRQHandler+0x5f4>
 801116c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011174:	2b00      	cmp	r3, #0
 8011176:	d003      	beq.n	8011180 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f000 ff67 	bl	801204c <UART_EndTransmit_IT>
    return;
 801117e:	e026      	b.n	80111ce <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011188:	2b00      	cmp	r3, #0
 801118a:	d009      	beq.n	80111a0 <HAL_UART_IRQHandler+0x614>
 801118c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011194:	2b00      	cmp	r3, #0
 8011196:	d003      	beq.n	80111a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f000 ff96 	bl	80120ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801119e:	e016      	b.n	80111ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80111a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d010      	beq.n	80111ce <HAL_UART_IRQHandler+0x642>
 80111ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	da0c      	bge.n	80111ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f000 ff7e 	bl	80120b6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80111ba:	e008      	b.n	80111ce <HAL_UART_IRQHandler+0x642>
      return;
 80111bc:	bf00      	nop
 80111be:	e006      	b.n	80111ce <HAL_UART_IRQHandler+0x642>
    return;
 80111c0:	bf00      	nop
 80111c2:	e004      	b.n	80111ce <HAL_UART_IRQHandler+0x642>
      return;
 80111c4:	bf00      	nop
 80111c6:	e002      	b.n	80111ce <HAL_UART_IRQHandler+0x642>
      return;
 80111c8:	bf00      	nop
 80111ca:	e000      	b.n	80111ce <HAL_UART_IRQHandler+0x642>
    return;
 80111cc:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80111ce:	37e8      	adds	r7, #232	; 0xe8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80111dc:	bf00      	nop
 80111de:	370c      	adds	r7, #12
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80111f0:	bf00      	nop
 80111f2:	370c      	adds	r7, #12
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011204:	bf00      	nop
 8011206:	370c      	adds	r7, #12
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011210:	b480      	push	{r7}
 8011212:	b083      	sub	sp, #12
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011218:	bf00      	nop
 801121a:	370c      	adds	r7, #12
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr

08011224 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	460b      	mov	r3, r1
 801122e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011230:	bf00      	nop
 8011232:	370c      	adds	r7, #12
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801123c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011240:	b08c      	sub	sp, #48	; 0x30
 8011242:	af00      	add	r7, sp, #0
 8011244:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011246:	2300      	movs	r3, #0
 8011248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	689a      	ldr	r2, [r3, #8]
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	691b      	ldr	r3, [r3, #16]
 8011254:	431a      	orrs	r2, r3
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	695b      	ldr	r3, [r3, #20]
 801125a:	431a      	orrs	r2, r3
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	69db      	ldr	r3, [r3, #28]
 8011260:	4313      	orrs	r3, r2
 8011262:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	4baa      	ldr	r3, [pc, #680]	; (8011514 <UART_SetConfig+0x2d8>)
 801126c:	4013      	ands	r3, r2
 801126e:	697a      	ldr	r2, [r7, #20]
 8011270:	6812      	ldr	r2, [r2, #0]
 8011272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011274:	430b      	orrs	r3, r1
 8011276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	68da      	ldr	r2, [r3, #12]
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	430a      	orrs	r2, r1
 801128c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	699b      	ldr	r3, [r3, #24]
 8011292:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4a9f      	ldr	r2, [pc, #636]	; (8011518 <UART_SetConfig+0x2dc>)
 801129a:	4293      	cmp	r3, r2
 801129c:	d004      	beq.n	80112a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	6a1b      	ldr	r3, [r3, #32]
 80112a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112a4:	4313      	orrs	r3, r2
 80112a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	689b      	ldr	r3, [r3, #8]
 80112ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80112b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80112b6:	697a      	ldr	r2, [r7, #20]
 80112b8:	6812      	ldr	r2, [r2, #0]
 80112ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112bc:	430b      	orrs	r3, r1
 80112be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c6:	f023 010f 	bic.w	r1, r3, #15
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	430a      	orrs	r2, r1
 80112d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4a90      	ldr	r2, [pc, #576]	; (801151c <UART_SetConfig+0x2e0>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d125      	bne.n	801132c <UART_SetConfig+0xf0>
 80112e0:	4b8f      	ldr	r3, [pc, #572]	; (8011520 <UART_SetConfig+0x2e4>)
 80112e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80112e6:	f003 0303 	and.w	r3, r3, #3
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d81a      	bhi.n	8011324 <UART_SetConfig+0xe8>
 80112ee:	a201      	add	r2, pc, #4	; (adr r2, 80112f4 <UART_SetConfig+0xb8>)
 80112f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f4:	08011305 	.word	0x08011305
 80112f8:	08011315 	.word	0x08011315
 80112fc:	0801130d 	.word	0x0801130d
 8011300:	0801131d 	.word	0x0801131d
 8011304:	2301      	movs	r3, #1
 8011306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801130a:	e116      	b.n	801153a <UART_SetConfig+0x2fe>
 801130c:	2302      	movs	r3, #2
 801130e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011312:	e112      	b.n	801153a <UART_SetConfig+0x2fe>
 8011314:	2304      	movs	r3, #4
 8011316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801131a:	e10e      	b.n	801153a <UART_SetConfig+0x2fe>
 801131c:	2308      	movs	r3, #8
 801131e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011322:	e10a      	b.n	801153a <UART_SetConfig+0x2fe>
 8011324:	2310      	movs	r3, #16
 8011326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801132a:	e106      	b.n	801153a <UART_SetConfig+0x2fe>
 801132c:	697b      	ldr	r3, [r7, #20]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4a7c      	ldr	r2, [pc, #496]	; (8011524 <UART_SetConfig+0x2e8>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d138      	bne.n	80113a8 <UART_SetConfig+0x16c>
 8011336:	4b7a      	ldr	r3, [pc, #488]	; (8011520 <UART_SetConfig+0x2e4>)
 8011338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801133c:	f003 030c 	and.w	r3, r3, #12
 8011340:	2b0c      	cmp	r3, #12
 8011342:	d82d      	bhi.n	80113a0 <UART_SetConfig+0x164>
 8011344:	a201      	add	r2, pc, #4	; (adr r2, 801134c <UART_SetConfig+0x110>)
 8011346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801134a:	bf00      	nop
 801134c:	08011381 	.word	0x08011381
 8011350:	080113a1 	.word	0x080113a1
 8011354:	080113a1 	.word	0x080113a1
 8011358:	080113a1 	.word	0x080113a1
 801135c:	08011391 	.word	0x08011391
 8011360:	080113a1 	.word	0x080113a1
 8011364:	080113a1 	.word	0x080113a1
 8011368:	080113a1 	.word	0x080113a1
 801136c:	08011389 	.word	0x08011389
 8011370:	080113a1 	.word	0x080113a1
 8011374:	080113a1 	.word	0x080113a1
 8011378:	080113a1 	.word	0x080113a1
 801137c:	08011399 	.word	0x08011399
 8011380:	2300      	movs	r3, #0
 8011382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011386:	e0d8      	b.n	801153a <UART_SetConfig+0x2fe>
 8011388:	2302      	movs	r3, #2
 801138a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801138e:	e0d4      	b.n	801153a <UART_SetConfig+0x2fe>
 8011390:	2304      	movs	r3, #4
 8011392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011396:	e0d0      	b.n	801153a <UART_SetConfig+0x2fe>
 8011398:	2308      	movs	r3, #8
 801139a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801139e:	e0cc      	b.n	801153a <UART_SetConfig+0x2fe>
 80113a0:	2310      	movs	r3, #16
 80113a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113a6:	e0c8      	b.n	801153a <UART_SetConfig+0x2fe>
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4a5e      	ldr	r2, [pc, #376]	; (8011528 <UART_SetConfig+0x2ec>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d125      	bne.n	80113fe <UART_SetConfig+0x1c2>
 80113b2:	4b5b      	ldr	r3, [pc, #364]	; (8011520 <UART_SetConfig+0x2e4>)
 80113b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80113bc:	2b30      	cmp	r3, #48	; 0x30
 80113be:	d016      	beq.n	80113ee <UART_SetConfig+0x1b2>
 80113c0:	2b30      	cmp	r3, #48	; 0x30
 80113c2:	d818      	bhi.n	80113f6 <UART_SetConfig+0x1ba>
 80113c4:	2b20      	cmp	r3, #32
 80113c6:	d00a      	beq.n	80113de <UART_SetConfig+0x1a2>
 80113c8:	2b20      	cmp	r3, #32
 80113ca:	d814      	bhi.n	80113f6 <UART_SetConfig+0x1ba>
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d002      	beq.n	80113d6 <UART_SetConfig+0x19a>
 80113d0:	2b10      	cmp	r3, #16
 80113d2:	d008      	beq.n	80113e6 <UART_SetConfig+0x1aa>
 80113d4:	e00f      	b.n	80113f6 <UART_SetConfig+0x1ba>
 80113d6:	2300      	movs	r3, #0
 80113d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113dc:	e0ad      	b.n	801153a <UART_SetConfig+0x2fe>
 80113de:	2302      	movs	r3, #2
 80113e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113e4:	e0a9      	b.n	801153a <UART_SetConfig+0x2fe>
 80113e6:	2304      	movs	r3, #4
 80113e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113ec:	e0a5      	b.n	801153a <UART_SetConfig+0x2fe>
 80113ee:	2308      	movs	r3, #8
 80113f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113f4:	e0a1      	b.n	801153a <UART_SetConfig+0x2fe>
 80113f6:	2310      	movs	r3, #16
 80113f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113fc:	e09d      	b.n	801153a <UART_SetConfig+0x2fe>
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	4a4a      	ldr	r2, [pc, #296]	; (801152c <UART_SetConfig+0x2f0>)
 8011404:	4293      	cmp	r3, r2
 8011406:	d125      	bne.n	8011454 <UART_SetConfig+0x218>
 8011408:	4b45      	ldr	r3, [pc, #276]	; (8011520 <UART_SetConfig+0x2e4>)
 801140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801140e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011412:	2bc0      	cmp	r3, #192	; 0xc0
 8011414:	d016      	beq.n	8011444 <UART_SetConfig+0x208>
 8011416:	2bc0      	cmp	r3, #192	; 0xc0
 8011418:	d818      	bhi.n	801144c <UART_SetConfig+0x210>
 801141a:	2b80      	cmp	r3, #128	; 0x80
 801141c:	d00a      	beq.n	8011434 <UART_SetConfig+0x1f8>
 801141e:	2b80      	cmp	r3, #128	; 0x80
 8011420:	d814      	bhi.n	801144c <UART_SetConfig+0x210>
 8011422:	2b00      	cmp	r3, #0
 8011424:	d002      	beq.n	801142c <UART_SetConfig+0x1f0>
 8011426:	2b40      	cmp	r3, #64	; 0x40
 8011428:	d008      	beq.n	801143c <UART_SetConfig+0x200>
 801142a:	e00f      	b.n	801144c <UART_SetConfig+0x210>
 801142c:	2300      	movs	r3, #0
 801142e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011432:	e082      	b.n	801153a <UART_SetConfig+0x2fe>
 8011434:	2302      	movs	r3, #2
 8011436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801143a:	e07e      	b.n	801153a <UART_SetConfig+0x2fe>
 801143c:	2304      	movs	r3, #4
 801143e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011442:	e07a      	b.n	801153a <UART_SetConfig+0x2fe>
 8011444:	2308      	movs	r3, #8
 8011446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801144a:	e076      	b.n	801153a <UART_SetConfig+0x2fe>
 801144c:	2310      	movs	r3, #16
 801144e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011452:	e072      	b.n	801153a <UART_SetConfig+0x2fe>
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4a35      	ldr	r2, [pc, #212]	; (8011530 <UART_SetConfig+0x2f4>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d12a      	bne.n	80114b4 <UART_SetConfig+0x278>
 801145e:	4b30      	ldr	r3, [pc, #192]	; (8011520 <UART_SetConfig+0x2e4>)
 8011460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801146c:	d01a      	beq.n	80114a4 <UART_SetConfig+0x268>
 801146e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011472:	d81b      	bhi.n	80114ac <UART_SetConfig+0x270>
 8011474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011478:	d00c      	beq.n	8011494 <UART_SetConfig+0x258>
 801147a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801147e:	d815      	bhi.n	80114ac <UART_SetConfig+0x270>
 8011480:	2b00      	cmp	r3, #0
 8011482:	d003      	beq.n	801148c <UART_SetConfig+0x250>
 8011484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011488:	d008      	beq.n	801149c <UART_SetConfig+0x260>
 801148a:	e00f      	b.n	80114ac <UART_SetConfig+0x270>
 801148c:	2300      	movs	r3, #0
 801148e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011492:	e052      	b.n	801153a <UART_SetConfig+0x2fe>
 8011494:	2302      	movs	r3, #2
 8011496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801149a:	e04e      	b.n	801153a <UART_SetConfig+0x2fe>
 801149c:	2304      	movs	r3, #4
 801149e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114a2:	e04a      	b.n	801153a <UART_SetConfig+0x2fe>
 80114a4:	2308      	movs	r3, #8
 80114a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114aa:	e046      	b.n	801153a <UART_SetConfig+0x2fe>
 80114ac:	2310      	movs	r3, #16
 80114ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114b2:	e042      	b.n	801153a <UART_SetConfig+0x2fe>
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4a17      	ldr	r2, [pc, #92]	; (8011518 <UART_SetConfig+0x2dc>)
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d13a      	bne.n	8011534 <UART_SetConfig+0x2f8>
 80114be:	4b18      	ldr	r3, [pc, #96]	; (8011520 <UART_SetConfig+0x2e4>)
 80114c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80114c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80114cc:	d01a      	beq.n	8011504 <UART_SetConfig+0x2c8>
 80114ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80114d2:	d81b      	bhi.n	801150c <UART_SetConfig+0x2d0>
 80114d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114d8:	d00c      	beq.n	80114f4 <UART_SetConfig+0x2b8>
 80114da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114de:	d815      	bhi.n	801150c <UART_SetConfig+0x2d0>
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d003      	beq.n	80114ec <UART_SetConfig+0x2b0>
 80114e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114e8:	d008      	beq.n	80114fc <UART_SetConfig+0x2c0>
 80114ea:	e00f      	b.n	801150c <UART_SetConfig+0x2d0>
 80114ec:	2300      	movs	r3, #0
 80114ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114f2:	e022      	b.n	801153a <UART_SetConfig+0x2fe>
 80114f4:	2302      	movs	r3, #2
 80114f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114fa:	e01e      	b.n	801153a <UART_SetConfig+0x2fe>
 80114fc:	2304      	movs	r3, #4
 80114fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011502:	e01a      	b.n	801153a <UART_SetConfig+0x2fe>
 8011504:	2308      	movs	r3, #8
 8011506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801150a:	e016      	b.n	801153a <UART_SetConfig+0x2fe>
 801150c:	2310      	movs	r3, #16
 801150e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011512:	e012      	b.n	801153a <UART_SetConfig+0x2fe>
 8011514:	cfff69f3 	.word	0xcfff69f3
 8011518:	40008000 	.word	0x40008000
 801151c:	40013800 	.word	0x40013800
 8011520:	40021000 	.word	0x40021000
 8011524:	40004400 	.word	0x40004400
 8011528:	40004800 	.word	0x40004800
 801152c:	40004c00 	.word	0x40004c00
 8011530:	40005000 	.word	0x40005000
 8011534:	2310      	movs	r3, #16
 8011536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	4aae      	ldr	r2, [pc, #696]	; (80117f8 <UART_SetConfig+0x5bc>)
 8011540:	4293      	cmp	r3, r2
 8011542:	f040 8097 	bne.w	8011674 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801154a:	2b08      	cmp	r3, #8
 801154c:	d823      	bhi.n	8011596 <UART_SetConfig+0x35a>
 801154e:	a201      	add	r2, pc, #4	; (adr r2, 8011554 <UART_SetConfig+0x318>)
 8011550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011554:	08011579 	.word	0x08011579
 8011558:	08011597 	.word	0x08011597
 801155c:	08011581 	.word	0x08011581
 8011560:	08011597 	.word	0x08011597
 8011564:	08011587 	.word	0x08011587
 8011568:	08011597 	.word	0x08011597
 801156c:	08011597 	.word	0x08011597
 8011570:	08011597 	.word	0x08011597
 8011574:	0801158f 	.word	0x0801158f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011578:	f7f9 fee2 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 801157c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801157e:	e010      	b.n	80115a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011580:	4b9e      	ldr	r3, [pc, #632]	; (80117fc <UART_SetConfig+0x5c0>)
 8011582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011584:	e00d      	b.n	80115a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011586:	f7f9 fe43 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 801158a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801158c:	e009      	b.n	80115a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801158e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011594:	e005      	b.n	80115a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8011596:	2300      	movs	r3, #0
 8011598:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801159a:	2301      	movs	r3, #1
 801159c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80115a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80115a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	f000 8130 	beq.w	801180a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ae:	4a94      	ldr	r2, [pc, #592]	; (8011800 <UART_SetConfig+0x5c4>)
 80115b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115b4:	461a      	mov	r2, r3
 80115b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80115bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	685a      	ldr	r2, [r3, #4]
 80115c2:	4613      	mov	r3, r2
 80115c4:	005b      	lsls	r3, r3, #1
 80115c6:	4413      	add	r3, r2
 80115c8:	69ba      	ldr	r2, [r7, #24]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d305      	bcc.n	80115da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115d4:	69ba      	ldr	r2, [r7, #24]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d903      	bls.n	80115e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80115da:	2301      	movs	r3, #1
 80115dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80115e0:	e113      	b.n	801180a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e4:	2200      	movs	r2, #0
 80115e6:	60bb      	str	r3, [r7, #8]
 80115e8:	60fa      	str	r2, [r7, #12]
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ee:	4a84      	ldr	r2, [pc, #528]	; (8011800 <UART_SetConfig+0x5c4>)
 80115f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	2200      	movs	r2, #0
 80115f8:	603b      	str	r3, [r7, #0]
 80115fa:	607a      	str	r2, [r7, #4]
 80115fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011600:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011604:	f7ef fb38 	bl	8000c78 <__aeabi_uldivmod>
 8011608:	4602      	mov	r2, r0
 801160a:	460b      	mov	r3, r1
 801160c:	4610      	mov	r0, r2
 801160e:	4619      	mov	r1, r3
 8011610:	f04f 0200 	mov.w	r2, #0
 8011614:	f04f 0300 	mov.w	r3, #0
 8011618:	020b      	lsls	r3, r1, #8
 801161a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801161e:	0202      	lsls	r2, r0, #8
 8011620:	6979      	ldr	r1, [r7, #20]
 8011622:	6849      	ldr	r1, [r1, #4]
 8011624:	0849      	lsrs	r1, r1, #1
 8011626:	2000      	movs	r0, #0
 8011628:	460c      	mov	r4, r1
 801162a:	4605      	mov	r5, r0
 801162c:	eb12 0804 	adds.w	r8, r2, r4
 8011630:	eb43 0905 	adc.w	r9, r3, r5
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	2200      	movs	r2, #0
 801163a:	469a      	mov	sl, r3
 801163c:	4693      	mov	fp, r2
 801163e:	4652      	mov	r2, sl
 8011640:	465b      	mov	r3, fp
 8011642:	4640      	mov	r0, r8
 8011644:	4649      	mov	r1, r9
 8011646:	f7ef fb17 	bl	8000c78 <__aeabi_uldivmod>
 801164a:	4602      	mov	r2, r0
 801164c:	460b      	mov	r3, r1
 801164e:	4613      	mov	r3, r2
 8011650:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011652:	6a3b      	ldr	r3, [r7, #32]
 8011654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011658:	d308      	bcc.n	801166c <UART_SetConfig+0x430>
 801165a:	6a3b      	ldr	r3, [r7, #32]
 801165c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011660:	d204      	bcs.n	801166c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	6a3a      	ldr	r2, [r7, #32]
 8011668:	60da      	str	r2, [r3, #12]
 801166a:	e0ce      	b.n	801180a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801166c:	2301      	movs	r3, #1
 801166e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011672:	e0ca      	b.n	801180a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	69db      	ldr	r3, [r3, #28]
 8011678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801167c:	d166      	bne.n	801174c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801167e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011682:	2b08      	cmp	r3, #8
 8011684:	d827      	bhi.n	80116d6 <UART_SetConfig+0x49a>
 8011686:	a201      	add	r2, pc, #4	; (adr r2, 801168c <UART_SetConfig+0x450>)
 8011688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801168c:	080116b1 	.word	0x080116b1
 8011690:	080116b9 	.word	0x080116b9
 8011694:	080116c1 	.word	0x080116c1
 8011698:	080116d7 	.word	0x080116d7
 801169c:	080116c7 	.word	0x080116c7
 80116a0:	080116d7 	.word	0x080116d7
 80116a4:	080116d7 	.word	0x080116d7
 80116a8:	080116d7 	.word	0x080116d7
 80116ac:	080116cf 	.word	0x080116cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116b0:	f7f9 fe46 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 80116b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80116b6:	e014      	b.n	80116e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116b8:	f7f9 fe58 	bl	800b36c <HAL_RCC_GetPCLK2Freq>
 80116bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80116be:	e010      	b.n	80116e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80116c0:	4b4e      	ldr	r3, [pc, #312]	; (80117fc <UART_SetConfig+0x5c0>)
 80116c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80116c4:	e00d      	b.n	80116e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80116c6:	f7f9 fda3 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 80116ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80116cc:	e009      	b.n	80116e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80116d4:	e005      	b.n	80116e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80116d6:	2300      	movs	r3, #0
 80116d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80116da:	2301      	movs	r3, #1
 80116dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80116e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	f000 8090 	beq.w	801180a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ee:	4a44      	ldr	r2, [pc, #272]	; (8011800 <UART_SetConfig+0x5c4>)
 80116f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116f4:	461a      	mov	r2, r3
 80116f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80116fc:	005a      	lsls	r2, r3, #1
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	085b      	lsrs	r3, r3, #1
 8011704:	441a      	add	r2, r3
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	fbb2 f3f3 	udiv	r3, r2, r3
 801170e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011710:	6a3b      	ldr	r3, [r7, #32]
 8011712:	2b0f      	cmp	r3, #15
 8011714:	d916      	bls.n	8011744 <UART_SetConfig+0x508>
 8011716:	6a3b      	ldr	r3, [r7, #32]
 8011718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801171c:	d212      	bcs.n	8011744 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801171e:	6a3b      	ldr	r3, [r7, #32]
 8011720:	b29b      	uxth	r3, r3
 8011722:	f023 030f 	bic.w	r3, r3, #15
 8011726:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011728:	6a3b      	ldr	r3, [r7, #32]
 801172a:	085b      	lsrs	r3, r3, #1
 801172c:	b29b      	uxth	r3, r3
 801172e:	f003 0307 	and.w	r3, r3, #7
 8011732:	b29a      	uxth	r2, r3
 8011734:	8bfb      	ldrh	r3, [r7, #30]
 8011736:	4313      	orrs	r3, r2
 8011738:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	8bfa      	ldrh	r2, [r7, #30]
 8011740:	60da      	str	r2, [r3, #12]
 8011742:	e062      	b.n	801180a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011744:	2301      	movs	r3, #1
 8011746:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801174a:	e05e      	b.n	801180a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801174c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011750:	2b08      	cmp	r3, #8
 8011752:	d828      	bhi.n	80117a6 <UART_SetConfig+0x56a>
 8011754:	a201      	add	r2, pc, #4	; (adr r2, 801175c <UART_SetConfig+0x520>)
 8011756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801175a:	bf00      	nop
 801175c:	08011781 	.word	0x08011781
 8011760:	08011789 	.word	0x08011789
 8011764:	08011791 	.word	0x08011791
 8011768:	080117a7 	.word	0x080117a7
 801176c:	08011797 	.word	0x08011797
 8011770:	080117a7 	.word	0x080117a7
 8011774:	080117a7 	.word	0x080117a7
 8011778:	080117a7 	.word	0x080117a7
 801177c:	0801179f 	.word	0x0801179f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011780:	f7f9 fdde 	bl	800b340 <HAL_RCC_GetPCLK1Freq>
 8011784:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011786:	e014      	b.n	80117b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011788:	f7f9 fdf0 	bl	800b36c <HAL_RCC_GetPCLK2Freq>
 801178c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801178e:	e010      	b.n	80117b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011790:	4b1a      	ldr	r3, [pc, #104]	; (80117fc <UART_SetConfig+0x5c0>)
 8011792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011794:	e00d      	b.n	80117b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011796:	f7f9 fd3b 	bl	800b210 <HAL_RCC_GetSysClockFreq>
 801179a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801179c:	e009      	b.n	80117b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801179e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80117a4:	e005      	b.n	80117b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80117a6:	2300      	movs	r3, #0
 80117a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80117aa:	2301      	movs	r3, #1
 80117ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80117b0:	bf00      	nop
    }

    if (pclk != 0U)
 80117b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d028      	beq.n	801180a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117bc:	4a10      	ldr	r2, [pc, #64]	; (8011800 <UART_SetConfig+0x5c4>)
 80117be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117c2:	461a      	mov	r2, r3
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	085b      	lsrs	r3, r3, #1
 80117d0:	441a      	add	r2, r3
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80117da:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	2b0f      	cmp	r3, #15
 80117e0:	d910      	bls.n	8011804 <UART_SetConfig+0x5c8>
 80117e2:	6a3b      	ldr	r3, [r7, #32]
 80117e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117e8:	d20c      	bcs.n	8011804 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	60da      	str	r2, [r3, #12]
 80117f4:	e009      	b.n	801180a <UART_SetConfig+0x5ce>
 80117f6:	bf00      	nop
 80117f8:	40008000 	.word	0x40008000
 80117fc:	00f42400 	.word	0x00f42400
 8011800:	0801cc38 	.word	0x0801cc38
      }
      else
      {
        ret = HAL_ERROR;
 8011804:	2301      	movs	r3, #1
 8011806:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	2201      	movs	r2, #1
 801180e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	2201      	movs	r2, #1
 8011816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	2200      	movs	r2, #0
 801181e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	2200      	movs	r2, #0
 8011824:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011826:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801182a:	4618      	mov	r0, r3
 801182c:	3730      	adds	r7, #48	; 0x30
 801182e:	46bd      	mov	sp, r7
 8011830:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011840:	f003 0308 	and.w	r3, r3, #8
 8011844:	2b00      	cmp	r3, #0
 8011846:	d00a      	beq.n	801185e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	430a      	orrs	r2, r1
 801185c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011862:	f003 0301 	and.w	r3, r3, #1
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00a      	beq.n	8011880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	430a      	orrs	r2, r1
 801187e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011884:	f003 0302 	and.w	r3, r3, #2
 8011888:	2b00      	cmp	r3, #0
 801188a:	d00a      	beq.n	80118a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	430a      	orrs	r2, r1
 80118a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a6:	f003 0304 	and.w	r3, r3, #4
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d00a      	beq.n	80118c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	430a      	orrs	r2, r1
 80118c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c8:	f003 0310 	and.w	r3, r3, #16
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d00a      	beq.n	80118e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	689b      	ldr	r3, [r3, #8]
 80118d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	430a      	orrs	r2, r1
 80118e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ea:	f003 0320 	and.w	r3, r3, #32
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d00a      	beq.n	8011908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	689b      	ldr	r3, [r3, #8]
 80118f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	430a      	orrs	r2, r1
 8011906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801190c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011910:	2b00      	cmp	r3, #0
 8011912:	d01a      	beq.n	801194a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	430a      	orrs	r2, r1
 8011928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801192e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011932:	d10a      	bne.n	801194a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	430a      	orrs	r2, r1
 8011948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011952:	2b00      	cmp	r3, #0
 8011954:	d00a      	beq.n	801196c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	430a      	orrs	r2, r1
 801196a:	605a      	str	r2, [r3, #4]
  }
}
 801196c:	bf00      	nop
 801196e:	370c      	adds	r7, #12
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr

08011978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b098      	sub	sp, #96	; 0x60
 801197c:	af02      	add	r7, sp, #8
 801197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2200      	movs	r2, #0
 8011984:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011988:	f7f5 fb2e 	bl	8006fe8 <HAL_GetTick>
 801198c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f003 0308 	and.w	r3, r3, #8
 8011998:	2b08      	cmp	r3, #8
 801199a:	d12f      	bne.n	80119fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801199c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119a0:	9300      	str	r3, [sp, #0]
 80119a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119a4:	2200      	movs	r2, #0
 80119a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f88e 	bl	8011acc <UART_WaitOnFlagUntilTimeout>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d022      	beq.n	80119fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119be:	e853 3f00 	ldrex	r3, [r3]
 80119c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80119c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119ca:	653b      	str	r3, [r7, #80]	; 0x50
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	461a      	mov	r2, r3
 80119d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119d4:	647b      	str	r3, [r7, #68]	; 0x44
 80119d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119dc:	e841 2300 	strex	r3, r2, [r1]
 80119e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d1e6      	bne.n	80119b6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2220      	movs	r2, #32
 80119ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119f8:	2303      	movs	r3, #3
 80119fa:	e063      	b.n	8011ac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f003 0304 	and.w	r3, r3, #4
 8011a06:	2b04      	cmp	r3, #4
 8011a08:	d149      	bne.n	8011a9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a0e:	9300      	str	r3, [sp, #0]
 8011a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a12:	2200      	movs	r2, #0
 8011a14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f000 f857 	bl	8011acc <UART_WaitOnFlagUntilTimeout>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d03c      	beq.n	8011a9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2c:	e853 3f00 	ldrex	r3, [r3]
 8011a30:	623b      	str	r3, [r7, #32]
   return(result);
 8011a32:	6a3b      	ldr	r3, [r7, #32]
 8011a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	461a      	mov	r2, r3
 8011a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a42:	633b      	str	r3, [r7, #48]	; 0x30
 8011a44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a4a:	e841 2300 	strex	r3, r2, [r1]
 8011a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1e6      	bne.n	8011a24 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	3308      	adds	r3, #8
 8011a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	e853 3f00 	ldrex	r3, [r3]
 8011a64:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	f023 0301 	bic.w	r3, r3, #1
 8011a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	3308      	adds	r3, #8
 8011a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a76:	61fa      	str	r2, [r7, #28]
 8011a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a7a:	69b9      	ldr	r1, [r7, #24]
 8011a7c:	69fa      	ldr	r2, [r7, #28]
 8011a7e:	e841 2300 	strex	r3, r2, [r1]
 8011a82:	617b      	str	r3, [r7, #20]
   return(result);
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d1e5      	bne.n	8011a56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2220      	movs	r2, #32
 8011a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2200      	movs	r2, #0
 8011a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a9a:	2303      	movs	r3, #3
 8011a9c:	e012      	b.n	8011ac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2220      	movs	r2, #32
 8011aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2220      	movs	r2, #32
 8011aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2200      	movs	r2, #0
 8011abe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ac2:	2300      	movs	r3, #0
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3758      	adds	r7, #88	; 0x58
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	603b      	str	r3, [r7, #0]
 8011ad8:	4613      	mov	r3, r2
 8011ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011adc:	e049      	b.n	8011b72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ae4:	d045      	beq.n	8011b72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ae6:	f7f5 fa7f 	bl	8006fe8 <HAL_GetTick>
 8011aea:	4602      	mov	r2, r0
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	69ba      	ldr	r2, [r7, #24]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d302      	bcc.n	8011afc <UART_WaitOnFlagUntilTimeout+0x30>
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d101      	bne.n	8011b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011afc:	2303      	movs	r3, #3
 8011afe:	e048      	b.n	8011b92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f003 0304 	and.w	r3, r3, #4
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d031      	beq.n	8011b72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	69db      	ldr	r3, [r3, #28]
 8011b14:	f003 0308 	and.w	r3, r3, #8
 8011b18:	2b08      	cmp	r3, #8
 8011b1a:	d110      	bne.n	8011b3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	2208      	movs	r2, #8
 8011b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b24:	68f8      	ldr	r0, [r7, #12]
 8011b26:	f000 f920 	bl	8011d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2208      	movs	r2, #8
 8011b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2200      	movs	r2, #0
 8011b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	e029      	b.n	8011b92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	69db      	ldr	r3, [r3, #28]
 8011b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b4c:	d111      	bne.n	8011b72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f000 f906 	bl	8011d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2220      	movs	r2, #32
 8011b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011b6e:	2303      	movs	r3, #3
 8011b70:	e00f      	b.n	8011b92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	69da      	ldr	r2, [r3, #28]
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	4013      	ands	r3, r2
 8011b7c:	68ba      	ldr	r2, [r7, #8]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	bf0c      	ite	eq
 8011b82:	2301      	moveq	r3, #1
 8011b84:	2300      	movne	r3, #0
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	461a      	mov	r2, r3
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d0a6      	beq.n	8011ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b90:	2300      	movs	r3, #0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
	...

08011b9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b096      	sub	sp, #88	; 0x58
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	88fa      	ldrh	r2, [r7, #6]
 8011bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2222      	movs	r2, #34	; 0x22
 8011bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d02d      	beq.n	8011c2e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bd8:	4a40      	ldr	r2, [pc, #256]	; (8011cdc <UART_Start_Receive_DMA+0x140>)
 8011bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011be2:	4a3f      	ldr	r2, [pc, #252]	; (8011ce0 <UART_Start_Receive_DMA+0x144>)
 8011be4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bec:	4a3d      	ldr	r2, [pc, #244]	; (8011ce4 <UART_Start_Receive_DMA+0x148>)
 8011bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	3324      	adds	r3, #36	; 0x24
 8011c06:	4619      	mov	r1, r3
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	88fb      	ldrh	r3, [r7, #6]
 8011c10:	f7f5 fbd4 	bl	80073bc <HAL_DMA_Start_IT>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d009      	beq.n	8011c2e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2210      	movs	r2, #16
 8011c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2220      	movs	r2, #32
 8011c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	e051      	b.n	8011cd2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	691b      	ldr	r3, [r3, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d018      	beq.n	8011c68 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c3e:	e853 3f00 	ldrex	r3, [r3]
 8011c42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	461a      	mov	r2, r3
 8011c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c56:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c5c:	e841 2300 	strex	r3, r2, [r1]
 8011c60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d1e6      	bne.n	8011c36 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	3308      	adds	r3, #8
 8011c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c72:	e853 3f00 	ldrex	r3, [r3]
 8011c76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7a:	f043 0301 	orr.w	r3, r3, #1
 8011c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	3308      	adds	r3, #8
 8011c86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011c88:	637a      	str	r2, [r7, #52]	; 0x34
 8011c8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c90:	e841 2300 	strex	r3, r2, [r1]
 8011c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1e5      	bne.n	8011c68 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	3308      	adds	r3, #8
 8011ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	e853 3f00 	ldrex	r3, [r3]
 8011caa:	613b      	str	r3, [r7, #16]
   return(result);
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	3308      	adds	r3, #8
 8011cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cbc:	623a      	str	r2, [r7, #32]
 8011cbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc0:	69f9      	ldr	r1, [r7, #28]
 8011cc2:	6a3a      	ldr	r2, [r7, #32]
 8011cc4:	e841 2300 	strex	r3, r2, [r1]
 8011cc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8011cca:	69bb      	ldr	r3, [r7, #24]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d1e5      	bne.n	8011c9c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3758      	adds	r7, #88	; 0x58
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	08011e37 	.word	0x08011e37
 8011ce0:	08011f63 	.word	0x08011f63
 8011ce4:	08011fa1 	.word	0x08011fa1

08011ce8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b08f      	sub	sp, #60	; 0x3c
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cf6:	6a3b      	ldr	r3, [r7, #32]
 8011cf8:	e853 3f00 	ldrex	r3, [r3]
 8011cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011d04:	637b      	str	r3, [r7, #52]	; 0x34
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d10:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d16:	e841 2300 	strex	r3, r2, [r1]
 8011d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1e6      	bne.n	8011cf0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	3308      	adds	r3, #8
 8011d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	e853 3f00 	ldrex	r3, [r3]
 8011d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011d38:	633b      	str	r3, [r7, #48]	; 0x30
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	3308      	adds	r3, #8
 8011d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d42:	61ba      	str	r2, [r7, #24]
 8011d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d46:	6979      	ldr	r1, [r7, #20]
 8011d48:	69ba      	ldr	r2, [r7, #24]
 8011d4a:	e841 2300 	strex	r3, r2, [r1]
 8011d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1e5      	bne.n	8011d22 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2220      	movs	r2, #32
 8011d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011d5e:	bf00      	nop
 8011d60:	373c      	adds	r7, #60	; 0x3c
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011d6a:	b480      	push	{r7}
 8011d6c:	b095      	sub	sp, #84	; 0x54
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d7a:	e853 3f00 	ldrex	r3, [r3]
 8011d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d90:	643b      	str	r3, [r7, #64]	; 0x40
 8011d92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d98:	e841 2300 	strex	r3, r2, [r1]
 8011d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d1e6      	bne.n	8011d72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	3308      	adds	r3, #8
 8011daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	e853 3f00 	ldrex	r3, [r3]
 8011db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011dba:	f023 0301 	bic.w	r3, r3, #1
 8011dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	3308      	adds	r3, #8
 8011dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dd0:	e841 2300 	strex	r3, r2, [r1]
 8011dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d1e3      	bne.n	8011da4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d118      	bne.n	8011e16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	e853 3f00 	ldrex	r3, [r3]
 8011df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	f023 0310 	bic.w	r3, r3, #16
 8011df8:	647b      	str	r3, [r7, #68]	; 0x44
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	461a      	mov	r2, r3
 8011e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e02:	61bb      	str	r3, [r7, #24]
 8011e04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e06:	6979      	ldr	r1, [r7, #20]
 8011e08:	69ba      	ldr	r2, [r7, #24]
 8011e0a:	e841 2300 	strex	r3, r2, [r1]
 8011e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d1e6      	bne.n	8011de4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2220      	movs	r2, #32
 8011e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2200      	movs	r2, #0
 8011e22:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011e2a:	bf00      	nop
 8011e2c:	3754      	adds	r7, #84	; 0x54
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr

08011e36 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b09c      	sub	sp, #112	; 0x70
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e42:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f003 0320 	and.w	r3, r3, #32
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d171      	bne.n	8011f36 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8011e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e54:	2200      	movs	r2, #0
 8011e56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e62:	e853 3f00 	ldrex	r3, [r3]
 8011e66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8011e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	461a      	mov	r2, r3
 8011e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e78:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e80:	e841 2300 	strex	r3, r2, [r1]
 8011e84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1e6      	bne.n	8011e5a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	3308      	adds	r3, #8
 8011e92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e96:	e853 3f00 	ldrex	r3, [r3]
 8011e9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e9e:	f023 0301 	bic.w	r3, r3, #1
 8011ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8011ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	3308      	adds	r3, #8
 8011eaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011eac:	647a      	str	r2, [r7, #68]	; 0x44
 8011eae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011eb4:	e841 2300 	strex	r3, r2, [r1]
 8011eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1e5      	bne.n	8011e8c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	3308      	adds	r3, #8
 8011ec6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eca:	e853 3f00 	ldrex	r3, [r3]
 8011ece:	623b      	str	r3, [r7, #32]
   return(result);
 8011ed0:	6a3b      	ldr	r3, [r7, #32]
 8011ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ed6:	663b      	str	r3, [r7, #96]	; 0x60
 8011ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	3308      	adds	r3, #8
 8011ede:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ee0:	633a      	str	r2, [r7, #48]	; 0x30
 8011ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ee8:	e841 2300 	strex	r3, r2, [r1]
 8011eec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d1e5      	bne.n	8011ec0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ef6:	2220      	movs	r2, #32
 8011ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d118      	bne.n	8011f36 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	e853 3f00 	ldrex	r3, [r3]
 8011f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	f023 0310 	bic.w	r3, r3, #16
 8011f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	461a      	mov	r2, r3
 8011f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f22:	61fb      	str	r3, [r7, #28]
 8011f24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f26:	69b9      	ldr	r1, [r7, #24]
 8011f28:	69fa      	ldr	r2, [r7, #28]
 8011f2a:	e841 2300 	strex	r3, r2, [r1]
 8011f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1e6      	bne.n	8011f04 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f38:	2200      	movs	r2, #0
 8011f3a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d107      	bne.n	8011f54 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011f4e:	f7ff f969 	bl	8011224 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011f52:	e002      	b.n	8011f5a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8011f54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011f56:	f7ff f947 	bl	80111e8 <HAL_UART_RxCpltCallback>
}
 8011f5a:	bf00      	nop
 8011f5c:	3770      	adds	r7, #112	; 0x70
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b084      	sub	sp, #16
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2201      	movs	r2, #1
 8011f74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d109      	bne.n	8011f92 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f84:	085b      	lsrs	r3, r3, #1
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	4619      	mov	r1, r3
 8011f8a:	68f8      	ldr	r0, [r7, #12]
 8011f8c:	f7ff f94a 	bl	8011224 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011f90:	e002      	b.n	8011f98 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011f92:	68f8      	ldr	r0, [r7, #12]
 8011f94:	f7ff f932 	bl	80111fc <HAL_UART_RxHalfCpltCallback>
}
 8011f98:	bf00      	nop
 8011f9a:	3710      	adds	r7, #16
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b086      	sub	sp, #24
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fb4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fbc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	689b      	ldr	r3, [r3, #8]
 8011fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fc8:	2b80      	cmp	r3, #128	; 0x80
 8011fca:	d109      	bne.n	8011fe0 <UART_DMAError+0x40>
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	2b21      	cmp	r3, #33	; 0x21
 8011fd0:	d106      	bne.n	8011fe0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011fda:	6978      	ldr	r0, [r7, #20]
 8011fdc:	f7ff fe84 	bl	8011ce8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fea:	2b40      	cmp	r3, #64	; 0x40
 8011fec:	d109      	bne.n	8012002 <UART_DMAError+0x62>
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2b22      	cmp	r3, #34	; 0x22
 8011ff2:	d106      	bne.n	8012002 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011ffc:	6978      	ldr	r0, [r7, #20]
 8011ffe:	f7ff feb4 	bl	8011d6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012008:	f043 0210 	orr.w	r2, r3, #16
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012012:	6978      	ldr	r0, [r7, #20]
 8012014:	f7ff f8fc 	bl	8011210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012018:	bf00      	nop
 801201a:	3718      	adds	r7, #24
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801202c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	2200      	movs	r2, #0
 8012032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2200      	movs	r2, #0
 801203a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801203e:	68f8      	ldr	r0, [r7, #12]
 8012040:	f7ff f8e6 	bl	8011210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012044:	bf00      	nop
 8012046:	3710      	adds	r7, #16
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b088      	sub	sp, #32
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	e853 3f00 	ldrex	r3, [r3]
 8012060:	60bb      	str	r3, [r7, #8]
   return(result);
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012068:	61fb      	str	r3, [r7, #28]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	461a      	mov	r2, r3
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	61bb      	str	r3, [r7, #24]
 8012074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012076:	6979      	ldr	r1, [r7, #20]
 8012078:	69ba      	ldr	r2, [r7, #24]
 801207a:	e841 2300 	strex	r3, r2, [r1]
 801207e:	613b      	str	r3, [r7, #16]
   return(result);
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d1e6      	bne.n	8012054 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2220      	movs	r2, #32
 801208a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2200      	movs	r2, #0
 8012092:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ff f89d 	bl	80111d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801209a:	bf00      	nop
 801209c:	3720      	adds	r7, #32
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80120a2:	b480      	push	{r7}
 80120a4:	b083      	sub	sp, #12
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80120aa:	bf00      	nop
 80120ac:	370c      	adds	r7, #12
 80120ae:	46bd      	mov	sp, r7
 80120b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b4:	4770      	bx	lr

080120b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80120b6:	b480      	push	{r7}
 80120b8:	b083      	sub	sp, #12
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80120be:	bf00      	nop
 80120c0:	370c      	adds	r7, #12
 80120c2:	46bd      	mov	sp, r7
 80120c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c8:	4770      	bx	lr

080120ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80120ca:	b480      	push	{r7}
 80120cc:	b083      	sub	sp, #12
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80120d2:	bf00      	nop
 80120d4:	370c      	adds	r7, #12
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr

080120de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80120de:	b480      	push	{r7}
 80120e0:	b085      	sub	sp, #20
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d101      	bne.n	80120f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80120f0:	2302      	movs	r3, #2
 80120f2:	e027      	b.n	8012144 <HAL_UARTEx_DisableFifoMode+0x66>
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2201      	movs	r2, #1
 80120f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2224      	movs	r2, #36	; 0x24
 8012100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f022 0201 	bic.w	r2, r2, #1
 801211a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012122:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	68fa      	ldr	r2, [r7, #12]
 8012130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2220      	movs	r2, #32
 8012136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2200      	movs	r2, #0
 801213e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012142:	2300      	movs	r3, #0
}
 8012144:	4618      	mov	r0, r3
 8012146:	3714      	adds	r7, #20
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012160:	2b01      	cmp	r3, #1
 8012162:	d101      	bne.n	8012168 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012164:	2302      	movs	r3, #2
 8012166:	e02d      	b.n	80121c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2224      	movs	r2, #36	; 0x24
 8012174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	681a      	ldr	r2, [r3, #0]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f022 0201 	bic.w	r2, r2, #1
 801218e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	689b      	ldr	r3, [r3, #8]
 8012196:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	430a      	orrs	r2, r1
 80121a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 f84f 	bl	8012248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	68fa      	ldr	r2, [r7, #12]
 80121b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2220      	movs	r2, #32
 80121b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2200      	movs	r2, #0
 80121be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121c2:	2300      	movs	r3, #0
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d101      	bne.n	80121e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80121e0:	2302      	movs	r3, #2
 80121e2:	e02d      	b.n	8012240 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2201      	movs	r2, #1
 80121e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2224      	movs	r2, #36	; 0x24
 80121f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	f022 0201 	bic.w	r2, r2, #1
 801220a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	689b      	ldr	r3, [r3, #8]
 8012212:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	430a      	orrs	r2, r1
 801221e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 f811 	bl	8012248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2220      	movs	r2, #32
 8012232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2200      	movs	r2, #0
 801223a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801223e:	2300      	movs	r3, #0
}
 8012240:	4618      	mov	r0, r3
 8012242:	3710      	adds	r7, #16
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012248:	b480      	push	{r7}
 801224a:	b085      	sub	sp, #20
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012254:	2b00      	cmp	r3, #0
 8012256:	d108      	bne.n	801226a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2201      	movs	r2, #1
 801225c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2201      	movs	r2, #1
 8012264:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012268:	e031      	b.n	80122ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801226a:	2308      	movs	r3, #8
 801226c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801226e:	2308      	movs	r3, #8
 8012270:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	0e5b      	lsrs	r3, r3, #25
 801227a:	b2db      	uxtb	r3, r3
 801227c:	f003 0307 	and.w	r3, r3, #7
 8012280:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	689b      	ldr	r3, [r3, #8]
 8012288:	0f5b      	lsrs	r3, r3, #29
 801228a:	b2db      	uxtb	r3, r3
 801228c:	f003 0307 	and.w	r3, r3, #7
 8012290:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012292:	7bbb      	ldrb	r3, [r7, #14]
 8012294:	7b3a      	ldrb	r2, [r7, #12]
 8012296:	4911      	ldr	r1, [pc, #68]	; (80122dc <UARTEx_SetNbDataToProcess+0x94>)
 8012298:	5c8a      	ldrb	r2, [r1, r2]
 801229a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801229e:	7b3a      	ldrb	r2, [r7, #12]
 80122a0:	490f      	ldr	r1, [pc, #60]	; (80122e0 <UARTEx_SetNbDataToProcess+0x98>)
 80122a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80122a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80122b0:	7bfb      	ldrb	r3, [r7, #15]
 80122b2:	7b7a      	ldrb	r2, [r7, #13]
 80122b4:	4909      	ldr	r1, [pc, #36]	; (80122dc <UARTEx_SetNbDataToProcess+0x94>)
 80122b6:	5c8a      	ldrb	r2, [r1, r2]
 80122b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80122bc:	7b7a      	ldrb	r2, [r7, #13]
 80122be:	4908      	ldr	r1, [pc, #32]	; (80122e0 <UARTEx_SetNbDataToProcess+0x98>)
 80122c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80122c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80122ce:	bf00      	nop
 80122d0:	3714      	adds	r7, #20
 80122d2:	46bd      	mov	sp, r7
 80122d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d8:	4770      	bx	lr
 80122da:	bf00      	nop
 80122dc:	0801cc50 	.word	0x0801cc50
 80122e0:	0801cc58 	.word	0x0801cc58

080122e4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80122e4:	b084      	sub	sp, #16
 80122e6:	b480      	push	{r7}
 80122e8:	b085      	sub	sp, #20
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
 80122ee:	f107 001c 	add.w	r0, r7, #28
 80122f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80122f6:	2300      	movs	r3, #0
 80122f8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80122fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80122fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80122fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8012300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8012302:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012304:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8012306:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 801230a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801230c:	68fa      	ldr	r2, [r7, #12]
 801230e:	4313      	orrs	r3, r2
 8012310:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	685a      	ldr	r2, [r3, #4]
 8012316:	4b07      	ldr	r3, [pc, #28]	; (8012334 <SDMMC_Init+0x50>)
 8012318:	4013      	ands	r3, r2
 801231a:	68fa      	ldr	r2, [r7, #12]
 801231c:	431a      	orrs	r2, r3
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012322:	2300      	movs	r3, #0
}
 8012324:	4618      	mov	r0, r3
 8012326:	3714      	adds	r7, #20
 8012328:	46bd      	mov	sp, r7
 801232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232e:	b004      	add	sp, #16
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
 8012334:	ffc02c00 	.word	0xffc02c00

08012338 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012346:	4618      	mov	r0, r3
 8012348:	370c      	adds	r7, #12
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr

08012352 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012352:	b480      	push	{r7}
 8012354:	b083      	sub	sp, #12
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
 801235a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012366:	2300      	movs	r3, #0
}
 8012368:	4618      	mov	r0, r3
 801236a:	370c      	adds	r7, #12
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f043 0203 	orr.w	r2, r3, #3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8012388:	2002      	movs	r0, #2
 801238a:	f7f4 fe39 	bl	8007000 <HAL_Delay>

  return HAL_OK;
 801238e:	2300      	movs	r3, #0
}
 8012390:	4618      	mov	r0, r3
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}

08012398 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f003 0303 	and.w	r3, r3, #3
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	370c      	adds	r7, #12
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr

080123b4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80123be:	2300      	movs	r3, #0
 80123c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	681a      	ldr	r2, [r3, #0]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80123d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80123d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80123de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80123e0:	68fa      	ldr	r2, [r7, #12]
 80123e2:	4313      	orrs	r3, r2
 80123e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	68da      	ldr	r2, [r3, #12]
 80123ea:	4b06      	ldr	r3, [pc, #24]	; (8012404 <SDMMC_SendCommand+0x50>)
 80123ec:	4013      	ands	r3, r2
 80123ee:	68fa      	ldr	r2, [r7, #12]
 80123f0:	431a      	orrs	r2, r3
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80123f6:	2300      	movs	r3, #0
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3714      	adds	r7, #20
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr
 8012404:	fffee0c0 	.word	0xfffee0c0

08012408 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	691b      	ldr	r3, [r3, #16]
 8012414:	b2db      	uxtb	r3, r3
}
 8012416:	4618      	mov	r0, r3
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr

08012422 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012422:	b480      	push	{r7}
 8012424:	b085      	sub	sp, #20
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	3314      	adds	r3, #20
 8012430:	461a      	mov	r2, r3
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	4413      	add	r3, r2
 8012436:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
}
 801243c:	4618      	mov	r0, r3
 801243e:	3714      	adds	r7, #20
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8012448:	b480      	push	{r7}
 801244a:	b085      	sub	sp, #20
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012452:	2300      	movs	r3, #0
 8012454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	685a      	ldr	r2, [r3, #4]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801246e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012474:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801247a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801247c:	68fa      	ldr	r2, [r7, #12]
 801247e:	4313      	orrs	r3, r2
 8012480:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012486:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	431a      	orrs	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012492:	2300      	movs	r3, #0

}
 8012494:	4618      	mov	r0, r3
 8012496:	3714      	adds	r7, #20
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr

080124a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b088      	sub	sp, #32
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80124ae:	2310      	movs	r3, #16
 80124b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124b8:	2300      	movs	r3, #0
 80124ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124c2:	f107 0308 	add.w	r3, r7, #8
 80124c6:	4619      	mov	r1, r3
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f7ff ff73 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80124ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80124d2:	2110      	movs	r1, #16
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f000 fa7b 	bl	80129d0 <SDMMC_GetCmdResp1>
 80124da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124dc:	69fb      	ldr	r3, [r7, #28]
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3720      	adds	r7, #32
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80124e6:	b580      	push	{r7, lr}
 80124e8:	b088      	sub	sp, #32
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80124f4:	2311      	movs	r3, #17
 80124f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124fe:	2300      	movs	r3, #0
 8012500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012506:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012508:	f107 0308 	add.w	r3, r7, #8
 801250c:	4619      	mov	r1, r3
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7ff ff50 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012514:	f241 3288 	movw	r2, #5000	; 0x1388
 8012518:	2111      	movs	r1, #17
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 fa58 	bl	80129d0 <SDMMC_GetCmdResp1>
 8012520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012522:	69fb      	ldr	r3, [r7, #28]
}
 8012524:	4618      	mov	r0, r3
 8012526:	3720      	adds	r7, #32
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b088      	sub	sp, #32
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801253a:	2312      	movs	r3, #18
 801253c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801253e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012544:	2300      	movs	r3, #0
 8012546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801254c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801254e:	f107 0308 	add.w	r3, r7, #8
 8012552:	4619      	mov	r1, r3
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f7ff ff2d 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801255a:	f241 3288 	movw	r2, #5000	; 0x1388
 801255e:	2112      	movs	r1, #18
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 fa35 	bl	80129d0 <SDMMC_GetCmdResp1>
 8012566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012568:	69fb      	ldr	r3, [r7, #28]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3720      	adds	r7, #32
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b088      	sub	sp, #32
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012580:	2318      	movs	r3, #24
 8012582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801258a:	2300      	movs	r3, #0
 801258c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012594:	f107 0308 	add.w	r3, r7, #8
 8012598:	4619      	mov	r1, r3
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f7ff ff0a 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80125a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80125a4:	2118      	movs	r1, #24
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f000 fa12 	bl	80129d0 <SDMMC_GetCmdResp1>
 80125ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125ae:	69fb      	ldr	r3, [r7, #28]
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3720      	adds	r7, #32
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b088      	sub	sp, #32
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80125c6:	2319      	movs	r3, #25
 80125c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125d0:	2300      	movs	r3, #0
 80125d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125da:	f107 0308 	add.w	r3, r7, #8
 80125de:	4619      	mov	r1, r3
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f7ff fee7 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80125e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80125ea:	2119      	movs	r1, #25
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f000 f9ef 	bl	80129d0 <SDMMC_GetCmdResp1>
 80125f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125f4:	69fb      	ldr	r3, [r7, #28]
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3720      	adds	r7, #32
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
	...

08012600 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b088      	sub	sp, #32
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012608:	2300      	movs	r3, #0
 801260a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801260c:	230c      	movs	r3, #12
 801260e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012616:	2300      	movs	r3, #0
 8012618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801261a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801261e:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012638:	f107 0308 	add.w	r3, r7, #8
 801263c:	4619      	mov	r1, r3
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7ff feb8 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012644:	4a08      	ldr	r2, [pc, #32]	; (8012668 <SDMMC_CmdStopTransfer+0x68>)
 8012646:	210c      	movs	r1, #12
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 f9c1 	bl	80129d0 <SDMMC_GetCmdResp1>
 801264e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 801265c:	69fb      	ldr	r3, [r7, #28]
}
 801265e:	4618      	mov	r0, r3
 8012660:	3720      	adds	r7, #32
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	05f5e100 	.word	0x05f5e100

0801266c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b08a      	sub	sp, #40	; 0x28
 8012670:	af00      	add	r7, sp, #0
 8012672:	60f8      	str	r0, [r7, #12]
 8012674:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801267c:	2307      	movs	r3, #7
 801267e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012684:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012686:	2300      	movs	r3, #0
 8012688:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801268a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801268e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012690:	f107 0310 	add.w	r3, r7, #16
 8012694:	4619      	mov	r1, r3
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f7ff fe8c 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80126a0:	2107      	movs	r1, #7
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f000 f994 	bl	80129d0 <SDMMC_GetCmdResp1>
 80126a8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80126aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3728      	adds	r7, #40	; 0x28
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b088      	sub	sp, #32
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80126bc:	2300      	movs	r3, #0
 80126be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80126c0:	2300      	movs	r3, #0
 80126c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80126c4:	2300      	movs	r3, #0
 80126c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126c8:	2300      	movs	r3, #0
 80126ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126d2:	f107 0308 	add.w	r3, r7, #8
 80126d6:	4619      	mov	r1, r3
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7ff fe6b 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 fbb8 	bl	8012e54 <SDMMC_GetCmdError>
 80126e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126e6:	69fb      	ldr	r3, [r7, #28]
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3720      	adds	r7, #32
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b088      	sub	sp, #32
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80126f8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80126fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80126fe:	2308      	movs	r3, #8
 8012700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012708:	2300      	movs	r3, #0
 801270a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801270c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012710:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012712:	f107 0308 	add.w	r3, r7, #8
 8012716:	4619      	mov	r1, r3
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7ff fe4b 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 fb4a 	bl	8012db8 <SDMMC_GetCmdResp7>
 8012724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012726:	69fb      	ldr	r3, [r7, #28]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3720      	adds	r7, #32
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b088      	sub	sp, #32
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801273e:	2337      	movs	r3, #55	; 0x37
 8012740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012748:	2300      	movs	r3, #0
 801274a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801274c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012750:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012752:	f107 0308 	add.w	r3, r7, #8
 8012756:	4619      	mov	r1, r3
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7ff fe2b 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012762:	2137      	movs	r1, #55	; 0x37
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f000 f933 	bl	80129d0 <SDMMC_GetCmdResp1>
 801276a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801276c:	69fb      	ldr	r3, [r7, #28]
}
 801276e:	4618      	mov	r0, r3
 8012770:	3720      	adds	r7, #32
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}

08012776 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012776:	b580      	push	{r7, lr}
 8012778:	b088      	sub	sp, #32
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
 801277e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012784:	2329      	movs	r3, #41	; 0x29
 8012786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012788:	f44f 7380 	mov.w	r3, #256	; 0x100
 801278c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801278e:	2300      	movs	r3, #0
 8012790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012798:	f107 0308 	add.w	r3, r7, #8
 801279c:	4619      	mov	r1, r3
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f7ff fe08 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f000 fa4f 	bl	8012c48 <SDMMC_GetCmdResp3>
 80127aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127ac:	69fb      	ldr	r3, [r7, #28]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3720      	adds	r7, #32
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b088      	sub	sp, #32
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80127c4:	2306      	movs	r3, #6
 80127c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127ce:	2300      	movs	r3, #0
 80127d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127d8:	f107 0308 	add.w	r3, r7, #8
 80127dc:	4619      	mov	r1, r3
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7ff fde8 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80127e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80127e8:	2106      	movs	r1, #6
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 f8f0 	bl	80129d0 <SDMMC_GetCmdResp1>
 80127f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127f2:	69fb      	ldr	r3, [r7, #28]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3720      	adds	r7, #32
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b088      	sub	sp, #32
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012804:	2300      	movs	r3, #0
 8012806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012808:	2333      	movs	r3, #51	; 0x33
 801280a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801280c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012812:	2300      	movs	r3, #0
 8012814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801281a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801281c:	f107 0308 	add.w	r3, r7, #8
 8012820:	4619      	mov	r1, r3
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7ff fdc6 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012828:	f241 3288 	movw	r2, #5000	; 0x1388
 801282c:	2133      	movs	r1, #51	; 0x33
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 f8ce 	bl	80129d0 <SDMMC_GetCmdResp1>
 8012834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012836:	69fb      	ldr	r3, [r7, #28]
}
 8012838:	4618      	mov	r0, r3
 801283a:	3720      	adds	r7, #32
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b088      	sub	sp, #32
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012848:	2300      	movs	r3, #0
 801284a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801284c:	2302      	movs	r3, #2
 801284e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012850:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012856:	2300      	movs	r3, #0
 8012858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801285a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801285e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012860:	f107 0308 	add.w	r3, r7, #8
 8012864:	4619      	mov	r1, r3
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7ff fda4 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 f9a1 	bl	8012bb4 <SDMMC_GetCmdResp2>
 8012872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012874:	69fb      	ldr	r3, [r7, #28]
}
 8012876:	4618      	mov	r0, r3
 8012878:	3720      	adds	r7, #32
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801287e:	b580      	push	{r7, lr}
 8012880:	b088      	sub	sp, #32
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801288c:	2309      	movs	r3, #9
 801288e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012890:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012896:	2300      	movs	r3, #0
 8012898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801289a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801289e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128a0:	f107 0308 	add.w	r3, r7, #8
 80128a4:	4619      	mov	r1, r3
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f7ff fd84 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 f981 	bl	8012bb4 <SDMMC_GetCmdResp2>
 80128b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128b4:	69fb      	ldr	r3, [r7, #28]
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3720      	adds	r7, #32
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80128be:	b580      	push	{r7, lr}
 80128c0:	b088      	sub	sp, #32
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80128c8:	2300      	movs	r3, #0
 80128ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80128cc:	2303      	movs	r3, #3
 80128ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128d6:	2300      	movs	r3, #0
 80128d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128e0:	f107 0308 	add.w	r3, r7, #8
 80128e4:	4619      	mov	r1, r3
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7ff fd64 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80128ec:	683a      	ldr	r2, [r7, #0]
 80128ee:	2103      	movs	r1, #3
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 f9e9 	bl	8012cc8 <SDMMC_GetCmdResp6>
 80128f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128f8:	69fb      	ldr	r3, [r7, #28]
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3720      	adds	r7, #32
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}

08012902 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012902:	b580      	push	{r7, lr}
 8012904:	b088      	sub	sp, #32
 8012906:	af00      	add	r7, sp, #0
 8012908:	6078      	str	r0, [r7, #4]
 801290a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012910:	230d      	movs	r3, #13
 8012912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801291a:	2300      	movs	r3, #0
 801291c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801291e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012922:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012924:	f107 0308 	add.w	r3, r7, #8
 8012928:	4619      	mov	r1, r3
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f7ff fd42 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012930:	f241 3288 	movw	r2, #5000	; 0x1388
 8012934:	210d      	movs	r1, #13
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f000 f84a 	bl	80129d0 <SDMMC_GetCmdResp1>
 801293c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801293e:	69fb      	ldr	r3, [r7, #28]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3720      	adds	r7, #32
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012950:	2300      	movs	r3, #0
 8012952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012954:	230d      	movs	r3, #13
 8012956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012958:	f44f 7380 	mov.w	r3, #256	; 0x100
 801295c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801295e:	2300      	movs	r3, #0
 8012960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012968:	f107 0308 	add.w	r3, r7, #8
 801296c:	4619      	mov	r1, r3
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f7ff fd20 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012974:	f241 3288 	movw	r2, #5000	; 0x1388
 8012978:	210d      	movs	r1, #13
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 f828 	bl	80129d0 <SDMMC_GetCmdResp1>
 8012980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012982:	69fb      	ldr	r3, [r7, #28]
}
 8012984:	4618      	mov	r0, r3
 8012986:	3720      	adds	r7, #32
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b088      	sub	sp, #32
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8012994:	2300      	movs	r3, #0
 8012996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8012998:	230b      	movs	r3, #11
 801299a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801299c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129a2:	2300      	movs	r3, #0
 80129a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129ac:	f107 0308 	add.w	r3, r7, #8
 80129b0:	4619      	mov	r1, r3
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7ff fcfe 	bl	80123b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80129b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80129bc:	210b      	movs	r1, #11
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f000 f806 	bl	80129d0 <SDMMC_GetCmdResp1>
 80129c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129c6:	69fb      	ldr	r3, [r7, #28]
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3720      	adds	r7, #32
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b088      	sub	sp, #32
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	460b      	mov	r3, r1
 80129da:	607a      	str	r2, [r7, #4]
 80129dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129de:	4b70      	ldr	r3, [pc, #448]	; (8012ba0 <SDMMC_GetCmdResp1+0x1d0>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4a70      	ldr	r2, [pc, #448]	; (8012ba4 <SDMMC_GetCmdResp1+0x1d4>)
 80129e4:	fba2 2303 	umull	r2, r3, r2, r3
 80129e8:	0a5a      	lsrs	r2, r3, #9
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	fb02 f303 	mul.w	r3, r2, r3
 80129f0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	1e5a      	subs	r2, r3, #1
 80129f6:	61fa      	str	r2, [r7, #28]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d102      	bne.n	8012a02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a00:	e0c9      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a06:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012a08:	69ba      	ldr	r2, [r7, #24]
 8012a0a:	4b67      	ldr	r3, [pc, #412]	; (8012ba8 <SDMMC_GetCmdResp1+0x1d8>)
 8012a0c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d0ef      	beq.n	80129f2 <SDMMC_GetCmdResp1+0x22>
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d1ea      	bne.n	80129f2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a20:	f003 0304 	and.w	r3, r3, #4
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d004      	beq.n	8012a32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2204      	movs	r2, #4
 8012a2c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a2e:	2304      	movs	r3, #4
 8012a30:	e0b1      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a36:	f003 0301 	and.w	r3, r3, #1
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d004      	beq.n	8012a48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2201      	movs	r2, #1
 8012a42:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a44:	2301      	movs	r3, #1
 8012a46:	e0a6      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	4a58      	ldr	r2, [pc, #352]	; (8012bac <SDMMC_GetCmdResp1+0x1dc>)
 8012a4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012a4e:	68f8      	ldr	r0, [r7, #12]
 8012a50:	f7ff fcda 	bl	8012408 <SDMMC_GetCommandResponse>
 8012a54:	4603      	mov	r3, r0
 8012a56:	461a      	mov	r2, r3
 8012a58:	7afb      	ldrb	r3, [r7, #11]
 8012a5a:	4293      	cmp	r3, r2
 8012a5c:	d001      	beq.n	8012a62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a5e:	2301      	movs	r3, #1
 8012a60:	e099      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012a62:	2100      	movs	r1, #0
 8012a64:	68f8      	ldr	r0, [r7, #12]
 8012a66:	f7ff fcdc 	bl	8012422 <SDMMC_GetResponse>
 8012a6a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012a6c:	697a      	ldr	r2, [r7, #20]
 8012a6e:	4b50      	ldr	r3, [pc, #320]	; (8012bb0 <SDMMC_GetCmdResp1+0x1e0>)
 8012a70:	4013      	ands	r3, r2
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d101      	bne.n	8012a7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012a76:	2300      	movs	r3, #0
 8012a78:	e08d      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	da02      	bge.n	8012a86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012a80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012a84:	e087      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d001      	beq.n	8012a94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012a90:	2340      	movs	r3, #64	; 0x40
 8012a92:	e080      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d001      	beq.n	8012aa2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012a9e:	2380      	movs	r3, #128	; 0x80
 8012aa0:	e079      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d002      	beq.n	8012ab2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ab0:	e071      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d002      	beq.n	8012ac2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ac0:	e069      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d002      	beq.n	8012ad2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ad0:	e061      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d002      	beq.n	8012ae2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ae0:	e059      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d002      	beq.n	8012af2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012af0:	e051      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012b00:	e049      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d002      	beq.n	8012b12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012b10:	e041      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d002      	beq.n	8012b22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b20:	e039      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d002      	beq.n	8012b32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012b30:	e031      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d002      	beq.n	8012b42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012b3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012b40:	e029      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d002      	beq.n	8012b52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012b4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012b50:	e021      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d002      	beq.n	8012b62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012b5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012b60:	e019      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d002      	beq.n	8012b72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012b6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012b70:	e011      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012b7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012b80:	e009      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	f003 0308 	and.w	r3, r3, #8
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d002      	beq.n	8012b92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012b8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012b90:	e001      	b.n	8012b96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3720      	adds	r7, #32
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	20000004 	.word	0x20000004
 8012ba4:	10624dd3 	.word	0x10624dd3
 8012ba8:	00200045 	.word	0x00200045
 8012bac:	002000c5 	.word	0x002000c5
 8012bb0:	fdffe008 	.word	0xfdffe008

08012bb4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	b085      	sub	sp, #20
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012bbc:	4b1f      	ldr	r3, [pc, #124]	; (8012c3c <SDMMC_GetCmdResp2+0x88>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	4a1f      	ldr	r2, [pc, #124]	; (8012c40 <SDMMC_GetCmdResp2+0x8c>)
 8012bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8012bc6:	0a5b      	lsrs	r3, r3, #9
 8012bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bcc:	fb02 f303 	mul.w	r3, r2, r3
 8012bd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	1e5a      	subs	r2, r3, #1
 8012bd6:	60fa      	str	r2, [r7, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d102      	bne.n	8012be2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012be0:	e026      	b.n	8012c30 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012be6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d0ef      	beq.n	8012bd2 <SDMMC_GetCmdResp2+0x1e>
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d1ea      	bne.n	8012bd2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c00:	f003 0304 	and.w	r3, r3, #4
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d004      	beq.n	8012c12 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2204      	movs	r2, #4
 8012c0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c0e:	2304      	movs	r3, #4
 8012c10:	e00e      	b.n	8012c30 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c16:	f003 0301 	and.w	r3, r3, #1
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d004      	beq.n	8012c28 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2201      	movs	r2, #1
 8012c22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c24:	2301      	movs	r3, #1
 8012c26:	e003      	b.n	8012c30 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	4a06      	ldr	r2, [pc, #24]	; (8012c44 <SDMMC_GetCmdResp2+0x90>)
 8012c2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012c2e:	2300      	movs	r3, #0
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3714      	adds	r7, #20
 8012c34:	46bd      	mov	sp, r7
 8012c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3a:	4770      	bx	lr
 8012c3c:	20000004 	.word	0x20000004
 8012c40:	10624dd3 	.word	0x10624dd3
 8012c44:	002000c5 	.word	0x002000c5

08012c48 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b085      	sub	sp, #20
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012c50:	4b1a      	ldr	r3, [pc, #104]	; (8012cbc <SDMMC_GetCmdResp3+0x74>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4a1a      	ldr	r2, [pc, #104]	; (8012cc0 <SDMMC_GetCmdResp3+0x78>)
 8012c56:	fba2 2303 	umull	r2, r3, r2, r3
 8012c5a:	0a5b      	lsrs	r3, r3, #9
 8012c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c60:	fb02 f303 	mul.w	r3, r2, r3
 8012c64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	1e5a      	subs	r2, r3, #1
 8012c6a:	60fa      	str	r2, [r7, #12]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d102      	bne.n	8012c76 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c74:	e01b      	b.n	8012cae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d0ef      	beq.n	8012c66 <SDMMC_GetCmdResp3+0x1e>
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d1ea      	bne.n	8012c66 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c94:	f003 0304 	and.w	r3, r3, #4
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d004      	beq.n	8012ca6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2204      	movs	r2, #4
 8012ca0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ca2:	2304      	movs	r3, #4
 8012ca4:	e003      	b.n	8012cae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	4a06      	ldr	r2, [pc, #24]	; (8012cc4 <SDMMC_GetCmdResp3+0x7c>)
 8012caa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012cac:	2300      	movs	r3, #0
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3714      	adds	r7, #20
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop
 8012cbc:	20000004 	.word	0x20000004
 8012cc0:	10624dd3 	.word	0x10624dd3
 8012cc4:	002000c5 	.word	0x002000c5

08012cc8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b088      	sub	sp, #32
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	60f8      	str	r0, [r7, #12]
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	607a      	str	r2, [r7, #4]
 8012cd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012cd6:	4b35      	ldr	r3, [pc, #212]	; (8012dac <SDMMC_GetCmdResp6+0xe4>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4a35      	ldr	r2, [pc, #212]	; (8012db0 <SDMMC_GetCmdResp6+0xe8>)
 8012cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8012ce0:	0a5b      	lsrs	r3, r3, #9
 8012ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ce6:	fb02 f303 	mul.w	r3, r2, r3
 8012cea:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	1e5a      	subs	r2, r3, #1
 8012cf0:	61fa      	str	r2, [r7, #28]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d102      	bne.n	8012cfc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012cf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012cfa:	e052      	b.n	8012da2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d0ef      	beq.n	8012cec <SDMMC_GetCmdResp6+0x24>
 8012d0c:	69bb      	ldr	r3, [r7, #24]
 8012d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1ea      	bne.n	8012cec <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d1a:	f003 0304 	and.w	r3, r3, #4
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d004      	beq.n	8012d2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	2204      	movs	r2, #4
 8012d26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d28:	2304      	movs	r3, #4
 8012d2a:	e03a      	b.n	8012da2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d30:	f003 0301 	and.w	r3, r3, #1
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d004      	beq.n	8012d42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	e02f      	b.n	8012da2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f7ff fb60 	bl	8012408 <SDMMC_GetCommandResponse>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	7afb      	ldrb	r3, [r7, #11]
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d001      	beq.n	8012d56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d52:	2301      	movs	r3, #1
 8012d54:	e025      	b.n	8012da2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	4a16      	ldr	r2, [pc, #88]	; (8012db4 <SDMMC_GetCmdResp6+0xec>)
 8012d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	68f8      	ldr	r0, [r7, #12]
 8012d60:	f7ff fb5f 	bl	8012422 <SDMMC_GetResponse>
 8012d64:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d106      	bne.n	8012d7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	0c1b      	lsrs	r3, r3, #16
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	e011      	b.n	8012da2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d002      	beq.n	8012d8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012d8c:	e009      	b.n	8012da2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d002      	beq.n	8012d9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d9c:	e001      	b.n	8012da2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3720      	adds	r7, #32
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	20000004 	.word	0x20000004
 8012db0:	10624dd3 	.word	0x10624dd3
 8012db4:	002000c5 	.word	0x002000c5

08012db8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b085      	sub	sp, #20
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012dc0:	4b22      	ldr	r3, [pc, #136]	; (8012e4c <SDMMC_GetCmdResp7+0x94>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4a22      	ldr	r2, [pc, #136]	; (8012e50 <SDMMC_GetCmdResp7+0x98>)
 8012dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8012dca:	0a5b      	lsrs	r3, r3, #9
 8012dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012dd0:	fb02 f303 	mul.w	r3, r2, r3
 8012dd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	1e5a      	subs	r2, r3, #1
 8012dda:	60fa      	str	r2, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d102      	bne.n	8012de6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012de0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012de4:	e02c      	b.n	8012e40 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d0ef      	beq.n	8012dd6 <SDMMC_GetCmdResp7+0x1e>
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d1ea      	bne.n	8012dd6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e04:	f003 0304 	and.w	r3, r3, #4
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d004      	beq.n	8012e16 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2204      	movs	r2, #4
 8012e10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e12:	2304      	movs	r3, #4
 8012e14:	e014      	b.n	8012e40 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e1a:	f003 0301 	and.w	r3, r3, #1
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d004      	beq.n	8012e2c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2201      	movs	r2, #1
 8012e26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	e009      	b.n	8012e40 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2240      	movs	r2, #64	; 0x40
 8012e3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012e3e:	2300      	movs	r3, #0

}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3714      	adds	r7, #20
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr
 8012e4c:	20000004 	.word	0x20000004
 8012e50:	10624dd3 	.word	0x10624dd3

08012e54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012e54:	b480      	push	{r7}
 8012e56:	b085      	sub	sp, #20
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012e5c:	4b11      	ldr	r3, [pc, #68]	; (8012ea4 <SDMMC_GetCmdError+0x50>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4a11      	ldr	r2, [pc, #68]	; (8012ea8 <SDMMC_GetCmdError+0x54>)
 8012e62:	fba2 2303 	umull	r2, r3, r2, r3
 8012e66:	0a5b      	lsrs	r3, r3, #9
 8012e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e6c:	fb02 f303 	mul.w	r3, r2, r3
 8012e70:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	1e5a      	subs	r2, r3, #1
 8012e76:	60fa      	str	r2, [r7, #12]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d102      	bne.n	8012e82 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e80:	e009      	b.n	8012e96 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d0f1      	beq.n	8012e72 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	4a06      	ldr	r2, [pc, #24]	; (8012eac <SDMMC_GetCmdError+0x58>)
 8012e92:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3714      	adds	r7, #20
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	20000004 	.word	0x20000004
 8012ea8:	10624dd3 	.word	0x10624dd3
 8012eac:	002000c5 	.word	0x002000c5

08012eb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012eb0:	b084      	sub	sp, #16
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b084      	sub	sp, #16
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
 8012eba:	f107 001c 	add.w	r0, r7, #28
 8012ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	68db      	ldr	r3, [r3, #12]
 8012ec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f001 fa1c 	bl	801430c <USB_CoreReset>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8012ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d106      	bne.n	8012eec <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8012eea:	e005      	b.n	8012ef8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8012ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3710      	adds	r7, #16
 8012efe:	46bd      	mov	sp, r7
 8012f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012f04:	b004      	add	sp, #16
 8012f06:	4770      	bx	lr

08012f08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b087      	sub	sp, #28
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	60f8      	str	r0, [r7, #12]
 8012f10:	60b9      	str	r1, [r7, #8]
 8012f12:	4613      	mov	r3, r2
 8012f14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012f16:	79fb      	ldrb	r3, [r7, #7]
 8012f18:	2b02      	cmp	r3, #2
 8012f1a:	d165      	bne.n	8012fe8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	4a3e      	ldr	r2, [pc, #248]	; (8013018 <USB_SetTurnaroundTime+0x110>)
 8012f20:	4293      	cmp	r3, r2
 8012f22:	d906      	bls.n	8012f32 <USB_SetTurnaroundTime+0x2a>
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	4a3d      	ldr	r2, [pc, #244]	; (801301c <USB_SetTurnaroundTime+0x114>)
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	d202      	bcs.n	8012f32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012f2c:	230f      	movs	r3, #15
 8012f2e:	617b      	str	r3, [r7, #20]
 8012f30:	e05c      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	4a39      	ldr	r2, [pc, #228]	; (801301c <USB_SetTurnaroundTime+0x114>)
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d306      	bcc.n	8012f48 <USB_SetTurnaroundTime+0x40>
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	4a38      	ldr	r2, [pc, #224]	; (8013020 <USB_SetTurnaroundTime+0x118>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d202      	bcs.n	8012f48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012f42:	230e      	movs	r3, #14
 8012f44:	617b      	str	r3, [r7, #20]
 8012f46:	e051      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	4a35      	ldr	r2, [pc, #212]	; (8013020 <USB_SetTurnaroundTime+0x118>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d306      	bcc.n	8012f5e <USB_SetTurnaroundTime+0x56>
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	4a34      	ldr	r2, [pc, #208]	; (8013024 <USB_SetTurnaroundTime+0x11c>)
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d202      	bcs.n	8012f5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012f58:	230d      	movs	r3, #13
 8012f5a:	617b      	str	r3, [r7, #20]
 8012f5c:	e046      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	4a30      	ldr	r2, [pc, #192]	; (8013024 <USB_SetTurnaroundTime+0x11c>)
 8012f62:	4293      	cmp	r3, r2
 8012f64:	d306      	bcc.n	8012f74 <USB_SetTurnaroundTime+0x6c>
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	4a2f      	ldr	r2, [pc, #188]	; (8013028 <USB_SetTurnaroundTime+0x120>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d802      	bhi.n	8012f74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012f6e:	230c      	movs	r3, #12
 8012f70:	617b      	str	r3, [r7, #20]
 8012f72:	e03b      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	4a2c      	ldr	r2, [pc, #176]	; (8013028 <USB_SetTurnaroundTime+0x120>)
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	d906      	bls.n	8012f8a <USB_SetTurnaroundTime+0x82>
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	4a2b      	ldr	r2, [pc, #172]	; (801302c <USB_SetTurnaroundTime+0x124>)
 8012f80:	4293      	cmp	r3, r2
 8012f82:	d802      	bhi.n	8012f8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012f84:	230b      	movs	r3, #11
 8012f86:	617b      	str	r3, [r7, #20]
 8012f88:	e030      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	4a27      	ldr	r2, [pc, #156]	; (801302c <USB_SetTurnaroundTime+0x124>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d906      	bls.n	8012fa0 <USB_SetTurnaroundTime+0x98>
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	4a26      	ldr	r2, [pc, #152]	; (8013030 <USB_SetTurnaroundTime+0x128>)
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d802      	bhi.n	8012fa0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012f9a:	230a      	movs	r3, #10
 8012f9c:	617b      	str	r3, [r7, #20]
 8012f9e:	e025      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	4a23      	ldr	r2, [pc, #140]	; (8013030 <USB_SetTurnaroundTime+0x128>)
 8012fa4:	4293      	cmp	r3, r2
 8012fa6:	d906      	bls.n	8012fb6 <USB_SetTurnaroundTime+0xae>
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	4a22      	ldr	r2, [pc, #136]	; (8013034 <USB_SetTurnaroundTime+0x12c>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d202      	bcs.n	8012fb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012fb0:	2309      	movs	r3, #9
 8012fb2:	617b      	str	r3, [r7, #20]
 8012fb4:	e01a      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	4a1e      	ldr	r2, [pc, #120]	; (8013034 <USB_SetTurnaroundTime+0x12c>)
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d306      	bcc.n	8012fcc <USB_SetTurnaroundTime+0xc4>
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	4a1d      	ldr	r2, [pc, #116]	; (8013038 <USB_SetTurnaroundTime+0x130>)
 8012fc2:	4293      	cmp	r3, r2
 8012fc4:	d802      	bhi.n	8012fcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012fc6:	2308      	movs	r3, #8
 8012fc8:	617b      	str	r3, [r7, #20]
 8012fca:	e00f      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	4a1a      	ldr	r2, [pc, #104]	; (8013038 <USB_SetTurnaroundTime+0x130>)
 8012fd0:	4293      	cmp	r3, r2
 8012fd2:	d906      	bls.n	8012fe2 <USB_SetTurnaroundTime+0xda>
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	4a19      	ldr	r2, [pc, #100]	; (801303c <USB_SetTurnaroundTime+0x134>)
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d202      	bcs.n	8012fe2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012fdc:	2307      	movs	r3, #7
 8012fde:	617b      	str	r3, [r7, #20]
 8012fe0:	e004      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012fe2:	2306      	movs	r3, #6
 8012fe4:	617b      	str	r3, [r7, #20]
 8012fe6:	e001      	b.n	8012fec <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012fe8:	2309      	movs	r3, #9
 8012fea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	68db      	ldr	r3, [r3, #12]
 8012ff0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	68da      	ldr	r2, [r3, #12]
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	029b      	lsls	r3, r3, #10
 8013000:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013004:	431a      	orrs	r2, r3
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	371c      	adds	r7, #28
 8013010:	46bd      	mov	sp, r7
 8013012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013016:	4770      	bx	lr
 8013018:	00d8acbf 	.word	0x00d8acbf
 801301c:	00e4e1c0 	.word	0x00e4e1c0
 8013020:	00f42400 	.word	0x00f42400
 8013024:	01067380 	.word	0x01067380
 8013028:	011a499f 	.word	0x011a499f
 801302c:	01312cff 	.word	0x01312cff
 8013030:	014ca43f 	.word	0x014ca43f
 8013034:	016e3600 	.word	0x016e3600
 8013038:	01a6ab1f 	.word	0x01a6ab1f
 801303c:	01e84800 	.word	0x01e84800

08013040 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	689b      	ldr	r3, [r3, #8]
 801304c:	f043 0201 	orr.w	r2, r3, #1
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013054:	2300      	movs	r3, #0
}
 8013056:	4618      	mov	r0, r3
 8013058:	370c      	adds	r7, #12
 801305a:	46bd      	mov	sp, r7
 801305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013060:	4770      	bx	lr

08013062 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013062:	b480      	push	{r7}
 8013064:	b083      	sub	sp, #12
 8013066:	af00      	add	r7, sp, #0
 8013068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	689b      	ldr	r3, [r3, #8]
 801306e:	f023 0201 	bic.w	r2, r3, #1
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013076:	2300      	movs	r3, #0
}
 8013078:	4618      	mov	r0, r3
 801307a:	370c      	adds	r7, #12
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr

08013084 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	460b      	mov	r3, r1
 801308e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013090:	2300      	movs	r3, #0
 8013092:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	68db      	ldr	r3, [r3, #12]
 8013098:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80130a0:	78fb      	ldrb	r3, [r7, #3]
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d115      	bne.n	80130d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	68db      	ldr	r3, [r3, #12]
 80130aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80130b2:	2001      	movs	r0, #1
 80130b4:	f7f3 ffa4 	bl	8007000 <HAL_Delay>
      ms++;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	3301      	adds	r3, #1
 80130bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f001 f8ab 	bl	801421a <USB_GetMode>
 80130c4:	4603      	mov	r3, r0
 80130c6:	2b01      	cmp	r3, #1
 80130c8:	d01e      	beq.n	8013108 <USB_SetCurrentMode+0x84>
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2b31      	cmp	r3, #49	; 0x31
 80130ce:	d9f0      	bls.n	80130b2 <USB_SetCurrentMode+0x2e>
 80130d0:	e01a      	b.n	8013108 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80130d2:	78fb      	ldrb	r3, [r7, #3]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d115      	bne.n	8013104 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80130e4:	2001      	movs	r0, #1
 80130e6:	f7f3 ff8b 	bl	8007000 <HAL_Delay>
      ms++;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	3301      	adds	r3, #1
 80130ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f001 f892 	bl	801421a <USB_GetMode>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d005      	beq.n	8013108 <USB_SetCurrentMode+0x84>
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2b31      	cmp	r3, #49	; 0x31
 8013100:	d9f0      	bls.n	80130e4 <USB_SetCurrentMode+0x60>
 8013102:	e001      	b.n	8013108 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013104:	2301      	movs	r3, #1
 8013106:	e005      	b.n	8013114 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2b32      	cmp	r3, #50	; 0x32
 801310c:	d101      	bne.n	8013112 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801310e:	2301      	movs	r3, #1
 8013110:	e000      	b.n	8013114 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013112:	2300      	movs	r3, #0
}
 8013114:	4618      	mov	r0, r3
 8013116:	3710      	adds	r7, #16
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}

0801311c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801311c:	b084      	sub	sp, #16
 801311e:	b580      	push	{r7, lr}
 8013120:	b086      	sub	sp, #24
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801312a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801312e:	2300      	movs	r3, #0
 8013130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013136:	2300      	movs	r3, #0
 8013138:	613b      	str	r3, [r7, #16]
 801313a:	e009      	b.n	8013150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	3340      	adds	r3, #64	; 0x40
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4413      	add	r3, r2
 8013146:	2200      	movs	r2, #0
 8013148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	3301      	adds	r3, #1
 801314e:	613b      	str	r3, [r7, #16]
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	2b0e      	cmp	r3, #14
 8013154:	d9f2      	bls.n	801313c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013158:	2b00      	cmp	r3, #0
 801315a:	d11c      	bne.n	8013196 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013162:	685b      	ldr	r3, [r3, #4]
 8013164:	68fa      	ldr	r2, [r7, #12]
 8013166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801316a:	f043 0302 	orr.w	r3, r3, #2
 801316e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013174:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	601a      	str	r2, [r3, #0]
 8013194:	e005      	b.n	80131a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801319a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80131a8:	461a      	mov	r2, r3
 80131aa:	2300      	movs	r3, #0
 80131ac:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80131ae:	2103      	movs	r1, #3
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f000 f959 	bl	8013468 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80131b6:	2110      	movs	r1, #16
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f000 f8f1 	bl	80133a0 <USB_FlushTxFifo>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d001      	beq.n	80131c8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80131c4:	2301      	movs	r3, #1
 80131c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 f91d 	bl	8013408 <USB_FlushRxFifo>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d001      	beq.n	80131d8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80131d4:	2301      	movs	r3, #1
 80131d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131de:	461a      	mov	r2, r3
 80131e0:	2300      	movs	r3, #0
 80131e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131ea:	461a      	mov	r2, r3
 80131ec:	2300      	movs	r3, #0
 80131ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131f6:	461a      	mov	r2, r3
 80131f8:	2300      	movs	r3, #0
 80131fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80131fc:	2300      	movs	r3, #0
 80131fe:	613b      	str	r3, [r7, #16]
 8013200:	e043      	b.n	801328a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	015a      	lsls	r2, r3, #5
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	4413      	add	r3, r2
 801320a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013218:	d118      	bne.n	801324c <USB_DevInit+0x130>
    {
      if (i == 0U)
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d10a      	bne.n	8013236 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	015a      	lsls	r2, r3, #5
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	4413      	add	r3, r2
 8013228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801322c:	461a      	mov	r2, r3
 801322e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013232:	6013      	str	r3, [r2, #0]
 8013234:	e013      	b.n	801325e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	015a      	lsls	r2, r3, #5
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	4413      	add	r3, r2
 801323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013242:	461a      	mov	r2, r3
 8013244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013248:	6013      	str	r3, [r2, #0]
 801324a:	e008      	b.n	801325e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	015a      	lsls	r2, r3, #5
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	4413      	add	r3, r2
 8013254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013258:	461a      	mov	r2, r3
 801325a:	2300      	movs	r3, #0
 801325c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	015a      	lsls	r2, r3, #5
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	4413      	add	r3, r2
 8013266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801326a:	461a      	mov	r2, r3
 801326c:	2300      	movs	r3, #0
 801326e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	015a      	lsls	r2, r3, #5
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4413      	add	r3, r2
 8013278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327c:	461a      	mov	r2, r3
 801327e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	3301      	adds	r3, #1
 8013288:	613b      	str	r3, [r7, #16]
 801328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328c:	693a      	ldr	r2, [r7, #16]
 801328e:	429a      	cmp	r2, r3
 8013290:	d3b7      	bcc.n	8013202 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013292:	2300      	movs	r3, #0
 8013294:	613b      	str	r3, [r7, #16]
 8013296:	e043      	b.n	8013320 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	015a      	lsls	r2, r3, #5
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	4413      	add	r3, r2
 80132a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132ae:	d118      	bne.n	80132e2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d10a      	bne.n	80132cc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	015a      	lsls	r2, r3, #5
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	4413      	add	r3, r2
 80132be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132c2:	461a      	mov	r2, r3
 80132c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80132c8:	6013      	str	r3, [r2, #0]
 80132ca:	e013      	b.n	80132f4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	015a      	lsls	r2, r3, #5
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	4413      	add	r3, r2
 80132d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d8:	461a      	mov	r2, r3
 80132da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80132de:	6013      	str	r3, [r2, #0]
 80132e0:	e008      	b.n	80132f4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	015a      	lsls	r2, r3, #5
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	4413      	add	r3, r2
 80132ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132ee:	461a      	mov	r2, r3
 80132f0:	2300      	movs	r3, #0
 80132f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	015a      	lsls	r2, r3, #5
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	4413      	add	r3, r2
 80132fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013300:	461a      	mov	r2, r3
 8013302:	2300      	movs	r3, #0
 8013304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	015a      	lsls	r2, r3, #5
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	4413      	add	r3, r2
 801330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013312:	461a      	mov	r2, r3
 8013314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	3301      	adds	r3, #1
 801331e:	613b      	str	r3, [r7, #16]
 8013320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013322:	693a      	ldr	r2, [r7, #16]
 8013324:	429a      	cmp	r2, r3
 8013326:	d3b7      	bcc.n	8013298 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801332e:	691b      	ldr	r3, [r3, #16]
 8013330:	68fa      	ldr	r2, [r7, #12]
 8013332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801333a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2200      	movs	r2, #0
 8013340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013348:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	699b      	ldr	r3, [r3, #24]
 801334e:	f043 0210 	orr.w	r2, r3, #16
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	699a      	ldr	r2, [r3, #24]
 801335a:	4b10      	ldr	r3, [pc, #64]	; (801339c <USB_DevInit+0x280>)
 801335c:	4313      	orrs	r3, r2
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013364:	2b00      	cmp	r3, #0
 8013366:	d005      	beq.n	8013374 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	699b      	ldr	r3, [r3, #24]
 801336c:	f043 0208 	orr.w	r2, r3, #8
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013376:	2b01      	cmp	r3, #1
 8013378:	d107      	bne.n	801338a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	699b      	ldr	r3, [r3, #24]
 801337e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013382:	f043 0304 	orr.w	r3, r3, #4
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801338a:	7dfb      	ldrb	r3, [r7, #23]
}
 801338c:	4618      	mov	r0, r3
 801338e:	3718      	adds	r7, #24
 8013390:	46bd      	mov	sp, r7
 8013392:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013396:	b004      	add	sp, #16
 8013398:	4770      	bx	lr
 801339a:	bf00      	nop
 801339c:	803c3800 	.word	0x803c3800

080133a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80133a0:	b480      	push	{r7}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80133aa:	2300      	movs	r3, #0
 80133ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	3301      	adds	r3, #1
 80133b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	4a13      	ldr	r2, [pc, #76]	; (8013404 <USB_FlushTxFifo+0x64>)
 80133b8:	4293      	cmp	r3, r2
 80133ba:	d901      	bls.n	80133c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80133bc:	2303      	movs	r3, #3
 80133be:	e01b      	b.n	80133f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	691b      	ldr	r3, [r3, #16]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	daf2      	bge.n	80133ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80133c8:	2300      	movs	r3, #0
 80133ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	019b      	lsls	r3, r3, #6
 80133d0:	f043 0220 	orr.w	r2, r3, #32
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	3301      	adds	r3, #1
 80133dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	4a08      	ldr	r2, [pc, #32]	; (8013404 <USB_FlushTxFifo+0x64>)
 80133e2:	4293      	cmp	r3, r2
 80133e4:	d901      	bls.n	80133ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80133e6:	2303      	movs	r3, #3
 80133e8:	e006      	b.n	80133f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	691b      	ldr	r3, [r3, #16]
 80133ee:	f003 0320 	and.w	r3, r3, #32
 80133f2:	2b20      	cmp	r3, #32
 80133f4:	d0f0      	beq.n	80133d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80133f6:	2300      	movs	r3, #0
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3714      	adds	r7, #20
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr
 8013404:	00030d40 	.word	0x00030d40

08013408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013408:	b480      	push	{r7}
 801340a:	b085      	sub	sp, #20
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013410:	2300      	movs	r3, #0
 8013412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	3301      	adds	r3, #1
 8013418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	4a11      	ldr	r2, [pc, #68]	; (8013464 <USB_FlushRxFifo+0x5c>)
 801341e:	4293      	cmp	r3, r2
 8013420:	d901      	bls.n	8013426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013422:	2303      	movs	r3, #3
 8013424:	e018      	b.n	8013458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	691b      	ldr	r3, [r3, #16]
 801342a:	2b00      	cmp	r3, #0
 801342c:	daf2      	bge.n	8013414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801342e:	2300      	movs	r3, #0
 8013430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2210      	movs	r2, #16
 8013436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	3301      	adds	r3, #1
 801343c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	4a08      	ldr	r2, [pc, #32]	; (8013464 <USB_FlushRxFifo+0x5c>)
 8013442:	4293      	cmp	r3, r2
 8013444:	d901      	bls.n	801344a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013446:	2303      	movs	r3, #3
 8013448:	e006      	b.n	8013458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	691b      	ldr	r3, [r3, #16]
 801344e:	f003 0310 	and.w	r3, r3, #16
 8013452:	2b10      	cmp	r3, #16
 8013454:	d0f0      	beq.n	8013438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013456:	2300      	movs	r3, #0
}
 8013458:	4618      	mov	r0, r3
 801345a:	3714      	adds	r7, #20
 801345c:	46bd      	mov	sp, r7
 801345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013462:	4770      	bx	lr
 8013464:	00030d40 	.word	0x00030d40

08013468 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013468:	b480      	push	{r7}
 801346a:	b085      	sub	sp, #20
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	460b      	mov	r3, r1
 8013472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	78fb      	ldrb	r3, [r7, #3]
 8013482:	68f9      	ldr	r1, [r7, #12]
 8013484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013488:	4313      	orrs	r3, r2
 801348a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801348c:	2300      	movs	r3, #0
}
 801348e:	4618      	mov	r0, r3
 8013490:	3714      	adds	r7, #20
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr

0801349a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801349a:	b480      	push	{r7}
 801349c:	b087      	sub	sp, #28
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	f003 0306 	and.w	r3, r3, #6
 80134b2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2b02      	cmp	r3, #2
 80134b8:	d002      	beq.n	80134c0 <USB_GetDevSpeed+0x26>
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2b06      	cmp	r3, #6
 80134be:	d102      	bne.n	80134c6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80134c0:	2302      	movs	r3, #2
 80134c2:	75fb      	strb	r3, [r7, #23]
 80134c4:	e001      	b.n	80134ca <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80134c6:	230f      	movs	r3, #15
 80134c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80134ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	371c      	adds	r7, #28
 80134d0:	46bd      	mov	sp, r7
 80134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d6:	4770      	bx	lr

080134d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80134d8:	b480      	push	{r7}
 80134da:	b085      	sub	sp, #20
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	785b      	ldrb	r3, [r3, #1]
 80134f0:	2b01      	cmp	r3, #1
 80134f2:	d13a      	bne.n	801356a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134fa:	69da      	ldr	r2, [r3, #28]
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	f003 030f 	and.w	r3, r3, #15
 8013504:	2101      	movs	r1, #1
 8013506:	fa01 f303 	lsl.w	r3, r1, r3
 801350a:	b29b      	uxth	r3, r3
 801350c:	68f9      	ldr	r1, [r7, #12]
 801350e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013512:	4313      	orrs	r3, r2
 8013514:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	015a      	lsls	r2, r3, #5
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	4413      	add	r3, r2
 801351e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013528:	2b00      	cmp	r3, #0
 801352a:	d155      	bne.n	80135d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	015a      	lsls	r2, r3, #5
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	4413      	add	r3, r2
 8013534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	689b      	ldr	r3, [r3, #8]
 801353e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	791b      	ldrb	r3, [r3, #4]
 8013546:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013548:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	059b      	lsls	r3, r3, #22
 801354e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013550:	4313      	orrs	r3, r2
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	0151      	lsls	r1, r2, #5
 8013556:	68fa      	ldr	r2, [r7, #12]
 8013558:	440a      	add	r2, r1
 801355a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801355e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013566:	6013      	str	r3, [r2, #0]
 8013568:	e036      	b.n	80135d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013570:	69da      	ldr	r2, [r3, #28]
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	f003 030f 	and.w	r3, r3, #15
 801357a:	2101      	movs	r1, #1
 801357c:	fa01 f303 	lsl.w	r3, r1, r3
 8013580:	041b      	lsls	r3, r3, #16
 8013582:	68f9      	ldr	r1, [r7, #12]
 8013584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013588:	4313      	orrs	r3, r2
 801358a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	015a      	lsls	r2, r3, #5
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	4413      	add	r3, r2
 8013594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d11a      	bne.n	80135d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	015a      	lsls	r2, r3, #5
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	4413      	add	r3, r2
 80135aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	791b      	ldrb	r3, [r3, #4]
 80135bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135be:	430b      	orrs	r3, r1
 80135c0:	4313      	orrs	r3, r2
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	0151      	lsls	r1, r2, #5
 80135c6:	68fa      	ldr	r2, [r7, #12]
 80135c8:	440a      	add	r2, r1
 80135ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80135d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80135d8:	2300      	movs	r3, #0
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3714      	adds	r7, #20
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
	...

080135e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80135e8:	b480      	push	{r7}
 80135ea:	b085      	sub	sp, #20
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	785b      	ldrb	r3, [r3, #1]
 8013600:	2b01      	cmp	r3, #1
 8013602:	d161      	bne.n	80136c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	015a      	lsls	r2, r3, #5
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	4413      	add	r3, r2
 801360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801361a:	d11f      	bne.n	801365c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	015a      	lsls	r2, r3, #5
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	4413      	add	r3, r2
 8013624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	68ba      	ldr	r2, [r7, #8]
 801362c:	0151      	lsls	r1, r2, #5
 801362e:	68fa      	ldr	r2, [r7, #12]
 8013630:	440a      	add	r2, r1
 8013632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801363a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	015a      	lsls	r2, r3, #5
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	4413      	add	r3, r2
 8013644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	0151      	lsls	r1, r2, #5
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	440a      	add	r2, r1
 8013652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801365a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	f003 030f 	and.w	r3, r3, #15
 801366c:	2101      	movs	r1, #1
 801366e:	fa01 f303 	lsl.w	r3, r1, r3
 8013672:	b29b      	uxth	r3, r3
 8013674:	43db      	mvns	r3, r3
 8013676:	68f9      	ldr	r1, [r7, #12]
 8013678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801367c:	4013      	ands	r3, r2
 801367e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013686:	69da      	ldr	r2, [r3, #28]
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	f003 030f 	and.w	r3, r3, #15
 8013690:	2101      	movs	r1, #1
 8013692:	fa01 f303 	lsl.w	r3, r1, r3
 8013696:	b29b      	uxth	r3, r3
 8013698:	43db      	mvns	r3, r3
 801369a:	68f9      	ldr	r1, [r7, #12]
 801369c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136a0:	4013      	ands	r3, r2
 80136a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	015a      	lsls	r2, r3, #5
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	4413      	add	r3, r2
 80136ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	0159      	lsls	r1, r3, #5
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	440b      	add	r3, r1
 80136ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136be:	4619      	mov	r1, r3
 80136c0:	4b35      	ldr	r3, [pc, #212]	; (8013798 <USB_DeactivateEndpoint+0x1b0>)
 80136c2:	4013      	ands	r3, r2
 80136c4:	600b      	str	r3, [r1, #0]
 80136c6:	e060      	b.n	801378a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	015a      	lsls	r2, r3, #5
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	4413      	add	r3, r2
 80136d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136de:	d11f      	bne.n	8013720 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	015a      	lsls	r2, r3, #5
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	4413      	add	r3, r2
 80136e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	68ba      	ldr	r2, [r7, #8]
 80136f0:	0151      	lsls	r1, r2, #5
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	440a      	add	r2, r1
 80136f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80136fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	015a      	lsls	r2, r3, #5
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	4413      	add	r3, r2
 8013708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	68ba      	ldr	r2, [r7, #8]
 8013710:	0151      	lsls	r1, r2, #5
 8013712:	68fa      	ldr	r2, [r7, #12]
 8013714:	440a      	add	r2, r1
 8013716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801371a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801371e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	f003 030f 	and.w	r3, r3, #15
 8013730:	2101      	movs	r1, #1
 8013732:	fa01 f303 	lsl.w	r3, r1, r3
 8013736:	041b      	lsls	r3, r3, #16
 8013738:	43db      	mvns	r3, r3
 801373a:	68f9      	ldr	r1, [r7, #12]
 801373c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013740:	4013      	ands	r3, r2
 8013742:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801374a:	69da      	ldr	r2, [r3, #28]
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	f003 030f 	and.w	r3, r3, #15
 8013754:	2101      	movs	r1, #1
 8013756:	fa01 f303 	lsl.w	r3, r1, r3
 801375a:	041b      	lsls	r3, r3, #16
 801375c:	43db      	mvns	r3, r3
 801375e:	68f9      	ldr	r1, [r7, #12]
 8013760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013764:	4013      	ands	r3, r2
 8013766:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	015a      	lsls	r2, r3, #5
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	4413      	add	r3, r2
 8013770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013774:	681a      	ldr	r2, [r3, #0]
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	0159      	lsls	r1, r3, #5
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	440b      	add	r3, r1
 801377e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013782:	4619      	mov	r1, r3
 8013784:	4b05      	ldr	r3, [pc, #20]	; (801379c <USB_DeactivateEndpoint+0x1b4>)
 8013786:	4013      	ands	r3, r2
 8013788:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801378a:	2300      	movs	r3, #0
}
 801378c:	4618      	mov	r0, r3
 801378e:	3714      	adds	r7, #20
 8013790:	46bd      	mov	sp, r7
 8013792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013796:	4770      	bx	lr
 8013798:	ec337800 	.word	0xec337800
 801379c:	eff37800 	.word	0xeff37800

080137a0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b086      	sub	sp, #24
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	785b      	ldrb	r3, [r3, #1]
 80137b8:	2b01      	cmp	r3, #1
 80137ba:	f040 8128 	bne.w	8013a0e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	691b      	ldr	r3, [r3, #16]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d132      	bne.n	801382c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	015a      	lsls	r2, r3, #5
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	4413      	add	r3, r2
 80137ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137d2:	691b      	ldr	r3, [r3, #16]
 80137d4:	693a      	ldr	r2, [r7, #16]
 80137d6:	0151      	lsls	r1, r2, #5
 80137d8:	697a      	ldr	r2, [r7, #20]
 80137da:	440a      	add	r2, r1
 80137dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80137e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80137e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	015a      	lsls	r2, r3, #5
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	4413      	add	r3, r2
 80137f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137f6:	691b      	ldr	r3, [r3, #16]
 80137f8:	693a      	ldr	r2, [r7, #16]
 80137fa:	0151      	lsls	r1, r2, #5
 80137fc:	697a      	ldr	r2, [r7, #20]
 80137fe:	440a      	add	r2, r1
 8013800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	015a      	lsls	r2, r3, #5
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	4413      	add	r3, r2
 8013812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013816:	691b      	ldr	r3, [r3, #16]
 8013818:	693a      	ldr	r2, [r7, #16]
 801381a:	0151      	lsls	r1, r2, #5
 801381c:	697a      	ldr	r2, [r7, #20]
 801381e:	440a      	add	r2, r1
 8013820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013824:	0cdb      	lsrs	r3, r3, #19
 8013826:	04db      	lsls	r3, r3, #19
 8013828:	6113      	str	r3, [r2, #16]
 801382a:	e092      	b.n	8013952 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	015a      	lsls	r2, r3, #5
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	4413      	add	r3, r2
 8013834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013838:	691b      	ldr	r3, [r3, #16]
 801383a:	693a      	ldr	r2, [r7, #16]
 801383c:	0151      	lsls	r1, r2, #5
 801383e:	697a      	ldr	r2, [r7, #20]
 8013840:	440a      	add	r2, r1
 8013842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013846:	0cdb      	lsrs	r3, r3, #19
 8013848:	04db      	lsls	r3, r3, #19
 801384a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	015a      	lsls	r2, r3, #5
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	4413      	add	r3, r2
 8013854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013858:	691b      	ldr	r3, [r3, #16]
 801385a:	693a      	ldr	r2, [r7, #16]
 801385c:	0151      	lsls	r1, r2, #5
 801385e:	697a      	ldr	r2, [r7, #20]
 8013860:	440a      	add	r2, r1
 8013862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013866:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801386a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801386e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d11a      	bne.n	80138ac <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	691a      	ldr	r2, [r3, #16]
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	689b      	ldr	r3, [r3, #8]
 801387e:	429a      	cmp	r2, r3
 8013880:	d903      	bls.n	801388a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	689a      	ldr	r2, [r3, #8]
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801388a:	693b      	ldr	r3, [r7, #16]
 801388c:	015a      	lsls	r2, r3, #5
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	4413      	add	r3, r2
 8013892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013896:	691b      	ldr	r3, [r3, #16]
 8013898:	693a      	ldr	r2, [r7, #16]
 801389a:	0151      	lsls	r1, r2, #5
 801389c:	697a      	ldr	r2, [r7, #20]
 801389e:	440a      	add	r2, r1
 80138a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138a8:	6113      	str	r3, [r2, #16]
 80138aa:	e01b      	b.n	80138e4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	015a      	lsls	r2, r3, #5
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	4413      	add	r3, r2
 80138b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138b8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	6919      	ldr	r1, [r3, #16]
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	689b      	ldr	r3, [r3, #8]
 80138c2:	440b      	add	r3, r1
 80138c4:	1e59      	subs	r1, r3, #1
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	689b      	ldr	r3, [r3, #8]
 80138ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80138ce:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80138d0:	4b8d      	ldr	r3, [pc, #564]	; (8013b08 <USB_EPStartXfer+0x368>)
 80138d2:	400b      	ands	r3, r1
 80138d4:	6939      	ldr	r1, [r7, #16]
 80138d6:	0148      	lsls	r0, r1, #5
 80138d8:	6979      	ldr	r1, [r7, #20]
 80138da:	4401      	add	r1, r0
 80138dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80138e0:	4313      	orrs	r3, r2
 80138e2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	015a      	lsls	r2, r3, #5
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	4413      	add	r3, r2
 80138ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138f0:	691a      	ldr	r2, [r3, #16]
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	691b      	ldr	r3, [r3, #16]
 80138f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138fa:	6939      	ldr	r1, [r7, #16]
 80138fc:	0148      	lsls	r0, r1, #5
 80138fe:	6979      	ldr	r1, [r7, #20]
 8013900:	4401      	add	r1, r0
 8013902:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013906:	4313      	orrs	r3, r2
 8013908:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	791b      	ldrb	r3, [r3, #4]
 801390e:	2b01      	cmp	r3, #1
 8013910:	d11f      	bne.n	8013952 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	015a      	lsls	r2, r3, #5
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	4413      	add	r3, r2
 801391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801391e:	691b      	ldr	r3, [r3, #16]
 8013920:	693a      	ldr	r2, [r7, #16]
 8013922:	0151      	lsls	r1, r2, #5
 8013924:	697a      	ldr	r2, [r7, #20]
 8013926:	440a      	add	r2, r1
 8013928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801392c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013930:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	015a      	lsls	r2, r3, #5
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	4413      	add	r3, r2
 801393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801393e:	691b      	ldr	r3, [r3, #16]
 8013940:	693a      	ldr	r2, [r7, #16]
 8013942:	0151      	lsls	r1, r2, #5
 8013944:	697a      	ldr	r2, [r7, #20]
 8013946:	440a      	add	r2, r1
 8013948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801394c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013950:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	015a      	lsls	r2, r3, #5
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	4413      	add	r3, r2
 801395a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	693a      	ldr	r2, [r7, #16]
 8013962:	0151      	lsls	r1, r2, #5
 8013964:	697a      	ldr	r2, [r7, #20]
 8013966:	440a      	add	r2, r1
 8013968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801396c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013970:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	791b      	ldrb	r3, [r3, #4]
 8013976:	2b01      	cmp	r3, #1
 8013978:	d015      	beq.n	80139a6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	691b      	ldr	r3, [r3, #16]
 801397e:	2b00      	cmp	r3, #0
 8013980:	f000 8139 	beq.w	8013bf6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801398a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	f003 030f 	and.w	r3, r3, #15
 8013994:	2101      	movs	r1, #1
 8013996:	fa01 f303 	lsl.w	r3, r1, r3
 801399a:	6979      	ldr	r1, [r7, #20]
 801399c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80139a0:	4313      	orrs	r3, r2
 80139a2:	634b      	str	r3, [r1, #52]	; 0x34
 80139a4:	e127      	b.n	8013bf6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139ac:	689b      	ldr	r3, [r3, #8]
 80139ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d110      	bne.n	80139d8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	015a      	lsls	r2, r3, #5
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	4413      	add	r3, r2
 80139be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	693a      	ldr	r2, [r7, #16]
 80139c6:	0151      	lsls	r1, r2, #5
 80139c8:	697a      	ldr	r2, [r7, #20]
 80139ca:	440a      	add	r2, r1
 80139cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80139d4:	6013      	str	r3, [r2, #0]
 80139d6:	e00f      	b.n	80139f8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	015a      	lsls	r2, r3, #5
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	4413      	add	r3, r2
 80139e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	693a      	ldr	r2, [r7, #16]
 80139e8:	0151      	lsls	r1, r2, #5
 80139ea:	697a      	ldr	r2, [r7, #20]
 80139ec:	440a      	add	r2, r1
 80139ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139f6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	68d9      	ldr	r1, [r3, #12]
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	781a      	ldrb	r2, [r3, #0]
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	691b      	ldr	r3, [r3, #16]
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f000 f9a6 	bl	8013d58 <USB_WritePacket>
 8013a0c:	e0f3      	b.n	8013bf6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	015a      	lsls	r2, r3, #5
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	4413      	add	r3, r2
 8013a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a1a:	691b      	ldr	r3, [r3, #16]
 8013a1c:	693a      	ldr	r2, [r7, #16]
 8013a1e:	0151      	lsls	r1, r2, #5
 8013a20:	697a      	ldr	r2, [r7, #20]
 8013a22:	440a      	add	r2, r1
 8013a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a28:	0cdb      	lsrs	r3, r3, #19
 8013a2a:	04db      	lsls	r3, r3, #19
 8013a2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	015a      	lsls	r2, r3, #5
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	4413      	add	r3, r2
 8013a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a3a:	691b      	ldr	r3, [r3, #16]
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	0151      	lsls	r1, r2, #5
 8013a40:	697a      	ldr	r2, [r7, #20]
 8013a42:	440a      	add	r2, r1
 8013a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013a4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013a50:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d12f      	bne.n	8013ab8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	691b      	ldr	r3, [r3, #16]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d003      	beq.n	8013a68 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	689a      	ldr	r2, [r3, #8]
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	689a      	ldr	r2, [r3, #8]
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	015a      	lsls	r2, r3, #5
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	4413      	add	r3, r2
 8013a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a7c:	691a      	ldr	r2, [r3, #16]
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	6a1b      	ldr	r3, [r3, #32]
 8013a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a86:	6939      	ldr	r1, [r7, #16]
 8013a88:	0148      	lsls	r0, r1, #5
 8013a8a:	6979      	ldr	r1, [r7, #20]
 8013a8c:	4401      	add	r1, r0
 8013a8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013a92:	4313      	orrs	r3, r2
 8013a94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	015a      	lsls	r2, r3, #5
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	4413      	add	r3, r2
 8013a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aa2:	691b      	ldr	r3, [r3, #16]
 8013aa4:	693a      	ldr	r2, [r7, #16]
 8013aa6:	0151      	lsls	r1, r2, #5
 8013aa8:	697a      	ldr	r2, [r7, #20]
 8013aaa:	440a      	add	r2, r1
 8013aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ab4:	6113      	str	r3, [r2, #16]
 8013ab6:	e061      	b.n	8013b7c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013ab8:	683b      	ldr	r3, [r7, #0]
 8013aba:	691b      	ldr	r3, [r3, #16]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d125      	bne.n	8013b0c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	015a      	lsls	r2, r3, #5
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	4413      	add	r3, r2
 8013ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013acc:	691a      	ldr	r2, [r3, #16]
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	689b      	ldr	r3, [r3, #8]
 8013ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ad6:	6939      	ldr	r1, [r7, #16]
 8013ad8:	0148      	lsls	r0, r1, #5
 8013ada:	6979      	ldr	r1, [r7, #20]
 8013adc:	4401      	add	r1, r0
 8013ade:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ae2:	4313      	orrs	r3, r2
 8013ae4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	015a      	lsls	r2, r3, #5
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	4413      	add	r3, r2
 8013aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af2:	691b      	ldr	r3, [r3, #16]
 8013af4:	693a      	ldr	r2, [r7, #16]
 8013af6:	0151      	lsls	r1, r2, #5
 8013af8:	697a      	ldr	r2, [r7, #20]
 8013afa:	440a      	add	r2, r1
 8013afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b04:	6113      	str	r3, [r2, #16]
 8013b06:	e039      	b.n	8013b7c <USB_EPStartXfer+0x3dc>
 8013b08:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	691a      	ldr	r2, [r3, #16]
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	689b      	ldr	r3, [r3, #8]
 8013b14:	4413      	add	r3, r2
 8013b16:	1e5a      	subs	r2, r3, #1
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b20:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	689b      	ldr	r3, [r3, #8]
 8013b26:	89fa      	ldrh	r2, [r7, #14]
 8013b28:	fb03 f202 	mul.w	r2, r3, r2
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	015a      	lsls	r2, r3, #5
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	4413      	add	r3, r2
 8013b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b3c:	691a      	ldr	r2, [r3, #16]
 8013b3e:	89fb      	ldrh	r3, [r7, #14]
 8013b40:	04d9      	lsls	r1, r3, #19
 8013b42:	4b2f      	ldr	r3, [pc, #188]	; (8013c00 <USB_EPStartXfer+0x460>)
 8013b44:	400b      	ands	r3, r1
 8013b46:	6939      	ldr	r1, [r7, #16]
 8013b48:	0148      	lsls	r0, r1, #5
 8013b4a:	6979      	ldr	r1, [r7, #20]
 8013b4c:	4401      	add	r1, r0
 8013b4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b52:	4313      	orrs	r3, r2
 8013b54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	015a      	lsls	r2, r3, #5
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	4413      	add	r3, r2
 8013b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b62:	691a      	ldr	r2, [r3, #16]
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	6a1b      	ldr	r3, [r3, #32]
 8013b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b6c:	6939      	ldr	r1, [r7, #16]
 8013b6e:	0148      	lsls	r0, r1, #5
 8013b70:	6979      	ldr	r1, [r7, #20]
 8013b72:	4401      	add	r1, r0
 8013b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b78:	4313      	orrs	r3, r2
 8013b7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	791b      	ldrb	r3, [r3, #4]
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d128      	bne.n	8013bd6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b8a:	689b      	ldr	r3, [r3, #8]
 8013b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d110      	bne.n	8013bb6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	015a      	lsls	r2, r3, #5
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	693a      	ldr	r2, [r7, #16]
 8013ba4:	0151      	lsls	r1, r2, #5
 8013ba6:	697a      	ldr	r2, [r7, #20]
 8013ba8:	440a      	add	r2, r1
 8013baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013bb2:	6013      	str	r3, [r2, #0]
 8013bb4:	e00f      	b.n	8013bd6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	015a      	lsls	r2, r3, #5
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	4413      	add	r3, r2
 8013bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	693a      	ldr	r2, [r7, #16]
 8013bc6:	0151      	lsls	r1, r2, #5
 8013bc8:	697a      	ldr	r2, [r7, #20]
 8013bca:	440a      	add	r2, r1
 8013bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bd4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	015a      	lsls	r2, r3, #5
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	4413      	add	r3, r2
 8013bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	693a      	ldr	r2, [r7, #16]
 8013be6:	0151      	lsls	r1, r2, #5
 8013be8:	697a      	ldr	r2, [r7, #20]
 8013bea:	440a      	add	r2, r1
 8013bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013bf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013bf6:	2300      	movs	r3, #0
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3718      	adds	r7, #24
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	1ff80000 	.word	0x1ff80000

08013c04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c04:	b480      	push	{r7}
 8013c06:	b087      	sub	sp, #28
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013c12:	2300      	movs	r3, #0
 8013c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	785b      	ldrb	r3, [r3, #1]
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d14a      	bne.n	8013cb8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	015a      	lsls	r2, r3, #5
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	4413      	add	r3, r2
 8013c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c3a:	f040 8086 	bne.w	8013d4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	781b      	ldrb	r3, [r3, #0]
 8013c42:	015a      	lsls	r2, r3, #5
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	4413      	add	r3, r2
 8013c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	683a      	ldr	r2, [r7, #0]
 8013c50:	7812      	ldrb	r2, [r2, #0]
 8013c52:	0151      	lsls	r1, r2, #5
 8013c54:	693a      	ldr	r2, [r7, #16]
 8013c56:	440a      	add	r2, r1
 8013c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013c60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	015a      	lsls	r2, r3, #5
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	683a      	ldr	r2, [r7, #0]
 8013c74:	7812      	ldrb	r2, [r2, #0]
 8013c76:	0151      	lsls	r1, r2, #5
 8013c78:	693a      	ldr	r2, [r7, #16]
 8013c7a:	440a      	add	r2, r1
 8013c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	3301      	adds	r3, #1
 8013c8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d902      	bls.n	8013c9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013c96:	2301      	movs	r3, #1
 8013c98:	75fb      	strb	r3, [r7, #23]
          break;
 8013c9a:	e056      	b.n	8013d4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	781b      	ldrb	r3, [r3, #0]
 8013ca0:	015a      	lsls	r2, r3, #5
 8013ca2:	693b      	ldr	r3, [r7, #16]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cb4:	d0e7      	beq.n	8013c86 <USB_EPStopXfer+0x82>
 8013cb6:	e048      	b.n	8013d4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	015a      	lsls	r2, r3, #5
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	4413      	add	r3, r2
 8013cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cd0:	d13b      	bne.n	8013d4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	015a      	lsls	r2, r3, #5
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	4413      	add	r3, r2
 8013cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	683a      	ldr	r2, [r7, #0]
 8013ce4:	7812      	ldrb	r2, [r2, #0]
 8013ce6:	0151      	lsls	r1, r2, #5
 8013ce8:	693a      	ldr	r2, [r7, #16]
 8013cea:	440a      	add	r2, r1
 8013cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013cf4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	015a      	lsls	r2, r3, #5
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	4413      	add	r3, r2
 8013d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	683a      	ldr	r2, [r7, #0]
 8013d08:	7812      	ldrb	r2, [r2, #0]
 8013d0a:	0151      	lsls	r1, r2, #5
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	440a      	add	r2, r1
 8013d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	3301      	adds	r3, #1
 8013d1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8013d26:	4293      	cmp	r3, r2
 8013d28:	d902      	bls.n	8013d30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8013d2e:	e00c      	b.n	8013d4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	015a      	lsls	r2, r3, #5
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	4413      	add	r3, r2
 8013d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d48:	d0e7      	beq.n	8013d1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	371c      	adds	r7, #28
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b089      	sub	sp, #36	; 0x24
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	4611      	mov	r1, r2
 8013d64:	461a      	mov	r2, r3
 8013d66:	460b      	mov	r3, r1
 8013d68:	71fb      	strb	r3, [r7, #7]
 8013d6a:	4613      	mov	r3, r2
 8013d6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8013d76:	88bb      	ldrh	r3, [r7, #4]
 8013d78:	3303      	adds	r3, #3
 8013d7a:	089b      	lsrs	r3, r3, #2
 8013d7c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8013d7e:	2300      	movs	r3, #0
 8013d80:	61bb      	str	r3, [r7, #24]
 8013d82:	e018      	b.n	8013db6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013d84:	79fb      	ldrb	r3, [r7, #7]
 8013d86:	031a      	lsls	r2, r3, #12
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d90:	461a      	mov	r2, r3
 8013d92:	69fb      	ldr	r3, [r7, #28]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	6013      	str	r3, [r2, #0]
    pSrc++;
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	3301      	adds	r3, #1
 8013da2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	3301      	adds	r3, #1
 8013da8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	3301      	adds	r3, #1
 8013dae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	3301      	adds	r3, #1
 8013db4:	61bb      	str	r3, [r7, #24]
 8013db6:	69ba      	ldr	r2, [r7, #24]
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d3e2      	bcc.n	8013d84 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8013dbe:	2300      	movs	r3, #0
}
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	3724      	adds	r7, #36	; 0x24
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dca:	4770      	bx	lr

08013dcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b08b      	sub	sp, #44	; 0x2c
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	60f8      	str	r0, [r7, #12]
 8013dd4:	60b9      	str	r1, [r7, #8]
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013de2:	88fb      	ldrh	r3, [r7, #6]
 8013de4:	089b      	lsrs	r3, r3, #2
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013dea:	88fb      	ldrh	r3, [r7, #6]
 8013dec:	f003 0303 	and.w	r3, r3, #3
 8013df0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013df2:	2300      	movs	r3, #0
 8013df4:	623b      	str	r3, [r7, #32]
 8013df6:	e014      	b.n	8013e22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013df8:	69bb      	ldr	r3, [r7, #24]
 8013dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e02:	601a      	str	r2, [r3, #0]
    pDest++;
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	3301      	adds	r3, #1
 8013e08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e12:	3301      	adds	r3, #1
 8013e14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e18:	3301      	adds	r3, #1
 8013e1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013e1c:	6a3b      	ldr	r3, [r7, #32]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	623b      	str	r3, [r7, #32]
 8013e22:	6a3a      	ldr	r2, [r7, #32]
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d3e6      	bcc.n	8013df8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013e2a:	8bfb      	ldrh	r3, [r7, #30]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d01e      	beq.n	8013e6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013e30:	2300      	movs	r3, #0
 8013e32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	f107 0310 	add.w	r3, r7, #16
 8013e40:	6812      	ldr	r2, [r2, #0]
 8013e42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013e44:	693a      	ldr	r2, [r7, #16]
 8013e46:	6a3b      	ldr	r3, [r7, #32]
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	00db      	lsls	r3, r3, #3
 8013e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8013e50:	b2da      	uxtb	r2, r3
 8013e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e54:	701a      	strb	r2, [r3, #0]
      i++;
 8013e56:	6a3b      	ldr	r3, [r7, #32]
 8013e58:	3301      	adds	r3, #1
 8013e5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8013e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5e:	3301      	adds	r3, #1
 8013e60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013e62:	8bfb      	ldrh	r3, [r7, #30]
 8013e64:	3b01      	subs	r3, #1
 8013e66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013e68:	8bfb      	ldrh	r3, [r7, #30]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d1ea      	bne.n	8013e44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	372c      	adds	r7, #44	; 0x2c
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr

08013e7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b085      	sub	sp, #20
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	785b      	ldrb	r3, [r3, #1]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d12c      	bne.n	8013ef2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	015a      	lsls	r2, r3, #5
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	4413      	add	r3, r2
 8013ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	db12      	blt.n	8013ed0 <USB_EPSetStall+0x54>
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d00f      	beq.n	8013ed0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	015a      	lsls	r2, r3, #5
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	4413      	add	r3, r2
 8013eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	68ba      	ldr	r2, [r7, #8]
 8013ec0:	0151      	lsls	r1, r2, #5
 8013ec2:	68fa      	ldr	r2, [r7, #12]
 8013ec4:	440a      	add	r2, r1
 8013ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013eca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ece:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	015a      	lsls	r2, r3, #5
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	4413      	add	r3, r2
 8013ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	68ba      	ldr	r2, [r7, #8]
 8013ee0:	0151      	lsls	r1, r2, #5
 8013ee2:	68fa      	ldr	r2, [r7, #12]
 8013ee4:	440a      	add	r2, r1
 8013ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013eee:	6013      	str	r3, [r2, #0]
 8013ef0:	e02b      	b.n	8013f4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	015a      	lsls	r2, r3, #5
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	4413      	add	r3, r2
 8013efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	db12      	blt.n	8013f2a <USB_EPSetStall+0xae>
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d00f      	beq.n	8013f2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	015a      	lsls	r2, r3, #5
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	4413      	add	r3, r2
 8013f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	68ba      	ldr	r2, [r7, #8]
 8013f1a:	0151      	lsls	r1, r2, #5
 8013f1c:	68fa      	ldr	r2, [r7, #12]
 8013f1e:	440a      	add	r2, r1
 8013f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013f28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	015a      	lsls	r2, r3, #5
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	4413      	add	r3, r2
 8013f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	68ba      	ldr	r2, [r7, #8]
 8013f3a:	0151      	lsls	r1, r2, #5
 8013f3c:	68fa      	ldr	r2, [r7, #12]
 8013f3e:	440a      	add	r2, r1
 8013f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013f48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f4a:	2300      	movs	r3, #0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3714      	adds	r7, #20
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b085      	sub	sp, #20
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	781b      	ldrb	r3, [r3, #0]
 8013f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	785b      	ldrb	r3, [r3, #1]
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d128      	bne.n	8013fc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	015a      	lsls	r2, r3, #5
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	68ba      	ldr	r2, [r7, #8]
 8013f84:	0151      	lsls	r1, r2, #5
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	440a      	add	r2, r1
 8013f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	791b      	ldrb	r3, [r3, #4]
 8013f98:	2b03      	cmp	r3, #3
 8013f9a:	d003      	beq.n	8013fa4 <USB_EPClearStall+0x4c>
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	791b      	ldrb	r3, [r3, #4]
 8013fa0:	2b02      	cmp	r3, #2
 8013fa2:	d138      	bne.n	8014016 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	015a      	lsls	r2, r3, #5
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	4413      	add	r3, r2
 8013fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	68ba      	ldr	r2, [r7, #8]
 8013fb4:	0151      	lsls	r1, r2, #5
 8013fb6:	68fa      	ldr	r2, [r7, #12]
 8013fb8:	440a      	add	r2, r1
 8013fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fc2:	6013      	str	r3, [r2, #0]
 8013fc4:	e027      	b.n	8014016 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	015a      	lsls	r2, r3, #5
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	4413      	add	r3, r2
 8013fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	68ba      	ldr	r2, [r7, #8]
 8013fd6:	0151      	lsls	r1, r2, #5
 8013fd8:	68fa      	ldr	r2, [r7, #12]
 8013fda:	440a      	add	r2, r1
 8013fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fe0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013fe4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	791b      	ldrb	r3, [r3, #4]
 8013fea:	2b03      	cmp	r3, #3
 8013fec:	d003      	beq.n	8013ff6 <USB_EPClearStall+0x9e>
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	791b      	ldrb	r3, [r3, #4]
 8013ff2:	2b02      	cmp	r3, #2
 8013ff4:	d10f      	bne.n	8014016 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	015a      	lsls	r2, r3, #5
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	4413      	add	r3, r2
 8013ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	68ba      	ldr	r2, [r7, #8]
 8014006:	0151      	lsls	r1, r2, #5
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	440a      	add	r2, r1
 801400c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014014:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014016:	2300      	movs	r3, #0
}
 8014018:	4618      	mov	r0, r3
 801401a:	3714      	adds	r7, #20
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr

08014024 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014024:	b480      	push	{r7}
 8014026:	b085      	sub	sp, #20
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	460b      	mov	r3, r1
 801402e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	68fa      	ldr	r2, [r7, #12]
 801403e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014042:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014046:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	78fb      	ldrb	r3, [r7, #3]
 8014052:	011b      	lsls	r3, r3, #4
 8014054:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014058:	68f9      	ldr	r1, [r7, #12]
 801405a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801405e:	4313      	orrs	r3, r2
 8014060:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014062:	2300      	movs	r3, #0
}
 8014064:	4618      	mov	r0, r3
 8014066:	3714      	adds	r7, #20
 8014068:	46bd      	mov	sp, r7
 801406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406e:	4770      	bx	lr

08014070 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014070:	b480      	push	{r7}
 8014072:	b085      	sub	sp, #20
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801408a:	f023 0303 	bic.w	r3, r3, #3
 801408e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	68fa      	ldr	r2, [r7, #12]
 801409a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801409e:	f023 0302 	bic.w	r3, r3, #2
 80140a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3714      	adds	r7, #20
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr

080140b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80140b2:	b480      	push	{r7}
 80140b4:	b085      	sub	sp, #20
 80140b6:	af00      	add	r7, sp, #0
 80140b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	68fa      	ldr	r2, [r7, #12]
 80140c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80140cc:	f023 0303 	bic.w	r3, r3, #3
 80140d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140d8:	685b      	ldr	r3, [r3, #4]
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80140e0:	f043 0302 	orr.w	r3, r3, #2
 80140e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80140e6:	2300      	movs	r3, #0
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3714      	adds	r7, #20
 80140ec:	46bd      	mov	sp, r7
 80140ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f2:	4770      	bx	lr

080140f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80140f4:	b480      	push	{r7}
 80140f6:	b085      	sub	sp, #20
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	695b      	ldr	r3, [r3, #20]
 8014100:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	699b      	ldr	r3, [r3, #24]
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	4013      	ands	r3, r2
 801410a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801410c:	68fb      	ldr	r3, [r7, #12]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3714      	adds	r7, #20
 8014112:	46bd      	mov	sp, r7
 8014114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014118:	4770      	bx	lr

0801411a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801411a:	b480      	push	{r7}
 801411c:	b085      	sub	sp, #20
 801411e:	af00      	add	r7, sp, #0
 8014120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801412c:	699b      	ldr	r3, [r3, #24]
 801412e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014136:	69db      	ldr	r3, [r3, #28]
 8014138:	68ba      	ldr	r2, [r7, #8]
 801413a:	4013      	ands	r3, r2
 801413c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	0c1b      	lsrs	r3, r3, #16
}
 8014142:	4618      	mov	r0, r3
 8014144:	3714      	adds	r7, #20
 8014146:	46bd      	mov	sp, r7
 8014148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414c:	4770      	bx	lr

0801414e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801414e:	b480      	push	{r7}
 8014150:	b085      	sub	sp, #20
 8014152:	af00      	add	r7, sp, #0
 8014154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014160:	699b      	ldr	r3, [r3, #24]
 8014162:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801416a:	69db      	ldr	r3, [r3, #28]
 801416c:	68ba      	ldr	r2, [r7, #8]
 801416e:	4013      	ands	r3, r2
 8014170:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	b29b      	uxth	r3, r3
}
 8014176:	4618      	mov	r0, r3
 8014178:	3714      	adds	r7, #20
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr

08014182 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014182:	b480      	push	{r7}
 8014184:	b085      	sub	sp, #20
 8014186:	af00      	add	r7, sp, #0
 8014188:	6078      	str	r0, [r7, #4]
 801418a:	460b      	mov	r3, r1
 801418c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014192:	78fb      	ldrb	r3, [r7, #3]
 8014194:	015a      	lsls	r2, r3, #5
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	4413      	add	r3, r2
 801419a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801419e:	689b      	ldr	r3, [r3, #8]
 80141a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141a8:	695b      	ldr	r3, [r3, #20]
 80141aa:	68ba      	ldr	r2, [r7, #8]
 80141ac:	4013      	ands	r3, r2
 80141ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80141b0:	68bb      	ldr	r3, [r7, #8]
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3714      	adds	r7, #20
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr

080141be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80141be:	b480      	push	{r7}
 80141c0:	b087      	sub	sp, #28
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	6078      	str	r0, [r7, #4]
 80141c6:	460b      	mov	r3, r1
 80141c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141d4:	691b      	ldr	r3, [r3, #16]
 80141d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80141e2:	78fb      	ldrb	r3, [r7, #3]
 80141e4:	f003 030f 	and.w	r3, r3, #15
 80141e8:	68fa      	ldr	r2, [r7, #12]
 80141ea:	fa22 f303 	lsr.w	r3, r2, r3
 80141ee:	01db      	lsls	r3, r3, #7
 80141f0:	b2db      	uxtb	r3, r3
 80141f2:	693a      	ldr	r2, [r7, #16]
 80141f4:	4313      	orrs	r3, r2
 80141f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80141f8:	78fb      	ldrb	r3, [r7, #3]
 80141fa:	015a      	lsls	r2, r3, #5
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	4413      	add	r3, r2
 8014200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014204:	689b      	ldr	r3, [r3, #8]
 8014206:	693a      	ldr	r2, [r7, #16]
 8014208:	4013      	ands	r3, r2
 801420a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801420c:	68bb      	ldr	r3, [r7, #8]
}
 801420e:	4618      	mov	r0, r3
 8014210:	371c      	adds	r7, #28
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr

0801421a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801421a:	b480      	push	{r7}
 801421c:	b083      	sub	sp, #12
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	695b      	ldr	r3, [r3, #20]
 8014226:	f003 0301 	and.w	r3, r3, #1
}
 801422a:	4618      	mov	r0, r3
 801422c:	370c      	adds	r7, #12
 801422e:	46bd      	mov	sp, r7
 8014230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014234:	4770      	bx	lr

08014236 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014236:	b480      	push	{r7}
 8014238:	b085      	sub	sp, #20
 801423a:	af00      	add	r7, sp, #0
 801423c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	68fa      	ldr	r2, [r7, #12]
 801424c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014250:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014254:	f023 0307 	bic.w	r3, r3, #7
 8014258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	68fa      	ldr	r2, [r7, #12]
 8014264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801426c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801426e:	2300      	movs	r3, #0
}
 8014270:	4618      	mov	r0, r3
 8014272:	3714      	adds	r7, #20
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr

0801427c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 801427c:	b480      	push	{r7}
 801427e:	b085      	sub	sp, #20
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	333c      	adds	r3, #60	; 0x3c
 801428e:	3304      	adds	r3, #4
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	4a1c      	ldr	r2, [pc, #112]	; (8014308 <USB_EP0_OutStart+0x8c>)
 8014298:	4293      	cmp	r3, r2
 801429a:	d90a      	bls.n	80142b2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142ac:	d101      	bne.n	80142b2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80142ae:	2300      	movs	r3, #0
 80142b0:	e024      	b.n	80142fc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142b8:	461a      	mov	r2, r3
 80142ba:	2300      	movs	r3, #0
 80142bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142c4:	691b      	ldr	r3, [r3, #16]
 80142c6:	68fa      	ldr	r2, [r7, #12]
 80142c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80142d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142d8:	691b      	ldr	r3, [r3, #16]
 80142da:	68fa      	ldr	r2, [r7, #12]
 80142dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142e0:	f043 0318 	orr.w	r3, r3, #24
 80142e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142ec:	691b      	ldr	r3, [r3, #16]
 80142ee:	68fa      	ldr	r2, [r7, #12]
 80142f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80142f8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80142fa:	2300      	movs	r3, #0
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3714      	adds	r7, #20
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr
 8014308:	4f54300a 	.word	0x4f54300a

0801430c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801430c:	b480      	push	{r7}
 801430e:	b085      	sub	sp, #20
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014314:	2300      	movs	r3, #0
 8014316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	3301      	adds	r3, #1
 801431c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	4a13      	ldr	r2, [pc, #76]	; (8014370 <USB_CoreReset+0x64>)
 8014322:	4293      	cmp	r3, r2
 8014324:	d901      	bls.n	801432a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014326:	2303      	movs	r3, #3
 8014328:	e01b      	b.n	8014362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	691b      	ldr	r3, [r3, #16]
 801432e:	2b00      	cmp	r3, #0
 8014330:	daf2      	bge.n	8014318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014332:	2300      	movs	r3, #0
 8014334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	691b      	ldr	r3, [r3, #16]
 801433a:	f043 0201 	orr.w	r2, r3, #1
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	3301      	adds	r3, #1
 8014346:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	4a09      	ldr	r2, [pc, #36]	; (8014370 <USB_CoreReset+0x64>)
 801434c:	4293      	cmp	r3, r2
 801434e:	d901      	bls.n	8014354 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014350:	2303      	movs	r3, #3
 8014352:	e006      	b.n	8014362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	691b      	ldr	r3, [r3, #16]
 8014358:	f003 0301 	and.w	r3, r3, #1
 801435c:	2b01      	cmp	r3, #1
 801435e:	d0f0      	beq.n	8014342 <USB_CoreReset+0x36>

  return HAL_OK;
 8014360:	2300      	movs	r3, #0
}
 8014362:	4618      	mov	r0, r3
 8014364:	3714      	adds	r7, #20
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr
 801436e:	bf00      	nop
 8014370:	00030d40 	.word	0x00030d40

08014374 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014378:	4904      	ldr	r1, [pc, #16]	; (801438c <MX_FATFS_Init+0x18>)
 801437a:	4805      	ldr	r0, [pc, #20]	; (8014390 <MX_FATFS_Init+0x1c>)
 801437c:	f004 fb56 	bl	8018a2c <FATFS_LinkDriver>
 8014380:	4603      	mov	r3, r0
 8014382:	461a      	mov	r2, r3
 8014384:	4b03      	ldr	r3, [pc, #12]	; (8014394 <MX_FATFS_Init+0x20>)
 8014386:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014388:	bf00      	nop
 801438a:	bd80      	pop	{r7, pc}
 801438c:	20000f0c 	.word	0x20000f0c
 8014390:	0801cc60 	.word	0x0801cc60
 8014394:	20000f08 	.word	0x20000f08

08014398 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014398:	b480      	push	{r7}
 801439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801439c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801439e:	4618      	mov	r0, r3
 80143a0:	46bd      	mov	sp, r7
 80143a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a6:	4770      	bx	lr

080143a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80143ae:	2300      	movs	r3, #0
 80143b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80143b2:	f000 f885 	bl	80144c0 <BSP_SD_IsDetected>
 80143b6:	4603      	mov	r3, r0
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d001      	beq.n	80143c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80143bc:	2302      	movs	r3, #2
 80143be:	e012      	b.n	80143e6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80143c0:	480b      	ldr	r0, [pc, #44]	; (80143f0 <BSP_SD_Init+0x48>)
 80143c2:	f7f8 fe21 	bl	800d008 <HAL_SD_Init>
 80143c6:	4603      	mov	r3, r0
 80143c8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80143ca:	79fb      	ldrb	r3, [r7, #7]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d109      	bne.n	80143e4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80143d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80143d4:	4806      	ldr	r0, [pc, #24]	; (80143f0 <BSP_SD_Init+0x48>)
 80143d6:	f7f9 fcd5 	bl	800dd84 <HAL_SD_ConfigWideBusOperation>
 80143da:	4603      	mov	r3, r0
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d001      	beq.n	80143e4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80143e0:	2301      	movs	r3, #1
 80143e2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80143e4:	79fb      	ldrb	r3, [r7, #7]
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3708      	adds	r7, #8
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	2000059c 	.word	0x2000059c

080143f4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b086      	sub	sp, #24
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014400:	2300      	movs	r3, #0
 8014402:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	68ba      	ldr	r2, [r7, #8]
 8014408:	68f9      	ldr	r1, [r7, #12]
 801440a:	4806      	ldr	r0, [pc, #24]	; (8014424 <BSP_SD_ReadBlocks_DMA+0x30>)
 801440c:	f7f8 ff24 	bl	800d258 <HAL_SD_ReadBlocks_DMA>
 8014410:	4603      	mov	r3, r0
 8014412:	2b00      	cmp	r3, #0
 8014414:	d001      	beq.n	801441a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014416:	2301      	movs	r3, #1
 8014418:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801441a:	7dfb      	ldrb	r3, [r7, #23]
}
 801441c:	4618      	mov	r0, r3
 801441e:	3718      	adds	r7, #24
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}
 8014424:	2000059c 	.word	0x2000059c

08014428 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b086      	sub	sp, #24
 801442c:	af00      	add	r7, sp, #0
 801442e:	60f8      	str	r0, [r7, #12]
 8014430:	60b9      	str	r1, [r7, #8]
 8014432:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014434:	2300      	movs	r3, #0
 8014436:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	68ba      	ldr	r2, [r7, #8]
 801443c:	68f9      	ldr	r1, [r7, #12]
 801443e:	4806      	ldr	r0, [pc, #24]	; (8014458 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014440:	f7f8 ffb2 	bl	800d3a8 <HAL_SD_WriteBlocks_DMA>
 8014444:	4603      	mov	r3, r0
 8014446:	2b00      	cmp	r3, #0
 8014448:	d001      	beq.n	801444e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801444a:	2301      	movs	r3, #1
 801444c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801444e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014450:	4618      	mov	r0, r3
 8014452:	3718      	adds	r7, #24
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	2000059c 	.word	0x2000059c

0801445c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014460:	4805      	ldr	r0, [pc, #20]	; (8014478 <BSP_SD_GetCardState+0x1c>)
 8014462:	f7f9 fda3 	bl	800dfac <HAL_SD_GetCardState>
 8014466:	4603      	mov	r3, r0
 8014468:	2b04      	cmp	r3, #4
 801446a:	bf14      	ite	ne
 801446c:	2301      	movne	r3, #1
 801446e:	2300      	moveq	r3, #0
 8014470:	b2db      	uxtb	r3, r3
}
 8014472:	4618      	mov	r0, r3
 8014474:	bd80      	pop	{r7, pc}
 8014476:	bf00      	nop
 8014478:	2000059c 	.word	0x2000059c

0801447c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8014484:	6879      	ldr	r1, [r7, #4]
 8014486:	4803      	ldr	r0, [pc, #12]	; (8014494 <BSP_SD_GetCardInfo+0x18>)
 8014488:	f7f9 fc50 	bl	800dd2c <HAL_SD_GetCardInfo>
}
 801448c:	bf00      	nop
 801448e:	3708      	adds	r7, #8
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}
 8014494:	2000059c 	.word	0x2000059c

08014498 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b082      	sub	sp, #8
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80144a0:	f000 f99e 	bl	80147e0 <BSP_SD_WriteCpltCallback>
}
 80144a4:	bf00      	nop
 80144a6:	3708      	adds	r7, #8
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80144b4:	f000 f9a0 	bl	80147f8 <BSP_SD_ReadCpltCallback>
}
 80144b8:	bf00      	nop
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80144c6:	2301      	movs	r3, #1
 80144c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80144ca:	f000 f80b 	bl	80144e4 <BSP_PlatformIsDetected>
 80144ce:	4603      	mov	r3, r0
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d101      	bne.n	80144d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80144d4:	2300      	movs	r3, #0
 80144d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80144d8:	79fb      	ldrb	r3, [r7, #7]
 80144da:	b2db      	uxtb	r3, r3
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3708      	adds	r7, #8
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80144ea:	2301      	movs	r3, #1
 80144ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 80144ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80144f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80144f6:	f7f3 fc6b 	bl	8007dd0 <HAL_GPIO_ReadPin>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b01      	cmp	r3, #1
 80144fe:	d001      	beq.n	8014504 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8014500:	2300      	movs	r3, #0
 8014502:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014504:	79fb      	ldrb	r3, [r7, #7]
}
 8014506:	4618      	mov	r0, r3
 8014508:	3708      	adds	r7, #8
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}

0801450e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801450e:	b580      	push	{r7, lr}
 8014510:	b084      	sub	sp, #16
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014516:	f7f2 fd67 	bl	8006fe8 <HAL_GetTick>
 801451a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801451c:	e006      	b.n	801452c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801451e:	f7ff ff9d 	bl	801445c <BSP_SD_GetCardState>
 8014522:	4603      	mov	r3, r0
 8014524:	2b00      	cmp	r3, #0
 8014526:	d101      	bne.n	801452c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014528:	2300      	movs	r3, #0
 801452a:	e009      	b.n	8014540 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801452c:	f7f2 fd5c 	bl	8006fe8 <HAL_GetTick>
 8014530:	4602      	mov	r2, r0
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	1ad3      	subs	r3, r2, r3
 8014536:	687a      	ldr	r2, [r7, #4]
 8014538:	429a      	cmp	r2, r3
 801453a:	d8f0      	bhi.n	801451e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801453c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014540:	4618      	mov	r0, r3
 8014542:	3710      	adds	r7, #16
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}

08014548 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	4603      	mov	r3, r0
 8014550:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014552:	4b0b      	ldr	r3, [pc, #44]	; (8014580 <SD_CheckStatus+0x38>)
 8014554:	2201      	movs	r2, #1
 8014556:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014558:	f7ff ff80 	bl	801445c <BSP_SD_GetCardState>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d107      	bne.n	8014572 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014562:	4b07      	ldr	r3, [pc, #28]	; (8014580 <SD_CheckStatus+0x38>)
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	b2db      	uxtb	r3, r3
 8014568:	f023 0301 	bic.w	r3, r3, #1
 801456c:	b2da      	uxtb	r2, r3
 801456e:	4b04      	ldr	r3, [pc, #16]	; (8014580 <SD_CheckStatus+0x38>)
 8014570:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014572:	4b03      	ldr	r3, [pc, #12]	; (8014580 <SD_CheckStatus+0x38>)
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	b2db      	uxtb	r3, r3
}
 8014578:	4618      	mov	r0, r3
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	2000000d 	.word	0x2000000d

08014584 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b082      	sub	sp, #8
 8014588:	af00      	add	r7, sp, #0
 801458a:	4603      	mov	r3, r0
 801458c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801458e:	f7ff ff0b 	bl	80143a8 <BSP_SD_Init>
 8014592:	4603      	mov	r3, r0
 8014594:	2b00      	cmp	r3, #0
 8014596:	d107      	bne.n	80145a8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014598:	79fb      	ldrb	r3, [r7, #7]
 801459a:	4618      	mov	r0, r3
 801459c:	f7ff ffd4 	bl	8014548 <SD_CheckStatus>
 80145a0:	4603      	mov	r3, r0
 80145a2:	461a      	mov	r2, r3
 80145a4:	4b04      	ldr	r3, [pc, #16]	; (80145b8 <SD_initialize+0x34>)
 80145a6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80145a8:	4b03      	ldr	r3, [pc, #12]	; (80145b8 <SD_initialize+0x34>)
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	b2db      	uxtb	r3, r3
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3708      	adds	r7, #8
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	2000000d 	.word	0x2000000d

080145bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	4603      	mov	r3, r0
 80145c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80145c6:	79fb      	ldrb	r3, [r7, #7]
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7ff ffbd 	bl	8014548 <SD_CheckStatus>
 80145ce:	4603      	mov	r3, r0
}
 80145d0:	4618      	mov	r0, r3
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b086      	sub	sp, #24
 80145dc:	af00      	add	r7, sp, #0
 80145de:	60b9      	str	r1, [r7, #8]
 80145e0:	607a      	str	r2, [r7, #4]
 80145e2:	603b      	str	r3, [r7, #0]
 80145e4:	4603      	mov	r3, r0
 80145e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80145e8:	2301      	movs	r3, #1
 80145ea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80145ec:	f247 5030 	movw	r0, #30000	; 0x7530
 80145f0:	f7ff ff8d 	bl	801450e <SD_CheckStatusWithTimeout>
 80145f4:	4603      	mov	r3, r0
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	da01      	bge.n	80145fe <SD_read+0x26>
  {
    return res;
 80145fa:	7dfb      	ldrb	r3, [r7, #23]
 80145fc:	e03b      	b.n	8014676 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80145fe:	683a      	ldr	r2, [r7, #0]
 8014600:	6879      	ldr	r1, [r7, #4]
 8014602:	68b8      	ldr	r0, [r7, #8]
 8014604:	f7ff fef6 	bl	80143f4 <BSP_SD_ReadBlocks_DMA>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d132      	bne.n	8014674 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801460e:	4b1c      	ldr	r3, [pc, #112]	; (8014680 <SD_read+0xa8>)
 8014610:	2200      	movs	r2, #0
 8014612:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014614:	f7f2 fce8 	bl	8006fe8 <HAL_GetTick>
 8014618:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801461a:	bf00      	nop
 801461c:	4b18      	ldr	r3, [pc, #96]	; (8014680 <SD_read+0xa8>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d108      	bne.n	8014636 <SD_read+0x5e>
 8014624:	f7f2 fce0 	bl	8006fe8 <HAL_GetTick>
 8014628:	4602      	mov	r2, r0
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	1ad3      	subs	r3, r2, r3
 801462e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014632:	4293      	cmp	r3, r2
 8014634:	d9f2      	bls.n	801461c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014636:	4b12      	ldr	r3, [pc, #72]	; (8014680 <SD_read+0xa8>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d102      	bne.n	8014644 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801463e:	2301      	movs	r3, #1
 8014640:	75fb      	strb	r3, [r7, #23]
 8014642:	e017      	b.n	8014674 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014644:	4b0e      	ldr	r3, [pc, #56]	; (8014680 <SD_read+0xa8>)
 8014646:	2200      	movs	r2, #0
 8014648:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801464a:	f7f2 fccd 	bl	8006fe8 <HAL_GetTick>
 801464e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014650:	e007      	b.n	8014662 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014652:	f7ff ff03 	bl	801445c <BSP_SD_GetCardState>
 8014656:	4603      	mov	r3, r0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d102      	bne.n	8014662 <SD_read+0x8a>
          {
            res = RES_OK;
 801465c:	2300      	movs	r3, #0
 801465e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014660:	e008      	b.n	8014674 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014662:	f7f2 fcc1 	bl	8006fe8 <HAL_GetTick>
 8014666:	4602      	mov	r2, r0
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	1ad3      	subs	r3, r2, r3
 801466c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014670:	4293      	cmp	r3, r2
 8014672:	d9ee      	bls.n	8014652 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014674:	7dfb      	ldrb	r3, [r7, #23]
}
 8014676:	4618      	mov	r0, r3
 8014678:	3718      	adds	r7, #24
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	20001374 	.word	0x20001374

08014684 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b086      	sub	sp, #24
 8014688:	af00      	add	r7, sp, #0
 801468a:	60b9      	str	r1, [r7, #8]
 801468c:	607a      	str	r2, [r7, #4]
 801468e:	603b      	str	r3, [r7, #0]
 8014690:	4603      	mov	r3, r0
 8014692:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014694:	2301      	movs	r3, #1
 8014696:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014698:	4b24      	ldr	r3, [pc, #144]	; (801472c <SD_write+0xa8>)
 801469a:	2200      	movs	r2, #0
 801469c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801469e:	f247 5030 	movw	r0, #30000	; 0x7530
 80146a2:	f7ff ff34 	bl	801450e <SD_CheckStatusWithTimeout>
 80146a6:	4603      	mov	r3, r0
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	da01      	bge.n	80146b0 <SD_write+0x2c>
  {
    return res;
 80146ac:	7dfb      	ldrb	r3, [r7, #23]
 80146ae:	e038      	b.n	8014722 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80146b0:	683a      	ldr	r2, [r7, #0]
 80146b2:	6879      	ldr	r1, [r7, #4]
 80146b4:	68b8      	ldr	r0, [r7, #8]
 80146b6:	f7ff feb7 	bl	8014428 <BSP_SD_WriteBlocks_DMA>
 80146ba:	4603      	mov	r3, r0
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d12f      	bne.n	8014720 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80146c0:	f7f2 fc92 	bl	8006fe8 <HAL_GetTick>
 80146c4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80146c6:	bf00      	nop
 80146c8:	4b18      	ldr	r3, [pc, #96]	; (801472c <SD_write+0xa8>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d108      	bne.n	80146e2 <SD_write+0x5e>
 80146d0:	f7f2 fc8a 	bl	8006fe8 <HAL_GetTick>
 80146d4:	4602      	mov	r2, r0
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	1ad3      	subs	r3, r2, r3
 80146da:	f247 522f 	movw	r2, #29999	; 0x752f
 80146de:	4293      	cmp	r3, r2
 80146e0:	d9f2      	bls.n	80146c8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80146e2:	4b12      	ldr	r3, [pc, #72]	; (801472c <SD_write+0xa8>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d102      	bne.n	80146f0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80146ea:	2301      	movs	r3, #1
 80146ec:	75fb      	strb	r3, [r7, #23]
 80146ee:	e017      	b.n	8014720 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80146f0:	4b0e      	ldr	r3, [pc, #56]	; (801472c <SD_write+0xa8>)
 80146f2:	2200      	movs	r2, #0
 80146f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80146f6:	f7f2 fc77 	bl	8006fe8 <HAL_GetTick>
 80146fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80146fc:	e007      	b.n	801470e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80146fe:	f7ff fead 	bl	801445c <BSP_SD_GetCardState>
 8014702:	4603      	mov	r3, r0
 8014704:	2b00      	cmp	r3, #0
 8014706:	d102      	bne.n	801470e <SD_write+0x8a>
          {
            res = RES_OK;
 8014708:	2300      	movs	r3, #0
 801470a:	75fb      	strb	r3, [r7, #23]
            break;
 801470c:	e008      	b.n	8014720 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801470e:	f7f2 fc6b 	bl	8006fe8 <HAL_GetTick>
 8014712:	4602      	mov	r2, r0
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	1ad3      	subs	r3, r2, r3
 8014718:	f247 522f 	movw	r2, #29999	; 0x752f
 801471c:	4293      	cmp	r3, r2
 801471e:	d9ee      	bls.n	80146fe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014720:	7dfb      	ldrb	r3, [r7, #23]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3718      	adds	r7, #24
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	20001370 	.word	0x20001370

08014730 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b08c      	sub	sp, #48	; 0x30
 8014734:	af00      	add	r7, sp, #0
 8014736:	4603      	mov	r3, r0
 8014738:	603a      	str	r2, [r7, #0]
 801473a:	71fb      	strb	r3, [r7, #7]
 801473c:	460b      	mov	r3, r1
 801473e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014740:	2301      	movs	r3, #1
 8014742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014746:	4b25      	ldr	r3, [pc, #148]	; (80147dc <SD_ioctl+0xac>)
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	b2db      	uxtb	r3, r3
 801474c:	f003 0301 	and.w	r3, r3, #1
 8014750:	2b00      	cmp	r3, #0
 8014752:	d001      	beq.n	8014758 <SD_ioctl+0x28>
 8014754:	2303      	movs	r3, #3
 8014756:	e03c      	b.n	80147d2 <SD_ioctl+0xa2>

  switch (cmd)
 8014758:	79bb      	ldrb	r3, [r7, #6]
 801475a:	2b03      	cmp	r3, #3
 801475c:	d834      	bhi.n	80147c8 <SD_ioctl+0x98>
 801475e:	a201      	add	r2, pc, #4	; (adr r2, 8014764 <SD_ioctl+0x34>)
 8014760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014764:	08014775 	.word	0x08014775
 8014768:	0801477d 	.word	0x0801477d
 801476c:	08014795 	.word	0x08014795
 8014770:	080147af 	.word	0x080147af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014774:	2300      	movs	r3, #0
 8014776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801477a:	e028      	b.n	80147ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801477c:	f107 0308 	add.w	r3, r7, #8
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff fe7b 	bl	801447c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014786:	6a3a      	ldr	r2, [r7, #32]
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801478c:	2300      	movs	r3, #0
 801478e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014792:	e01c      	b.n	80147ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014794:	f107 0308 	add.w	r3, r7, #8
 8014798:	4618      	mov	r0, r3
 801479a:	f7ff fe6f 	bl	801447c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a0:	b29a      	uxth	r2, r3
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80147a6:	2300      	movs	r3, #0
 80147a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80147ac:	e00f      	b.n	80147ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80147ae:	f107 0308 	add.w	r3, r7, #8
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7ff fe62 	bl	801447c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80147b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ba:	0a5a      	lsrs	r2, r3, #9
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80147c0:	2300      	movs	r3, #0
 80147c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80147c6:	e002      	b.n	80147ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80147c8:	2304      	movs	r3, #4
 80147ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80147ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3730      	adds	r7, #48	; 0x30
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	2000000d 	.word	0x2000000d

080147e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80147e0:	b480      	push	{r7}
 80147e2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80147e4:	4b03      	ldr	r3, [pc, #12]	; (80147f4 <BSP_SD_WriteCpltCallback+0x14>)
 80147e6:	2201      	movs	r2, #1
 80147e8:	601a      	str	r2, [r3, #0]
}
 80147ea:	bf00      	nop
 80147ec:	46bd      	mov	sp, r7
 80147ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f2:	4770      	bx	lr
 80147f4:	20001370 	.word	0x20001370

080147f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80147f8:	b480      	push	{r7}
 80147fa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80147fc:	4b03      	ldr	r3, [pc, #12]	; (801480c <BSP_SD_ReadCpltCallback+0x14>)
 80147fe:	2201      	movs	r2, #1
 8014800:	601a      	str	r2, [r3, #0]
}
 8014802:	bf00      	nop
 8014804:	46bd      	mov	sp, r7
 8014806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480a:	4770      	bx	lr
 801480c:	20001374 	.word	0x20001374

08014810 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	460b      	mov	r3, r1
 801481a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801481c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014820:	f004 fef2 	bl	8019608 <USBD_static_malloc>
 8014824:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d109      	bne.n	8014840 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	32b0      	adds	r2, #176	; 0xb0
 8014836:	2100      	movs	r1, #0
 8014838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801483c:	2302      	movs	r3, #2
 801483e:	e0d4      	b.n	80149ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014840:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014844:	2100      	movs	r1, #0
 8014846:	68f8      	ldr	r0, [r7, #12]
 8014848:	f004 ff3e 	bl	80196c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	32b0      	adds	r2, #176	; 0xb0
 8014856:	68f9      	ldr	r1, [r7, #12]
 8014858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	32b0      	adds	r2, #176	; 0xb0
 8014866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	7c1b      	ldrb	r3, [r3, #16]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d138      	bne.n	80148ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014878:	4b5e      	ldr	r3, [pc, #376]	; (80149f4 <USBD_CDC_Init+0x1e4>)
 801487a:	7819      	ldrb	r1, [r3, #0]
 801487c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014880:	2202      	movs	r2, #2
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f004 fcfa 	bl	801927c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014888:	4b5a      	ldr	r3, [pc, #360]	; (80149f4 <USBD_CDC_Init+0x1e4>)
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	f003 020f 	and.w	r2, r3, #15
 8014890:	6879      	ldr	r1, [r7, #4]
 8014892:	4613      	mov	r3, r2
 8014894:	009b      	lsls	r3, r3, #2
 8014896:	4413      	add	r3, r2
 8014898:	009b      	lsls	r3, r3, #2
 801489a:	440b      	add	r3, r1
 801489c:	3324      	adds	r3, #36	; 0x24
 801489e:	2201      	movs	r2, #1
 80148a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80148a2:	4b55      	ldr	r3, [pc, #340]	; (80149f8 <USBD_CDC_Init+0x1e8>)
 80148a4:	7819      	ldrb	r1, [r3, #0]
 80148a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148aa:	2202      	movs	r2, #2
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f004 fce5 	bl	801927c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80148b2:	4b51      	ldr	r3, [pc, #324]	; (80149f8 <USBD_CDC_Init+0x1e8>)
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	f003 020f 	and.w	r2, r3, #15
 80148ba:	6879      	ldr	r1, [r7, #4]
 80148bc:	4613      	mov	r3, r2
 80148be:	009b      	lsls	r3, r3, #2
 80148c0:	4413      	add	r3, r2
 80148c2:	009b      	lsls	r3, r3, #2
 80148c4:	440b      	add	r3, r1
 80148c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80148ca:	2201      	movs	r2, #1
 80148cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80148ce:	4b4b      	ldr	r3, [pc, #300]	; (80149fc <USBD_CDC_Init+0x1ec>)
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	f003 020f 	and.w	r2, r3, #15
 80148d6:	6879      	ldr	r1, [r7, #4]
 80148d8:	4613      	mov	r3, r2
 80148da:	009b      	lsls	r3, r3, #2
 80148dc:	4413      	add	r3, r2
 80148de:	009b      	lsls	r3, r3, #2
 80148e0:	440b      	add	r3, r1
 80148e2:	3326      	adds	r3, #38	; 0x26
 80148e4:	2210      	movs	r2, #16
 80148e6:	801a      	strh	r2, [r3, #0]
 80148e8:	e035      	b.n	8014956 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80148ea:	4b42      	ldr	r3, [pc, #264]	; (80149f4 <USBD_CDC_Init+0x1e4>)
 80148ec:	7819      	ldrb	r1, [r3, #0]
 80148ee:	2340      	movs	r3, #64	; 0x40
 80148f0:	2202      	movs	r2, #2
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f004 fcc2 	bl	801927c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80148f8:	4b3e      	ldr	r3, [pc, #248]	; (80149f4 <USBD_CDC_Init+0x1e4>)
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	f003 020f 	and.w	r2, r3, #15
 8014900:	6879      	ldr	r1, [r7, #4]
 8014902:	4613      	mov	r3, r2
 8014904:	009b      	lsls	r3, r3, #2
 8014906:	4413      	add	r3, r2
 8014908:	009b      	lsls	r3, r3, #2
 801490a:	440b      	add	r3, r1
 801490c:	3324      	adds	r3, #36	; 0x24
 801490e:	2201      	movs	r2, #1
 8014910:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014912:	4b39      	ldr	r3, [pc, #228]	; (80149f8 <USBD_CDC_Init+0x1e8>)
 8014914:	7819      	ldrb	r1, [r3, #0]
 8014916:	2340      	movs	r3, #64	; 0x40
 8014918:	2202      	movs	r2, #2
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f004 fcae 	bl	801927c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014920:	4b35      	ldr	r3, [pc, #212]	; (80149f8 <USBD_CDC_Init+0x1e8>)
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	f003 020f 	and.w	r2, r3, #15
 8014928:	6879      	ldr	r1, [r7, #4]
 801492a:	4613      	mov	r3, r2
 801492c:	009b      	lsls	r3, r3, #2
 801492e:	4413      	add	r3, r2
 8014930:	009b      	lsls	r3, r3, #2
 8014932:	440b      	add	r3, r1
 8014934:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014938:	2201      	movs	r2, #1
 801493a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801493c:	4b2f      	ldr	r3, [pc, #188]	; (80149fc <USBD_CDC_Init+0x1ec>)
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	f003 020f 	and.w	r2, r3, #15
 8014944:	6879      	ldr	r1, [r7, #4]
 8014946:	4613      	mov	r3, r2
 8014948:	009b      	lsls	r3, r3, #2
 801494a:	4413      	add	r3, r2
 801494c:	009b      	lsls	r3, r3, #2
 801494e:	440b      	add	r3, r1
 8014950:	3326      	adds	r3, #38	; 0x26
 8014952:	2210      	movs	r2, #16
 8014954:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014956:	4b29      	ldr	r3, [pc, #164]	; (80149fc <USBD_CDC_Init+0x1ec>)
 8014958:	7819      	ldrb	r1, [r3, #0]
 801495a:	2308      	movs	r3, #8
 801495c:	2203      	movs	r2, #3
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f004 fc8c 	bl	801927c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014964:	4b25      	ldr	r3, [pc, #148]	; (80149fc <USBD_CDC_Init+0x1ec>)
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	f003 020f 	and.w	r2, r3, #15
 801496c:	6879      	ldr	r1, [r7, #4]
 801496e:	4613      	mov	r3, r2
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	4413      	add	r3, r2
 8014974:	009b      	lsls	r3, r3, #2
 8014976:	440b      	add	r3, r1
 8014978:	3324      	adds	r3, #36	; 0x24
 801497a:	2201      	movs	r2, #1
 801497c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	2200      	movs	r2, #0
 8014982:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801498c:	687a      	ldr	r2, [r7, #4]
 801498e:	33b0      	adds	r3, #176	; 0xb0
 8014990:	009b      	lsls	r3, r3, #2
 8014992:	4413      	add	r3, r2
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2200      	movs	r2, #0
 801499e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	2200      	movs	r2, #0
 80149a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d101      	bne.n	80149b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80149b4:	2302      	movs	r3, #2
 80149b6:	e018      	b.n	80149ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	7c1b      	ldrb	r3, [r3, #16]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d10a      	bne.n	80149d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80149c0:	4b0d      	ldr	r3, [pc, #52]	; (80149f8 <USBD_CDC_Init+0x1e8>)
 80149c2:	7819      	ldrb	r1, [r3, #0]
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80149ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f004 fdce 	bl	8019570 <USBD_LL_PrepareReceive>
 80149d4:	e008      	b.n	80149e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80149d6:	4b08      	ldr	r3, [pc, #32]	; (80149f8 <USBD_CDC_Init+0x1e8>)
 80149d8:	7819      	ldrb	r1, [r3, #0]
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80149e0:	2340      	movs	r3, #64	; 0x40
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f004 fdc4 	bl	8019570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80149e8:	2300      	movs	r3, #0
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3710      	adds	r7, #16
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	20000097 	.word	0x20000097
 80149f8:	20000098 	.word	0x20000098
 80149fc:	20000099 	.word	0x20000099

08014a00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	460b      	mov	r3, r1
 8014a0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014a0c:	4b3a      	ldr	r3, [pc, #232]	; (8014af8 <USBD_CDC_DeInit+0xf8>)
 8014a0e:	781b      	ldrb	r3, [r3, #0]
 8014a10:	4619      	mov	r1, r3
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f004 fc70 	bl	80192f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014a18:	4b37      	ldr	r3, [pc, #220]	; (8014af8 <USBD_CDC_DeInit+0xf8>)
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	f003 020f 	and.w	r2, r3, #15
 8014a20:	6879      	ldr	r1, [r7, #4]
 8014a22:	4613      	mov	r3, r2
 8014a24:	009b      	lsls	r3, r3, #2
 8014a26:	4413      	add	r3, r2
 8014a28:	009b      	lsls	r3, r3, #2
 8014a2a:	440b      	add	r3, r1
 8014a2c:	3324      	adds	r3, #36	; 0x24
 8014a2e:	2200      	movs	r2, #0
 8014a30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014a32:	4b32      	ldr	r3, [pc, #200]	; (8014afc <USBD_CDC_DeInit+0xfc>)
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	4619      	mov	r1, r3
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f004 fc5d 	bl	80192f8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014a3e:	4b2f      	ldr	r3, [pc, #188]	; (8014afc <USBD_CDC_DeInit+0xfc>)
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	f003 020f 	and.w	r2, r3, #15
 8014a46:	6879      	ldr	r1, [r7, #4]
 8014a48:	4613      	mov	r3, r2
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	4413      	add	r3, r2
 8014a4e:	009b      	lsls	r3, r3, #2
 8014a50:	440b      	add	r3, r1
 8014a52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014a56:	2200      	movs	r2, #0
 8014a58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014a5a:	4b29      	ldr	r3, [pc, #164]	; (8014b00 <USBD_CDC_DeInit+0x100>)
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	4619      	mov	r1, r3
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f004 fc49 	bl	80192f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014a66:	4b26      	ldr	r3, [pc, #152]	; (8014b00 <USBD_CDC_DeInit+0x100>)
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	f003 020f 	and.w	r2, r3, #15
 8014a6e:	6879      	ldr	r1, [r7, #4]
 8014a70:	4613      	mov	r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	4413      	add	r3, r2
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	440b      	add	r3, r1
 8014a7a:	3324      	adds	r3, #36	; 0x24
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014a80:	4b1f      	ldr	r3, [pc, #124]	; (8014b00 <USBD_CDC_DeInit+0x100>)
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	f003 020f 	and.w	r2, r3, #15
 8014a88:	6879      	ldr	r1, [r7, #4]
 8014a8a:	4613      	mov	r3, r2
 8014a8c:	009b      	lsls	r3, r3, #2
 8014a8e:	4413      	add	r3, r2
 8014a90:	009b      	lsls	r3, r3, #2
 8014a92:	440b      	add	r3, r1
 8014a94:	3326      	adds	r3, #38	; 0x26
 8014a96:	2200      	movs	r2, #0
 8014a98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	32b0      	adds	r2, #176	; 0xb0
 8014aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d01f      	beq.n	8014aec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	33b0      	adds	r3, #176	; 0xb0
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	4413      	add	r3, r2
 8014aba:	685b      	ldr	r3, [r3, #4]
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	32b0      	adds	r2, #176	; 0xb0
 8014aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f004 fda8 	bl	8019624 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	32b0      	adds	r2, #176	; 0xb0
 8014ade:	2100      	movs	r1, #0
 8014ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014aec:	2300      	movs	r3, #0
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3708      	adds	r7, #8
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	20000097 	.word	0x20000097
 8014afc:	20000098 	.word	0x20000098
 8014b00:	20000099 	.word	0x20000099

08014b04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b086      	sub	sp, #24
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	32b0      	adds	r2, #176	; 0xb0
 8014b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014b22:	2300      	movs	r3, #0
 8014b24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b26:	2300      	movs	r3, #0
 8014b28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d101      	bne.n	8014b34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014b30:	2303      	movs	r3, #3
 8014b32:	e0bf      	b.n	8014cb4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d050      	beq.n	8014be2 <USBD_CDC_Setup+0xde>
 8014b40:	2b20      	cmp	r3, #32
 8014b42:	f040 80af 	bne.w	8014ca4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	88db      	ldrh	r3, [r3, #6]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d03a      	beq.n	8014bc4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	b25b      	sxtb	r3, r3
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	da1b      	bge.n	8014b90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b5e:	687a      	ldr	r2, [r7, #4]
 8014b60:	33b0      	adds	r3, #176	; 0xb0
 8014b62:	009b      	lsls	r3, r3, #2
 8014b64:	4413      	add	r3, r2
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	689b      	ldr	r3, [r3, #8]
 8014b6a:	683a      	ldr	r2, [r7, #0]
 8014b6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014b6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014b70:	683a      	ldr	r2, [r7, #0]
 8014b72:	88d2      	ldrh	r2, [r2, #6]
 8014b74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	88db      	ldrh	r3, [r3, #6]
 8014b7a:	2b07      	cmp	r3, #7
 8014b7c:	bf28      	it	cs
 8014b7e:	2307      	movcs	r3, #7
 8014b80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	89fa      	ldrh	r2, [r7, #14]
 8014b86:	4619      	mov	r1, r3
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f001 fd89 	bl	80166a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014b8e:	e090      	b.n	8014cb2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	785a      	ldrb	r2, [r3, #1]
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	88db      	ldrh	r3, [r3, #6]
 8014b9e:	2b3f      	cmp	r3, #63	; 0x3f
 8014ba0:	d803      	bhi.n	8014baa <USBD_CDC_Setup+0xa6>
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	88db      	ldrh	r3, [r3, #6]
 8014ba6:	b2da      	uxtb	r2, r3
 8014ba8:	e000      	b.n	8014bac <USBD_CDC_Setup+0xa8>
 8014baa:	2240      	movs	r2, #64	; 0x40
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014bb2:	6939      	ldr	r1, [r7, #16]
 8014bb4:	693b      	ldr	r3, [r7, #16]
 8014bb6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014bba:	461a      	mov	r2, r3
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f001 fd9b 	bl	80166f8 <USBD_CtlPrepareRx>
      break;
 8014bc2:	e076      	b.n	8014cb2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bca:	687a      	ldr	r2, [r7, #4]
 8014bcc:	33b0      	adds	r3, #176	; 0xb0
 8014bce:	009b      	lsls	r3, r3, #2
 8014bd0:	4413      	add	r3, r2
 8014bd2:	685b      	ldr	r3, [r3, #4]
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	683a      	ldr	r2, [r7, #0]
 8014bd8:	7850      	ldrb	r0, [r2, #1]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	6839      	ldr	r1, [r7, #0]
 8014bde:	4798      	blx	r3
      break;
 8014be0:	e067      	b.n	8014cb2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	785b      	ldrb	r3, [r3, #1]
 8014be6:	2b0b      	cmp	r3, #11
 8014be8:	d851      	bhi.n	8014c8e <USBD_CDC_Setup+0x18a>
 8014bea:	a201      	add	r2, pc, #4	; (adr r2, 8014bf0 <USBD_CDC_Setup+0xec>)
 8014bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bf0:	08014c21 	.word	0x08014c21
 8014bf4:	08014c9d 	.word	0x08014c9d
 8014bf8:	08014c8f 	.word	0x08014c8f
 8014bfc:	08014c8f 	.word	0x08014c8f
 8014c00:	08014c8f 	.word	0x08014c8f
 8014c04:	08014c8f 	.word	0x08014c8f
 8014c08:	08014c8f 	.word	0x08014c8f
 8014c0c:	08014c8f 	.word	0x08014c8f
 8014c10:	08014c8f 	.word	0x08014c8f
 8014c14:	08014c8f 	.word	0x08014c8f
 8014c18:	08014c4b 	.word	0x08014c4b
 8014c1c:	08014c75 	.word	0x08014c75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c26:	b2db      	uxtb	r3, r3
 8014c28:	2b03      	cmp	r3, #3
 8014c2a:	d107      	bne.n	8014c3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014c2c:	f107 030a 	add.w	r3, r7, #10
 8014c30:	2202      	movs	r2, #2
 8014c32:	4619      	mov	r1, r3
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f001 fd33 	bl	80166a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014c3a:	e032      	b.n	8014ca2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014c3c:	6839      	ldr	r1, [r7, #0]
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f001 fcbd 	bl	80165be <USBD_CtlError>
            ret = USBD_FAIL;
 8014c44:	2303      	movs	r3, #3
 8014c46:	75fb      	strb	r3, [r7, #23]
          break;
 8014c48:	e02b      	b.n	8014ca2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	2b03      	cmp	r3, #3
 8014c54:	d107      	bne.n	8014c66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014c56:	f107 030d 	add.w	r3, r7, #13
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f001 fd1e 	bl	80166a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014c64:	e01d      	b.n	8014ca2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014c66:	6839      	ldr	r1, [r7, #0]
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f001 fca8 	bl	80165be <USBD_CtlError>
            ret = USBD_FAIL;
 8014c6e:	2303      	movs	r3, #3
 8014c70:	75fb      	strb	r3, [r7, #23]
          break;
 8014c72:	e016      	b.n	8014ca2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c7a:	b2db      	uxtb	r3, r3
 8014c7c:	2b03      	cmp	r3, #3
 8014c7e:	d00f      	beq.n	8014ca0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014c80:	6839      	ldr	r1, [r7, #0]
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f001 fc9b 	bl	80165be <USBD_CtlError>
            ret = USBD_FAIL;
 8014c88:	2303      	movs	r3, #3
 8014c8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014c8c:	e008      	b.n	8014ca0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014c8e:	6839      	ldr	r1, [r7, #0]
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f001 fc94 	bl	80165be <USBD_CtlError>
          ret = USBD_FAIL;
 8014c96:	2303      	movs	r3, #3
 8014c98:	75fb      	strb	r3, [r7, #23]
          break;
 8014c9a:	e002      	b.n	8014ca2 <USBD_CDC_Setup+0x19e>
          break;
 8014c9c:	bf00      	nop
 8014c9e:	e008      	b.n	8014cb2 <USBD_CDC_Setup+0x1ae>
          break;
 8014ca0:	bf00      	nop
      }
      break;
 8014ca2:	e006      	b.n	8014cb2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014ca4:	6839      	ldr	r1, [r7, #0]
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f001 fc89 	bl	80165be <USBD_CtlError>
      ret = USBD_FAIL;
 8014cac:	2303      	movs	r3, #3
 8014cae:	75fb      	strb	r3, [r7, #23]
      break;
 8014cb0:	bf00      	nop
  }

  return (uint8_t)ret;
 8014cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3718      	adds	r7, #24
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b084      	sub	sp, #16
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014cce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	32b0      	adds	r2, #176	; 0xb0
 8014cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d101      	bne.n	8014ce6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014ce2:	2303      	movs	r3, #3
 8014ce4:	e065      	b.n	8014db2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	32b0      	adds	r2, #176	; 0xb0
 8014cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014cf6:	78fb      	ldrb	r3, [r7, #3]
 8014cf8:	f003 020f 	and.w	r2, r3, #15
 8014cfc:	6879      	ldr	r1, [r7, #4]
 8014cfe:	4613      	mov	r3, r2
 8014d00:	009b      	lsls	r3, r3, #2
 8014d02:	4413      	add	r3, r2
 8014d04:	009b      	lsls	r3, r3, #2
 8014d06:	440b      	add	r3, r1
 8014d08:	3318      	adds	r3, #24
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d02f      	beq.n	8014d70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014d10:	78fb      	ldrb	r3, [r7, #3]
 8014d12:	f003 020f 	and.w	r2, r3, #15
 8014d16:	6879      	ldr	r1, [r7, #4]
 8014d18:	4613      	mov	r3, r2
 8014d1a:	009b      	lsls	r3, r3, #2
 8014d1c:	4413      	add	r3, r2
 8014d1e:	009b      	lsls	r3, r3, #2
 8014d20:	440b      	add	r3, r1
 8014d22:	3318      	adds	r3, #24
 8014d24:	681a      	ldr	r2, [r3, #0]
 8014d26:	78fb      	ldrb	r3, [r7, #3]
 8014d28:	f003 010f 	and.w	r1, r3, #15
 8014d2c:	68f8      	ldr	r0, [r7, #12]
 8014d2e:	460b      	mov	r3, r1
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	440b      	add	r3, r1
 8014d34:	009b      	lsls	r3, r3, #2
 8014d36:	4403      	add	r3, r0
 8014d38:	3344      	adds	r3, #68	; 0x44
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014d40:	fb01 f303 	mul.w	r3, r1, r3
 8014d44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d112      	bne.n	8014d70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014d4a:	78fb      	ldrb	r3, [r7, #3]
 8014d4c:	f003 020f 	and.w	r2, r3, #15
 8014d50:	6879      	ldr	r1, [r7, #4]
 8014d52:	4613      	mov	r3, r2
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	4413      	add	r3, r2
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	440b      	add	r3, r1
 8014d5c:	3318      	adds	r3, #24
 8014d5e:	2200      	movs	r2, #0
 8014d60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014d62:	78f9      	ldrb	r1, [r7, #3]
 8014d64:	2300      	movs	r3, #0
 8014d66:	2200      	movs	r2, #0
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f004 fbc9 	bl	8019500 <USBD_LL_Transmit>
 8014d6e:	e01f      	b.n	8014db0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	2200      	movs	r2, #0
 8014d74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	33b0      	adds	r3, #176	; 0xb0
 8014d82:	009b      	lsls	r3, r3, #2
 8014d84:	4413      	add	r3, r2
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	691b      	ldr	r3, [r3, #16]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d010      	beq.n	8014db0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	33b0      	adds	r3, #176	; 0xb0
 8014d98:	009b      	lsls	r3, r3, #2
 8014d9a:	4413      	add	r3, r2
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	691b      	ldr	r3, [r3, #16]
 8014da0:	68ba      	ldr	r2, [r7, #8]
 8014da2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014da6:	68ba      	ldr	r2, [r7, #8]
 8014da8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014dac:	78fa      	ldrb	r2, [r7, #3]
 8014dae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014db0:	2300      	movs	r3, #0
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3710      	adds	r7, #16
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}

08014dba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014dba:	b580      	push	{r7, lr}
 8014dbc:	b084      	sub	sp, #16
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	6078      	str	r0, [r7, #4]
 8014dc2:	460b      	mov	r3, r1
 8014dc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	32b0      	adds	r2, #176	; 0xb0
 8014dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	32b0      	adds	r2, #176	; 0xb0
 8014de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d101      	bne.n	8014dec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014de8:	2303      	movs	r3, #3
 8014dea:	e01a      	b.n	8014e22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014dec:	78fb      	ldrb	r3, [r7, #3]
 8014dee:	4619      	mov	r1, r3
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f004 fbf5 	bl	80195e0 <USBD_LL_GetRxDataSize>
 8014df6:	4602      	mov	r2, r0
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	33b0      	adds	r3, #176	; 0xb0
 8014e08:	009b      	lsls	r3, r3, #2
 8014e0a:	4413      	add	r3, r2
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	68db      	ldr	r3, [r3, #12]
 8014e10:	68fa      	ldr	r2, [r7, #12]
 8014e12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014e16:	68fa      	ldr	r2, [r7, #12]
 8014e18:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014e20:	2300      	movs	r3, #0
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3710      	adds	r7, #16
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}

08014e2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014e2a:	b580      	push	{r7, lr}
 8014e2c:	b084      	sub	sp, #16
 8014e2e:	af00      	add	r7, sp, #0
 8014e30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	32b0      	adds	r2, #176	; 0xb0
 8014e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d101      	bne.n	8014e4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014e48:	2303      	movs	r3, #3
 8014e4a:	e025      	b.n	8014e98 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	33b0      	adds	r3, #176	; 0xb0
 8014e56:	009b      	lsls	r3, r3, #2
 8014e58:	4413      	add	r3, r2
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d01a      	beq.n	8014e96 <USBD_CDC_EP0_RxReady+0x6c>
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014e66:	2bff      	cmp	r3, #255	; 0xff
 8014e68:	d015      	beq.n	8014e96 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	33b0      	adds	r3, #176	; 0xb0
 8014e74:	009b      	lsls	r3, r3, #2
 8014e76:	4413      	add	r3, r2
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	689b      	ldr	r3, [r3, #8]
 8014e7c:	68fa      	ldr	r2, [r7, #12]
 8014e7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014e82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014e8a:	b292      	uxth	r2, r2
 8014e8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	22ff      	movs	r2, #255	; 0xff
 8014e92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3710      	adds	r7, #16
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}

08014ea0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b086      	sub	sp, #24
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ea8:	2182      	movs	r1, #130	; 0x82
 8014eaa:	4818      	ldr	r0, [pc, #96]	; (8014f0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014eac:	f000 fd4f 	bl	801594e <USBD_GetEpDesc>
 8014eb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014eb2:	2101      	movs	r1, #1
 8014eb4:	4815      	ldr	r0, [pc, #84]	; (8014f0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014eb6:	f000 fd4a 	bl	801594e <USBD_GetEpDesc>
 8014eba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ebc:	2181      	movs	r1, #129	; 0x81
 8014ebe:	4813      	ldr	r0, [pc, #76]	; (8014f0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ec0:	f000 fd45 	bl	801594e <USBD_GetEpDesc>
 8014ec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d002      	beq.n	8014ed2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	2210      	movs	r2, #16
 8014ed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d006      	beq.n	8014ee6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	2200      	movs	r2, #0
 8014edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ee0:	711a      	strb	r2, [r3, #4]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d006      	beq.n	8014efa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ef4:	711a      	strb	r2, [r3, #4]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2243      	movs	r2, #67	; 0x43
 8014efe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014f00:	4b02      	ldr	r3, [pc, #8]	; (8014f0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	3718      	adds	r7, #24
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}
 8014f0a:	bf00      	nop
 8014f0c:	20000054 	.word	0x20000054

08014f10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b086      	sub	sp, #24
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014f18:	2182      	movs	r1, #130	; 0x82
 8014f1a:	4818      	ldr	r0, [pc, #96]	; (8014f7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f1c:	f000 fd17 	bl	801594e <USBD_GetEpDesc>
 8014f20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f22:	2101      	movs	r1, #1
 8014f24:	4815      	ldr	r0, [pc, #84]	; (8014f7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f26:	f000 fd12 	bl	801594e <USBD_GetEpDesc>
 8014f2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f2c:	2181      	movs	r1, #129	; 0x81
 8014f2e:	4813      	ldr	r0, [pc, #76]	; (8014f7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f30:	f000 fd0d 	bl	801594e <USBD_GetEpDesc>
 8014f34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d002      	beq.n	8014f42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	2210      	movs	r2, #16
 8014f40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d006      	beq.n	8014f56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	711a      	strb	r2, [r3, #4]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	f042 0202 	orr.w	r2, r2, #2
 8014f54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d006      	beq.n	8014f6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	711a      	strb	r2, [r3, #4]
 8014f62:	2200      	movs	r2, #0
 8014f64:	f042 0202 	orr.w	r2, r2, #2
 8014f68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2243      	movs	r2, #67	; 0x43
 8014f6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014f70:	4b02      	ldr	r3, [pc, #8]	; (8014f7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3718      	adds	r7, #24
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	20000054 	.word	0x20000054

08014f80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014f88:	2182      	movs	r1, #130	; 0x82
 8014f8a:	4818      	ldr	r0, [pc, #96]	; (8014fec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014f8c:	f000 fcdf 	bl	801594e <USBD_GetEpDesc>
 8014f90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f92:	2101      	movs	r1, #1
 8014f94:	4815      	ldr	r0, [pc, #84]	; (8014fec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014f96:	f000 fcda 	bl	801594e <USBD_GetEpDesc>
 8014f9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f9c:	2181      	movs	r1, #129	; 0x81
 8014f9e:	4813      	ldr	r0, [pc, #76]	; (8014fec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014fa0:	f000 fcd5 	bl	801594e <USBD_GetEpDesc>
 8014fa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014fa6:	697b      	ldr	r3, [r7, #20]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d002      	beq.n	8014fb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	2210      	movs	r2, #16
 8014fb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d006      	beq.n	8014fc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014fc0:	711a      	strb	r2, [r3, #4]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d006      	beq.n	8014fda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	2200      	movs	r2, #0
 8014fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014fd4:	711a      	strb	r2, [r3, #4]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2243      	movs	r2, #67	; 0x43
 8014fde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014fe0:	4b02      	ldr	r3, [pc, #8]	; (8014fec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3718      	adds	r7, #24
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	20000054 	.word	0x20000054

08014ff0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	220a      	movs	r2, #10
 8014ffc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014ffe:	4b03      	ldr	r3, [pc, #12]	; (801500c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015000:	4618      	mov	r0, r3
 8015002:	370c      	adds	r7, #12
 8015004:	46bd      	mov	sp, r7
 8015006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500a:	4770      	bx	lr
 801500c:	20000010 	.word	0x20000010

08015010 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d101      	bne.n	8015024 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015020:	2303      	movs	r3, #3
 8015022:	e009      	b.n	8015038 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801502a:	687a      	ldr	r2, [r7, #4]
 801502c:	33b0      	adds	r3, #176	; 0xb0
 801502e:	009b      	lsls	r3, r3, #2
 8015030:	4413      	add	r3, r2
 8015032:	683a      	ldr	r2, [r7, #0]
 8015034:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015036:	2300      	movs	r3, #0
}
 8015038:	4618      	mov	r0, r3
 801503a:	370c      	adds	r7, #12
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr

08015044 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015044:	b480      	push	{r7}
 8015046:	b087      	sub	sp, #28
 8015048:	af00      	add	r7, sp, #0
 801504a:	60f8      	str	r0, [r7, #12]
 801504c:	60b9      	str	r1, [r7, #8]
 801504e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	32b0      	adds	r2, #176	; 0xb0
 801505a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801505e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d101      	bne.n	801506a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015066:	2303      	movs	r3, #3
 8015068:	e008      	b.n	801507c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	68ba      	ldr	r2, [r7, #8]
 801506e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801507a:	2300      	movs	r3, #0
}
 801507c:	4618      	mov	r0, r3
 801507e:	371c      	adds	r7, #28
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr

08015088 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015088:	b480      	push	{r7}
 801508a:	b085      	sub	sp, #20
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	32b0      	adds	r2, #176	; 0xb0
 801509c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d101      	bne.n	80150ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80150a8:	2303      	movs	r3, #3
 80150aa:	e004      	b.n	80150b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	683a      	ldr	r2, [r7, #0]
 80150b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3714      	adds	r7, #20
 80150ba:	46bd      	mov	sp, r7
 80150bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c0:	4770      	bx	lr
	...

080150c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	32b0      	adds	r2, #176	; 0xb0
 80150d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80150dc:	2301      	movs	r3, #1
 80150de:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d101      	bne.n	80150ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80150e6:	2303      	movs	r3, #3
 80150e8:	e025      	b.n	8015136 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d11f      	bne.n	8015134 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	2201      	movs	r2, #1
 80150f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80150fc:	4b10      	ldr	r3, [pc, #64]	; (8015140 <USBD_CDC_TransmitPacket+0x7c>)
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	f003 020f 	and.w	r2, r3, #15
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	4613      	mov	r3, r2
 801510e:	009b      	lsls	r3, r3, #2
 8015110:	4413      	add	r3, r2
 8015112:	009b      	lsls	r3, r3, #2
 8015114:	4403      	add	r3, r0
 8015116:	3318      	adds	r3, #24
 8015118:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801511a:	4b09      	ldr	r3, [pc, #36]	; (8015140 <USBD_CDC_TransmitPacket+0x7c>)
 801511c:	7819      	ldrb	r1, [r3, #0]
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f004 f9e8 	bl	8019500 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015130:	2300      	movs	r3, #0
 8015132:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015134:	7bfb      	ldrb	r3, [r7, #15]
}
 8015136:	4618      	mov	r0, r3
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	20000097 	.word	0x20000097

08015144 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b084      	sub	sp, #16
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	32b0      	adds	r2, #176	; 0xb0
 8015156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801515a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	32b0      	adds	r2, #176	; 0xb0
 8015166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d101      	bne.n	8015172 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801516e:	2303      	movs	r3, #3
 8015170:	e018      	b.n	80151a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	7c1b      	ldrb	r3, [r3, #16]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d10a      	bne.n	8015190 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801517a:	4b0c      	ldr	r3, [pc, #48]	; (80151ac <USBD_CDC_ReceivePacket+0x68>)
 801517c:	7819      	ldrb	r1, [r3, #0]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f004 f9f1 	bl	8019570 <USBD_LL_PrepareReceive>
 801518e:	e008      	b.n	80151a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015190:	4b06      	ldr	r3, [pc, #24]	; (80151ac <USBD_CDC_ReceivePacket+0x68>)
 8015192:	7819      	ldrb	r1, [r3, #0]
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801519a:	2340      	movs	r3, #64	; 0x40
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f004 f9e7 	bl	8019570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80151a2:	2300      	movs	r3, #0
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3710      	adds	r7, #16
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	20000098 	.word	0x20000098

080151b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b086      	sub	sp, #24
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	60f8      	str	r0, [r7, #12]
 80151b8:	60b9      	str	r1, [r7, #8]
 80151ba:	4613      	mov	r3, r2
 80151bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d101      	bne.n	80151c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80151c4:	2303      	movs	r3, #3
 80151c6:	e01f      	b.n	8015208 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2200      	movs	r2, #0
 80151cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	2200      	movs	r2, #0
 80151d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2200      	movs	r2, #0
 80151dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d003      	beq.n	80151ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	68ba      	ldr	r2, [r7, #8]
 80151ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	2201      	movs	r2, #1
 80151f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	79fa      	ldrb	r2, [r7, #7]
 80151fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80151fc:	68f8      	ldr	r0, [r7, #12]
 80151fe:	f003 ffbf 	bl	8019180 <USBD_LL_Init>
 8015202:	4603      	mov	r3, r0
 8015204:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015206:	7dfb      	ldrb	r3, [r7, #23]
}
 8015208:	4618      	mov	r0, r3
 801520a:	3718      	adds	r7, #24
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b084      	sub	sp, #16
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801521a:	2300      	movs	r3, #0
 801521c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d101      	bne.n	8015228 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015224:	2303      	movs	r3, #3
 8015226:	e025      	b.n	8015274 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	683a      	ldr	r2, [r7, #0]
 801522c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	32ae      	adds	r2, #174	; 0xae
 801523a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015240:	2b00      	cmp	r3, #0
 8015242:	d00f      	beq.n	8015264 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	32ae      	adds	r2, #174	; 0xae
 801524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015254:	f107 020e 	add.w	r2, r7, #14
 8015258:	4610      	mov	r0, r2
 801525a:	4798      	blx	r3
 801525c:	4602      	mov	r2, r0
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801526a:	1c5a      	adds	r2, r3, #1
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015272:	2300      	movs	r3, #0
}
 8015274:	4618      	mov	r0, r3
 8015276:	3710      	adds	r7, #16
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}

0801527c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f003 ffc7 	bl	8019218 <USBD_LL_Start>
 801528a:	4603      	mov	r3, r0
}
 801528c:	4618      	mov	r0, r3
 801528e:	3708      	adds	r7, #8
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}

08015294 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801529c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801529e:	4618      	mov	r0, r3
 80152a0:	370c      	adds	r7, #12
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr

080152aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80152aa:	b580      	push	{r7, lr}
 80152ac:	b084      	sub	sp, #16
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	460b      	mov	r3, r1
 80152b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80152b6:	2300      	movs	r3, #0
 80152b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d009      	beq.n	80152d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	78fa      	ldrb	r2, [r7, #3]
 80152ce:	4611      	mov	r1, r2
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	4798      	blx	r3
 80152d4:	4603      	mov	r3, r0
 80152d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80152d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3710      	adds	r7, #16
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b084      	sub	sp, #16
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	460b      	mov	r3, r1
 80152ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80152ee:	2300      	movs	r3, #0
 80152f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152f8:	685b      	ldr	r3, [r3, #4]
 80152fa:	78fa      	ldrb	r2, [r7, #3]
 80152fc:	4611      	mov	r1, r2
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	4798      	blx	r3
 8015302:	4603      	mov	r3, r0
 8015304:	2b00      	cmp	r3, #0
 8015306:	d001      	beq.n	801530c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015308:	2303      	movs	r3, #3
 801530a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801530c:	7bfb      	ldrb	r3, [r7, #15]
}
 801530e:	4618      	mov	r0, r3
 8015310:	3710      	adds	r7, #16
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}

08015316 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015316:	b580      	push	{r7, lr}
 8015318:	b084      	sub	sp, #16
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
 801531e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015326:	6839      	ldr	r1, [r7, #0]
 8015328:	4618      	mov	r0, r3
 801532a:	f001 f90e 	bl	801654a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	2201      	movs	r2, #1
 8015332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801533c:	461a      	mov	r2, r3
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801534a:	f003 031f 	and.w	r3, r3, #31
 801534e:	2b02      	cmp	r3, #2
 8015350:	d01a      	beq.n	8015388 <USBD_LL_SetupStage+0x72>
 8015352:	2b02      	cmp	r3, #2
 8015354:	d822      	bhi.n	801539c <USBD_LL_SetupStage+0x86>
 8015356:	2b00      	cmp	r3, #0
 8015358:	d002      	beq.n	8015360 <USBD_LL_SetupStage+0x4a>
 801535a:	2b01      	cmp	r3, #1
 801535c:	d00a      	beq.n	8015374 <USBD_LL_SetupStage+0x5e>
 801535e:	e01d      	b.n	801539c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015366:	4619      	mov	r1, r3
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f000 fb65 	bl	8015a38 <USBD_StdDevReq>
 801536e:	4603      	mov	r3, r0
 8015370:	73fb      	strb	r3, [r7, #15]
      break;
 8015372:	e020      	b.n	80153b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801537a:	4619      	mov	r1, r3
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f000 fbcd 	bl	8015b1c <USBD_StdItfReq>
 8015382:	4603      	mov	r3, r0
 8015384:	73fb      	strb	r3, [r7, #15]
      break;
 8015386:	e016      	b.n	80153b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801538e:	4619      	mov	r1, r3
 8015390:	6878      	ldr	r0, [r7, #4]
 8015392:	f000 fc2f 	bl	8015bf4 <USBD_StdEPReq>
 8015396:	4603      	mov	r3, r0
 8015398:	73fb      	strb	r3, [r7, #15]
      break;
 801539a:	e00c      	b.n	80153b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	4619      	mov	r1, r3
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	f003 ffda 	bl	8019364 <USBD_LL_StallEP>
 80153b0:	4603      	mov	r3, r0
 80153b2:	73fb      	strb	r3, [r7, #15]
      break;
 80153b4:	bf00      	nop
  }

  return ret;
 80153b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3710      	adds	r7, #16
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}

080153c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b086      	sub	sp, #24
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	60f8      	str	r0, [r7, #12]
 80153c8:	460b      	mov	r3, r1
 80153ca:	607a      	str	r2, [r7, #4]
 80153cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80153ce:	2300      	movs	r3, #0
 80153d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80153d2:	7afb      	ldrb	r3, [r7, #11]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d16e      	bne.n	80154b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80153de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80153e6:	2b03      	cmp	r3, #3
 80153e8:	f040 8098 	bne.w	801551c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	689a      	ldr	r2, [r3, #8]
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	68db      	ldr	r3, [r3, #12]
 80153f4:	429a      	cmp	r2, r3
 80153f6:	d913      	bls.n	8015420 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	689a      	ldr	r2, [r3, #8]
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	1ad2      	subs	r2, r2, r3
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015406:	693b      	ldr	r3, [r7, #16]
 8015408:	68da      	ldr	r2, [r3, #12]
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	689b      	ldr	r3, [r3, #8]
 801540e:	4293      	cmp	r3, r2
 8015410:	bf28      	it	cs
 8015412:	4613      	movcs	r3, r2
 8015414:	461a      	mov	r2, r3
 8015416:	6879      	ldr	r1, [r7, #4]
 8015418:	68f8      	ldr	r0, [r7, #12]
 801541a:	f001 f98a 	bl	8016732 <USBD_CtlContinueRx>
 801541e:	e07d      	b.n	801551c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015426:	f003 031f 	and.w	r3, r3, #31
 801542a:	2b02      	cmp	r3, #2
 801542c:	d014      	beq.n	8015458 <USBD_LL_DataOutStage+0x98>
 801542e:	2b02      	cmp	r3, #2
 8015430:	d81d      	bhi.n	801546e <USBD_LL_DataOutStage+0xae>
 8015432:	2b00      	cmp	r3, #0
 8015434:	d002      	beq.n	801543c <USBD_LL_DataOutStage+0x7c>
 8015436:	2b01      	cmp	r3, #1
 8015438:	d003      	beq.n	8015442 <USBD_LL_DataOutStage+0x82>
 801543a:	e018      	b.n	801546e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801543c:	2300      	movs	r3, #0
 801543e:	75bb      	strb	r3, [r7, #22]
            break;
 8015440:	e018      	b.n	8015474 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015448:	b2db      	uxtb	r3, r3
 801544a:	4619      	mov	r1, r3
 801544c:	68f8      	ldr	r0, [r7, #12]
 801544e:	f000 fa64 	bl	801591a <USBD_CoreFindIF>
 8015452:	4603      	mov	r3, r0
 8015454:	75bb      	strb	r3, [r7, #22]
            break;
 8015456:	e00d      	b.n	8015474 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801545e:	b2db      	uxtb	r3, r3
 8015460:	4619      	mov	r1, r3
 8015462:	68f8      	ldr	r0, [r7, #12]
 8015464:	f000 fa66 	bl	8015934 <USBD_CoreFindEP>
 8015468:	4603      	mov	r3, r0
 801546a:	75bb      	strb	r3, [r7, #22]
            break;
 801546c:	e002      	b.n	8015474 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801546e:	2300      	movs	r3, #0
 8015470:	75bb      	strb	r3, [r7, #22]
            break;
 8015472:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015474:	7dbb      	ldrb	r3, [r7, #22]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d119      	bne.n	80154ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015480:	b2db      	uxtb	r3, r3
 8015482:	2b03      	cmp	r3, #3
 8015484:	d113      	bne.n	80154ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015486:	7dba      	ldrb	r2, [r7, #22]
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	32ae      	adds	r2, #174	; 0xae
 801548c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015490:	691b      	ldr	r3, [r3, #16]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d00b      	beq.n	80154ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015496:	7dba      	ldrb	r2, [r7, #22]
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801549e:	7dba      	ldrb	r2, [r7, #22]
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	32ae      	adds	r2, #174	; 0xae
 80154a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154a8:	691b      	ldr	r3, [r3, #16]
 80154aa:	68f8      	ldr	r0, [r7, #12]
 80154ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80154ae:	68f8      	ldr	r0, [r7, #12]
 80154b0:	f001 f950 	bl	8016754 <USBD_CtlSendStatus>
 80154b4:	e032      	b.n	801551c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80154b6:	7afb      	ldrb	r3, [r7, #11]
 80154b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154bc:	b2db      	uxtb	r3, r3
 80154be:	4619      	mov	r1, r3
 80154c0:	68f8      	ldr	r0, [r7, #12]
 80154c2:	f000 fa37 	bl	8015934 <USBD_CoreFindEP>
 80154c6:	4603      	mov	r3, r0
 80154c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80154ca:	7dbb      	ldrb	r3, [r7, #22]
 80154cc:	2bff      	cmp	r3, #255	; 0xff
 80154ce:	d025      	beq.n	801551c <USBD_LL_DataOutStage+0x15c>
 80154d0:	7dbb      	ldrb	r3, [r7, #22]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d122      	bne.n	801551c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	2b03      	cmp	r3, #3
 80154e0:	d117      	bne.n	8015512 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80154e2:	7dba      	ldrb	r2, [r7, #22]
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	32ae      	adds	r2, #174	; 0xae
 80154e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ec:	699b      	ldr	r3, [r3, #24]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d00f      	beq.n	8015512 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80154f2:	7dba      	ldrb	r2, [r7, #22]
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80154fa:	7dba      	ldrb	r2, [r7, #22]
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	32ae      	adds	r2, #174	; 0xae
 8015500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015504:	699b      	ldr	r3, [r3, #24]
 8015506:	7afa      	ldrb	r2, [r7, #11]
 8015508:	4611      	mov	r1, r2
 801550a:	68f8      	ldr	r0, [r7, #12]
 801550c:	4798      	blx	r3
 801550e:	4603      	mov	r3, r0
 8015510:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015512:	7dfb      	ldrb	r3, [r7, #23]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d001      	beq.n	801551c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015518:	7dfb      	ldrb	r3, [r7, #23]
 801551a:	e000      	b.n	801551e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801551c:	2300      	movs	r3, #0
}
 801551e:	4618      	mov	r0, r3
 8015520:	3718      	adds	r7, #24
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}

08015526 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015526:	b580      	push	{r7, lr}
 8015528:	b086      	sub	sp, #24
 801552a:	af00      	add	r7, sp, #0
 801552c:	60f8      	str	r0, [r7, #12]
 801552e:	460b      	mov	r3, r1
 8015530:	607a      	str	r2, [r7, #4]
 8015532:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015534:	7afb      	ldrb	r3, [r7, #11]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d16f      	bne.n	801561a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	3314      	adds	r3, #20
 801553e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015546:	2b02      	cmp	r3, #2
 8015548:	d15a      	bne.n	8015600 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	689a      	ldr	r2, [r3, #8]
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	68db      	ldr	r3, [r3, #12]
 8015552:	429a      	cmp	r2, r3
 8015554:	d914      	bls.n	8015580 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	689a      	ldr	r2, [r3, #8]
 801555a:	693b      	ldr	r3, [r7, #16]
 801555c:	68db      	ldr	r3, [r3, #12]
 801555e:	1ad2      	subs	r2, r2, r3
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	689b      	ldr	r3, [r3, #8]
 8015568:	461a      	mov	r2, r3
 801556a:	6879      	ldr	r1, [r7, #4]
 801556c:	68f8      	ldr	r0, [r7, #12]
 801556e:	f001 f8b2 	bl	80166d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015572:	2300      	movs	r3, #0
 8015574:	2200      	movs	r2, #0
 8015576:	2100      	movs	r1, #0
 8015578:	68f8      	ldr	r0, [r7, #12]
 801557a:	f003 fff9 	bl	8019570 <USBD_LL_PrepareReceive>
 801557e:	e03f      	b.n	8015600 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	68da      	ldr	r2, [r3, #12]
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	689b      	ldr	r3, [r3, #8]
 8015588:	429a      	cmp	r2, r3
 801558a:	d11c      	bne.n	80155c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	685a      	ldr	r2, [r3, #4]
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015594:	429a      	cmp	r2, r3
 8015596:	d316      	bcc.n	80155c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015598:	693b      	ldr	r3, [r7, #16]
 801559a:	685a      	ldr	r2, [r3, #4]
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d20f      	bcs.n	80155c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80155a6:	2200      	movs	r2, #0
 80155a8:	2100      	movs	r1, #0
 80155aa:	68f8      	ldr	r0, [r7, #12]
 80155ac:	f001 f893 	bl	80166d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2200      	movs	r2, #0
 80155b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155b8:	2300      	movs	r3, #0
 80155ba:	2200      	movs	r2, #0
 80155bc:	2100      	movs	r1, #0
 80155be:	68f8      	ldr	r0, [r7, #12]
 80155c0:	f003 ffd6 	bl	8019570 <USBD_LL_PrepareReceive>
 80155c4:	e01c      	b.n	8015600 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	2b03      	cmp	r3, #3
 80155d0:	d10f      	bne.n	80155f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155d8:	68db      	ldr	r3, [r3, #12]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d009      	beq.n	80155f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2200      	movs	r2, #0
 80155e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	68f8      	ldr	r0, [r7, #12]
 80155f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80155f2:	2180      	movs	r1, #128	; 0x80
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f003 feb5 	bl	8019364 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f001 f8bd 	bl	801677a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015606:	2b00      	cmp	r3, #0
 8015608:	d03a      	beq.n	8015680 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801560a:	68f8      	ldr	r0, [r7, #12]
 801560c:	f7ff fe42 	bl	8015294 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2200      	movs	r2, #0
 8015614:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015618:	e032      	b.n	8015680 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801561a:	7afb      	ldrb	r3, [r7, #11]
 801561c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015620:	b2db      	uxtb	r3, r3
 8015622:	4619      	mov	r1, r3
 8015624:	68f8      	ldr	r0, [r7, #12]
 8015626:	f000 f985 	bl	8015934 <USBD_CoreFindEP>
 801562a:	4603      	mov	r3, r0
 801562c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801562e:	7dfb      	ldrb	r3, [r7, #23]
 8015630:	2bff      	cmp	r3, #255	; 0xff
 8015632:	d025      	beq.n	8015680 <USBD_LL_DataInStage+0x15a>
 8015634:	7dfb      	ldrb	r3, [r7, #23]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d122      	bne.n	8015680 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015640:	b2db      	uxtb	r3, r3
 8015642:	2b03      	cmp	r3, #3
 8015644:	d11c      	bne.n	8015680 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015646:	7dfa      	ldrb	r2, [r7, #23]
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	32ae      	adds	r2, #174	; 0xae
 801564c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015650:	695b      	ldr	r3, [r3, #20]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d014      	beq.n	8015680 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015656:	7dfa      	ldrb	r2, [r7, #23]
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801565e:	7dfa      	ldrb	r2, [r7, #23]
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	32ae      	adds	r2, #174	; 0xae
 8015664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015668:	695b      	ldr	r3, [r3, #20]
 801566a:	7afa      	ldrb	r2, [r7, #11]
 801566c:	4611      	mov	r1, r2
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	4798      	blx	r3
 8015672:	4603      	mov	r3, r0
 8015674:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015676:	7dbb      	ldrb	r3, [r7, #22]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d001      	beq.n	8015680 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801567c:	7dbb      	ldrb	r3, [r7, #22]
 801567e:	e000      	b.n	8015682 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015680:	2300      	movs	r3, #0
}
 8015682:	4618      	mov	r0, r3
 8015684:	3718      	adds	r7, #24
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}

0801568a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801568a:	b580      	push	{r7, lr}
 801568c:	b084      	sub	sp, #16
 801568e:	af00      	add	r7, sp, #0
 8015690:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015692:	2300      	movs	r3, #0
 8015694:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2201      	movs	r2, #1
 801569a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2200      	movs	r2, #0
 80156a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2200      	movs	r2, #0
 80156aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2200      	movs	r2, #0
 80156b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2200      	movs	r2, #0
 80156b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d014      	beq.n	80156f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d00e      	beq.n	80156f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	687a      	ldr	r2, [r7, #4]
 80156dc:	6852      	ldr	r2, [r2, #4]
 80156de:	b2d2      	uxtb	r2, r2
 80156e0:	4611      	mov	r1, r2
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	4798      	blx	r3
 80156e6:	4603      	mov	r3, r0
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d001      	beq.n	80156f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80156ec:	2303      	movs	r3, #3
 80156ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80156f0:	2340      	movs	r3, #64	; 0x40
 80156f2:	2200      	movs	r2, #0
 80156f4:	2100      	movs	r1, #0
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f003 fdc0 	bl	801927c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2201      	movs	r2, #1
 8015700:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2240      	movs	r2, #64	; 0x40
 8015708:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801570c:	2340      	movs	r3, #64	; 0x40
 801570e:	2200      	movs	r2, #0
 8015710:	2180      	movs	r1, #128	; 0x80
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f003 fdb2 	bl	801927c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2201      	movs	r2, #1
 801571c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2240      	movs	r2, #64	; 0x40
 8015722:	621a      	str	r2, [r3, #32]

  return ret;
 8015724:	7bfb      	ldrb	r3, [r7, #15]
}
 8015726:	4618      	mov	r0, r3
 8015728:	3710      	adds	r7, #16
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}

0801572e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801572e:	b480      	push	{r7}
 8015730:	b083      	sub	sp, #12
 8015732:	af00      	add	r7, sp, #0
 8015734:	6078      	str	r0, [r7, #4]
 8015736:	460b      	mov	r3, r1
 8015738:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	78fa      	ldrb	r2, [r7, #3]
 801573e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	370c      	adds	r7, #12
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr

0801574e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801574e:	b480      	push	{r7}
 8015750:	b083      	sub	sp, #12
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801575c:	b2db      	uxtb	r3, r3
 801575e:	2b04      	cmp	r3, #4
 8015760:	d006      	beq.n	8015770 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015768:	b2da      	uxtb	r2, r3
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2204      	movs	r2, #4
 8015774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015778:	2300      	movs	r3, #0
}
 801577a:	4618      	mov	r0, r3
 801577c:	370c      	adds	r7, #12
 801577e:	46bd      	mov	sp, r7
 8015780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015784:	4770      	bx	lr

08015786 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015786:	b480      	push	{r7}
 8015788:	b083      	sub	sp, #12
 801578a:	af00      	add	r7, sp, #0
 801578c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015794:	b2db      	uxtb	r3, r3
 8015796:	2b04      	cmp	r3, #4
 8015798:	d106      	bne.n	80157a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80157a0:	b2da      	uxtb	r2, r3
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80157a8:	2300      	movs	r3, #0
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	370c      	adds	r7, #12
 80157ae:	46bd      	mov	sp, r7
 80157b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b4:	4770      	bx	lr

080157b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80157b6:	b580      	push	{r7, lr}
 80157b8:	b082      	sub	sp, #8
 80157ba:	af00      	add	r7, sp, #0
 80157bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157c4:	b2db      	uxtb	r3, r3
 80157c6:	2b03      	cmp	r3, #3
 80157c8:	d110      	bne.n	80157ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d00b      	beq.n	80157ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157da:	69db      	ldr	r3, [r3, #28]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d005      	beq.n	80157ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157e6:	69db      	ldr	r3, [r3, #28]
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80157ec:	2300      	movs	r3, #0
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}

080157f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80157f6:	b580      	push	{r7, lr}
 80157f8:	b082      	sub	sp, #8
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
 80157fe:	460b      	mov	r3, r1
 8015800:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	32ae      	adds	r2, #174	; 0xae
 801580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d101      	bne.n	8015818 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015814:	2303      	movs	r3, #3
 8015816:	e01c      	b.n	8015852 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801581e:	b2db      	uxtb	r3, r3
 8015820:	2b03      	cmp	r3, #3
 8015822:	d115      	bne.n	8015850 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	32ae      	adds	r2, #174	; 0xae
 801582e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015832:	6a1b      	ldr	r3, [r3, #32]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d00b      	beq.n	8015850 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	32ae      	adds	r2, #174	; 0xae
 8015842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015846:	6a1b      	ldr	r3, [r3, #32]
 8015848:	78fa      	ldrb	r2, [r7, #3]
 801584a:	4611      	mov	r1, r2
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015850:	2300      	movs	r3, #0
}
 8015852:	4618      	mov	r0, r3
 8015854:	3708      	adds	r7, #8
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801585a:	b580      	push	{r7, lr}
 801585c:	b082      	sub	sp, #8
 801585e:	af00      	add	r7, sp, #0
 8015860:	6078      	str	r0, [r7, #4]
 8015862:	460b      	mov	r3, r1
 8015864:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	32ae      	adds	r2, #174	; 0xae
 8015870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d101      	bne.n	801587c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015878:	2303      	movs	r3, #3
 801587a:	e01c      	b.n	80158b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015882:	b2db      	uxtb	r3, r3
 8015884:	2b03      	cmp	r3, #3
 8015886:	d115      	bne.n	80158b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	32ae      	adds	r2, #174	; 0xae
 8015892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015898:	2b00      	cmp	r3, #0
 801589a:	d00b      	beq.n	80158b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	32ae      	adds	r2, #174	; 0xae
 80158a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158ac:	78fa      	ldrb	r2, [r7, #3]
 80158ae:	4611      	mov	r1, r2
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80158b4:	2300      	movs	r3, #0
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	3708      	adds	r7, #8
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}

080158be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80158be:	b480      	push	{r7}
 80158c0:	b083      	sub	sp, #12
 80158c2:	af00      	add	r7, sp, #0
 80158c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80158c6:	2300      	movs	r3, #0
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	370c      	adds	r7, #12
 80158cc:	46bd      	mov	sp, r7
 80158ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d2:	4770      	bx	lr

080158d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b084      	sub	sp, #16
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80158dc:	2300      	movs	r3, #0
 80158de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2201      	movs	r2, #1
 80158e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d00e      	beq.n	8015910 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	687a      	ldr	r2, [r7, #4]
 80158fc:	6852      	ldr	r2, [r2, #4]
 80158fe:	b2d2      	uxtb	r2, r2
 8015900:	4611      	mov	r1, r2
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	4798      	blx	r3
 8015906:	4603      	mov	r3, r0
 8015908:	2b00      	cmp	r3, #0
 801590a:	d001      	beq.n	8015910 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801590c:	2303      	movs	r3, #3
 801590e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015910:	7bfb      	ldrb	r3, [r7, #15]
}
 8015912:	4618      	mov	r0, r3
 8015914:	3710      	adds	r7, #16
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}

0801591a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801591a:	b480      	push	{r7}
 801591c:	b083      	sub	sp, #12
 801591e:	af00      	add	r7, sp, #0
 8015920:	6078      	str	r0, [r7, #4]
 8015922:	460b      	mov	r3, r1
 8015924:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015926:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015928:	4618      	mov	r0, r3
 801592a:	370c      	adds	r7, #12
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr

08015934 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015934:	b480      	push	{r7}
 8015936:	b083      	sub	sp, #12
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	460b      	mov	r3, r1
 801593e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015940:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015942:	4618      	mov	r0, r3
 8015944:	370c      	adds	r7, #12
 8015946:	46bd      	mov	sp, r7
 8015948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594c:	4770      	bx	lr

0801594e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801594e:	b580      	push	{r7, lr}
 8015950:	b086      	sub	sp, #24
 8015952:	af00      	add	r7, sp, #0
 8015954:	6078      	str	r0, [r7, #4]
 8015956:	460b      	mov	r3, r1
 8015958:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015962:	2300      	movs	r3, #0
 8015964:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	885b      	ldrh	r3, [r3, #2]
 801596a:	b29a      	uxth	r2, r3
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	781b      	ldrb	r3, [r3, #0]
 8015970:	b29b      	uxth	r3, r3
 8015972:	429a      	cmp	r2, r3
 8015974:	d920      	bls.n	80159b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	b29b      	uxth	r3, r3
 801597c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801597e:	e013      	b.n	80159a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015980:	f107 030a 	add.w	r3, r7, #10
 8015984:	4619      	mov	r1, r3
 8015986:	6978      	ldr	r0, [r7, #20]
 8015988:	f000 f81b 	bl	80159c2 <USBD_GetNextDesc>
 801598c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	785b      	ldrb	r3, [r3, #1]
 8015992:	2b05      	cmp	r3, #5
 8015994:	d108      	bne.n	80159a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	789b      	ldrb	r3, [r3, #2]
 801599e:	78fa      	ldrb	r2, [r7, #3]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d008      	beq.n	80159b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80159a4:	2300      	movs	r3, #0
 80159a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	885b      	ldrh	r3, [r3, #2]
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	897b      	ldrh	r3, [r7, #10]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d8e5      	bhi.n	8015980 <USBD_GetEpDesc+0x32>
 80159b4:	e000      	b.n	80159b8 <USBD_GetEpDesc+0x6a>
          break;
 80159b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80159b8:	693b      	ldr	r3, [r7, #16]
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3718      	adds	r7, #24
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}

080159c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80159c2:	b480      	push	{r7}
 80159c4:	b085      	sub	sp, #20
 80159c6:	af00      	add	r7, sp, #0
 80159c8:	6078      	str	r0, [r7, #4]
 80159ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	881a      	ldrh	r2, [r3, #0]
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	781b      	ldrb	r3, [r3, #0]
 80159d8:	b29b      	uxth	r3, r3
 80159da:	4413      	add	r3, r2
 80159dc:	b29a      	uxth	r2, r3
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	461a      	mov	r2, r3
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	4413      	add	r3, r2
 80159ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80159ee:	68fb      	ldr	r3, [r7, #12]
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3714      	adds	r7, #20
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr

080159fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b087      	sub	sp, #28
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	3301      	adds	r3, #1
 8015a12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015a14:	697b      	ldr	r3, [r7, #20]
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015a1a:	8a3b      	ldrh	r3, [r7, #16]
 8015a1c:	021b      	lsls	r3, r3, #8
 8015a1e:	b21a      	sxth	r2, r3
 8015a20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015a24:	4313      	orrs	r3, r2
 8015a26:	b21b      	sxth	r3, r3
 8015a28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	371c      	adds	r7, #28
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr

08015a38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b084      	sub	sp, #16
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a42:	2300      	movs	r3, #0
 8015a44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	781b      	ldrb	r3, [r3, #0]
 8015a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a4e:	2b40      	cmp	r3, #64	; 0x40
 8015a50:	d005      	beq.n	8015a5e <USBD_StdDevReq+0x26>
 8015a52:	2b40      	cmp	r3, #64	; 0x40
 8015a54:	d857      	bhi.n	8015b06 <USBD_StdDevReq+0xce>
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d00f      	beq.n	8015a7a <USBD_StdDevReq+0x42>
 8015a5a:	2b20      	cmp	r3, #32
 8015a5c:	d153      	bne.n	8015b06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	32ae      	adds	r2, #174	; 0xae
 8015a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a6c:	689b      	ldr	r3, [r3, #8]
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	4798      	blx	r3
 8015a74:	4603      	mov	r3, r0
 8015a76:	73fb      	strb	r3, [r7, #15]
      break;
 8015a78:	e04a      	b.n	8015b10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	785b      	ldrb	r3, [r3, #1]
 8015a7e:	2b09      	cmp	r3, #9
 8015a80:	d83b      	bhi.n	8015afa <USBD_StdDevReq+0xc2>
 8015a82:	a201      	add	r2, pc, #4	; (adr r2, 8015a88 <USBD_StdDevReq+0x50>)
 8015a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a88:	08015add 	.word	0x08015add
 8015a8c:	08015af1 	.word	0x08015af1
 8015a90:	08015afb 	.word	0x08015afb
 8015a94:	08015ae7 	.word	0x08015ae7
 8015a98:	08015afb 	.word	0x08015afb
 8015a9c:	08015abb 	.word	0x08015abb
 8015aa0:	08015ab1 	.word	0x08015ab1
 8015aa4:	08015afb 	.word	0x08015afb
 8015aa8:	08015ad3 	.word	0x08015ad3
 8015aac:	08015ac5 	.word	0x08015ac5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015ab0:	6839      	ldr	r1, [r7, #0]
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 fa3c 	bl	8015f30 <USBD_GetDescriptor>
          break;
 8015ab8:	e024      	b.n	8015b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015aba:	6839      	ldr	r1, [r7, #0]
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 fba1 	bl	8016204 <USBD_SetAddress>
          break;
 8015ac2:	e01f      	b.n	8015b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f000 fbe0 	bl	801628c <USBD_SetConfig>
 8015acc:	4603      	mov	r3, r0
 8015ace:	73fb      	strb	r3, [r7, #15]
          break;
 8015ad0:	e018      	b.n	8015b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015ad2:	6839      	ldr	r1, [r7, #0]
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f000 fc83 	bl	80163e0 <USBD_GetConfig>
          break;
 8015ada:	e013      	b.n	8015b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015adc:	6839      	ldr	r1, [r7, #0]
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f000 fcb4 	bl	801644c <USBD_GetStatus>
          break;
 8015ae4:	e00e      	b.n	8015b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015ae6:	6839      	ldr	r1, [r7, #0]
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f000 fce3 	bl	80164b4 <USBD_SetFeature>
          break;
 8015aee:	e009      	b.n	8015b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015af0:	6839      	ldr	r1, [r7, #0]
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f000 fd07 	bl	8016506 <USBD_ClrFeature>
          break;
 8015af8:	e004      	b.n	8015b04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015afa:	6839      	ldr	r1, [r7, #0]
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f000 fd5e 	bl	80165be <USBD_CtlError>
          break;
 8015b02:	bf00      	nop
      }
      break;
 8015b04:	e004      	b.n	8015b10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015b06:	6839      	ldr	r1, [r7, #0]
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f000 fd58 	bl	80165be <USBD_CtlError>
      break;
 8015b0e:	bf00      	nop
  }

  return ret;
 8015b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3710      	adds	r7, #16
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}
 8015b1a:	bf00      	nop

08015b1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b084      	sub	sp, #16
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b26:	2300      	movs	r3, #0
 8015b28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015b32:	2b40      	cmp	r3, #64	; 0x40
 8015b34:	d005      	beq.n	8015b42 <USBD_StdItfReq+0x26>
 8015b36:	2b40      	cmp	r3, #64	; 0x40
 8015b38:	d852      	bhi.n	8015be0 <USBD_StdItfReq+0xc4>
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d001      	beq.n	8015b42 <USBD_StdItfReq+0x26>
 8015b3e:	2b20      	cmp	r3, #32
 8015b40:	d14e      	bne.n	8015be0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	3b01      	subs	r3, #1
 8015b4c:	2b02      	cmp	r3, #2
 8015b4e:	d840      	bhi.n	8015bd2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	889b      	ldrh	r3, [r3, #4]
 8015b54:	b2db      	uxtb	r3, r3
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d836      	bhi.n	8015bc8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	889b      	ldrh	r3, [r3, #4]
 8015b5e:	b2db      	uxtb	r3, r3
 8015b60:	4619      	mov	r1, r3
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f7ff fed9 	bl	801591a <USBD_CoreFindIF>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b6c:	7bbb      	ldrb	r3, [r7, #14]
 8015b6e:	2bff      	cmp	r3, #255	; 0xff
 8015b70:	d01d      	beq.n	8015bae <USBD_StdItfReq+0x92>
 8015b72:	7bbb      	ldrb	r3, [r7, #14]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d11a      	bne.n	8015bae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015b78:	7bba      	ldrb	r2, [r7, #14]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	32ae      	adds	r2, #174	; 0xae
 8015b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b82:	689b      	ldr	r3, [r3, #8]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d00f      	beq.n	8015ba8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015b88:	7bba      	ldrb	r2, [r7, #14]
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b90:	7bba      	ldrb	r2, [r7, #14]
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	32ae      	adds	r2, #174	; 0xae
 8015b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b9a:	689b      	ldr	r3, [r3, #8]
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	4798      	blx	r3
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015ba6:	e004      	b.n	8015bb2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015ba8:	2303      	movs	r3, #3
 8015baa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015bac:	e001      	b.n	8015bb2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015bae:	2303      	movs	r3, #3
 8015bb0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	88db      	ldrh	r3, [r3, #6]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d110      	bne.n	8015bdc <USBD_StdItfReq+0xc0>
 8015bba:	7bfb      	ldrb	r3, [r7, #15]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d10d      	bne.n	8015bdc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f000 fdc7 	bl	8016754 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015bc6:	e009      	b.n	8015bdc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015bc8:	6839      	ldr	r1, [r7, #0]
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f000 fcf7 	bl	80165be <USBD_CtlError>
          break;
 8015bd0:	e004      	b.n	8015bdc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015bd2:	6839      	ldr	r1, [r7, #0]
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f000 fcf2 	bl	80165be <USBD_CtlError>
          break;
 8015bda:	e000      	b.n	8015bde <USBD_StdItfReq+0xc2>
          break;
 8015bdc:	bf00      	nop
      }
      break;
 8015bde:	e004      	b.n	8015bea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015be0:	6839      	ldr	r1, [r7, #0]
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f000 fceb 	bl	80165be <USBD_CtlError>
      break;
 8015be8:	bf00      	nop
  }

  return ret;
 8015bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3710      	adds	r7, #16
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b084      	sub	sp, #16
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	889b      	ldrh	r3, [r3, #4]
 8015c06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	781b      	ldrb	r3, [r3, #0]
 8015c0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c10:	2b40      	cmp	r3, #64	; 0x40
 8015c12:	d007      	beq.n	8015c24 <USBD_StdEPReq+0x30>
 8015c14:	2b40      	cmp	r3, #64	; 0x40
 8015c16:	f200 817f 	bhi.w	8015f18 <USBD_StdEPReq+0x324>
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d02a      	beq.n	8015c74 <USBD_StdEPReq+0x80>
 8015c1e:	2b20      	cmp	r3, #32
 8015c20:	f040 817a 	bne.w	8015f18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015c24:	7bbb      	ldrb	r3, [r7, #14]
 8015c26:	4619      	mov	r1, r3
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f7ff fe83 	bl	8015934 <USBD_CoreFindEP>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c32:	7b7b      	ldrb	r3, [r7, #13]
 8015c34:	2bff      	cmp	r3, #255	; 0xff
 8015c36:	f000 8174 	beq.w	8015f22 <USBD_StdEPReq+0x32e>
 8015c3a:	7b7b      	ldrb	r3, [r7, #13]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	f040 8170 	bne.w	8015f22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015c42:	7b7a      	ldrb	r2, [r7, #13]
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015c4a:	7b7a      	ldrb	r2, [r7, #13]
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	32ae      	adds	r2, #174	; 0xae
 8015c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c54:	689b      	ldr	r3, [r3, #8]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	f000 8163 	beq.w	8015f22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015c5c:	7b7a      	ldrb	r2, [r7, #13]
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	32ae      	adds	r2, #174	; 0xae
 8015c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c66:	689b      	ldr	r3, [r3, #8]
 8015c68:	6839      	ldr	r1, [r7, #0]
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	4798      	blx	r3
 8015c6e:	4603      	mov	r3, r0
 8015c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015c72:	e156      	b.n	8015f22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	785b      	ldrb	r3, [r3, #1]
 8015c78:	2b03      	cmp	r3, #3
 8015c7a:	d008      	beq.n	8015c8e <USBD_StdEPReq+0x9a>
 8015c7c:	2b03      	cmp	r3, #3
 8015c7e:	f300 8145 	bgt.w	8015f0c <USBD_StdEPReq+0x318>
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	f000 809b 	beq.w	8015dbe <USBD_StdEPReq+0x1ca>
 8015c88:	2b01      	cmp	r3, #1
 8015c8a:	d03c      	beq.n	8015d06 <USBD_StdEPReq+0x112>
 8015c8c:	e13e      	b.n	8015f0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	2b02      	cmp	r3, #2
 8015c98:	d002      	beq.n	8015ca0 <USBD_StdEPReq+0xac>
 8015c9a:	2b03      	cmp	r3, #3
 8015c9c:	d016      	beq.n	8015ccc <USBD_StdEPReq+0xd8>
 8015c9e:	e02c      	b.n	8015cfa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ca0:	7bbb      	ldrb	r3, [r7, #14]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d00d      	beq.n	8015cc2 <USBD_StdEPReq+0xce>
 8015ca6:	7bbb      	ldrb	r3, [r7, #14]
 8015ca8:	2b80      	cmp	r3, #128	; 0x80
 8015caa:	d00a      	beq.n	8015cc2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015cac:	7bbb      	ldrb	r3, [r7, #14]
 8015cae:	4619      	mov	r1, r3
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f003 fb57 	bl	8019364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015cb6:	2180      	movs	r1, #128	; 0x80
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f003 fb53 	bl	8019364 <USBD_LL_StallEP>
 8015cbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015cc0:	e020      	b.n	8015d04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015cc2:	6839      	ldr	r1, [r7, #0]
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 fc7a 	bl	80165be <USBD_CtlError>
              break;
 8015cca:	e01b      	b.n	8015d04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	885b      	ldrh	r3, [r3, #2]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d10e      	bne.n	8015cf2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015cd4:	7bbb      	ldrb	r3, [r7, #14]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d00b      	beq.n	8015cf2 <USBD_StdEPReq+0xfe>
 8015cda:	7bbb      	ldrb	r3, [r7, #14]
 8015cdc:	2b80      	cmp	r3, #128	; 0x80
 8015cde:	d008      	beq.n	8015cf2 <USBD_StdEPReq+0xfe>
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	88db      	ldrh	r3, [r3, #6]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d104      	bne.n	8015cf2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ce8:	7bbb      	ldrb	r3, [r7, #14]
 8015cea:	4619      	mov	r1, r3
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f003 fb39 	bl	8019364 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 fd2e 	bl	8016754 <USBD_CtlSendStatus>

              break;
 8015cf8:	e004      	b.n	8015d04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015cfa:	6839      	ldr	r1, [r7, #0]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f000 fc5e 	bl	80165be <USBD_CtlError>
              break;
 8015d02:	bf00      	nop
          }
          break;
 8015d04:	e107      	b.n	8015f16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	2b02      	cmp	r3, #2
 8015d10:	d002      	beq.n	8015d18 <USBD_StdEPReq+0x124>
 8015d12:	2b03      	cmp	r3, #3
 8015d14:	d016      	beq.n	8015d44 <USBD_StdEPReq+0x150>
 8015d16:	e04b      	b.n	8015db0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015d18:	7bbb      	ldrb	r3, [r7, #14]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d00d      	beq.n	8015d3a <USBD_StdEPReq+0x146>
 8015d1e:	7bbb      	ldrb	r3, [r7, #14]
 8015d20:	2b80      	cmp	r3, #128	; 0x80
 8015d22:	d00a      	beq.n	8015d3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015d24:	7bbb      	ldrb	r3, [r7, #14]
 8015d26:	4619      	mov	r1, r3
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f003 fb1b 	bl	8019364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d2e:	2180      	movs	r1, #128	; 0x80
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	f003 fb17 	bl	8019364 <USBD_LL_StallEP>
 8015d36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015d38:	e040      	b.n	8015dbc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015d3a:	6839      	ldr	r1, [r7, #0]
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f000 fc3e 	bl	80165be <USBD_CtlError>
              break;
 8015d42:	e03b      	b.n	8015dbc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	885b      	ldrh	r3, [r3, #2]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d136      	bne.n	8015dba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015d4c:	7bbb      	ldrb	r3, [r7, #14]
 8015d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d004      	beq.n	8015d60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015d56:	7bbb      	ldrb	r3, [r7, #14]
 8015d58:	4619      	mov	r1, r3
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	f003 fb38 	bl	80193d0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f000 fcf7 	bl	8016754 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015d66:	7bbb      	ldrb	r3, [r7, #14]
 8015d68:	4619      	mov	r1, r3
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7ff fde2 	bl	8015934 <USBD_CoreFindEP>
 8015d70:	4603      	mov	r3, r0
 8015d72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d74:	7b7b      	ldrb	r3, [r7, #13]
 8015d76:	2bff      	cmp	r3, #255	; 0xff
 8015d78:	d01f      	beq.n	8015dba <USBD_StdEPReq+0x1c6>
 8015d7a:	7b7b      	ldrb	r3, [r7, #13]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d11c      	bne.n	8015dba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015d80:	7b7a      	ldrb	r2, [r7, #13]
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015d88:	7b7a      	ldrb	r2, [r7, #13]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	32ae      	adds	r2, #174	; 0xae
 8015d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d92:	689b      	ldr	r3, [r3, #8]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d010      	beq.n	8015dba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015d98:	7b7a      	ldrb	r2, [r7, #13]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	32ae      	adds	r2, #174	; 0xae
 8015d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015da2:	689b      	ldr	r3, [r3, #8]
 8015da4:	6839      	ldr	r1, [r7, #0]
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	4798      	blx	r3
 8015daa:	4603      	mov	r3, r0
 8015dac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015dae:	e004      	b.n	8015dba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015db0:	6839      	ldr	r1, [r7, #0]
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f000 fc03 	bl	80165be <USBD_CtlError>
              break;
 8015db8:	e000      	b.n	8015dbc <USBD_StdEPReq+0x1c8>
              break;
 8015dba:	bf00      	nop
          }
          break;
 8015dbc:	e0ab      	b.n	8015f16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dc4:	b2db      	uxtb	r3, r3
 8015dc6:	2b02      	cmp	r3, #2
 8015dc8:	d002      	beq.n	8015dd0 <USBD_StdEPReq+0x1dc>
 8015dca:	2b03      	cmp	r3, #3
 8015dcc:	d032      	beq.n	8015e34 <USBD_StdEPReq+0x240>
 8015dce:	e097      	b.n	8015f00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015dd0:	7bbb      	ldrb	r3, [r7, #14]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d007      	beq.n	8015de6 <USBD_StdEPReq+0x1f2>
 8015dd6:	7bbb      	ldrb	r3, [r7, #14]
 8015dd8:	2b80      	cmp	r3, #128	; 0x80
 8015dda:	d004      	beq.n	8015de6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015ddc:	6839      	ldr	r1, [r7, #0]
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f000 fbed 	bl	80165be <USBD_CtlError>
                break;
 8015de4:	e091      	b.n	8015f0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	da0b      	bge.n	8015e06 <USBD_StdEPReq+0x212>
 8015dee:	7bbb      	ldrb	r3, [r7, #14]
 8015df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015df4:	4613      	mov	r3, r2
 8015df6:	009b      	lsls	r3, r3, #2
 8015df8:	4413      	add	r3, r2
 8015dfa:	009b      	lsls	r3, r3, #2
 8015dfc:	3310      	adds	r3, #16
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	4413      	add	r3, r2
 8015e02:	3304      	adds	r3, #4
 8015e04:	e00b      	b.n	8015e1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015e06:	7bbb      	ldrb	r3, [r7, #14]
 8015e08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	009b      	lsls	r3, r3, #2
 8015e10:	4413      	add	r3, r2
 8015e12:	009b      	lsls	r3, r3, #2
 8015e14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015e18:	687a      	ldr	r2, [r7, #4]
 8015e1a:	4413      	add	r3, r2
 8015e1c:	3304      	adds	r3, #4
 8015e1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	2200      	movs	r2, #0
 8015e24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	2202      	movs	r2, #2
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f000 fc37 	bl	80166a0 <USBD_CtlSendData>
              break;
 8015e32:	e06a      	b.n	8015f0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	da11      	bge.n	8015e60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015e3c:	7bbb      	ldrb	r3, [r7, #14]
 8015e3e:	f003 020f 	and.w	r2, r3, #15
 8015e42:	6879      	ldr	r1, [r7, #4]
 8015e44:	4613      	mov	r3, r2
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	4413      	add	r3, r2
 8015e4a:	009b      	lsls	r3, r3, #2
 8015e4c:	440b      	add	r3, r1
 8015e4e:	3324      	adds	r3, #36	; 0x24
 8015e50:	881b      	ldrh	r3, [r3, #0]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d117      	bne.n	8015e86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015e56:	6839      	ldr	r1, [r7, #0]
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f000 fbb0 	bl	80165be <USBD_CtlError>
                  break;
 8015e5e:	e054      	b.n	8015f0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015e60:	7bbb      	ldrb	r3, [r7, #14]
 8015e62:	f003 020f 	and.w	r2, r3, #15
 8015e66:	6879      	ldr	r1, [r7, #4]
 8015e68:	4613      	mov	r3, r2
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	4413      	add	r3, r2
 8015e6e:	009b      	lsls	r3, r3, #2
 8015e70:	440b      	add	r3, r1
 8015e72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015e76:	881b      	ldrh	r3, [r3, #0]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d104      	bne.n	8015e86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015e7c:	6839      	ldr	r1, [r7, #0]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 fb9d 	bl	80165be <USBD_CtlError>
                  break;
 8015e84:	e041      	b.n	8015f0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	da0b      	bge.n	8015ea6 <USBD_StdEPReq+0x2b2>
 8015e8e:	7bbb      	ldrb	r3, [r7, #14]
 8015e90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e94:	4613      	mov	r3, r2
 8015e96:	009b      	lsls	r3, r3, #2
 8015e98:	4413      	add	r3, r2
 8015e9a:	009b      	lsls	r3, r3, #2
 8015e9c:	3310      	adds	r3, #16
 8015e9e:	687a      	ldr	r2, [r7, #4]
 8015ea0:	4413      	add	r3, r2
 8015ea2:	3304      	adds	r3, #4
 8015ea4:	e00b      	b.n	8015ebe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015ea6:	7bbb      	ldrb	r3, [r7, #14]
 8015ea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015eac:	4613      	mov	r3, r2
 8015eae:	009b      	lsls	r3, r3, #2
 8015eb0:	4413      	add	r3, r2
 8015eb2:	009b      	lsls	r3, r3, #2
 8015eb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015eb8:	687a      	ldr	r2, [r7, #4]
 8015eba:	4413      	add	r3, r2
 8015ebc:	3304      	adds	r3, #4
 8015ebe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ec0:	7bbb      	ldrb	r3, [r7, #14]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d002      	beq.n	8015ecc <USBD_StdEPReq+0x2d8>
 8015ec6:	7bbb      	ldrb	r3, [r7, #14]
 8015ec8:	2b80      	cmp	r3, #128	; 0x80
 8015eca:	d103      	bne.n	8015ed4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	601a      	str	r2, [r3, #0]
 8015ed2:	e00e      	b.n	8015ef2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015ed4:	7bbb      	ldrb	r3, [r7, #14]
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f003 faaf 	bl	801943c <USBD_LL_IsStallEP>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d003      	beq.n	8015eec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	2201      	movs	r2, #1
 8015ee8:	601a      	str	r2, [r3, #0]
 8015eea:	e002      	b.n	8015ef2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015eec:	68bb      	ldr	r3, [r7, #8]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	2202      	movs	r2, #2
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fbd1 	bl	80166a0 <USBD_CtlSendData>
              break;
 8015efe:	e004      	b.n	8015f0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 fb5b 	bl	80165be <USBD_CtlError>
              break;
 8015f08:	bf00      	nop
          }
          break;
 8015f0a:	e004      	b.n	8015f16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015f0c:	6839      	ldr	r1, [r7, #0]
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f000 fb55 	bl	80165be <USBD_CtlError>
          break;
 8015f14:	bf00      	nop
      }
      break;
 8015f16:	e005      	b.n	8015f24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015f18:	6839      	ldr	r1, [r7, #0]
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f000 fb4f 	bl	80165be <USBD_CtlError>
      break;
 8015f20:	e000      	b.n	8015f24 <USBD_StdEPReq+0x330>
      break;
 8015f22:	bf00      	nop
  }

  return ret;
 8015f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3710      	adds	r7, #16
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
	...

08015f30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015f42:	2300      	movs	r3, #0
 8015f44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	885b      	ldrh	r3, [r3, #2]
 8015f4a:	0a1b      	lsrs	r3, r3, #8
 8015f4c:	b29b      	uxth	r3, r3
 8015f4e:	3b01      	subs	r3, #1
 8015f50:	2b06      	cmp	r3, #6
 8015f52:	f200 8128 	bhi.w	80161a6 <USBD_GetDescriptor+0x276>
 8015f56:	a201      	add	r2, pc, #4	; (adr r2, 8015f5c <USBD_GetDescriptor+0x2c>)
 8015f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f5c:	08015f79 	.word	0x08015f79
 8015f60:	08015f91 	.word	0x08015f91
 8015f64:	08015fd1 	.word	0x08015fd1
 8015f68:	080161a7 	.word	0x080161a7
 8015f6c:	080161a7 	.word	0x080161a7
 8015f70:	08016147 	.word	0x08016147
 8015f74:	08016173 	.word	0x08016173
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	687a      	ldr	r2, [r7, #4]
 8015f82:	7c12      	ldrb	r2, [r2, #16]
 8015f84:	f107 0108 	add.w	r1, r7, #8
 8015f88:	4610      	mov	r0, r2
 8015f8a:	4798      	blx	r3
 8015f8c:	60f8      	str	r0, [r7, #12]
      break;
 8015f8e:	e112      	b.n	80161b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	7c1b      	ldrb	r3, [r3, #16]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d10d      	bne.n	8015fb4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fa0:	f107 0208 	add.w	r2, r7, #8
 8015fa4:	4610      	mov	r0, r2
 8015fa6:	4798      	blx	r3
 8015fa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	3301      	adds	r3, #1
 8015fae:	2202      	movs	r2, #2
 8015fb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015fb2:	e100      	b.n	80161b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fbc:	f107 0208 	add.w	r2, r7, #8
 8015fc0:	4610      	mov	r0, r2
 8015fc2:	4798      	blx	r3
 8015fc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	2202      	movs	r2, #2
 8015fcc:	701a      	strb	r2, [r3, #0]
      break;
 8015fce:	e0f2      	b.n	80161b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	885b      	ldrh	r3, [r3, #2]
 8015fd4:	b2db      	uxtb	r3, r3
 8015fd6:	2b05      	cmp	r3, #5
 8015fd8:	f200 80ac 	bhi.w	8016134 <USBD_GetDescriptor+0x204>
 8015fdc:	a201      	add	r2, pc, #4	; (adr r2, 8015fe4 <USBD_GetDescriptor+0xb4>)
 8015fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fe2:	bf00      	nop
 8015fe4:	08015ffd 	.word	0x08015ffd
 8015fe8:	08016031 	.word	0x08016031
 8015fec:	08016065 	.word	0x08016065
 8015ff0:	08016099 	.word	0x08016099
 8015ff4:	080160cd 	.word	0x080160cd
 8015ff8:	08016101 	.word	0x08016101
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016002:	685b      	ldr	r3, [r3, #4]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d00b      	beq.n	8016020 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	687a      	ldr	r2, [r7, #4]
 8016012:	7c12      	ldrb	r2, [r2, #16]
 8016014:	f107 0108 	add.w	r1, r7, #8
 8016018:	4610      	mov	r0, r2
 801601a:	4798      	blx	r3
 801601c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801601e:	e091      	b.n	8016144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016020:	6839      	ldr	r1, [r7, #0]
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f000 facb 	bl	80165be <USBD_CtlError>
            err++;
 8016028:	7afb      	ldrb	r3, [r7, #11]
 801602a:	3301      	adds	r3, #1
 801602c:	72fb      	strb	r3, [r7, #11]
          break;
 801602e:	e089      	b.n	8016144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016036:	689b      	ldr	r3, [r3, #8]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d00b      	beq.n	8016054 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016042:	689b      	ldr	r3, [r3, #8]
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	7c12      	ldrb	r2, [r2, #16]
 8016048:	f107 0108 	add.w	r1, r7, #8
 801604c:	4610      	mov	r0, r2
 801604e:	4798      	blx	r3
 8016050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016052:	e077      	b.n	8016144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016054:	6839      	ldr	r1, [r7, #0]
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f000 fab1 	bl	80165be <USBD_CtlError>
            err++;
 801605c:	7afb      	ldrb	r3, [r7, #11]
 801605e:	3301      	adds	r3, #1
 8016060:	72fb      	strb	r3, [r7, #11]
          break;
 8016062:	e06f      	b.n	8016144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d00b      	beq.n	8016088 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016076:	68db      	ldr	r3, [r3, #12]
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	7c12      	ldrb	r2, [r2, #16]
 801607c:	f107 0108 	add.w	r1, r7, #8
 8016080:	4610      	mov	r0, r2
 8016082:	4798      	blx	r3
 8016084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016086:	e05d      	b.n	8016144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016088:	6839      	ldr	r1, [r7, #0]
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 fa97 	bl	80165be <USBD_CtlError>
            err++;
 8016090:	7afb      	ldrb	r3, [r7, #11]
 8016092:	3301      	adds	r3, #1
 8016094:	72fb      	strb	r3, [r7, #11]
          break;
 8016096:	e055      	b.n	8016144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801609e:	691b      	ldr	r3, [r3, #16]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d00b      	beq.n	80160bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160aa:	691b      	ldr	r3, [r3, #16]
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	7c12      	ldrb	r2, [r2, #16]
 80160b0:	f107 0108 	add.w	r1, r7, #8
 80160b4:	4610      	mov	r0, r2
 80160b6:	4798      	blx	r3
 80160b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160ba:	e043      	b.n	8016144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80160bc:	6839      	ldr	r1, [r7, #0]
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f000 fa7d 	bl	80165be <USBD_CtlError>
            err++;
 80160c4:	7afb      	ldrb	r3, [r7, #11]
 80160c6:	3301      	adds	r3, #1
 80160c8:	72fb      	strb	r3, [r7, #11]
          break;
 80160ca:	e03b      	b.n	8016144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160d2:	695b      	ldr	r3, [r3, #20]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d00b      	beq.n	80160f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160de:	695b      	ldr	r3, [r3, #20]
 80160e0:	687a      	ldr	r2, [r7, #4]
 80160e2:	7c12      	ldrb	r2, [r2, #16]
 80160e4:	f107 0108 	add.w	r1, r7, #8
 80160e8:	4610      	mov	r0, r2
 80160ea:	4798      	blx	r3
 80160ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160ee:	e029      	b.n	8016144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80160f0:	6839      	ldr	r1, [r7, #0]
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f000 fa63 	bl	80165be <USBD_CtlError>
            err++;
 80160f8:	7afb      	ldrb	r3, [r7, #11]
 80160fa:	3301      	adds	r3, #1
 80160fc:	72fb      	strb	r3, [r7, #11]
          break;
 80160fe:	e021      	b.n	8016144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016106:	699b      	ldr	r3, [r3, #24]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d00b      	beq.n	8016124 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016112:	699b      	ldr	r3, [r3, #24]
 8016114:	687a      	ldr	r2, [r7, #4]
 8016116:	7c12      	ldrb	r2, [r2, #16]
 8016118:	f107 0108 	add.w	r1, r7, #8
 801611c:	4610      	mov	r0, r2
 801611e:	4798      	blx	r3
 8016120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016122:	e00f      	b.n	8016144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016124:	6839      	ldr	r1, [r7, #0]
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 fa49 	bl	80165be <USBD_CtlError>
            err++;
 801612c:	7afb      	ldrb	r3, [r7, #11]
 801612e:	3301      	adds	r3, #1
 8016130:	72fb      	strb	r3, [r7, #11]
          break;
 8016132:	e007      	b.n	8016144 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016134:	6839      	ldr	r1, [r7, #0]
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f000 fa41 	bl	80165be <USBD_CtlError>
          err++;
 801613c:	7afb      	ldrb	r3, [r7, #11]
 801613e:	3301      	adds	r3, #1
 8016140:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016142:	bf00      	nop
      }
      break;
 8016144:	e037      	b.n	80161b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	7c1b      	ldrb	r3, [r3, #16]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d109      	bne.n	8016162 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016156:	f107 0208 	add.w	r2, r7, #8
 801615a:	4610      	mov	r0, r2
 801615c:	4798      	blx	r3
 801615e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016160:	e029      	b.n	80161b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016162:	6839      	ldr	r1, [r7, #0]
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f000 fa2a 	bl	80165be <USBD_CtlError>
        err++;
 801616a:	7afb      	ldrb	r3, [r7, #11]
 801616c:	3301      	adds	r3, #1
 801616e:	72fb      	strb	r3, [r7, #11]
      break;
 8016170:	e021      	b.n	80161b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	7c1b      	ldrb	r3, [r3, #16]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d10d      	bne.n	8016196 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016182:	f107 0208 	add.w	r2, r7, #8
 8016186:	4610      	mov	r0, r2
 8016188:	4798      	blx	r3
 801618a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	3301      	adds	r3, #1
 8016190:	2207      	movs	r2, #7
 8016192:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016194:	e00f      	b.n	80161b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016196:	6839      	ldr	r1, [r7, #0]
 8016198:	6878      	ldr	r0, [r7, #4]
 801619a:	f000 fa10 	bl	80165be <USBD_CtlError>
        err++;
 801619e:	7afb      	ldrb	r3, [r7, #11]
 80161a0:	3301      	adds	r3, #1
 80161a2:	72fb      	strb	r3, [r7, #11]
      break;
 80161a4:	e007      	b.n	80161b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80161a6:	6839      	ldr	r1, [r7, #0]
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f000 fa08 	bl	80165be <USBD_CtlError>
      err++;
 80161ae:	7afb      	ldrb	r3, [r7, #11]
 80161b0:	3301      	adds	r3, #1
 80161b2:	72fb      	strb	r3, [r7, #11]
      break;
 80161b4:	bf00      	nop
  }

  if (err != 0U)
 80161b6:	7afb      	ldrb	r3, [r7, #11]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d11e      	bne.n	80161fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	88db      	ldrh	r3, [r3, #6]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d016      	beq.n	80161f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80161c4:	893b      	ldrh	r3, [r7, #8]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d00e      	beq.n	80161e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	88da      	ldrh	r2, [r3, #6]
 80161ce:	893b      	ldrh	r3, [r7, #8]
 80161d0:	4293      	cmp	r3, r2
 80161d2:	bf28      	it	cs
 80161d4:	4613      	movcs	r3, r2
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80161da:	893b      	ldrh	r3, [r7, #8]
 80161dc:	461a      	mov	r2, r3
 80161de:	68f9      	ldr	r1, [r7, #12]
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f000 fa5d 	bl	80166a0 <USBD_CtlSendData>
 80161e6:	e009      	b.n	80161fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80161e8:	6839      	ldr	r1, [r7, #0]
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 f9e7 	bl	80165be <USBD_CtlError>
 80161f0:	e004      	b.n	80161fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f000 faae 	bl	8016754 <USBD_CtlSendStatus>
 80161f8:	e000      	b.n	80161fc <USBD_GetDescriptor+0x2cc>
    return;
 80161fa:	bf00      	nop
  }
}
 80161fc:	3710      	adds	r7, #16
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}
 8016202:	bf00      	nop

08016204 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b084      	sub	sp, #16
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	889b      	ldrh	r3, [r3, #4]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d131      	bne.n	801627a <USBD_SetAddress+0x76>
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	88db      	ldrh	r3, [r3, #6]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d12d      	bne.n	801627a <USBD_SetAddress+0x76>
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	885b      	ldrh	r3, [r3, #2]
 8016222:	2b7f      	cmp	r3, #127	; 0x7f
 8016224:	d829      	bhi.n	801627a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	885b      	ldrh	r3, [r3, #2]
 801622a:	b2db      	uxtb	r3, r3
 801622c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016230:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016238:	b2db      	uxtb	r3, r3
 801623a:	2b03      	cmp	r3, #3
 801623c:	d104      	bne.n	8016248 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801623e:	6839      	ldr	r1, [r7, #0]
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f000 f9bc 	bl	80165be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016246:	e01d      	b.n	8016284 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	7bfa      	ldrb	r2, [r7, #15]
 801624c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016250:	7bfb      	ldrb	r3, [r7, #15]
 8016252:	4619      	mov	r1, r3
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f003 f91d 	bl	8019494 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 fa7a 	bl	8016754 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016260:	7bfb      	ldrb	r3, [r7, #15]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d004      	beq.n	8016270 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	2202      	movs	r2, #2
 801626a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801626e:	e009      	b.n	8016284 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2201      	movs	r2, #1
 8016274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016278:	e004      	b.n	8016284 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801627a:	6839      	ldr	r1, [r7, #0]
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 f99e 	bl	80165be <USBD_CtlError>
  }
}
 8016282:	bf00      	nop
 8016284:	bf00      	nop
 8016286:	3710      	adds	r7, #16
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}

0801628c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b084      	sub	sp, #16
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
 8016294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016296:	2300      	movs	r3, #0
 8016298:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	885b      	ldrh	r3, [r3, #2]
 801629e:	b2da      	uxtb	r2, r3
 80162a0:	4b4e      	ldr	r3, [pc, #312]	; (80163dc <USBD_SetConfig+0x150>)
 80162a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80162a4:	4b4d      	ldr	r3, [pc, #308]	; (80163dc <USBD_SetConfig+0x150>)
 80162a6:	781b      	ldrb	r3, [r3, #0]
 80162a8:	2b01      	cmp	r3, #1
 80162aa:	d905      	bls.n	80162b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80162ac:	6839      	ldr	r1, [r7, #0]
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f000 f985 	bl	80165be <USBD_CtlError>
    return USBD_FAIL;
 80162b4:	2303      	movs	r3, #3
 80162b6:	e08c      	b.n	80163d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162be:	b2db      	uxtb	r3, r3
 80162c0:	2b02      	cmp	r3, #2
 80162c2:	d002      	beq.n	80162ca <USBD_SetConfig+0x3e>
 80162c4:	2b03      	cmp	r3, #3
 80162c6:	d029      	beq.n	801631c <USBD_SetConfig+0x90>
 80162c8:	e075      	b.n	80163b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80162ca:	4b44      	ldr	r3, [pc, #272]	; (80163dc <USBD_SetConfig+0x150>)
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d020      	beq.n	8016314 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80162d2:	4b42      	ldr	r3, [pc, #264]	; (80163dc <USBD_SetConfig+0x150>)
 80162d4:	781b      	ldrb	r3, [r3, #0]
 80162d6:	461a      	mov	r2, r3
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80162dc:	4b3f      	ldr	r3, [pc, #252]	; (80163dc <USBD_SetConfig+0x150>)
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	4619      	mov	r1, r3
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f7fe ffe1 	bl	80152aa <USBD_SetClassConfig>
 80162e8:	4603      	mov	r3, r0
 80162ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80162ec:	7bfb      	ldrb	r3, [r7, #15]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d008      	beq.n	8016304 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80162f2:	6839      	ldr	r1, [r7, #0]
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f000 f962 	bl	80165be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2202      	movs	r2, #2
 80162fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016302:	e065      	b.n	80163d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f000 fa25 	bl	8016754 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2203      	movs	r2, #3
 801630e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016312:	e05d      	b.n	80163d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f000 fa1d 	bl	8016754 <USBD_CtlSendStatus>
      break;
 801631a:	e059      	b.n	80163d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801631c:	4b2f      	ldr	r3, [pc, #188]	; (80163dc <USBD_SetConfig+0x150>)
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d112      	bne.n	801634a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2202      	movs	r2, #2
 8016328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801632c:	4b2b      	ldr	r3, [pc, #172]	; (80163dc <USBD_SetConfig+0x150>)
 801632e:	781b      	ldrb	r3, [r3, #0]
 8016330:	461a      	mov	r2, r3
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016336:	4b29      	ldr	r3, [pc, #164]	; (80163dc <USBD_SetConfig+0x150>)
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	4619      	mov	r1, r3
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f7fe ffd0 	bl	80152e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f000 fa06 	bl	8016754 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016348:	e042      	b.n	80163d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801634a:	4b24      	ldr	r3, [pc, #144]	; (80163dc <USBD_SetConfig+0x150>)
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	461a      	mov	r2, r3
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	429a      	cmp	r2, r3
 8016356:	d02a      	beq.n	80163ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	b2db      	uxtb	r3, r3
 801635e:	4619      	mov	r1, r3
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f7fe ffbe 	bl	80152e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016366:	4b1d      	ldr	r3, [pc, #116]	; (80163dc <USBD_SetConfig+0x150>)
 8016368:	781b      	ldrb	r3, [r3, #0]
 801636a:	461a      	mov	r2, r3
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016370:	4b1a      	ldr	r3, [pc, #104]	; (80163dc <USBD_SetConfig+0x150>)
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	4619      	mov	r1, r3
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f7fe ff97 	bl	80152aa <USBD_SetClassConfig>
 801637c:	4603      	mov	r3, r0
 801637e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016380:	7bfb      	ldrb	r3, [r7, #15]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d00f      	beq.n	80163a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016386:	6839      	ldr	r1, [r7, #0]
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f000 f918 	bl	80165be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	b2db      	uxtb	r3, r3
 8016394:	4619      	mov	r1, r3
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f7fe ffa3 	bl	80152e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2202      	movs	r2, #2
 80163a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80163a4:	e014      	b.n	80163d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80163a6:	6878      	ldr	r0, [r7, #4]
 80163a8:	f000 f9d4 	bl	8016754 <USBD_CtlSendStatus>
      break;
 80163ac:	e010      	b.n	80163d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f000 f9d0 	bl	8016754 <USBD_CtlSendStatus>
      break;
 80163b4:	e00c      	b.n	80163d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80163b6:	6839      	ldr	r1, [r7, #0]
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f000 f900 	bl	80165be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80163be:	4b07      	ldr	r3, [pc, #28]	; (80163dc <USBD_SetConfig+0x150>)
 80163c0:	781b      	ldrb	r3, [r3, #0]
 80163c2:	4619      	mov	r1, r3
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f7fe ff8c 	bl	80152e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80163ca:	2303      	movs	r3, #3
 80163cc:	73fb      	strb	r3, [r7, #15]
      break;
 80163ce:	bf00      	nop
  }

  return ret;
 80163d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3710      	adds	r7, #16
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}
 80163da:	bf00      	nop
 80163dc:	20001378 	.word	0x20001378

080163e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	88db      	ldrh	r3, [r3, #6]
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d004      	beq.n	80163fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80163f2:	6839      	ldr	r1, [r7, #0]
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f000 f8e2 	bl	80165be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80163fa:	e023      	b.n	8016444 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016402:	b2db      	uxtb	r3, r3
 8016404:	2b02      	cmp	r3, #2
 8016406:	dc02      	bgt.n	801640e <USBD_GetConfig+0x2e>
 8016408:	2b00      	cmp	r3, #0
 801640a:	dc03      	bgt.n	8016414 <USBD_GetConfig+0x34>
 801640c:	e015      	b.n	801643a <USBD_GetConfig+0x5a>
 801640e:	2b03      	cmp	r3, #3
 8016410:	d00b      	beq.n	801642a <USBD_GetConfig+0x4a>
 8016412:	e012      	b.n	801643a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2200      	movs	r2, #0
 8016418:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	3308      	adds	r3, #8
 801641e:	2201      	movs	r2, #1
 8016420:	4619      	mov	r1, r3
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	f000 f93c 	bl	80166a0 <USBD_CtlSendData>
        break;
 8016428:	e00c      	b.n	8016444 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	3304      	adds	r3, #4
 801642e:	2201      	movs	r2, #1
 8016430:	4619      	mov	r1, r3
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f000 f934 	bl	80166a0 <USBD_CtlSendData>
        break;
 8016438:	e004      	b.n	8016444 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801643a:	6839      	ldr	r1, [r7, #0]
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f000 f8be 	bl	80165be <USBD_CtlError>
        break;
 8016442:	bf00      	nop
}
 8016444:	bf00      	nop
 8016446:	3708      	adds	r7, #8
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b082      	sub	sp, #8
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801645c:	b2db      	uxtb	r3, r3
 801645e:	3b01      	subs	r3, #1
 8016460:	2b02      	cmp	r3, #2
 8016462:	d81e      	bhi.n	80164a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	88db      	ldrh	r3, [r3, #6]
 8016468:	2b02      	cmp	r3, #2
 801646a:	d004      	beq.n	8016476 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801646c:	6839      	ldr	r1, [r7, #0]
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f000 f8a5 	bl	80165be <USBD_CtlError>
        break;
 8016474:	e01a      	b.n	80164ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2201      	movs	r2, #1
 801647a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016482:	2b00      	cmp	r3, #0
 8016484:	d005      	beq.n	8016492 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	68db      	ldr	r3, [r3, #12]
 801648a:	f043 0202 	orr.w	r2, r3, #2
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	330c      	adds	r3, #12
 8016496:	2202      	movs	r2, #2
 8016498:	4619      	mov	r1, r3
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f000 f900 	bl	80166a0 <USBD_CtlSendData>
      break;
 80164a0:	e004      	b.n	80164ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80164a2:	6839      	ldr	r1, [r7, #0]
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 f88a 	bl	80165be <USBD_CtlError>
      break;
 80164aa:	bf00      	nop
  }
}
 80164ac:	bf00      	nop
 80164ae:	3708      	adds	r7, #8
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}

080164b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b082      	sub	sp, #8
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
 80164bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80164be:	683b      	ldr	r3, [r7, #0]
 80164c0:	885b      	ldrh	r3, [r3, #2]
 80164c2:	2b01      	cmp	r3, #1
 80164c4:	d107      	bne.n	80164d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2201      	movs	r2, #1
 80164ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 f940 	bl	8016754 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80164d4:	e013      	b.n	80164fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	885b      	ldrh	r3, [r3, #2]
 80164da:	2b02      	cmp	r3, #2
 80164dc:	d10b      	bne.n	80164f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80164de:	683b      	ldr	r3, [r7, #0]
 80164e0:	889b      	ldrh	r3, [r3, #4]
 80164e2:	0a1b      	lsrs	r3, r3, #8
 80164e4:	b29b      	uxth	r3, r3
 80164e6:	b2da      	uxtb	r2, r3
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f000 f930 	bl	8016754 <USBD_CtlSendStatus>
}
 80164f4:	e003      	b.n	80164fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80164f6:	6839      	ldr	r1, [r7, #0]
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f000 f860 	bl	80165be <USBD_CtlError>
}
 80164fe:	bf00      	nop
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}

08016506 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016506:	b580      	push	{r7, lr}
 8016508:	b082      	sub	sp, #8
 801650a:	af00      	add	r7, sp, #0
 801650c:	6078      	str	r0, [r7, #4]
 801650e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016516:	b2db      	uxtb	r3, r3
 8016518:	3b01      	subs	r3, #1
 801651a:	2b02      	cmp	r3, #2
 801651c:	d80b      	bhi.n	8016536 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	885b      	ldrh	r3, [r3, #2]
 8016522:	2b01      	cmp	r3, #1
 8016524:	d10c      	bne.n	8016540 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2200      	movs	r2, #0
 801652a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f000 f910 	bl	8016754 <USBD_CtlSendStatus>
      }
      break;
 8016534:	e004      	b.n	8016540 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016536:	6839      	ldr	r1, [r7, #0]
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f000 f840 	bl	80165be <USBD_CtlError>
      break;
 801653e:	e000      	b.n	8016542 <USBD_ClrFeature+0x3c>
      break;
 8016540:	bf00      	nop
  }
}
 8016542:	bf00      	nop
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801654a:	b580      	push	{r7, lr}
 801654c:	b084      	sub	sp, #16
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
 8016552:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	781a      	ldrb	r2, [r3, #0]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	3301      	adds	r3, #1
 8016564:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	781a      	ldrb	r2, [r3, #0]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	3301      	adds	r3, #1
 8016572:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016574:	68f8      	ldr	r0, [r7, #12]
 8016576:	f7ff fa41 	bl	80159fc <SWAPBYTE>
 801657a:	4603      	mov	r3, r0
 801657c:	461a      	mov	r2, r3
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	3301      	adds	r3, #1
 8016586:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	3301      	adds	r3, #1
 801658c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801658e:	68f8      	ldr	r0, [r7, #12]
 8016590:	f7ff fa34 	bl	80159fc <SWAPBYTE>
 8016594:	4603      	mov	r3, r0
 8016596:	461a      	mov	r2, r3
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	3301      	adds	r3, #1
 80165a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	3301      	adds	r3, #1
 80165a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80165a8:	68f8      	ldr	r0, [r7, #12]
 80165aa:	f7ff fa27 	bl	80159fc <SWAPBYTE>
 80165ae:	4603      	mov	r3, r0
 80165b0:	461a      	mov	r2, r3
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	80da      	strh	r2, [r3, #6]
}
 80165b6:	bf00      	nop
 80165b8:	3710      	adds	r7, #16
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}

080165be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165be:	b580      	push	{r7, lr}
 80165c0:	b082      	sub	sp, #8
 80165c2:	af00      	add	r7, sp, #0
 80165c4:	6078      	str	r0, [r7, #4]
 80165c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80165c8:	2180      	movs	r1, #128	; 0x80
 80165ca:	6878      	ldr	r0, [r7, #4]
 80165cc:	f002 feca 	bl	8019364 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80165d0:	2100      	movs	r1, #0
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f002 fec6 	bl	8019364 <USBD_LL_StallEP>
}
 80165d8:	bf00      	nop
 80165da:	3708      	adds	r7, #8
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}

080165e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b086      	sub	sp, #24
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	60f8      	str	r0, [r7, #12]
 80165e8:	60b9      	str	r1, [r7, #8]
 80165ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80165ec:	2300      	movs	r3, #0
 80165ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d036      	beq.n	8016664 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80165fa:	6938      	ldr	r0, [r7, #16]
 80165fc:	f000 f836 	bl	801666c <USBD_GetLen>
 8016600:	4603      	mov	r3, r0
 8016602:	3301      	adds	r3, #1
 8016604:	b29b      	uxth	r3, r3
 8016606:	005b      	lsls	r3, r3, #1
 8016608:	b29a      	uxth	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801660e:	7dfb      	ldrb	r3, [r7, #23]
 8016610:	68ba      	ldr	r2, [r7, #8]
 8016612:	4413      	add	r3, r2
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	7812      	ldrb	r2, [r2, #0]
 8016618:	701a      	strb	r2, [r3, #0]
  idx++;
 801661a:	7dfb      	ldrb	r3, [r7, #23]
 801661c:	3301      	adds	r3, #1
 801661e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016620:	7dfb      	ldrb	r3, [r7, #23]
 8016622:	68ba      	ldr	r2, [r7, #8]
 8016624:	4413      	add	r3, r2
 8016626:	2203      	movs	r2, #3
 8016628:	701a      	strb	r2, [r3, #0]
  idx++;
 801662a:	7dfb      	ldrb	r3, [r7, #23]
 801662c:	3301      	adds	r3, #1
 801662e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016630:	e013      	b.n	801665a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016632:	7dfb      	ldrb	r3, [r7, #23]
 8016634:	68ba      	ldr	r2, [r7, #8]
 8016636:	4413      	add	r3, r2
 8016638:	693a      	ldr	r2, [r7, #16]
 801663a:	7812      	ldrb	r2, [r2, #0]
 801663c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	3301      	adds	r3, #1
 8016642:	613b      	str	r3, [r7, #16]
    idx++;
 8016644:	7dfb      	ldrb	r3, [r7, #23]
 8016646:	3301      	adds	r3, #1
 8016648:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801664a:	7dfb      	ldrb	r3, [r7, #23]
 801664c:	68ba      	ldr	r2, [r7, #8]
 801664e:	4413      	add	r3, r2
 8016650:	2200      	movs	r2, #0
 8016652:	701a      	strb	r2, [r3, #0]
    idx++;
 8016654:	7dfb      	ldrb	r3, [r7, #23]
 8016656:	3301      	adds	r3, #1
 8016658:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d1e7      	bne.n	8016632 <USBD_GetString+0x52>
 8016662:	e000      	b.n	8016666 <USBD_GetString+0x86>
    return;
 8016664:	bf00      	nop
  }
}
 8016666:	3718      	adds	r7, #24
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}

0801666c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801666c:	b480      	push	{r7}
 801666e:	b085      	sub	sp, #20
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016674:	2300      	movs	r3, #0
 8016676:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801667c:	e005      	b.n	801668a <USBD_GetLen+0x1e>
  {
    len++;
 801667e:	7bfb      	ldrb	r3, [r7, #15]
 8016680:	3301      	adds	r3, #1
 8016682:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	3301      	adds	r3, #1
 8016688:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	781b      	ldrb	r3, [r3, #0]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d1f5      	bne.n	801667e <USBD_GetLen+0x12>
  }

  return len;
 8016692:	7bfb      	ldrb	r3, [r7, #15]
}
 8016694:	4618      	mov	r0, r3
 8016696:	3714      	adds	r7, #20
 8016698:	46bd      	mov	sp, r7
 801669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669e:	4770      	bx	lr

080166a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b084      	sub	sp, #16
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	2202      	movs	r2, #2
 80166b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	687a      	ldr	r2, [r7, #4]
 80166b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	687a      	ldr	r2, [r7, #4]
 80166be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	68ba      	ldr	r2, [r7, #8]
 80166c4:	2100      	movs	r1, #0
 80166c6:	68f8      	ldr	r0, [r7, #12]
 80166c8:	f002 ff1a 	bl	8019500 <USBD_LL_Transmit>

  return USBD_OK;
 80166cc:	2300      	movs	r3, #0
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3710      	adds	r7, #16
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}

080166d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80166d6:	b580      	push	{r7, lr}
 80166d8:	b084      	sub	sp, #16
 80166da:	af00      	add	r7, sp, #0
 80166dc:	60f8      	str	r0, [r7, #12]
 80166de:	60b9      	str	r1, [r7, #8]
 80166e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	68ba      	ldr	r2, [r7, #8]
 80166e6:	2100      	movs	r1, #0
 80166e8:	68f8      	ldr	r0, [r7, #12]
 80166ea:	f002 ff09 	bl	8019500 <USBD_LL_Transmit>

  return USBD_OK;
 80166ee:	2300      	movs	r3, #0
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3710      	adds	r7, #16
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}

080166f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b084      	sub	sp, #16
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	2203      	movs	r2, #3
 8016708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	68ba      	ldr	r2, [r7, #8]
 8016720:	2100      	movs	r1, #0
 8016722:	68f8      	ldr	r0, [r7, #12]
 8016724:	f002 ff24 	bl	8019570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016728:	2300      	movs	r3, #0
}
 801672a:	4618      	mov	r0, r3
 801672c:	3710      	adds	r7, #16
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}

08016732 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016732:	b580      	push	{r7, lr}
 8016734:	b084      	sub	sp, #16
 8016736:	af00      	add	r7, sp, #0
 8016738:	60f8      	str	r0, [r7, #12]
 801673a:	60b9      	str	r1, [r7, #8]
 801673c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	68ba      	ldr	r2, [r7, #8]
 8016742:	2100      	movs	r1, #0
 8016744:	68f8      	ldr	r0, [r7, #12]
 8016746:	f002 ff13 	bl	8019570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801674a:	2300      	movs	r3, #0
}
 801674c:	4618      	mov	r0, r3
 801674e:	3710      	adds	r7, #16
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}

08016754 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2204      	movs	r2, #4
 8016760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016764:	2300      	movs	r3, #0
 8016766:	2200      	movs	r2, #0
 8016768:	2100      	movs	r1, #0
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f002 fec8 	bl	8019500 <USBD_LL_Transmit>

  return USBD_OK;
 8016770:	2300      	movs	r3, #0
}
 8016772:	4618      	mov	r0, r3
 8016774:	3708      	adds	r7, #8
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}

0801677a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801677a:	b580      	push	{r7, lr}
 801677c:	b082      	sub	sp, #8
 801677e:	af00      	add	r7, sp, #0
 8016780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2205      	movs	r2, #5
 8016786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801678a:	2300      	movs	r3, #0
 801678c:	2200      	movs	r2, #0
 801678e:	2100      	movs	r1, #0
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f002 feed 	bl	8019570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016796:	2300      	movs	r3, #0
}
 8016798:	4618      	mov	r0, r3
 801679a:	3708      	adds	r7, #8
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b084      	sub	sp, #16
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	4603      	mov	r3, r0
 80167a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80167aa:	79fb      	ldrb	r3, [r7, #7]
 80167ac:	4a08      	ldr	r2, [pc, #32]	; (80167d0 <disk_status+0x30>)
 80167ae:	009b      	lsls	r3, r3, #2
 80167b0:	4413      	add	r3, r2
 80167b2:	685b      	ldr	r3, [r3, #4]
 80167b4:	685b      	ldr	r3, [r3, #4]
 80167b6:	79fa      	ldrb	r2, [r7, #7]
 80167b8:	4905      	ldr	r1, [pc, #20]	; (80167d0 <disk_status+0x30>)
 80167ba:	440a      	add	r2, r1
 80167bc:	7a12      	ldrb	r2, [r2, #8]
 80167be:	4610      	mov	r0, r2
 80167c0:	4798      	blx	r3
 80167c2:	4603      	mov	r3, r0
 80167c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80167c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3710      	adds	r7, #16
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}
 80167d0:	200013a4 	.word	0x200013a4

080167d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	4603      	mov	r3, r0
 80167dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80167de:	2300      	movs	r3, #0
 80167e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80167e2:	79fb      	ldrb	r3, [r7, #7]
 80167e4:	4a0d      	ldr	r2, [pc, #52]	; (801681c <disk_initialize+0x48>)
 80167e6:	5cd3      	ldrb	r3, [r2, r3]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d111      	bne.n	8016810 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80167ec:	79fb      	ldrb	r3, [r7, #7]
 80167ee:	4a0b      	ldr	r2, [pc, #44]	; (801681c <disk_initialize+0x48>)
 80167f0:	2101      	movs	r1, #1
 80167f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80167f4:	79fb      	ldrb	r3, [r7, #7]
 80167f6:	4a09      	ldr	r2, [pc, #36]	; (801681c <disk_initialize+0x48>)
 80167f8:	009b      	lsls	r3, r3, #2
 80167fa:	4413      	add	r3, r2
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	79fa      	ldrb	r2, [r7, #7]
 8016802:	4906      	ldr	r1, [pc, #24]	; (801681c <disk_initialize+0x48>)
 8016804:	440a      	add	r2, r1
 8016806:	7a12      	ldrb	r2, [r2, #8]
 8016808:	4610      	mov	r0, r2
 801680a:	4798      	blx	r3
 801680c:	4603      	mov	r3, r0
 801680e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016810:	7bfb      	ldrb	r3, [r7, #15]
}
 8016812:	4618      	mov	r0, r3
 8016814:	3710      	adds	r7, #16
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	200013a4 	.word	0x200013a4

08016820 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016820:	b590      	push	{r4, r7, lr}
 8016822:	b087      	sub	sp, #28
 8016824:	af00      	add	r7, sp, #0
 8016826:	60b9      	str	r1, [r7, #8]
 8016828:	607a      	str	r2, [r7, #4]
 801682a:	603b      	str	r3, [r7, #0]
 801682c:	4603      	mov	r3, r0
 801682e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016830:	7bfb      	ldrb	r3, [r7, #15]
 8016832:	4a0a      	ldr	r2, [pc, #40]	; (801685c <disk_read+0x3c>)
 8016834:	009b      	lsls	r3, r3, #2
 8016836:	4413      	add	r3, r2
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	689c      	ldr	r4, [r3, #8]
 801683c:	7bfb      	ldrb	r3, [r7, #15]
 801683e:	4a07      	ldr	r2, [pc, #28]	; (801685c <disk_read+0x3c>)
 8016840:	4413      	add	r3, r2
 8016842:	7a18      	ldrb	r0, [r3, #8]
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	68b9      	ldr	r1, [r7, #8]
 801684a:	47a0      	blx	r4
 801684c:	4603      	mov	r3, r0
 801684e:	75fb      	strb	r3, [r7, #23]
  return res;
 8016850:	7dfb      	ldrb	r3, [r7, #23]
}
 8016852:	4618      	mov	r0, r3
 8016854:	371c      	adds	r7, #28
 8016856:	46bd      	mov	sp, r7
 8016858:	bd90      	pop	{r4, r7, pc}
 801685a:	bf00      	nop
 801685c:	200013a4 	.word	0x200013a4

08016860 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016860:	b590      	push	{r4, r7, lr}
 8016862:	b087      	sub	sp, #28
 8016864:	af00      	add	r7, sp, #0
 8016866:	60b9      	str	r1, [r7, #8]
 8016868:	607a      	str	r2, [r7, #4]
 801686a:	603b      	str	r3, [r7, #0]
 801686c:	4603      	mov	r3, r0
 801686e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016870:	7bfb      	ldrb	r3, [r7, #15]
 8016872:	4a0a      	ldr	r2, [pc, #40]	; (801689c <disk_write+0x3c>)
 8016874:	009b      	lsls	r3, r3, #2
 8016876:	4413      	add	r3, r2
 8016878:	685b      	ldr	r3, [r3, #4]
 801687a:	68dc      	ldr	r4, [r3, #12]
 801687c:	7bfb      	ldrb	r3, [r7, #15]
 801687e:	4a07      	ldr	r2, [pc, #28]	; (801689c <disk_write+0x3c>)
 8016880:	4413      	add	r3, r2
 8016882:	7a18      	ldrb	r0, [r3, #8]
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	687a      	ldr	r2, [r7, #4]
 8016888:	68b9      	ldr	r1, [r7, #8]
 801688a:	47a0      	blx	r4
 801688c:	4603      	mov	r3, r0
 801688e:	75fb      	strb	r3, [r7, #23]
  return res;
 8016890:	7dfb      	ldrb	r3, [r7, #23]
}
 8016892:	4618      	mov	r0, r3
 8016894:	371c      	adds	r7, #28
 8016896:	46bd      	mov	sp, r7
 8016898:	bd90      	pop	{r4, r7, pc}
 801689a:	bf00      	nop
 801689c:	200013a4 	.word	0x200013a4

080168a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	4603      	mov	r3, r0
 80168a8:	603a      	str	r2, [r7, #0]
 80168aa:	71fb      	strb	r3, [r7, #7]
 80168ac:	460b      	mov	r3, r1
 80168ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80168b0:	79fb      	ldrb	r3, [r7, #7]
 80168b2:	4a09      	ldr	r2, [pc, #36]	; (80168d8 <disk_ioctl+0x38>)
 80168b4:	009b      	lsls	r3, r3, #2
 80168b6:	4413      	add	r3, r2
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	691b      	ldr	r3, [r3, #16]
 80168bc:	79fa      	ldrb	r2, [r7, #7]
 80168be:	4906      	ldr	r1, [pc, #24]	; (80168d8 <disk_ioctl+0x38>)
 80168c0:	440a      	add	r2, r1
 80168c2:	7a10      	ldrb	r0, [r2, #8]
 80168c4:	79b9      	ldrb	r1, [r7, #6]
 80168c6:	683a      	ldr	r2, [r7, #0]
 80168c8:	4798      	blx	r3
 80168ca:	4603      	mov	r3, r0
 80168cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80168ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80168d0:	4618      	mov	r0, r3
 80168d2:	3710      	adds	r7, #16
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}
 80168d8:	200013a4 	.word	0x200013a4

080168dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80168dc:	b480      	push	{r7}
 80168de:	b085      	sub	sp, #20
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	3301      	adds	r3, #1
 80168e8:	781b      	ldrb	r3, [r3, #0]
 80168ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80168ec:	89fb      	ldrh	r3, [r7, #14]
 80168ee:	021b      	lsls	r3, r3, #8
 80168f0:	b21a      	sxth	r2, r3
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	781b      	ldrb	r3, [r3, #0]
 80168f6:	b21b      	sxth	r3, r3
 80168f8:	4313      	orrs	r3, r2
 80168fa:	b21b      	sxth	r3, r3
 80168fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80168fe:	89fb      	ldrh	r3, [r7, #14]
}
 8016900:	4618      	mov	r0, r3
 8016902:	3714      	adds	r7, #20
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801690c:	b480      	push	{r7}
 801690e:	b085      	sub	sp, #20
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	3303      	adds	r3, #3
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	021b      	lsls	r3, r3, #8
 8016920:	687a      	ldr	r2, [r7, #4]
 8016922:	3202      	adds	r2, #2
 8016924:	7812      	ldrb	r2, [r2, #0]
 8016926:	4313      	orrs	r3, r2
 8016928:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	021b      	lsls	r3, r3, #8
 801692e:	687a      	ldr	r2, [r7, #4]
 8016930:	3201      	adds	r2, #1
 8016932:	7812      	ldrb	r2, [r2, #0]
 8016934:	4313      	orrs	r3, r2
 8016936:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	021b      	lsls	r3, r3, #8
 801693c:	687a      	ldr	r2, [r7, #4]
 801693e:	7812      	ldrb	r2, [r2, #0]
 8016940:	4313      	orrs	r3, r2
 8016942:	60fb      	str	r3, [r7, #12]
	return rv;
 8016944:	68fb      	ldr	r3, [r7, #12]
}
 8016946:	4618      	mov	r0, r3
 8016948:	3714      	adds	r7, #20
 801694a:	46bd      	mov	sp, r7
 801694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016950:	4770      	bx	lr

08016952 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016952:	b480      	push	{r7}
 8016954:	b083      	sub	sp, #12
 8016956:	af00      	add	r7, sp, #0
 8016958:	6078      	str	r0, [r7, #4]
 801695a:	460b      	mov	r3, r1
 801695c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	1c5a      	adds	r2, r3, #1
 8016962:	607a      	str	r2, [r7, #4]
 8016964:	887a      	ldrh	r2, [r7, #2]
 8016966:	b2d2      	uxtb	r2, r2
 8016968:	701a      	strb	r2, [r3, #0]
 801696a:	887b      	ldrh	r3, [r7, #2]
 801696c:	0a1b      	lsrs	r3, r3, #8
 801696e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	1c5a      	adds	r2, r3, #1
 8016974:	607a      	str	r2, [r7, #4]
 8016976:	887a      	ldrh	r2, [r7, #2]
 8016978:	b2d2      	uxtb	r2, r2
 801697a:	701a      	strb	r2, [r3, #0]
}
 801697c:	bf00      	nop
 801697e:	370c      	adds	r7, #12
 8016980:	46bd      	mov	sp, r7
 8016982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016986:	4770      	bx	lr

08016988 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016988:	b480      	push	{r7}
 801698a:	b083      	sub	sp, #12
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	1c5a      	adds	r2, r3, #1
 8016996:	607a      	str	r2, [r7, #4]
 8016998:	683a      	ldr	r2, [r7, #0]
 801699a:	b2d2      	uxtb	r2, r2
 801699c:	701a      	strb	r2, [r3, #0]
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	0a1b      	lsrs	r3, r3, #8
 80169a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	1c5a      	adds	r2, r3, #1
 80169a8:	607a      	str	r2, [r7, #4]
 80169aa:	683a      	ldr	r2, [r7, #0]
 80169ac:	b2d2      	uxtb	r2, r2
 80169ae:	701a      	strb	r2, [r3, #0]
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	0a1b      	lsrs	r3, r3, #8
 80169b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	1c5a      	adds	r2, r3, #1
 80169ba:	607a      	str	r2, [r7, #4]
 80169bc:	683a      	ldr	r2, [r7, #0]
 80169be:	b2d2      	uxtb	r2, r2
 80169c0:	701a      	strb	r2, [r3, #0]
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	0a1b      	lsrs	r3, r3, #8
 80169c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	1c5a      	adds	r2, r3, #1
 80169cc:	607a      	str	r2, [r7, #4]
 80169ce:	683a      	ldr	r2, [r7, #0]
 80169d0:	b2d2      	uxtb	r2, r2
 80169d2:	701a      	strb	r2, [r3, #0]
}
 80169d4:	bf00      	nop
 80169d6:	370c      	adds	r7, #12
 80169d8:	46bd      	mov	sp, r7
 80169da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169de:	4770      	bx	lr

080169e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80169e0:	b480      	push	{r7}
 80169e2:	b087      	sub	sp, #28
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	60f8      	str	r0, [r7, #12]
 80169e8:	60b9      	str	r1, [r7, #8]
 80169ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d00d      	beq.n	8016a16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80169fa:	693a      	ldr	r2, [r7, #16]
 80169fc:	1c53      	adds	r3, r2, #1
 80169fe:	613b      	str	r3, [r7, #16]
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	1c59      	adds	r1, r3, #1
 8016a04:	6179      	str	r1, [r7, #20]
 8016a06:	7812      	ldrb	r2, [r2, #0]
 8016a08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	607b      	str	r3, [r7, #4]
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d1f1      	bne.n	80169fa <mem_cpy+0x1a>
	}
}
 8016a16:	bf00      	nop
 8016a18:	371c      	adds	r7, #28
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a20:	4770      	bx	lr

08016a22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016a22:	b480      	push	{r7}
 8016a24:	b087      	sub	sp, #28
 8016a26:	af00      	add	r7, sp, #0
 8016a28:	60f8      	str	r0, [r7, #12]
 8016a2a:	60b9      	str	r1, [r7, #8]
 8016a2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016a32:	697b      	ldr	r3, [r7, #20]
 8016a34:	1c5a      	adds	r2, r3, #1
 8016a36:	617a      	str	r2, [r7, #20]
 8016a38:	68ba      	ldr	r2, [r7, #8]
 8016a3a:	b2d2      	uxtb	r2, r2
 8016a3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	3b01      	subs	r3, #1
 8016a42:	607b      	str	r3, [r7, #4]
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d1f3      	bne.n	8016a32 <mem_set+0x10>
}
 8016a4a:	bf00      	nop
 8016a4c:	bf00      	nop
 8016a4e:	371c      	adds	r7, #28
 8016a50:	46bd      	mov	sp, r7
 8016a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a56:	4770      	bx	lr

08016a58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016a58:	b480      	push	{r7}
 8016a5a:	b089      	sub	sp, #36	; 0x24
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	61fb      	str	r3, [r7, #28]
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	1c5a      	adds	r2, r3, #1
 8016a74:	61fa      	str	r2, [r7, #28]
 8016a76:	781b      	ldrb	r3, [r3, #0]
 8016a78:	4619      	mov	r1, r3
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	1c5a      	adds	r2, r3, #1
 8016a7e:	61ba      	str	r2, [r7, #24]
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	1acb      	subs	r3, r1, r3
 8016a84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	3b01      	subs	r3, #1
 8016a8a:	607b      	str	r3, [r7, #4]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d002      	beq.n	8016a98 <mem_cmp+0x40>
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d0eb      	beq.n	8016a70 <mem_cmp+0x18>

	return r;
 8016a98:	697b      	ldr	r3, [r7, #20]
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3724      	adds	r7, #36	; 0x24
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa4:	4770      	bx	lr

08016aa6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016aa6:	b480      	push	{r7}
 8016aa8:	b083      	sub	sp, #12
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
 8016aae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016ab0:	e002      	b.n	8016ab8 <chk_chr+0x12>
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	3301      	adds	r3, #1
 8016ab6:	607b      	str	r3, [r7, #4]
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	781b      	ldrb	r3, [r3, #0]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d005      	beq.n	8016acc <chk_chr+0x26>
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	781b      	ldrb	r3, [r3, #0]
 8016ac4:	461a      	mov	r2, r3
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	4293      	cmp	r3, r2
 8016aca:	d1f2      	bne.n	8016ab2 <chk_chr+0xc>
	return *str;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	781b      	ldrb	r3, [r3, #0]
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	370c      	adds	r7, #12
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr

08016adc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016adc:	b480      	push	{r7}
 8016ade:	b085      	sub	sp, #20
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
 8016ae4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	60bb      	str	r3, [r7, #8]
 8016aea:	68bb      	ldr	r3, [r7, #8]
 8016aec:	60fb      	str	r3, [r7, #12]
 8016aee:	e029      	b.n	8016b44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016af0:	4a27      	ldr	r2, [pc, #156]	; (8016b90 <chk_lock+0xb4>)
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	011b      	lsls	r3, r3, #4
 8016af6:	4413      	add	r3, r2
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d01d      	beq.n	8016b3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016afe:	4a24      	ldr	r2, [pc, #144]	; (8016b90 <chk_lock+0xb4>)
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	011b      	lsls	r3, r3, #4
 8016b04:	4413      	add	r3, r2
 8016b06:	681a      	ldr	r2, [r3, #0]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d116      	bne.n	8016b3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016b10:	4a1f      	ldr	r2, [pc, #124]	; (8016b90 <chk_lock+0xb4>)
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	011b      	lsls	r3, r3, #4
 8016b16:	4413      	add	r3, r2
 8016b18:	3304      	adds	r3, #4
 8016b1a:	681a      	ldr	r2, [r3, #0]
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d10c      	bne.n	8016b3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016b24:	4a1a      	ldr	r2, [pc, #104]	; (8016b90 <chk_lock+0xb4>)
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	011b      	lsls	r3, r3, #4
 8016b2a:	4413      	add	r3, r2
 8016b2c:	3308      	adds	r3, #8
 8016b2e:	681a      	ldr	r2, [r3, #0]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d102      	bne.n	8016b3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016b38:	e007      	b.n	8016b4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	3301      	adds	r3, #1
 8016b42:	60fb      	str	r3, [r7, #12]
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d9d2      	bls.n	8016af0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	2b02      	cmp	r3, #2
 8016b4e:	d109      	bne.n	8016b64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d102      	bne.n	8016b5c <chk_lock+0x80>
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	2b02      	cmp	r3, #2
 8016b5a:	d101      	bne.n	8016b60 <chk_lock+0x84>
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	e010      	b.n	8016b82 <chk_lock+0xa6>
 8016b60:	2312      	movs	r3, #18
 8016b62:	e00e      	b.n	8016b82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016b64:	683b      	ldr	r3, [r7, #0]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d108      	bne.n	8016b7c <chk_lock+0xa0>
 8016b6a:	4a09      	ldr	r2, [pc, #36]	; (8016b90 <chk_lock+0xb4>)
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	011b      	lsls	r3, r3, #4
 8016b70:	4413      	add	r3, r2
 8016b72:	330c      	adds	r3, #12
 8016b74:	881b      	ldrh	r3, [r3, #0]
 8016b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b7a:	d101      	bne.n	8016b80 <chk_lock+0xa4>
 8016b7c:	2310      	movs	r3, #16
 8016b7e:	e000      	b.n	8016b82 <chk_lock+0xa6>
 8016b80:	2300      	movs	r3, #0
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3714      	adds	r7, #20
 8016b86:	46bd      	mov	sp, r7
 8016b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8c:	4770      	bx	lr
 8016b8e:	bf00      	nop
 8016b90:	20001384 	.word	0x20001384

08016b94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016b94:	b480      	push	{r7}
 8016b96:	b083      	sub	sp, #12
 8016b98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	607b      	str	r3, [r7, #4]
 8016b9e:	e002      	b.n	8016ba6 <enq_lock+0x12>
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	3301      	adds	r3, #1
 8016ba4:	607b      	str	r3, [r7, #4]
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d806      	bhi.n	8016bba <enq_lock+0x26>
 8016bac:	4a09      	ldr	r2, [pc, #36]	; (8016bd4 <enq_lock+0x40>)
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	011b      	lsls	r3, r3, #4
 8016bb2:	4413      	add	r3, r2
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d1f2      	bne.n	8016ba0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2b02      	cmp	r3, #2
 8016bbe:	bf14      	ite	ne
 8016bc0:	2301      	movne	r3, #1
 8016bc2:	2300      	moveq	r3, #0
 8016bc4:	b2db      	uxtb	r3, r3
}
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	370c      	adds	r7, #12
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd0:	4770      	bx	lr
 8016bd2:	bf00      	nop
 8016bd4:	20001384 	.word	0x20001384

08016bd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b085      	sub	sp, #20
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
 8016be0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016be2:	2300      	movs	r3, #0
 8016be4:	60fb      	str	r3, [r7, #12]
 8016be6:	e01f      	b.n	8016c28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016be8:	4a41      	ldr	r2, [pc, #260]	; (8016cf0 <inc_lock+0x118>)
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	011b      	lsls	r3, r3, #4
 8016bee:	4413      	add	r3, r2
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d113      	bne.n	8016c22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016bfa:	4a3d      	ldr	r2, [pc, #244]	; (8016cf0 <inc_lock+0x118>)
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	011b      	lsls	r3, r3, #4
 8016c00:	4413      	add	r3, r2
 8016c02:	3304      	adds	r3, #4
 8016c04:	681a      	ldr	r2, [r3, #0]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d109      	bne.n	8016c22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016c0e:	4a38      	ldr	r2, [pc, #224]	; (8016cf0 <inc_lock+0x118>)
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	011b      	lsls	r3, r3, #4
 8016c14:	4413      	add	r3, r2
 8016c16:	3308      	adds	r3, #8
 8016c18:	681a      	ldr	r2, [r3, #0]
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d006      	beq.n	8016c30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	3301      	adds	r3, #1
 8016c26:	60fb      	str	r3, [r7, #12]
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2b01      	cmp	r3, #1
 8016c2c:	d9dc      	bls.n	8016be8 <inc_lock+0x10>
 8016c2e:	e000      	b.n	8016c32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016c30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	2b02      	cmp	r3, #2
 8016c36:	d132      	bne.n	8016c9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	60fb      	str	r3, [r7, #12]
 8016c3c:	e002      	b.n	8016c44 <inc_lock+0x6c>
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	3301      	adds	r3, #1
 8016c42:	60fb      	str	r3, [r7, #12]
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2b01      	cmp	r3, #1
 8016c48:	d806      	bhi.n	8016c58 <inc_lock+0x80>
 8016c4a:	4a29      	ldr	r2, [pc, #164]	; (8016cf0 <inc_lock+0x118>)
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	011b      	lsls	r3, r3, #4
 8016c50:	4413      	add	r3, r2
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d1f2      	bne.n	8016c3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	2b02      	cmp	r3, #2
 8016c5c:	d101      	bne.n	8016c62 <inc_lock+0x8a>
 8016c5e:	2300      	movs	r3, #0
 8016c60:	e040      	b.n	8016ce4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	4922      	ldr	r1, [pc, #136]	; (8016cf0 <inc_lock+0x118>)
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	011b      	lsls	r3, r3, #4
 8016c6c:	440b      	add	r3, r1
 8016c6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	689a      	ldr	r2, [r3, #8]
 8016c74:	491e      	ldr	r1, [pc, #120]	; (8016cf0 <inc_lock+0x118>)
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	011b      	lsls	r3, r3, #4
 8016c7a:	440b      	add	r3, r1
 8016c7c:	3304      	adds	r3, #4
 8016c7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	695a      	ldr	r2, [r3, #20]
 8016c84:	491a      	ldr	r1, [pc, #104]	; (8016cf0 <inc_lock+0x118>)
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	011b      	lsls	r3, r3, #4
 8016c8a:	440b      	add	r3, r1
 8016c8c:	3308      	adds	r3, #8
 8016c8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016c90:	4a17      	ldr	r2, [pc, #92]	; (8016cf0 <inc_lock+0x118>)
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	011b      	lsls	r3, r3, #4
 8016c96:	4413      	add	r3, r2
 8016c98:	330c      	adds	r3, #12
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d009      	beq.n	8016cb8 <inc_lock+0xe0>
 8016ca4:	4a12      	ldr	r2, [pc, #72]	; (8016cf0 <inc_lock+0x118>)
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	011b      	lsls	r3, r3, #4
 8016caa:	4413      	add	r3, r2
 8016cac:	330c      	adds	r3, #12
 8016cae:	881b      	ldrh	r3, [r3, #0]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d001      	beq.n	8016cb8 <inc_lock+0xe0>
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	e015      	b.n	8016ce4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d108      	bne.n	8016cd0 <inc_lock+0xf8>
 8016cbe:	4a0c      	ldr	r2, [pc, #48]	; (8016cf0 <inc_lock+0x118>)
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	011b      	lsls	r3, r3, #4
 8016cc4:	4413      	add	r3, r2
 8016cc6:	330c      	adds	r3, #12
 8016cc8:	881b      	ldrh	r3, [r3, #0]
 8016cca:	3301      	adds	r3, #1
 8016ccc:	b29a      	uxth	r2, r3
 8016cce:	e001      	b.n	8016cd4 <inc_lock+0xfc>
 8016cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016cd4:	4906      	ldr	r1, [pc, #24]	; (8016cf0 <inc_lock+0x118>)
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	011b      	lsls	r3, r3, #4
 8016cda:	440b      	add	r3, r1
 8016cdc:	330c      	adds	r3, #12
 8016cde:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	3301      	adds	r3, #1
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3714      	adds	r7, #20
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cee:	4770      	bx	lr
 8016cf0:	20001384 	.word	0x20001384

08016cf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016cf4:	b480      	push	{r7}
 8016cf6:	b085      	sub	sp, #20
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	60fb      	str	r3, [r7, #12]
 8016d00:	e010      	b.n	8016d24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016d02:	4a0d      	ldr	r2, [pc, #52]	; (8016d38 <clear_lock+0x44>)
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	011b      	lsls	r3, r3, #4
 8016d08:	4413      	add	r3, r2
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	687a      	ldr	r2, [r7, #4]
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d105      	bne.n	8016d1e <clear_lock+0x2a>
 8016d12:	4a09      	ldr	r2, [pc, #36]	; (8016d38 <clear_lock+0x44>)
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	011b      	lsls	r3, r3, #4
 8016d18:	4413      	add	r3, r2
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	3301      	adds	r3, #1
 8016d22:	60fb      	str	r3, [r7, #12]
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	2b01      	cmp	r3, #1
 8016d28:	d9eb      	bls.n	8016d02 <clear_lock+0xe>
	}
}
 8016d2a:	bf00      	nop
 8016d2c:	bf00      	nop
 8016d2e:	3714      	adds	r7, #20
 8016d30:	46bd      	mov	sp, r7
 8016d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d36:	4770      	bx	lr
 8016d38:	20001384 	.word	0x20001384

08016d3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b086      	sub	sp, #24
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016d44:	2300      	movs	r3, #0
 8016d46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	78db      	ldrb	r3, [r3, #3]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d034      	beq.n	8016dba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	7858      	ldrb	r0, [r3, #1]
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016d60:	2301      	movs	r3, #1
 8016d62:	697a      	ldr	r2, [r7, #20]
 8016d64:	f7ff fd7c 	bl	8016860 <disk_write>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d002      	beq.n	8016d74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016d6e:	2301      	movs	r3, #1
 8016d70:	73fb      	strb	r3, [r7, #15]
 8016d72:	e022      	b.n	8016dba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	2200      	movs	r2, #0
 8016d78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6a1b      	ldr	r3, [r3, #32]
 8016d7e:	697a      	ldr	r2, [r7, #20]
 8016d80:	1ad2      	subs	r2, r2, r3
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	699b      	ldr	r3, [r3, #24]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d217      	bcs.n	8016dba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	789b      	ldrb	r3, [r3, #2]
 8016d8e:	613b      	str	r3, [r7, #16]
 8016d90:	e010      	b.n	8016db4 <sync_window+0x78>
					wsect += fs->fsize;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	699b      	ldr	r3, [r3, #24]
 8016d96:	697a      	ldr	r2, [r7, #20]
 8016d98:	4413      	add	r3, r2
 8016d9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	7858      	ldrb	r0, [r3, #1]
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016da6:	2301      	movs	r3, #1
 8016da8:	697a      	ldr	r2, [r7, #20]
 8016daa:	f7ff fd59 	bl	8016860 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	3b01      	subs	r3, #1
 8016db2:	613b      	str	r3, [r7, #16]
 8016db4:	693b      	ldr	r3, [r7, #16]
 8016db6:	2b01      	cmp	r3, #1
 8016db8:	d8eb      	bhi.n	8016d92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3718      	adds	r7, #24
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}

08016dc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b084      	sub	sp, #16
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
 8016dcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dd6:	683a      	ldr	r2, [r7, #0]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	d01b      	beq.n	8016e14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f7ff ffad 	bl	8016d3c <sync_window>
 8016de2:	4603      	mov	r3, r0
 8016de4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016de6:	7bfb      	ldrb	r3, [r7, #15]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d113      	bne.n	8016e14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	7858      	ldrb	r0, [r3, #1]
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016df6:	2301      	movs	r3, #1
 8016df8:	683a      	ldr	r2, [r7, #0]
 8016dfa:	f7ff fd11 	bl	8016820 <disk_read>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d004      	beq.n	8016e0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	683a      	ldr	r2, [r7, #0]
 8016e12:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8016e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e16:	4618      	mov	r0, r3
 8016e18:	3710      	adds	r7, #16
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
	...

08016e20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b084      	sub	sp, #16
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016e28:	6878      	ldr	r0, [r7, #4]
 8016e2a:	f7ff ff87 	bl	8016d3c <sync_window>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016e32:	7bfb      	ldrb	r3, [r7, #15]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d158      	bne.n	8016eea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	781b      	ldrb	r3, [r3, #0]
 8016e3c:	2b03      	cmp	r3, #3
 8016e3e:	d148      	bne.n	8016ed2 <sync_fs+0xb2>
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	791b      	ldrb	r3, [r3, #4]
 8016e44:	2b01      	cmp	r3, #1
 8016e46:	d144      	bne.n	8016ed2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	3330      	adds	r3, #48	; 0x30
 8016e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e50:	2100      	movs	r1, #0
 8016e52:	4618      	mov	r0, r3
 8016e54:	f7ff fde5 	bl	8016a22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	3330      	adds	r3, #48	; 0x30
 8016e5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016e60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7ff fd74 	bl	8016952 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	3330      	adds	r3, #48	; 0x30
 8016e6e:	4921      	ldr	r1, [pc, #132]	; (8016ef4 <sync_fs+0xd4>)
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7ff fd89 	bl	8016988 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	3330      	adds	r3, #48	; 0x30
 8016e7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016e7e:	491e      	ldr	r1, [pc, #120]	; (8016ef8 <sync_fs+0xd8>)
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7ff fd81 	bl	8016988 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	3330      	adds	r3, #48	; 0x30
 8016e8a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	691b      	ldr	r3, [r3, #16]
 8016e92:	4619      	mov	r1, r3
 8016e94:	4610      	mov	r0, r2
 8016e96:	f7ff fd77 	bl	8016988 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	3330      	adds	r3, #48	; 0x30
 8016e9e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	68db      	ldr	r3, [r3, #12]
 8016ea6:	4619      	mov	r1, r3
 8016ea8:	4610      	mov	r0, r2
 8016eaa:	f7ff fd6d 	bl	8016988 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	69db      	ldr	r3, [r3, #28]
 8016eb2:	1c5a      	adds	r2, r3, #1
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	7858      	ldrb	r0, [r3, #1]
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	f7ff fcca 	bl	8016860 <disk_write>
			fs->fsi_flag = 0;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	785b      	ldrb	r3, [r3, #1]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	2100      	movs	r1, #0
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7ff fce0 	bl	80168a0 <disk_ioctl>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d001      	beq.n	8016eea <sync_fs+0xca>
 8016ee6:	2301      	movs	r3, #1
 8016ee8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	3710      	adds	r7, #16
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}
 8016ef4:	41615252 	.word	0x41615252
 8016ef8:	61417272 	.word	0x61417272

08016efc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016efc:	b480      	push	{r7}
 8016efe:	b083      	sub	sp, #12
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	3b02      	subs	r3, #2
 8016f0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	695b      	ldr	r3, [r3, #20]
 8016f10:	3b02      	subs	r3, #2
 8016f12:	683a      	ldr	r2, [r7, #0]
 8016f14:	429a      	cmp	r2, r3
 8016f16:	d301      	bcc.n	8016f1c <clust2sect+0x20>
 8016f18:	2300      	movs	r3, #0
 8016f1a:	e008      	b.n	8016f2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	895b      	ldrh	r3, [r3, #10]
 8016f20:	461a      	mov	r2, r3
 8016f22:	683b      	ldr	r3, [r7, #0]
 8016f24:	fb03 f202 	mul.w	r2, r3, r2
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f2c:	4413      	add	r3, r2
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	370c      	adds	r7, #12
 8016f32:	46bd      	mov	sp, r7
 8016f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f38:	4770      	bx	lr

08016f3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b086      	sub	sp, #24
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	6078      	str	r0, [r7, #4]
 8016f42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	2b01      	cmp	r3, #1
 8016f4e:	d904      	bls.n	8016f5a <get_fat+0x20>
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	695b      	ldr	r3, [r3, #20]
 8016f54:	683a      	ldr	r2, [r7, #0]
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d302      	bcc.n	8016f60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	617b      	str	r3, [r7, #20]
 8016f5e:	e08f      	b.n	8017080 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016f66:	693b      	ldr	r3, [r7, #16]
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	2b03      	cmp	r3, #3
 8016f6c:	d062      	beq.n	8017034 <get_fat+0xfa>
 8016f6e:	2b03      	cmp	r3, #3
 8016f70:	dc7c      	bgt.n	801706c <get_fat+0x132>
 8016f72:	2b01      	cmp	r3, #1
 8016f74:	d002      	beq.n	8016f7c <get_fat+0x42>
 8016f76:	2b02      	cmp	r3, #2
 8016f78:	d042      	beq.n	8017000 <get_fat+0xc6>
 8016f7a:	e077      	b.n	801706c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	60fb      	str	r3, [r7, #12]
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	085b      	lsrs	r3, r3, #1
 8016f84:	68fa      	ldr	r2, [r7, #12]
 8016f86:	4413      	add	r3, r2
 8016f88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016f8a:	693b      	ldr	r3, [r7, #16]
 8016f8c:	6a1a      	ldr	r2, [r3, #32]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	0a5b      	lsrs	r3, r3, #9
 8016f92:	4413      	add	r3, r2
 8016f94:	4619      	mov	r1, r3
 8016f96:	6938      	ldr	r0, [r7, #16]
 8016f98:	f7ff ff14 	bl	8016dc4 <move_window>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d167      	bne.n	8017072 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	1c5a      	adds	r2, r3, #1
 8016fa6:	60fa      	str	r2, [r7, #12]
 8016fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016fac:	693a      	ldr	r2, [r7, #16]
 8016fae:	4413      	add	r3, r2
 8016fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016fb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	6a1a      	ldr	r2, [r3, #32]
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	0a5b      	lsrs	r3, r3, #9
 8016fbe:	4413      	add	r3, r2
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	6938      	ldr	r0, [r7, #16]
 8016fc4:	f7ff fefe 	bl	8016dc4 <move_window>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d153      	bne.n	8017076 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016fd4:	693a      	ldr	r2, [r7, #16]
 8016fd6:	4413      	add	r3, r2
 8016fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016fdc:	021b      	lsls	r3, r3, #8
 8016fde:	461a      	mov	r2, r3
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	4313      	orrs	r3, r2
 8016fe4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	f003 0301 	and.w	r3, r3, #1
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d002      	beq.n	8016ff6 <get_fat+0xbc>
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	091b      	lsrs	r3, r3, #4
 8016ff4:	e002      	b.n	8016ffc <get_fat+0xc2>
 8016ff6:	68bb      	ldr	r3, [r7, #8]
 8016ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016ffc:	617b      	str	r3, [r7, #20]
			break;
 8016ffe:	e03f      	b.n	8017080 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017000:	693b      	ldr	r3, [r7, #16]
 8017002:	6a1a      	ldr	r2, [r3, #32]
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	0a1b      	lsrs	r3, r3, #8
 8017008:	4413      	add	r3, r2
 801700a:	4619      	mov	r1, r3
 801700c:	6938      	ldr	r0, [r7, #16]
 801700e:	f7ff fed9 	bl	8016dc4 <move_window>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	d130      	bne.n	801707a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017018:	693b      	ldr	r3, [r7, #16]
 801701a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	005b      	lsls	r3, r3, #1
 8017022:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017026:	4413      	add	r3, r2
 8017028:	4618      	mov	r0, r3
 801702a:	f7ff fc57 	bl	80168dc <ld_word>
 801702e:	4603      	mov	r3, r0
 8017030:	617b      	str	r3, [r7, #20]
			break;
 8017032:	e025      	b.n	8017080 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	6a1a      	ldr	r2, [r3, #32]
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	09db      	lsrs	r3, r3, #7
 801703c:	4413      	add	r3, r2
 801703e:	4619      	mov	r1, r3
 8017040:	6938      	ldr	r0, [r7, #16]
 8017042:	f7ff febf 	bl	8016dc4 <move_window>
 8017046:	4603      	mov	r3, r0
 8017048:	2b00      	cmp	r3, #0
 801704a:	d118      	bne.n	801707e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	009b      	lsls	r3, r3, #2
 8017056:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801705a:	4413      	add	r3, r2
 801705c:	4618      	mov	r0, r3
 801705e:	f7ff fc55 	bl	801690c <ld_dword>
 8017062:	4603      	mov	r3, r0
 8017064:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017068:	617b      	str	r3, [r7, #20]
			break;
 801706a:	e009      	b.n	8017080 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801706c:	2301      	movs	r3, #1
 801706e:	617b      	str	r3, [r7, #20]
 8017070:	e006      	b.n	8017080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017072:	bf00      	nop
 8017074:	e004      	b.n	8017080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017076:	bf00      	nop
 8017078:	e002      	b.n	8017080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801707a:	bf00      	nop
 801707c:	e000      	b.n	8017080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801707e:	bf00      	nop
		}
	}

	return val;
 8017080:	697b      	ldr	r3, [r7, #20]
}
 8017082:	4618      	mov	r0, r3
 8017084:	3718      	adds	r7, #24
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}

0801708a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801708a:	b590      	push	{r4, r7, lr}
 801708c:	b089      	sub	sp, #36	; 0x24
 801708e:	af00      	add	r7, sp, #0
 8017090:	60f8      	str	r0, [r7, #12]
 8017092:	60b9      	str	r1, [r7, #8]
 8017094:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017096:	2302      	movs	r3, #2
 8017098:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	2b01      	cmp	r3, #1
 801709e:	f240 80d2 	bls.w	8017246 <put_fat+0x1bc>
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	695b      	ldr	r3, [r3, #20]
 80170a6:	68ba      	ldr	r2, [r7, #8]
 80170a8:	429a      	cmp	r2, r3
 80170aa:	f080 80cc 	bcs.w	8017246 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	2b03      	cmp	r3, #3
 80170b4:	f000 8096 	beq.w	80171e4 <put_fat+0x15a>
 80170b8:	2b03      	cmp	r3, #3
 80170ba:	f300 80cd 	bgt.w	8017258 <put_fat+0x1ce>
 80170be:	2b01      	cmp	r3, #1
 80170c0:	d002      	beq.n	80170c8 <put_fat+0x3e>
 80170c2:	2b02      	cmp	r3, #2
 80170c4:	d06e      	beq.n	80171a4 <put_fat+0x11a>
 80170c6:	e0c7      	b.n	8017258 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	61bb      	str	r3, [r7, #24]
 80170cc:	69bb      	ldr	r3, [r7, #24]
 80170ce:	085b      	lsrs	r3, r3, #1
 80170d0:	69ba      	ldr	r2, [r7, #24]
 80170d2:	4413      	add	r3, r2
 80170d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	6a1a      	ldr	r2, [r3, #32]
 80170da:	69bb      	ldr	r3, [r7, #24]
 80170dc:	0a5b      	lsrs	r3, r3, #9
 80170de:	4413      	add	r3, r2
 80170e0:	4619      	mov	r1, r3
 80170e2:	68f8      	ldr	r0, [r7, #12]
 80170e4:	f7ff fe6e 	bl	8016dc4 <move_window>
 80170e8:	4603      	mov	r3, r0
 80170ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80170ec:	7ffb      	ldrb	r3, [r7, #31]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	f040 80ab 	bne.w	801724a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80170fa:	69bb      	ldr	r3, [r7, #24]
 80170fc:	1c59      	adds	r1, r3, #1
 80170fe:	61b9      	str	r1, [r7, #24]
 8017100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017104:	4413      	add	r3, r2
 8017106:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	f003 0301 	and.w	r3, r3, #1
 801710e:	2b00      	cmp	r3, #0
 8017110:	d00d      	beq.n	801712e <put_fat+0xa4>
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	b25b      	sxtb	r3, r3
 8017118:	f003 030f 	and.w	r3, r3, #15
 801711c:	b25a      	sxtb	r2, r3
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	b2db      	uxtb	r3, r3
 8017122:	011b      	lsls	r3, r3, #4
 8017124:	b25b      	sxtb	r3, r3
 8017126:	4313      	orrs	r3, r2
 8017128:	b25b      	sxtb	r3, r3
 801712a:	b2db      	uxtb	r3, r3
 801712c:	e001      	b.n	8017132 <put_fat+0xa8>
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	b2db      	uxtb	r3, r3
 8017132:	697a      	ldr	r2, [r7, #20]
 8017134:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	2201      	movs	r2, #1
 801713a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	6a1a      	ldr	r2, [r3, #32]
 8017140:	69bb      	ldr	r3, [r7, #24]
 8017142:	0a5b      	lsrs	r3, r3, #9
 8017144:	4413      	add	r3, r2
 8017146:	4619      	mov	r1, r3
 8017148:	68f8      	ldr	r0, [r7, #12]
 801714a:	f7ff fe3b 	bl	8016dc4 <move_window>
 801714e:	4603      	mov	r3, r0
 8017150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017152:	7ffb      	ldrb	r3, [r7, #31]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d17a      	bne.n	801724e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801715e:	69bb      	ldr	r3, [r7, #24]
 8017160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017164:	4413      	add	r3, r2
 8017166:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017168:	68bb      	ldr	r3, [r7, #8]
 801716a:	f003 0301 	and.w	r3, r3, #1
 801716e:	2b00      	cmp	r3, #0
 8017170:	d003      	beq.n	801717a <put_fat+0xf0>
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	091b      	lsrs	r3, r3, #4
 8017176:	b2db      	uxtb	r3, r3
 8017178:	e00e      	b.n	8017198 <put_fat+0x10e>
 801717a:	697b      	ldr	r3, [r7, #20]
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	b25b      	sxtb	r3, r3
 8017180:	f023 030f 	bic.w	r3, r3, #15
 8017184:	b25a      	sxtb	r2, r3
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	0a1b      	lsrs	r3, r3, #8
 801718a:	b25b      	sxtb	r3, r3
 801718c:	f003 030f 	and.w	r3, r3, #15
 8017190:	b25b      	sxtb	r3, r3
 8017192:	4313      	orrs	r3, r2
 8017194:	b25b      	sxtb	r3, r3
 8017196:	b2db      	uxtb	r3, r3
 8017198:	697a      	ldr	r2, [r7, #20]
 801719a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	2201      	movs	r2, #1
 80171a0:	70da      	strb	r2, [r3, #3]
			break;
 80171a2:	e059      	b.n	8017258 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	6a1a      	ldr	r2, [r3, #32]
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	0a1b      	lsrs	r3, r3, #8
 80171ac:	4413      	add	r3, r2
 80171ae:	4619      	mov	r1, r3
 80171b0:	68f8      	ldr	r0, [r7, #12]
 80171b2:	f7ff fe07 	bl	8016dc4 <move_window>
 80171b6:	4603      	mov	r3, r0
 80171b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80171ba:	7ffb      	ldrb	r3, [r7, #31]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d148      	bne.n	8017252 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	005b      	lsls	r3, r3, #1
 80171ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80171ce:	4413      	add	r3, r2
 80171d0:	687a      	ldr	r2, [r7, #4]
 80171d2:	b292      	uxth	r2, r2
 80171d4:	4611      	mov	r1, r2
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7ff fbbb 	bl	8016952 <st_word>
			fs->wflag = 1;
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	2201      	movs	r2, #1
 80171e0:	70da      	strb	r2, [r3, #3]
			break;
 80171e2:	e039      	b.n	8017258 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	6a1a      	ldr	r2, [r3, #32]
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	09db      	lsrs	r3, r3, #7
 80171ec:	4413      	add	r3, r2
 80171ee:	4619      	mov	r1, r3
 80171f0:	68f8      	ldr	r0, [r7, #12]
 80171f2:	f7ff fde7 	bl	8016dc4 <move_window>
 80171f6:	4603      	mov	r3, r0
 80171f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80171fa:	7ffb      	ldrb	r3, [r7, #31]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d12a      	bne.n	8017256 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017214:	4413      	add	r3, r2
 8017216:	4618      	mov	r0, r3
 8017218:	f7ff fb78 	bl	801690c <ld_dword>
 801721c:	4603      	mov	r3, r0
 801721e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017222:	4323      	orrs	r3, r4
 8017224:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	009b      	lsls	r3, r3, #2
 8017230:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017234:	4413      	add	r3, r2
 8017236:	6879      	ldr	r1, [r7, #4]
 8017238:	4618      	mov	r0, r3
 801723a:	f7ff fba5 	bl	8016988 <st_dword>
			fs->wflag = 1;
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	2201      	movs	r2, #1
 8017242:	70da      	strb	r2, [r3, #3]
			break;
 8017244:	e008      	b.n	8017258 <put_fat+0x1ce>
		}
	}
 8017246:	bf00      	nop
 8017248:	e006      	b.n	8017258 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801724a:	bf00      	nop
 801724c:	e004      	b.n	8017258 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801724e:	bf00      	nop
 8017250:	e002      	b.n	8017258 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017252:	bf00      	nop
 8017254:	e000      	b.n	8017258 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017256:	bf00      	nop
	return res;
 8017258:	7ffb      	ldrb	r3, [r7, #31]
}
 801725a:	4618      	mov	r0, r3
 801725c:	3724      	adds	r7, #36	; 0x24
 801725e:	46bd      	mov	sp, r7
 8017260:	bd90      	pop	{r4, r7, pc}

08017262 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017262:	b580      	push	{r7, lr}
 8017264:	b088      	sub	sp, #32
 8017266:	af00      	add	r7, sp, #0
 8017268:	60f8      	str	r0, [r7, #12]
 801726a:	60b9      	str	r1, [r7, #8]
 801726c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801726e:	2300      	movs	r3, #0
 8017270:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	2b01      	cmp	r3, #1
 801727c:	d904      	bls.n	8017288 <remove_chain+0x26>
 801727e:	69bb      	ldr	r3, [r7, #24]
 8017280:	695b      	ldr	r3, [r3, #20]
 8017282:	68ba      	ldr	r2, [r7, #8]
 8017284:	429a      	cmp	r2, r3
 8017286:	d301      	bcc.n	801728c <remove_chain+0x2a>
 8017288:	2302      	movs	r3, #2
 801728a:	e04b      	b.n	8017324 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d00c      	beq.n	80172ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017296:	6879      	ldr	r1, [r7, #4]
 8017298:	69b8      	ldr	r0, [r7, #24]
 801729a:	f7ff fef6 	bl	801708a <put_fat>
 801729e:	4603      	mov	r3, r0
 80172a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80172a2:	7ffb      	ldrb	r3, [r7, #31]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d001      	beq.n	80172ac <remove_chain+0x4a>
 80172a8:	7ffb      	ldrb	r3, [r7, #31]
 80172aa:	e03b      	b.n	8017324 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80172ac:	68b9      	ldr	r1, [r7, #8]
 80172ae:	68f8      	ldr	r0, [r7, #12]
 80172b0:	f7ff fe43 	bl	8016f3a <get_fat>
 80172b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80172b6:	697b      	ldr	r3, [r7, #20]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d031      	beq.n	8017320 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	2b01      	cmp	r3, #1
 80172c0:	d101      	bne.n	80172c6 <remove_chain+0x64>
 80172c2:	2302      	movs	r3, #2
 80172c4:	e02e      	b.n	8017324 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80172c6:	697b      	ldr	r3, [r7, #20]
 80172c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80172cc:	d101      	bne.n	80172d2 <remove_chain+0x70>
 80172ce:	2301      	movs	r3, #1
 80172d0:	e028      	b.n	8017324 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80172d2:	2200      	movs	r2, #0
 80172d4:	68b9      	ldr	r1, [r7, #8]
 80172d6:	69b8      	ldr	r0, [r7, #24]
 80172d8:	f7ff fed7 	bl	801708a <put_fat>
 80172dc:	4603      	mov	r3, r0
 80172de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80172e0:	7ffb      	ldrb	r3, [r7, #31]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d001      	beq.n	80172ea <remove_chain+0x88>
 80172e6:	7ffb      	ldrb	r3, [r7, #31]
 80172e8:	e01c      	b.n	8017324 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80172ea:	69bb      	ldr	r3, [r7, #24]
 80172ec:	691a      	ldr	r2, [r3, #16]
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	695b      	ldr	r3, [r3, #20]
 80172f2:	3b02      	subs	r3, #2
 80172f4:	429a      	cmp	r2, r3
 80172f6:	d20b      	bcs.n	8017310 <remove_chain+0xae>
			fs->free_clst++;
 80172f8:	69bb      	ldr	r3, [r7, #24]
 80172fa:	691b      	ldr	r3, [r3, #16]
 80172fc:	1c5a      	adds	r2, r3, #1
 80172fe:	69bb      	ldr	r3, [r7, #24]
 8017300:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8017302:	69bb      	ldr	r3, [r7, #24]
 8017304:	791b      	ldrb	r3, [r3, #4]
 8017306:	f043 0301 	orr.w	r3, r3, #1
 801730a:	b2da      	uxtb	r2, r3
 801730c:	69bb      	ldr	r3, [r7, #24]
 801730e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017310:	697b      	ldr	r3, [r7, #20]
 8017312:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017314:	69bb      	ldr	r3, [r7, #24]
 8017316:	695b      	ldr	r3, [r3, #20]
 8017318:	68ba      	ldr	r2, [r7, #8]
 801731a:	429a      	cmp	r2, r3
 801731c:	d3c6      	bcc.n	80172ac <remove_chain+0x4a>
 801731e:	e000      	b.n	8017322 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017320:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017322:	2300      	movs	r3, #0
}
 8017324:	4618      	mov	r0, r3
 8017326:	3720      	adds	r7, #32
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b088      	sub	sp, #32
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d10d      	bne.n	801735e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017342:	693b      	ldr	r3, [r7, #16]
 8017344:	68db      	ldr	r3, [r3, #12]
 8017346:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017348:	69bb      	ldr	r3, [r7, #24]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d004      	beq.n	8017358 <create_chain+0x2c>
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	695b      	ldr	r3, [r3, #20]
 8017352:	69ba      	ldr	r2, [r7, #24]
 8017354:	429a      	cmp	r2, r3
 8017356:	d31b      	bcc.n	8017390 <create_chain+0x64>
 8017358:	2301      	movs	r3, #1
 801735a:	61bb      	str	r3, [r7, #24]
 801735c:	e018      	b.n	8017390 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801735e:	6839      	ldr	r1, [r7, #0]
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f7ff fdea 	bl	8016f3a <get_fat>
 8017366:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	2b01      	cmp	r3, #1
 801736c:	d801      	bhi.n	8017372 <create_chain+0x46>
 801736e:	2301      	movs	r3, #1
 8017370:	e070      	b.n	8017454 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017378:	d101      	bne.n	801737e <create_chain+0x52>
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	e06a      	b.n	8017454 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801737e:	693b      	ldr	r3, [r7, #16]
 8017380:	695b      	ldr	r3, [r3, #20]
 8017382:	68fa      	ldr	r2, [r7, #12]
 8017384:	429a      	cmp	r2, r3
 8017386:	d201      	bcs.n	801738c <create_chain+0x60>
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	e063      	b.n	8017454 <create_chain+0x128>
		scl = clst;
 801738c:	683b      	ldr	r3, [r7, #0]
 801738e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017390:	69bb      	ldr	r3, [r7, #24]
 8017392:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017394:	69fb      	ldr	r3, [r7, #28]
 8017396:	3301      	adds	r3, #1
 8017398:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	695b      	ldr	r3, [r3, #20]
 801739e:	69fa      	ldr	r2, [r7, #28]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d307      	bcc.n	80173b4 <create_chain+0x88>
				ncl = 2;
 80173a4:	2302      	movs	r3, #2
 80173a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80173a8:	69fa      	ldr	r2, [r7, #28]
 80173aa:	69bb      	ldr	r3, [r7, #24]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d901      	bls.n	80173b4 <create_chain+0x88>
 80173b0:	2300      	movs	r3, #0
 80173b2:	e04f      	b.n	8017454 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80173b4:	69f9      	ldr	r1, [r7, #28]
 80173b6:	6878      	ldr	r0, [r7, #4]
 80173b8:	f7ff fdbf 	bl	8016f3a <get_fat>
 80173bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d00e      	beq.n	80173e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	2b01      	cmp	r3, #1
 80173c8:	d003      	beq.n	80173d2 <create_chain+0xa6>
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173d0:	d101      	bne.n	80173d6 <create_chain+0xaa>
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	e03e      	b.n	8017454 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80173d6:	69fa      	ldr	r2, [r7, #28]
 80173d8:	69bb      	ldr	r3, [r7, #24]
 80173da:	429a      	cmp	r2, r3
 80173dc:	d1da      	bne.n	8017394 <create_chain+0x68>
 80173de:	2300      	movs	r3, #0
 80173e0:	e038      	b.n	8017454 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80173e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80173e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173e8:	69f9      	ldr	r1, [r7, #28]
 80173ea:	6938      	ldr	r0, [r7, #16]
 80173ec:	f7ff fe4d 	bl	801708a <put_fat>
 80173f0:	4603      	mov	r3, r0
 80173f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80173f4:	7dfb      	ldrb	r3, [r7, #23]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d109      	bne.n	801740e <create_chain+0xe2>
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d006      	beq.n	801740e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017400:	69fa      	ldr	r2, [r7, #28]
 8017402:	6839      	ldr	r1, [r7, #0]
 8017404:	6938      	ldr	r0, [r7, #16]
 8017406:	f7ff fe40 	bl	801708a <put_fat>
 801740a:	4603      	mov	r3, r0
 801740c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801740e:	7dfb      	ldrb	r3, [r7, #23]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d116      	bne.n	8017442 <create_chain+0x116>
		fs->last_clst = ncl;
 8017414:	693b      	ldr	r3, [r7, #16]
 8017416:	69fa      	ldr	r2, [r7, #28]
 8017418:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	691a      	ldr	r2, [r3, #16]
 801741e:	693b      	ldr	r3, [r7, #16]
 8017420:	695b      	ldr	r3, [r3, #20]
 8017422:	3b02      	subs	r3, #2
 8017424:	429a      	cmp	r2, r3
 8017426:	d804      	bhi.n	8017432 <create_chain+0x106>
 8017428:	693b      	ldr	r3, [r7, #16]
 801742a:	691b      	ldr	r3, [r3, #16]
 801742c:	1e5a      	subs	r2, r3, #1
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8017432:	693b      	ldr	r3, [r7, #16]
 8017434:	791b      	ldrb	r3, [r3, #4]
 8017436:	f043 0301 	orr.w	r3, r3, #1
 801743a:	b2da      	uxtb	r2, r3
 801743c:	693b      	ldr	r3, [r7, #16]
 801743e:	711a      	strb	r2, [r3, #4]
 8017440:	e007      	b.n	8017452 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017442:	7dfb      	ldrb	r3, [r7, #23]
 8017444:	2b01      	cmp	r3, #1
 8017446:	d102      	bne.n	801744e <create_chain+0x122>
 8017448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801744c:	e000      	b.n	8017450 <create_chain+0x124>
 801744e:	2301      	movs	r3, #1
 8017450:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017452:	69fb      	ldr	r3, [r7, #28]
}
 8017454:	4618      	mov	r0, r3
 8017456:	3720      	adds	r7, #32
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}

0801745c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801745c:	b480      	push	{r7}
 801745e:	b087      	sub	sp, #28
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017470:	3304      	adds	r3, #4
 8017472:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	0a5b      	lsrs	r3, r3, #9
 8017478:	68fa      	ldr	r2, [r7, #12]
 801747a:	8952      	ldrh	r2, [r2, #10]
 801747c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017480:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	1d1a      	adds	r2, r3, #4
 8017486:	613a      	str	r2, [r7, #16]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d101      	bne.n	8017496 <clmt_clust+0x3a>
 8017492:	2300      	movs	r3, #0
 8017494:	e010      	b.n	80174b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8017496:	697a      	ldr	r2, [r7, #20]
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	429a      	cmp	r2, r3
 801749c:	d307      	bcc.n	80174ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801749e:	697a      	ldr	r2, [r7, #20]
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	1ad3      	subs	r3, r2, r3
 80174a4:	617b      	str	r3, [r7, #20]
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	3304      	adds	r3, #4
 80174aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80174ac:	e7e9      	b.n	8017482 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80174ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	681a      	ldr	r2, [r3, #0]
 80174b4:	697b      	ldr	r3, [r7, #20]
 80174b6:	4413      	add	r3, r2
}
 80174b8:	4618      	mov	r0, r3
 80174ba:	371c      	adds	r7, #28
 80174bc:	46bd      	mov	sp, r7
 80174be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c2:	4770      	bx	lr

080174c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b086      	sub	sp, #24
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80174da:	d204      	bcs.n	80174e6 <dir_sdi+0x22>
 80174dc:	683b      	ldr	r3, [r7, #0]
 80174de:	f003 031f 	and.w	r3, r3, #31
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d001      	beq.n	80174ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80174e6:	2302      	movs	r3, #2
 80174e8:	e063      	b.n	80175b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	683a      	ldr	r2, [r7, #0]
 80174ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	689b      	ldr	r3, [r3, #8]
 80174f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d106      	bne.n	801750a <dir_sdi+0x46>
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	2b02      	cmp	r3, #2
 8017502:	d902      	bls.n	801750a <dir_sdi+0x46>
		clst = fs->dirbase;
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017508:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801750a:	697b      	ldr	r3, [r7, #20]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d10c      	bne.n	801752a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	095b      	lsrs	r3, r3, #5
 8017514:	693a      	ldr	r2, [r7, #16]
 8017516:	8912      	ldrh	r2, [r2, #8]
 8017518:	4293      	cmp	r3, r2
 801751a:	d301      	bcc.n	8017520 <dir_sdi+0x5c>
 801751c:	2302      	movs	r3, #2
 801751e:	e048      	b.n	80175b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017520:	693b      	ldr	r3, [r7, #16]
 8017522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	61da      	str	r2, [r3, #28]
 8017528:	e029      	b.n	801757e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801752a:	693b      	ldr	r3, [r7, #16]
 801752c:	895b      	ldrh	r3, [r3, #10]
 801752e:	025b      	lsls	r3, r3, #9
 8017530:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017532:	e019      	b.n	8017568 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	6979      	ldr	r1, [r7, #20]
 8017538:	4618      	mov	r0, r3
 801753a:	f7ff fcfe 	bl	8016f3a <get_fat>
 801753e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017540:	697b      	ldr	r3, [r7, #20]
 8017542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017546:	d101      	bne.n	801754c <dir_sdi+0x88>
 8017548:	2301      	movs	r3, #1
 801754a:	e032      	b.n	80175b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801754c:	697b      	ldr	r3, [r7, #20]
 801754e:	2b01      	cmp	r3, #1
 8017550:	d904      	bls.n	801755c <dir_sdi+0x98>
 8017552:	693b      	ldr	r3, [r7, #16]
 8017554:	695b      	ldr	r3, [r3, #20]
 8017556:	697a      	ldr	r2, [r7, #20]
 8017558:	429a      	cmp	r2, r3
 801755a:	d301      	bcc.n	8017560 <dir_sdi+0x9c>
 801755c:	2302      	movs	r3, #2
 801755e:	e028      	b.n	80175b2 <dir_sdi+0xee>
			ofs -= csz;
 8017560:	683a      	ldr	r2, [r7, #0]
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	1ad3      	subs	r3, r2, r3
 8017566:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017568:	683a      	ldr	r2, [r7, #0]
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	429a      	cmp	r2, r3
 801756e:	d2e1      	bcs.n	8017534 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017570:	6979      	ldr	r1, [r7, #20]
 8017572:	6938      	ldr	r0, [r7, #16]
 8017574:	f7ff fcc2 	bl	8016efc <clust2sect>
 8017578:	4602      	mov	r2, r0
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	697a      	ldr	r2, [r7, #20]
 8017582:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	69db      	ldr	r3, [r3, #28]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d101      	bne.n	8017590 <dir_sdi+0xcc>
 801758c:	2302      	movs	r3, #2
 801758e:	e010      	b.n	80175b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	69da      	ldr	r2, [r3, #28]
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	0a5b      	lsrs	r3, r3, #9
 8017598:	441a      	add	r2, r3
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175aa:	441a      	add	r2, r3
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80175b0:	2300      	movs	r3, #0
}
 80175b2:	4618      	mov	r0, r3
 80175b4:	3718      	adds	r7, #24
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}

080175ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80175ba:	b580      	push	{r7, lr}
 80175bc:	b086      	sub	sp, #24
 80175be:	af00      	add	r7, sp, #0
 80175c0:	6078      	str	r0, [r7, #4]
 80175c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	695b      	ldr	r3, [r3, #20]
 80175ce:	3320      	adds	r3, #32
 80175d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	69db      	ldr	r3, [r3, #28]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d003      	beq.n	80175e2 <dir_next+0x28>
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80175e0:	d301      	bcc.n	80175e6 <dir_next+0x2c>
 80175e2:	2304      	movs	r3, #4
 80175e4:	e0aa      	b.n	801773c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80175e6:	68bb      	ldr	r3, [r7, #8]
 80175e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	f040 8098 	bne.w	8017722 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	69db      	ldr	r3, [r3, #28]
 80175f6:	1c5a      	adds	r2, r3, #1
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	699b      	ldr	r3, [r3, #24]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d10b      	bne.n	801761c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	095b      	lsrs	r3, r3, #5
 8017608:	68fa      	ldr	r2, [r7, #12]
 801760a:	8912      	ldrh	r2, [r2, #8]
 801760c:	4293      	cmp	r3, r2
 801760e:	f0c0 8088 	bcc.w	8017722 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	2200      	movs	r2, #0
 8017616:	61da      	str	r2, [r3, #28]
 8017618:	2304      	movs	r3, #4
 801761a:	e08f      	b.n	801773c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801761c:	68bb      	ldr	r3, [r7, #8]
 801761e:	0a5b      	lsrs	r3, r3, #9
 8017620:	68fa      	ldr	r2, [r7, #12]
 8017622:	8952      	ldrh	r2, [r2, #10]
 8017624:	3a01      	subs	r2, #1
 8017626:	4013      	ands	r3, r2
 8017628:	2b00      	cmp	r3, #0
 801762a:	d17a      	bne.n	8017722 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801762c:	687a      	ldr	r2, [r7, #4]
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	699b      	ldr	r3, [r3, #24]
 8017632:	4619      	mov	r1, r3
 8017634:	4610      	mov	r0, r2
 8017636:	f7ff fc80 	bl	8016f3a <get_fat>
 801763a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	2b01      	cmp	r3, #1
 8017640:	d801      	bhi.n	8017646 <dir_next+0x8c>
 8017642:	2302      	movs	r3, #2
 8017644:	e07a      	b.n	801773c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017646:	697b      	ldr	r3, [r7, #20]
 8017648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801764c:	d101      	bne.n	8017652 <dir_next+0x98>
 801764e:	2301      	movs	r3, #1
 8017650:	e074      	b.n	801773c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	695b      	ldr	r3, [r3, #20]
 8017656:	697a      	ldr	r2, [r7, #20]
 8017658:	429a      	cmp	r2, r3
 801765a:	d358      	bcc.n	801770e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d104      	bne.n	801766c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	2200      	movs	r2, #0
 8017666:	61da      	str	r2, [r3, #28]
 8017668:	2304      	movs	r3, #4
 801766a:	e067      	b.n	801773c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	699b      	ldr	r3, [r3, #24]
 8017672:	4619      	mov	r1, r3
 8017674:	4610      	mov	r0, r2
 8017676:	f7ff fe59 	bl	801732c <create_chain>
 801767a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d101      	bne.n	8017686 <dir_next+0xcc>
 8017682:	2307      	movs	r3, #7
 8017684:	e05a      	b.n	801773c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	2b01      	cmp	r3, #1
 801768a:	d101      	bne.n	8017690 <dir_next+0xd6>
 801768c:	2302      	movs	r3, #2
 801768e:	e055      	b.n	801773c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017696:	d101      	bne.n	801769c <dir_next+0xe2>
 8017698:	2301      	movs	r3, #1
 801769a:	e04f      	b.n	801773c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801769c:	68f8      	ldr	r0, [r7, #12]
 801769e:	f7ff fb4d 	bl	8016d3c <sync_window>
 80176a2:	4603      	mov	r3, r0
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d001      	beq.n	80176ac <dir_next+0xf2>
 80176a8:	2301      	movs	r3, #1
 80176aa:	e047      	b.n	801773c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	3330      	adds	r3, #48	; 0x30
 80176b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176b4:	2100      	movs	r1, #0
 80176b6:	4618      	mov	r0, r3
 80176b8:	f7ff f9b3 	bl	8016a22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80176bc:	2300      	movs	r3, #0
 80176be:	613b      	str	r3, [r7, #16]
 80176c0:	6979      	ldr	r1, [r7, #20]
 80176c2:	68f8      	ldr	r0, [r7, #12]
 80176c4:	f7ff fc1a 	bl	8016efc <clust2sect>
 80176c8:	4602      	mov	r2, r0
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80176ce:	e012      	b.n	80176f6 <dir_next+0x13c>
						fs->wflag = 1;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	2201      	movs	r2, #1
 80176d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80176d6:	68f8      	ldr	r0, [r7, #12]
 80176d8:	f7ff fb30 	bl	8016d3c <sync_window>
 80176dc:	4603      	mov	r3, r0
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d001      	beq.n	80176e6 <dir_next+0x12c>
 80176e2:	2301      	movs	r3, #1
 80176e4:	e02a      	b.n	801773c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80176e6:	693b      	ldr	r3, [r7, #16]
 80176e8:	3301      	adds	r3, #1
 80176ea:	613b      	str	r3, [r7, #16]
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176f0:	1c5a      	adds	r2, r3, #1
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	895b      	ldrh	r3, [r3, #10]
 80176fa:	461a      	mov	r2, r3
 80176fc:	693b      	ldr	r3, [r7, #16]
 80176fe:	4293      	cmp	r3, r2
 8017700:	d3e6      	bcc.n	80176d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	1ad2      	subs	r2, r2, r3
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	697a      	ldr	r2, [r7, #20]
 8017712:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017714:	6979      	ldr	r1, [r7, #20]
 8017716:	68f8      	ldr	r0, [r7, #12]
 8017718:	f7ff fbf0 	bl	8016efc <clust2sect>
 801771c:	4602      	mov	r2, r0
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	68ba      	ldr	r2, [r7, #8]
 8017726:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017734:	441a      	add	r2, r3
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801773a:	2300      	movs	r3, #0
}
 801773c:	4618      	mov	r0, r3
 801773e:	3718      	adds	r7, #24
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b086      	sub	sp, #24
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017754:	2100      	movs	r1, #0
 8017756:	6878      	ldr	r0, [r7, #4]
 8017758:	f7ff feb4 	bl	80174c4 <dir_sdi>
 801775c:	4603      	mov	r3, r0
 801775e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017760:	7dfb      	ldrb	r3, [r7, #23]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d12b      	bne.n	80177be <dir_alloc+0x7a>
		n = 0;
 8017766:	2300      	movs	r3, #0
 8017768:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	69db      	ldr	r3, [r3, #28]
 801776e:	4619      	mov	r1, r3
 8017770:	68f8      	ldr	r0, [r7, #12]
 8017772:	f7ff fb27 	bl	8016dc4 <move_window>
 8017776:	4603      	mov	r3, r0
 8017778:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801777a:	7dfb      	ldrb	r3, [r7, #23]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d11d      	bne.n	80177bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	6a1b      	ldr	r3, [r3, #32]
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	2be5      	cmp	r3, #229	; 0xe5
 8017788:	d004      	beq.n	8017794 <dir_alloc+0x50>
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	6a1b      	ldr	r3, [r3, #32]
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d107      	bne.n	80177a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	3301      	adds	r3, #1
 8017798:	613b      	str	r3, [r7, #16]
 801779a:	693a      	ldr	r2, [r7, #16]
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	429a      	cmp	r2, r3
 80177a0:	d102      	bne.n	80177a8 <dir_alloc+0x64>
 80177a2:	e00c      	b.n	80177be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80177a4:	2300      	movs	r3, #0
 80177a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80177a8:	2101      	movs	r1, #1
 80177aa:	6878      	ldr	r0, [r7, #4]
 80177ac:	f7ff ff05 	bl	80175ba <dir_next>
 80177b0:	4603      	mov	r3, r0
 80177b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80177b4:	7dfb      	ldrb	r3, [r7, #23]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d0d7      	beq.n	801776a <dir_alloc+0x26>
 80177ba:	e000      	b.n	80177be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80177bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80177be:	7dfb      	ldrb	r3, [r7, #23]
 80177c0:	2b04      	cmp	r3, #4
 80177c2:	d101      	bne.n	80177c8 <dir_alloc+0x84>
 80177c4:	2307      	movs	r3, #7
 80177c6:	75fb      	strb	r3, [r7, #23]
	return res;
 80177c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	3718      	adds	r7, #24
 80177ce:	46bd      	mov	sp, r7
 80177d0:	bd80      	pop	{r7, pc}

080177d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80177d2:	b580      	push	{r7, lr}
 80177d4:	b084      	sub	sp, #16
 80177d6:	af00      	add	r7, sp, #0
 80177d8:	6078      	str	r0, [r7, #4]
 80177da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	331a      	adds	r3, #26
 80177e0:	4618      	mov	r0, r3
 80177e2:	f7ff f87b 	bl	80168dc <ld_word>
 80177e6:	4603      	mov	r3, r0
 80177e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	2b03      	cmp	r3, #3
 80177f0:	d109      	bne.n	8017806 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80177f2:	683b      	ldr	r3, [r7, #0]
 80177f4:	3314      	adds	r3, #20
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7ff f870 	bl	80168dc <ld_word>
 80177fc:	4603      	mov	r3, r0
 80177fe:	041b      	lsls	r3, r3, #16
 8017800:	68fa      	ldr	r2, [r7, #12]
 8017802:	4313      	orrs	r3, r2
 8017804:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017806:	68fb      	ldr	r3, [r7, #12]
}
 8017808:	4618      	mov	r0, r3
 801780a:	3710      	adds	r7, #16
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}

08017810 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b084      	sub	sp, #16
 8017814:	af00      	add	r7, sp, #0
 8017816:	60f8      	str	r0, [r7, #12]
 8017818:	60b9      	str	r1, [r7, #8]
 801781a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	331a      	adds	r3, #26
 8017820:	687a      	ldr	r2, [r7, #4]
 8017822:	b292      	uxth	r2, r2
 8017824:	4611      	mov	r1, r2
 8017826:	4618      	mov	r0, r3
 8017828:	f7ff f893 	bl	8016952 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	2b03      	cmp	r3, #3
 8017832:	d109      	bne.n	8017848 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	f103 0214 	add.w	r2, r3, #20
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	0c1b      	lsrs	r3, r3, #16
 801783e:	b29b      	uxth	r3, r3
 8017840:	4619      	mov	r1, r3
 8017842:	4610      	mov	r0, r2
 8017844:	f7ff f885 	bl	8016952 <st_word>
	}
}
 8017848:	bf00      	nop
 801784a:	3710      	adds	r7, #16
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}

08017850 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017850:	b580      	push	{r7, lr}
 8017852:	b086      	sub	sp, #24
 8017854:	af00      	add	r7, sp, #0
 8017856:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801785e:	2100      	movs	r1, #0
 8017860:	6878      	ldr	r0, [r7, #4]
 8017862:	f7ff fe2f 	bl	80174c4 <dir_sdi>
 8017866:	4603      	mov	r3, r0
 8017868:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801786a:	7dfb      	ldrb	r3, [r7, #23]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d001      	beq.n	8017874 <dir_find+0x24>
 8017870:	7dfb      	ldrb	r3, [r7, #23]
 8017872:	e03e      	b.n	80178f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	69db      	ldr	r3, [r3, #28]
 8017878:	4619      	mov	r1, r3
 801787a:	6938      	ldr	r0, [r7, #16]
 801787c:	f7ff faa2 	bl	8016dc4 <move_window>
 8017880:	4603      	mov	r3, r0
 8017882:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017884:	7dfb      	ldrb	r3, [r7, #23]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d12f      	bne.n	80178ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	6a1b      	ldr	r3, [r3, #32]
 801788e:	781b      	ldrb	r3, [r3, #0]
 8017890:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017892:	7bfb      	ldrb	r3, [r7, #15]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d102      	bne.n	801789e <dir_find+0x4e>
 8017898:	2304      	movs	r3, #4
 801789a:	75fb      	strb	r3, [r7, #23]
 801789c:	e028      	b.n	80178f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	6a1b      	ldr	r3, [r3, #32]
 80178a2:	330b      	adds	r3, #11
 80178a4:	781b      	ldrb	r3, [r3, #0]
 80178a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80178aa:	b2da      	uxtb	r2, r3
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	6a1b      	ldr	r3, [r3, #32]
 80178b4:	330b      	adds	r3, #11
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	f003 0308 	and.w	r3, r3, #8
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d10a      	bne.n	80178d6 <dir_find+0x86>
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	6a18      	ldr	r0, [r3, #32]
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	3324      	adds	r3, #36	; 0x24
 80178c8:	220b      	movs	r2, #11
 80178ca:	4619      	mov	r1, r3
 80178cc:	f7ff f8c4 	bl	8016a58 <mem_cmp>
 80178d0:	4603      	mov	r3, r0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d00b      	beq.n	80178ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80178d6:	2100      	movs	r1, #0
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f7ff fe6e 	bl	80175ba <dir_next>
 80178de:	4603      	mov	r3, r0
 80178e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80178e2:	7dfb      	ldrb	r3, [r7, #23]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d0c5      	beq.n	8017874 <dir_find+0x24>
 80178e8:	e002      	b.n	80178f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80178ea:	bf00      	nop
 80178ec:	e000      	b.n	80178f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80178ee:	bf00      	nop

	return res;
 80178f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	3718      	adds	r7, #24
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}

080178fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80178fa:	b580      	push	{r7, lr}
 80178fc:	b084      	sub	sp, #16
 80178fe:	af00      	add	r7, sp, #0
 8017900:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8017908:	2101      	movs	r1, #1
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f7ff ff1a 	bl	8017744 <dir_alloc>
 8017910:	4603      	mov	r3, r0
 8017912:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017914:	7bfb      	ldrb	r3, [r7, #15]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d11c      	bne.n	8017954 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	69db      	ldr	r3, [r3, #28]
 801791e:	4619      	mov	r1, r3
 8017920:	68b8      	ldr	r0, [r7, #8]
 8017922:	f7ff fa4f 	bl	8016dc4 <move_window>
 8017926:	4603      	mov	r3, r0
 8017928:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801792a:	7bfb      	ldrb	r3, [r7, #15]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d111      	bne.n	8017954 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6a1b      	ldr	r3, [r3, #32]
 8017934:	2220      	movs	r2, #32
 8017936:	2100      	movs	r1, #0
 8017938:	4618      	mov	r0, r3
 801793a:	f7ff f872 	bl	8016a22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	6a18      	ldr	r0, [r3, #32]
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	3324      	adds	r3, #36	; 0x24
 8017946:	220b      	movs	r2, #11
 8017948:	4619      	mov	r1, r3
 801794a:	f7ff f849 	bl	80169e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	2201      	movs	r2, #1
 8017952:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017954:	7bfb      	ldrb	r3, [r7, #15]
}
 8017956:	4618      	mov	r0, r3
 8017958:	3710      	adds	r7, #16
 801795a:	46bd      	mov	sp, r7
 801795c:	bd80      	pop	{r7, pc}
	...

08017960 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b088      	sub	sp, #32
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
 8017968:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	60fb      	str	r3, [r7, #12]
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	3324      	adds	r3, #36	; 0x24
 8017974:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017976:	220b      	movs	r2, #11
 8017978:	2120      	movs	r1, #32
 801797a:	68b8      	ldr	r0, [r7, #8]
 801797c:	f7ff f851 	bl	8016a22 <mem_set>
	si = i = 0; ni = 8;
 8017980:	2300      	movs	r3, #0
 8017982:	613b      	str	r3, [r7, #16]
 8017984:	693b      	ldr	r3, [r7, #16]
 8017986:	61fb      	str	r3, [r7, #28]
 8017988:	2308      	movs	r3, #8
 801798a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801798c:	69fb      	ldr	r3, [r7, #28]
 801798e:	1c5a      	adds	r2, r3, #1
 8017990:	61fa      	str	r2, [r7, #28]
 8017992:	68fa      	ldr	r2, [r7, #12]
 8017994:	4413      	add	r3, r2
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801799a:	7efb      	ldrb	r3, [r7, #27]
 801799c:	2b20      	cmp	r3, #32
 801799e:	d94e      	bls.n	8017a3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80179a0:	7efb      	ldrb	r3, [r7, #27]
 80179a2:	2b2f      	cmp	r3, #47	; 0x2f
 80179a4:	d006      	beq.n	80179b4 <create_name+0x54>
 80179a6:	7efb      	ldrb	r3, [r7, #27]
 80179a8:	2b5c      	cmp	r3, #92	; 0x5c
 80179aa:	d110      	bne.n	80179ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80179ac:	e002      	b.n	80179b4 <create_name+0x54>
 80179ae:	69fb      	ldr	r3, [r7, #28]
 80179b0:	3301      	adds	r3, #1
 80179b2:	61fb      	str	r3, [r7, #28]
 80179b4:	68fa      	ldr	r2, [r7, #12]
 80179b6:	69fb      	ldr	r3, [r7, #28]
 80179b8:	4413      	add	r3, r2
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	2b2f      	cmp	r3, #47	; 0x2f
 80179be:	d0f6      	beq.n	80179ae <create_name+0x4e>
 80179c0:	68fa      	ldr	r2, [r7, #12]
 80179c2:	69fb      	ldr	r3, [r7, #28]
 80179c4:	4413      	add	r3, r2
 80179c6:	781b      	ldrb	r3, [r3, #0]
 80179c8:	2b5c      	cmp	r3, #92	; 0x5c
 80179ca:	d0f0      	beq.n	80179ae <create_name+0x4e>
			break;
 80179cc:	e038      	b.n	8017a40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80179ce:	7efb      	ldrb	r3, [r7, #27]
 80179d0:	2b2e      	cmp	r3, #46	; 0x2e
 80179d2:	d003      	beq.n	80179dc <create_name+0x7c>
 80179d4:	693a      	ldr	r2, [r7, #16]
 80179d6:	697b      	ldr	r3, [r7, #20]
 80179d8:	429a      	cmp	r2, r3
 80179da:	d30c      	bcc.n	80179f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80179dc:	697b      	ldr	r3, [r7, #20]
 80179de:	2b0b      	cmp	r3, #11
 80179e0:	d002      	beq.n	80179e8 <create_name+0x88>
 80179e2:	7efb      	ldrb	r3, [r7, #27]
 80179e4:	2b2e      	cmp	r3, #46	; 0x2e
 80179e6:	d001      	beq.n	80179ec <create_name+0x8c>
 80179e8:	2306      	movs	r3, #6
 80179ea:	e044      	b.n	8017a76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80179ec:	2308      	movs	r3, #8
 80179ee:	613b      	str	r3, [r7, #16]
 80179f0:	230b      	movs	r3, #11
 80179f2:	617b      	str	r3, [r7, #20]
			continue;
 80179f4:	e022      	b.n	8017a3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80179f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	da04      	bge.n	8017a08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80179fe:	7efb      	ldrb	r3, [r7, #27]
 8017a00:	3b80      	subs	r3, #128	; 0x80
 8017a02:	4a1f      	ldr	r2, [pc, #124]	; (8017a80 <create_name+0x120>)
 8017a04:	5cd3      	ldrb	r3, [r2, r3]
 8017a06:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8017a08:	7efb      	ldrb	r3, [r7, #27]
 8017a0a:	4619      	mov	r1, r3
 8017a0c:	481d      	ldr	r0, [pc, #116]	; (8017a84 <create_name+0x124>)
 8017a0e:	f7ff f84a 	bl	8016aa6 <chk_chr>
 8017a12:	4603      	mov	r3, r0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d001      	beq.n	8017a1c <create_name+0xbc>
 8017a18:	2306      	movs	r3, #6
 8017a1a:	e02c      	b.n	8017a76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017a1c:	7efb      	ldrb	r3, [r7, #27]
 8017a1e:	2b60      	cmp	r3, #96	; 0x60
 8017a20:	d905      	bls.n	8017a2e <create_name+0xce>
 8017a22:	7efb      	ldrb	r3, [r7, #27]
 8017a24:	2b7a      	cmp	r3, #122	; 0x7a
 8017a26:	d802      	bhi.n	8017a2e <create_name+0xce>
 8017a28:	7efb      	ldrb	r3, [r7, #27]
 8017a2a:	3b20      	subs	r3, #32
 8017a2c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	1c5a      	adds	r2, r3, #1
 8017a32:	613a      	str	r2, [r7, #16]
 8017a34:	68ba      	ldr	r2, [r7, #8]
 8017a36:	4413      	add	r3, r2
 8017a38:	7efa      	ldrb	r2, [r7, #27]
 8017a3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017a3c:	e7a6      	b.n	801798c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017a3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017a40:	68fa      	ldr	r2, [r7, #12]
 8017a42:	69fb      	ldr	r3, [r7, #28]
 8017a44:	441a      	add	r2, r3
 8017a46:	683b      	ldr	r3, [r7, #0]
 8017a48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d101      	bne.n	8017a54 <create_name+0xf4>
 8017a50:	2306      	movs	r3, #6
 8017a52:	e010      	b.n	8017a76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	2be5      	cmp	r3, #229	; 0xe5
 8017a5a:	d102      	bne.n	8017a62 <create_name+0x102>
 8017a5c:	68bb      	ldr	r3, [r7, #8]
 8017a5e:	2205      	movs	r2, #5
 8017a60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017a62:	7efb      	ldrb	r3, [r7, #27]
 8017a64:	2b20      	cmp	r3, #32
 8017a66:	d801      	bhi.n	8017a6c <create_name+0x10c>
 8017a68:	2204      	movs	r2, #4
 8017a6a:	e000      	b.n	8017a6e <create_name+0x10e>
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	68bb      	ldr	r3, [r7, #8]
 8017a70:	330b      	adds	r3, #11
 8017a72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017a74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017a76:	4618      	mov	r0, r3
 8017a78:	3720      	adds	r7, #32
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}
 8017a7e:	bf00      	nop
 8017a80:	0801cc74 	.word	0x0801cc74
 8017a84:	0801c964 	.word	0x0801c964

08017a88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b086      	sub	sp, #24
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
 8017a90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017a96:	693b      	ldr	r3, [r7, #16]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017a9c:	e002      	b.n	8017aa4 <follow_path+0x1c>
 8017a9e:	683b      	ldr	r3, [r7, #0]
 8017aa0:	3301      	adds	r3, #1
 8017aa2:	603b      	str	r3, [r7, #0]
 8017aa4:	683b      	ldr	r3, [r7, #0]
 8017aa6:	781b      	ldrb	r3, [r3, #0]
 8017aa8:	2b2f      	cmp	r3, #47	; 0x2f
 8017aaa:	d0f8      	beq.n	8017a9e <follow_path+0x16>
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	781b      	ldrb	r3, [r3, #0]
 8017ab0:	2b5c      	cmp	r3, #92	; 0x5c
 8017ab2:	d0f4      	beq.n	8017a9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017ab4:	693b      	ldr	r3, [r7, #16]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017aba:	683b      	ldr	r3, [r7, #0]
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	2b1f      	cmp	r3, #31
 8017ac0:	d80a      	bhi.n	8017ad8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2280      	movs	r2, #128	; 0x80
 8017ac6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017aca:	2100      	movs	r1, #0
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f7ff fcf9 	bl	80174c4 <dir_sdi>
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	75fb      	strb	r3, [r7, #23]
 8017ad6:	e043      	b.n	8017b60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017ad8:	463b      	mov	r3, r7
 8017ada:	4619      	mov	r1, r3
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f7ff ff3f 	bl	8017960 <create_name>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017ae6:	7dfb      	ldrb	r3, [r7, #23]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d134      	bne.n	8017b56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017aec:	6878      	ldr	r0, [r7, #4]
 8017aee:	f7ff feaf 	bl	8017850 <dir_find>
 8017af2:	4603      	mov	r3, r0
 8017af4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017afc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017afe:	7dfb      	ldrb	r3, [r7, #23]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d00a      	beq.n	8017b1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017b04:	7dfb      	ldrb	r3, [r7, #23]
 8017b06:	2b04      	cmp	r3, #4
 8017b08:	d127      	bne.n	8017b5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017b0a:	7afb      	ldrb	r3, [r7, #11]
 8017b0c:	f003 0304 	and.w	r3, r3, #4
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d122      	bne.n	8017b5a <follow_path+0xd2>
 8017b14:	2305      	movs	r3, #5
 8017b16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017b18:	e01f      	b.n	8017b5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017b1a:	7afb      	ldrb	r3, [r7, #11]
 8017b1c:	f003 0304 	and.w	r3, r3, #4
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d11c      	bne.n	8017b5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017b24:	693b      	ldr	r3, [r7, #16]
 8017b26:	799b      	ldrb	r3, [r3, #6]
 8017b28:	f003 0310 	and.w	r3, r3, #16
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d102      	bne.n	8017b36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017b30:	2305      	movs	r3, #5
 8017b32:	75fb      	strb	r3, [r7, #23]
 8017b34:	e014      	b.n	8017b60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	695b      	ldr	r3, [r3, #20]
 8017b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017b44:	4413      	add	r3, r2
 8017b46:	4619      	mov	r1, r3
 8017b48:	68f8      	ldr	r0, [r7, #12]
 8017b4a:	f7ff fe42 	bl	80177d2 <ld_clust>
 8017b4e:	4602      	mov	r2, r0
 8017b50:	693b      	ldr	r3, [r7, #16]
 8017b52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017b54:	e7c0      	b.n	8017ad8 <follow_path+0x50>
			if (res != FR_OK) break;
 8017b56:	bf00      	nop
 8017b58:	e002      	b.n	8017b60 <follow_path+0xd8>
				break;
 8017b5a:	bf00      	nop
 8017b5c:	e000      	b.n	8017b60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017b5e:	bf00      	nop
			}
		}
	}

	return res;
 8017b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	3718      	adds	r7, #24
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017b6a:	b480      	push	{r7}
 8017b6c:	b087      	sub	sp, #28
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8017b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d031      	beq.n	8017be4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	617b      	str	r3, [r7, #20]
 8017b86:	e002      	b.n	8017b8e <get_ldnumber+0x24>
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	3301      	adds	r3, #1
 8017b8c:	617b      	str	r3, [r7, #20]
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	781b      	ldrb	r3, [r3, #0]
 8017b92:	2b20      	cmp	r3, #32
 8017b94:	d903      	bls.n	8017b9e <get_ldnumber+0x34>
 8017b96:	697b      	ldr	r3, [r7, #20]
 8017b98:	781b      	ldrb	r3, [r3, #0]
 8017b9a:	2b3a      	cmp	r3, #58	; 0x3a
 8017b9c:	d1f4      	bne.n	8017b88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	781b      	ldrb	r3, [r3, #0]
 8017ba2:	2b3a      	cmp	r3, #58	; 0x3a
 8017ba4:	d11c      	bne.n	8017be0 <get_ldnumber+0x76>
			tp = *path;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	1c5a      	adds	r2, r3, #1
 8017bb0:	60fa      	str	r2, [r7, #12]
 8017bb2:	781b      	ldrb	r3, [r3, #0]
 8017bb4:	3b30      	subs	r3, #48	; 0x30
 8017bb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017bb8:	68bb      	ldr	r3, [r7, #8]
 8017bba:	2b09      	cmp	r3, #9
 8017bbc:	d80e      	bhi.n	8017bdc <get_ldnumber+0x72>
 8017bbe:	68fa      	ldr	r2, [r7, #12]
 8017bc0:	697b      	ldr	r3, [r7, #20]
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d10a      	bne.n	8017bdc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d107      	bne.n	8017bdc <get_ldnumber+0x72>
					vol = (int)i;
 8017bcc:	68bb      	ldr	r3, [r7, #8]
 8017bce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017bd0:	697b      	ldr	r3, [r7, #20]
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	617b      	str	r3, [r7, #20]
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	697a      	ldr	r2, [r7, #20]
 8017bda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017bdc:	693b      	ldr	r3, [r7, #16]
 8017bde:	e002      	b.n	8017be6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017be0:	2300      	movs	r3, #0
 8017be2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017be4:	693b      	ldr	r3, [r7, #16]
}
 8017be6:	4618      	mov	r0, r3
 8017be8:	371c      	adds	r7, #28
 8017bea:	46bd      	mov	sp, r7
 8017bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf0:	4770      	bx	lr
	...

08017bf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b082      	sub	sp, #8
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	2200      	movs	r2, #0
 8017c02:	70da      	strb	r2, [r3, #3]
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017c0c:	6839      	ldr	r1, [r7, #0]
 8017c0e:	6878      	ldr	r0, [r7, #4]
 8017c10:	f7ff f8d8 	bl	8016dc4 <move_window>
 8017c14:	4603      	mov	r3, r0
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d001      	beq.n	8017c1e <check_fs+0x2a>
 8017c1a:	2304      	movs	r3, #4
 8017c1c:	e038      	b.n	8017c90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	3330      	adds	r3, #48	; 0x30
 8017c22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017c26:	4618      	mov	r0, r3
 8017c28:	f7fe fe58 	bl	80168dc <ld_word>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	461a      	mov	r2, r3
 8017c30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017c34:	429a      	cmp	r2, r3
 8017c36:	d001      	beq.n	8017c3c <check_fs+0x48>
 8017c38:	2303      	movs	r3, #3
 8017c3a:	e029      	b.n	8017c90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c42:	2be9      	cmp	r3, #233	; 0xe9
 8017c44:	d009      	beq.n	8017c5a <check_fs+0x66>
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c4c:	2beb      	cmp	r3, #235	; 0xeb
 8017c4e:	d11e      	bne.n	8017c8e <check_fs+0x9a>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8017c56:	2b90      	cmp	r3, #144	; 0x90
 8017c58:	d119      	bne.n	8017c8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	3330      	adds	r3, #48	; 0x30
 8017c5e:	3336      	adds	r3, #54	; 0x36
 8017c60:	4618      	mov	r0, r3
 8017c62:	f7fe fe53 	bl	801690c <ld_dword>
 8017c66:	4603      	mov	r3, r0
 8017c68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017c6c:	4a0a      	ldr	r2, [pc, #40]	; (8017c98 <check_fs+0xa4>)
 8017c6e:	4293      	cmp	r3, r2
 8017c70:	d101      	bne.n	8017c76 <check_fs+0x82>
 8017c72:	2300      	movs	r3, #0
 8017c74:	e00c      	b.n	8017c90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	3330      	adds	r3, #48	; 0x30
 8017c7a:	3352      	adds	r3, #82	; 0x52
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f7fe fe45 	bl	801690c <ld_dword>
 8017c82:	4603      	mov	r3, r0
 8017c84:	4a05      	ldr	r2, [pc, #20]	; (8017c9c <check_fs+0xa8>)
 8017c86:	4293      	cmp	r3, r2
 8017c88:	d101      	bne.n	8017c8e <check_fs+0x9a>
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	e000      	b.n	8017c90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017c8e:	2302      	movs	r3, #2
}
 8017c90:	4618      	mov	r0, r3
 8017c92:	3708      	adds	r7, #8
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}
 8017c98:	00544146 	.word	0x00544146
 8017c9c:	33544146 	.word	0x33544146

08017ca0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b096      	sub	sp, #88	; 0x58
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	60f8      	str	r0, [r7, #12]
 8017ca8:	60b9      	str	r1, [r7, #8]
 8017caa:	4613      	mov	r3, r2
 8017cac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017cae:	68bb      	ldr	r3, [r7, #8]
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	f7ff ff58 	bl	8017b6a <get_ldnumber>
 8017cba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	da01      	bge.n	8017cc6 <find_volume+0x26>
 8017cc2:	230b      	movs	r3, #11
 8017cc4:	e22d      	b.n	8018122 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8017cc6:	4aa1      	ldr	r2, [pc, #644]	; (8017f4c <find_volume+0x2ac>)
 8017cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017cce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d101      	bne.n	8017cda <find_volume+0x3a>
 8017cd6:	230c      	movs	r3, #12
 8017cd8:	e223      	b.n	8018122 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8017cda:	68bb      	ldr	r3, [r7, #8]
 8017cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017cde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017ce0:	79fb      	ldrb	r3, [r7, #7]
 8017ce2:	f023 0301 	bic.w	r3, r3, #1
 8017ce6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d01a      	beq.n	8017d26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8017cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf2:	785b      	ldrb	r3, [r3, #1]
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f7fe fd53 	bl	80167a0 <disk_status>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017d04:	f003 0301 	and.w	r3, r3, #1
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d10c      	bne.n	8017d26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017d0c:	79fb      	ldrb	r3, [r7, #7]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d007      	beq.n	8017d22 <find_volume+0x82>
 8017d12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017d16:	f003 0304 	and.w	r3, r3, #4
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d001      	beq.n	8017d22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8017d1e:	230a      	movs	r3, #10
 8017d20:	e1ff      	b.n	8018122 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8017d22:	2300      	movs	r3, #0
 8017d24:	e1fd      	b.n	8018122 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d28:	2200      	movs	r2, #0
 8017d2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d2e:	b2da      	uxtb	r2, r3
 8017d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d36:	785b      	ldrb	r3, [r3, #1]
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f7fe fd4b 	bl	80167d4 <disk_initialize>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017d48:	f003 0301 	and.w	r3, r3, #1
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d001      	beq.n	8017d54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017d50:	2303      	movs	r3, #3
 8017d52:	e1e6      	b.n	8018122 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017d54:	79fb      	ldrb	r3, [r7, #7]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d007      	beq.n	8017d6a <find_volume+0xca>
 8017d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017d5e:	f003 0304 	and.w	r3, r3, #4
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d001      	beq.n	8017d6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017d66:	230a      	movs	r3, #10
 8017d68:	e1db      	b.n	8018122 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d72:	f7ff ff3f 	bl	8017bf4 <check_fs>
 8017d76:	4603      	mov	r3, r0
 8017d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d80:	2b02      	cmp	r3, #2
 8017d82:	d149      	bne.n	8017e18 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017d84:	2300      	movs	r3, #0
 8017d86:	643b      	str	r3, [r7, #64]	; 0x40
 8017d88:	e01e      	b.n	8017dc8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d92:	011b      	lsls	r3, r3, #4
 8017d94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017d98:	4413      	add	r3, r2
 8017d9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d9e:	3304      	adds	r3, #4
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d006      	beq.n	8017db4 <find_volume+0x114>
 8017da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da8:	3308      	adds	r3, #8
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7fe fdae 	bl	801690c <ld_dword>
 8017db0:	4602      	mov	r2, r0
 8017db2:	e000      	b.n	8017db6 <find_volume+0x116>
 8017db4:	2200      	movs	r2, #0
 8017db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017db8:	009b      	lsls	r3, r3, #2
 8017dba:	3358      	adds	r3, #88	; 0x58
 8017dbc:	443b      	add	r3, r7
 8017dbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8017dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dca:	2b03      	cmp	r3, #3
 8017dcc:	d9dd      	bls.n	8017d8a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017dce:	2300      	movs	r3, #0
 8017dd0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d002      	beq.n	8017dde <find_volume+0x13e>
 8017dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dda:	3b01      	subs	r3, #1
 8017ddc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017de0:	009b      	lsls	r3, r3, #2
 8017de2:	3358      	adds	r3, #88	; 0x58
 8017de4:	443b      	add	r3, r7
 8017de6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017dea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d005      	beq.n	8017dfe <find_volume+0x15e>
 8017df2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017df4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017df6:	f7ff fefd 	bl	8017bf4 <check_fs>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	e000      	b.n	8017e00 <find_volume+0x160>
 8017dfe:	2303      	movs	r3, #3
 8017e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017e08:	2b01      	cmp	r3, #1
 8017e0a:	d905      	bls.n	8017e18 <find_volume+0x178>
 8017e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e0e:	3301      	adds	r3, #1
 8017e10:	643b      	str	r3, [r7, #64]	; 0x40
 8017e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e14:	2b03      	cmp	r3, #3
 8017e16:	d9e2      	bls.n	8017dde <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017e1c:	2b04      	cmp	r3, #4
 8017e1e:	d101      	bne.n	8017e24 <find_volume+0x184>
 8017e20:	2301      	movs	r3, #1
 8017e22:	e17e      	b.n	8018122 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017e28:	2b01      	cmp	r3, #1
 8017e2a:	d901      	bls.n	8017e30 <find_volume+0x190>
 8017e2c:	230d      	movs	r3, #13
 8017e2e:	e178      	b.n	8018122 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e32:	3330      	adds	r3, #48	; 0x30
 8017e34:	330b      	adds	r3, #11
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7fe fd50 	bl	80168dc <ld_word>
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e42:	d001      	beq.n	8017e48 <find_volume+0x1a8>
 8017e44:	230d      	movs	r3, #13
 8017e46:	e16c      	b.n	8018122 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e4a:	3330      	adds	r3, #48	; 0x30
 8017e4c:	3316      	adds	r3, #22
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f7fe fd44 	bl	80168dc <ld_word>
 8017e54:	4603      	mov	r3, r0
 8017e56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d106      	bne.n	8017e6c <find_volume+0x1cc>
 8017e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e60:	3330      	adds	r3, #48	; 0x30
 8017e62:	3324      	adds	r3, #36	; 0x24
 8017e64:	4618      	mov	r0, r3
 8017e66:	f7fe fd51 	bl	801690c <ld_dword>
 8017e6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017e70:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e74:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e7e:	789b      	ldrb	r3, [r3, #2]
 8017e80:	2b01      	cmp	r3, #1
 8017e82:	d005      	beq.n	8017e90 <find_volume+0x1f0>
 8017e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e86:	789b      	ldrb	r3, [r3, #2]
 8017e88:	2b02      	cmp	r3, #2
 8017e8a:	d001      	beq.n	8017e90 <find_volume+0x1f0>
 8017e8c:	230d      	movs	r3, #13
 8017e8e:	e148      	b.n	8018122 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e92:	789b      	ldrb	r3, [r3, #2]
 8017e94:	461a      	mov	r2, r3
 8017e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e98:	fb02 f303 	mul.w	r3, r2, r3
 8017e9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ea4:	b29a      	uxth	r2, r3
 8017ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eac:	895b      	ldrh	r3, [r3, #10]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d008      	beq.n	8017ec4 <find_volume+0x224>
 8017eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eb4:	895b      	ldrh	r3, [r3, #10]
 8017eb6:	461a      	mov	r2, r3
 8017eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eba:	895b      	ldrh	r3, [r3, #10]
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	4013      	ands	r3, r2
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d001      	beq.n	8017ec8 <find_volume+0x228>
 8017ec4:	230d      	movs	r3, #13
 8017ec6:	e12c      	b.n	8018122 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eca:	3330      	adds	r3, #48	; 0x30
 8017ecc:	3311      	adds	r3, #17
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f7fe fd04 	bl	80168dc <ld_word>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	461a      	mov	r2, r3
 8017ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ede:	891b      	ldrh	r3, [r3, #8]
 8017ee0:	f003 030f 	and.w	r3, r3, #15
 8017ee4:	b29b      	uxth	r3, r3
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d001      	beq.n	8017eee <find_volume+0x24e>
 8017eea:	230d      	movs	r3, #13
 8017eec:	e119      	b.n	8018122 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ef0:	3330      	adds	r3, #48	; 0x30
 8017ef2:	3313      	adds	r3, #19
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f7fe fcf1 	bl	80168dc <ld_word>
 8017efa:	4603      	mov	r3, r0
 8017efc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d106      	bne.n	8017f12 <find_volume+0x272>
 8017f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f06:	3330      	adds	r3, #48	; 0x30
 8017f08:	3320      	adds	r3, #32
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7fe fcfe 	bl	801690c <ld_dword>
 8017f10:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f14:	3330      	adds	r3, #48	; 0x30
 8017f16:	330e      	adds	r3, #14
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7fe fcdf 	bl	80168dc <ld_word>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d101      	bne.n	8017f2c <find_volume+0x28c>
 8017f28:	230d      	movs	r3, #13
 8017f2a:	e0fa      	b.n	8018122 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017f2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f30:	4413      	add	r3, r2
 8017f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017f34:	8912      	ldrh	r2, [r2, #8]
 8017f36:	0912      	lsrs	r2, r2, #4
 8017f38:	b292      	uxth	r2, r2
 8017f3a:	4413      	add	r3, r2
 8017f3c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d204      	bcs.n	8017f50 <find_volume+0x2b0>
 8017f46:	230d      	movs	r3, #13
 8017f48:	e0eb      	b.n	8018122 <find_volume+0x482>
 8017f4a:	bf00      	nop
 8017f4c:	2000137c 	.word	0x2000137c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f54:	1ad3      	subs	r3, r2, r3
 8017f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017f58:	8952      	ldrh	r2, [r2, #10]
 8017f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8017f5e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d101      	bne.n	8017f6a <find_volume+0x2ca>
 8017f66:	230d      	movs	r3, #13
 8017f68:	e0db      	b.n	8018122 <find_volume+0x482>
		fmt = FS_FAT32;
 8017f6a:	2303      	movs	r3, #3
 8017f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f72:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017f76:	4293      	cmp	r3, r2
 8017f78:	d802      	bhi.n	8017f80 <find_volume+0x2e0>
 8017f7a:	2302      	movs	r3, #2
 8017f7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f82:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017f86:	4293      	cmp	r3, r2
 8017f88:	d802      	bhi.n	8017f90 <find_volume+0x2f0>
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f92:	1c9a      	adds	r2, r3, #2
 8017f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f96:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017f9c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017f9e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017fa2:	441a      	add	r2, r3
 8017fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fa6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017fa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fac:	441a      	add	r2, r3
 8017fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fb0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8017fb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017fb6:	2b03      	cmp	r3, #3
 8017fb8:	d11e      	bne.n	8017ff8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fbc:	3330      	adds	r3, #48	; 0x30
 8017fbe:	332a      	adds	r3, #42	; 0x2a
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7fe fc8b 	bl	80168dc <ld_word>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d001      	beq.n	8017fd0 <find_volume+0x330>
 8017fcc:	230d      	movs	r3, #13
 8017fce:	e0a8      	b.n	8018122 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fd2:	891b      	ldrh	r3, [r3, #8]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d001      	beq.n	8017fdc <find_volume+0x33c>
 8017fd8:	230d      	movs	r3, #13
 8017fda:	e0a2      	b.n	8018122 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fde:	3330      	adds	r3, #48	; 0x30
 8017fe0:	332c      	adds	r3, #44	; 0x2c
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7fe fc92 	bl	801690c <ld_dword>
 8017fe8:	4602      	mov	r2, r0
 8017fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ff0:	695b      	ldr	r3, [r3, #20]
 8017ff2:	009b      	lsls	r3, r3, #2
 8017ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8017ff6:	e01f      	b.n	8018038 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ffa:	891b      	ldrh	r3, [r3, #8]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d101      	bne.n	8018004 <find_volume+0x364>
 8018000:	230d      	movs	r3, #13
 8018002:	e08e      	b.n	8018122 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018006:	6a1a      	ldr	r2, [r3, #32]
 8018008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801800a:	441a      	add	r2, r3
 801800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801800e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018014:	2b02      	cmp	r3, #2
 8018016:	d103      	bne.n	8018020 <find_volume+0x380>
 8018018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801801a:	695b      	ldr	r3, [r3, #20]
 801801c:	005b      	lsls	r3, r3, #1
 801801e:	e00a      	b.n	8018036 <find_volume+0x396>
 8018020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018022:	695a      	ldr	r2, [r3, #20]
 8018024:	4613      	mov	r3, r2
 8018026:	005b      	lsls	r3, r3, #1
 8018028:	4413      	add	r3, r2
 801802a:	085a      	lsrs	r2, r3, #1
 801802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801802e:	695b      	ldr	r3, [r3, #20]
 8018030:	f003 0301 	and.w	r3, r3, #1
 8018034:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018036:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801803a:	699a      	ldr	r2, [r3, #24]
 801803c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801803e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8018042:	0a5b      	lsrs	r3, r3, #9
 8018044:	429a      	cmp	r2, r3
 8018046:	d201      	bcs.n	801804c <find_volume+0x3ac>
 8018048:	230d      	movs	r3, #13
 801804a:	e06a      	b.n	8018122 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801804e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018052:	611a      	str	r2, [r3, #16]
 8018054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018056:	691a      	ldr	r2, [r3, #16]
 8018058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801805a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801805e:	2280      	movs	r2, #128	; 0x80
 8018060:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018062:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018066:	2b03      	cmp	r3, #3
 8018068:	d149      	bne.n	80180fe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801806c:	3330      	adds	r3, #48	; 0x30
 801806e:	3330      	adds	r3, #48	; 0x30
 8018070:	4618      	mov	r0, r3
 8018072:	f7fe fc33 	bl	80168dc <ld_word>
 8018076:	4603      	mov	r3, r0
 8018078:	2b01      	cmp	r3, #1
 801807a:	d140      	bne.n	80180fe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801807c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801807e:	3301      	adds	r3, #1
 8018080:	4619      	mov	r1, r3
 8018082:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018084:	f7fe fe9e 	bl	8016dc4 <move_window>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d137      	bne.n	80180fe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018090:	2200      	movs	r2, #0
 8018092:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018096:	3330      	adds	r3, #48	; 0x30
 8018098:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801809c:	4618      	mov	r0, r3
 801809e:	f7fe fc1d 	bl	80168dc <ld_word>
 80180a2:	4603      	mov	r3, r0
 80180a4:	461a      	mov	r2, r3
 80180a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d127      	bne.n	80180fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80180ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b0:	3330      	adds	r3, #48	; 0x30
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7fe fc2a 	bl	801690c <ld_dword>
 80180b8:	4603      	mov	r3, r0
 80180ba:	4a1c      	ldr	r2, [pc, #112]	; (801812c <find_volume+0x48c>)
 80180bc:	4293      	cmp	r3, r2
 80180be:	d11e      	bne.n	80180fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80180c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180c2:	3330      	adds	r3, #48	; 0x30
 80180c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80180c8:	4618      	mov	r0, r3
 80180ca:	f7fe fc1f 	bl	801690c <ld_dword>
 80180ce:	4603      	mov	r3, r0
 80180d0:	4a17      	ldr	r2, [pc, #92]	; (8018130 <find_volume+0x490>)
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d113      	bne.n	80180fe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80180d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d8:	3330      	adds	r3, #48	; 0x30
 80180da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80180de:	4618      	mov	r0, r3
 80180e0:	f7fe fc14 	bl	801690c <ld_dword>
 80180e4:	4602      	mov	r2, r0
 80180e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180e8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80180ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ec:	3330      	adds	r3, #48	; 0x30
 80180ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fe fc0a 	bl	801690c <ld_dword>
 80180f8:	4602      	mov	r2, r0
 80180fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180fc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80180fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018100:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8018104:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018106:	4b0b      	ldr	r3, [pc, #44]	; (8018134 <find_volume+0x494>)
 8018108:	881b      	ldrh	r3, [r3, #0]
 801810a:	3301      	adds	r3, #1
 801810c:	b29a      	uxth	r2, r3
 801810e:	4b09      	ldr	r3, [pc, #36]	; (8018134 <find_volume+0x494>)
 8018110:	801a      	strh	r2, [r3, #0]
 8018112:	4b08      	ldr	r3, [pc, #32]	; (8018134 <find_volume+0x494>)
 8018114:	881a      	ldrh	r2, [r3, #0]
 8018116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018118:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801811a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801811c:	f7fe fdea 	bl	8016cf4 <clear_lock>
#endif
	return FR_OK;
 8018120:	2300      	movs	r3, #0
}
 8018122:	4618      	mov	r0, r3
 8018124:	3758      	adds	r7, #88	; 0x58
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	41615252 	.word	0x41615252
 8018130:	61417272 	.word	0x61417272
 8018134:	20001380 	.word	0x20001380

08018138 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b084      	sub	sp, #16
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
 8018140:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018142:	2309      	movs	r3, #9
 8018144:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d01c      	beq.n	8018186 <validate+0x4e>
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d018      	beq.n	8018186 <validate+0x4e>
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d013      	beq.n	8018186 <validate+0x4e>
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	889a      	ldrh	r2, [r3, #4]
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	88db      	ldrh	r3, [r3, #6]
 8018168:	429a      	cmp	r2, r3
 801816a:	d10c      	bne.n	8018186 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	785b      	ldrb	r3, [r3, #1]
 8018172:	4618      	mov	r0, r3
 8018174:	f7fe fb14 	bl	80167a0 <disk_status>
 8018178:	4603      	mov	r3, r0
 801817a:	f003 0301 	and.w	r3, r3, #1
 801817e:	2b00      	cmp	r3, #0
 8018180:	d101      	bne.n	8018186 <validate+0x4e>
			res = FR_OK;
 8018182:	2300      	movs	r3, #0
 8018184:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018186:	7bfb      	ldrb	r3, [r7, #15]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d102      	bne.n	8018192 <validate+0x5a>
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	e000      	b.n	8018194 <validate+0x5c>
 8018192:	2300      	movs	r3, #0
 8018194:	683a      	ldr	r2, [r7, #0]
 8018196:	6013      	str	r3, [r2, #0]
	return res;
 8018198:	7bfb      	ldrb	r3, [r7, #15]
}
 801819a:	4618      	mov	r0, r3
 801819c:	3710      	adds	r7, #16
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}
	...

080181a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b088      	sub	sp, #32
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	60f8      	str	r0, [r7, #12]
 80181ac:	60b9      	str	r1, [r7, #8]
 80181ae:	4613      	mov	r3, r2
 80181b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80181b6:	f107 0310 	add.w	r3, r7, #16
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7ff fcd5 	bl	8017b6a <get_ldnumber>
 80181c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80181c2:	69fb      	ldr	r3, [r7, #28]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	da01      	bge.n	80181cc <f_mount+0x28>
 80181c8:	230b      	movs	r3, #11
 80181ca:	e02b      	b.n	8018224 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80181cc:	4a17      	ldr	r2, [pc, #92]	; (801822c <f_mount+0x88>)
 80181ce:	69fb      	ldr	r3, [r7, #28]
 80181d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80181d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d005      	beq.n	80181e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80181dc:	69b8      	ldr	r0, [r7, #24]
 80181de:	f7fe fd89 	bl	8016cf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80181e2:	69bb      	ldr	r3, [r7, #24]
 80181e4:	2200      	movs	r2, #0
 80181e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d002      	beq.n	80181f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	2200      	movs	r2, #0
 80181f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80181f4:	68fa      	ldr	r2, [r7, #12]
 80181f6:	490d      	ldr	r1, [pc, #52]	; (801822c <f_mount+0x88>)
 80181f8:	69fb      	ldr	r3, [r7, #28]
 80181fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d002      	beq.n	801820a <f_mount+0x66>
 8018204:	79fb      	ldrb	r3, [r7, #7]
 8018206:	2b01      	cmp	r3, #1
 8018208:	d001      	beq.n	801820e <f_mount+0x6a>
 801820a:	2300      	movs	r3, #0
 801820c:	e00a      	b.n	8018224 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801820e:	f107 010c 	add.w	r1, r7, #12
 8018212:	f107 0308 	add.w	r3, r7, #8
 8018216:	2200      	movs	r2, #0
 8018218:	4618      	mov	r0, r3
 801821a:	f7ff fd41 	bl	8017ca0 <find_volume>
 801821e:	4603      	mov	r3, r0
 8018220:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018222:	7dfb      	ldrb	r3, [r7, #23]
}
 8018224:	4618      	mov	r0, r3
 8018226:	3720      	adds	r7, #32
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}
 801822c:	2000137c 	.word	0x2000137c

08018230 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b09a      	sub	sp, #104	; 0x68
 8018234:	af00      	add	r7, sp, #0
 8018236:	60f8      	str	r0, [r7, #12]
 8018238:	60b9      	str	r1, [r7, #8]
 801823a:	4613      	mov	r3, r2
 801823c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d101      	bne.n	8018248 <f_open+0x18>
 8018244:	2309      	movs	r3, #9
 8018246:	e1ad      	b.n	80185a4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018248:	79fb      	ldrb	r3, [r7, #7]
 801824a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801824e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018250:	79fa      	ldrb	r2, [r7, #7]
 8018252:	f107 0114 	add.w	r1, r7, #20
 8018256:	f107 0308 	add.w	r3, r7, #8
 801825a:	4618      	mov	r0, r3
 801825c:	f7ff fd20 	bl	8017ca0 <find_volume>
 8018260:	4603      	mov	r3, r0
 8018262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8018266:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801826a:	2b00      	cmp	r3, #0
 801826c:	f040 8191 	bne.w	8018592 <f_open+0x362>
		dj.obj.fs = fs;
 8018270:	697b      	ldr	r3, [r7, #20]
 8018272:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018274:	68ba      	ldr	r2, [r7, #8]
 8018276:	f107 0318 	add.w	r3, r7, #24
 801827a:	4611      	mov	r1, r2
 801827c:	4618      	mov	r0, r3
 801827e:	f7ff fc03 	bl	8017a88 <follow_path>
 8018282:	4603      	mov	r3, r0
 8018284:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018288:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801828c:	2b00      	cmp	r3, #0
 801828e:	d11a      	bne.n	80182c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018290:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018294:	b25b      	sxtb	r3, r3
 8018296:	2b00      	cmp	r3, #0
 8018298:	da03      	bge.n	80182a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801829a:	2306      	movs	r3, #6
 801829c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80182a0:	e011      	b.n	80182c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80182a2:	79fb      	ldrb	r3, [r7, #7]
 80182a4:	f023 0301 	bic.w	r3, r3, #1
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	bf14      	ite	ne
 80182ac:	2301      	movne	r3, #1
 80182ae:	2300      	moveq	r3, #0
 80182b0:	b2db      	uxtb	r3, r3
 80182b2:	461a      	mov	r2, r3
 80182b4:	f107 0318 	add.w	r3, r7, #24
 80182b8:	4611      	mov	r1, r2
 80182ba:	4618      	mov	r0, r3
 80182bc:	f7fe fc0e 	bl	8016adc <chk_lock>
 80182c0:	4603      	mov	r3, r0
 80182c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80182c6:	79fb      	ldrb	r3, [r7, #7]
 80182c8:	f003 031c 	and.w	r3, r3, #28
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d07f      	beq.n	80183d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80182d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d017      	beq.n	8018308 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80182d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80182dc:	2b04      	cmp	r3, #4
 80182de:	d10e      	bne.n	80182fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80182e0:	f7fe fc58 	bl	8016b94 <enq_lock>
 80182e4:	4603      	mov	r3, r0
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d006      	beq.n	80182f8 <f_open+0xc8>
 80182ea:	f107 0318 	add.w	r3, r7, #24
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7ff fb03 	bl	80178fa <dir_register>
 80182f4:	4603      	mov	r3, r0
 80182f6:	e000      	b.n	80182fa <f_open+0xca>
 80182f8:	2312      	movs	r3, #18
 80182fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80182fe:	79fb      	ldrb	r3, [r7, #7]
 8018300:	f043 0308 	orr.w	r3, r3, #8
 8018304:	71fb      	strb	r3, [r7, #7]
 8018306:	e010      	b.n	801832a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018308:	7fbb      	ldrb	r3, [r7, #30]
 801830a:	f003 0311 	and.w	r3, r3, #17
 801830e:	2b00      	cmp	r3, #0
 8018310:	d003      	beq.n	801831a <f_open+0xea>
					res = FR_DENIED;
 8018312:	2307      	movs	r3, #7
 8018314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018318:	e007      	b.n	801832a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801831a:	79fb      	ldrb	r3, [r7, #7]
 801831c:	f003 0304 	and.w	r3, r3, #4
 8018320:	2b00      	cmp	r3, #0
 8018322:	d002      	beq.n	801832a <f_open+0xfa>
 8018324:	2308      	movs	r3, #8
 8018326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801832a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801832e:	2b00      	cmp	r3, #0
 8018330:	d168      	bne.n	8018404 <f_open+0x1d4>
 8018332:	79fb      	ldrb	r3, [r7, #7]
 8018334:	f003 0308 	and.w	r3, r3, #8
 8018338:	2b00      	cmp	r3, #0
 801833a:	d063      	beq.n	8018404 <f_open+0x1d4>
				dw = GET_FATTIME();
 801833c:	f7fc f82c 	bl	8014398 <get_fattime>
 8018340:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018344:	330e      	adds	r3, #14
 8018346:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018348:	4618      	mov	r0, r3
 801834a:	f7fe fb1d 	bl	8016988 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018350:	3316      	adds	r3, #22
 8018352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018354:	4618      	mov	r0, r3
 8018356:	f7fe fb17 	bl	8016988 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801835c:	330b      	adds	r3, #11
 801835e:	2220      	movs	r2, #32
 8018360:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018366:	4611      	mov	r1, r2
 8018368:	4618      	mov	r0, r3
 801836a:	f7ff fa32 	bl	80177d2 <ld_clust>
 801836e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018374:	2200      	movs	r2, #0
 8018376:	4618      	mov	r0, r3
 8018378:	f7ff fa4a 	bl	8017810 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801837e:	331c      	adds	r3, #28
 8018380:	2100      	movs	r1, #0
 8018382:	4618      	mov	r0, r3
 8018384:	f7fe fb00 	bl	8016988 <st_dword>
					fs->wflag = 1;
 8018388:	697b      	ldr	r3, [r7, #20]
 801838a:	2201      	movs	r2, #1
 801838c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801838e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018390:	2b00      	cmp	r3, #0
 8018392:	d037      	beq.n	8018404 <f_open+0x1d4>
						dw = fs->winsect;
 8018394:	697b      	ldr	r3, [r7, #20]
 8018396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018398:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801839a:	f107 0318 	add.w	r3, r7, #24
 801839e:	2200      	movs	r2, #0
 80183a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7fe ff5d 	bl	8017262 <remove_chain>
 80183a8:	4603      	mov	r3, r0
 80183aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80183ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d126      	bne.n	8018404 <f_open+0x1d4>
							res = move_window(fs, dw);
 80183b6:	697b      	ldr	r3, [r7, #20]
 80183b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80183ba:	4618      	mov	r0, r3
 80183bc:	f7fe fd02 	bl	8016dc4 <move_window>
 80183c0:	4603      	mov	r3, r0
 80183c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80183c6:	697b      	ldr	r3, [r7, #20]
 80183c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80183ca:	3a01      	subs	r2, #1
 80183cc:	60da      	str	r2, [r3, #12]
 80183ce:	e019      	b.n	8018404 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80183d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d115      	bne.n	8018404 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80183d8:	7fbb      	ldrb	r3, [r7, #30]
 80183da:	f003 0310 	and.w	r3, r3, #16
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d003      	beq.n	80183ea <f_open+0x1ba>
					res = FR_NO_FILE;
 80183e2:	2304      	movs	r3, #4
 80183e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80183e8:	e00c      	b.n	8018404 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80183ea:	79fb      	ldrb	r3, [r7, #7]
 80183ec:	f003 0302 	and.w	r3, r3, #2
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d007      	beq.n	8018404 <f_open+0x1d4>
 80183f4:	7fbb      	ldrb	r3, [r7, #30]
 80183f6:	f003 0301 	and.w	r3, r3, #1
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d002      	beq.n	8018404 <f_open+0x1d4>
						res = FR_DENIED;
 80183fe:	2307      	movs	r3, #7
 8018400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8018404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018408:	2b00      	cmp	r3, #0
 801840a:	d128      	bne.n	801845e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801840c:	79fb      	ldrb	r3, [r7, #7]
 801840e:	f003 0308 	and.w	r3, r3, #8
 8018412:	2b00      	cmp	r3, #0
 8018414:	d003      	beq.n	801841e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018416:	79fb      	ldrb	r3, [r7, #7]
 8018418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801841c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801842c:	79fb      	ldrb	r3, [r7, #7]
 801842e:	f023 0301 	bic.w	r3, r3, #1
 8018432:	2b00      	cmp	r3, #0
 8018434:	bf14      	ite	ne
 8018436:	2301      	movne	r3, #1
 8018438:	2300      	moveq	r3, #0
 801843a:	b2db      	uxtb	r3, r3
 801843c:	461a      	mov	r2, r3
 801843e:	f107 0318 	add.w	r3, r7, #24
 8018442:	4611      	mov	r1, r2
 8018444:	4618      	mov	r0, r3
 8018446:	f7fe fbc7 	bl	8016bd8 <inc_lock>
 801844a:	4602      	mov	r2, r0
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	691b      	ldr	r3, [r3, #16]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d102      	bne.n	801845e <f_open+0x22e>
 8018458:	2302      	movs	r3, #2
 801845a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801845e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018462:	2b00      	cmp	r3, #0
 8018464:	f040 8095 	bne.w	8018592 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801846c:	4611      	mov	r1, r2
 801846e:	4618      	mov	r0, r3
 8018470:	f7ff f9af 	bl	80177d2 <ld_clust>
 8018474:	4602      	mov	r2, r0
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801847c:	331c      	adds	r3, #28
 801847e:	4618      	mov	r0, r3
 8018480:	f7fe fa44 	bl	801690c <ld_dword>
 8018484:	4602      	mov	r2, r0
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	2200      	movs	r2, #0
 801848e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018490:	697a      	ldr	r2, [r7, #20]
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	88da      	ldrh	r2, [r3, #6]
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	79fa      	ldrb	r2, [r7, #7]
 80184a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	2200      	movs	r2, #0
 80184a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	2200      	movs	r2, #0
 80184ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	2200      	movs	r2, #0
 80184b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	3330      	adds	r3, #48	; 0x30
 80184ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80184be:	2100      	movs	r1, #0
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7fe faae 	bl	8016a22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80184c6:	79fb      	ldrb	r3, [r7, #7]
 80184c8:	f003 0320 	and.w	r3, r3, #32
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d060      	beq.n	8018592 <f_open+0x362>
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	68db      	ldr	r3, [r3, #12]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d05c      	beq.n	8018592 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	68da      	ldr	r2, [r3, #12]
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80184e0:	697b      	ldr	r3, [r7, #20]
 80184e2:	895b      	ldrh	r3, [r3, #10]
 80184e4:	025b      	lsls	r3, r3, #9
 80184e6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	689b      	ldr	r3, [r3, #8]
 80184ec:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	68db      	ldr	r3, [r3, #12]
 80184f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80184f4:	e016      	b.n	8018524 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7fe fd1d 	bl	8016f3a <get_fat>
 8018500:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8018502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018504:	2b01      	cmp	r3, #1
 8018506:	d802      	bhi.n	801850e <f_open+0x2de>
 8018508:	2302      	movs	r3, #2
 801850a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801850e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018514:	d102      	bne.n	801851c <f_open+0x2ec>
 8018516:	2301      	movs	r3, #1
 8018518:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801851c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801851e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018520:	1ad3      	subs	r3, r2, r3
 8018522:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018524:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018528:	2b00      	cmp	r3, #0
 801852a:	d103      	bne.n	8018534 <f_open+0x304>
 801852c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801852e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018530:	429a      	cmp	r2, r3
 8018532:	d8e0      	bhi.n	80184f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018538:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801853a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801853e:	2b00      	cmp	r3, #0
 8018540:	d127      	bne.n	8018592 <f_open+0x362>
 8018542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018548:	2b00      	cmp	r3, #0
 801854a:	d022      	beq.n	8018592 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801854c:	697b      	ldr	r3, [r7, #20]
 801854e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018550:	4618      	mov	r0, r3
 8018552:	f7fe fcd3 	bl	8016efc <clust2sect>
 8018556:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801855a:	2b00      	cmp	r3, #0
 801855c:	d103      	bne.n	8018566 <f_open+0x336>
						res = FR_INT_ERR;
 801855e:	2302      	movs	r3, #2
 8018560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018564:	e015      	b.n	8018592 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018568:	0a5a      	lsrs	r2, r3, #9
 801856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801856c:	441a      	add	r2, r3
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018572:	697b      	ldr	r3, [r7, #20]
 8018574:	7858      	ldrb	r0, [r3, #1]
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	6a1a      	ldr	r2, [r3, #32]
 8018580:	2301      	movs	r3, #1
 8018582:	f7fe f94d 	bl	8016820 <disk_read>
 8018586:	4603      	mov	r3, r0
 8018588:	2b00      	cmp	r3, #0
 801858a:	d002      	beq.n	8018592 <f_open+0x362>
 801858c:	2301      	movs	r3, #1
 801858e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018592:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018596:	2b00      	cmp	r3, #0
 8018598:	d002      	beq.n	80185a0 <f_open+0x370>
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	2200      	movs	r2, #0
 801859e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80185a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3768      	adds	r7, #104	; 0x68
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b08c      	sub	sp, #48	; 0x30
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	60f8      	str	r0, [r7, #12]
 80185b4:	60b9      	str	r1, [r7, #8]
 80185b6:	607a      	str	r2, [r7, #4]
 80185b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80185ba:	68bb      	ldr	r3, [r7, #8]
 80185bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	2200      	movs	r2, #0
 80185c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	f107 0210 	add.w	r2, r7, #16
 80185ca:	4611      	mov	r1, r2
 80185cc:	4618      	mov	r0, r3
 80185ce:	f7ff fdb3 	bl	8018138 <validate>
 80185d2:	4603      	mov	r3, r0
 80185d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80185d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d107      	bne.n	80185f0 <f_write+0x44>
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	7d5b      	ldrb	r3, [r3, #21]
 80185e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80185e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d002      	beq.n	80185f6 <f_write+0x4a>
 80185f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80185f4:	e14b      	b.n	801888e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	7d1b      	ldrb	r3, [r3, #20]
 80185fa:	f003 0302 	and.w	r3, r3, #2
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d101      	bne.n	8018606 <f_write+0x5a>
 8018602:	2307      	movs	r3, #7
 8018604:	e143      	b.n	801888e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	699a      	ldr	r2, [r3, #24]
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	441a      	add	r2, r3
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	699b      	ldr	r3, [r3, #24]
 8018612:	429a      	cmp	r2, r3
 8018614:	f080 812d 	bcs.w	8018872 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	699b      	ldr	r3, [r3, #24]
 801861c:	43db      	mvns	r3, r3
 801861e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018620:	e127      	b.n	8018872 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	699b      	ldr	r3, [r3, #24]
 8018626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801862a:	2b00      	cmp	r3, #0
 801862c:	f040 80e3 	bne.w	80187f6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	699b      	ldr	r3, [r3, #24]
 8018634:	0a5b      	lsrs	r3, r3, #9
 8018636:	693a      	ldr	r2, [r7, #16]
 8018638:	8952      	ldrh	r2, [r2, #10]
 801863a:	3a01      	subs	r2, #1
 801863c:	4013      	ands	r3, r2
 801863e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018640:	69bb      	ldr	r3, [r7, #24]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d143      	bne.n	80186ce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	699b      	ldr	r3, [r3, #24]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d10c      	bne.n	8018668 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	689b      	ldr	r3, [r3, #8]
 8018652:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018656:	2b00      	cmp	r3, #0
 8018658:	d11a      	bne.n	8018690 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	2100      	movs	r1, #0
 801865e:	4618      	mov	r0, r3
 8018660:	f7fe fe64 	bl	801732c <create_chain>
 8018664:	62b8      	str	r0, [r7, #40]	; 0x28
 8018666:	e013      	b.n	8018690 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801866c:	2b00      	cmp	r3, #0
 801866e:	d007      	beq.n	8018680 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	699b      	ldr	r3, [r3, #24]
 8018674:	4619      	mov	r1, r3
 8018676:	68f8      	ldr	r0, [r7, #12]
 8018678:	f7fe fef0 	bl	801745c <clmt_clust>
 801867c:	62b8      	str	r0, [r7, #40]	; 0x28
 801867e:	e007      	b.n	8018690 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018680:	68fa      	ldr	r2, [r7, #12]
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	69db      	ldr	r3, [r3, #28]
 8018686:	4619      	mov	r1, r3
 8018688:	4610      	mov	r0, r2
 801868a:	f7fe fe4f 	bl	801732c <create_chain>
 801868e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018692:	2b00      	cmp	r3, #0
 8018694:	f000 80f2 	beq.w	801887c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869a:	2b01      	cmp	r3, #1
 801869c:	d104      	bne.n	80186a8 <f_write+0xfc>
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	2202      	movs	r2, #2
 80186a2:	755a      	strb	r2, [r3, #21]
 80186a4:	2302      	movs	r3, #2
 80186a6:	e0f2      	b.n	801888e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80186a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80186ae:	d104      	bne.n	80186ba <f_write+0x10e>
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	2201      	movs	r2, #1
 80186b4:	755a      	strb	r2, [r3, #21]
 80186b6:	2301      	movs	r3, #1
 80186b8:	e0e9      	b.n	801888e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80186be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	689b      	ldr	r3, [r3, #8]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d102      	bne.n	80186ce <f_write+0x122>
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80186cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	7d1b      	ldrb	r3, [r3, #20]
 80186d2:	b25b      	sxtb	r3, r3
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	da18      	bge.n	801870a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	7858      	ldrb	r0, [r3, #1]
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	6a1a      	ldr	r2, [r3, #32]
 80186e6:	2301      	movs	r3, #1
 80186e8:	f7fe f8ba 	bl	8016860 <disk_write>
 80186ec:	4603      	mov	r3, r0
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d004      	beq.n	80186fc <f_write+0x150>
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	2201      	movs	r2, #1
 80186f6:	755a      	strb	r2, [r3, #21]
 80186f8:	2301      	movs	r3, #1
 80186fa:	e0c8      	b.n	801888e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	7d1b      	ldrb	r3, [r3, #20]
 8018700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018704:	b2da      	uxtb	r2, r3
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801870a:	693a      	ldr	r2, [r7, #16]
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	69db      	ldr	r3, [r3, #28]
 8018710:	4619      	mov	r1, r3
 8018712:	4610      	mov	r0, r2
 8018714:	f7fe fbf2 	bl	8016efc <clust2sect>
 8018718:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801871a:	697b      	ldr	r3, [r7, #20]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d104      	bne.n	801872a <f_write+0x17e>
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	2202      	movs	r2, #2
 8018724:	755a      	strb	r2, [r3, #21]
 8018726:	2302      	movs	r3, #2
 8018728:	e0b1      	b.n	801888e <f_write+0x2e2>
			sect += csect;
 801872a:	697a      	ldr	r2, [r7, #20]
 801872c:	69bb      	ldr	r3, [r7, #24]
 801872e:	4413      	add	r3, r2
 8018730:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	0a5b      	lsrs	r3, r3, #9
 8018736:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018738:	6a3b      	ldr	r3, [r7, #32]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d03c      	beq.n	80187b8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801873e:	69ba      	ldr	r2, [r7, #24]
 8018740:	6a3b      	ldr	r3, [r7, #32]
 8018742:	4413      	add	r3, r2
 8018744:	693a      	ldr	r2, [r7, #16]
 8018746:	8952      	ldrh	r2, [r2, #10]
 8018748:	4293      	cmp	r3, r2
 801874a:	d905      	bls.n	8018758 <f_write+0x1ac>
					cc = fs->csize - csect;
 801874c:	693b      	ldr	r3, [r7, #16]
 801874e:	895b      	ldrh	r3, [r3, #10]
 8018750:	461a      	mov	r2, r3
 8018752:	69bb      	ldr	r3, [r7, #24]
 8018754:	1ad3      	subs	r3, r2, r3
 8018756:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018758:	693b      	ldr	r3, [r7, #16]
 801875a:	7858      	ldrb	r0, [r3, #1]
 801875c:	6a3b      	ldr	r3, [r7, #32]
 801875e:	697a      	ldr	r2, [r7, #20]
 8018760:	69f9      	ldr	r1, [r7, #28]
 8018762:	f7fe f87d 	bl	8016860 <disk_write>
 8018766:	4603      	mov	r3, r0
 8018768:	2b00      	cmp	r3, #0
 801876a:	d004      	beq.n	8018776 <f_write+0x1ca>
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	2201      	movs	r2, #1
 8018770:	755a      	strb	r2, [r3, #21]
 8018772:	2301      	movs	r3, #1
 8018774:	e08b      	b.n	801888e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	6a1a      	ldr	r2, [r3, #32]
 801877a:	697b      	ldr	r3, [r7, #20]
 801877c:	1ad3      	subs	r3, r2, r3
 801877e:	6a3a      	ldr	r2, [r7, #32]
 8018780:	429a      	cmp	r2, r3
 8018782:	d915      	bls.n	80187b0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	6a1a      	ldr	r2, [r3, #32]
 801878e:	697b      	ldr	r3, [r7, #20]
 8018790:	1ad3      	subs	r3, r2, r3
 8018792:	025b      	lsls	r3, r3, #9
 8018794:	69fa      	ldr	r2, [r7, #28]
 8018796:	4413      	add	r3, r2
 8018798:	f44f 7200 	mov.w	r2, #512	; 0x200
 801879c:	4619      	mov	r1, r3
 801879e:	f7fe f91f 	bl	80169e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	7d1b      	ldrb	r3, [r3, #20]
 80187a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80187aa:	b2da      	uxtb	r2, r3
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80187b0:	6a3b      	ldr	r3, [r7, #32]
 80187b2:	025b      	lsls	r3, r3, #9
 80187b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80187b6:	e03f      	b.n	8018838 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	6a1b      	ldr	r3, [r3, #32]
 80187bc:	697a      	ldr	r2, [r7, #20]
 80187be:	429a      	cmp	r2, r3
 80187c0:	d016      	beq.n	80187f0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	699a      	ldr	r2, [r3, #24]
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d210      	bcs.n	80187f0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80187ce:	693b      	ldr	r3, [r7, #16]
 80187d0:	7858      	ldrb	r0, [r3, #1]
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80187d8:	2301      	movs	r3, #1
 80187da:	697a      	ldr	r2, [r7, #20]
 80187dc:	f7fe f820 	bl	8016820 <disk_read>
 80187e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d004      	beq.n	80187f0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	2201      	movs	r2, #1
 80187ea:	755a      	strb	r2, [r3, #21]
 80187ec:	2301      	movs	r3, #1
 80187ee:	e04e      	b.n	801888e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	697a      	ldr	r2, [r7, #20]
 80187f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	699b      	ldr	r3, [r3, #24]
 80187fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80187fe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018802:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	429a      	cmp	r2, r3
 801880a:	d901      	bls.n	8018810 <f_write+0x264>
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	699b      	ldr	r3, [r3, #24]
 801881a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801881e:	4413      	add	r3, r2
 8018820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018822:	69f9      	ldr	r1, [r7, #28]
 8018824:	4618      	mov	r0, r3
 8018826:	f7fe f8db 	bl	80169e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	7d1b      	ldrb	r3, [r3, #20]
 801882e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018832:	b2da      	uxtb	r2, r3
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018838:	69fa      	ldr	r2, [r7, #28]
 801883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883c:	4413      	add	r3, r2
 801883e:	61fb      	str	r3, [r7, #28]
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	699a      	ldr	r2, [r3, #24]
 8018844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018846:	441a      	add	r2, r3
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	619a      	str	r2, [r3, #24]
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	68da      	ldr	r2, [r3, #12]
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	699b      	ldr	r3, [r3, #24]
 8018854:	429a      	cmp	r2, r3
 8018856:	bf38      	it	cc
 8018858:	461a      	movcc	r2, r3
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	60da      	str	r2, [r3, #12]
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	681a      	ldr	r2, [r3, #0]
 8018862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018864:	441a      	add	r2, r3
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	601a      	str	r2, [r3, #0]
 801886a:	687a      	ldr	r2, [r7, #4]
 801886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886e:	1ad3      	subs	r3, r2, r3
 8018870:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	2b00      	cmp	r3, #0
 8018876:	f47f aed4 	bne.w	8018622 <f_write+0x76>
 801887a:	e000      	b.n	801887e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801887c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	7d1b      	ldrb	r3, [r3, #20]
 8018882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018886:	b2da      	uxtb	r2, r3
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801888c:	2300      	movs	r3, #0
}
 801888e:	4618      	mov	r0, r3
 8018890:	3730      	adds	r7, #48	; 0x30
 8018892:	46bd      	mov	sp, r7
 8018894:	bd80      	pop	{r7, pc}

08018896 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018896:	b580      	push	{r7, lr}
 8018898:	b086      	sub	sp, #24
 801889a:	af00      	add	r7, sp, #0
 801889c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	f107 0208 	add.w	r2, r7, #8
 80188a4:	4611      	mov	r1, r2
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7ff fc46 	bl	8018138 <validate>
 80188ac:	4603      	mov	r3, r0
 80188ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80188b0:	7dfb      	ldrb	r3, [r7, #23]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d168      	bne.n	8018988 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	7d1b      	ldrb	r3, [r3, #20]
 80188ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d062      	beq.n	8018988 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	7d1b      	ldrb	r3, [r3, #20]
 80188c6:	b25b      	sxtb	r3, r3
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	da15      	bge.n	80188f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80188cc:	68bb      	ldr	r3, [r7, #8]
 80188ce:	7858      	ldrb	r0, [r3, #1]
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	6a1a      	ldr	r2, [r3, #32]
 80188da:	2301      	movs	r3, #1
 80188dc:	f7fd ffc0 	bl	8016860 <disk_write>
 80188e0:	4603      	mov	r3, r0
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d001      	beq.n	80188ea <f_sync+0x54>
 80188e6:	2301      	movs	r3, #1
 80188e8:	e04f      	b.n	801898a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	7d1b      	ldrb	r3, [r3, #20]
 80188ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188f2:	b2da      	uxtb	r2, r3
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80188f8:	f7fb fd4e 	bl	8014398 <get_fattime>
 80188fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80188fe:	68ba      	ldr	r2, [r7, #8]
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018904:	4619      	mov	r1, r3
 8018906:	4610      	mov	r0, r2
 8018908:	f7fe fa5c 	bl	8016dc4 <move_window>
 801890c:	4603      	mov	r3, r0
 801890e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018910:	7dfb      	ldrb	r3, [r7, #23]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d138      	bne.n	8018988 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801891a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	330b      	adds	r3, #11
 8018920:	781a      	ldrb	r2, [r3, #0]
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	330b      	adds	r3, #11
 8018926:	f042 0220 	orr.w	r2, r2, #32
 801892a:	b2d2      	uxtb	r2, r2
 801892c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	6818      	ldr	r0, [r3, #0]
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	689b      	ldr	r3, [r3, #8]
 8018936:	461a      	mov	r2, r3
 8018938:	68f9      	ldr	r1, [r7, #12]
 801893a:	f7fe ff69 	bl	8017810 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	f103 021c 	add.w	r2, r3, #28
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	68db      	ldr	r3, [r3, #12]
 8018948:	4619      	mov	r1, r3
 801894a:	4610      	mov	r0, r2
 801894c:	f7fe f81c 	bl	8016988 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	3316      	adds	r3, #22
 8018954:	6939      	ldr	r1, [r7, #16]
 8018956:	4618      	mov	r0, r3
 8018958:	f7fe f816 	bl	8016988 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	3312      	adds	r3, #18
 8018960:	2100      	movs	r1, #0
 8018962:	4618      	mov	r0, r3
 8018964:	f7fd fff5 	bl	8016952 <st_word>
					fs->wflag = 1;
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	2201      	movs	r2, #1
 801896c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	4618      	mov	r0, r3
 8018972:	f7fe fa55 	bl	8016e20 <sync_fs>
 8018976:	4603      	mov	r3, r0
 8018978:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	7d1b      	ldrb	r3, [r3, #20]
 801897e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018982:	b2da      	uxtb	r2, r3
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018988:	7dfb      	ldrb	r3, [r7, #23]
}
 801898a:	4618      	mov	r0, r3
 801898c:	3718      	adds	r7, #24
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
	...

08018994 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018994:	b480      	push	{r7}
 8018996:	b087      	sub	sp, #28
 8018998:	af00      	add	r7, sp, #0
 801899a:	60f8      	str	r0, [r7, #12]
 801899c:	60b9      	str	r1, [r7, #8]
 801899e:	4613      	mov	r3, r2
 80189a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80189a2:	2301      	movs	r3, #1
 80189a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80189a6:	2300      	movs	r3, #0
 80189a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80189aa:	4b1f      	ldr	r3, [pc, #124]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189ac:	7a5b      	ldrb	r3, [r3, #9]
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d131      	bne.n	8018a18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80189b4:	4b1c      	ldr	r3, [pc, #112]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189b6:	7a5b      	ldrb	r3, [r3, #9]
 80189b8:	b2db      	uxtb	r3, r3
 80189ba:	461a      	mov	r2, r3
 80189bc:	4b1a      	ldr	r3, [pc, #104]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189be:	2100      	movs	r1, #0
 80189c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80189c2:	4b19      	ldr	r3, [pc, #100]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189c4:	7a5b      	ldrb	r3, [r3, #9]
 80189c6:	b2db      	uxtb	r3, r3
 80189c8:	4a17      	ldr	r2, [pc, #92]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189ca:	009b      	lsls	r3, r3, #2
 80189cc:	4413      	add	r3, r2
 80189ce:	68fa      	ldr	r2, [r7, #12]
 80189d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80189d2:	4b15      	ldr	r3, [pc, #84]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189d4:	7a5b      	ldrb	r3, [r3, #9]
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	461a      	mov	r2, r3
 80189da:	4b13      	ldr	r3, [pc, #76]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189dc:	4413      	add	r3, r2
 80189de:	79fa      	ldrb	r2, [r7, #7]
 80189e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80189e2:	4b11      	ldr	r3, [pc, #68]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189e4:	7a5b      	ldrb	r3, [r3, #9]
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	1c5a      	adds	r2, r3, #1
 80189ea:	b2d1      	uxtb	r1, r2
 80189ec:	4a0e      	ldr	r2, [pc, #56]	; (8018a28 <FATFS_LinkDriverEx+0x94>)
 80189ee:	7251      	strb	r1, [r2, #9]
 80189f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80189f2:	7dbb      	ldrb	r3, [r7, #22]
 80189f4:	3330      	adds	r3, #48	; 0x30
 80189f6:	b2da      	uxtb	r2, r3
 80189f8:	68bb      	ldr	r3, [r7, #8]
 80189fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	3301      	adds	r3, #1
 8018a00:	223a      	movs	r2, #58	; 0x3a
 8018a02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018a04:	68bb      	ldr	r3, [r7, #8]
 8018a06:	3302      	adds	r3, #2
 8018a08:	222f      	movs	r2, #47	; 0x2f
 8018a0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018a0c:	68bb      	ldr	r3, [r7, #8]
 8018a0e:	3303      	adds	r3, #3
 8018a10:	2200      	movs	r2, #0
 8018a12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018a14:	2300      	movs	r3, #0
 8018a16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	371c      	adds	r7, #28
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a24:	4770      	bx	lr
 8018a26:	bf00      	nop
 8018a28:	200013a4 	.word	0x200013a4

08018a2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b082      	sub	sp, #8
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
 8018a34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018a36:	2200      	movs	r2, #0
 8018a38:	6839      	ldr	r1, [r7, #0]
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f7ff ffaa 	bl	8018994 <FATFS_LinkDriverEx>
 8018a40:	4603      	mov	r3, r0
}
 8018a42:	4618      	mov	r0, r3
 8018a44:	3708      	adds	r7, #8
 8018a46:	46bd      	mov	sp, r7
 8018a48:	bd80      	pop	{r7, pc}
	...

08018a4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018a50:	2200      	movs	r2, #0
 8018a52:	4912      	ldr	r1, [pc, #72]	; (8018a9c <MX_USB_DEVICE_Init+0x50>)
 8018a54:	4812      	ldr	r0, [pc, #72]	; (8018aa0 <MX_USB_DEVICE_Init+0x54>)
 8018a56:	f7fc fbab 	bl	80151b0 <USBD_Init>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d001      	beq.n	8018a64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018a60:	f7eb ff5e 	bl	8004920 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018a64:	490f      	ldr	r1, [pc, #60]	; (8018aa4 <MX_USB_DEVICE_Init+0x58>)
 8018a66:	480e      	ldr	r0, [pc, #56]	; (8018aa0 <MX_USB_DEVICE_Init+0x54>)
 8018a68:	f7fc fbd2 	bl	8015210 <USBD_RegisterClass>
 8018a6c:	4603      	mov	r3, r0
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d001      	beq.n	8018a76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018a72:	f7eb ff55 	bl	8004920 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018a76:	490c      	ldr	r1, [pc, #48]	; (8018aa8 <MX_USB_DEVICE_Init+0x5c>)
 8018a78:	4809      	ldr	r0, [pc, #36]	; (8018aa0 <MX_USB_DEVICE_Init+0x54>)
 8018a7a:	f7fc fac9 	bl	8015010 <USBD_CDC_RegisterInterface>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d001      	beq.n	8018a88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018a84:	f7eb ff4c 	bl	8004920 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018a88:	4805      	ldr	r0, [pc, #20]	; (8018aa0 <MX_USB_DEVICE_Init+0x54>)
 8018a8a:	f7fc fbf7 	bl	801527c <USBD_Start>
 8018a8e:	4603      	mov	r3, r0
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d001      	beq.n	8018a98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018a94:	f7eb ff44 	bl	8004920 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018a98:	bf00      	nop
 8018a9a:	bd80      	pop	{r7, pc}
 8018a9c:	200000b0 	.word	0x200000b0
 8018aa0:	200013b0 	.word	0x200013b0
 8018aa4:	2000001c 	.word	0x2000001c
 8018aa8:	2000009c 	.word	0x2000009c

08018aac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	4905      	ldr	r1, [pc, #20]	; (8018ac8 <CDC_Init_FS+0x1c>)
 8018ab4:	4805      	ldr	r0, [pc, #20]	; (8018acc <CDC_Init_FS+0x20>)
 8018ab6:	f7fc fac5 	bl	8015044 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018aba:	4905      	ldr	r1, [pc, #20]	; (8018ad0 <CDC_Init_FS+0x24>)
 8018abc:	4803      	ldr	r0, [pc, #12]	; (8018acc <CDC_Init_FS+0x20>)
 8018abe:	f7fc fae3 	bl	8015088 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8018ac2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	bd80      	pop	{r7, pc}
 8018ac8:	20001e90 	.word	0x20001e90
 8018acc:	200013b0 	.word	0x200013b0
 8018ad0:	20001690 	.word	0x20001690

08018ad4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018ad4:	b480      	push	{r7}
 8018ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8018ad8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018ada:	4618      	mov	r0, r3
 8018adc:	46bd      	mov	sp, r7
 8018ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae2:	4770      	bx	lr

08018ae4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018ae4:	b480      	push	{r7}
 8018ae6:	b083      	sub	sp, #12
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	4603      	mov	r3, r0
 8018aec:	6039      	str	r1, [r7, #0]
 8018aee:	71fb      	strb	r3, [r7, #7]
 8018af0:	4613      	mov	r3, r2
 8018af2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 8018af4:	79fb      	ldrb	r3, [r7, #7]
 8018af6:	2b23      	cmp	r3, #35	; 0x23
 8018af8:	d84a      	bhi.n	8018b90 <CDC_Control_FS+0xac>
 8018afa:	a201      	add	r2, pc, #4	; (adr r2, 8018b00 <CDC_Control_FS+0x1c>)
 8018afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b00:	08018b91 	.word	0x08018b91
 8018b04:	08018b91 	.word	0x08018b91
 8018b08:	08018b91 	.word	0x08018b91
 8018b0c:	08018b91 	.word	0x08018b91
 8018b10:	08018b91 	.word	0x08018b91
 8018b14:	08018b91 	.word	0x08018b91
 8018b18:	08018b91 	.word	0x08018b91
 8018b1c:	08018b91 	.word	0x08018b91
 8018b20:	08018b91 	.word	0x08018b91
 8018b24:	08018b91 	.word	0x08018b91
 8018b28:	08018b91 	.word	0x08018b91
 8018b2c:	08018b91 	.word	0x08018b91
 8018b30:	08018b91 	.word	0x08018b91
 8018b34:	08018b91 	.word	0x08018b91
 8018b38:	08018b91 	.word	0x08018b91
 8018b3c:	08018b91 	.word	0x08018b91
 8018b40:	08018b91 	.word	0x08018b91
 8018b44:	08018b91 	.word	0x08018b91
 8018b48:	08018b91 	.word	0x08018b91
 8018b4c:	08018b91 	.word	0x08018b91
 8018b50:	08018b91 	.word	0x08018b91
 8018b54:	08018b91 	.word	0x08018b91
 8018b58:	08018b91 	.word	0x08018b91
 8018b5c:	08018b91 	.word	0x08018b91
 8018b60:	08018b91 	.word	0x08018b91
 8018b64:	08018b91 	.word	0x08018b91
 8018b68:	08018b91 	.word	0x08018b91
 8018b6c:	08018b91 	.word	0x08018b91
 8018b70:	08018b91 	.word	0x08018b91
 8018b74:	08018b91 	.word	0x08018b91
 8018b78:	08018b91 	.word	0x08018b91
 8018b7c:	08018b91 	.word	0x08018b91
 8018b80:	08018b91 	.word	0x08018b91
 8018b84:	08018b91 	.word	0x08018b91
 8018b88:	08018b91 	.word	0x08018b91
 8018b8c:	08018b91 	.word	0x08018b91
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8018b90:	bf00      	nop
	}

	return (USBD_OK);
 8018b92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	370c      	adds	r7, #12
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9e:	4770      	bx	lr

08018ba0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b084      	sub	sp, #16
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
 8018ba8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018baa:	6879      	ldr	r1, [r7, #4]
 8018bac:	480b      	ldr	r0, [pc, #44]	; (8018bdc <CDC_Receive_FS+0x3c>)
 8018bae:	f7fc fa6b 	bl	8015088 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018bb2:	480a      	ldr	r0, [pc, #40]	; (8018bdc <CDC_Receive_FS+0x3c>)
 8018bb4:	f7fc fac6 	bl	8015144 <USBD_CDC_ReceivePacket>

	uint8_t len = (uint8_t)*Len;
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_Rx_buffer, Buf, len);  // copy the data to the buffer
 8018bbe:	7bfb      	ldrb	r3, [r7, #15]
 8018bc0:	461a      	mov	r2, r3
 8018bc2:	6879      	ldr	r1, [r7, #4]
 8018bc4:	4806      	ldr	r0, [pc, #24]	; (8018be0 <CDC_Receive_FS+0x40>)
 8018bc6:	f000 fd71 	bl	80196ac <memcpy>

	usb_Rx_ready = 1;
 8018bca:	4b06      	ldr	r3, [pc, #24]	; (8018be4 <CDC_Receive_FS+0x44>)
 8018bcc:	2201      	movs	r2, #1
 8018bce:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8018bd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	3710      	adds	r7, #16
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}
 8018bda:	bf00      	nop
 8018bdc:	200013b0 	.word	0x200013b0
 8018be0:	2000168c 	.word	0x2000168c
 8018be4:	2000168e 	.word	0x2000168e

08018be8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b084      	sub	sp, #16
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
 8018bf0:	460b      	mov	r3, r1
 8018bf2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018bf8:	4b0d      	ldr	r3, [pc, #52]	; (8018c30 <CDC_Transmit_FS+0x48>)
 8018bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018bfe:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8018c00:	68bb      	ldr	r3, [r7, #8]
 8018c02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d001      	beq.n	8018c0e <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8018c0a:	2301      	movs	r3, #1
 8018c0c:	e00b      	b.n	8018c26 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018c0e:	887b      	ldrh	r3, [r7, #2]
 8018c10:	461a      	mov	r2, r3
 8018c12:	6879      	ldr	r1, [r7, #4]
 8018c14:	4806      	ldr	r0, [pc, #24]	; (8018c30 <CDC_Transmit_FS+0x48>)
 8018c16:	f7fc fa15 	bl	8015044 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018c1a:	4805      	ldr	r0, [pc, #20]	; (8018c30 <CDC_Transmit_FS+0x48>)
 8018c1c:	f7fc fa52 	bl	80150c4 <USBD_CDC_TransmitPacket>
 8018c20:	4603      	mov	r3, r0
 8018c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c26:	4618      	mov	r0, r3
 8018c28:	3710      	adds	r7, #16
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}
 8018c2e:	bf00      	nop
 8018c30:	200013b0 	.word	0x200013b0

08018c34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018c34:	b480      	push	{r7}
 8018c36:	b087      	sub	sp, #28
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	60f8      	str	r0, [r7, #12]
 8018c3c:	60b9      	str	r1, [r7, #8]
 8018c3e:	4613      	mov	r3, r2
 8018c40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018c42:	2300      	movs	r3, #0
 8018c44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	371c      	adds	r7, #28
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c54:	4770      	bx	lr
	...

08018c58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c58:	b480      	push	{r7}
 8018c5a:	b083      	sub	sp, #12
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	4603      	mov	r3, r0
 8018c60:	6039      	str	r1, [r7, #0]
 8018c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	2212      	movs	r2, #18
 8018c68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018c6a:	4b03      	ldr	r3, [pc, #12]	; (8018c78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	370c      	adds	r7, #12
 8018c70:	46bd      	mov	sp, r7
 8018c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c76:	4770      	bx	lr
 8018c78:	200000cc 	.word	0x200000cc

08018c7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c7c:	b480      	push	{r7}
 8018c7e:	b083      	sub	sp, #12
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	4603      	mov	r3, r0
 8018c84:	6039      	str	r1, [r7, #0]
 8018c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018c88:	683b      	ldr	r3, [r7, #0]
 8018c8a:	2204      	movs	r2, #4
 8018c8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018c8e:	4b03      	ldr	r3, [pc, #12]	; (8018c9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	370c      	adds	r7, #12
 8018c94:	46bd      	mov	sp, r7
 8018c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9a:	4770      	bx	lr
 8018c9c:	200000e0 	.word	0x200000e0

08018ca0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b082      	sub	sp, #8
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	6039      	str	r1, [r7, #0]
 8018caa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018cac:	79fb      	ldrb	r3, [r7, #7]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d105      	bne.n	8018cbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018cb2:	683a      	ldr	r2, [r7, #0]
 8018cb4:	4907      	ldr	r1, [pc, #28]	; (8018cd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8018cb6:	4808      	ldr	r0, [pc, #32]	; (8018cd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8018cb8:	f7fd fc92 	bl	80165e0 <USBD_GetString>
 8018cbc:	e004      	b.n	8018cc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018cbe:	683a      	ldr	r2, [r7, #0]
 8018cc0:	4904      	ldr	r1, [pc, #16]	; (8018cd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8018cc2:	4805      	ldr	r0, [pc, #20]	; (8018cd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8018cc4:	f7fd fc8c 	bl	80165e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018cc8:	4b02      	ldr	r3, [pc, #8]	; (8018cd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018cca:	4618      	mov	r0, r3
 8018ccc:	3708      	adds	r7, #8
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	bd80      	pop	{r7, pc}
 8018cd2:	bf00      	nop
 8018cd4:	20002690 	.word	0x20002690
 8018cd8:	0801c9a8 	.word	0x0801c9a8

08018cdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b082      	sub	sp, #8
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	6039      	str	r1, [r7, #0]
 8018ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018ce8:	683a      	ldr	r2, [r7, #0]
 8018cea:	4904      	ldr	r1, [pc, #16]	; (8018cfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018cec:	4804      	ldr	r0, [pc, #16]	; (8018d00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018cee:	f7fd fc77 	bl	80165e0 <USBD_GetString>
  return USBD_StrDesc;
 8018cf2:	4b02      	ldr	r3, [pc, #8]	; (8018cfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	3708      	adds	r7, #8
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd80      	pop	{r7, pc}
 8018cfc:	20002690 	.word	0x20002690
 8018d00:	0801c9c0 	.word	0x0801c9c0

08018d04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	6039      	str	r1, [r7, #0]
 8018d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	221a      	movs	r2, #26
 8018d14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018d16:	f000 f843 	bl	8018da0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018d1a:	4b02      	ldr	r3, [pc, #8]	; (8018d24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	3708      	adds	r7, #8
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}
 8018d24:	200000e4 	.word	0x200000e4

08018d28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b082      	sub	sp, #8
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	4603      	mov	r3, r0
 8018d30:	6039      	str	r1, [r7, #0]
 8018d32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018d34:	79fb      	ldrb	r3, [r7, #7]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d105      	bne.n	8018d46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d3a:	683a      	ldr	r2, [r7, #0]
 8018d3c:	4907      	ldr	r1, [pc, #28]	; (8018d5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d3e:	4808      	ldr	r0, [pc, #32]	; (8018d60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018d40:	f7fd fc4e 	bl	80165e0 <USBD_GetString>
 8018d44:	e004      	b.n	8018d50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d46:	683a      	ldr	r2, [r7, #0]
 8018d48:	4904      	ldr	r1, [pc, #16]	; (8018d5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d4a:	4805      	ldr	r0, [pc, #20]	; (8018d60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018d4c:	f7fd fc48 	bl	80165e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d50:	4b02      	ldr	r3, [pc, #8]	; (8018d5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018d52:	4618      	mov	r0, r3
 8018d54:	3708      	adds	r7, #8
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}
 8018d5a:	bf00      	nop
 8018d5c:	20002690 	.word	0x20002690
 8018d60:	0801c9d4 	.word	0x0801c9d4

08018d64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b082      	sub	sp, #8
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	6039      	str	r1, [r7, #0]
 8018d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018d70:	79fb      	ldrb	r3, [r7, #7]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d105      	bne.n	8018d82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018d76:	683a      	ldr	r2, [r7, #0]
 8018d78:	4907      	ldr	r1, [pc, #28]	; (8018d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018d7a:	4808      	ldr	r0, [pc, #32]	; (8018d9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018d7c:	f7fd fc30 	bl	80165e0 <USBD_GetString>
 8018d80:	e004      	b.n	8018d8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018d82:	683a      	ldr	r2, [r7, #0]
 8018d84:	4904      	ldr	r1, [pc, #16]	; (8018d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018d86:	4805      	ldr	r0, [pc, #20]	; (8018d9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018d88:	f7fd fc2a 	bl	80165e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d8c:	4b02      	ldr	r3, [pc, #8]	; (8018d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018d8e:	4618      	mov	r0, r3
 8018d90:	3708      	adds	r7, #8
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	bf00      	nop
 8018d98:	20002690 	.word	0x20002690
 8018d9c:	0801c9e0 	.word	0x0801c9e0

08018da0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b084      	sub	sp, #16
 8018da4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018da6:	4b0f      	ldr	r3, [pc, #60]	; (8018de4 <Get_SerialNum+0x44>)
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018dac:	4b0e      	ldr	r3, [pc, #56]	; (8018de8 <Get_SerialNum+0x48>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018db2:	4b0e      	ldr	r3, [pc, #56]	; (8018dec <Get_SerialNum+0x4c>)
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018db8:	68fa      	ldr	r2, [r7, #12]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	4413      	add	r3, r2
 8018dbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d009      	beq.n	8018dda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018dc6:	2208      	movs	r2, #8
 8018dc8:	4909      	ldr	r1, [pc, #36]	; (8018df0 <Get_SerialNum+0x50>)
 8018dca:	68f8      	ldr	r0, [r7, #12]
 8018dcc:	f000 f814 	bl	8018df8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018dd0:	2204      	movs	r2, #4
 8018dd2:	4908      	ldr	r1, [pc, #32]	; (8018df4 <Get_SerialNum+0x54>)
 8018dd4:	68b8      	ldr	r0, [r7, #8]
 8018dd6:	f000 f80f 	bl	8018df8 <IntToUnicode>
  }
}
 8018dda:	bf00      	nop
 8018ddc:	3710      	adds	r7, #16
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd80      	pop	{r7, pc}
 8018de2:	bf00      	nop
 8018de4:	1fff7590 	.word	0x1fff7590
 8018de8:	1fff7594 	.word	0x1fff7594
 8018dec:	1fff7598 	.word	0x1fff7598
 8018df0:	200000e6 	.word	0x200000e6
 8018df4:	200000f6 	.word	0x200000f6

08018df8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018df8:	b480      	push	{r7}
 8018dfa:	b087      	sub	sp, #28
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	60f8      	str	r0, [r7, #12]
 8018e00:	60b9      	str	r1, [r7, #8]
 8018e02:	4613      	mov	r3, r2
 8018e04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018e06:	2300      	movs	r3, #0
 8018e08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	75fb      	strb	r3, [r7, #23]
 8018e0e:	e027      	b.n	8018e60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	0f1b      	lsrs	r3, r3, #28
 8018e14:	2b09      	cmp	r3, #9
 8018e16:	d80b      	bhi.n	8018e30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	0f1b      	lsrs	r3, r3, #28
 8018e1c:	b2da      	uxtb	r2, r3
 8018e1e:	7dfb      	ldrb	r3, [r7, #23]
 8018e20:	005b      	lsls	r3, r3, #1
 8018e22:	4619      	mov	r1, r3
 8018e24:	68bb      	ldr	r3, [r7, #8]
 8018e26:	440b      	add	r3, r1
 8018e28:	3230      	adds	r2, #48	; 0x30
 8018e2a:	b2d2      	uxtb	r2, r2
 8018e2c:	701a      	strb	r2, [r3, #0]
 8018e2e:	e00a      	b.n	8018e46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	0f1b      	lsrs	r3, r3, #28
 8018e34:	b2da      	uxtb	r2, r3
 8018e36:	7dfb      	ldrb	r3, [r7, #23]
 8018e38:	005b      	lsls	r3, r3, #1
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	440b      	add	r3, r1
 8018e40:	3237      	adds	r2, #55	; 0x37
 8018e42:	b2d2      	uxtb	r2, r2
 8018e44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	011b      	lsls	r3, r3, #4
 8018e4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018e4c:	7dfb      	ldrb	r3, [r7, #23]
 8018e4e:	005b      	lsls	r3, r3, #1
 8018e50:	3301      	adds	r3, #1
 8018e52:	68ba      	ldr	r2, [r7, #8]
 8018e54:	4413      	add	r3, r2
 8018e56:	2200      	movs	r2, #0
 8018e58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018e5a:	7dfb      	ldrb	r3, [r7, #23]
 8018e5c:	3301      	adds	r3, #1
 8018e5e:	75fb      	strb	r3, [r7, #23]
 8018e60:	7dfa      	ldrb	r2, [r7, #23]
 8018e62:	79fb      	ldrb	r3, [r7, #7]
 8018e64:	429a      	cmp	r2, r3
 8018e66:	d3d3      	bcc.n	8018e10 <IntToUnicode+0x18>
  }
}
 8018e68:	bf00      	nop
 8018e6a:	bf00      	nop
 8018e6c:	371c      	adds	r7, #28
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e74:	4770      	bx	lr
	...

08018e78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b0b0      	sub	sp, #192	; 0xc0
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018e80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8018e84:	2200      	movs	r2, #0
 8018e86:	601a      	str	r2, [r3, #0]
 8018e88:	605a      	str	r2, [r3, #4]
 8018e8a:	609a      	str	r2, [r3, #8]
 8018e8c:	60da      	str	r2, [r3, #12]
 8018e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018e90:	f107 0318 	add.w	r3, r7, #24
 8018e94:	2294      	movs	r2, #148	; 0x94
 8018e96:	2100      	movs	r1, #0
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f000 fc15 	bl	80196c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018ea6:	d163      	bne.n	8018f70 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018eac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018eb4:	f107 0318 	add.w	r3, r7, #24
 8018eb8:	4618      	mov	r0, r3
 8018eba:	f7f2 fb59 	bl	800b570 <HAL_RCCEx_PeriphCLKConfig>
 8018ebe:	4603      	mov	r3, r0
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d001      	beq.n	8018ec8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8018ec4:	f7eb fd2c 	bl	8004920 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018ec8:	4b2b      	ldr	r3, [pc, #172]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ecc:	4a2a      	ldr	r2, [pc, #168]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018ece:	f043 0301 	orr.w	r3, r3, #1
 8018ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018ed4:	4b28      	ldr	r3, [pc, #160]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ed8:	f003 0301 	and.w	r3, r3, #1
 8018edc:	617b      	str	r3, [r7, #20]
 8018ede:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018ee0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ee8:	2302      	movs	r3, #2
 8018eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018eee:	2300      	movs	r3, #0
 8018ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018ef4:	2303      	movs	r3, #3
 8018ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018efa:	230a      	movs	r3, #10
 8018efc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8018f04:	4619      	mov	r1, r3
 8018f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018f0a:	f7ee fcdd 	bl	80078c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018f0e:	4b1a      	ldr	r3, [pc, #104]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f12:	4a19      	ldr	r2, [pc, #100]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018f1a:	4b17      	ldr	r3, [pc, #92]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018f22:	613b      	str	r3, [r7, #16]
 8018f24:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018f26:	4b14      	ldr	r3, [pc, #80]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d114      	bne.n	8018f5c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018f32:	4b11      	ldr	r3, [pc, #68]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f36:	4a10      	ldr	r2, [pc, #64]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8018f3e:	4b0e      	ldr	r3, [pc, #56]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018f46:	60fb      	str	r3, [r7, #12]
 8018f48:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8018f4a:	f7f1 fbfd 	bl	800a748 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8018f4e:	4b0a      	ldr	r3, [pc, #40]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f52:	4a09      	ldr	r2, [pc, #36]	; (8018f78 <HAL_PCD_MspInit+0x100>)
 8018f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018f58:	6593      	str	r3, [r2, #88]	; 0x58
 8018f5a:	e001      	b.n	8018f60 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8018f5c:	f7f1 fbf4 	bl	800a748 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018f60:	2200      	movs	r2, #0
 8018f62:	2100      	movs	r1, #0
 8018f64:	2043      	movs	r0, #67	; 0x43
 8018f66:	f7ee f94a 	bl	80071fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018f6a:	2043      	movs	r0, #67	; 0x43
 8018f6c:	f7ee f963 	bl	8007236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018f70:	bf00      	nop
 8018f72:	37c0      	adds	r7, #192	; 0xc0
 8018f74:	46bd      	mov	sp, r7
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	40021000 	.word	0x40021000

08018f7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b082      	sub	sp, #8
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018f90:	4619      	mov	r1, r3
 8018f92:	4610      	mov	r0, r2
 8018f94:	f7fc f9bf 	bl	8015316 <USBD_LL_SetupStage>
}
 8018f98:	bf00      	nop
 8018f9a:	3708      	adds	r7, #8
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}

08018fa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b082      	sub	sp, #8
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
 8018fa8:	460b      	mov	r3, r1
 8018faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018fb2:	78fa      	ldrb	r2, [r7, #3]
 8018fb4:	6879      	ldr	r1, [r7, #4]
 8018fb6:	4613      	mov	r3, r2
 8018fb8:	00db      	lsls	r3, r3, #3
 8018fba:	4413      	add	r3, r2
 8018fbc:	009b      	lsls	r3, r3, #2
 8018fbe:	440b      	add	r3, r1
 8018fc0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8018fc4:	681a      	ldr	r2, [r3, #0]
 8018fc6:	78fb      	ldrb	r3, [r7, #3]
 8018fc8:	4619      	mov	r1, r3
 8018fca:	f7fc f9f9 	bl	80153c0 <USBD_LL_DataOutStage>
}
 8018fce:	bf00      	nop
 8018fd0:	3708      	adds	r7, #8
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	bd80      	pop	{r7, pc}

08018fd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fd6:	b580      	push	{r7, lr}
 8018fd8:	b082      	sub	sp, #8
 8018fda:	af00      	add	r7, sp, #0
 8018fdc:	6078      	str	r0, [r7, #4]
 8018fde:	460b      	mov	r3, r1
 8018fe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018fe8:	78fa      	ldrb	r2, [r7, #3]
 8018fea:	6879      	ldr	r1, [r7, #4]
 8018fec:	4613      	mov	r3, r2
 8018fee:	00db      	lsls	r3, r3, #3
 8018ff0:	4413      	add	r3, r2
 8018ff2:	009b      	lsls	r3, r3, #2
 8018ff4:	440b      	add	r3, r1
 8018ff6:	3348      	adds	r3, #72	; 0x48
 8018ff8:	681a      	ldr	r2, [r3, #0]
 8018ffa:	78fb      	ldrb	r3, [r7, #3]
 8018ffc:	4619      	mov	r1, r3
 8018ffe:	f7fc fa92 	bl	8015526 <USBD_LL_DataInStage>
}
 8019002:	bf00      	nop
 8019004:	3708      	adds	r7, #8
 8019006:	46bd      	mov	sp, r7
 8019008:	bd80      	pop	{r7, pc}

0801900a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801900a:	b580      	push	{r7, lr}
 801900c:	b082      	sub	sp, #8
 801900e:	af00      	add	r7, sp, #0
 8019010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019018:	4618      	mov	r0, r3
 801901a:	f7fc fbcc 	bl	80157b6 <USBD_LL_SOF>
}
 801901e:	bf00      	nop
 8019020:	3708      	adds	r7, #8
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}

08019026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019026:	b580      	push	{r7, lr}
 8019028:	b084      	sub	sp, #16
 801902a:	af00      	add	r7, sp, #0
 801902c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801902e:	2301      	movs	r3, #1
 8019030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	691b      	ldr	r3, [r3, #16]
 8019036:	2b02      	cmp	r3, #2
 8019038:	d001      	beq.n	801903e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801903a:	f7eb fc71 	bl	8004920 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019044:	7bfa      	ldrb	r2, [r7, #15]
 8019046:	4611      	mov	r1, r2
 8019048:	4618      	mov	r0, r3
 801904a:	f7fc fb70 	bl	801572e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019054:	4618      	mov	r0, r3
 8019056:	f7fc fb18 	bl	801568a <USBD_LL_Reset>
}
 801905a:	bf00      	nop
 801905c:	3710      	adds	r7, #16
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}
	...

08019064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b082      	sub	sp, #8
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	687a      	ldr	r2, [r7, #4]
 8019078:	6812      	ldr	r2, [r2, #0]
 801907a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801907e:	f043 0301 	orr.w	r3, r3, #1
 8019082:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801908a:	4618      	mov	r0, r3
 801908c:	f7fc fb5f 	bl	801574e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6a1b      	ldr	r3, [r3, #32]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d005      	beq.n	80190a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019098:	4b04      	ldr	r3, [pc, #16]	; (80190ac <HAL_PCD_SuspendCallback+0x48>)
 801909a:	691b      	ldr	r3, [r3, #16]
 801909c:	4a03      	ldr	r2, [pc, #12]	; (80190ac <HAL_PCD_SuspendCallback+0x48>)
 801909e:	f043 0306 	orr.w	r3, r3, #6
 80190a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80190a4:	bf00      	nop
 80190a6:	3708      	adds	r7, #8
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}
 80190ac:	e000ed00 	.word	0xe000ed00

080190b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b082      	sub	sp, #8
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	687a      	ldr	r2, [r7, #4]
 80190c4:	6812      	ldr	r2, [r2, #0]
 80190c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80190ca:	f023 0301 	bic.w	r3, r3, #1
 80190ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	6a1b      	ldr	r3, [r3, #32]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d007      	beq.n	80190e8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80190d8:	4b08      	ldr	r3, [pc, #32]	; (80190fc <HAL_PCD_ResumeCallback+0x4c>)
 80190da:	691b      	ldr	r3, [r3, #16]
 80190dc:	4a07      	ldr	r2, [pc, #28]	; (80190fc <HAL_PCD_ResumeCallback+0x4c>)
 80190de:	f023 0306 	bic.w	r3, r3, #6
 80190e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80190e4:	f000 faa8 	bl	8019638 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80190ee:	4618      	mov	r0, r3
 80190f0:	f7fc fb49 	bl	8015786 <USBD_LL_Resume>
}
 80190f4:	bf00      	nop
 80190f6:	3708      	adds	r7, #8
 80190f8:	46bd      	mov	sp, r7
 80190fa:	bd80      	pop	{r7, pc}
 80190fc:	e000ed00 	.word	0xe000ed00

08019100 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b082      	sub	sp, #8
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
 8019108:	460b      	mov	r3, r1
 801910a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019112:	78fa      	ldrb	r2, [r7, #3]
 8019114:	4611      	mov	r1, r2
 8019116:	4618      	mov	r0, r3
 8019118:	f7fc fb9f 	bl	801585a <USBD_LL_IsoOUTIncomplete>
}
 801911c:	bf00      	nop
 801911e:	3708      	adds	r7, #8
 8019120:	46bd      	mov	sp, r7
 8019122:	bd80      	pop	{r7, pc}

08019124 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b082      	sub	sp, #8
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
 801912c:	460b      	mov	r3, r1
 801912e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019136:	78fa      	ldrb	r2, [r7, #3]
 8019138:	4611      	mov	r1, r2
 801913a:	4618      	mov	r0, r3
 801913c:	f7fc fb5b 	bl	80157f6 <USBD_LL_IsoINIncomplete>
}
 8019140:	bf00      	nop
 8019142:	3708      	adds	r7, #8
 8019144:	46bd      	mov	sp, r7
 8019146:	bd80      	pop	{r7, pc}

08019148 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b082      	sub	sp, #8
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019156:	4618      	mov	r0, r3
 8019158:	f7fc fbb1 	bl	80158be <USBD_LL_DevConnected>
}
 801915c:	bf00      	nop
 801915e:	3708      	adds	r7, #8
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}

08019164 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b082      	sub	sp, #8
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019172:	4618      	mov	r0, r3
 8019174:	f7fc fbae 	bl	80158d4 <USBD_LL_DevDisconnected>
}
 8019178:	bf00      	nop
 801917a:	3708      	adds	r7, #8
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}

08019180 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019180:	b580      	push	{r7, lr}
 8019182:	b082      	sub	sp, #8
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	781b      	ldrb	r3, [r3, #0]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d13c      	bne.n	801920a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019190:	4a20      	ldr	r2, [pc, #128]	; (8019214 <USBD_LL_Init+0x94>)
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	4a1e      	ldr	r2, [pc, #120]	; (8019214 <USBD_LL_Init+0x94>)
 801919c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80191a0:	4b1c      	ldr	r3, [pc, #112]	; (8019214 <USBD_LL_Init+0x94>)
 80191a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80191a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80191a8:	4b1a      	ldr	r3, [pc, #104]	; (8019214 <USBD_LL_Init+0x94>)
 80191aa:	2206      	movs	r2, #6
 80191ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80191ae:	4b19      	ldr	r3, [pc, #100]	; (8019214 <USBD_LL_Init+0x94>)
 80191b0:	2202      	movs	r2, #2
 80191b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80191b4:	4b17      	ldr	r3, [pc, #92]	; (8019214 <USBD_LL_Init+0x94>)
 80191b6:	2202      	movs	r2, #2
 80191b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80191ba:	4b16      	ldr	r3, [pc, #88]	; (8019214 <USBD_LL_Init+0x94>)
 80191bc:	2200      	movs	r2, #0
 80191be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80191c0:	4b14      	ldr	r3, [pc, #80]	; (8019214 <USBD_LL_Init+0x94>)
 80191c2:	2200      	movs	r2, #0
 80191c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80191c6:	4b13      	ldr	r3, [pc, #76]	; (8019214 <USBD_LL_Init+0x94>)
 80191c8:	2200      	movs	r2, #0
 80191ca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80191cc:	4b11      	ldr	r3, [pc, #68]	; (8019214 <USBD_LL_Init+0x94>)
 80191ce:	2200      	movs	r2, #0
 80191d0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80191d2:	4b10      	ldr	r3, [pc, #64]	; (8019214 <USBD_LL_Init+0x94>)
 80191d4:	2200      	movs	r2, #0
 80191d6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80191d8:	4b0e      	ldr	r3, [pc, #56]	; (8019214 <USBD_LL_Init+0x94>)
 80191da:	2200      	movs	r2, #0
 80191dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80191de:	480d      	ldr	r0, [pc, #52]	; (8019214 <USBD_LL_Init+0x94>)
 80191e0:	f7f0 f83b 	bl	800925a <HAL_PCD_Init>
 80191e4:	4603      	mov	r3, r0
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d001      	beq.n	80191ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80191ea:	f7eb fb99 	bl	8004920 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80191ee:	2180      	movs	r1, #128	; 0x80
 80191f0:	4808      	ldr	r0, [pc, #32]	; (8019214 <USBD_LL_Init+0x94>)
 80191f2:	f7f1 f9a4 	bl	800a53e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80191f6:	2240      	movs	r2, #64	; 0x40
 80191f8:	2100      	movs	r1, #0
 80191fa:	4806      	ldr	r0, [pc, #24]	; (8019214 <USBD_LL_Init+0x94>)
 80191fc:	f7f1 f958 	bl	800a4b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019200:	2280      	movs	r2, #128	; 0x80
 8019202:	2101      	movs	r1, #1
 8019204:	4803      	ldr	r0, [pc, #12]	; (8019214 <USBD_LL_Init+0x94>)
 8019206:	f7f1 f953 	bl	800a4b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801920a:	2300      	movs	r3, #0
}
 801920c:	4618      	mov	r0, r3
 801920e:	3708      	adds	r7, #8
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}
 8019214:	20002890 	.word	0x20002890

08019218 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b084      	sub	sp, #16
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019220:	2300      	movs	r3, #0
 8019222:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019224:	2300      	movs	r3, #0
 8019226:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801922e:	4618      	mov	r0, r3
 8019230:	f7f0 f937 	bl	80094a2 <HAL_PCD_Start>
 8019234:	4603      	mov	r3, r0
 8019236:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019238:	7bbb      	ldrb	r3, [r7, #14]
 801923a:	2b03      	cmp	r3, #3
 801923c:	d816      	bhi.n	801926c <USBD_LL_Start+0x54>
 801923e:	a201      	add	r2, pc, #4	; (adr r2, 8019244 <USBD_LL_Start+0x2c>)
 8019240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019244:	08019255 	.word	0x08019255
 8019248:	0801925b 	.word	0x0801925b
 801924c:	08019261 	.word	0x08019261
 8019250:	08019267 	.word	0x08019267
    case HAL_OK :
      usb_status = USBD_OK;
 8019254:	2300      	movs	r3, #0
 8019256:	73fb      	strb	r3, [r7, #15]
    break;
 8019258:	e00b      	b.n	8019272 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801925a:	2303      	movs	r3, #3
 801925c:	73fb      	strb	r3, [r7, #15]
    break;
 801925e:	e008      	b.n	8019272 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019260:	2301      	movs	r3, #1
 8019262:	73fb      	strb	r3, [r7, #15]
    break;
 8019264:	e005      	b.n	8019272 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019266:	2303      	movs	r3, #3
 8019268:	73fb      	strb	r3, [r7, #15]
    break;
 801926a:	e002      	b.n	8019272 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801926c:	2303      	movs	r3, #3
 801926e:	73fb      	strb	r3, [r7, #15]
    break;
 8019270:	bf00      	nop
  }
  return usb_status;
 8019272:	7bfb      	ldrb	r3, [r7, #15]
}
 8019274:	4618      	mov	r0, r3
 8019276:	3710      	adds	r7, #16
 8019278:	46bd      	mov	sp, r7
 801927a:	bd80      	pop	{r7, pc}

0801927c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b084      	sub	sp, #16
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
 8019284:	4608      	mov	r0, r1
 8019286:	4611      	mov	r1, r2
 8019288:	461a      	mov	r2, r3
 801928a:	4603      	mov	r3, r0
 801928c:	70fb      	strb	r3, [r7, #3]
 801928e:	460b      	mov	r3, r1
 8019290:	70bb      	strb	r3, [r7, #2]
 8019292:	4613      	mov	r3, r2
 8019294:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019296:	2300      	movs	r3, #0
 8019298:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801929a:	2300      	movs	r3, #0
 801929c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80192a4:	78bb      	ldrb	r3, [r7, #2]
 80192a6:	883a      	ldrh	r2, [r7, #0]
 80192a8:	78f9      	ldrb	r1, [r7, #3]
 80192aa:	f7f0 fde1 	bl	8009e70 <HAL_PCD_EP_Open>
 80192ae:	4603      	mov	r3, r0
 80192b0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80192b2:	7bbb      	ldrb	r3, [r7, #14]
 80192b4:	2b03      	cmp	r3, #3
 80192b6:	d817      	bhi.n	80192e8 <USBD_LL_OpenEP+0x6c>
 80192b8:	a201      	add	r2, pc, #4	; (adr r2, 80192c0 <USBD_LL_OpenEP+0x44>)
 80192ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192be:	bf00      	nop
 80192c0:	080192d1 	.word	0x080192d1
 80192c4:	080192d7 	.word	0x080192d7
 80192c8:	080192dd 	.word	0x080192dd
 80192cc:	080192e3 	.word	0x080192e3
    case HAL_OK :
      usb_status = USBD_OK;
 80192d0:	2300      	movs	r3, #0
 80192d2:	73fb      	strb	r3, [r7, #15]
    break;
 80192d4:	e00b      	b.n	80192ee <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80192d6:	2303      	movs	r3, #3
 80192d8:	73fb      	strb	r3, [r7, #15]
    break;
 80192da:	e008      	b.n	80192ee <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80192dc:	2301      	movs	r3, #1
 80192de:	73fb      	strb	r3, [r7, #15]
    break;
 80192e0:	e005      	b.n	80192ee <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80192e2:	2303      	movs	r3, #3
 80192e4:	73fb      	strb	r3, [r7, #15]
    break;
 80192e6:	e002      	b.n	80192ee <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80192e8:	2303      	movs	r3, #3
 80192ea:	73fb      	strb	r3, [r7, #15]
    break;
 80192ec:	bf00      	nop
  }
  return usb_status;
 80192ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80192f0:	4618      	mov	r0, r3
 80192f2:	3710      	adds	r7, #16
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bd80      	pop	{r7, pc}

080192f8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b084      	sub	sp, #16
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
 8019300:	460b      	mov	r3, r1
 8019302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019304:	2300      	movs	r3, #0
 8019306:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019308:	2300      	movs	r3, #0
 801930a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019312:	78fa      	ldrb	r2, [r7, #3]
 8019314:	4611      	mov	r1, r2
 8019316:	4618      	mov	r0, r3
 8019318:	f7f0 fe12 	bl	8009f40 <HAL_PCD_EP_Close>
 801931c:	4603      	mov	r3, r0
 801931e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019320:	7bbb      	ldrb	r3, [r7, #14]
 8019322:	2b03      	cmp	r3, #3
 8019324:	d816      	bhi.n	8019354 <USBD_LL_CloseEP+0x5c>
 8019326:	a201      	add	r2, pc, #4	; (adr r2, 801932c <USBD_LL_CloseEP+0x34>)
 8019328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801932c:	0801933d 	.word	0x0801933d
 8019330:	08019343 	.word	0x08019343
 8019334:	08019349 	.word	0x08019349
 8019338:	0801934f 	.word	0x0801934f
    case HAL_OK :
      usb_status = USBD_OK;
 801933c:	2300      	movs	r3, #0
 801933e:	73fb      	strb	r3, [r7, #15]
    break;
 8019340:	e00b      	b.n	801935a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019342:	2303      	movs	r3, #3
 8019344:	73fb      	strb	r3, [r7, #15]
    break;
 8019346:	e008      	b.n	801935a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019348:	2301      	movs	r3, #1
 801934a:	73fb      	strb	r3, [r7, #15]
    break;
 801934c:	e005      	b.n	801935a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801934e:	2303      	movs	r3, #3
 8019350:	73fb      	strb	r3, [r7, #15]
    break;
 8019352:	e002      	b.n	801935a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019354:	2303      	movs	r3, #3
 8019356:	73fb      	strb	r3, [r7, #15]
    break;
 8019358:	bf00      	nop
  }
  return usb_status;
 801935a:	7bfb      	ldrb	r3, [r7, #15]
}
 801935c:	4618      	mov	r0, r3
 801935e:	3710      	adds	r7, #16
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}

08019364 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b084      	sub	sp, #16
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
 801936c:	460b      	mov	r3, r1
 801936e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019370:	2300      	movs	r3, #0
 8019372:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019374:	2300      	movs	r3, #0
 8019376:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801937e:	78fa      	ldrb	r2, [r7, #3]
 8019380:	4611      	mov	r1, r2
 8019382:	4618      	mov	r0, r3
 8019384:	f7f0 fea1 	bl	800a0ca <HAL_PCD_EP_SetStall>
 8019388:	4603      	mov	r3, r0
 801938a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801938c:	7bbb      	ldrb	r3, [r7, #14]
 801938e:	2b03      	cmp	r3, #3
 8019390:	d816      	bhi.n	80193c0 <USBD_LL_StallEP+0x5c>
 8019392:	a201      	add	r2, pc, #4	; (adr r2, 8019398 <USBD_LL_StallEP+0x34>)
 8019394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019398:	080193a9 	.word	0x080193a9
 801939c:	080193af 	.word	0x080193af
 80193a0:	080193b5 	.word	0x080193b5
 80193a4:	080193bb 	.word	0x080193bb
    case HAL_OK :
      usb_status = USBD_OK;
 80193a8:	2300      	movs	r3, #0
 80193aa:	73fb      	strb	r3, [r7, #15]
    break;
 80193ac:	e00b      	b.n	80193c6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80193ae:	2303      	movs	r3, #3
 80193b0:	73fb      	strb	r3, [r7, #15]
    break;
 80193b2:	e008      	b.n	80193c6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80193b4:	2301      	movs	r3, #1
 80193b6:	73fb      	strb	r3, [r7, #15]
    break;
 80193b8:	e005      	b.n	80193c6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80193ba:	2303      	movs	r3, #3
 80193bc:	73fb      	strb	r3, [r7, #15]
    break;
 80193be:	e002      	b.n	80193c6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80193c0:	2303      	movs	r3, #3
 80193c2:	73fb      	strb	r3, [r7, #15]
    break;
 80193c4:	bf00      	nop
  }
  return usb_status;
 80193c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80193c8:	4618      	mov	r0, r3
 80193ca:	3710      	adds	r7, #16
 80193cc:	46bd      	mov	sp, r7
 80193ce:	bd80      	pop	{r7, pc}

080193d0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b084      	sub	sp, #16
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
 80193d8:	460b      	mov	r3, r1
 80193da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193dc:	2300      	movs	r3, #0
 80193de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193e0:	2300      	movs	r3, #0
 80193e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193ea:	78fa      	ldrb	r2, [r7, #3]
 80193ec:	4611      	mov	r1, r2
 80193ee:	4618      	mov	r0, r3
 80193f0:	f7f0 fecd 	bl	800a18e <HAL_PCD_EP_ClrStall>
 80193f4:	4603      	mov	r3, r0
 80193f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80193f8:	7bbb      	ldrb	r3, [r7, #14]
 80193fa:	2b03      	cmp	r3, #3
 80193fc:	d816      	bhi.n	801942c <USBD_LL_ClearStallEP+0x5c>
 80193fe:	a201      	add	r2, pc, #4	; (adr r2, 8019404 <USBD_LL_ClearStallEP+0x34>)
 8019400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019404:	08019415 	.word	0x08019415
 8019408:	0801941b 	.word	0x0801941b
 801940c:	08019421 	.word	0x08019421
 8019410:	08019427 	.word	0x08019427
    case HAL_OK :
      usb_status = USBD_OK;
 8019414:	2300      	movs	r3, #0
 8019416:	73fb      	strb	r3, [r7, #15]
    break;
 8019418:	e00b      	b.n	8019432 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801941a:	2303      	movs	r3, #3
 801941c:	73fb      	strb	r3, [r7, #15]
    break;
 801941e:	e008      	b.n	8019432 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019420:	2301      	movs	r3, #1
 8019422:	73fb      	strb	r3, [r7, #15]
    break;
 8019424:	e005      	b.n	8019432 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019426:	2303      	movs	r3, #3
 8019428:	73fb      	strb	r3, [r7, #15]
    break;
 801942a:	e002      	b.n	8019432 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801942c:	2303      	movs	r3, #3
 801942e:	73fb      	strb	r3, [r7, #15]
    break;
 8019430:	bf00      	nop
  }
  return usb_status;
 8019432:	7bfb      	ldrb	r3, [r7, #15]
}
 8019434:	4618      	mov	r0, r3
 8019436:	3710      	adds	r7, #16
 8019438:	46bd      	mov	sp, r7
 801943a:	bd80      	pop	{r7, pc}

0801943c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801943c:	b480      	push	{r7}
 801943e:	b085      	sub	sp, #20
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
 8019444:	460b      	mov	r3, r1
 8019446:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801944e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019454:	2b00      	cmp	r3, #0
 8019456:	da0b      	bge.n	8019470 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019458:	78fb      	ldrb	r3, [r7, #3]
 801945a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801945e:	68f9      	ldr	r1, [r7, #12]
 8019460:	4613      	mov	r3, r2
 8019462:	00db      	lsls	r3, r3, #3
 8019464:	4413      	add	r3, r2
 8019466:	009b      	lsls	r3, r3, #2
 8019468:	440b      	add	r3, r1
 801946a:	333e      	adds	r3, #62	; 0x3e
 801946c:	781b      	ldrb	r3, [r3, #0]
 801946e:	e00b      	b.n	8019488 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019470:	78fb      	ldrb	r3, [r7, #3]
 8019472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019476:	68f9      	ldr	r1, [r7, #12]
 8019478:	4613      	mov	r3, r2
 801947a:	00db      	lsls	r3, r3, #3
 801947c:	4413      	add	r3, r2
 801947e:	009b      	lsls	r3, r3, #2
 8019480:	440b      	add	r3, r1
 8019482:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8019486:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019488:	4618      	mov	r0, r3
 801948a:	3714      	adds	r7, #20
 801948c:	46bd      	mov	sp, r7
 801948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019492:	4770      	bx	lr

08019494 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b084      	sub	sp, #16
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
 801949c:	460b      	mov	r3, r1
 801949e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194a0:	2300      	movs	r3, #0
 80194a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194a4:	2300      	movs	r3, #0
 80194a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80194ae:	78fa      	ldrb	r2, [r7, #3]
 80194b0:	4611      	mov	r1, r2
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7f0 fcb7 	bl	8009e26 <HAL_PCD_SetAddress>
 80194b8:	4603      	mov	r3, r0
 80194ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80194bc:	7bbb      	ldrb	r3, [r7, #14]
 80194be:	2b03      	cmp	r3, #3
 80194c0:	d816      	bhi.n	80194f0 <USBD_LL_SetUSBAddress+0x5c>
 80194c2:	a201      	add	r2, pc, #4	; (adr r2, 80194c8 <USBD_LL_SetUSBAddress+0x34>)
 80194c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194c8:	080194d9 	.word	0x080194d9
 80194cc:	080194df 	.word	0x080194df
 80194d0:	080194e5 	.word	0x080194e5
 80194d4:	080194eb 	.word	0x080194eb
    case HAL_OK :
      usb_status = USBD_OK;
 80194d8:	2300      	movs	r3, #0
 80194da:	73fb      	strb	r3, [r7, #15]
    break;
 80194dc:	e00b      	b.n	80194f6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80194de:	2303      	movs	r3, #3
 80194e0:	73fb      	strb	r3, [r7, #15]
    break;
 80194e2:	e008      	b.n	80194f6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80194e4:	2301      	movs	r3, #1
 80194e6:	73fb      	strb	r3, [r7, #15]
    break;
 80194e8:	e005      	b.n	80194f6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80194ea:	2303      	movs	r3, #3
 80194ec:	73fb      	strb	r3, [r7, #15]
    break;
 80194ee:	e002      	b.n	80194f6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80194f0:	2303      	movs	r3, #3
 80194f2:	73fb      	strb	r3, [r7, #15]
    break;
 80194f4:	bf00      	nop
  }
  return usb_status;
 80194f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80194f8:	4618      	mov	r0, r3
 80194fa:	3710      	adds	r7, #16
 80194fc:	46bd      	mov	sp, r7
 80194fe:	bd80      	pop	{r7, pc}

08019500 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b086      	sub	sp, #24
 8019504:	af00      	add	r7, sp, #0
 8019506:	60f8      	str	r0, [r7, #12]
 8019508:	607a      	str	r2, [r7, #4]
 801950a:	603b      	str	r3, [r7, #0]
 801950c:	460b      	mov	r3, r1
 801950e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019510:	2300      	movs	r3, #0
 8019512:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019514:	2300      	movs	r3, #0
 8019516:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801951e:	7af9      	ldrb	r1, [r7, #11]
 8019520:	683b      	ldr	r3, [r7, #0]
 8019522:	687a      	ldr	r2, [r7, #4]
 8019524:	f7f0 fda0 	bl	800a068 <HAL_PCD_EP_Transmit>
 8019528:	4603      	mov	r3, r0
 801952a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801952c:	7dbb      	ldrb	r3, [r7, #22]
 801952e:	2b03      	cmp	r3, #3
 8019530:	d816      	bhi.n	8019560 <USBD_LL_Transmit+0x60>
 8019532:	a201      	add	r2, pc, #4	; (adr r2, 8019538 <USBD_LL_Transmit+0x38>)
 8019534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019538:	08019549 	.word	0x08019549
 801953c:	0801954f 	.word	0x0801954f
 8019540:	08019555 	.word	0x08019555
 8019544:	0801955b 	.word	0x0801955b
    case HAL_OK :
      usb_status = USBD_OK;
 8019548:	2300      	movs	r3, #0
 801954a:	75fb      	strb	r3, [r7, #23]
    break;
 801954c:	e00b      	b.n	8019566 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801954e:	2303      	movs	r3, #3
 8019550:	75fb      	strb	r3, [r7, #23]
    break;
 8019552:	e008      	b.n	8019566 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019554:	2301      	movs	r3, #1
 8019556:	75fb      	strb	r3, [r7, #23]
    break;
 8019558:	e005      	b.n	8019566 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801955a:	2303      	movs	r3, #3
 801955c:	75fb      	strb	r3, [r7, #23]
    break;
 801955e:	e002      	b.n	8019566 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019560:	2303      	movs	r3, #3
 8019562:	75fb      	strb	r3, [r7, #23]
    break;
 8019564:	bf00      	nop
  }
  return usb_status;
 8019566:	7dfb      	ldrb	r3, [r7, #23]
}
 8019568:	4618      	mov	r0, r3
 801956a:	3718      	adds	r7, #24
 801956c:	46bd      	mov	sp, r7
 801956e:	bd80      	pop	{r7, pc}

08019570 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b086      	sub	sp, #24
 8019574:	af00      	add	r7, sp, #0
 8019576:	60f8      	str	r0, [r7, #12]
 8019578:	607a      	str	r2, [r7, #4]
 801957a:	603b      	str	r3, [r7, #0]
 801957c:	460b      	mov	r3, r1
 801957e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019580:	2300      	movs	r3, #0
 8019582:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019584:	2300      	movs	r3, #0
 8019586:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801958e:	7af9      	ldrb	r1, [r7, #11]
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	687a      	ldr	r2, [r7, #4]
 8019594:	f7f0 fd1e 	bl	8009fd4 <HAL_PCD_EP_Receive>
 8019598:	4603      	mov	r3, r0
 801959a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801959c:	7dbb      	ldrb	r3, [r7, #22]
 801959e:	2b03      	cmp	r3, #3
 80195a0:	d816      	bhi.n	80195d0 <USBD_LL_PrepareReceive+0x60>
 80195a2:	a201      	add	r2, pc, #4	; (adr r2, 80195a8 <USBD_LL_PrepareReceive+0x38>)
 80195a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195a8:	080195b9 	.word	0x080195b9
 80195ac:	080195bf 	.word	0x080195bf
 80195b0:	080195c5 	.word	0x080195c5
 80195b4:	080195cb 	.word	0x080195cb
    case HAL_OK :
      usb_status = USBD_OK;
 80195b8:	2300      	movs	r3, #0
 80195ba:	75fb      	strb	r3, [r7, #23]
    break;
 80195bc:	e00b      	b.n	80195d6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80195be:	2303      	movs	r3, #3
 80195c0:	75fb      	strb	r3, [r7, #23]
    break;
 80195c2:	e008      	b.n	80195d6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80195c4:	2301      	movs	r3, #1
 80195c6:	75fb      	strb	r3, [r7, #23]
    break;
 80195c8:	e005      	b.n	80195d6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80195ca:	2303      	movs	r3, #3
 80195cc:	75fb      	strb	r3, [r7, #23]
    break;
 80195ce:	e002      	b.n	80195d6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80195d0:	2303      	movs	r3, #3
 80195d2:	75fb      	strb	r3, [r7, #23]
    break;
 80195d4:	bf00      	nop
  }
  return usb_status;
 80195d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80195d8:	4618      	mov	r0, r3
 80195da:	3718      	adds	r7, #24
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd80      	pop	{r7, pc}

080195e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b082      	sub	sp, #8
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
 80195e8:	460b      	mov	r3, r1
 80195ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80195f2:	78fa      	ldrb	r2, [r7, #3]
 80195f4:	4611      	mov	r1, r2
 80195f6:	4618      	mov	r0, r3
 80195f8:	f7f0 fd1e 	bl	800a038 <HAL_PCD_EP_GetRxCount>
 80195fc:	4603      	mov	r3, r0
}
 80195fe:	4618      	mov	r0, r3
 8019600:	3708      	adds	r7, #8
 8019602:	46bd      	mov	sp, r7
 8019604:	bd80      	pop	{r7, pc}
	...

08019608 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019608:	b480      	push	{r7}
 801960a:	b083      	sub	sp, #12
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019610:	4b03      	ldr	r3, [pc, #12]	; (8019620 <USBD_static_malloc+0x18>)
}
 8019612:	4618      	mov	r0, r3
 8019614:	370c      	adds	r7, #12
 8019616:	46bd      	mov	sp, r7
 8019618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801961c:	4770      	bx	lr
 801961e:	bf00      	nop
 8019620:	20002d9c 	.word	0x20002d9c

08019624 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019624:	b480      	push	{r7}
 8019626:	b083      	sub	sp, #12
 8019628:	af00      	add	r7, sp, #0
 801962a:	6078      	str	r0, [r7, #4]

}
 801962c:	bf00      	nop
 801962e:	370c      	adds	r7, #12
 8019630:	46bd      	mov	sp, r7
 8019632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019636:	4770      	bx	lr

08019638 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801963c:	f7ea fe3e 	bl	80042bc <SystemClock_Config>
}
 8019640:	bf00      	nop
 8019642:	bd80      	pop	{r7, pc}

08019644 <__libc_init_array>:
 8019644:	b570      	push	{r4, r5, r6, lr}
 8019646:	4d0d      	ldr	r5, [pc, #52]	; (801967c <__libc_init_array+0x38>)
 8019648:	4c0d      	ldr	r4, [pc, #52]	; (8019680 <__libc_init_array+0x3c>)
 801964a:	1b64      	subs	r4, r4, r5
 801964c:	10a4      	asrs	r4, r4, #2
 801964e:	2600      	movs	r6, #0
 8019650:	42a6      	cmp	r6, r4
 8019652:	d109      	bne.n	8019668 <__libc_init_array+0x24>
 8019654:	4d0b      	ldr	r5, [pc, #44]	; (8019684 <__libc_init_array+0x40>)
 8019656:	4c0c      	ldr	r4, [pc, #48]	; (8019688 <__libc_init_array+0x44>)
 8019658:	f003 f806 	bl	801c668 <_init>
 801965c:	1b64      	subs	r4, r4, r5
 801965e:	10a4      	asrs	r4, r4, #2
 8019660:	2600      	movs	r6, #0
 8019662:	42a6      	cmp	r6, r4
 8019664:	d105      	bne.n	8019672 <__libc_init_array+0x2e>
 8019666:	bd70      	pop	{r4, r5, r6, pc}
 8019668:	f855 3b04 	ldr.w	r3, [r5], #4
 801966c:	4798      	blx	r3
 801966e:	3601      	adds	r6, #1
 8019670:	e7ee      	b.n	8019650 <__libc_init_array+0xc>
 8019672:	f855 3b04 	ldr.w	r3, [r5], #4
 8019676:	4798      	blx	r3
 8019678:	3601      	adds	r6, #1
 801967a:	e7f2      	b.n	8019662 <__libc_init_array+0x1e>
 801967c:	0801d138 	.word	0x0801d138
 8019680:	0801d138 	.word	0x0801d138
 8019684:	0801d138 	.word	0x0801d138
 8019688:	0801d13c 	.word	0x0801d13c

0801968c <malloc>:
 801968c:	4b02      	ldr	r3, [pc, #8]	; (8019698 <malloc+0xc>)
 801968e:	4601      	mov	r1, r0
 8019690:	6818      	ldr	r0, [r3, #0]
 8019692:	f000 b88d 	b.w	80197b0 <_malloc_r>
 8019696:	bf00      	nop
 8019698:	20000100 	.word	0x20000100

0801969c <free>:
 801969c:	4b02      	ldr	r3, [pc, #8]	; (80196a8 <free+0xc>)
 801969e:	4601      	mov	r1, r0
 80196a0:	6818      	ldr	r0, [r3, #0]
 80196a2:	f000 b819 	b.w	80196d8 <_free_r>
 80196a6:	bf00      	nop
 80196a8:	20000100 	.word	0x20000100

080196ac <memcpy>:
 80196ac:	440a      	add	r2, r1
 80196ae:	4291      	cmp	r1, r2
 80196b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80196b4:	d100      	bne.n	80196b8 <memcpy+0xc>
 80196b6:	4770      	bx	lr
 80196b8:	b510      	push	{r4, lr}
 80196ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80196be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80196c2:	4291      	cmp	r1, r2
 80196c4:	d1f9      	bne.n	80196ba <memcpy+0xe>
 80196c6:	bd10      	pop	{r4, pc}

080196c8 <memset>:
 80196c8:	4402      	add	r2, r0
 80196ca:	4603      	mov	r3, r0
 80196cc:	4293      	cmp	r3, r2
 80196ce:	d100      	bne.n	80196d2 <memset+0xa>
 80196d0:	4770      	bx	lr
 80196d2:	f803 1b01 	strb.w	r1, [r3], #1
 80196d6:	e7f9      	b.n	80196cc <memset+0x4>

080196d8 <_free_r>:
 80196d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196da:	2900      	cmp	r1, #0
 80196dc:	d044      	beq.n	8019768 <_free_r+0x90>
 80196de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196e2:	9001      	str	r0, [sp, #4]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	f1a1 0404 	sub.w	r4, r1, #4
 80196ea:	bfb8      	it	lt
 80196ec:	18e4      	addlt	r4, r4, r3
 80196ee:	f001 fdcf 	bl	801b290 <__malloc_lock>
 80196f2:	4a1e      	ldr	r2, [pc, #120]	; (801976c <_free_r+0x94>)
 80196f4:	9801      	ldr	r0, [sp, #4]
 80196f6:	6813      	ldr	r3, [r2, #0]
 80196f8:	b933      	cbnz	r3, 8019708 <_free_r+0x30>
 80196fa:	6063      	str	r3, [r4, #4]
 80196fc:	6014      	str	r4, [r2, #0]
 80196fe:	b003      	add	sp, #12
 8019700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019704:	f001 bdca 	b.w	801b29c <__malloc_unlock>
 8019708:	42a3      	cmp	r3, r4
 801970a:	d908      	bls.n	801971e <_free_r+0x46>
 801970c:	6825      	ldr	r5, [r4, #0]
 801970e:	1961      	adds	r1, r4, r5
 8019710:	428b      	cmp	r3, r1
 8019712:	bf01      	itttt	eq
 8019714:	6819      	ldreq	r1, [r3, #0]
 8019716:	685b      	ldreq	r3, [r3, #4]
 8019718:	1949      	addeq	r1, r1, r5
 801971a:	6021      	streq	r1, [r4, #0]
 801971c:	e7ed      	b.n	80196fa <_free_r+0x22>
 801971e:	461a      	mov	r2, r3
 8019720:	685b      	ldr	r3, [r3, #4]
 8019722:	b10b      	cbz	r3, 8019728 <_free_r+0x50>
 8019724:	42a3      	cmp	r3, r4
 8019726:	d9fa      	bls.n	801971e <_free_r+0x46>
 8019728:	6811      	ldr	r1, [r2, #0]
 801972a:	1855      	adds	r5, r2, r1
 801972c:	42a5      	cmp	r5, r4
 801972e:	d10b      	bne.n	8019748 <_free_r+0x70>
 8019730:	6824      	ldr	r4, [r4, #0]
 8019732:	4421      	add	r1, r4
 8019734:	1854      	adds	r4, r2, r1
 8019736:	42a3      	cmp	r3, r4
 8019738:	6011      	str	r1, [r2, #0]
 801973a:	d1e0      	bne.n	80196fe <_free_r+0x26>
 801973c:	681c      	ldr	r4, [r3, #0]
 801973e:	685b      	ldr	r3, [r3, #4]
 8019740:	6053      	str	r3, [r2, #4]
 8019742:	4421      	add	r1, r4
 8019744:	6011      	str	r1, [r2, #0]
 8019746:	e7da      	b.n	80196fe <_free_r+0x26>
 8019748:	d902      	bls.n	8019750 <_free_r+0x78>
 801974a:	230c      	movs	r3, #12
 801974c:	6003      	str	r3, [r0, #0]
 801974e:	e7d6      	b.n	80196fe <_free_r+0x26>
 8019750:	6825      	ldr	r5, [r4, #0]
 8019752:	1961      	adds	r1, r4, r5
 8019754:	428b      	cmp	r3, r1
 8019756:	bf04      	itt	eq
 8019758:	6819      	ldreq	r1, [r3, #0]
 801975a:	685b      	ldreq	r3, [r3, #4]
 801975c:	6063      	str	r3, [r4, #4]
 801975e:	bf04      	itt	eq
 8019760:	1949      	addeq	r1, r1, r5
 8019762:	6021      	streq	r1, [r4, #0]
 8019764:	6054      	str	r4, [r2, #4]
 8019766:	e7ca      	b.n	80196fe <_free_r+0x26>
 8019768:	b003      	add	sp, #12
 801976a:	bd30      	pop	{r4, r5, pc}
 801976c:	20002fbc 	.word	0x20002fbc

08019770 <sbrk_aligned>:
 8019770:	b570      	push	{r4, r5, r6, lr}
 8019772:	4e0e      	ldr	r6, [pc, #56]	; (80197ac <sbrk_aligned+0x3c>)
 8019774:	460c      	mov	r4, r1
 8019776:	6831      	ldr	r1, [r6, #0]
 8019778:	4605      	mov	r5, r0
 801977a:	b911      	cbnz	r1, 8019782 <sbrk_aligned+0x12>
 801977c:	f000 fd0e 	bl	801a19c <_sbrk_r>
 8019780:	6030      	str	r0, [r6, #0]
 8019782:	4621      	mov	r1, r4
 8019784:	4628      	mov	r0, r5
 8019786:	f000 fd09 	bl	801a19c <_sbrk_r>
 801978a:	1c43      	adds	r3, r0, #1
 801978c:	d00a      	beq.n	80197a4 <sbrk_aligned+0x34>
 801978e:	1cc4      	adds	r4, r0, #3
 8019790:	f024 0403 	bic.w	r4, r4, #3
 8019794:	42a0      	cmp	r0, r4
 8019796:	d007      	beq.n	80197a8 <sbrk_aligned+0x38>
 8019798:	1a21      	subs	r1, r4, r0
 801979a:	4628      	mov	r0, r5
 801979c:	f000 fcfe 	bl	801a19c <_sbrk_r>
 80197a0:	3001      	adds	r0, #1
 80197a2:	d101      	bne.n	80197a8 <sbrk_aligned+0x38>
 80197a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80197a8:	4620      	mov	r0, r4
 80197aa:	bd70      	pop	{r4, r5, r6, pc}
 80197ac:	20002fc0 	.word	0x20002fc0

080197b0 <_malloc_r>:
 80197b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197b4:	1ccd      	adds	r5, r1, #3
 80197b6:	f025 0503 	bic.w	r5, r5, #3
 80197ba:	3508      	adds	r5, #8
 80197bc:	2d0c      	cmp	r5, #12
 80197be:	bf38      	it	cc
 80197c0:	250c      	movcc	r5, #12
 80197c2:	2d00      	cmp	r5, #0
 80197c4:	4607      	mov	r7, r0
 80197c6:	db01      	blt.n	80197cc <_malloc_r+0x1c>
 80197c8:	42a9      	cmp	r1, r5
 80197ca:	d905      	bls.n	80197d8 <_malloc_r+0x28>
 80197cc:	230c      	movs	r3, #12
 80197ce:	603b      	str	r3, [r7, #0]
 80197d0:	2600      	movs	r6, #0
 80197d2:	4630      	mov	r0, r6
 80197d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197d8:	4e2e      	ldr	r6, [pc, #184]	; (8019894 <_malloc_r+0xe4>)
 80197da:	f001 fd59 	bl	801b290 <__malloc_lock>
 80197de:	6833      	ldr	r3, [r6, #0]
 80197e0:	461c      	mov	r4, r3
 80197e2:	bb34      	cbnz	r4, 8019832 <_malloc_r+0x82>
 80197e4:	4629      	mov	r1, r5
 80197e6:	4638      	mov	r0, r7
 80197e8:	f7ff ffc2 	bl	8019770 <sbrk_aligned>
 80197ec:	1c43      	adds	r3, r0, #1
 80197ee:	4604      	mov	r4, r0
 80197f0:	d14d      	bne.n	801988e <_malloc_r+0xde>
 80197f2:	6834      	ldr	r4, [r6, #0]
 80197f4:	4626      	mov	r6, r4
 80197f6:	2e00      	cmp	r6, #0
 80197f8:	d140      	bne.n	801987c <_malloc_r+0xcc>
 80197fa:	6823      	ldr	r3, [r4, #0]
 80197fc:	4631      	mov	r1, r6
 80197fe:	4638      	mov	r0, r7
 8019800:	eb04 0803 	add.w	r8, r4, r3
 8019804:	f000 fcca 	bl	801a19c <_sbrk_r>
 8019808:	4580      	cmp	r8, r0
 801980a:	d13a      	bne.n	8019882 <_malloc_r+0xd2>
 801980c:	6821      	ldr	r1, [r4, #0]
 801980e:	3503      	adds	r5, #3
 8019810:	1a6d      	subs	r5, r5, r1
 8019812:	f025 0503 	bic.w	r5, r5, #3
 8019816:	3508      	adds	r5, #8
 8019818:	2d0c      	cmp	r5, #12
 801981a:	bf38      	it	cc
 801981c:	250c      	movcc	r5, #12
 801981e:	4629      	mov	r1, r5
 8019820:	4638      	mov	r0, r7
 8019822:	f7ff ffa5 	bl	8019770 <sbrk_aligned>
 8019826:	3001      	adds	r0, #1
 8019828:	d02b      	beq.n	8019882 <_malloc_r+0xd2>
 801982a:	6823      	ldr	r3, [r4, #0]
 801982c:	442b      	add	r3, r5
 801982e:	6023      	str	r3, [r4, #0]
 8019830:	e00e      	b.n	8019850 <_malloc_r+0xa0>
 8019832:	6822      	ldr	r2, [r4, #0]
 8019834:	1b52      	subs	r2, r2, r5
 8019836:	d41e      	bmi.n	8019876 <_malloc_r+0xc6>
 8019838:	2a0b      	cmp	r2, #11
 801983a:	d916      	bls.n	801986a <_malloc_r+0xba>
 801983c:	1961      	adds	r1, r4, r5
 801983e:	42a3      	cmp	r3, r4
 8019840:	6025      	str	r5, [r4, #0]
 8019842:	bf18      	it	ne
 8019844:	6059      	strne	r1, [r3, #4]
 8019846:	6863      	ldr	r3, [r4, #4]
 8019848:	bf08      	it	eq
 801984a:	6031      	streq	r1, [r6, #0]
 801984c:	5162      	str	r2, [r4, r5]
 801984e:	604b      	str	r3, [r1, #4]
 8019850:	4638      	mov	r0, r7
 8019852:	f104 060b 	add.w	r6, r4, #11
 8019856:	f001 fd21 	bl	801b29c <__malloc_unlock>
 801985a:	f026 0607 	bic.w	r6, r6, #7
 801985e:	1d23      	adds	r3, r4, #4
 8019860:	1af2      	subs	r2, r6, r3
 8019862:	d0b6      	beq.n	80197d2 <_malloc_r+0x22>
 8019864:	1b9b      	subs	r3, r3, r6
 8019866:	50a3      	str	r3, [r4, r2]
 8019868:	e7b3      	b.n	80197d2 <_malloc_r+0x22>
 801986a:	6862      	ldr	r2, [r4, #4]
 801986c:	42a3      	cmp	r3, r4
 801986e:	bf0c      	ite	eq
 8019870:	6032      	streq	r2, [r6, #0]
 8019872:	605a      	strne	r2, [r3, #4]
 8019874:	e7ec      	b.n	8019850 <_malloc_r+0xa0>
 8019876:	4623      	mov	r3, r4
 8019878:	6864      	ldr	r4, [r4, #4]
 801987a:	e7b2      	b.n	80197e2 <_malloc_r+0x32>
 801987c:	4634      	mov	r4, r6
 801987e:	6876      	ldr	r6, [r6, #4]
 8019880:	e7b9      	b.n	80197f6 <_malloc_r+0x46>
 8019882:	230c      	movs	r3, #12
 8019884:	603b      	str	r3, [r7, #0]
 8019886:	4638      	mov	r0, r7
 8019888:	f001 fd08 	bl	801b29c <__malloc_unlock>
 801988c:	e7a1      	b.n	80197d2 <_malloc_r+0x22>
 801988e:	6025      	str	r5, [r4, #0]
 8019890:	e7de      	b.n	8019850 <_malloc_r+0xa0>
 8019892:	bf00      	nop
 8019894:	20002fbc 	.word	0x20002fbc

08019898 <__cvt>:
 8019898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801989c:	ec55 4b10 	vmov	r4, r5, d0
 80198a0:	2d00      	cmp	r5, #0
 80198a2:	460e      	mov	r6, r1
 80198a4:	4619      	mov	r1, r3
 80198a6:	462b      	mov	r3, r5
 80198a8:	bfbb      	ittet	lt
 80198aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80198ae:	461d      	movlt	r5, r3
 80198b0:	2300      	movge	r3, #0
 80198b2:	232d      	movlt	r3, #45	; 0x2d
 80198b4:	700b      	strb	r3, [r1, #0]
 80198b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80198bc:	4691      	mov	r9, r2
 80198be:	f023 0820 	bic.w	r8, r3, #32
 80198c2:	bfbc      	itt	lt
 80198c4:	4622      	movlt	r2, r4
 80198c6:	4614      	movlt	r4, r2
 80198c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80198cc:	d005      	beq.n	80198da <__cvt+0x42>
 80198ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80198d2:	d100      	bne.n	80198d6 <__cvt+0x3e>
 80198d4:	3601      	adds	r6, #1
 80198d6:	2102      	movs	r1, #2
 80198d8:	e000      	b.n	80198dc <__cvt+0x44>
 80198da:	2103      	movs	r1, #3
 80198dc:	ab03      	add	r3, sp, #12
 80198de:	9301      	str	r3, [sp, #4]
 80198e0:	ab02      	add	r3, sp, #8
 80198e2:	9300      	str	r3, [sp, #0]
 80198e4:	ec45 4b10 	vmov	d0, r4, r5
 80198e8:	4653      	mov	r3, sl
 80198ea:	4632      	mov	r2, r6
 80198ec:	f000 fdc0 	bl	801a470 <_dtoa_r>
 80198f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80198f4:	4607      	mov	r7, r0
 80198f6:	d102      	bne.n	80198fe <__cvt+0x66>
 80198f8:	f019 0f01 	tst.w	r9, #1
 80198fc:	d022      	beq.n	8019944 <__cvt+0xac>
 80198fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019902:	eb07 0906 	add.w	r9, r7, r6
 8019906:	d110      	bne.n	801992a <__cvt+0x92>
 8019908:	783b      	ldrb	r3, [r7, #0]
 801990a:	2b30      	cmp	r3, #48	; 0x30
 801990c:	d10a      	bne.n	8019924 <__cvt+0x8c>
 801990e:	2200      	movs	r2, #0
 8019910:	2300      	movs	r3, #0
 8019912:	4620      	mov	r0, r4
 8019914:	4629      	mov	r1, r5
 8019916:	f7e7 f8ef 	bl	8000af8 <__aeabi_dcmpeq>
 801991a:	b918      	cbnz	r0, 8019924 <__cvt+0x8c>
 801991c:	f1c6 0601 	rsb	r6, r6, #1
 8019920:	f8ca 6000 	str.w	r6, [sl]
 8019924:	f8da 3000 	ldr.w	r3, [sl]
 8019928:	4499      	add	r9, r3
 801992a:	2200      	movs	r2, #0
 801992c:	2300      	movs	r3, #0
 801992e:	4620      	mov	r0, r4
 8019930:	4629      	mov	r1, r5
 8019932:	f7e7 f8e1 	bl	8000af8 <__aeabi_dcmpeq>
 8019936:	b108      	cbz	r0, 801993c <__cvt+0xa4>
 8019938:	f8cd 900c 	str.w	r9, [sp, #12]
 801993c:	2230      	movs	r2, #48	; 0x30
 801993e:	9b03      	ldr	r3, [sp, #12]
 8019940:	454b      	cmp	r3, r9
 8019942:	d307      	bcc.n	8019954 <__cvt+0xbc>
 8019944:	9b03      	ldr	r3, [sp, #12]
 8019946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019948:	1bdb      	subs	r3, r3, r7
 801994a:	4638      	mov	r0, r7
 801994c:	6013      	str	r3, [r2, #0]
 801994e:	b004      	add	sp, #16
 8019950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019954:	1c59      	adds	r1, r3, #1
 8019956:	9103      	str	r1, [sp, #12]
 8019958:	701a      	strb	r2, [r3, #0]
 801995a:	e7f0      	b.n	801993e <__cvt+0xa6>

0801995c <__exponent>:
 801995c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801995e:	4603      	mov	r3, r0
 8019960:	2900      	cmp	r1, #0
 8019962:	bfb8      	it	lt
 8019964:	4249      	neglt	r1, r1
 8019966:	f803 2b02 	strb.w	r2, [r3], #2
 801996a:	bfb4      	ite	lt
 801996c:	222d      	movlt	r2, #45	; 0x2d
 801996e:	222b      	movge	r2, #43	; 0x2b
 8019970:	2909      	cmp	r1, #9
 8019972:	7042      	strb	r2, [r0, #1]
 8019974:	dd2a      	ble.n	80199cc <__exponent+0x70>
 8019976:	f10d 0407 	add.w	r4, sp, #7
 801997a:	46a4      	mov	ip, r4
 801997c:	270a      	movs	r7, #10
 801997e:	46a6      	mov	lr, r4
 8019980:	460a      	mov	r2, r1
 8019982:	fb91 f6f7 	sdiv	r6, r1, r7
 8019986:	fb07 1516 	mls	r5, r7, r6, r1
 801998a:	3530      	adds	r5, #48	; 0x30
 801998c:	2a63      	cmp	r2, #99	; 0x63
 801998e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019996:	4631      	mov	r1, r6
 8019998:	dcf1      	bgt.n	801997e <__exponent+0x22>
 801999a:	3130      	adds	r1, #48	; 0x30
 801999c:	f1ae 0502 	sub.w	r5, lr, #2
 80199a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80199a4:	1c44      	adds	r4, r0, #1
 80199a6:	4629      	mov	r1, r5
 80199a8:	4561      	cmp	r1, ip
 80199aa:	d30a      	bcc.n	80199c2 <__exponent+0x66>
 80199ac:	f10d 0209 	add.w	r2, sp, #9
 80199b0:	eba2 020e 	sub.w	r2, r2, lr
 80199b4:	4565      	cmp	r5, ip
 80199b6:	bf88      	it	hi
 80199b8:	2200      	movhi	r2, #0
 80199ba:	4413      	add	r3, r2
 80199bc:	1a18      	subs	r0, r3, r0
 80199be:	b003      	add	sp, #12
 80199c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80199ca:	e7ed      	b.n	80199a8 <__exponent+0x4c>
 80199cc:	2330      	movs	r3, #48	; 0x30
 80199ce:	3130      	adds	r1, #48	; 0x30
 80199d0:	7083      	strb	r3, [r0, #2]
 80199d2:	70c1      	strb	r1, [r0, #3]
 80199d4:	1d03      	adds	r3, r0, #4
 80199d6:	e7f1      	b.n	80199bc <__exponent+0x60>

080199d8 <_printf_float>:
 80199d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199dc:	ed2d 8b02 	vpush	{d8}
 80199e0:	b08d      	sub	sp, #52	; 0x34
 80199e2:	460c      	mov	r4, r1
 80199e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80199e8:	4616      	mov	r6, r2
 80199ea:	461f      	mov	r7, r3
 80199ec:	4605      	mov	r5, r0
 80199ee:	f001 fc35 	bl	801b25c <_localeconv_r>
 80199f2:	f8d0 a000 	ldr.w	sl, [r0]
 80199f6:	4650      	mov	r0, sl
 80199f8:	f7e6 fc02 	bl	8000200 <strlen>
 80199fc:	2300      	movs	r3, #0
 80199fe:	930a      	str	r3, [sp, #40]	; 0x28
 8019a00:	6823      	ldr	r3, [r4, #0]
 8019a02:	9305      	str	r3, [sp, #20]
 8019a04:	f8d8 3000 	ldr.w	r3, [r8]
 8019a08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019a0c:	3307      	adds	r3, #7
 8019a0e:	f023 0307 	bic.w	r3, r3, #7
 8019a12:	f103 0208 	add.w	r2, r3, #8
 8019a16:	f8c8 2000 	str.w	r2, [r8]
 8019a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019a22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019a2a:	9307      	str	r3, [sp, #28]
 8019a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019a30:	ee08 0a10 	vmov	s16, r0
 8019a34:	4b9f      	ldr	r3, [pc, #636]	; (8019cb4 <_printf_float+0x2dc>)
 8019a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019a3e:	f7e7 f88d 	bl	8000b5c <__aeabi_dcmpun>
 8019a42:	bb88      	cbnz	r0, 8019aa8 <_printf_float+0xd0>
 8019a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a48:	4b9a      	ldr	r3, [pc, #616]	; (8019cb4 <_printf_float+0x2dc>)
 8019a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019a4e:	f7e7 f867 	bl	8000b20 <__aeabi_dcmple>
 8019a52:	bb48      	cbnz	r0, 8019aa8 <_printf_float+0xd0>
 8019a54:	2200      	movs	r2, #0
 8019a56:	2300      	movs	r3, #0
 8019a58:	4640      	mov	r0, r8
 8019a5a:	4649      	mov	r1, r9
 8019a5c:	f7e7 f856 	bl	8000b0c <__aeabi_dcmplt>
 8019a60:	b110      	cbz	r0, 8019a68 <_printf_float+0x90>
 8019a62:	232d      	movs	r3, #45	; 0x2d
 8019a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a68:	4b93      	ldr	r3, [pc, #588]	; (8019cb8 <_printf_float+0x2e0>)
 8019a6a:	4894      	ldr	r0, [pc, #592]	; (8019cbc <_printf_float+0x2e4>)
 8019a6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019a70:	bf94      	ite	ls
 8019a72:	4698      	movls	r8, r3
 8019a74:	4680      	movhi	r8, r0
 8019a76:	2303      	movs	r3, #3
 8019a78:	6123      	str	r3, [r4, #16]
 8019a7a:	9b05      	ldr	r3, [sp, #20]
 8019a7c:	f023 0204 	bic.w	r2, r3, #4
 8019a80:	6022      	str	r2, [r4, #0]
 8019a82:	f04f 0900 	mov.w	r9, #0
 8019a86:	9700      	str	r7, [sp, #0]
 8019a88:	4633      	mov	r3, r6
 8019a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8019a8c:	4621      	mov	r1, r4
 8019a8e:	4628      	mov	r0, r5
 8019a90:	f000 f9d8 	bl	8019e44 <_printf_common>
 8019a94:	3001      	adds	r0, #1
 8019a96:	f040 8090 	bne.w	8019bba <_printf_float+0x1e2>
 8019a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a9e:	b00d      	add	sp, #52	; 0x34
 8019aa0:	ecbd 8b02 	vpop	{d8}
 8019aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aa8:	4642      	mov	r2, r8
 8019aaa:	464b      	mov	r3, r9
 8019aac:	4640      	mov	r0, r8
 8019aae:	4649      	mov	r1, r9
 8019ab0:	f7e7 f854 	bl	8000b5c <__aeabi_dcmpun>
 8019ab4:	b140      	cbz	r0, 8019ac8 <_printf_float+0xf0>
 8019ab6:	464b      	mov	r3, r9
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	bfbc      	itt	lt
 8019abc:	232d      	movlt	r3, #45	; 0x2d
 8019abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019ac2:	487f      	ldr	r0, [pc, #508]	; (8019cc0 <_printf_float+0x2e8>)
 8019ac4:	4b7f      	ldr	r3, [pc, #508]	; (8019cc4 <_printf_float+0x2ec>)
 8019ac6:	e7d1      	b.n	8019a6c <_printf_float+0x94>
 8019ac8:	6863      	ldr	r3, [r4, #4]
 8019aca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019ace:	9206      	str	r2, [sp, #24]
 8019ad0:	1c5a      	adds	r2, r3, #1
 8019ad2:	d13f      	bne.n	8019b54 <_printf_float+0x17c>
 8019ad4:	2306      	movs	r3, #6
 8019ad6:	6063      	str	r3, [r4, #4]
 8019ad8:	9b05      	ldr	r3, [sp, #20]
 8019ada:	6861      	ldr	r1, [r4, #4]
 8019adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	9303      	str	r3, [sp, #12]
 8019ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8019ae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019aea:	ab09      	add	r3, sp, #36	; 0x24
 8019aec:	ec49 8b10 	vmov	d0, r8, r9
 8019af0:	9300      	str	r3, [sp, #0]
 8019af2:	6022      	str	r2, [r4, #0]
 8019af4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019af8:	4628      	mov	r0, r5
 8019afa:	f7ff fecd 	bl	8019898 <__cvt>
 8019afe:	9b06      	ldr	r3, [sp, #24]
 8019b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b02:	2b47      	cmp	r3, #71	; 0x47
 8019b04:	4680      	mov	r8, r0
 8019b06:	d108      	bne.n	8019b1a <_printf_float+0x142>
 8019b08:	1cc8      	adds	r0, r1, #3
 8019b0a:	db02      	blt.n	8019b12 <_printf_float+0x13a>
 8019b0c:	6863      	ldr	r3, [r4, #4]
 8019b0e:	4299      	cmp	r1, r3
 8019b10:	dd41      	ble.n	8019b96 <_printf_float+0x1be>
 8019b12:	f1ab 0b02 	sub.w	fp, fp, #2
 8019b16:	fa5f fb8b 	uxtb.w	fp, fp
 8019b1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019b1e:	d820      	bhi.n	8019b62 <_printf_float+0x18a>
 8019b20:	3901      	subs	r1, #1
 8019b22:	465a      	mov	r2, fp
 8019b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019b28:	9109      	str	r1, [sp, #36]	; 0x24
 8019b2a:	f7ff ff17 	bl	801995c <__exponent>
 8019b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b30:	1813      	adds	r3, r2, r0
 8019b32:	2a01      	cmp	r2, #1
 8019b34:	4681      	mov	r9, r0
 8019b36:	6123      	str	r3, [r4, #16]
 8019b38:	dc02      	bgt.n	8019b40 <_printf_float+0x168>
 8019b3a:	6822      	ldr	r2, [r4, #0]
 8019b3c:	07d2      	lsls	r2, r2, #31
 8019b3e:	d501      	bpl.n	8019b44 <_printf_float+0x16c>
 8019b40:	3301      	adds	r3, #1
 8019b42:	6123      	str	r3, [r4, #16]
 8019b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d09c      	beq.n	8019a86 <_printf_float+0xae>
 8019b4c:	232d      	movs	r3, #45	; 0x2d
 8019b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b52:	e798      	b.n	8019a86 <_printf_float+0xae>
 8019b54:	9a06      	ldr	r2, [sp, #24]
 8019b56:	2a47      	cmp	r2, #71	; 0x47
 8019b58:	d1be      	bne.n	8019ad8 <_printf_float+0x100>
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d1bc      	bne.n	8019ad8 <_printf_float+0x100>
 8019b5e:	2301      	movs	r3, #1
 8019b60:	e7b9      	b.n	8019ad6 <_printf_float+0xfe>
 8019b62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019b66:	d118      	bne.n	8019b9a <_printf_float+0x1c2>
 8019b68:	2900      	cmp	r1, #0
 8019b6a:	6863      	ldr	r3, [r4, #4]
 8019b6c:	dd0b      	ble.n	8019b86 <_printf_float+0x1ae>
 8019b6e:	6121      	str	r1, [r4, #16]
 8019b70:	b913      	cbnz	r3, 8019b78 <_printf_float+0x1a0>
 8019b72:	6822      	ldr	r2, [r4, #0]
 8019b74:	07d0      	lsls	r0, r2, #31
 8019b76:	d502      	bpl.n	8019b7e <_printf_float+0x1a6>
 8019b78:	3301      	adds	r3, #1
 8019b7a:	440b      	add	r3, r1
 8019b7c:	6123      	str	r3, [r4, #16]
 8019b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8019b80:	f04f 0900 	mov.w	r9, #0
 8019b84:	e7de      	b.n	8019b44 <_printf_float+0x16c>
 8019b86:	b913      	cbnz	r3, 8019b8e <_printf_float+0x1b6>
 8019b88:	6822      	ldr	r2, [r4, #0]
 8019b8a:	07d2      	lsls	r2, r2, #31
 8019b8c:	d501      	bpl.n	8019b92 <_printf_float+0x1ba>
 8019b8e:	3302      	adds	r3, #2
 8019b90:	e7f4      	b.n	8019b7c <_printf_float+0x1a4>
 8019b92:	2301      	movs	r3, #1
 8019b94:	e7f2      	b.n	8019b7c <_printf_float+0x1a4>
 8019b96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b9c:	4299      	cmp	r1, r3
 8019b9e:	db05      	blt.n	8019bac <_printf_float+0x1d4>
 8019ba0:	6823      	ldr	r3, [r4, #0]
 8019ba2:	6121      	str	r1, [r4, #16]
 8019ba4:	07d8      	lsls	r0, r3, #31
 8019ba6:	d5ea      	bpl.n	8019b7e <_printf_float+0x1a6>
 8019ba8:	1c4b      	adds	r3, r1, #1
 8019baa:	e7e7      	b.n	8019b7c <_printf_float+0x1a4>
 8019bac:	2900      	cmp	r1, #0
 8019bae:	bfd4      	ite	le
 8019bb0:	f1c1 0202 	rsble	r2, r1, #2
 8019bb4:	2201      	movgt	r2, #1
 8019bb6:	4413      	add	r3, r2
 8019bb8:	e7e0      	b.n	8019b7c <_printf_float+0x1a4>
 8019bba:	6823      	ldr	r3, [r4, #0]
 8019bbc:	055a      	lsls	r2, r3, #21
 8019bbe:	d407      	bmi.n	8019bd0 <_printf_float+0x1f8>
 8019bc0:	6923      	ldr	r3, [r4, #16]
 8019bc2:	4642      	mov	r2, r8
 8019bc4:	4631      	mov	r1, r6
 8019bc6:	4628      	mov	r0, r5
 8019bc8:	47b8      	blx	r7
 8019bca:	3001      	adds	r0, #1
 8019bcc:	d12c      	bne.n	8019c28 <_printf_float+0x250>
 8019bce:	e764      	b.n	8019a9a <_printf_float+0xc2>
 8019bd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019bd4:	f240 80e0 	bls.w	8019d98 <_printf_float+0x3c0>
 8019bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019bdc:	2200      	movs	r2, #0
 8019bde:	2300      	movs	r3, #0
 8019be0:	f7e6 ff8a 	bl	8000af8 <__aeabi_dcmpeq>
 8019be4:	2800      	cmp	r0, #0
 8019be6:	d034      	beq.n	8019c52 <_printf_float+0x27a>
 8019be8:	4a37      	ldr	r2, [pc, #220]	; (8019cc8 <_printf_float+0x2f0>)
 8019bea:	2301      	movs	r3, #1
 8019bec:	4631      	mov	r1, r6
 8019bee:	4628      	mov	r0, r5
 8019bf0:	47b8      	blx	r7
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	f43f af51 	beq.w	8019a9a <_printf_float+0xc2>
 8019bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019bfc:	429a      	cmp	r2, r3
 8019bfe:	db02      	blt.n	8019c06 <_printf_float+0x22e>
 8019c00:	6823      	ldr	r3, [r4, #0]
 8019c02:	07d8      	lsls	r0, r3, #31
 8019c04:	d510      	bpl.n	8019c28 <_printf_float+0x250>
 8019c06:	ee18 3a10 	vmov	r3, s16
 8019c0a:	4652      	mov	r2, sl
 8019c0c:	4631      	mov	r1, r6
 8019c0e:	4628      	mov	r0, r5
 8019c10:	47b8      	blx	r7
 8019c12:	3001      	adds	r0, #1
 8019c14:	f43f af41 	beq.w	8019a9a <_printf_float+0xc2>
 8019c18:	f04f 0800 	mov.w	r8, #0
 8019c1c:	f104 091a 	add.w	r9, r4, #26
 8019c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c22:	3b01      	subs	r3, #1
 8019c24:	4543      	cmp	r3, r8
 8019c26:	dc09      	bgt.n	8019c3c <_printf_float+0x264>
 8019c28:	6823      	ldr	r3, [r4, #0]
 8019c2a:	079b      	lsls	r3, r3, #30
 8019c2c:	f100 8105 	bmi.w	8019e3a <_printf_float+0x462>
 8019c30:	68e0      	ldr	r0, [r4, #12]
 8019c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c34:	4298      	cmp	r0, r3
 8019c36:	bfb8      	it	lt
 8019c38:	4618      	movlt	r0, r3
 8019c3a:	e730      	b.n	8019a9e <_printf_float+0xc6>
 8019c3c:	2301      	movs	r3, #1
 8019c3e:	464a      	mov	r2, r9
 8019c40:	4631      	mov	r1, r6
 8019c42:	4628      	mov	r0, r5
 8019c44:	47b8      	blx	r7
 8019c46:	3001      	adds	r0, #1
 8019c48:	f43f af27 	beq.w	8019a9a <_printf_float+0xc2>
 8019c4c:	f108 0801 	add.w	r8, r8, #1
 8019c50:	e7e6      	b.n	8019c20 <_printf_float+0x248>
 8019c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	dc39      	bgt.n	8019ccc <_printf_float+0x2f4>
 8019c58:	4a1b      	ldr	r2, [pc, #108]	; (8019cc8 <_printf_float+0x2f0>)
 8019c5a:	2301      	movs	r3, #1
 8019c5c:	4631      	mov	r1, r6
 8019c5e:	4628      	mov	r0, r5
 8019c60:	47b8      	blx	r7
 8019c62:	3001      	adds	r0, #1
 8019c64:	f43f af19 	beq.w	8019a9a <_printf_float+0xc2>
 8019c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c6c:	4313      	orrs	r3, r2
 8019c6e:	d102      	bne.n	8019c76 <_printf_float+0x29e>
 8019c70:	6823      	ldr	r3, [r4, #0]
 8019c72:	07d9      	lsls	r1, r3, #31
 8019c74:	d5d8      	bpl.n	8019c28 <_printf_float+0x250>
 8019c76:	ee18 3a10 	vmov	r3, s16
 8019c7a:	4652      	mov	r2, sl
 8019c7c:	4631      	mov	r1, r6
 8019c7e:	4628      	mov	r0, r5
 8019c80:	47b8      	blx	r7
 8019c82:	3001      	adds	r0, #1
 8019c84:	f43f af09 	beq.w	8019a9a <_printf_float+0xc2>
 8019c88:	f04f 0900 	mov.w	r9, #0
 8019c8c:	f104 0a1a 	add.w	sl, r4, #26
 8019c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c92:	425b      	negs	r3, r3
 8019c94:	454b      	cmp	r3, r9
 8019c96:	dc01      	bgt.n	8019c9c <_printf_float+0x2c4>
 8019c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c9a:	e792      	b.n	8019bc2 <_printf_float+0x1ea>
 8019c9c:	2301      	movs	r3, #1
 8019c9e:	4652      	mov	r2, sl
 8019ca0:	4631      	mov	r1, r6
 8019ca2:	4628      	mov	r0, r5
 8019ca4:	47b8      	blx	r7
 8019ca6:	3001      	adds	r0, #1
 8019ca8:	f43f aef7 	beq.w	8019a9a <_printf_float+0xc2>
 8019cac:	f109 0901 	add.w	r9, r9, #1
 8019cb0:	e7ee      	b.n	8019c90 <_printf_float+0x2b8>
 8019cb2:	bf00      	nop
 8019cb4:	7fefffff 	.word	0x7fefffff
 8019cb8:	0801ccf8 	.word	0x0801ccf8
 8019cbc:	0801ccfc 	.word	0x0801ccfc
 8019cc0:	0801cd04 	.word	0x0801cd04
 8019cc4:	0801cd00 	.word	0x0801cd00
 8019cc8:	0801cd08 	.word	0x0801cd08
 8019ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	bfa8      	it	ge
 8019cd4:	461a      	movge	r2, r3
 8019cd6:	2a00      	cmp	r2, #0
 8019cd8:	4691      	mov	r9, r2
 8019cda:	dc37      	bgt.n	8019d4c <_printf_float+0x374>
 8019cdc:	f04f 0b00 	mov.w	fp, #0
 8019ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019ce4:	f104 021a 	add.w	r2, r4, #26
 8019ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019cea:	9305      	str	r3, [sp, #20]
 8019cec:	eba3 0309 	sub.w	r3, r3, r9
 8019cf0:	455b      	cmp	r3, fp
 8019cf2:	dc33      	bgt.n	8019d5c <_printf_float+0x384>
 8019cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	db3b      	blt.n	8019d74 <_printf_float+0x39c>
 8019cfc:	6823      	ldr	r3, [r4, #0]
 8019cfe:	07da      	lsls	r2, r3, #31
 8019d00:	d438      	bmi.n	8019d74 <_printf_float+0x39c>
 8019d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d04:	9a05      	ldr	r2, [sp, #20]
 8019d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d08:	1a9a      	subs	r2, r3, r2
 8019d0a:	eba3 0901 	sub.w	r9, r3, r1
 8019d0e:	4591      	cmp	r9, r2
 8019d10:	bfa8      	it	ge
 8019d12:	4691      	movge	r9, r2
 8019d14:	f1b9 0f00 	cmp.w	r9, #0
 8019d18:	dc35      	bgt.n	8019d86 <_printf_float+0x3ae>
 8019d1a:	f04f 0800 	mov.w	r8, #0
 8019d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d22:	f104 0a1a 	add.w	sl, r4, #26
 8019d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d2a:	1a9b      	subs	r3, r3, r2
 8019d2c:	eba3 0309 	sub.w	r3, r3, r9
 8019d30:	4543      	cmp	r3, r8
 8019d32:	f77f af79 	ble.w	8019c28 <_printf_float+0x250>
 8019d36:	2301      	movs	r3, #1
 8019d38:	4652      	mov	r2, sl
 8019d3a:	4631      	mov	r1, r6
 8019d3c:	4628      	mov	r0, r5
 8019d3e:	47b8      	blx	r7
 8019d40:	3001      	adds	r0, #1
 8019d42:	f43f aeaa 	beq.w	8019a9a <_printf_float+0xc2>
 8019d46:	f108 0801 	add.w	r8, r8, #1
 8019d4a:	e7ec      	b.n	8019d26 <_printf_float+0x34e>
 8019d4c:	4613      	mov	r3, r2
 8019d4e:	4631      	mov	r1, r6
 8019d50:	4642      	mov	r2, r8
 8019d52:	4628      	mov	r0, r5
 8019d54:	47b8      	blx	r7
 8019d56:	3001      	adds	r0, #1
 8019d58:	d1c0      	bne.n	8019cdc <_printf_float+0x304>
 8019d5a:	e69e      	b.n	8019a9a <_printf_float+0xc2>
 8019d5c:	2301      	movs	r3, #1
 8019d5e:	4631      	mov	r1, r6
 8019d60:	4628      	mov	r0, r5
 8019d62:	9205      	str	r2, [sp, #20]
 8019d64:	47b8      	blx	r7
 8019d66:	3001      	adds	r0, #1
 8019d68:	f43f ae97 	beq.w	8019a9a <_printf_float+0xc2>
 8019d6c:	9a05      	ldr	r2, [sp, #20]
 8019d6e:	f10b 0b01 	add.w	fp, fp, #1
 8019d72:	e7b9      	b.n	8019ce8 <_printf_float+0x310>
 8019d74:	ee18 3a10 	vmov	r3, s16
 8019d78:	4652      	mov	r2, sl
 8019d7a:	4631      	mov	r1, r6
 8019d7c:	4628      	mov	r0, r5
 8019d7e:	47b8      	blx	r7
 8019d80:	3001      	adds	r0, #1
 8019d82:	d1be      	bne.n	8019d02 <_printf_float+0x32a>
 8019d84:	e689      	b.n	8019a9a <_printf_float+0xc2>
 8019d86:	9a05      	ldr	r2, [sp, #20]
 8019d88:	464b      	mov	r3, r9
 8019d8a:	4442      	add	r2, r8
 8019d8c:	4631      	mov	r1, r6
 8019d8e:	4628      	mov	r0, r5
 8019d90:	47b8      	blx	r7
 8019d92:	3001      	adds	r0, #1
 8019d94:	d1c1      	bne.n	8019d1a <_printf_float+0x342>
 8019d96:	e680      	b.n	8019a9a <_printf_float+0xc2>
 8019d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d9a:	2a01      	cmp	r2, #1
 8019d9c:	dc01      	bgt.n	8019da2 <_printf_float+0x3ca>
 8019d9e:	07db      	lsls	r3, r3, #31
 8019da0:	d538      	bpl.n	8019e14 <_printf_float+0x43c>
 8019da2:	2301      	movs	r3, #1
 8019da4:	4642      	mov	r2, r8
 8019da6:	4631      	mov	r1, r6
 8019da8:	4628      	mov	r0, r5
 8019daa:	47b8      	blx	r7
 8019dac:	3001      	adds	r0, #1
 8019dae:	f43f ae74 	beq.w	8019a9a <_printf_float+0xc2>
 8019db2:	ee18 3a10 	vmov	r3, s16
 8019db6:	4652      	mov	r2, sl
 8019db8:	4631      	mov	r1, r6
 8019dba:	4628      	mov	r0, r5
 8019dbc:	47b8      	blx	r7
 8019dbe:	3001      	adds	r0, #1
 8019dc0:	f43f ae6b 	beq.w	8019a9a <_printf_float+0xc2>
 8019dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019dc8:	2200      	movs	r2, #0
 8019dca:	2300      	movs	r3, #0
 8019dcc:	f7e6 fe94 	bl	8000af8 <__aeabi_dcmpeq>
 8019dd0:	b9d8      	cbnz	r0, 8019e0a <_printf_float+0x432>
 8019dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dd4:	f108 0201 	add.w	r2, r8, #1
 8019dd8:	3b01      	subs	r3, #1
 8019dda:	4631      	mov	r1, r6
 8019ddc:	4628      	mov	r0, r5
 8019dde:	47b8      	blx	r7
 8019de0:	3001      	adds	r0, #1
 8019de2:	d10e      	bne.n	8019e02 <_printf_float+0x42a>
 8019de4:	e659      	b.n	8019a9a <_printf_float+0xc2>
 8019de6:	2301      	movs	r3, #1
 8019de8:	4652      	mov	r2, sl
 8019dea:	4631      	mov	r1, r6
 8019dec:	4628      	mov	r0, r5
 8019dee:	47b8      	blx	r7
 8019df0:	3001      	adds	r0, #1
 8019df2:	f43f ae52 	beq.w	8019a9a <_printf_float+0xc2>
 8019df6:	f108 0801 	add.w	r8, r8, #1
 8019dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dfc:	3b01      	subs	r3, #1
 8019dfe:	4543      	cmp	r3, r8
 8019e00:	dcf1      	bgt.n	8019de6 <_printf_float+0x40e>
 8019e02:	464b      	mov	r3, r9
 8019e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019e08:	e6dc      	b.n	8019bc4 <_printf_float+0x1ec>
 8019e0a:	f04f 0800 	mov.w	r8, #0
 8019e0e:	f104 0a1a 	add.w	sl, r4, #26
 8019e12:	e7f2      	b.n	8019dfa <_printf_float+0x422>
 8019e14:	2301      	movs	r3, #1
 8019e16:	4642      	mov	r2, r8
 8019e18:	e7df      	b.n	8019dda <_printf_float+0x402>
 8019e1a:	2301      	movs	r3, #1
 8019e1c:	464a      	mov	r2, r9
 8019e1e:	4631      	mov	r1, r6
 8019e20:	4628      	mov	r0, r5
 8019e22:	47b8      	blx	r7
 8019e24:	3001      	adds	r0, #1
 8019e26:	f43f ae38 	beq.w	8019a9a <_printf_float+0xc2>
 8019e2a:	f108 0801 	add.w	r8, r8, #1
 8019e2e:	68e3      	ldr	r3, [r4, #12]
 8019e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019e32:	1a5b      	subs	r3, r3, r1
 8019e34:	4543      	cmp	r3, r8
 8019e36:	dcf0      	bgt.n	8019e1a <_printf_float+0x442>
 8019e38:	e6fa      	b.n	8019c30 <_printf_float+0x258>
 8019e3a:	f04f 0800 	mov.w	r8, #0
 8019e3e:	f104 0919 	add.w	r9, r4, #25
 8019e42:	e7f4      	b.n	8019e2e <_printf_float+0x456>

08019e44 <_printf_common>:
 8019e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e48:	4616      	mov	r6, r2
 8019e4a:	4699      	mov	r9, r3
 8019e4c:	688a      	ldr	r2, [r1, #8]
 8019e4e:	690b      	ldr	r3, [r1, #16]
 8019e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019e54:	4293      	cmp	r3, r2
 8019e56:	bfb8      	it	lt
 8019e58:	4613      	movlt	r3, r2
 8019e5a:	6033      	str	r3, [r6, #0]
 8019e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e60:	4607      	mov	r7, r0
 8019e62:	460c      	mov	r4, r1
 8019e64:	b10a      	cbz	r2, 8019e6a <_printf_common+0x26>
 8019e66:	3301      	adds	r3, #1
 8019e68:	6033      	str	r3, [r6, #0]
 8019e6a:	6823      	ldr	r3, [r4, #0]
 8019e6c:	0699      	lsls	r1, r3, #26
 8019e6e:	bf42      	ittt	mi
 8019e70:	6833      	ldrmi	r3, [r6, #0]
 8019e72:	3302      	addmi	r3, #2
 8019e74:	6033      	strmi	r3, [r6, #0]
 8019e76:	6825      	ldr	r5, [r4, #0]
 8019e78:	f015 0506 	ands.w	r5, r5, #6
 8019e7c:	d106      	bne.n	8019e8c <_printf_common+0x48>
 8019e7e:	f104 0a19 	add.w	sl, r4, #25
 8019e82:	68e3      	ldr	r3, [r4, #12]
 8019e84:	6832      	ldr	r2, [r6, #0]
 8019e86:	1a9b      	subs	r3, r3, r2
 8019e88:	42ab      	cmp	r3, r5
 8019e8a:	dc26      	bgt.n	8019eda <_printf_common+0x96>
 8019e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e90:	1e13      	subs	r3, r2, #0
 8019e92:	6822      	ldr	r2, [r4, #0]
 8019e94:	bf18      	it	ne
 8019e96:	2301      	movne	r3, #1
 8019e98:	0692      	lsls	r2, r2, #26
 8019e9a:	d42b      	bmi.n	8019ef4 <_printf_common+0xb0>
 8019e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ea0:	4649      	mov	r1, r9
 8019ea2:	4638      	mov	r0, r7
 8019ea4:	47c0      	blx	r8
 8019ea6:	3001      	adds	r0, #1
 8019ea8:	d01e      	beq.n	8019ee8 <_printf_common+0xa4>
 8019eaa:	6823      	ldr	r3, [r4, #0]
 8019eac:	68e5      	ldr	r5, [r4, #12]
 8019eae:	6832      	ldr	r2, [r6, #0]
 8019eb0:	f003 0306 	and.w	r3, r3, #6
 8019eb4:	2b04      	cmp	r3, #4
 8019eb6:	bf08      	it	eq
 8019eb8:	1aad      	subeq	r5, r5, r2
 8019eba:	68a3      	ldr	r3, [r4, #8]
 8019ebc:	6922      	ldr	r2, [r4, #16]
 8019ebe:	bf0c      	ite	eq
 8019ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ec4:	2500      	movne	r5, #0
 8019ec6:	4293      	cmp	r3, r2
 8019ec8:	bfc4      	itt	gt
 8019eca:	1a9b      	subgt	r3, r3, r2
 8019ecc:	18ed      	addgt	r5, r5, r3
 8019ece:	2600      	movs	r6, #0
 8019ed0:	341a      	adds	r4, #26
 8019ed2:	42b5      	cmp	r5, r6
 8019ed4:	d11a      	bne.n	8019f0c <_printf_common+0xc8>
 8019ed6:	2000      	movs	r0, #0
 8019ed8:	e008      	b.n	8019eec <_printf_common+0xa8>
 8019eda:	2301      	movs	r3, #1
 8019edc:	4652      	mov	r2, sl
 8019ede:	4649      	mov	r1, r9
 8019ee0:	4638      	mov	r0, r7
 8019ee2:	47c0      	blx	r8
 8019ee4:	3001      	adds	r0, #1
 8019ee6:	d103      	bne.n	8019ef0 <_printf_common+0xac>
 8019ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ef0:	3501      	adds	r5, #1
 8019ef2:	e7c6      	b.n	8019e82 <_printf_common+0x3e>
 8019ef4:	18e1      	adds	r1, r4, r3
 8019ef6:	1c5a      	adds	r2, r3, #1
 8019ef8:	2030      	movs	r0, #48	; 0x30
 8019efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019efe:	4422      	add	r2, r4
 8019f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019f08:	3302      	adds	r3, #2
 8019f0a:	e7c7      	b.n	8019e9c <_printf_common+0x58>
 8019f0c:	2301      	movs	r3, #1
 8019f0e:	4622      	mov	r2, r4
 8019f10:	4649      	mov	r1, r9
 8019f12:	4638      	mov	r0, r7
 8019f14:	47c0      	blx	r8
 8019f16:	3001      	adds	r0, #1
 8019f18:	d0e6      	beq.n	8019ee8 <_printf_common+0xa4>
 8019f1a:	3601      	adds	r6, #1
 8019f1c:	e7d9      	b.n	8019ed2 <_printf_common+0x8e>
	...

08019f20 <_printf_i>:
 8019f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f24:	7e0f      	ldrb	r7, [r1, #24]
 8019f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019f28:	2f78      	cmp	r7, #120	; 0x78
 8019f2a:	4691      	mov	r9, r2
 8019f2c:	4680      	mov	r8, r0
 8019f2e:	460c      	mov	r4, r1
 8019f30:	469a      	mov	sl, r3
 8019f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019f36:	d807      	bhi.n	8019f48 <_printf_i+0x28>
 8019f38:	2f62      	cmp	r7, #98	; 0x62
 8019f3a:	d80a      	bhi.n	8019f52 <_printf_i+0x32>
 8019f3c:	2f00      	cmp	r7, #0
 8019f3e:	f000 80d8 	beq.w	801a0f2 <_printf_i+0x1d2>
 8019f42:	2f58      	cmp	r7, #88	; 0x58
 8019f44:	f000 80a3 	beq.w	801a08e <_printf_i+0x16e>
 8019f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019f50:	e03a      	b.n	8019fc8 <_printf_i+0xa8>
 8019f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019f56:	2b15      	cmp	r3, #21
 8019f58:	d8f6      	bhi.n	8019f48 <_printf_i+0x28>
 8019f5a:	a101      	add	r1, pc, #4	; (adr r1, 8019f60 <_printf_i+0x40>)
 8019f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f60:	08019fb9 	.word	0x08019fb9
 8019f64:	08019fcd 	.word	0x08019fcd
 8019f68:	08019f49 	.word	0x08019f49
 8019f6c:	08019f49 	.word	0x08019f49
 8019f70:	08019f49 	.word	0x08019f49
 8019f74:	08019f49 	.word	0x08019f49
 8019f78:	08019fcd 	.word	0x08019fcd
 8019f7c:	08019f49 	.word	0x08019f49
 8019f80:	08019f49 	.word	0x08019f49
 8019f84:	08019f49 	.word	0x08019f49
 8019f88:	08019f49 	.word	0x08019f49
 8019f8c:	0801a0d9 	.word	0x0801a0d9
 8019f90:	08019ffd 	.word	0x08019ffd
 8019f94:	0801a0bb 	.word	0x0801a0bb
 8019f98:	08019f49 	.word	0x08019f49
 8019f9c:	08019f49 	.word	0x08019f49
 8019fa0:	0801a0fb 	.word	0x0801a0fb
 8019fa4:	08019f49 	.word	0x08019f49
 8019fa8:	08019ffd 	.word	0x08019ffd
 8019fac:	08019f49 	.word	0x08019f49
 8019fb0:	08019f49 	.word	0x08019f49
 8019fb4:	0801a0c3 	.word	0x0801a0c3
 8019fb8:	682b      	ldr	r3, [r5, #0]
 8019fba:	1d1a      	adds	r2, r3, #4
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	602a      	str	r2, [r5, #0]
 8019fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019fc8:	2301      	movs	r3, #1
 8019fca:	e0a3      	b.n	801a114 <_printf_i+0x1f4>
 8019fcc:	6820      	ldr	r0, [r4, #0]
 8019fce:	6829      	ldr	r1, [r5, #0]
 8019fd0:	0606      	lsls	r6, r0, #24
 8019fd2:	f101 0304 	add.w	r3, r1, #4
 8019fd6:	d50a      	bpl.n	8019fee <_printf_i+0xce>
 8019fd8:	680e      	ldr	r6, [r1, #0]
 8019fda:	602b      	str	r3, [r5, #0]
 8019fdc:	2e00      	cmp	r6, #0
 8019fde:	da03      	bge.n	8019fe8 <_printf_i+0xc8>
 8019fe0:	232d      	movs	r3, #45	; 0x2d
 8019fe2:	4276      	negs	r6, r6
 8019fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fe8:	485e      	ldr	r0, [pc, #376]	; (801a164 <_printf_i+0x244>)
 8019fea:	230a      	movs	r3, #10
 8019fec:	e019      	b.n	801a022 <_printf_i+0x102>
 8019fee:	680e      	ldr	r6, [r1, #0]
 8019ff0:	602b      	str	r3, [r5, #0]
 8019ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019ff6:	bf18      	it	ne
 8019ff8:	b236      	sxthne	r6, r6
 8019ffa:	e7ef      	b.n	8019fdc <_printf_i+0xbc>
 8019ffc:	682b      	ldr	r3, [r5, #0]
 8019ffe:	6820      	ldr	r0, [r4, #0]
 801a000:	1d19      	adds	r1, r3, #4
 801a002:	6029      	str	r1, [r5, #0]
 801a004:	0601      	lsls	r1, r0, #24
 801a006:	d501      	bpl.n	801a00c <_printf_i+0xec>
 801a008:	681e      	ldr	r6, [r3, #0]
 801a00a:	e002      	b.n	801a012 <_printf_i+0xf2>
 801a00c:	0646      	lsls	r6, r0, #25
 801a00e:	d5fb      	bpl.n	801a008 <_printf_i+0xe8>
 801a010:	881e      	ldrh	r6, [r3, #0]
 801a012:	4854      	ldr	r0, [pc, #336]	; (801a164 <_printf_i+0x244>)
 801a014:	2f6f      	cmp	r7, #111	; 0x6f
 801a016:	bf0c      	ite	eq
 801a018:	2308      	moveq	r3, #8
 801a01a:	230a      	movne	r3, #10
 801a01c:	2100      	movs	r1, #0
 801a01e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a022:	6865      	ldr	r5, [r4, #4]
 801a024:	60a5      	str	r5, [r4, #8]
 801a026:	2d00      	cmp	r5, #0
 801a028:	bfa2      	ittt	ge
 801a02a:	6821      	ldrge	r1, [r4, #0]
 801a02c:	f021 0104 	bicge.w	r1, r1, #4
 801a030:	6021      	strge	r1, [r4, #0]
 801a032:	b90e      	cbnz	r6, 801a038 <_printf_i+0x118>
 801a034:	2d00      	cmp	r5, #0
 801a036:	d04d      	beq.n	801a0d4 <_printf_i+0x1b4>
 801a038:	4615      	mov	r5, r2
 801a03a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a03e:	fb03 6711 	mls	r7, r3, r1, r6
 801a042:	5dc7      	ldrb	r7, [r0, r7]
 801a044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a048:	4637      	mov	r7, r6
 801a04a:	42bb      	cmp	r3, r7
 801a04c:	460e      	mov	r6, r1
 801a04e:	d9f4      	bls.n	801a03a <_printf_i+0x11a>
 801a050:	2b08      	cmp	r3, #8
 801a052:	d10b      	bne.n	801a06c <_printf_i+0x14c>
 801a054:	6823      	ldr	r3, [r4, #0]
 801a056:	07de      	lsls	r6, r3, #31
 801a058:	d508      	bpl.n	801a06c <_printf_i+0x14c>
 801a05a:	6923      	ldr	r3, [r4, #16]
 801a05c:	6861      	ldr	r1, [r4, #4]
 801a05e:	4299      	cmp	r1, r3
 801a060:	bfde      	ittt	le
 801a062:	2330      	movle	r3, #48	; 0x30
 801a064:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a068:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a06c:	1b52      	subs	r2, r2, r5
 801a06e:	6122      	str	r2, [r4, #16]
 801a070:	f8cd a000 	str.w	sl, [sp]
 801a074:	464b      	mov	r3, r9
 801a076:	aa03      	add	r2, sp, #12
 801a078:	4621      	mov	r1, r4
 801a07a:	4640      	mov	r0, r8
 801a07c:	f7ff fee2 	bl	8019e44 <_printf_common>
 801a080:	3001      	adds	r0, #1
 801a082:	d14c      	bne.n	801a11e <_printf_i+0x1fe>
 801a084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a088:	b004      	add	sp, #16
 801a08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a08e:	4835      	ldr	r0, [pc, #212]	; (801a164 <_printf_i+0x244>)
 801a090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a094:	6829      	ldr	r1, [r5, #0]
 801a096:	6823      	ldr	r3, [r4, #0]
 801a098:	f851 6b04 	ldr.w	r6, [r1], #4
 801a09c:	6029      	str	r1, [r5, #0]
 801a09e:	061d      	lsls	r5, r3, #24
 801a0a0:	d514      	bpl.n	801a0cc <_printf_i+0x1ac>
 801a0a2:	07df      	lsls	r7, r3, #31
 801a0a4:	bf44      	itt	mi
 801a0a6:	f043 0320 	orrmi.w	r3, r3, #32
 801a0aa:	6023      	strmi	r3, [r4, #0]
 801a0ac:	b91e      	cbnz	r6, 801a0b6 <_printf_i+0x196>
 801a0ae:	6823      	ldr	r3, [r4, #0]
 801a0b0:	f023 0320 	bic.w	r3, r3, #32
 801a0b4:	6023      	str	r3, [r4, #0]
 801a0b6:	2310      	movs	r3, #16
 801a0b8:	e7b0      	b.n	801a01c <_printf_i+0xfc>
 801a0ba:	6823      	ldr	r3, [r4, #0]
 801a0bc:	f043 0320 	orr.w	r3, r3, #32
 801a0c0:	6023      	str	r3, [r4, #0]
 801a0c2:	2378      	movs	r3, #120	; 0x78
 801a0c4:	4828      	ldr	r0, [pc, #160]	; (801a168 <_printf_i+0x248>)
 801a0c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a0ca:	e7e3      	b.n	801a094 <_printf_i+0x174>
 801a0cc:	0659      	lsls	r1, r3, #25
 801a0ce:	bf48      	it	mi
 801a0d0:	b2b6      	uxthmi	r6, r6
 801a0d2:	e7e6      	b.n	801a0a2 <_printf_i+0x182>
 801a0d4:	4615      	mov	r5, r2
 801a0d6:	e7bb      	b.n	801a050 <_printf_i+0x130>
 801a0d8:	682b      	ldr	r3, [r5, #0]
 801a0da:	6826      	ldr	r6, [r4, #0]
 801a0dc:	6961      	ldr	r1, [r4, #20]
 801a0de:	1d18      	adds	r0, r3, #4
 801a0e0:	6028      	str	r0, [r5, #0]
 801a0e2:	0635      	lsls	r5, r6, #24
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	d501      	bpl.n	801a0ec <_printf_i+0x1cc>
 801a0e8:	6019      	str	r1, [r3, #0]
 801a0ea:	e002      	b.n	801a0f2 <_printf_i+0x1d2>
 801a0ec:	0670      	lsls	r0, r6, #25
 801a0ee:	d5fb      	bpl.n	801a0e8 <_printf_i+0x1c8>
 801a0f0:	8019      	strh	r1, [r3, #0]
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	6123      	str	r3, [r4, #16]
 801a0f6:	4615      	mov	r5, r2
 801a0f8:	e7ba      	b.n	801a070 <_printf_i+0x150>
 801a0fa:	682b      	ldr	r3, [r5, #0]
 801a0fc:	1d1a      	adds	r2, r3, #4
 801a0fe:	602a      	str	r2, [r5, #0]
 801a100:	681d      	ldr	r5, [r3, #0]
 801a102:	6862      	ldr	r2, [r4, #4]
 801a104:	2100      	movs	r1, #0
 801a106:	4628      	mov	r0, r5
 801a108:	f7e6 f882 	bl	8000210 <memchr>
 801a10c:	b108      	cbz	r0, 801a112 <_printf_i+0x1f2>
 801a10e:	1b40      	subs	r0, r0, r5
 801a110:	6060      	str	r0, [r4, #4]
 801a112:	6863      	ldr	r3, [r4, #4]
 801a114:	6123      	str	r3, [r4, #16]
 801a116:	2300      	movs	r3, #0
 801a118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a11c:	e7a8      	b.n	801a070 <_printf_i+0x150>
 801a11e:	6923      	ldr	r3, [r4, #16]
 801a120:	462a      	mov	r2, r5
 801a122:	4649      	mov	r1, r9
 801a124:	4640      	mov	r0, r8
 801a126:	47d0      	blx	sl
 801a128:	3001      	adds	r0, #1
 801a12a:	d0ab      	beq.n	801a084 <_printf_i+0x164>
 801a12c:	6823      	ldr	r3, [r4, #0]
 801a12e:	079b      	lsls	r3, r3, #30
 801a130:	d413      	bmi.n	801a15a <_printf_i+0x23a>
 801a132:	68e0      	ldr	r0, [r4, #12]
 801a134:	9b03      	ldr	r3, [sp, #12]
 801a136:	4298      	cmp	r0, r3
 801a138:	bfb8      	it	lt
 801a13a:	4618      	movlt	r0, r3
 801a13c:	e7a4      	b.n	801a088 <_printf_i+0x168>
 801a13e:	2301      	movs	r3, #1
 801a140:	4632      	mov	r2, r6
 801a142:	4649      	mov	r1, r9
 801a144:	4640      	mov	r0, r8
 801a146:	47d0      	blx	sl
 801a148:	3001      	adds	r0, #1
 801a14a:	d09b      	beq.n	801a084 <_printf_i+0x164>
 801a14c:	3501      	adds	r5, #1
 801a14e:	68e3      	ldr	r3, [r4, #12]
 801a150:	9903      	ldr	r1, [sp, #12]
 801a152:	1a5b      	subs	r3, r3, r1
 801a154:	42ab      	cmp	r3, r5
 801a156:	dcf2      	bgt.n	801a13e <_printf_i+0x21e>
 801a158:	e7eb      	b.n	801a132 <_printf_i+0x212>
 801a15a:	2500      	movs	r5, #0
 801a15c:	f104 0619 	add.w	r6, r4, #25
 801a160:	e7f5      	b.n	801a14e <_printf_i+0x22e>
 801a162:	bf00      	nop
 801a164:	0801cd0a 	.word	0x0801cd0a
 801a168:	0801cd1b 	.word	0x0801cd1b

0801a16c <iprintf>:
 801a16c:	b40f      	push	{r0, r1, r2, r3}
 801a16e:	4b0a      	ldr	r3, [pc, #40]	; (801a198 <iprintf+0x2c>)
 801a170:	b513      	push	{r0, r1, r4, lr}
 801a172:	681c      	ldr	r4, [r3, #0]
 801a174:	b124      	cbz	r4, 801a180 <iprintf+0x14>
 801a176:	69a3      	ldr	r3, [r4, #24]
 801a178:	b913      	cbnz	r3, 801a180 <iprintf+0x14>
 801a17a:	4620      	mov	r0, r4
 801a17c:	f000 ffbe 	bl	801b0fc <__sinit>
 801a180:	ab05      	add	r3, sp, #20
 801a182:	9a04      	ldr	r2, [sp, #16]
 801a184:	68a1      	ldr	r1, [r4, #8]
 801a186:	9301      	str	r3, [sp, #4]
 801a188:	4620      	mov	r0, r4
 801a18a:	f001 fdad 	bl	801bce8 <_vfiprintf_r>
 801a18e:	b002      	add	sp, #8
 801a190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a194:	b004      	add	sp, #16
 801a196:	4770      	bx	lr
 801a198:	20000100 	.word	0x20000100

0801a19c <_sbrk_r>:
 801a19c:	b538      	push	{r3, r4, r5, lr}
 801a19e:	4d06      	ldr	r5, [pc, #24]	; (801a1b8 <_sbrk_r+0x1c>)
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	4604      	mov	r4, r0
 801a1a4:	4608      	mov	r0, r1
 801a1a6:	602b      	str	r3, [r5, #0]
 801a1a8:	f002 fa46 	bl	801c638 <_sbrk>
 801a1ac:	1c43      	adds	r3, r0, #1
 801a1ae:	d102      	bne.n	801a1b6 <_sbrk_r+0x1a>
 801a1b0:	682b      	ldr	r3, [r5, #0]
 801a1b2:	b103      	cbz	r3, 801a1b6 <_sbrk_r+0x1a>
 801a1b4:	6023      	str	r3, [r4, #0]
 801a1b6:	bd38      	pop	{r3, r4, r5, pc}
 801a1b8:	20002fc8 	.word	0x20002fc8

0801a1bc <siprintf>:
 801a1bc:	b40e      	push	{r1, r2, r3}
 801a1be:	b500      	push	{lr}
 801a1c0:	b09c      	sub	sp, #112	; 0x70
 801a1c2:	ab1d      	add	r3, sp, #116	; 0x74
 801a1c4:	9002      	str	r0, [sp, #8]
 801a1c6:	9006      	str	r0, [sp, #24]
 801a1c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a1cc:	4809      	ldr	r0, [pc, #36]	; (801a1f4 <siprintf+0x38>)
 801a1ce:	9107      	str	r1, [sp, #28]
 801a1d0:	9104      	str	r1, [sp, #16]
 801a1d2:	4909      	ldr	r1, [pc, #36]	; (801a1f8 <siprintf+0x3c>)
 801a1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1d8:	9105      	str	r1, [sp, #20]
 801a1da:	6800      	ldr	r0, [r0, #0]
 801a1dc:	9301      	str	r3, [sp, #4]
 801a1de:	a902      	add	r1, sp, #8
 801a1e0:	f001 fc58 	bl	801ba94 <_svfiprintf_r>
 801a1e4:	9b02      	ldr	r3, [sp, #8]
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	701a      	strb	r2, [r3, #0]
 801a1ea:	b01c      	add	sp, #112	; 0x70
 801a1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 801a1f0:	b003      	add	sp, #12
 801a1f2:	4770      	bx	lr
 801a1f4:	20000100 	.word	0x20000100
 801a1f8:	ffff0208 	.word	0xffff0208

0801a1fc <strdup>:
 801a1fc:	4b02      	ldr	r3, [pc, #8]	; (801a208 <strdup+0xc>)
 801a1fe:	4601      	mov	r1, r0
 801a200:	6818      	ldr	r0, [r3, #0]
 801a202:	f000 b803 	b.w	801a20c <_strdup_r>
 801a206:	bf00      	nop
 801a208:	20000100 	.word	0x20000100

0801a20c <_strdup_r>:
 801a20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a20e:	4604      	mov	r4, r0
 801a210:	4608      	mov	r0, r1
 801a212:	460d      	mov	r5, r1
 801a214:	f7e5 fff4 	bl	8000200 <strlen>
 801a218:	1c42      	adds	r2, r0, #1
 801a21a:	4611      	mov	r1, r2
 801a21c:	4620      	mov	r0, r4
 801a21e:	9201      	str	r2, [sp, #4]
 801a220:	f7ff fac6 	bl	80197b0 <_malloc_r>
 801a224:	4604      	mov	r4, r0
 801a226:	b118      	cbz	r0, 801a230 <_strdup_r+0x24>
 801a228:	9a01      	ldr	r2, [sp, #4]
 801a22a:	4629      	mov	r1, r5
 801a22c:	f7ff fa3e 	bl	80196ac <memcpy>
 801a230:	4620      	mov	r0, r4
 801a232:	b003      	add	sp, #12
 801a234:	bd30      	pop	{r4, r5, pc}

0801a236 <strstr>:
 801a236:	780a      	ldrb	r2, [r1, #0]
 801a238:	b570      	push	{r4, r5, r6, lr}
 801a23a:	b96a      	cbnz	r2, 801a258 <strstr+0x22>
 801a23c:	bd70      	pop	{r4, r5, r6, pc}
 801a23e:	429a      	cmp	r2, r3
 801a240:	d109      	bne.n	801a256 <strstr+0x20>
 801a242:	460c      	mov	r4, r1
 801a244:	4605      	mov	r5, r0
 801a246:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d0f6      	beq.n	801a23c <strstr+0x6>
 801a24e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a252:	429e      	cmp	r6, r3
 801a254:	d0f7      	beq.n	801a246 <strstr+0x10>
 801a256:	3001      	adds	r0, #1
 801a258:	7803      	ldrb	r3, [r0, #0]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d1ef      	bne.n	801a23e <strstr+0x8>
 801a25e:	4618      	mov	r0, r3
 801a260:	e7ec      	b.n	801a23c <strstr+0x6>
	...

0801a264 <strtok>:
 801a264:	4b16      	ldr	r3, [pc, #88]	; (801a2c0 <strtok+0x5c>)
 801a266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a268:	681e      	ldr	r6, [r3, #0]
 801a26a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801a26c:	4605      	mov	r5, r0
 801a26e:	b9fc      	cbnz	r4, 801a2b0 <strtok+0x4c>
 801a270:	2050      	movs	r0, #80	; 0x50
 801a272:	9101      	str	r1, [sp, #4]
 801a274:	f7ff fa0a 	bl	801968c <malloc>
 801a278:	9901      	ldr	r1, [sp, #4]
 801a27a:	65b0      	str	r0, [r6, #88]	; 0x58
 801a27c:	4602      	mov	r2, r0
 801a27e:	b920      	cbnz	r0, 801a28a <strtok+0x26>
 801a280:	4b10      	ldr	r3, [pc, #64]	; (801a2c4 <strtok+0x60>)
 801a282:	4811      	ldr	r0, [pc, #68]	; (801a2c8 <strtok+0x64>)
 801a284:	2157      	movs	r1, #87	; 0x57
 801a286:	f000 f849 	bl	801a31c <__assert_func>
 801a28a:	e9c0 4400 	strd	r4, r4, [r0]
 801a28e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801a292:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801a296:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801a29a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801a29e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801a2a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801a2a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801a2aa:	6184      	str	r4, [r0, #24]
 801a2ac:	7704      	strb	r4, [r0, #28]
 801a2ae:	6244      	str	r4, [r0, #36]	; 0x24
 801a2b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	4628      	mov	r0, r5
 801a2b6:	b002      	add	sp, #8
 801a2b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2bc:	f000 b806 	b.w	801a2cc <__strtok_r>
 801a2c0:	20000100 	.word	0x20000100
 801a2c4:	0801cd2c 	.word	0x0801cd2c
 801a2c8:	0801cd43 	.word	0x0801cd43

0801a2cc <__strtok_r>:
 801a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ce:	b908      	cbnz	r0, 801a2d4 <__strtok_r+0x8>
 801a2d0:	6810      	ldr	r0, [r2, #0]
 801a2d2:	b188      	cbz	r0, 801a2f8 <__strtok_r+0x2c>
 801a2d4:	4604      	mov	r4, r0
 801a2d6:	4620      	mov	r0, r4
 801a2d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 801a2dc:	460f      	mov	r7, r1
 801a2de:	f817 6b01 	ldrb.w	r6, [r7], #1
 801a2e2:	b91e      	cbnz	r6, 801a2ec <__strtok_r+0x20>
 801a2e4:	b965      	cbnz	r5, 801a300 <__strtok_r+0x34>
 801a2e6:	6015      	str	r5, [r2, #0]
 801a2e8:	4628      	mov	r0, r5
 801a2ea:	e005      	b.n	801a2f8 <__strtok_r+0x2c>
 801a2ec:	42b5      	cmp	r5, r6
 801a2ee:	d1f6      	bne.n	801a2de <__strtok_r+0x12>
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d1f0      	bne.n	801a2d6 <__strtok_r+0xa>
 801a2f4:	6014      	str	r4, [r2, #0]
 801a2f6:	7003      	strb	r3, [r0, #0]
 801a2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2fa:	461c      	mov	r4, r3
 801a2fc:	e00c      	b.n	801a318 <__strtok_r+0x4c>
 801a2fe:	b915      	cbnz	r5, 801a306 <__strtok_r+0x3a>
 801a300:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a304:	460e      	mov	r6, r1
 801a306:	f816 5b01 	ldrb.w	r5, [r6], #1
 801a30a:	42ab      	cmp	r3, r5
 801a30c:	d1f7      	bne.n	801a2fe <__strtok_r+0x32>
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d0f3      	beq.n	801a2fa <__strtok_r+0x2e>
 801a312:	2300      	movs	r3, #0
 801a314:	f804 3c01 	strb.w	r3, [r4, #-1]
 801a318:	6014      	str	r4, [r2, #0]
 801a31a:	e7ed      	b.n	801a2f8 <__strtok_r+0x2c>

0801a31c <__assert_func>:
 801a31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a31e:	4614      	mov	r4, r2
 801a320:	461a      	mov	r2, r3
 801a322:	4b09      	ldr	r3, [pc, #36]	; (801a348 <__assert_func+0x2c>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4605      	mov	r5, r0
 801a328:	68d8      	ldr	r0, [r3, #12]
 801a32a:	b14c      	cbz	r4, 801a340 <__assert_func+0x24>
 801a32c:	4b07      	ldr	r3, [pc, #28]	; (801a34c <__assert_func+0x30>)
 801a32e:	9100      	str	r1, [sp, #0]
 801a330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a334:	4906      	ldr	r1, [pc, #24]	; (801a350 <__assert_func+0x34>)
 801a336:	462b      	mov	r3, r5
 801a338:	f000 ff5e 	bl	801b1f8 <fiprintf>
 801a33c:	f001 ff28 	bl	801c190 <abort>
 801a340:	4b04      	ldr	r3, [pc, #16]	; (801a354 <__assert_func+0x38>)
 801a342:	461c      	mov	r4, r3
 801a344:	e7f3      	b.n	801a32e <__assert_func+0x12>
 801a346:	bf00      	nop
 801a348:	20000100 	.word	0x20000100
 801a34c:	0801cda0 	.word	0x0801cda0
 801a350:	0801cdad 	.word	0x0801cdad
 801a354:	0801cddb 	.word	0x0801cddb

0801a358 <quorem>:
 801a358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a35c:	6903      	ldr	r3, [r0, #16]
 801a35e:	690c      	ldr	r4, [r1, #16]
 801a360:	42a3      	cmp	r3, r4
 801a362:	4607      	mov	r7, r0
 801a364:	f2c0 8081 	blt.w	801a46a <quorem+0x112>
 801a368:	3c01      	subs	r4, #1
 801a36a:	f101 0814 	add.w	r8, r1, #20
 801a36e:	f100 0514 	add.w	r5, r0, #20
 801a372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a376:	9301      	str	r3, [sp, #4]
 801a378:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a37c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a380:	3301      	adds	r3, #1
 801a382:	429a      	cmp	r2, r3
 801a384:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a388:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a38c:	fbb2 f6f3 	udiv	r6, r2, r3
 801a390:	d331      	bcc.n	801a3f6 <quorem+0x9e>
 801a392:	f04f 0e00 	mov.w	lr, #0
 801a396:	4640      	mov	r0, r8
 801a398:	46ac      	mov	ip, r5
 801a39a:	46f2      	mov	sl, lr
 801a39c:	f850 2b04 	ldr.w	r2, [r0], #4
 801a3a0:	b293      	uxth	r3, r2
 801a3a2:	fb06 e303 	mla	r3, r6, r3, lr
 801a3a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a3aa:	b29b      	uxth	r3, r3
 801a3ac:	ebaa 0303 	sub.w	r3, sl, r3
 801a3b0:	f8dc a000 	ldr.w	sl, [ip]
 801a3b4:	0c12      	lsrs	r2, r2, #16
 801a3b6:	fa13 f38a 	uxtah	r3, r3, sl
 801a3ba:	fb06 e202 	mla	r2, r6, r2, lr
 801a3be:	9300      	str	r3, [sp, #0]
 801a3c0:	9b00      	ldr	r3, [sp, #0]
 801a3c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a3c6:	b292      	uxth	r2, r2
 801a3c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a3cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a3d0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a3d4:	4581      	cmp	r9, r0
 801a3d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a3da:	f84c 3b04 	str.w	r3, [ip], #4
 801a3de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a3e2:	d2db      	bcs.n	801a39c <quorem+0x44>
 801a3e4:	f855 300b 	ldr.w	r3, [r5, fp]
 801a3e8:	b92b      	cbnz	r3, 801a3f6 <quorem+0x9e>
 801a3ea:	9b01      	ldr	r3, [sp, #4]
 801a3ec:	3b04      	subs	r3, #4
 801a3ee:	429d      	cmp	r5, r3
 801a3f0:	461a      	mov	r2, r3
 801a3f2:	d32e      	bcc.n	801a452 <quorem+0xfa>
 801a3f4:	613c      	str	r4, [r7, #16]
 801a3f6:	4638      	mov	r0, r7
 801a3f8:	f001 f9d8 	bl	801b7ac <__mcmp>
 801a3fc:	2800      	cmp	r0, #0
 801a3fe:	db24      	blt.n	801a44a <quorem+0xf2>
 801a400:	3601      	adds	r6, #1
 801a402:	4628      	mov	r0, r5
 801a404:	f04f 0c00 	mov.w	ip, #0
 801a408:	f858 2b04 	ldr.w	r2, [r8], #4
 801a40c:	f8d0 e000 	ldr.w	lr, [r0]
 801a410:	b293      	uxth	r3, r2
 801a412:	ebac 0303 	sub.w	r3, ip, r3
 801a416:	0c12      	lsrs	r2, r2, #16
 801a418:	fa13 f38e 	uxtah	r3, r3, lr
 801a41c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a420:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a424:	b29b      	uxth	r3, r3
 801a426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a42a:	45c1      	cmp	r9, r8
 801a42c:	f840 3b04 	str.w	r3, [r0], #4
 801a430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a434:	d2e8      	bcs.n	801a408 <quorem+0xb0>
 801a436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a43a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a43e:	b922      	cbnz	r2, 801a44a <quorem+0xf2>
 801a440:	3b04      	subs	r3, #4
 801a442:	429d      	cmp	r5, r3
 801a444:	461a      	mov	r2, r3
 801a446:	d30a      	bcc.n	801a45e <quorem+0x106>
 801a448:	613c      	str	r4, [r7, #16]
 801a44a:	4630      	mov	r0, r6
 801a44c:	b003      	add	sp, #12
 801a44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a452:	6812      	ldr	r2, [r2, #0]
 801a454:	3b04      	subs	r3, #4
 801a456:	2a00      	cmp	r2, #0
 801a458:	d1cc      	bne.n	801a3f4 <quorem+0x9c>
 801a45a:	3c01      	subs	r4, #1
 801a45c:	e7c7      	b.n	801a3ee <quorem+0x96>
 801a45e:	6812      	ldr	r2, [r2, #0]
 801a460:	3b04      	subs	r3, #4
 801a462:	2a00      	cmp	r2, #0
 801a464:	d1f0      	bne.n	801a448 <quorem+0xf0>
 801a466:	3c01      	subs	r4, #1
 801a468:	e7eb      	b.n	801a442 <quorem+0xea>
 801a46a:	2000      	movs	r0, #0
 801a46c:	e7ee      	b.n	801a44c <quorem+0xf4>
	...

0801a470 <_dtoa_r>:
 801a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a474:	ed2d 8b04 	vpush	{d8-d9}
 801a478:	ec57 6b10 	vmov	r6, r7, d0
 801a47c:	b093      	sub	sp, #76	; 0x4c
 801a47e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a480:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a484:	9106      	str	r1, [sp, #24]
 801a486:	ee10 aa10 	vmov	sl, s0
 801a48a:	4604      	mov	r4, r0
 801a48c:	9209      	str	r2, [sp, #36]	; 0x24
 801a48e:	930c      	str	r3, [sp, #48]	; 0x30
 801a490:	46bb      	mov	fp, r7
 801a492:	b975      	cbnz	r5, 801a4b2 <_dtoa_r+0x42>
 801a494:	2010      	movs	r0, #16
 801a496:	f7ff f8f9 	bl	801968c <malloc>
 801a49a:	4602      	mov	r2, r0
 801a49c:	6260      	str	r0, [r4, #36]	; 0x24
 801a49e:	b920      	cbnz	r0, 801a4aa <_dtoa_r+0x3a>
 801a4a0:	4ba7      	ldr	r3, [pc, #668]	; (801a740 <_dtoa_r+0x2d0>)
 801a4a2:	21ea      	movs	r1, #234	; 0xea
 801a4a4:	48a7      	ldr	r0, [pc, #668]	; (801a744 <_dtoa_r+0x2d4>)
 801a4a6:	f7ff ff39 	bl	801a31c <__assert_func>
 801a4aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a4ae:	6005      	str	r5, [r0, #0]
 801a4b0:	60c5      	str	r5, [r0, #12]
 801a4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a4b4:	6819      	ldr	r1, [r3, #0]
 801a4b6:	b151      	cbz	r1, 801a4ce <_dtoa_r+0x5e>
 801a4b8:	685a      	ldr	r2, [r3, #4]
 801a4ba:	604a      	str	r2, [r1, #4]
 801a4bc:	2301      	movs	r3, #1
 801a4be:	4093      	lsls	r3, r2
 801a4c0:	608b      	str	r3, [r1, #8]
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	f000 ff30 	bl	801b328 <_Bfree>
 801a4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	601a      	str	r2, [r3, #0]
 801a4ce:	1e3b      	subs	r3, r7, #0
 801a4d0:	bfaa      	itet	ge
 801a4d2:	2300      	movge	r3, #0
 801a4d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801a4d8:	f8c8 3000 	strge.w	r3, [r8]
 801a4dc:	4b9a      	ldr	r3, [pc, #616]	; (801a748 <_dtoa_r+0x2d8>)
 801a4de:	bfbc      	itt	lt
 801a4e0:	2201      	movlt	r2, #1
 801a4e2:	f8c8 2000 	strlt.w	r2, [r8]
 801a4e6:	ea33 030b 	bics.w	r3, r3, fp
 801a4ea:	d11b      	bne.n	801a524 <_dtoa_r+0xb4>
 801a4ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a4ee:	f242 730f 	movw	r3, #9999	; 0x270f
 801a4f2:	6013      	str	r3, [r2, #0]
 801a4f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a4f8:	4333      	orrs	r3, r6
 801a4fa:	f000 8592 	beq.w	801b022 <_dtoa_r+0xbb2>
 801a4fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a500:	b963      	cbnz	r3, 801a51c <_dtoa_r+0xac>
 801a502:	4b92      	ldr	r3, [pc, #584]	; (801a74c <_dtoa_r+0x2dc>)
 801a504:	e022      	b.n	801a54c <_dtoa_r+0xdc>
 801a506:	4b92      	ldr	r3, [pc, #584]	; (801a750 <_dtoa_r+0x2e0>)
 801a508:	9301      	str	r3, [sp, #4]
 801a50a:	3308      	adds	r3, #8
 801a50c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a50e:	6013      	str	r3, [r2, #0]
 801a510:	9801      	ldr	r0, [sp, #4]
 801a512:	b013      	add	sp, #76	; 0x4c
 801a514:	ecbd 8b04 	vpop	{d8-d9}
 801a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a51c:	4b8b      	ldr	r3, [pc, #556]	; (801a74c <_dtoa_r+0x2dc>)
 801a51e:	9301      	str	r3, [sp, #4]
 801a520:	3303      	adds	r3, #3
 801a522:	e7f3      	b.n	801a50c <_dtoa_r+0x9c>
 801a524:	2200      	movs	r2, #0
 801a526:	2300      	movs	r3, #0
 801a528:	4650      	mov	r0, sl
 801a52a:	4659      	mov	r1, fp
 801a52c:	f7e6 fae4 	bl	8000af8 <__aeabi_dcmpeq>
 801a530:	ec4b ab19 	vmov	d9, sl, fp
 801a534:	4680      	mov	r8, r0
 801a536:	b158      	cbz	r0, 801a550 <_dtoa_r+0xe0>
 801a538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a53a:	2301      	movs	r3, #1
 801a53c:	6013      	str	r3, [r2, #0]
 801a53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a540:	2b00      	cmp	r3, #0
 801a542:	f000 856b 	beq.w	801b01c <_dtoa_r+0xbac>
 801a546:	4883      	ldr	r0, [pc, #524]	; (801a754 <_dtoa_r+0x2e4>)
 801a548:	6018      	str	r0, [r3, #0]
 801a54a:	1e43      	subs	r3, r0, #1
 801a54c:	9301      	str	r3, [sp, #4]
 801a54e:	e7df      	b.n	801a510 <_dtoa_r+0xa0>
 801a550:	ec4b ab10 	vmov	d0, sl, fp
 801a554:	aa10      	add	r2, sp, #64	; 0x40
 801a556:	a911      	add	r1, sp, #68	; 0x44
 801a558:	4620      	mov	r0, r4
 801a55a:	f001 f9cd 	bl	801b8f8 <__d2b>
 801a55e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801a562:	ee08 0a10 	vmov	s16, r0
 801a566:	2d00      	cmp	r5, #0
 801a568:	f000 8084 	beq.w	801a674 <_dtoa_r+0x204>
 801a56c:	ee19 3a90 	vmov	r3, s19
 801a570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a574:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801a578:	4656      	mov	r6, sl
 801a57a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801a57e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a582:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801a586:	4b74      	ldr	r3, [pc, #464]	; (801a758 <_dtoa_r+0x2e8>)
 801a588:	2200      	movs	r2, #0
 801a58a:	4630      	mov	r0, r6
 801a58c:	4639      	mov	r1, r7
 801a58e:	f7e5 fe93 	bl	80002b8 <__aeabi_dsub>
 801a592:	a365      	add	r3, pc, #404	; (adr r3, 801a728 <_dtoa_r+0x2b8>)
 801a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a598:	f7e6 f846 	bl	8000628 <__aeabi_dmul>
 801a59c:	a364      	add	r3, pc, #400	; (adr r3, 801a730 <_dtoa_r+0x2c0>)
 801a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5a2:	f7e5 fe8b 	bl	80002bc <__adddf3>
 801a5a6:	4606      	mov	r6, r0
 801a5a8:	4628      	mov	r0, r5
 801a5aa:	460f      	mov	r7, r1
 801a5ac:	f7e5 ffd2 	bl	8000554 <__aeabi_i2d>
 801a5b0:	a361      	add	r3, pc, #388	; (adr r3, 801a738 <_dtoa_r+0x2c8>)
 801a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b6:	f7e6 f837 	bl	8000628 <__aeabi_dmul>
 801a5ba:	4602      	mov	r2, r0
 801a5bc:	460b      	mov	r3, r1
 801a5be:	4630      	mov	r0, r6
 801a5c0:	4639      	mov	r1, r7
 801a5c2:	f7e5 fe7b 	bl	80002bc <__adddf3>
 801a5c6:	4606      	mov	r6, r0
 801a5c8:	460f      	mov	r7, r1
 801a5ca:	f7e6 fadd 	bl	8000b88 <__aeabi_d2iz>
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	9000      	str	r0, [sp, #0]
 801a5d2:	2300      	movs	r3, #0
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	4639      	mov	r1, r7
 801a5d8:	f7e6 fa98 	bl	8000b0c <__aeabi_dcmplt>
 801a5dc:	b150      	cbz	r0, 801a5f4 <_dtoa_r+0x184>
 801a5de:	9800      	ldr	r0, [sp, #0]
 801a5e0:	f7e5 ffb8 	bl	8000554 <__aeabi_i2d>
 801a5e4:	4632      	mov	r2, r6
 801a5e6:	463b      	mov	r3, r7
 801a5e8:	f7e6 fa86 	bl	8000af8 <__aeabi_dcmpeq>
 801a5ec:	b910      	cbnz	r0, 801a5f4 <_dtoa_r+0x184>
 801a5ee:	9b00      	ldr	r3, [sp, #0]
 801a5f0:	3b01      	subs	r3, #1
 801a5f2:	9300      	str	r3, [sp, #0]
 801a5f4:	9b00      	ldr	r3, [sp, #0]
 801a5f6:	2b16      	cmp	r3, #22
 801a5f8:	d85a      	bhi.n	801a6b0 <_dtoa_r+0x240>
 801a5fa:	9a00      	ldr	r2, [sp, #0]
 801a5fc:	4b57      	ldr	r3, [pc, #348]	; (801a75c <_dtoa_r+0x2ec>)
 801a5fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a606:	ec51 0b19 	vmov	r0, r1, d9
 801a60a:	f7e6 fa7f 	bl	8000b0c <__aeabi_dcmplt>
 801a60e:	2800      	cmp	r0, #0
 801a610:	d050      	beq.n	801a6b4 <_dtoa_r+0x244>
 801a612:	9b00      	ldr	r3, [sp, #0]
 801a614:	3b01      	subs	r3, #1
 801a616:	9300      	str	r3, [sp, #0]
 801a618:	2300      	movs	r3, #0
 801a61a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a61c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a61e:	1b5d      	subs	r5, r3, r5
 801a620:	1e6b      	subs	r3, r5, #1
 801a622:	9305      	str	r3, [sp, #20]
 801a624:	bf45      	ittet	mi
 801a626:	f1c5 0301 	rsbmi	r3, r5, #1
 801a62a:	9304      	strmi	r3, [sp, #16]
 801a62c:	2300      	movpl	r3, #0
 801a62e:	2300      	movmi	r3, #0
 801a630:	bf4c      	ite	mi
 801a632:	9305      	strmi	r3, [sp, #20]
 801a634:	9304      	strpl	r3, [sp, #16]
 801a636:	9b00      	ldr	r3, [sp, #0]
 801a638:	2b00      	cmp	r3, #0
 801a63a:	db3d      	blt.n	801a6b8 <_dtoa_r+0x248>
 801a63c:	9b05      	ldr	r3, [sp, #20]
 801a63e:	9a00      	ldr	r2, [sp, #0]
 801a640:	920a      	str	r2, [sp, #40]	; 0x28
 801a642:	4413      	add	r3, r2
 801a644:	9305      	str	r3, [sp, #20]
 801a646:	2300      	movs	r3, #0
 801a648:	9307      	str	r3, [sp, #28]
 801a64a:	9b06      	ldr	r3, [sp, #24]
 801a64c:	2b09      	cmp	r3, #9
 801a64e:	f200 8089 	bhi.w	801a764 <_dtoa_r+0x2f4>
 801a652:	2b05      	cmp	r3, #5
 801a654:	bfc4      	itt	gt
 801a656:	3b04      	subgt	r3, #4
 801a658:	9306      	strgt	r3, [sp, #24]
 801a65a:	9b06      	ldr	r3, [sp, #24]
 801a65c:	f1a3 0302 	sub.w	r3, r3, #2
 801a660:	bfcc      	ite	gt
 801a662:	2500      	movgt	r5, #0
 801a664:	2501      	movle	r5, #1
 801a666:	2b03      	cmp	r3, #3
 801a668:	f200 8087 	bhi.w	801a77a <_dtoa_r+0x30a>
 801a66c:	e8df f003 	tbb	[pc, r3]
 801a670:	59383a2d 	.word	0x59383a2d
 801a674:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801a678:	441d      	add	r5, r3
 801a67a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a67e:	2b20      	cmp	r3, #32
 801a680:	bfc1      	itttt	gt
 801a682:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a686:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801a68a:	fa0b f303 	lslgt.w	r3, fp, r3
 801a68e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801a692:	bfda      	itte	le
 801a694:	f1c3 0320 	rsble	r3, r3, #32
 801a698:	fa06 f003 	lslle.w	r0, r6, r3
 801a69c:	4318      	orrgt	r0, r3
 801a69e:	f7e5 ff49 	bl	8000534 <__aeabi_ui2d>
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	4606      	mov	r6, r0
 801a6a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801a6aa:	3d01      	subs	r5, #1
 801a6ac:	930e      	str	r3, [sp, #56]	; 0x38
 801a6ae:	e76a      	b.n	801a586 <_dtoa_r+0x116>
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	e7b2      	b.n	801a61a <_dtoa_r+0x1aa>
 801a6b4:	900b      	str	r0, [sp, #44]	; 0x2c
 801a6b6:	e7b1      	b.n	801a61c <_dtoa_r+0x1ac>
 801a6b8:	9b04      	ldr	r3, [sp, #16]
 801a6ba:	9a00      	ldr	r2, [sp, #0]
 801a6bc:	1a9b      	subs	r3, r3, r2
 801a6be:	9304      	str	r3, [sp, #16]
 801a6c0:	4253      	negs	r3, r2
 801a6c2:	9307      	str	r3, [sp, #28]
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	930a      	str	r3, [sp, #40]	; 0x28
 801a6c8:	e7bf      	b.n	801a64a <_dtoa_r+0x1da>
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	9308      	str	r3, [sp, #32]
 801a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	dc55      	bgt.n	801a780 <_dtoa_r+0x310>
 801a6d4:	2301      	movs	r3, #1
 801a6d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a6da:	461a      	mov	r2, r3
 801a6dc:	9209      	str	r2, [sp, #36]	; 0x24
 801a6de:	e00c      	b.n	801a6fa <_dtoa_r+0x28a>
 801a6e0:	2301      	movs	r3, #1
 801a6e2:	e7f3      	b.n	801a6cc <_dtoa_r+0x25c>
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6e8:	9308      	str	r3, [sp, #32]
 801a6ea:	9b00      	ldr	r3, [sp, #0]
 801a6ec:	4413      	add	r3, r2
 801a6ee:	9302      	str	r3, [sp, #8]
 801a6f0:	3301      	adds	r3, #1
 801a6f2:	2b01      	cmp	r3, #1
 801a6f4:	9303      	str	r3, [sp, #12]
 801a6f6:	bfb8      	it	lt
 801a6f8:	2301      	movlt	r3, #1
 801a6fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	6042      	str	r2, [r0, #4]
 801a700:	2204      	movs	r2, #4
 801a702:	f102 0614 	add.w	r6, r2, #20
 801a706:	429e      	cmp	r6, r3
 801a708:	6841      	ldr	r1, [r0, #4]
 801a70a:	d93d      	bls.n	801a788 <_dtoa_r+0x318>
 801a70c:	4620      	mov	r0, r4
 801a70e:	f000 fdcb 	bl	801b2a8 <_Balloc>
 801a712:	9001      	str	r0, [sp, #4]
 801a714:	2800      	cmp	r0, #0
 801a716:	d13b      	bne.n	801a790 <_dtoa_r+0x320>
 801a718:	4b11      	ldr	r3, [pc, #68]	; (801a760 <_dtoa_r+0x2f0>)
 801a71a:	4602      	mov	r2, r0
 801a71c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a720:	e6c0      	b.n	801a4a4 <_dtoa_r+0x34>
 801a722:	2301      	movs	r3, #1
 801a724:	e7df      	b.n	801a6e6 <_dtoa_r+0x276>
 801a726:	bf00      	nop
 801a728:	636f4361 	.word	0x636f4361
 801a72c:	3fd287a7 	.word	0x3fd287a7
 801a730:	8b60c8b3 	.word	0x8b60c8b3
 801a734:	3fc68a28 	.word	0x3fc68a28
 801a738:	509f79fb 	.word	0x509f79fb
 801a73c:	3fd34413 	.word	0x3fd34413
 801a740:	0801cd2c 	.word	0x0801cd2c
 801a744:	0801ceea 	.word	0x0801ceea
 801a748:	7ff00000 	.word	0x7ff00000
 801a74c:	0801cee6 	.word	0x0801cee6
 801a750:	0801cedd 	.word	0x0801cedd
 801a754:	0801cd09 	.word	0x0801cd09
 801a758:	3ff80000 	.word	0x3ff80000
 801a75c:	0801d048 	.word	0x0801d048
 801a760:	0801cf45 	.word	0x0801cf45
 801a764:	2501      	movs	r5, #1
 801a766:	2300      	movs	r3, #0
 801a768:	9306      	str	r3, [sp, #24]
 801a76a:	9508      	str	r5, [sp, #32]
 801a76c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a770:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a774:	2200      	movs	r2, #0
 801a776:	2312      	movs	r3, #18
 801a778:	e7b0      	b.n	801a6dc <_dtoa_r+0x26c>
 801a77a:	2301      	movs	r3, #1
 801a77c:	9308      	str	r3, [sp, #32]
 801a77e:	e7f5      	b.n	801a76c <_dtoa_r+0x2fc>
 801a780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a782:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a786:	e7b8      	b.n	801a6fa <_dtoa_r+0x28a>
 801a788:	3101      	adds	r1, #1
 801a78a:	6041      	str	r1, [r0, #4]
 801a78c:	0052      	lsls	r2, r2, #1
 801a78e:	e7b8      	b.n	801a702 <_dtoa_r+0x292>
 801a790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a792:	9a01      	ldr	r2, [sp, #4]
 801a794:	601a      	str	r2, [r3, #0]
 801a796:	9b03      	ldr	r3, [sp, #12]
 801a798:	2b0e      	cmp	r3, #14
 801a79a:	f200 809d 	bhi.w	801a8d8 <_dtoa_r+0x468>
 801a79e:	2d00      	cmp	r5, #0
 801a7a0:	f000 809a 	beq.w	801a8d8 <_dtoa_r+0x468>
 801a7a4:	9b00      	ldr	r3, [sp, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	dd32      	ble.n	801a810 <_dtoa_r+0x3a0>
 801a7aa:	4ab7      	ldr	r2, [pc, #732]	; (801aa88 <_dtoa_r+0x618>)
 801a7ac:	f003 030f 	and.w	r3, r3, #15
 801a7b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a7b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a7b8:	9b00      	ldr	r3, [sp, #0]
 801a7ba:	05d8      	lsls	r0, r3, #23
 801a7bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801a7c0:	d516      	bpl.n	801a7f0 <_dtoa_r+0x380>
 801a7c2:	4bb2      	ldr	r3, [pc, #712]	; (801aa8c <_dtoa_r+0x61c>)
 801a7c4:	ec51 0b19 	vmov	r0, r1, d9
 801a7c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a7cc:	f7e6 f856 	bl	800087c <__aeabi_ddiv>
 801a7d0:	f007 070f 	and.w	r7, r7, #15
 801a7d4:	4682      	mov	sl, r0
 801a7d6:	468b      	mov	fp, r1
 801a7d8:	2503      	movs	r5, #3
 801a7da:	4eac      	ldr	r6, [pc, #688]	; (801aa8c <_dtoa_r+0x61c>)
 801a7dc:	b957      	cbnz	r7, 801a7f4 <_dtoa_r+0x384>
 801a7de:	4642      	mov	r2, r8
 801a7e0:	464b      	mov	r3, r9
 801a7e2:	4650      	mov	r0, sl
 801a7e4:	4659      	mov	r1, fp
 801a7e6:	f7e6 f849 	bl	800087c <__aeabi_ddiv>
 801a7ea:	4682      	mov	sl, r0
 801a7ec:	468b      	mov	fp, r1
 801a7ee:	e028      	b.n	801a842 <_dtoa_r+0x3d2>
 801a7f0:	2502      	movs	r5, #2
 801a7f2:	e7f2      	b.n	801a7da <_dtoa_r+0x36a>
 801a7f4:	07f9      	lsls	r1, r7, #31
 801a7f6:	d508      	bpl.n	801a80a <_dtoa_r+0x39a>
 801a7f8:	4640      	mov	r0, r8
 801a7fa:	4649      	mov	r1, r9
 801a7fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a800:	f7e5 ff12 	bl	8000628 <__aeabi_dmul>
 801a804:	3501      	adds	r5, #1
 801a806:	4680      	mov	r8, r0
 801a808:	4689      	mov	r9, r1
 801a80a:	107f      	asrs	r7, r7, #1
 801a80c:	3608      	adds	r6, #8
 801a80e:	e7e5      	b.n	801a7dc <_dtoa_r+0x36c>
 801a810:	f000 809b 	beq.w	801a94a <_dtoa_r+0x4da>
 801a814:	9b00      	ldr	r3, [sp, #0]
 801a816:	4f9d      	ldr	r7, [pc, #628]	; (801aa8c <_dtoa_r+0x61c>)
 801a818:	425e      	negs	r6, r3
 801a81a:	4b9b      	ldr	r3, [pc, #620]	; (801aa88 <_dtoa_r+0x618>)
 801a81c:	f006 020f 	and.w	r2, r6, #15
 801a820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a828:	ec51 0b19 	vmov	r0, r1, d9
 801a82c:	f7e5 fefc 	bl	8000628 <__aeabi_dmul>
 801a830:	1136      	asrs	r6, r6, #4
 801a832:	4682      	mov	sl, r0
 801a834:	468b      	mov	fp, r1
 801a836:	2300      	movs	r3, #0
 801a838:	2502      	movs	r5, #2
 801a83a:	2e00      	cmp	r6, #0
 801a83c:	d17a      	bne.n	801a934 <_dtoa_r+0x4c4>
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d1d3      	bne.n	801a7ea <_dtoa_r+0x37a>
 801a842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a844:	2b00      	cmp	r3, #0
 801a846:	f000 8082 	beq.w	801a94e <_dtoa_r+0x4de>
 801a84a:	4b91      	ldr	r3, [pc, #580]	; (801aa90 <_dtoa_r+0x620>)
 801a84c:	2200      	movs	r2, #0
 801a84e:	4650      	mov	r0, sl
 801a850:	4659      	mov	r1, fp
 801a852:	f7e6 f95b 	bl	8000b0c <__aeabi_dcmplt>
 801a856:	2800      	cmp	r0, #0
 801a858:	d079      	beq.n	801a94e <_dtoa_r+0x4de>
 801a85a:	9b03      	ldr	r3, [sp, #12]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d076      	beq.n	801a94e <_dtoa_r+0x4de>
 801a860:	9b02      	ldr	r3, [sp, #8]
 801a862:	2b00      	cmp	r3, #0
 801a864:	dd36      	ble.n	801a8d4 <_dtoa_r+0x464>
 801a866:	9b00      	ldr	r3, [sp, #0]
 801a868:	4650      	mov	r0, sl
 801a86a:	4659      	mov	r1, fp
 801a86c:	1e5f      	subs	r7, r3, #1
 801a86e:	2200      	movs	r2, #0
 801a870:	4b88      	ldr	r3, [pc, #544]	; (801aa94 <_dtoa_r+0x624>)
 801a872:	f7e5 fed9 	bl	8000628 <__aeabi_dmul>
 801a876:	9e02      	ldr	r6, [sp, #8]
 801a878:	4682      	mov	sl, r0
 801a87a:	468b      	mov	fp, r1
 801a87c:	3501      	adds	r5, #1
 801a87e:	4628      	mov	r0, r5
 801a880:	f7e5 fe68 	bl	8000554 <__aeabi_i2d>
 801a884:	4652      	mov	r2, sl
 801a886:	465b      	mov	r3, fp
 801a888:	f7e5 fece 	bl	8000628 <__aeabi_dmul>
 801a88c:	4b82      	ldr	r3, [pc, #520]	; (801aa98 <_dtoa_r+0x628>)
 801a88e:	2200      	movs	r2, #0
 801a890:	f7e5 fd14 	bl	80002bc <__adddf3>
 801a894:	46d0      	mov	r8, sl
 801a896:	46d9      	mov	r9, fp
 801a898:	4682      	mov	sl, r0
 801a89a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801a89e:	2e00      	cmp	r6, #0
 801a8a0:	d158      	bne.n	801a954 <_dtoa_r+0x4e4>
 801a8a2:	4b7e      	ldr	r3, [pc, #504]	; (801aa9c <_dtoa_r+0x62c>)
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	4640      	mov	r0, r8
 801a8a8:	4649      	mov	r1, r9
 801a8aa:	f7e5 fd05 	bl	80002b8 <__aeabi_dsub>
 801a8ae:	4652      	mov	r2, sl
 801a8b0:	465b      	mov	r3, fp
 801a8b2:	4680      	mov	r8, r0
 801a8b4:	4689      	mov	r9, r1
 801a8b6:	f7e6 f947 	bl	8000b48 <__aeabi_dcmpgt>
 801a8ba:	2800      	cmp	r0, #0
 801a8bc:	f040 8295 	bne.w	801adea <_dtoa_r+0x97a>
 801a8c0:	4652      	mov	r2, sl
 801a8c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a8c6:	4640      	mov	r0, r8
 801a8c8:	4649      	mov	r1, r9
 801a8ca:	f7e6 f91f 	bl	8000b0c <__aeabi_dcmplt>
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	f040 8289 	bne.w	801ade6 <_dtoa_r+0x976>
 801a8d4:	ec5b ab19 	vmov	sl, fp, d9
 801a8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	f2c0 8148 	blt.w	801ab70 <_dtoa_r+0x700>
 801a8e0:	9a00      	ldr	r2, [sp, #0]
 801a8e2:	2a0e      	cmp	r2, #14
 801a8e4:	f300 8144 	bgt.w	801ab70 <_dtoa_r+0x700>
 801a8e8:	4b67      	ldr	r3, [pc, #412]	; (801aa88 <_dtoa_r+0x618>)
 801a8ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a8ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	f280 80d5 	bge.w	801aaa4 <_dtoa_r+0x634>
 801a8fa:	9b03      	ldr	r3, [sp, #12]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	f300 80d1 	bgt.w	801aaa4 <_dtoa_r+0x634>
 801a902:	f040 826f 	bne.w	801ade4 <_dtoa_r+0x974>
 801a906:	4b65      	ldr	r3, [pc, #404]	; (801aa9c <_dtoa_r+0x62c>)
 801a908:	2200      	movs	r2, #0
 801a90a:	4640      	mov	r0, r8
 801a90c:	4649      	mov	r1, r9
 801a90e:	f7e5 fe8b 	bl	8000628 <__aeabi_dmul>
 801a912:	4652      	mov	r2, sl
 801a914:	465b      	mov	r3, fp
 801a916:	f7e6 f90d 	bl	8000b34 <__aeabi_dcmpge>
 801a91a:	9e03      	ldr	r6, [sp, #12]
 801a91c:	4637      	mov	r7, r6
 801a91e:	2800      	cmp	r0, #0
 801a920:	f040 8245 	bne.w	801adae <_dtoa_r+0x93e>
 801a924:	9d01      	ldr	r5, [sp, #4]
 801a926:	2331      	movs	r3, #49	; 0x31
 801a928:	f805 3b01 	strb.w	r3, [r5], #1
 801a92c:	9b00      	ldr	r3, [sp, #0]
 801a92e:	3301      	adds	r3, #1
 801a930:	9300      	str	r3, [sp, #0]
 801a932:	e240      	b.n	801adb6 <_dtoa_r+0x946>
 801a934:	07f2      	lsls	r2, r6, #31
 801a936:	d505      	bpl.n	801a944 <_dtoa_r+0x4d4>
 801a938:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a93c:	f7e5 fe74 	bl	8000628 <__aeabi_dmul>
 801a940:	3501      	adds	r5, #1
 801a942:	2301      	movs	r3, #1
 801a944:	1076      	asrs	r6, r6, #1
 801a946:	3708      	adds	r7, #8
 801a948:	e777      	b.n	801a83a <_dtoa_r+0x3ca>
 801a94a:	2502      	movs	r5, #2
 801a94c:	e779      	b.n	801a842 <_dtoa_r+0x3d2>
 801a94e:	9f00      	ldr	r7, [sp, #0]
 801a950:	9e03      	ldr	r6, [sp, #12]
 801a952:	e794      	b.n	801a87e <_dtoa_r+0x40e>
 801a954:	9901      	ldr	r1, [sp, #4]
 801a956:	4b4c      	ldr	r3, [pc, #304]	; (801aa88 <_dtoa_r+0x618>)
 801a958:	4431      	add	r1, r6
 801a95a:	910d      	str	r1, [sp, #52]	; 0x34
 801a95c:	9908      	ldr	r1, [sp, #32]
 801a95e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a966:	2900      	cmp	r1, #0
 801a968:	d043      	beq.n	801a9f2 <_dtoa_r+0x582>
 801a96a:	494d      	ldr	r1, [pc, #308]	; (801aaa0 <_dtoa_r+0x630>)
 801a96c:	2000      	movs	r0, #0
 801a96e:	f7e5 ff85 	bl	800087c <__aeabi_ddiv>
 801a972:	4652      	mov	r2, sl
 801a974:	465b      	mov	r3, fp
 801a976:	f7e5 fc9f 	bl	80002b8 <__aeabi_dsub>
 801a97a:	9d01      	ldr	r5, [sp, #4]
 801a97c:	4682      	mov	sl, r0
 801a97e:	468b      	mov	fp, r1
 801a980:	4649      	mov	r1, r9
 801a982:	4640      	mov	r0, r8
 801a984:	f7e6 f900 	bl	8000b88 <__aeabi_d2iz>
 801a988:	4606      	mov	r6, r0
 801a98a:	f7e5 fde3 	bl	8000554 <__aeabi_i2d>
 801a98e:	4602      	mov	r2, r0
 801a990:	460b      	mov	r3, r1
 801a992:	4640      	mov	r0, r8
 801a994:	4649      	mov	r1, r9
 801a996:	f7e5 fc8f 	bl	80002b8 <__aeabi_dsub>
 801a99a:	3630      	adds	r6, #48	; 0x30
 801a99c:	f805 6b01 	strb.w	r6, [r5], #1
 801a9a0:	4652      	mov	r2, sl
 801a9a2:	465b      	mov	r3, fp
 801a9a4:	4680      	mov	r8, r0
 801a9a6:	4689      	mov	r9, r1
 801a9a8:	f7e6 f8b0 	bl	8000b0c <__aeabi_dcmplt>
 801a9ac:	2800      	cmp	r0, #0
 801a9ae:	d163      	bne.n	801aa78 <_dtoa_r+0x608>
 801a9b0:	4642      	mov	r2, r8
 801a9b2:	464b      	mov	r3, r9
 801a9b4:	4936      	ldr	r1, [pc, #216]	; (801aa90 <_dtoa_r+0x620>)
 801a9b6:	2000      	movs	r0, #0
 801a9b8:	f7e5 fc7e 	bl	80002b8 <__aeabi_dsub>
 801a9bc:	4652      	mov	r2, sl
 801a9be:	465b      	mov	r3, fp
 801a9c0:	f7e6 f8a4 	bl	8000b0c <__aeabi_dcmplt>
 801a9c4:	2800      	cmp	r0, #0
 801a9c6:	f040 80b5 	bne.w	801ab34 <_dtoa_r+0x6c4>
 801a9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9cc:	429d      	cmp	r5, r3
 801a9ce:	d081      	beq.n	801a8d4 <_dtoa_r+0x464>
 801a9d0:	4b30      	ldr	r3, [pc, #192]	; (801aa94 <_dtoa_r+0x624>)
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	4650      	mov	r0, sl
 801a9d6:	4659      	mov	r1, fp
 801a9d8:	f7e5 fe26 	bl	8000628 <__aeabi_dmul>
 801a9dc:	4b2d      	ldr	r3, [pc, #180]	; (801aa94 <_dtoa_r+0x624>)
 801a9de:	4682      	mov	sl, r0
 801a9e0:	468b      	mov	fp, r1
 801a9e2:	4640      	mov	r0, r8
 801a9e4:	4649      	mov	r1, r9
 801a9e6:	2200      	movs	r2, #0
 801a9e8:	f7e5 fe1e 	bl	8000628 <__aeabi_dmul>
 801a9ec:	4680      	mov	r8, r0
 801a9ee:	4689      	mov	r9, r1
 801a9f0:	e7c6      	b.n	801a980 <_dtoa_r+0x510>
 801a9f2:	4650      	mov	r0, sl
 801a9f4:	4659      	mov	r1, fp
 801a9f6:	f7e5 fe17 	bl	8000628 <__aeabi_dmul>
 801a9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9fc:	9d01      	ldr	r5, [sp, #4]
 801a9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801aa00:	4682      	mov	sl, r0
 801aa02:	468b      	mov	fp, r1
 801aa04:	4649      	mov	r1, r9
 801aa06:	4640      	mov	r0, r8
 801aa08:	f7e6 f8be 	bl	8000b88 <__aeabi_d2iz>
 801aa0c:	4606      	mov	r6, r0
 801aa0e:	f7e5 fda1 	bl	8000554 <__aeabi_i2d>
 801aa12:	3630      	adds	r6, #48	; 0x30
 801aa14:	4602      	mov	r2, r0
 801aa16:	460b      	mov	r3, r1
 801aa18:	4640      	mov	r0, r8
 801aa1a:	4649      	mov	r1, r9
 801aa1c:	f7e5 fc4c 	bl	80002b8 <__aeabi_dsub>
 801aa20:	f805 6b01 	strb.w	r6, [r5], #1
 801aa24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa26:	429d      	cmp	r5, r3
 801aa28:	4680      	mov	r8, r0
 801aa2a:	4689      	mov	r9, r1
 801aa2c:	f04f 0200 	mov.w	r2, #0
 801aa30:	d124      	bne.n	801aa7c <_dtoa_r+0x60c>
 801aa32:	4b1b      	ldr	r3, [pc, #108]	; (801aaa0 <_dtoa_r+0x630>)
 801aa34:	4650      	mov	r0, sl
 801aa36:	4659      	mov	r1, fp
 801aa38:	f7e5 fc40 	bl	80002bc <__adddf3>
 801aa3c:	4602      	mov	r2, r0
 801aa3e:	460b      	mov	r3, r1
 801aa40:	4640      	mov	r0, r8
 801aa42:	4649      	mov	r1, r9
 801aa44:	f7e6 f880 	bl	8000b48 <__aeabi_dcmpgt>
 801aa48:	2800      	cmp	r0, #0
 801aa4a:	d173      	bne.n	801ab34 <_dtoa_r+0x6c4>
 801aa4c:	4652      	mov	r2, sl
 801aa4e:	465b      	mov	r3, fp
 801aa50:	4913      	ldr	r1, [pc, #76]	; (801aaa0 <_dtoa_r+0x630>)
 801aa52:	2000      	movs	r0, #0
 801aa54:	f7e5 fc30 	bl	80002b8 <__aeabi_dsub>
 801aa58:	4602      	mov	r2, r0
 801aa5a:	460b      	mov	r3, r1
 801aa5c:	4640      	mov	r0, r8
 801aa5e:	4649      	mov	r1, r9
 801aa60:	f7e6 f854 	bl	8000b0c <__aeabi_dcmplt>
 801aa64:	2800      	cmp	r0, #0
 801aa66:	f43f af35 	beq.w	801a8d4 <_dtoa_r+0x464>
 801aa6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801aa6c:	1e6b      	subs	r3, r5, #1
 801aa6e:	930f      	str	r3, [sp, #60]	; 0x3c
 801aa70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801aa74:	2b30      	cmp	r3, #48	; 0x30
 801aa76:	d0f8      	beq.n	801aa6a <_dtoa_r+0x5fa>
 801aa78:	9700      	str	r7, [sp, #0]
 801aa7a:	e049      	b.n	801ab10 <_dtoa_r+0x6a0>
 801aa7c:	4b05      	ldr	r3, [pc, #20]	; (801aa94 <_dtoa_r+0x624>)
 801aa7e:	f7e5 fdd3 	bl	8000628 <__aeabi_dmul>
 801aa82:	4680      	mov	r8, r0
 801aa84:	4689      	mov	r9, r1
 801aa86:	e7bd      	b.n	801aa04 <_dtoa_r+0x594>
 801aa88:	0801d048 	.word	0x0801d048
 801aa8c:	0801d020 	.word	0x0801d020
 801aa90:	3ff00000 	.word	0x3ff00000
 801aa94:	40240000 	.word	0x40240000
 801aa98:	401c0000 	.word	0x401c0000
 801aa9c:	40140000 	.word	0x40140000
 801aaa0:	3fe00000 	.word	0x3fe00000
 801aaa4:	9d01      	ldr	r5, [sp, #4]
 801aaa6:	4656      	mov	r6, sl
 801aaa8:	465f      	mov	r7, fp
 801aaaa:	4642      	mov	r2, r8
 801aaac:	464b      	mov	r3, r9
 801aaae:	4630      	mov	r0, r6
 801aab0:	4639      	mov	r1, r7
 801aab2:	f7e5 fee3 	bl	800087c <__aeabi_ddiv>
 801aab6:	f7e6 f867 	bl	8000b88 <__aeabi_d2iz>
 801aaba:	4682      	mov	sl, r0
 801aabc:	f7e5 fd4a 	bl	8000554 <__aeabi_i2d>
 801aac0:	4642      	mov	r2, r8
 801aac2:	464b      	mov	r3, r9
 801aac4:	f7e5 fdb0 	bl	8000628 <__aeabi_dmul>
 801aac8:	4602      	mov	r2, r0
 801aaca:	460b      	mov	r3, r1
 801aacc:	4630      	mov	r0, r6
 801aace:	4639      	mov	r1, r7
 801aad0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801aad4:	f7e5 fbf0 	bl	80002b8 <__aeabi_dsub>
 801aad8:	f805 6b01 	strb.w	r6, [r5], #1
 801aadc:	9e01      	ldr	r6, [sp, #4]
 801aade:	9f03      	ldr	r7, [sp, #12]
 801aae0:	1bae      	subs	r6, r5, r6
 801aae2:	42b7      	cmp	r7, r6
 801aae4:	4602      	mov	r2, r0
 801aae6:	460b      	mov	r3, r1
 801aae8:	d135      	bne.n	801ab56 <_dtoa_r+0x6e6>
 801aaea:	f7e5 fbe7 	bl	80002bc <__adddf3>
 801aaee:	4642      	mov	r2, r8
 801aaf0:	464b      	mov	r3, r9
 801aaf2:	4606      	mov	r6, r0
 801aaf4:	460f      	mov	r7, r1
 801aaf6:	f7e6 f827 	bl	8000b48 <__aeabi_dcmpgt>
 801aafa:	b9d0      	cbnz	r0, 801ab32 <_dtoa_r+0x6c2>
 801aafc:	4642      	mov	r2, r8
 801aafe:	464b      	mov	r3, r9
 801ab00:	4630      	mov	r0, r6
 801ab02:	4639      	mov	r1, r7
 801ab04:	f7e5 fff8 	bl	8000af8 <__aeabi_dcmpeq>
 801ab08:	b110      	cbz	r0, 801ab10 <_dtoa_r+0x6a0>
 801ab0a:	f01a 0f01 	tst.w	sl, #1
 801ab0e:	d110      	bne.n	801ab32 <_dtoa_r+0x6c2>
 801ab10:	4620      	mov	r0, r4
 801ab12:	ee18 1a10 	vmov	r1, s16
 801ab16:	f000 fc07 	bl	801b328 <_Bfree>
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	9800      	ldr	r0, [sp, #0]
 801ab1e:	702b      	strb	r3, [r5, #0]
 801ab20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab22:	3001      	adds	r0, #1
 801ab24:	6018      	str	r0, [r3, #0]
 801ab26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	f43f acf1 	beq.w	801a510 <_dtoa_r+0xa0>
 801ab2e:	601d      	str	r5, [r3, #0]
 801ab30:	e4ee      	b.n	801a510 <_dtoa_r+0xa0>
 801ab32:	9f00      	ldr	r7, [sp, #0]
 801ab34:	462b      	mov	r3, r5
 801ab36:	461d      	mov	r5, r3
 801ab38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ab3c:	2a39      	cmp	r2, #57	; 0x39
 801ab3e:	d106      	bne.n	801ab4e <_dtoa_r+0x6de>
 801ab40:	9a01      	ldr	r2, [sp, #4]
 801ab42:	429a      	cmp	r2, r3
 801ab44:	d1f7      	bne.n	801ab36 <_dtoa_r+0x6c6>
 801ab46:	9901      	ldr	r1, [sp, #4]
 801ab48:	2230      	movs	r2, #48	; 0x30
 801ab4a:	3701      	adds	r7, #1
 801ab4c:	700a      	strb	r2, [r1, #0]
 801ab4e:	781a      	ldrb	r2, [r3, #0]
 801ab50:	3201      	adds	r2, #1
 801ab52:	701a      	strb	r2, [r3, #0]
 801ab54:	e790      	b.n	801aa78 <_dtoa_r+0x608>
 801ab56:	4ba6      	ldr	r3, [pc, #664]	; (801adf0 <_dtoa_r+0x980>)
 801ab58:	2200      	movs	r2, #0
 801ab5a:	f7e5 fd65 	bl	8000628 <__aeabi_dmul>
 801ab5e:	2200      	movs	r2, #0
 801ab60:	2300      	movs	r3, #0
 801ab62:	4606      	mov	r6, r0
 801ab64:	460f      	mov	r7, r1
 801ab66:	f7e5 ffc7 	bl	8000af8 <__aeabi_dcmpeq>
 801ab6a:	2800      	cmp	r0, #0
 801ab6c:	d09d      	beq.n	801aaaa <_dtoa_r+0x63a>
 801ab6e:	e7cf      	b.n	801ab10 <_dtoa_r+0x6a0>
 801ab70:	9a08      	ldr	r2, [sp, #32]
 801ab72:	2a00      	cmp	r2, #0
 801ab74:	f000 80d7 	beq.w	801ad26 <_dtoa_r+0x8b6>
 801ab78:	9a06      	ldr	r2, [sp, #24]
 801ab7a:	2a01      	cmp	r2, #1
 801ab7c:	f300 80ba 	bgt.w	801acf4 <_dtoa_r+0x884>
 801ab80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab82:	2a00      	cmp	r2, #0
 801ab84:	f000 80b2 	beq.w	801acec <_dtoa_r+0x87c>
 801ab88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ab8c:	9e07      	ldr	r6, [sp, #28]
 801ab8e:	9d04      	ldr	r5, [sp, #16]
 801ab90:	9a04      	ldr	r2, [sp, #16]
 801ab92:	441a      	add	r2, r3
 801ab94:	9204      	str	r2, [sp, #16]
 801ab96:	9a05      	ldr	r2, [sp, #20]
 801ab98:	2101      	movs	r1, #1
 801ab9a:	441a      	add	r2, r3
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	9205      	str	r2, [sp, #20]
 801aba0:	f000 fc7a 	bl	801b498 <__i2b>
 801aba4:	4607      	mov	r7, r0
 801aba6:	2d00      	cmp	r5, #0
 801aba8:	dd0c      	ble.n	801abc4 <_dtoa_r+0x754>
 801abaa:	9b05      	ldr	r3, [sp, #20]
 801abac:	2b00      	cmp	r3, #0
 801abae:	dd09      	ble.n	801abc4 <_dtoa_r+0x754>
 801abb0:	42ab      	cmp	r3, r5
 801abb2:	9a04      	ldr	r2, [sp, #16]
 801abb4:	bfa8      	it	ge
 801abb6:	462b      	movge	r3, r5
 801abb8:	1ad2      	subs	r2, r2, r3
 801abba:	9204      	str	r2, [sp, #16]
 801abbc:	9a05      	ldr	r2, [sp, #20]
 801abbe:	1aed      	subs	r5, r5, r3
 801abc0:	1ad3      	subs	r3, r2, r3
 801abc2:	9305      	str	r3, [sp, #20]
 801abc4:	9b07      	ldr	r3, [sp, #28]
 801abc6:	b31b      	cbz	r3, 801ac10 <_dtoa_r+0x7a0>
 801abc8:	9b08      	ldr	r3, [sp, #32]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	f000 80af 	beq.w	801ad2e <_dtoa_r+0x8be>
 801abd0:	2e00      	cmp	r6, #0
 801abd2:	dd13      	ble.n	801abfc <_dtoa_r+0x78c>
 801abd4:	4639      	mov	r1, r7
 801abd6:	4632      	mov	r2, r6
 801abd8:	4620      	mov	r0, r4
 801abda:	f000 fd1d 	bl	801b618 <__pow5mult>
 801abde:	ee18 2a10 	vmov	r2, s16
 801abe2:	4601      	mov	r1, r0
 801abe4:	4607      	mov	r7, r0
 801abe6:	4620      	mov	r0, r4
 801abe8:	f000 fc6c 	bl	801b4c4 <__multiply>
 801abec:	ee18 1a10 	vmov	r1, s16
 801abf0:	4680      	mov	r8, r0
 801abf2:	4620      	mov	r0, r4
 801abf4:	f000 fb98 	bl	801b328 <_Bfree>
 801abf8:	ee08 8a10 	vmov	s16, r8
 801abfc:	9b07      	ldr	r3, [sp, #28]
 801abfe:	1b9a      	subs	r2, r3, r6
 801ac00:	d006      	beq.n	801ac10 <_dtoa_r+0x7a0>
 801ac02:	ee18 1a10 	vmov	r1, s16
 801ac06:	4620      	mov	r0, r4
 801ac08:	f000 fd06 	bl	801b618 <__pow5mult>
 801ac0c:	ee08 0a10 	vmov	s16, r0
 801ac10:	2101      	movs	r1, #1
 801ac12:	4620      	mov	r0, r4
 801ac14:	f000 fc40 	bl	801b498 <__i2b>
 801ac18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	4606      	mov	r6, r0
 801ac1e:	f340 8088 	ble.w	801ad32 <_dtoa_r+0x8c2>
 801ac22:	461a      	mov	r2, r3
 801ac24:	4601      	mov	r1, r0
 801ac26:	4620      	mov	r0, r4
 801ac28:	f000 fcf6 	bl	801b618 <__pow5mult>
 801ac2c:	9b06      	ldr	r3, [sp, #24]
 801ac2e:	2b01      	cmp	r3, #1
 801ac30:	4606      	mov	r6, r0
 801ac32:	f340 8081 	ble.w	801ad38 <_dtoa_r+0x8c8>
 801ac36:	f04f 0800 	mov.w	r8, #0
 801ac3a:	6933      	ldr	r3, [r6, #16]
 801ac3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ac40:	6918      	ldr	r0, [r3, #16]
 801ac42:	f000 fbd9 	bl	801b3f8 <__hi0bits>
 801ac46:	f1c0 0020 	rsb	r0, r0, #32
 801ac4a:	9b05      	ldr	r3, [sp, #20]
 801ac4c:	4418      	add	r0, r3
 801ac4e:	f010 001f 	ands.w	r0, r0, #31
 801ac52:	f000 8092 	beq.w	801ad7a <_dtoa_r+0x90a>
 801ac56:	f1c0 0320 	rsb	r3, r0, #32
 801ac5a:	2b04      	cmp	r3, #4
 801ac5c:	f340 808a 	ble.w	801ad74 <_dtoa_r+0x904>
 801ac60:	f1c0 001c 	rsb	r0, r0, #28
 801ac64:	9b04      	ldr	r3, [sp, #16]
 801ac66:	4403      	add	r3, r0
 801ac68:	9304      	str	r3, [sp, #16]
 801ac6a:	9b05      	ldr	r3, [sp, #20]
 801ac6c:	4403      	add	r3, r0
 801ac6e:	4405      	add	r5, r0
 801ac70:	9305      	str	r3, [sp, #20]
 801ac72:	9b04      	ldr	r3, [sp, #16]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	dd07      	ble.n	801ac88 <_dtoa_r+0x818>
 801ac78:	ee18 1a10 	vmov	r1, s16
 801ac7c:	461a      	mov	r2, r3
 801ac7e:	4620      	mov	r0, r4
 801ac80:	f000 fd24 	bl	801b6cc <__lshift>
 801ac84:	ee08 0a10 	vmov	s16, r0
 801ac88:	9b05      	ldr	r3, [sp, #20]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	dd05      	ble.n	801ac9a <_dtoa_r+0x82a>
 801ac8e:	4631      	mov	r1, r6
 801ac90:	461a      	mov	r2, r3
 801ac92:	4620      	mov	r0, r4
 801ac94:	f000 fd1a 	bl	801b6cc <__lshift>
 801ac98:	4606      	mov	r6, r0
 801ac9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d06e      	beq.n	801ad7e <_dtoa_r+0x90e>
 801aca0:	ee18 0a10 	vmov	r0, s16
 801aca4:	4631      	mov	r1, r6
 801aca6:	f000 fd81 	bl	801b7ac <__mcmp>
 801acaa:	2800      	cmp	r0, #0
 801acac:	da67      	bge.n	801ad7e <_dtoa_r+0x90e>
 801acae:	9b00      	ldr	r3, [sp, #0]
 801acb0:	3b01      	subs	r3, #1
 801acb2:	ee18 1a10 	vmov	r1, s16
 801acb6:	9300      	str	r3, [sp, #0]
 801acb8:	220a      	movs	r2, #10
 801acba:	2300      	movs	r3, #0
 801acbc:	4620      	mov	r0, r4
 801acbe:	f000 fb55 	bl	801b36c <__multadd>
 801acc2:	9b08      	ldr	r3, [sp, #32]
 801acc4:	ee08 0a10 	vmov	s16, r0
 801acc8:	2b00      	cmp	r3, #0
 801acca:	f000 81b1 	beq.w	801b030 <_dtoa_r+0xbc0>
 801acce:	2300      	movs	r3, #0
 801acd0:	4639      	mov	r1, r7
 801acd2:	220a      	movs	r2, #10
 801acd4:	4620      	mov	r0, r4
 801acd6:	f000 fb49 	bl	801b36c <__multadd>
 801acda:	9b02      	ldr	r3, [sp, #8]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	4607      	mov	r7, r0
 801ace0:	f300 808e 	bgt.w	801ae00 <_dtoa_r+0x990>
 801ace4:	9b06      	ldr	r3, [sp, #24]
 801ace6:	2b02      	cmp	r3, #2
 801ace8:	dc51      	bgt.n	801ad8e <_dtoa_r+0x91e>
 801acea:	e089      	b.n	801ae00 <_dtoa_r+0x990>
 801acec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801acf2:	e74b      	b.n	801ab8c <_dtoa_r+0x71c>
 801acf4:	9b03      	ldr	r3, [sp, #12]
 801acf6:	1e5e      	subs	r6, r3, #1
 801acf8:	9b07      	ldr	r3, [sp, #28]
 801acfa:	42b3      	cmp	r3, r6
 801acfc:	bfbf      	itttt	lt
 801acfe:	9b07      	ldrlt	r3, [sp, #28]
 801ad00:	9607      	strlt	r6, [sp, #28]
 801ad02:	1af2      	sublt	r2, r6, r3
 801ad04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801ad06:	bfb6      	itet	lt
 801ad08:	189b      	addlt	r3, r3, r2
 801ad0a:	1b9e      	subge	r6, r3, r6
 801ad0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801ad0e:	9b03      	ldr	r3, [sp, #12]
 801ad10:	bfb8      	it	lt
 801ad12:	2600      	movlt	r6, #0
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	bfb7      	itett	lt
 801ad18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801ad1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801ad20:	1a9d      	sublt	r5, r3, r2
 801ad22:	2300      	movlt	r3, #0
 801ad24:	e734      	b.n	801ab90 <_dtoa_r+0x720>
 801ad26:	9e07      	ldr	r6, [sp, #28]
 801ad28:	9d04      	ldr	r5, [sp, #16]
 801ad2a:	9f08      	ldr	r7, [sp, #32]
 801ad2c:	e73b      	b.n	801aba6 <_dtoa_r+0x736>
 801ad2e:	9a07      	ldr	r2, [sp, #28]
 801ad30:	e767      	b.n	801ac02 <_dtoa_r+0x792>
 801ad32:	9b06      	ldr	r3, [sp, #24]
 801ad34:	2b01      	cmp	r3, #1
 801ad36:	dc18      	bgt.n	801ad6a <_dtoa_r+0x8fa>
 801ad38:	f1ba 0f00 	cmp.w	sl, #0
 801ad3c:	d115      	bne.n	801ad6a <_dtoa_r+0x8fa>
 801ad3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ad42:	b993      	cbnz	r3, 801ad6a <_dtoa_r+0x8fa>
 801ad44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ad48:	0d1b      	lsrs	r3, r3, #20
 801ad4a:	051b      	lsls	r3, r3, #20
 801ad4c:	b183      	cbz	r3, 801ad70 <_dtoa_r+0x900>
 801ad4e:	9b04      	ldr	r3, [sp, #16]
 801ad50:	3301      	adds	r3, #1
 801ad52:	9304      	str	r3, [sp, #16]
 801ad54:	9b05      	ldr	r3, [sp, #20]
 801ad56:	3301      	adds	r3, #1
 801ad58:	9305      	str	r3, [sp, #20]
 801ad5a:	f04f 0801 	mov.w	r8, #1
 801ad5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	f47f af6a 	bne.w	801ac3a <_dtoa_r+0x7ca>
 801ad66:	2001      	movs	r0, #1
 801ad68:	e76f      	b.n	801ac4a <_dtoa_r+0x7da>
 801ad6a:	f04f 0800 	mov.w	r8, #0
 801ad6e:	e7f6      	b.n	801ad5e <_dtoa_r+0x8ee>
 801ad70:	4698      	mov	r8, r3
 801ad72:	e7f4      	b.n	801ad5e <_dtoa_r+0x8ee>
 801ad74:	f43f af7d 	beq.w	801ac72 <_dtoa_r+0x802>
 801ad78:	4618      	mov	r0, r3
 801ad7a:	301c      	adds	r0, #28
 801ad7c:	e772      	b.n	801ac64 <_dtoa_r+0x7f4>
 801ad7e:	9b03      	ldr	r3, [sp, #12]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	dc37      	bgt.n	801adf4 <_dtoa_r+0x984>
 801ad84:	9b06      	ldr	r3, [sp, #24]
 801ad86:	2b02      	cmp	r3, #2
 801ad88:	dd34      	ble.n	801adf4 <_dtoa_r+0x984>
 801ad8a:	9b03      	ldr	r3, [sp, #12]
 801ad8c:	9302      	str	r3, [sp, #8]
 801ad8e:	9b02      	ldr	r3, [sp, #8]
 801ad90:	b96b      	cbnz	r3, 801adae <_dtoa_r+0x93e>
 801ad92:	4631      	mov	r1, r6
 801ad94:	2205      	movs	r2, #5
 801ad96:	4620      	mov	r0, r4
 801ad98:	f000 fae8 	bl	801b36c <__multadd>
 801ad9c:	4601      	mov	r1, r0
 801ad9e:	4606      	mov	r6, r0
 801ada0:	ee18 0a10 	vmov	r0, s16
 801ada4:	f000 fd02 	bl	801b7ac <__mcmp>
 801ada8:	2800      	cmp	r0, #0
 801adaa:	f73f adbb 	bgt.w	801a924 <_dtoa_r+0x4b4>
 801adae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adb0:	9d01      	ldr	r5, [sp, #4]
 801adb2:	43db      	mvns	r3, r3
 801adb4:	9300      	str	r3, [sp, #0]
 801adb6:	f04f 0800 	mov.w	r8, #0
 801adba:	4631      	mov	r1, r6
 801adbc:	4620      	mov	r0, r4
 801adbe:	f000 fab3 	bl	801b328 <_Bfree>
 801adc2:	2f00      	cmp	r7, #0
 801adc4:	f43f aea4 	beq.w	801ab10 <_dtoa_r+0x6a0>
 801adc8:	f1b8 0f00 	cmp.w	r8, #0
 801adcc:	d005      	beq.n	801adda <_dtoa_r+0x96a>
 801adce:	45b8      	cmp	r8, r7
 801add0:	d003      	beq.n	801adda <_dtoa_r+0x96a>
 801add2:	4641      	mov	r1, r8
 801add4:	4620      	mov	r0, r4
 801add6:	f000 faa7 	bl	801b328 <_Bfree>
 801adda:	4639      	mov	r1, r7
 801addc:	4620      	mov	r0, r4
 801adde:	f000 faa3 	bl	801b328 <_Bfree>
 801ade2:	e695      	b.n	801ab10 <_dtoa_r+0x6a0>
 801ade4:	2600      	movs	r6, #0
 801ade6:	4637      	mov	r7, r6
 801ade8:	e7e1      	b.n	801adae <_dtoa_r+0x93e>
 801adea:	9700      	str	r7, [sp, #0]
 801adec:	4637      	mov	r7, r6
 801adee:	e599      	b.n	801a924 <_dtoa_r+0x4b4>
 801adf0:	40240000 	.word	0x40240000
 801adf4:	9b08      	ldr	r3, [sp, #32]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	f000 80ca 	beq.w	801af90 <_dtoa_r+0xb20>
 801adfc:	9b03      	ldr	r3, [sp, #12]
 801adfe:	9302      	str	r3, [sp, #8]
 801ae00:	2d00      	cmp	r5, #0
 801ae02:	dd05      	ble.n	801ae10 <_dtoa_r+0x9a0>
 801ae04:	4639      	mov	r1, r7
 801ae06:	462a      	mov	r2, r5
 801ae08:	4620      	mov	r0, r4
 801ae0a:	f000 fc5f 	bl	801b6cc <__lshift>
 801ae0e:	4607      	mov	r7, r0
 801ae10:	f1b8 0f00 	cmp.w	r8, #0
 801ae14:	d05b      	beq.n	801aece <_dtoa_r+0xa5e>
 801ae16:	6879      	ldr	r1, [r7, #4]
 801ae18:	4620      	mov	r0, r4
 801ae1a:	f000 fa45 	bl	801b2a8 <_Balloc>
 801ae1e:	4605      	mov	r5, r0
 801ae20:	b928      	cbnz	r0, 801ae2e <_dtoa_r+0x9be>
 801ae22:	4b87      	ldr	r3, [pc, #540]	; (801b040 <_dtoa_r+0xbd0>)
 801ae24:	4602      	mov	r2, r0
 801ae26:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ae2a:	f7ff bb3b 	b.w	801a4a4 <_dtoa_r+0x34>
 801ae2e:	693a      	ldr	r2, [r7, #16]
 801ae30:	3202      	adds	r2, #2
 801ae32:	0092      	lsls	r2, r2, #2
 801ae34:	f107 010c 	add.w	r1, r7, #12
 801ae38:	300c      	adds	r0, #12
 801ae3a:	f7fe fc37 	bl	80196ac <memcpy>
 801ae3e:	2201      	movs	r2, #1
 801ae40:	4629      	mov	r1, r5
 801ae42:	4620      	mov	r0, r4
 801ae44:	f000 fc42 	bl	801b6cc <__lshift>
 801ae48:	9b01      	ldr	r3, [sp, #4]
 801ae4a:	f103 0901 	add.w	r9, r3, #1
 801ae4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ae52:	4413      	add	r3, r2
 801ae54:	9305      	str	r3, [sp, #20]
 801ae56:	f00a 0301 	and.w	r3, sl, #1
 801ae5a:	46b8      	mov	r8, r7
 801ae5c:	9304      	str	r3, [sp, #16]
 801ae5e:	4607      	mov	r7, r0
 801ae60:	4631      	mov	r1, r6
 801ae62:	ee18 0a10 	vmov	r0, s16
 801ae66:	f7ff fa77 	bl	801a358 <quorem>
 801ae6a:	4641      	mov	r1, r8
 801ae6c:	9002      	str	r0, [sp, #8]
 801ae6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801ae72:	ee18 0a10 	vmov	r0, s16
 801ae76:	f000 fc99 	bl	801b7ac <__mcmp>
 801ae7a:	463a      	mov	r2, r7
 801ae7c:	9003      	str	r0, [sp, #12]
 801ae7e:	4631      	mov	r1, r6
 801ae80:	4620      	mov	r0, r4
 801ae82:	f000 fcaf 	bl	801b7e4 <__mdiff>
 801ae86:	68c2      	ldr	r2, [r0, #12]
 801ae88:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801ae8c:	4605      	mov	r5, r0
 801ae8e:	bb02      	cbnz	r2, 801aed2 <_dtoa_r+0xa62>
 801ae90:	4601      	mov	r1, r0
 801ae92:	ee18 0a10 	vmov	r0, s16
 801ae96:	f000 fc89 	bl	801b7ac <__mcmp>
 801ae9a:	4602      	mov	r2, r0
 801ae9c:	4629      	mov	r1, r5
 801ae9e:	4620      	mov	r0, r4
 801aea0:	9207      	str	r2, [sp, #28]
 801aea2:	f000 fa41 	bl	801b328 <_Bfree>
 801aea6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801aeaa:	ea43 0102 	orr.w	r1, r3, r2
 801aeae:	9b04      	ldr	r3, [sp, #16]
 801aeb0:	430b      	orrs	r3, r1
 801aeb2:	464d      	mov	r5, r9
 801aeb4:	d10f      	bne.n	801aed6 <_dtoa_r+0xa66>
 801aeb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801aeba:	d02a      	beq.n	801af12 <_dtoa_r+0xaa2>
 801aebc:	9b03      	ldr	r3, [sp, #12]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	dd02      	ble.n	801aec8 <_dtoa_r+0xa58>
 801aec2:	9b02      	ldr	r3, [sp, #8]
 801aec4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801aec8:	f88b a000 	strb.w	sl, [fp]
 801aecc:	e775      	b.n	801adba <_dtoa_r+0x94a>
 801aece:	4638      	mov	r0, r7
 801aed0:	e7ba      	b.n	801ae48 <_dtoa_r+0x9d8>
 801aed2:	2201      	movs	r2, #1
 801aed4:	e7e2      	b.n	801ae9c <_dtoa_r+0xa2c>
 801aed6:	9b03      	ldr	r3, [sp, #12]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	db04      	blt.n	801aee6 <_dtoa_r+0xa76>
 801aedc:	9906      	ldr	r1, [sp, #24]
 801aede:	430b      	orrs	r3, r1
 801aee0:	9904      	ldr	r1, [sp, #16]
 801aee2:	430b      	orrs	r3, r1
 801aee4:	d122      	bne.n	801af2c <_dtoa_r+0xabc>
 801aee6:	2a00      	cmp	r2, #0
 801aee8:	ddee      	ble.n	801aec8 <_dtoa_r+0xa58>
 801aeea:	ee18 1a10 	vmov	r1, s16
 801aeee:	2201      	movs	r2, #1
 801aef0:	4620      	mov	r0, r4
 801aef2:	f000 fbeb 	bl	801b6cc <__lshift>
 801aef6:	4631      	mov	r1, r6
 801aef8:	ee08 0a10 	vmov	s16, r0
 801aefc:	f000 fc56 	bl	801b7ac <__mcmp>
 801af00:	2800      	cmp	r0, #0
 801af02:	dc03      	bgt.n	801af0c <_dtoa_r+0xa9c>
 801af04:	d1e0      	bne.n	801aec8 <_dtoa_r+0xa58>
 801af06:	f01a 0f01 	tst.w	sl, #1
 801af0a:	d0dd      	beq.n	801aec8 <_dtoa_r+0xa58>
 801af0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801af10:	d1d7      	bne.n	801aec2 <_dtoa_r+0xa52>
 801af12:	2339      	movs	r3, #57	; 0x39
 801af14:	f88b 3000 	strb.w	r3, [fp]
 801af18:	462b      	mov	r3, r5
 801af1a:	461d      	mov	r5, r3
 801af1c:	3b01      	subs	r3, #1
 801af1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801af22:	2a39      	cmp	r2, #57	; 0x39
 801af24:	d071      	beq.n	801b00a <_dtoa_r+0xb9a>
 801af26:	3201      	adds	r2, #1
 801af28:	701a      	strb	r2, [r3, #0]
 801af2a:	e746      	b.n	801adba <_dtoa_r+0x94a>
 801af2c:	2a00      	cmp	r2, #0
 801af2e:	dd07      	ble.n	801af40 <_dtoa_r+0xad0>
 801af30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801af34:	d0ed      	beq.n	801af12 <_dtoa_r+0xaa2>
 801af36:	f10a 0301 	add.w	r3, sl, #1
 801af3a:	f88b 3000 	strb.w	r3, [fp]
 801af3e:	e73c      	b.n	801adba <_dtoa_r+0x94a>
 801af40:	9b05      	ldr	r3, [sp, #20]
 801af42:	f809 ac01 	strb.w	sl, [r9, #-1]
 801af46:	4599      	cmp	r9, r3
 801af48:	d047      	beq.n	801afda <_dtoa_r+0xb6a>
 801af4a:	ee18 1a10 	vmov	r1, s16
 801af4e:	2300      	movs	r3, #0
 801af50:	220a      	movs	r2, #10
 801af52:	4620      	mov	r0, r4
 801af54:	f000 fa0a 	bl	801b36c <__multadd>
 801af58:	45b8      	cmp	r8, r7
 801af5a:	ee08 0a10 	vmov	s16, r0
 801af5e:	f04f 0300 	mov.w	r3, #0
 801af62:	f04f 020a 	mov.w	r2, #10
 801af66:	4641      	mov	r1, r8
 801af68:	4620      	mov	r0, r4
 801af6a:	d106      	bne.n	801af7a <_dtoa_r+0xb0a>
 801af6c:	f000 f9fe 	bl	801b36c <__multadd>
 801af70:	4680      	mov	r8, r0
 801af72:	4607      	mov	r7, r0
 801af74:	f109 0901 	add.w	r9, r9, #1
 801af78:	e772      	b.n	801ae60 <_dtoa_r+0x9f0>
 801af7a:	f000 f9f7 	bl	801b36c <__multadd>
 801af7e:	4639      	mov	r1, r7
 801af80:	4680      	mov	r8, r0
 801af82:	2300      	movs	r3, #0
 801af84:	220a      	movs	r2, #10
 801af86:	4620      	mov	r0, r4
 801af88:	f000 f9f0 	bl	801b36c <__multadd>
 801af8c:	4607      	mov	r7, r0
 801af8e:	e7f1      	b.n	801af74 <_dtoa_r+0xb04>
 801af90:	9b03      	ldr	r3, [sp, #12]
 801af92:	9302      	str	r3, [sp, #8]
 801af94:	9d01      	ldr	r5, [sp, #4]
 801af96:	ee18 0a10 	vmov	r0, s16
 801af9a:	4631      	mov	r1, r6
 801af9c:	f7ff f9dc 	bl	801a358 <quorem>
 801afa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801afa4:	9b01      	ldr	r3, [sp, #4]
 801afa6:	f805 ab01 	strb.w	sl, [r5], #1
 801afaa:	1aea      	subs	r2, r5, r3
 801afac:	9b02      	ldr	r3, [sp, #8]
 801afae:	4293      	cmp	r3, r2
 801afb0:	dd09      	ble.n	801afc6 <_dtoa_r+0xb56>
 801afb2:	ee18 1a10 	vmov	r1, s16
 801afb6:	2300      	movs	r3, #0
 801afb8:	220a      	movs	r2, #10
 801afba:	4620      	mov	r0, r4
 801afbc:	f000 f9d6 	bl	801b36c <__multadd>
 801afc0:	ee08 0a10 	vmov	s16, r0
 801afc4:	e7e7      	b.n	801af96 <_dtoa_r+0xb26>
 801afc6:	9b02      	ldr	r3, [sp, #8]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	bfc8      	it	gt
 801afcc:	461d      	movgt	r5, r3
 801afce:	9b01      	ldr	r3, [sp, #4]
 801afd0:	bfd8      	it	le
 801afd2:	2501      	movle	r5, #1
 801afd4:	441d      	add	r5, r3
 801afd6:	f04f 0800 	mov.w	r8, #0
 801afda:	ee18 1a10 	vmov	r1, s16
 801afde:	2201      	movs	r2, #1
 801afe0:	4620      	mov	r0, r4
 801afe2:	f000 fb73 	bl	801b6cc <__lshift>
 801afe6:	4631      	mov	r1, r6
 801afe8:	ee08 0a10 	vmov	s16, r0
 801afec:	f000 fbde 	bl	801b7ac <__mcmp>
 801aff0:	2800      	cmp	r0, #0
 801aff2:	dc91      	bgt.n	801af18 <_dtoa_r+0xaa8>
 801aff4:	d102      	bne.n	801affc <_dtoa_r+0xb8c>
 801aff6:	f01a 0f01 	tst.w	sl, #1
 801affa:	d18d      	bne.n	801af18 <_dtoa_r+0xaa8>
 801affc:	462b      	mov	r3, r5
 801affe:	461d      	mov	r5, r3
 801b000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b004:	2a30      	cmp	r2, #48	; 0x30
 801b006:	d0fa      	beq.n	801affe <_dtoa_r+0xb8e>
 801b008:	e6d7      	b.n	801adba <_dtoa_r+0x94a>
 801b00a:	9a01      	ldr	r2, [sp, #4]
 801b00c:	429a      	cmp	r2, r3
 801b00e:	d184      	bne.n	801af1a <_dtoa_r+0xaaa>
 801b010:	9b00      	ldr	r3, [sp, #0]
 801b012:	3301      	adds	r3, #1
 801b014:	9300      	str	r3, [sp, #0]
 801b016:	2331      	movs	r3, #49	; 0x31
 801b018:	7013      	strb	r3, [r2, #0]
 801b01a:	e6ce      	b.n	801adba <_dtoa_r+0x94a>
 801b01c:	4b09      	ldr	r3, [pc, #36]	; (801b044 <_dtoa_r+0xbd4>)
 801b01e:	f7ff ba95 	b.w	801a54c <_dtoa_r+0xdc>
 801b022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b024:	2b00      	cmp	r3, #0
 801b026:	f47f aa6e 	bne.w	801a506 <_dtoa_r+0x96>
 801b02a:	4b07      	ldr	r3, [pc, #28]	; (801b048 <_dtoa_r+0xbd8>)
 801b02c:	f7ff ba8e 	b.w	801a54c <_dtoa_r+0xdc>
 801b030:	9b02      	ldr	r3, [sp, #8]
 801b032:	2b00      	cmp	r3, #0
 801b034:	dcae      	bgt.n	801af94 <_dtoa_r+0xb24>
 801b036:	9b06      	ldr	r3, [sp, #24]
 801b038:	2b02      	cmp	r3, #2
 801b03a:	f73f aea8 	bgt.w	801ad8e <_dtoa_r+0x91e>
 801b03e:	e7a9      	b.n	801af94 <_dtoa_r+0xb24>
 801b040:	0801cf45 	.word	0x0801cf45
 801b044:	0801cd08 	.word	0x0801cd08
 801b048:	0801cedd 	.word	0x0801cedd

0801b04c <std>:
 801b04c:	2300      	movs	r3, #0
 801b04e:	b510      	push	{r4, lr}
 801b050:	4604      	mov	r4, r0
 801b052:	e9c0 3300 	strd	r3, r3, [r0]
 801b056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b05a:	6083      	str	r3, [r0, #8]
 801b05c:	8181      	strh	r1, [r0, #12]
 801b05e:	6643      	str	r3, [r0, #100]	; 0x64
 801b060:	81c2      	strh	r2, [r0, #14]
 801b062:	6183      	str	r3, [r0, #24]
 801b064:	4619      	mov	r1, r3
 801b066:	2208      	movs	r2, #8
 801b068:	305c      	adds	r0, #92	; 0x5c
 801b06a:	f7fe fb2d 	bl	80196c8 <memset>
 801b06e:	4b05      	ldr	r3, [pc, #20]	; (801b084 <std+0x38>)
 801b070:	6263      	str	r3, [r4, #36]	; 0x24
 801b072:	4b05      	ldr	r3, [pc, #20]	; (801b088 <std+0x3c>)
 801b074:	62a3      	str	r3, [r4, #40]	; 0x28
 801b076:	4b05      	ldr	r3, [pc, #20]	; (801b08c <std+0x40>)
 801b078:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b07a:	4b05      	ldr	r3, [pc, #20]	; (801b090 <std+0x44>)
 801b07c:	6224      	str	r4, [r4, #32]
 801b07e:	6323      	str	r3, [r4, #48]	; 0x30
 801b080:	bd10      	pop	{r4, pc}
 801b082:	bf00      	nop
 801b084:	0801bf49 	.word	0x0801bf49
 801b088:	0801bf6b 	.word	0x0801bf6b
 801b08c:	0801bfa3 	.word	0x0801bfa3
 801b090:	0801bfc7 	.word	0x0801bfc7

0801b094 <_cleanup_r>:
 801b094:	4901      	ldr	r1, [pc, #4]	; (801b09c <_cleanup_r+0x8>)
 801b096:	f000 b8c1 	b.w	801b21c <_fwalk_reent>
 801b09a:	bf00      	nop
 801b09c:	0801c2cd 	.word	0x0801c2cd

0801b0a0 <__sfmoreglue>:
 801b0a0:	b570      	push	{r4, r5, r6, lr}
 801b0a2:	2268      	movs	r2, #104	; 0x68
 801b0a4:	1e4d      	subs	r5, r1, #1
 801b0a6:	4355      	muls	r5, r2
 801b0a8:	460e      	mov	r6, r1
 801b0aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b0ae:	f7fe fb7f 	bl	80197b0 <_malloc_r>
 801b0b2:	4604      	mov	r4, r0
 801b0b4:	b140      	cbz	r0, 801b0c8 <__sfmoreglue+0x28>
 801b0b6:	2100      	movs	r1, #0
 801b0b8:	e9c0 1600 	strd	r1, r6, [r0]
 801b0bc:	300c      	adds	r0, #12
 801b0be:	60a0      	str	r0, [r4, #8]
 801b0c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b0c4:	f7fe fb00 	bl	80196c8 <memset>
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	bd70      	pop	{r4, r5, r6, pc}

0801b0cc <__sfp_lock_acquire>:
 801b0cc:	4801      	ldr	r0, [pc, #4]	; (801b0d4 <__sfp_lock_acquire+0x8>)
 801b0ce:	f000 b8ca 	b.w	801b266 <__retarget_lock_acquire_recursive>
 801b0d2:	bf00      	nop
 801b0d4:	20002fc5 	.word	0x20002fc5

0801b0d8 <__sfp_lock_release>:
 801b0d8:	4801      	ldr	r0, [pc, #4]	; (801b0e0 <__sfp_lock_release+0x8>)
 801b0da:	f000 b8c5 	b.w	801b268 <__retarget_lock_release_recursive>
 801b0de:	bf00      	nop
 801b0e0:	20002fc5 	.word	0x20002fc5

0801b0e4 <__sinit_lock_acquire>:
 801b0e4:	4801      	ldr	r0, [pc, #4]	; (801b0ec <__sinit_lock_acquire+0x8>)
 801b0e6:	f000 b8be 	b.w	801b266 <__retarget_lock_acquire_recursive>
 801b0ea:	bf00      	nop
 801b0ec:	20002fc6 	.word	0x20002fc6

0801b0f0 <__sinit_lock_release>:
 801b0f0:	4801      	ldr	r0, [pc, #4]	; (801b0f8 <__sinit_lock_release+0x8>)
 801b0f2:	f000 b8b9 	b.w	801b268 <__retarget_lock_release_recursive>
 801b0f6:	bf00      	nop
 801b0f8:	20002fc6 	.word	0x20002fc6

0801b0fc <__sinit>:
 801b0fc:	b510      	push	{r4, lr}
 801b0fe:	4604      	mov	r4, r0
 801b100:	f7ff fff0 	bl	801b0e4 <__sinit_lock_acquire>
 801b104:	69a3      	ldr	r3, [r4, #24]
 801b106:	b11b      	cbz	r3, 801b110 <__sinit+0x14>
 801b108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b10c:	f7ff bff0 	b.w	801b0f0 <__sinit_lock_release>
 801b110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b114:	6523      	str	r3, [r4, #80]	; 0x50
 801b116:	4b13      	ldr	r3, [pc, #76]	; (801b164 <__sinit+0x68>)
 801b118:	4a13      	ldr	r2, [pc, #76]	; (801b168 <__sinit+0x6c>)
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	62a2      	str	r2, [r4, #40]	; 0x28
 801b11e:	42a3      	cmp	r3, r4
 801b120:	bf04      	itt	eq
 801b122:	2301      	moveq	r3, #1
 801b124:	61a3      	streq	r3, [r4, #24]
 801b126:	4620      	mov	r0, r4
 801b128:	f000 f820 	bl	801b16c <__sfp>
 801b12c:	6060      	str	r0, [r4, #4]
 801b12e:	4620      	mov	r0, r4
 801b130:	f000 f81c 	bl	801b16c <__sfp>
 801b134:	60a0      	str	r0, [r4, #8]
 801b136:	4620      	mov	r0, r4
 801b138:	f000 f818 	bl	801b16c <__sfp>
 801b13c:	2200      	movs	r2, #0
 801b13e:	60e0      	str	r0, [r4, #12]
 801b140:	2104      	movs	r1, #4
 801b142:	6860      	ldr	r0, [r4, #4]
 801b144:	f7ff ff82 	bl	801b04c <std>
 801b148:	68a0      	ldr	r0, [r4, #8]
 801b14a:	2201      	movs	r2, #1
 801b14c:	2109      	movs	r1, #9
 801b14e:	f7ff ff7d 	bl	801b04c <std>
 801b152:	68e0      	ldr	r0, [r4, #12]
 801b154:	2202      	movs	r2, #2
 801b156:	2112      	movs	r1, #18
 801b158:	f7ff ff78 	bl	801b04c <std>
 801b15c:	2301      	movs	r3, #1
 801b15e:	61a3      	str	r3, [r4, #24]
 801b160:	e7d2      	b.n	801b108 <__sinit+0xc>
 801b162:	bf00      	nop
 801b164:	0801ccf4 	.word	0x0801ccf4
 801b168:	0801b095 	.word	0x0801b095

0801b16c <__sfp>:
 801b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b16e:	4607      	mov	r7, r0
 801b170:	f7ff ffac 	bl	801b0cc <__sfp_lock_acquire>
 801b174:	4b1e      	ldr	r3, [pc, #120]	; (801b1f0 <__sfp+0x84>)
 801b176:	681e      	ldr	r6, [r3, #0]
 801b178:	69b3      	ldr	r3, [r6, #24]
 801b17a:	b913      	cbnz	r3, 801b182 <__sfp+0x16>
 801b17c:	4630      	mov	r0, r6
 801b17e:	f7ff ffbd 	bl	801b0fc <__sinit>
 801b182:	3648      	adds	r6, #72	; 0x48
 801b184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b188:	3b01      	subs	r3, #1
 801b18a:	d503      	bpl.n	801b194 <__sfp+0x28>
 801b18c:	6833      	ldr	r3, [r6, #0]
 801b18e:	b30b      	cbz	r3, 801b1d4 <__sfp+0x68>
 801b190:	6836      	ldr	r6, [r6, #0]
 801b192:	e7f7      	b.n	801b184 <__sfp+0x18>
 801b194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b198:	b9d5      	cbnz	r5, 801b1d0 <__sfp+0x64>
 801b19a:	4b16      	ldr	r3, [pc, #88]	; (801b1f4 <__sfp+0x88>)
 801b19c:	60e3      	str	r3, [r4, #12]
 801b19e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b1a2:	6665      	str	r5, [r4, #100]	; 0x64
 801b1a4:	f000 f85e 	bl	801b264 <__retarget_lock_init_recursive>
 801b1a8:	f7ff ff96 	bl	801b0d8 <__sfp_lock_release>
 801b1ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b1b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b1b4:	6025      	str	r5, [r4, #0]
 801b1b6:	61a5      	str	r5, [r4, #24]
 801b1b8:	2208      	movs	r2, #8
 801b1ba:	4629      	mov	r1, r5
 801b1bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b1c0:	f7fe fa82 	bl	80196c8 <memset>
 801b1c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b1c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1d0:	3468      	adds	r4, #104	; 0x68
 801b1d2:	e7d9      	b.n	801b188 <__sfp+0x1c>
 801b1d4:	2104      	movs	r1, #4
 801b1d6:	4638      	mov	r0, r7
 801b1d8:	f7ff ff62 	bl	801b0a0 <__sfmoreglue>
 801b1dc:	4604      	mov	r4, r0
 801b1de:	6030      	str	r0, [r6, #0]
 801b1e0:	2800      	cmp	r0, #0
 801b1e2:	d1d5      	bne.n	801b190 <__sfp+0x24>
 801b1e4:	f7ff ff78 	bl	801b0d8 <__sfp_lock_release>
 801b1e8:	230c      	movs	r3, #12
 801b1ea:	603b      	str	r3, [r7, #0]
 801b1ec:	e7ee      	b.n	801b1cc <__sfp+0x60>
 801b1ee:	bf00      	nop
 801b1f0:	0801ccf4 	.word	0x0801ccf4
 801b1f4:	ffff0001 	.word	0xffff0001

0801b1f8 <fiprintf>:
 801b1f8:	b40e      	push	{r1, r2, r3}
 801b1fa:	b503      	push	{r0, r1, lr}
 801b1fc:	4601      	mov	r1, r0
 801b1fe:	ab03      	add	r3, sp, #12
 801b200:	4805      	ldr	r0, [pc, #20]	; (801b218 <fiprintf+0x20>)
 801b202:	f853 2b04 	ldr.w	r2, [r3], #4
 801b206:	6800      	ldr	r0, [r0, #0]
 801b208:	9301      	str	r3, [sp, #4]
 801b20a:	f000 fd6d 	bl	801bce8 <_vfiprintf_r>
 801b20e:	b002      	add	sp, #8
 801b210:	f85d eb04 	ldr.w	lr, [sp], #4
 801b214:	b003      	add	sp, #12
 801b216:	4770      	bx	lr
 801b218:	20000100 	.word	0x20000100

0801b21c <_fwalk_reent>:
 801b21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b220:	4606      	mov	r6, r0
 801b222:	4688      	mov	r8, r1
 801b224:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b228:	2700      	movs	r7, #0
 801b22a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b22e:	f1b9 0901 	subs.w	r9, r9, #1
 801b232:	d505      	bpl.n	801b240 <_fwalk_reent+0x24>
 801b234:	6824      	ldr	r4, [r4, #0]
 801b236:	2c00      	cmp	r4, #0
 801b238:	d1f7      	bne.n	801b22a <_fwalk_reent+0xe>
 801b23a:	4638      	mov	r0, r7
 801b23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b240:	89ab      	ldrh	r3, [r5, #12]
 801b242:	2b01      	cmp	r3, #1
 801b244:	d907      	bls.n	801b256 <_fwalk_reent+0x3a>
 801b246:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b24a:	3301      	adds	r3, #1
 801b24c:	d003      	beq.n	801b256 <_fwalk_reent+0x3a>
 801b24e:	4629      	mov	r1, r5
 801b250:	4630      	mov	r0, r6
 801b252:	47c0      	blx	r8
 801b254:	4307      	orrs	r7, r0
 801b256:	3568      	adds	r5, #104	; 0x68
 801b258:	e7e9      	b.n	801b22e <_fwalk_reent+0x12>
	...

0801b25c <_localeconv_r>:
 801b25c:	4800      	ldr	r0, [pc, #0]	; (801b260 <_localeconv_r+0x4>)
 801b25e:	4770      	bx	lr
 801b260:	20000254 	.word	0x20000254

0801b264 <__retarget_lock_init_recursive>:
 801b264:	4770      	bx	lr

0801b266 <__retarget_lock_acquire_recursive>:
 801b266:	4770      	bx	lr

0801b268 <__retarget_lock_release_recursive>:
 801b268:	4770      	bx	lr

0801b26a <__ascii_mbtowc>:
 801b26a:	b082      	sub	sp, #8
 801b26c:	b901      	cbnz	r1, 801b270 <__ascii_mbtowc+0x6>
 801b26e:	a901      	add	r1, sp, #4
 801b270:	b142      	cbz	r2, 801b284 <__ascii_mbtowc+0x1a>
 801b272:	b14b      	cbz	r3, 801b288 <__ascii_mbtowc+0x1e>
 801b274:	7813      	ldrb	r3, [r2, #0]
 801b276:	600b      	str	r3, [r1, #0]
 801b278:	7812      	ldrb	r2, [r2, #0]
 801b27a:	1e10      	subs	r0, r2, #0
 801b27c:	bf18      	it	ne
 801b27e:	2001      	movne	r0, #1
 801b280:	b002      	add	sp, #8
 801b282:	4770      	bx	lr
 801b284:	4610      	mov	r0, r2
 801b286:	e7fb      	b.n	801b280 <__ascii_mbtowc+0x16>
 801b288:	f06f 0001 	mvn.w	r0, #1
 801b28c:	e7f8      	b.n	801b280 <__ascii_mbtowc+0x16>
	...

0801b290 <__malloc_lock>:
 801b290:	4801      	ldr	r0, [pc, #4]	; (801b298 <__malloc_lock+0x8>)
 801b292:	f7ff bfe8 	b.w	801b266 <__retarget_lock_acquire_recursive>
 801b296:	bf00      	nop
 801b298:	20002fc4 	.word	0x20002fc4

0801b29c <__malloc_unlock>:
 801b29c:	4801      	ldr	r0, [pc, #4]	; (801b2a4 <__malloc_unlock+0x8>)
 801b29e:	f7ff bfe3 	b.w	801b268 <__retarget_lock_release_recursive>
 801b2a2:	bf00      	nop
 801b2a4:	20002fc4 	.word	0x20002fc4

0801b2a8 <_Balloc>:
 801b2a8:	b570      	push	{r4, r5, r6, lr}
 801b2aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b2ac:	4604      	mov	r4, r0
 801b2ae:	460d      	mov	r5, r1
 801b2b0:	b976      	cbnz	r6, 801b2d0 <_Balloc+0x28>
 801b2b2:	2010      	movs	r0, #16
 801b2b4:	f7fe f9ea 	bl	801968c <malloc>
 801b2b8:	4602      	mov	r2, r0
 801b2ba:	6260      	str	r0, [r4, #36]	; 0x24
 801b2bc:	b920      	cbnz	r0, 801b2c8 <_Balloc+0x20>
 801b2be:	4b18      	ldr	r3, [pc, #96]	; (801b320 <_Balloc+0x78>)
 801b2c0:	4818      	ldr	r0, [pc, #96]	; (801b324 <_Balloc+0x7c>)
 801b2c2:	2166      	movs	r1, #102	; 0x66
 801b2c4:	f7ff f82a 	bl	801a31c <__assert_func>
 801b2c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b2cc:	6006      	str	r6, [r0, #0]
 801b2ce:	60c6      	str	r6, [r0, #12]
 801b2d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b2d2:	68f3      	ldr	r3, [r6, #12]
 801b2d4:	b183      	cbz	r3, 801b2f8 <_Balloc+0x50>
 801b2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b2d8:	68db      	ldr	r3, [r3, #12]
 801b2da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b2de:	b9b8      	cbnz	r0, 801b310 <_Balloc+0x68>
 801b2e0:	2101      	movs	r1, #1
 801b2e2:	fa01 f605 	lsl.w	r6, r1, r5
 801b2e6:	1d72      	adds	r2, r6, #5
 801b2e8:	0092      	lsls	r2, r2, #2
 801b2ea:	4620      	mov	r0, r4
 801b2ec:	f000 fb60 	bl	801b9b0 <_calloc_r>
 801b2f0:	b160      	cbz	r0, 801b30c <_Balloc+0x64>
 801b2f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b2f6:	e00e      	b.n	801b316 <_Balloc+0x6e>
 801b2f8:	2221      	movs	r2, #33	; 0x21
 801b2fa:	2104      	movs	r1, #4
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f000 fb57 	bl	801b9b0 <_calloc_r>
 801b302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b304:	60f0      	str	r0, [r6, #12]
 801b306:	68db      	ldr	r3, [r3, #12]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d1e4      	bne.n	801b2d6 <_Balloc+0x2e>
 801b30c:	2000      	movs	r0, #0
 801b30e:	bd70      	pop	{r4, r5, r6, pc}
 801b310:	6802      	ldr	r2, [r0, #0]
 801b312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b316:	2300      	movs	r3, #0
 801b318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b31c:	e7f7      	b.n	801b30e <_Balloc+0x66>
 801b31e:	bf00      	nop
 801b320:	0801cd2c 	.word	0x0801cd2c
 801b324:	0801cfc2 	.word	0x0801cfc2

0801b328 <_Bfree>:
 801b328:	b570      	push	{r4, r5, r6, lr}
 801b32a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b32c:	4605      	mov	r5, r0
 801b32e:	460c      	mov	r4, r1
 801b330:	b976      	cbnz	r6, 801b350 <_Bfree+0x28>
 801b332:	2010      	movs	r0, #16
 801b334:	f7fe f9aa 	bl	801968c <malloc>
 801b338:	4602      	mov	r2, r0
 801b33a:	6268      	str	r0, [r5, #36]	; 0x24
 801b33c:	b920      	cbnz	r0, 801b348 <_Bfree+0x20>
 801b33e:	4b09      	ldr	r3, [pc, #36]	; (801b364 <_Bfree+0x3c>)
 801b340:	4809      	ldr	r0, [pc, #36]	; (801b368 <_Bfree+0x40>)
 801b342:	218a      	movs	r1, #138	; 0x8a
 801b344:	f7fe ffea 	bl	801a31c <__assert_func>
 801b348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b34c:	6006      	str	r6, [r0, #0]
 801b34e:	60c6      	str	r6, [r0, #12]
 801b350:	b13c      	cbz	r4, 801b362 <_Bfree+0x3a>
 801b352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b354:	6862      	ldr	r2, [r4, #4]
 801b356:	68db      	ldr	r3, [r3, #12]
 801b358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b35c:	6021      	str	r1, [r4, #0]
 801b35e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b362:	bd70      	pop	{r4, r5, r6, pc}
 801b364:	0801cd2c 	.word	0x0801cd2c
 801b368:	0801cfc2 	.word	0x0801cfc2

0801b36c <__multadd>:
 801b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b370:	690d      	ldr	r5, [r1, #16]
 801b372:	4607      	mov	r7, r0
 801b374:	460c      	mov	r4, r1
 801b376:	461e      	mov	r6, r3
 801b378:	f101 0c14 	add.w	ip, r1, #20
 801b37c:	2000      	movs	r0, #0
 801b37e:	f8dc 3000 	ldr.w	r3, [ip]
 801b382:	b299      	uxth	r1, r3
 801b384:	fb02 6101 	mla	r1, r2, r1, r6
 801b388:	0c1e      	lsrs	r6, r3, #16
 801b38a:	0c0b      	lsrs	r3, r1, #16
 801b38c:	fb02 3306 	mla	r3, r2, r6, r3
 801b390:	b289      	uxth	r1, r1
 801b392:	3001      	adds	r0, #1
 801b394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b398:	4285      	cmp	r5, r0
 801b39a:	f84c 1b04 	str.w	r1, [ip], #4
 801b39e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b3a2:	dcec      	bgt.n	801b37e <__multadd+0x12>
 801b3a4:	b30e      	cbz	r6, 801b3ea <__multadd+0x7e>
 801b3a6:	68a3      	ldr	r3, [r4, #8]
 801b3a8:	42ab      	cmp	r3, r5
 801b3aa:	dc19      	bgt.n	801b3e0 <__multadd+0x74>
 801b3ac:	6861      	ldr	r1, [r4, #4]
 801b3ae:	4638      	mov	r0, r7
 801b3b0:	3101      	adds	r1, #1
 801b3b2:	f7ff ff79 	bl	801b2a8 <_Balloc>
 801b3b6:	4680      	mov	r8, r0
 801b3b8:	b928      	cbnz	r0, 801b3c6 <__multadd+0x5a>
 801b3ba:	4602      	mov	r2, r0
 801b3bc:	4b0c      	ldr	r3, [pc, #48]	; (801b3f0 <__multadd+0x84>)
 801b3be:	480d      	ldr	r0, [pc, #52]	; (801b3f4 <__multadd+0x88>)
 801b3c0:	21b5      	movs	r1, #181	; 0xb5
 801b3c2:	f7fe ffab 	bl	801a31c <__assert_func>
 801b3c6:	6922      	ldr	r2, [r4, #16]
 801b3c8:	3202      	adds	r2, #2
 801b3ca:	f104 010c 	add.w	r1, r4, #12
 801b3ce:	0092      	lsls	r2, r2, #2
 801b3d0:	300c      	adds	r0, #12
 801b3d2:	f7fe f96b 	bl	80196ac <memcpy>
 801b3d6:	4621      	mov	r1, r4
 801b3d8:	4638      	mov	r0, r7
 801b3da:	f7ff ffa5 	bl	801b328 <_Bfree>
 801b3de:	4644      	mov	r4, r8
 801b3e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b3e4:	3501      	adds	r5, #1
 801b3e6:	615e      	str	r6, [r3, #20]
 801b3e8:	6125      	str	r5, [r4, #16]
 801b3ea:	4620      	mov	r0, r4
 801b3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3f0:	0801cf45 	.word	0x0801cf45
 801b3f4:	0801cfc2 	.word	0x0801cfc2

0801b3f8 <__hi0bits>:
 801b3f8:	0c03      	lsrs	r3, r0, #16
 801b3fa:	041b      	lsls	r3, r3, #16
 801b3fc:	b9d3      	cbnz	r3, 801b434 <__hi0bits+0x3c>
 801b3fe:	0400      	lsls	r0, r0, #16
 801b400:	2310      	movs	r3, #16
 801b402:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b406:	bf04      	itt	eq
 801b408:	0200      	lsleq	r0, r0, #8
 801b40a:	3308      	addeq	r3, #8
 801b40c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b410:	bf04      	itt	eq
 801b412:	0100      	lsleq	r0, r0, #4
 801b414:	3304      	addeq	r3, #4
 801b416:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b41a:	bf04      	itt	eq
 801b41c:	0080      	lsleq	r0, r0, #2
 801b41e:	3302      	addeq	r3, #2
 801b420:	2800      	cmp	r0, #0
 801b422:	db05      	blt.n	801b430 <__hi0bits+0x38>
 801b424:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b428:	f103 0301 	add.w	r3, r3, #1
 801b42c:	bf08      	it	eq
 801b42e:	2320      	moveq	r3, #32
 801b430:	4618      	mov	r0, r3
 801b432:	4770      	bx	lr
 801b434:	2300      	movs	r3, #0
 801b436:	e7e4      	b.n	801b402 <__hi0bits+0xa>

0801b438 <__lo0bits>:
 801b438:	6803      	ldr	r3, [r0, #0]
 801b43a:	f013 0207 	ands.w	r2, r3, #7
 801b43e:	4601      	mov	r1, r0
 801b440:	d00b      	beq.n	801b45a <__lo0bits+0x22>
 801b442:	07da      	lsls	r2, r3, #31
 801b444:	d423      	bmi.n	801b48e <__lo0bits+0x56>
 801b446:	0798      	lsls	r0, r3, #30
 801b448:	bf49      	itett	mi
 801b44a:	085b      	lsrmi	r3, r3, #1
 801b44c:	089b      	lsrpl	r3, r3, #2
 801b44e:	2001      	movmi	r0, #1
 801b450:	600b      	strmi	r3, [r1, #0]
 801b452:	bf5c      	itt	pl
 801b454:	600b      	strpl	r3, [r1, #0]
 801b456:	2002      	movpl	r0, #2
 801b458:	4770      	bx	lr
 801b45a:	b298      	uxth	r0, r3
 801b45c:	b9a8      	cbnz	r0, 801b48a <__lo0bits+0x52>
 801b45e:	0c1b      	lsrs	r3, r3, #16
 801b460:	2010      	movs	r0, #16
 801b462:	b2da      	uxtb	r2, r3
 801b464:	b90a      	cbnz	r2, 801b46a <__lo0bits+0x32>
 801b466:	3008      	adds	r0, #8
 801b468:	0a1b      	lsrs	r3, r3, #8
 801b46a:	071a      	lsls	r2, r3, #28
 801b46c:	bf04      	itt	eq
 801b46e:	091b      	lsreq	r3, r3, #4
 801b470:	3004      	addeq	r0, #4
 801b472:	079a      	lsls	r2, r3, #30
 801b474:	bf04      	itt	eq
 801b476:	089b      	lsreq	r3, r3, #2
 801b478:	3002      	addeq	r0, #2
 801b47a:	07da      	lsls	r2, r3, #31
 801b47c:	d403      	bmi.n	801b486 <__lo0bits+0x4e>
 801b47e:	085b      	lsrs	r3, r3, #1
 801b480:	f100 0001 	add.w	r0, r0, #1
 801b484:	d005      	beq.n	801b492 <__lo0bits+0x5a>
 801b486:	600b      	str	r3, [r1, #0]
 801b488:	4770      	bx	lr
 801b48a:	4610      	mov	r0, r2
 801b48c:	e7e9      	b.n	801b462 <__lo0bits+0x2a>
 801b48e:	2000      	movs	r0, #0
 801b490:	4770      	bx	lr
 801b492:	2020      	movs	r0, #32
 801b494:	4770      	bx	lr
	...

0801b498 <__i2b>:
 801b498:	b510      	push	{r4, lr}
 801b49a:	460c      	mov	r4, r1
 801b49c:	2101      	movs	r1, #1
 801b49e:	f7ff ff03 	bl	801b2a8 <_Balloc>
 801b4a2:	4602      	mov	r2, r0
 801b4a4:	b928      	cbnz	r0, 801b4b2 <__i2b+0x1a>
 801b4a6:	4b05      	ldr	r3, [pc, #20]	; (801b4bc <__i2b+0x24>)
 801b4a8:	4805      	ldr	r0, [pc, #20]	; (801b4c0 <__i2b+0x28>)
 801b4aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b4ae:	f7fe ff35 	bl	801a31c <__assert_func>
 801b4b2:	2301      	movs	r3, #1
 801b4b4:	6144      	str	r4, [r0, #20]
 801b4b6:	6103      	str	r3, [r0, #16]
 801b4b8:	bd10      	pop	{r4, pc}
 801b4ba:	bf00      	nop
 801b4bc:	0801cf45 	.word	0x0801cf45
 801b4c0:	0801cfc2 	.word	0x0801cfc2

0801b4c4 <__multiply>:
 801b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c8:	4691      	mov	r9, r2
 801b4ca:	690a      	ldr	r2, [r1, #16]
 801b4cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	bfb8      	it	lt
 801b4d4:	460b      	movlt	r3, r1
 801b4d6:	460c      	mov	r4, r1
 801b4d8:	bfbc      	itt	lt
 801b4da:	464c      	movlt	r4, r9
 801b4dc:	4699      	movlt	r9, r3
 801b4de:	6927      	ldr	r7, [r4, #16]
 801b4e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b4e4:	68a3      	ldr	r3, [r4, #8]
 801b4e6:	6861      	ldr	r1, [r4, #4]
 801b4e8:	eb07 060a 	add.w	r6, r7, sl
 801b4ec:	42b3      	cmp	r3, r6
 801b4ee:	b085      	sub	sp, #20
 801b4f0:	bfb8      	it	lt
 801b4f2:	3101      	addlt	r1, #1
 801b4f4:	f7ff fed8 	bl	801b2a8 <_Balloc>
 801b4f8:	b930      	cbnz	r0, 801b508 <__multiply+0x44>
 801b4fa:	4602      	mov	r2, r0
 801b4fc:	4b44      	ldr	r3, [pc, #272]	; (801b610 <__multiply+0x14c>)
 801b4fe:	4845      	ldr	r0, [pc, #276]	; (801b614 <__multiply+0x150>)
 801b500:	f240 115d 	movw	r1, #349	; 0x15d
 801b504:	f7fe ff0a 	bl	801a31c <__assert_func>
 801b508:	f100 0514 	add.w	r5, r0, #20
 801b50c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b510:	462b      	mov	r3, r5
 801b512:	2200      	movs	r2, #0
 801b514:	4543      	cmp	r3, r8
 801b516:	d321      	bcc.n	801b55c <__multiply+0x98>
 801b518:	f104 0314 	add.w	r3, r4, #20
 801b51c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b520:	f109 0314 	add.w	r3, r9, #20
 801b524:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b528:	9202      	str	r2, [sp, #8]
 801b52a:	1b3a      	subs	r2, r7, r4
 801b52c:	3a15      	subs	r2, #21
 801b52e:	f022 0203 	bic.w	r2, r2, #3
 801b532:	3204      	adds	r2, #4
 801b534:	f104 0115 	add.w	r1, r4, #21
 801b538:	428f      	cmp	r7, r1
 801b53a:	bf38      	it	cc
 801b53c:	2204      	movcc	r2, #4
 801b53e:	9201      	str	r2, [sp, #4]
 801b540:	9a02      	ldr	r2, [sp, #8]
 801b542:	9303      	str	r3, [sp, #12]
 801b544:	429a      	cmp	r2, r3
 801b546:	d80c      	bhi.n	801b562 <__multiply+0x9e>
 801b548:	2e00      	cmp	r6, #0
 801b54a:	dd03      	ble.n	801b554 <__multiply+0x90>
 801b54c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b550:	2b00      	cmp	r3, #0
 801b552:	d05a      	beq.n	801b60a <__multiply+0x146>
 801b554:	6106      	str	r6, [r0, #16]
 801b556:	b005      	add	sp, #20
 801b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b55c:	f843 2b04 	str.w	r2, [r3], #4
 801b560:	e7d8      	b.n	801b514 <__multiply+0x50>
 801b562:	f8b3 a000 	ldrh.w	sl, [r3]
 801b566:	f1ba 0f00 	cmp.w	sl, #0
 801b56a:	d024      	beq.n	801b5b6 <__multiply+0xf2>
 801b56c:	f104 0e14 	add.w	lr, r4, #20
 801b570:	46a9      	mov	r9, r5
 801b572:	f04f 0c00 	mov.w	ip, #0
 801b576:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b57a:	f8d9 1000 	ldr.w	r1, [r9]
 801b57e:	fa1f fb82 	uxth.w	fp, r2
 801b582:	b289      	uxth	r1, r1
 801b584:	fb0a 110b 	mla	r1, sl, fp, r1
 801b588:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b58c:	f8d9 2000 	ldr.w	r2, [r9]
 801b590:	4461      	add	r1, ip
 801b592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b596:	fb0a c20b 	mla	r2, sl, fp, ip
 801b59a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b59e:	b289      	uxth	r1, r1
 801b5a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b5a4:	4577      	cmp	r7, lr
 801b5a6:	f849 1b04 	str.w	r1, [r9], #4
 801b5aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b5ae:	d8e2      	bhi.n	801b576 <__multiply+0xb2>
 801b5b0:	9a01      	ldr	r2, [sp, #4]
 801b5b2:	f845 c002 	str.w	ip, [r5, r2]
 801b5b6:	9a03      	ldr	r2, [sp, #12]
 801b5b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b5bc:	3304      	adds	r3, #4
 801b5be:	f1b9 0f00 	cmp.w	r9, #0
 801b5c2:	d020      	beq.n	801b606 <__multiply+0x142>
 801b5c4:	6829      	ldr	r1, [r5, #0]
 801b5c6:	f104 0c14 	add.w	ip, r4, #20
 801b5ca:	46ae      	mov	lr, r5
 801b5cc:	f04f 0a00 	mov.w	sl, #0
 801b5d0:	f8bc b000 	ldrh.w	fp, [ip]
 801b5d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b5d8:	fb09 220b 	mla	r2, r9, fp, r2
 801b5dc:	4492      	add	sl, r2
 801b5de:	b289      	uxth	r1, r1
 801b5e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801b5e4:	f84e 1b04 	str.w	r1, [lr], #4
 801b5e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b5ec:	f8be 1000 	ldrh.w	r1, [lr]
 801b5f0:	0c12      	lsrs	r2, r2, #16
 801b5f2:	fb09 1102 	mla	r1, r9, r2, r1
 801b5f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801b5fa:	4567      	cmp	r7, ip
 801b5fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b600:	d8e6      	bhi.n	801b5d0 <__multiply+0x10c>
 801b602:	9a01      	ldr	r2, [sp, #4]
 801b604:	50a9      	str	r1, [r5, r2]
 801b606:	3504      	adds	r5, #4
 801b608:	e79a      	b.n	801b540 <__multiply+0x7c>
 801b60a:	3e01      	subs	r6, #1
 801b60c:	e79c      	b.n	801b548 <__multiply+0x84>
 801b60e:	bf00      	nop
 801b610:	0801cf45 	.word	0x0801cf45
 801b614:	0801cfc2 	.word	0x0801cfc2

0801b618 <__pow5mult>:
 801b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b61c:	4615      	mov	r5, r2
 801b61e:	f012 0203 	ands.w	r2, r2, #3
 801b622:	4606      	mov	r6, r0
 801b624:	460f      	mov	r7, r1
 801b626:	d007      	beq.n	801b638 <__pow5mult+0x20>
 801b628:	4c25      	ldr	r4, [pc, #148]	; (801b6c0 <__pow5mult+0xa8>)
 801b62a:	3a01      	subs	r2, #1
 801b62c:	2300      	movs	r3, #0
 801b62e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b632:	f7ff fe9b 	bl	801b36c <__multadd>
 801b636:	4607      	mov	r7, r0
 801b638:	10ad      	asrs	r5, r5, #2
 801b63a:	d03d      	beq.n	801b6b8 <__pow5mult+0xa0>
 801b63c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b63e:	b97c      	cbnz	r4, 801b660 <__pow5mult+0x48>
 801b640:	2010      	movs	r0, #16
 801b642:	f7fe f823 	bl	801968c <malloc>
 801b646:	4602      	mov	r2, r0
 801b648:	6270      	str	r0, [r6, #36]	; 0x24
 801b64a:	b928      	cbnz	r0, 801b658 <__pow5mult+0x40>
 801b64c:	4b1d      	ldr	r3, [pc, #116]	; (801b6c4 <__pow5mult+0xac>)
 801b64e:	481e      	ldr	r0, [pc, #120]	; (801b6c8 <__pow5mult+0xb0>)
 801b650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b654:	f7fe fe62 	bl	801a31c <__assert_func>
 801b658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b65c:	6004      	str	r4, [r0, #0]
 801b65e:	60c4      	str	r4, [r0, #12]
 801b660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b668:	b94c      	cbnz	r4, 801b67e <__pow5mult+0x66>
 801b66a:	f240 2171 	movw	r1, #625	; 0x271
 801b66e:	4630      	mov	r0, r6
 801b670:	f7ff ff12 	bl	801b498 <__i2b>
 801b674:	2300      	movs	r3, #0
 801b676:	f8c8 0008 	str.w	r0, [r8, #8]
 801b67a:	4604      	mov	r4, r0
 801b67c:	6003      	str	r3, [r0, #0]
 801b67e:	f04f 0900 	mov.w	r9, #0
 801b682:	07eb      	lsls	r3, r5, #31
 801b684:	d50a      	bpl.n	801b69c <__pow5mult+0x84>
 801b686:	4639      	mov	r1, r7
 801b688:	4622      	mov	r2, r4
 801b68a:	4630      	mov	r0, r6
 801b68c:	f7ff ff1a 	bl	801b4c4 <__multiply>
 801b690:	4639      	mov	r1, r7
 801b692:	4680      	mov	r8, r0
 801b694:	4630      	mov	r0, r6
 801b696:	f7ff fe47 	bl	801b328 <_Bfree>
 801b69a:	4647      	mov	r7, r8
 801b69c:	106d      	asrs	r5, r5, #1
 801b69e:	d00b      	beq.n	801b6b8 <__pow5mult+0xa0>
 801b6a0:	6820      	ldr	r0, [r4, #0]
 801b6a2:	b938      	cbnz	r0, 801b6b4 <__pow5mult+0x9c>
 801b6a4:	4622      	mov	r2, r4
 801b6a6:	4621      	mov	r1, r4
 801b6a8:	4630      	mov	r0, r6
 801b6aa:	f7ff ff0b 	bl	801b4c4 <__multiply>
 801b6ae:	6020      	str	r0, [r4, #0]
 801b6b0:	f8c0 9000 	str.w	r9, [r0]
 801b6b4:	4604      	mov	r4, r0
 801b6b6:	e7e4      	b.n	801b682 <__pow5mult+0x6a>
 801b6b8:	4638      	mov	r0, r7
 801b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6be:	bf00      	nop
 801b6c0:	0801d110 	.word	0x0801d110
 801b6c4:	0801cd2c 	.word	0x0801cd2c
 801b6c8:	0801cfc2 	.word	0x0801cfc2

0801b6cc <__lshift>:
 801b6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6d0:	460c      	mov	r4, r1
 801b6d2:	6849      	ldr	r1, [r1, #4]
 801b6d4:	6923      	ldr	r3, [r4, #16]
 801b6d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b6da:	68a3      	ldr	r3, [r4, #8]
 801b6dc:	4607      	mov	r7, r0
 801b6de:	4691      	mov	r9, r2
 801b6e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b6e4:	f108 0601 	add.w	r6, r8, #1
 801b6e8:	42b3      	cmp	r3, r6
 801b6ea:	db0b      	blt.n	801b704 <__lshift+0x38>
 801b6ec:	4638      	mov	r0, r7
 801b6ee:	f7ff fddb 	bl	801b2a8 <_Balloc>
 801b6f2:	4605      	mov	r5, r0
 801b6f4:	b948      	cbnz	r0, 801b70a <__lshift+0x3e>
 801b6f6:	4602      	mov	r2, r0
 801b6f8:	4b2a      	ldr	r3, [pc, #168]	; (801b7a4 <__lshift+0xd8>)
 801b6fa:	482b      	ldr	r0, [pc, #172]	; (801b7a8 <__lshift+0xdc>)
 801b6fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b700:	f7fe fe0c 	bl	801a31c <__assert_func>
 801b704:	3101      	adds	r1, #1
 801b706:	005b      	lsls	r3, r3, #1
 801b708:	e7ee      	b.n	801b6e8 <__lshift+0x1c>
 801b70a:	2300      	movs	r3, #0
 801b70c:	f100 0114 	add.w	r1, r0, #20
 801b710:	f100 0210 	add.w	r2, r0, #16
 801b714:	4618      	mov	r0, r3
 801b716:	4553      	cmp	r3, sl
 801b718:	db37      	blt.n	801b78a <__lshift+0xbe>
 801b71a:	6920      	ldr	r0, [r4, #16]
 801b71c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b720:	f104 0314 	add.w	r3, r4, #20
 801b724:	f019 091f 	ands.w	r9, r9, #31
 801b728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b72c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b730:	d02f      	beq.n	801b792 <__lshift+0xc6>
 801b732:	f1c9 0e20 	rsb	lr, r9, #32
 801b736:	468a      	mov	sl, r1
 801b738:	f04f 0c00 	mov.w	ip, #0
 801b73c:	681a      	ldr	r2, [r3, #0]
 801b73e:	fa02 f209 	lsl.w	r2, r2, r9
 801b742:	ea42 020c 	orr.w	r2, r2, ip
 801b746:	f84a 2b04 	str.w	r2, [sl], #4
 801b74a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b74e:	4298      	cmp	r0, r3
 801b750:	fa22 fc0e 	lsr.w	ip, r2, lr
 801b754:	d8f2      	bhi.n	801b73c <__lshift+0x70>
 801b756:	1b03      	subs	r3, r0, r4
 801b758:	3b15      	subs	r3, #21
 801b75a:	f023 0303 	bic.w	r3, r3, #3
 801b75e:	3304      	adds	r3, #4
 801b760:	f104 0215 	add.w	r2, r4, #21
 801b764:	4290      	cmp	r0, r2
 801b766:	bf38      	it	cc
 801b768:	2304      	movcc	r3, #4
 801b76a:	f841 c003 	str.w	ip, [r1, r3]
 801b76e:	f1bc 0f00 	cmp.w	ip, #0
 801b772:	d001      	beq.n	801b778 <__lshift+0xac>
 801b774:	f108 0602 	add.w	r6, r8, #2
 801b778:	3e01      	subs	r6, #1
 801b77a:	4638      	mov	r0, r7
 801b77c:	612e      	str	r6, [r5, #16]
 801b77e:	4621      	mov	r1, r4
 801b780:	f7ff fdd2 	bl	801b328 <_Bfree>
 801b784:	4628      	mov	r0, r5
 801b786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b78a:	f842 0f04 	str.w	r0, [r2, #4]!
 801b78e:	3301      	adds	r3, #1
 801b790:	e7c1      	b.n	801b716 <__lshift+0x4a>
 801b792:	3904      	subs	r1, #4
 801b794:	f853 2b04 	ldr.w	r2, [r3], #4
 801b798:	f841 2f04 	str.w	r2, [r1, #4]!
 801b79c:	4298      	cmp	r0, r3
 801b79e:	d8f9      	bhi.n	801b794 <__lshift+0xc8>
 801b7a0:	e7ea      	b.n	801b778 <__lshift+0xac>
 801b7a2:	bf00      	nop
 801b7a4:	0801cf45 	.word	0x0801cf45
 801b7a8:	0801cfc2 	.word	0x0801cfc2

0801b7ac <__mcmp>:
 801b7ac:	b530      	push	{r4, r5, lr}
 801b7ae:	6902      	ldr	r2, [r0, #16]
 801b7b0:	690c      	ldr	r4, [r1, #16]
 801b7b2:	1b12      	subs	r2, r2, r4
 801b7b4:	d10e      	bne.n	801b7d4 <__mcmp+0x28>
 801b7b6:	f100 0314 	add.w	r3, r0, #20
 801b7ba:	3114      	adds	r1, #20
 801b7bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b7c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b7c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b7c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b7cc:	42a5      	cmp	r5, r4
 801b7ce:	d003      	beq.n	801b7d8 <__mcmp+0x2c>
 801b7d0:	d305      	bcc.n	801b7de <__mcmp+0x32>
 801b7d2:	2201      	movs	r2, #1
 801b7d4:	4610      	mov	r0, r2
 801b7d6:	bd30      	pop	{r4, r5, pc}
 801b7d8:	4283      	cmp	r3, r0
 801b7da:	d3f3      	bcc.n	801b7c4 <__mcmp+0x18>
 801b7dc:	e7fa      	b.n	801b7d4 <__mcmp+0x28>
 801b7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b7e2:	e7f7      	b.n	801b7d4 <__mcmp+0x28>

0801b7e4 <__mdiff>:
 801b7e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7e8:	460c      	mov	r4, r1
 801b7ea:	4606      	mov	r6, r0
 801b7ec:	4611      	mov	r1, r2
 801b7ee:	4620      	mov	r0, r4
 801b7f0:	4690      	mov	r8, r2
 801b7f2:	f7ff ffdb 	bl	801b7ac <__mcmp>
 801b7f6:	1e05      	subs	r5, r0, #0
 801b7f8:	d110      	bne.n	801b81c <__mdiff+0x38>
 801b7fa:	4629      	mov	r1, r5
 801b7fc:	4630      	mov	r0, r6
 801b7fe:	f7ff fd53 	bl	801b2a8 <_Balloc>
 801b802:	b930      	cbnz	r0, 801b812 <__mdiff+0x2e>
 801b804:	4b3a      	ldr	r3, [pc, #232]	; (801b8f0 <__mdiff+0x10c>)
 801b806:	4602      	mov	r2, r0
 801b808:	f240 2132 	movw	r1, #562	; 0x232
 801b80c:	4839      	ldr	r0, [pc, #228]	; (801b8f4 <__mdiff+0x110>)
 801b80e:	f7fe fd85 	bl	801a31c <__assert_func>
 801b812:	2301      	movs	r3, #1
 801b814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b81c:	bfa4      	itt	ge
 801b81e:	4643      	movge	r3, r8
 801b820:	46a0      	movge	r8, r4
 801b822:	4630      	mov	r0, r6
 801b824:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b828:	bfa6      	itte	ge
 801b82a:	461c      	movge	r4, r3
 801b82c:	2500      	movge	r5, #0
 801b82e:	2501      	movlt	r5, #1
 801b830:	f7ff fd3a 	bl	801b2a8 <_Balloc>
 801b834:	b920      	cbnz	r0, 801b840 <__mdiff+0x5c>
 801b836:	4b2e      	ldr	r3, [pc, #184]	; (801b8f0 <__mdiff+0x10c>)
 801b838:	4602      	mov	r2, r0
 801b83a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b83e:	e7e5      	b.n	801b80c <__mdiff+0x28>
 801b840:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b844:	6926      	ldr	r6, [r4, #16]
 801b846:	60c5      	str	r5, [r0, #12]
 801b848:	f104 0914 	add.w	r9, r4, #20
 801b84c:	f108 0514 	add.w	r5, r8, #20
 801b850:	f100 0e14 	add.w	lr, r0, #20
 801b854:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b858:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b85c:	f108 0210 	add.w	r2, r8, #16
 801b860:	46f2      	mov	sl, lr
 801b862:	2100      	movs	r1, #0
 801b864:	f859 3b04 	ldr.w	r3, [r9], #4
 801b868:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b86c:	fa1f f883 	uxth.w	r8, r3
 801b870:	fa11 f18b 	uxtah	r1, r1, fp
 801b874:	0c1b      	lsrs	r3, r3, #16
 801b876:	eba1 0808 	sub.w	r8, r1, r8
 801b87a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b87e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b882:	fa1f f888 	uxth.w	r8, r8
 801b886:	1419      	asrs	r1, r3, #16
 801b888:	454e      	cmp	r6, r9
 801b88a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b88e:	f84a 3b04 	str.w	r3, [sl], #4
 801b892:	d8e7      	bhi.n	801b864 <__mdiff+0x80>
 801b894:	1b33      	subs	r3, r6, r4
 801b896:	3b15      	subs	r3, #21
 801b898:	f023 0303 	bic.w	r3, r3, #3
 801b89c:	3304      	adds	r3, #4
 801b89e:	3415      	adds	r4, #21
 801b8a0:	42a6      	cmp	r6, r4
 801b8a2:	bf38      	it	cc
 801b8a4:	2304      	movcc	r3, #4
 801b8a6:	441d      	add	r5, r3
 801b8a8:	4473      	add	r3, lr
 801b8aa:	469e      	mov	lr, r3
 801b8ac:	462e      	mov	r6, r5
 801b8ae:	4566      	cmp	r6, ip
 801b8b0:	d30e      	bcc.n	801b8d0 <__mdiff+0xec>
 801b8b2:	f10c 0203 	add.w	r2, ip, #3
 801b8b6:	1b52      	subs	r2, r2, r5
 801b8b8:	f022 0203 	bic.w	r2, r2, #3
 801b8bc:	3d03      	subs	r5, #3
 801b8be:	45ac      	cmp	ip, r5
 801b8c0:	bf38      	it	cc
 801b8c2:	2200      	movcc	r2, #0
 801b8c4:	441a      	add	r2, r3
 801b8c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b8ca:	b17b      	cbz	r3, 801b8ec <__mdiff+0x108>
 801b8cc:	6107      	str	r7, [r0, #16]
 801b8ce:	e7a3      	b.n	801b818 <__mdiff+0x34>
 801b8d0:	f856 8b04 	ldr.w	r8, [r6], #4
 801b8d4:	fa11 f288 	uxtah	r2, r1, r8
 801b8d8:	1414      	asrs	r4, r2, #16
 801b8da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b8de:	b292      	uxth	r2, r2
 801b8e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b8e4:	f84e 2b04 	str.w	r2, [lr], #4
 801b8e8:	1421      	asrs	r1, r4, #16
 801b8ea:	e7e0      	b.n	801b8ae <__mdiff+0xca>
 801b8ec:	3f01      	subs	r7, #1
 801b8ee:	e7ea      	b.n	801b8c6 <__mdiff+0xe2>
 801b8f0:	0801cf45 	.word	0x0801cf45
 801b8f4:	0801cfc2 	.word	0x0801cfc2

0801b8f8 <__d2b>:
 801b8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b8fc:	4689      	mov	r9, r1
 801b8fe:	2101      	movs	r1, #1
 801b900:	ec57 6b10 	vmov	r6, r7, d0
 801b904:	4690      	mov	r8, r2
 801b906:	f7ff fccf 	bl	801b2a8 <_Balloc>
 801b90a:	4604      	mov	r4, r0
 801b90c:	b930      	cbnz	r0, 801b91c <__d2b+0x24>
 801b90e:	4602      	mov	r2, r0
 801b910:	4b25      	ldr	r3, [pc, #148]	; (801b9a8 <__d2b+0xb0>)
 801b912:	4826      	ldr	r0, [pc, #152]	; (801b9ac <__d2b+0xb4>)
 801b914:	f240 310a 	movw	r1, #778	; 0x30a
 801b918:	f7fe fd00 	bl	801a31c <__assert_func>
 801b91c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b924:	bb35      	cbnz	r5, 801b974 <__d2b+0x7c>
 801b926:	2e00      	cmp	r6, #0
 801b928:	9301      	str	r3, [sp, #4]
 801b92a:	d028      	beq.n	801b97e <__d2b+0x86>
 801b92c:	4668      	mov	r0, sp
 801b92e:	9600      	str	r6, [sp, #0]
 801b930:	f7ff fd82 	bl	801b438 <__lo0bits>
 801b934:	9900      	ldr	r1, [sp, #0]
 801b936:	b300      	cbz	r0, 801b97a <__d2b+0x82>
 801b938:	9a01      	ldr	r2, [sp, #4]
 801b93a:	f1c0 0320 	rsb	r3, r0, #32
 801b93e:	fa02 f303 	lsl.w	r3, r2, r3
 801b942:	430b      	orrs	r3, r1
 801b944:	40c2      	lsrs	r2, r0
 801b946:	6163      	str	r3, [r4, #20]
 801b948:	9201      	str	r2, [sp, #4]
 801b94a:	9b01      	ldr	r3, [sp, #4]
 801b94c:	61a3      	str	r3, [r4, #24]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	bf14      	ite	ne
 801b952:	2202      	movne	r2, #2
 801b954:	2201      	moveq	r2, #1
 801b956:	6122      	str	r2, [r4, #16]
 801b958:	b1d5      	cbz	r5, 801b990 <__d2b+0x98>
 801b95a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b95e:	4405      	add	r5, r0
 801b960:	f8c9 5000 	str.w	r5, [r9]
 801b964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b968:	f8c8 0000 	str.w	r0, [r8]
 801b96c:	4620      	mov	r0, r4
 801b96e:	b003      	add	sp, #12
 801b970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b978:	e7d5      	b.n	801b926 <__d2b+0x2e>
 801b97a:	6161      	str	r1, [r4, #20]
 801b97c:	e7e5      	b.n	801b94a <__d2b+0x52>
 801b97e:	a801      	add	r0, sp, #4
 801b980:	f7ff fd5a 	bl	801b438 <__lo0bits>
 801b984:	9b01      	ldr	r3, [sp, #4]
 801b986:	6163      	str	r3, [r4, #20]
 801b988:	2201      	movs	r2, #1
 801b98a:	6122      	str	r2, [r4, #16]
 801b98c:	3020      	adds	r0, #32
 801b98e:	e7e3      	b.n	801b958 <__d2b+0x60>
 801b990:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b994:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b998:	f8c9 0000 	str.w	r0, [r9]
 801b99c:	6918      	ldr	r0, [r3, #16]
 801b99e:	f7ff fd2b 	bl	801b3f8 <__hi0bits>
 801b9a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b9a6:	e7df      	b.n	801b968 <__d2b+0x70>
 801b9a8:	0801cf45 	.word	0x0801cf45
 801b9ac:	0801cfc2 	.word	0x0801cfc2

0801b9b0 <_calloc_r>:
 801b9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9b2:	fba1 2402 	umull	r2, r4, r1, r2
 801b9b6:	b94c      	cbnz	r4, 801b9cc <_calloc_r+0x1c>
 801b9b8:	4611      	mov	r1, r2
 801b9ba:	9201      	str	r2, [sp, #4]
 801b9bc:	f7fd fef8 	bl	80197b0 <_malloc_r>
 801b9c0:	9a01      	ldr	r2, [sp, #4]
 801b9c2:	4605      	mov	r5, r0
 801b9c4:	b930      	cbnz	r0, 801b9d4 <_calloc_r+0x24>
 801b9c6:	4628      	mov	r0, r5
 801b9c8:	b003      	add	sp, #12
 801b9ca:	bd30      	pop	{r4, r5, pc}
 801b9cc:	220c      	movs	r2, #12
 801b9ce:	6002      	str	r2, [r0, #0]
 801b9d0:	2500      	movs	r5, #0
 801b9d2:	e7f8      	b.n	801b9c6 <_calloc_r+0x16>
 801b9d4:	4621      	mov	r1, r4
 801b9d6:	f7fd fe77 	bl	80196c8 <memset>
 801b9da:	e7f4      	b.n	801b9c6 <_calloc_r+0x16>

0801b9dc <__ssputs_r>:
 801b9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9e0:	688e      	ldr	r6, [r1, #8]
 801b9e2:	429e      	cmp	r6, r3
 801b9e4:	4682      	mov	sl, r0
 801b9e6:	460c      	mov	r4, r1
 801b9e8:	4690      	mov	r8, r2
 801b9ea:	461f      	mov	r7, r3
 801b9ec:	d838      	bhi.n	801ba60 <__ssputs_r+0x84>
 801b9ee:	898a      	ldrh	r2, [r1, #12]
 801b9f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b9f4:	d032      	beq.n	801ba5c <__ssputs_r+0x80>
 801b9f6:	6825      	ldr	r5, [r4, #0]
 801b9f8:	6909      	ldr	r1, [r1, #16]
 801b9fa:	eba5 0901 	sub.w	r9, r5, r1
 801b9fe:	6965      	ldr	r5, [r4, #20]
 801ba00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ba08:	3301      	adds	r3, #1
 801ba0a:	444b      	add	r3, r9
 801ba0c:	106d      	asrs	r5, r5, #1
 801ba0e:	429d      	cmp	r5, r3
 801ba10:	bf38      	it	cc
 801ba12:	461d      	movcc	r5, r3
 801ba14:	0553      	lsls	r3, r2, #21
 801ba16:	d531      	bpl.n	801ba7c <__ssputs_r+0xa0>
 801ba18:	4629      	mov	r1, r5
 801ba1a:	f7fd fec9 	bl	80197b0 <_malloc_r>
 801ba1e:	4606      	mov	r6, r0
 801ba20:	b950      	cbnz	r0, 801ba38 <__ssputs_r+0x5c>
 801ba22:	230c      	movs	r3, #12
 801ba24:	f8ca 3000 	str.w	r3, [sl]
 801ba28:	89a3      	ldrh	r3, [r4, #12]
 801ba2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba2e:	81a3      	strh	r3, [r4, #12]
 801ba30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba38:	6921      	ldr	r1, [r4, #16]
 801ba3a:	464a      	mov	r2, r9
 801ba3c:	f7fd fe36 	bl	80196ac <memcpy>
 801ba40:	89a3      	ldrh	r3, [r4, #12]
 801ba42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ba46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ba4a:	81a3      	strh	r3, [r4, #12]
 801ba4c:	6126      	str	r6, [r4, #16]
 801ba4e:	6165      	str	r5, [r4, #20]
 801ba50:	444e      	add	r6, r9
 801ba52:	eba5 0509 	sub.w	r5, r5, r9
 801ba56:	6026      	str	r6, [r4, #0]
 801ba58:	60a5      	str	r5, [r4, #8]
 801ba5a:	463e      	mov	r6, r7
 801ba5c:	42be      	cmp	r6, r7
 801ba5e:	d900      	bls.n	801ba62 <__ssputs_r+0x86>
 801ba60:	463e      	mov	r6, r7
 801ba62:	6820      	ldr	r0, [r4, #0]
 801ba64:	4632      	mov	r2, r6
 801ba66:	4641      	mov	r1, r8
 801ba68:	f000 fce4 	bl	801c434 <memmove>
 801ba6c:	68a3      	ldr	r3, [r4, #8]
 801ba6e:	1b9b      	subs	r3, r3, r6
 801ba70:	60a3      	str	r3, [r4, #8]
 801ba72:	6823      	ldr	r3, [r4, #0]
 801ba74:	4433      	add	r3, r6
 801ba76:	6023      	str	r3, [r4, #0]
 801ba78:	2000      	movs	r0, #0
 801ba7a:	e7db      	b.n	801ba34 <__ssputs_r+0x58>
 801ba7c:	462a      	mov	r2, r5
 801ba7e:	f000 fcf3 	bl	801c468 <_realloc_r>
 801ba82:	4606      	mov	r6, r0
 801ba84:	2800      	cmp	r0, #0
 801ba86:	d1e1      	bne.n	801ba4c <__ssputs_r+0x70>
 801ba88:	6921      	ldr	r1, [r4, #16]
 801ba8a:	4650      	mov	r0, sl
 801ba8c:	f7fd fe24 	bl	80196d8 <_free_r>
 801ba90:	e7c7      	b.n	801ba22 <__ssputs_r+0x46>
	...

0801ba94 <_svfiprintf_r>:
 801ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba98:	4698      	mov	r8, r3
 801ba9a:	898b      	ldrh	r3, [r1, #12]
 801ba9c:	061b      	lsls	r3, r3, #24
 801ba9e:	b09d      	sub	sp, #116	; 0x74
 801baa0:	4607      	mov	r7, r0
 801baa2:	460d      	mov	r5, r1
 801baa4:	4614      	mov	r4, r2
 801baa6:	d50e      	bpl.n	801bac6 <_svfiprintf_r+0x32>
 801baa8:	690b      	ldr	r3, [r1, #16]
 801baaa:	b963      	cbnz	r3, 801bac6 <_svfiprintf_r+0x32>
 801baac:	2140      	movs	r1, #64	; 0x40
 801baae:	f7fd fe7f 	bl	80197b0 <_malloc_r>
 801bab2:	6028      	str	r0, [r5, #0]
 801bab4:	6128      	str	r0, [r5, #16]
 801bab6:	b920      	cbnz	r0, 801bac2 <_svfiprintf_r+0x2e>
 801bab8:	230c      	movs	r3, #12
 801baba:	603b      	str	r3, [r7, #0]
 801babc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bac0:	e0d1      	b.n	801bc66 <_svfiprintf_r+0x1d2>
 801bac2:	2340      	movs	r3, #64	; 0x40
 801bac4:	616b      	str	r3, [r5, #20]
 801bac6:	2300      	movs	r3, #0
 801bac8:	9309      	str	r3, [sp, #36]	; 0x24
 801baca:	2320      	movs	r3, #32
 801bacc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bad0:	f8cd 800c 	str.w	r8, [sp, #12]
 801bad4:	2330      	movs	r3, #48	; 0x30
 801bad6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bc80 <_svfiprintf_r+0x1ec>
 801bada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bade:	f04f 0901 	mov.w	r9, #1
 801bae2:	4623      	mov	r3, r4
 801bae4:	469a      	mov	sl, r3
 801bae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801baea:	b10a      	cbz	r2, 801baf0 <_svfiprintf_r+0x5c>
 801baec:	2a25      	cmp	r2, #37	; 0x25
 801baee:	d1f9      	bne.n	801bae4 <_svfiprintf_r+0x50>
 801baf0:	ebba 0b04 	subs.w	fp, sl, r4
 801baf4:	d00b      	beq.n	801bb0e <_svfiprintf_r+0x7a>
 801baf6:	465b      	mov	r3, fp
 801baf8:	4622      	mov	r2, r4
 801bafa:	4629      	mov	r1, r5
 801bafc:	4638      	mov	r0, r7
 801bafe:	f7ff ff6d 	bl	801b9dc <__ssputs_r>
 801bb02:	3001      	adds	r0, #1
 801bb04:	f000 80aa 	beq.w	801bc5c <_svfiprintf_r+0x1c8>
 801bb08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb0a:	445a      	add	r2, fp
 801bb0c:	9209      	str	r2, [sp, #36]	; 0x24
 801bb0e:	f89a 3000 	ldrb.w	r3, [sl]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	f000 80a2 	beq.w	801bc5c <_svfiprintf_r+0x1c8>
 801bb18:	2300      	movs	r3, #0
 801bb1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bb1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bb22:	f10a 0a01 	add.w	sl, sl, #1
 801bb26:	9304      	str	r3, [sp, #16]
 801bb28:	9307      	str	r3, [sp, #28]
 801bb2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bb2e:	931a      	str	r3, [sp, #104]	; 0x68
 801bb30:	4654      	mov	r4, sl
 801bb32:	2205      	movs	r2, #5
 801bb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb38:	4851      	ldr	r0, [pc, #324]	; (801bc80 <_svfiprintf_r+0x1ec>)
 801bb3a:	f7e4 fb69 	bl	8000210 <memchr>
 801bb3e:	9a04      	ldr	r2, [sp, #16]
 801bb40:	b9d8      	cbnz	r0, 801bb7a <_svfiprintf_r+0xe6>
 801bb42:	06d0      	lsls	r0, r2, #27
 801bb44:	bf44      	itt	mi
 801bb46:	2320      	movmi	r3, #32
 801bb48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bb4c:	0711      	lsls	r1, r2, #28
 801bb4e:	bf44      	itt	mi
 801bb50:	232b      	movmi	r3, #43	; 0x2b
 801bb52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bb56:	f89a 3000 	ldrb.w	r3, [sl]
 801bb5a:	2b2a      	cmp	r3, #42	; 0x2a
 801bb5c:	d015      	beq.n	801bb8a <_svfiprintf_r+0xf6>
 801bb5e:	9a07      	ldr	r2, [sp, #28]
 801bb60:	4654      	mov	r4, sl
 801bb62:	2000      	movs	r0, #0
 801bb64:	f04f 0c0a 	mov.w	ip, #10
 801bb68:	4621      	mov	r1, r4
 801bb6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bb6e:	3b30      	subs	r3, #48	; 0x30
 801bb70:	2b09      	cmp	r3, #9
 801bb72:	d94e      	bls.n	801bc12 <_svfiprintf_r+0x17e>
 801bb74:	b1b0      	cbz	r0, 801bba4 <_svfiprintf_r+0x110>
 801bb76:	9207      	str	r2, [sp, #28]
 801bb78:	e014      	b.n	801bba4 <_svfiprintf_r+0x110>
 801bb7a:	eba0 0308 	sub.w	r3, r0, r8
 801bb7e:	fa09 f303 	lsl.w	r3, r9, r3
 801bb82:	4313      	orrs	r3, r2
 801bb84:	9304      	str	r3, [sp, #16]
 801bb86:	46a2      	mov	sl, r4
 801bb88:	e7d2      	b.n	801bb30 <_svfiprintf_r+0x9c>
 801bb8a:	9b03      	ldr	r3, [sp, #12]
 801bb8c:	1d19      	adds	r1, r3, #4
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	9103      	str	r1, [sp, #12]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	bfbb      	ittet	lt
 801bb96:	425b      	neglt	r3, r3
 801bb98:	f042 0202 	orrlt.w	r2, r2, #2
 801bb9c:	9307      	strge	r3, [sp, #28]
 801bb9e:	9307      	strlt	r3, [sp, #28]
 801bba0:	bfb8      	it	lt
 801bba2:	9204      	strlt	r2, [sp, #16]
 801bba4:	7823      	ldrb	r3, [r4, #0]
 801bba6:	2b2e      	cmp	r3, #46	; 0x2e
 801bba8:	d10c      	bne.n	801bbc4 <_svfiprintf_r+0x130>
 801bbaa:	7863      	ldrb	r3, [r4, #1]
 801bbac:	2b2a      	cmp	r3, #42	; 0x2a
 801bbae:	d135      	bne.n	801bc1c <_svfiprintf_r+0x188>
 801bbb0:	9b03      	ldr	r3, [sp, #12]
 801bbb2:	1d1a      	adds	r2, r3, #4
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	9203      	str	r2, [sp, #12]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	bfb8      	it	lt
 801bbbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bbc0:	3402      	adds	r4, #2
 801bbc2:	9305      	str	r3, [sp, #20]
 801bbc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bc90 <_svfiprintf_r+0x1fc>
 801bbc8:	7821      	ldrb	r1, [r4, #0]
 801bbca:	2203      	movs	r2, #3
 801bbcc:	4650      	mov	r0, sl
 801bbce:	f7e4 fb1f 	bl	8000210 <memchr>
 801bbd2:	b140      	cbz	r0, 801bbe6 <_svfiprintf_r+0x152>
 801bbd4:	2340      	movs	r3, #64	; 0x40
 801bbd6:	eba0 000a 	sub.w	r0, r0, sl
 801bbda:	fa03 f000 	lsl.w	r0, r3, r0
 801bbde:	9b04      	ldr	r3, [sp, #16]
 801bbe0:	4303      	orrs	r3, r0
 801bbe2:	3401      	adds	r4, #1
 801bbe4:	9304      	str	r3, [sp, #16]
 801bbe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbea:	4826      	ldr	r0, [pc, #152]	; (801bc84 <_svfiprintf_r+0x1f0>)
 801bbec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bbf0:	2206      	movs	r2, #6
 801bbf2:	f7e4 fb0d 	bl	8000210 <memchr>
 801bbf6:	2800      	cmp	r0, #0
 801bbf8:	d038      	beq.n	801bc6c <_svfiprintf_r+0x1d8>
 801bbfa:	4b23      	ldr	r3, [pc, #140]	; (801bc88 <_svfiprintf_r+0x1f4>)
 801bbfc:	bb1b      	cbnz	r3, 801bc46 <_svfiprintf_r+0x1b2>
 801bbfe:	9b03      	ldr	r3, [sp, #12]
 801bc00:	3307      	adds	r3, #7
 801bc02:	f023 0307 	bic.w	r3, r3, #7
 801bc06:	3308      	adds	r3, #8
 801bc08:	9303      	str	r3, [sp, #12]
 801bc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc0c:	4433      	add	r3, r6
 801bc0e:	9309      	str	r3, [sp, #36]	; 0x24
 801bc10:	e767      	b.n	801bae2 <_svfiprintf_r+0x4e>
 801bc12:	fb0c 3202 	mla	r2, ip, r2, r3
 801bc16:	460c      	mov	r4, r1
 801bc18:	2001      	movs	r0, #1
 801bc1a:	e7a5      	b.n	801bb68 <_svfiprintf_r+0xd4>
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	3401      	adds	r4, #1
 801bc20:	9305      	str	r3, [sp, #20]
 801bc22:	4619      	mov	r1, r3
 801bc24:	f04f 0c0a 	mov.w	ip, #10
 801bc28:	4620      	mov	r0, r4
 801bc2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc2e:	3a30      	subs	r2, #48	; 0x30
 801bc30:	2a09      	cmp	r2, #9
 801bc32:	d903      	bls.n	801bc3c <_svfiprintf_r+0x1a8>
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d0c5      	beq.n	801bbc4 <_svfiprintf_r+0x130>
 801bc38:	9105      	str	r1, [sp, #20]
 801bc3a:	e7c3      	b.n	801bbc4 <_svfiprintf_r+0x130>
 801bc3c:	fb0c 2101 	mla	r1, ip, r1, r2
 801bc40:	4604      	mov	r4, r0
 801bc42:	2301      	movs	r3, #1
 801bc44:	e7f0      	b.n	801bc28 <_svfiprintf_r+0x194>
 801bc46:	ab03      	add	r3, sp, #12
 801bc48:	9300      	str	r3, [sp, #0]
 801bc4a:	462a      	mov	r2, r5
 801bc4c:	4b0f      	ldr	r3, [pc, #60]	; (801bc8c <_svfiprintf_r+0x1f8>)
 801bc4e:	a904      	add	r1, sp, #16
 801bc50:	4638      	mov	r0, r7
 801bc52:	f7fd fec1 	bl	80199d8 <_printf_float>
 801bc56:	1c42      	adds	r2, r0, #1
 801bc58:	4606      	mov	r6, r0
 801bc5a:	d1d6      	bne.n	801bc0a <_svfiprintf_r+0x176>
 801bc5c:	89ab      	ldrh	r3, [r5, #12]
 801bc5e:	065b      	lsls	r3, r3, #25
 801bc60:	f53f af2c 	bmi.w	801babc <_svfiprintf_r+0x28>
 801bc64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bc66:	b01d      	add	sp, #116	; 0x74
 801bc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc6c:	ab03      	add	r3, sp, #12
 801bc6e:	9300      	str	r3, [sp, #0]
 801bc70:	462a      	mov	r2, r5
 801bc72:	4b06      	ldr	r3, [pc, #24]	; (801bc8c <_svfiprintf_r+0x1f8>)
 801bc74:	a904      	add	r1, sp, #16
 801bc76:	4638      	mov	r0, r7
 801bc78:	f7fe f952 	bl	8019f20 <_printf_i>
 801bc7c:	e7eb      	b.n	801bc56 <_svfiprintf_r+0x1c2>
 801bc7e:	bf00      	nop
 801bc80:	0801d11c 	.word	0x0801d11c
 801bc84:	0801d126 	.word	0x0801d126
 801bc88:	080199d9 	.word	0x080199d9
 801bc8c:	0801b9dd 	.word	0x0801b9dd
 801bc90:	0801d122 	.word	0x0801d122

0801bc94 <__sfputc_r>:
 801bc94:	6893      	ldr	r3, [r2, #8]
 801bc96:	3b01      	subs	r3, #1
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	b410      	push	{r4}
 801bc9c:	6093      	str	r3, [r2, #8]
 801bc9e:	da08      	bge.n	801bcb2 <__sfputc_r+0x1e>
 801bca0:	6994      	ldr	r4, [r2, #24]
 801bca2:	42a3      	cmp	r3, r4
 801bca4:	db01      	blt.n	801bcaa <__sfputc_r+0x16>
 801bca6:	290a      	cmp	r1, #10
 801bca8:	d103      	bne.n	801bcb2 <__sfputc_r+0x1e>
 801bcaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcae:	f000 b98f 	b.w	801bfd0 <__swbuf_r>
 801bcb2:	6813      	ldr	r3, [r2, #0]
 801bcb4:	1c58      	adds	r0, r3, #1
 801bcb6:	6010      	str	r0, [r2, #0]
 801bcb8:	7019      	strb	r1, [r3, #0]
 801bcba:	4608      	mov	r0, r1
 801bcbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcc0:	4770      	bx	lr

0801bcc2 <__sfputs_r>:
 801bcc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcc4:	4606      	mov	r6, r0
 801bcc6:	460f      	mov	r7, r1
 801bcc8:	4614      	mov	r4, r2
 801bcca:	18d5      	adds	r5, r2, r3
 801bccc:	42ac      	cmp	r4, r5
 801bcce:	d101      	bne.n	801bcd4 <__sfputs_r+0x12>
 801bcd0:	2000      	movs	r0, #0
 801bcd2:	e007      	b.n	801bce4 <__sfputs_r+0x22>
 801bcd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcd8:	463a      	mov	r2, r7
 801bcda:	4630      	mov	r0, r6
 801bcdc:	f7ff ffda 	bl	801bc94 <__sfputc_r>
 801bce0:	1c43      	adds	r3, r0, #1
 801bce2:	d1f3      	bne.n	801bccc <__sfputs_r+0xa>
 801bce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bce8 <_vfiprintf_r>:
 801bce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcec:	460d      	mov	r5, r1
 801bcee:	b09d      	sub	sp, #116	; 0x74
 801bcf0:	4614      	mov	r4, r2
 801bcf2:	4698      	mov	r8, r3
 801bcf4:	4606      	mov	r6, r0
 801bcf6:	b118      	cbz	r0, 801bd00 <_vfiprintf_r+0x18>
 801bcf8:	6983      	ldr	r3, [r0, #24]
 801bcfa:	b90b      	cbnz	r3, 801bd00 <_vfiprintf_r+0x18>
 801bcfc:	f7ff f9fe 	bl	801b0fc <__sinit>
 801bd00:	4b89      	ldr	r3, [pc, #548]	; (801bf28 <_vfiprintf_r+0x240>)
 801bd02:	429d      	cmp	r5, r3
 801bd04:	d11b      	bne.n	801bd3e <_vfiprintf_r+0x56>
 801bd06:	6875      	ldr	r5, [r6, #4]
 801bd08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd0a:	07d9      	lsls	r1, r3, #31
 801bd0c:	d405      	bmi.n	801bd1a <_vfiprintf_r+0x32>
 801bd0e:	89ab      	ldrh	r3, [r5, #12]
 801bd10:	059a      	lsls	r2, r3, #22
 801bd12:	d402      	bmi.n	801bd1a <_vfiprintf_r+0x32>
 801bd14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd16:	f7ff faa6 	bl	801b266 <__retarget_lock_acquire_recursive>
 801bd1a:	89ab      	ldrh	r3, [r5, #12]
 801bd1c:	071b      	lsls	r3, r3, #28
 801bd1e:	d501      	bpl.n	801bd24 <_vfiprintf_r+0x3c>
 801bd20:	692b      	ldr	r3, [r5, #16]
 801bd22:	b9eb      	cbnz	r3, 801bd60 <_vfiprintf_r+0x78>
 801bd24:	4629      	mov	r1, r5
 801bd26:	4630      	mov	r0, r6
 801bd28:	f000 f9c4 	bl	801c0b4 <__swsetup_r>
 801bd2c:	b1c0      	cbz	r0, 801bd60 <_vfiprintf_r+0x78>
 801bd2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd30:	07dc      	lsls	r4, r3, #31
 801bd32:	d50e      	bpl.n	801bd52 <_vfiprintf_r+0x6a>
 801bd34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd38:	b01d      	add	sp, #116	; 0x74
 801bd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd3e:	4b7b      	ldr	r3, [pc, #492]	; (801bf2c <_vfiprintf_r+0x244>)
 801bd40:	429d      	cmp	r5, r3
 801bd42:	d101      	bne.n	801bd48 <_vfiprintf_r+0x60>
 801bd44:	68b5      	ldr	r5, [r6, #8]
 801bd46:	e7df      	b.n	801bd08 <_vfiprintf_r+0x20>
 801bd48:	4b79      	ldr	r3, [pc, #484]	; (801bf30 <_vfiprintf_r+0x248>)
 801bd4a:	429d      	cmp	r5, r3
 801bd4c:	bf08      	it	eq
 801bd4e:	68f5      	ldreq	r5, [r6, #12]
 801bd50:	e7da      	b.n	801bd08 <_vfiprintf_r+0x20>
 801bd52:	89ab      	ldrh	r3, [r5, #12]
 801bd54:	0598      	lsls	r0, r3, #22
 801bd56:	d4ed      	bmi.n	801bd34 <_vfiprintf_r+0x4c>
 801bd58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd5a:	f7ff fa85 	bl	801b268 <__retarget_lock_release_recursive>
 801bd5e:	e7e9      	b.n	801bd34 <_vfiprintf_r+0x4c>
 801bd60:	2300      	movs	r3, #0
 801bd62:	9309      	str	r3, [sp, #36]	; 0x24
 801bd64:	2320      	movs	r3, #32
 801bd66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd6a:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd6e:	2330      	movs	r3, #48	; 0x30
 801bd70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bf34 <_vfiprintf_r+0x24c>
 801bd74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd78:	f04f 0901 	mov.w	r9, #1
 801bd7c:	4623      	mov	r3, r4
 801bd7e:	469a      	mov	sl, r3
 801bd80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd84:	b10a      	cbz	r2, 801bd8a <_vfiprintf_r+0xa2>
 801bd86:	2a25      	cmp	r2, #37	; 0x25
 801bd88:	d1f9      	bne.n	801bd7e <_vfiprintf_r+0x96>
 801bd8a:	ebba 0b04 	subs.w	fp, sl, r4
 801bd8e:	d00b      	beq.n	801bda8 <_vfiprintf_r+0xc0>
 801bd90:	465b      	mov	r3, fp
 801bd92:	4622      	mov	r2, r4
 801bd94:	4629      	mov	r1, r5
 801bd96:	4630      	mov	r0, r6
 801bd98:	f7ff ff93 	bl	801bcc2 <__sfputs_r>
 801bd9c:	3001      	adds	r0, #1
 801bd9e:	f000 80aa 	beq.w	801bef6 <_vfiprintf_r+0x20e>
 801bda2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bda4:	445a      	add	r2, fp
 801bda6:	9209      	str	r2, [sp, #36]	; 0x24
 801bda8:	f89a 3000 	ldrb.w	r3, [sl]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	f000 80a2 	beq.w	801bef6 <_vfiprintf_r+0x20e>
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bdb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bdbc:	f10a 0a01 	add.w	sl, sl, #1
 801bdc0:	9304      	str	r3, [sp, #16]
 801bdc2:	9307      	str	r3, [sp, #28]
 801bdc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bdc8:	931a      	str	r3, [sp, #104]	; 0x68
 801bdca:	4654      	mov	r4, sl
 801bdcc:	2205      	movs	r2, #5
 801bdce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdd2:	4858      	ldr	r0, [pc, #352]	; (801bf34 <_vfiprintf_r+0x24c>)
 801bdd4:	f7e4 fa1c 	bl	8000210 <memchr>
 801bdd8:	9a04      	ldr	r2, [sp, #16]
 801bdda:	b9d8      	cbnz	r0, 801be14 <_vfiprintf_r+0x12c>
 801bddc:	06d1      	lsls	r1, r2, #27
 801bdde:	bf44      	itt	mi
 801bde0:	2320      	movmi	r3, #32
 801bde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bde6:	0713      	lsls	r3, r2, #28
 801bde8:	bf44      	itt	mi
 801bdea:	232b      	movmi	r3, #43	; 0x2b
 801bdec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdf0:	f89a 3000 	ldrb.w	r3, [sl]
 801bdf4:	2b2a      	cmp	r3, #42	; 0x2a
 801bdf6:	d015      	beq.n	801be24 <_vfiprintf_r+0x13c>
 801bdf8:	9a07      	ldr	r2, [sp, #28]
 801bdfa:	4654      	mov	r4, sl
 801bdfc:	2000      	movs	r0, #0
 801bdfe:	f04f 0c0a 	mov.w	ip, #10
 801be02:	4621      	mov	r1, r4
 801be04:	f811 3b01 	ldrb.w	r3, [r1], #1
 801be08:	3b30      	subs	r3, #48	; 0x30
 801be0a:	2b09      	cmp	r3, #9
 801be0c:	d94e      	bls.n	801beac <_vfiprintf_r+0x1c4>
 801be0e:	b1b0      	cbz	r0, 801be3e <_vfiprintf_r+0x156>
 801be10:	9207      	str	r2, [sp, #28]
 801be12:	e014      	b.n	801be3e <_vfiprintf_r+0x156>
 801be14:	eba0 0308 	sub.w	r3, r0, r8
 801be18:	fa09 f303 	lsl.w	r3, r9, r3
 801be1c:	4313      	orrs	r3, r2
 801be1e:	9304      	str	r3, [sp, #16]
 801be20:	46a2      	mov	sl, r4
 801be22:	e7d2      	b.n	801bdca <_vfiprintf_r+0xe2>
 801be24:	9b03      	ldr	r3, [sp, #12]
 801be26:	1d19      	adds	r1, r3, #4
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	9103      	str	r1, [sp, #12]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	bfbb      	ittet	lt
 801be30:	425b      	neglt	r3, r3
 801be32:	f042 0202 	orrlt.w	r2, r2, #2
 801be36:	9307      	strge	r3, [sp, #28]
 801be38:	9307      	strlt	r3, [sp, #28]
 801be3a:	bfb8      	it	lt
 801be3c:	9204      	strlt	r2, [sp, #16]
 801be3e:	7823      	ldrb	r3, [r4, #0]
 801be40:	2b2e      	cmp	r3, #46	; 0x2e
 801be42:	d10c      	bne.n	801be5e <_vfiprintf_r+0x176>
 801be44:	7863      	ldrb	r3, [r4, #1]
 801be46:	2b2a      	cmp	r3, #42	; 0x2a
 801be48:	d135      	bne.n	801beb6 <_vfiprintf_r+0x1ce>
 801be4a:	9b03      	ldr	r3, [sp, #12]
 801be4c:	1d1a      	adds	r2, r3, #4
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	9203      	str	r2, [sp, #12]
 801be52:	2b00      	cmp	r3, #0
 801be54:	bfb8      	it	lt
 801be56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801be5a:	3402      	adds	r4, #2
 801be5c:	9305      	str	r3, [sp, #20]
 801be5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bf44 <_vfiprintf_r+0x25c>
 801be62:	7821      	ldrb	r1, [r4, #0]
 801be64:	2203      	movs	r2, #3
 801be66:	4650      	mov	r0, sl
 801be68:	f7e4 f9d2 	bl	8000210 <memchr>
 801be6c:	b140      	cbz	r0, 801be80 <_vfiprintf_r+0x198>
 801be6e:	2340      	movs	r3, #64	; 0x40
 801be70:	eba0 000a 	sub.w	r0, r0, sl
 801be74:	fa03 f000 	lsl.w	r0, r3, r0
 801be78:	9b04      	ldr	r3, [sp, #16]
 801be7a:	4303      	orrs	r3, r0
 801be7c:	3401      	adds	r4, #1
 801be7e:	9304      	str	r3, [sp, #16]
 801be80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be84:	482c      	ldr	r0, [pc, #176]	; (801bf38 <_vfiprintf_r+0x250>)
 801be86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be8a:	2206      	movs	r2, #6
 801be8c:	f7e4 f9c0 	bl	8000210 <memchr>
 801be90:	2800      	cmp	r0, #0
 801be92:	d03f      	beq.n	801bf14 <_vfiprintf_r+0x22c>
 801be94:	4b29      	ldr	r3, [pc, #164]	; (801bf3c <_vfiprintf_r+0x254>)
 801be96:	bb1b      	cbnz	r3, 801bee0 <_vfiprintf_r+0x1f8>
 801be98:	9b03      	ldr	r3, [sp, #12]
 801be9a:	3307      	adds	r3, #7
 801be9c:	f023 0307 	bic.w	r3, r3, #7
 801bea0:	3308      	adds	r3, #8
 801bea2:	9303      	str	r3, [sp, #12]
 801bea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bea6:	443b      	add	r3, r7
 801bea8:	9309      	str	r3, [sp, #36]	; 0x24
 801beaa:	e767      	b.n	801bd7c <_vfiprintf_r+0x94>
 801beac:	fb0c 3202 	mla	r2, ip, r2, r3
 801beb0:	460c      	mov	r4, r1
 801beb2:	2001      	movs	r0, #1
 801beb4:	e7a5      	b.n	801be02 <_vfiprintf_r+0x11a>
 801beb6:	2300      	movs	r3, #0
 801beb8:	3401      	adds	r4, #1
 801beba:	9305      	str	r3, [sp, #20]
 801bebc:	4619      	mov	r1, r3
 801bebe:	f04f 0c0a 	mov.w	ip, #10
 801bec2:	4620      	mov	r0, r4
 801bec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bec8:	3a30      	subs	r2, #48	; 0x30
 801beca:	2a09      	cmp	r2, #9
 801becc:	d903      	bls.n	801bed6 <_vfiprintf_r+0x1ee>
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d0c5      	beq.n	801be5e <_vfiprintf_r+0x176>
 801bed2:	9105      	str	r1, [sp, #20]
 801bed4:	e7c3      	b.n	801be5e <_vfiprintf_r+0x176>
 801bed6:	fb0c 2101 	mla	r1, ip, r1, r2
 801beda:	4604      	mov	r4, r0
 801bedc:	2301      	movs	r3, #1
 801bede:	e7f0      	b.n	801bec2 <_vfiprintf_r+0x1da>
 801bee0:	ab03      	add	r3, sp, #12
 801bee2:	9300      	str	r3, [sp, #0]
 801bee4:	462a      	mov	r2, r5
 801bee6:	4b16      	ldr	r3, [pc, #88]	; (801bf40 <_vfiprintf_r+0x258>)
 801bee8:	a904      	add	r1, sp, #16
 801beea:	4630      	mov	r0, r6
 801beec:	f7fd fd74 	bl	80199d8 <_printf_float>
 801bef0:	4607      	mov	r7, r0
 801bef2:	1c78      	adds	r0, r7, #1
 801bef4:	d1d6      	bne.n	801bea4 <_vfiprintf_r+0x1bc>
 801bef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bef8:	07d9      	lsls	r1, r3, #31
 801befa:	d405      	bmi.n	801bf08 <_vfiprintf_r+0x220>
 801befc:	89ab      	ldrh	r3, [r5, #12]
 801befe:	059a      	lsls	r2, r3, #22
 801bf00:	d402      	bmi.n	801bf08 <_vfiprintf_r+0x220>
 801bf02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf04:	f7ff f9b0 	bl	801b268 <__retarget_lock_release_recursive>
 801bf08:	89ab      	ldrh	r3, [r5, #12]
 801bf0a:	065b      	lsls	r3, r3, #25
 801bf0c:	f53f af12 	bmi.w	801bd34 <_vfiprintf_r+0x4c>
 801bf10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bf12:	e711      	b.n	801bd38 <_vfiprintf_r+0x50>
 801bf14:	ab03      	add	r3, sp, #12
 801bf16:	9300      	str	r3, [sp, #0]
 801bf18:	462a      	mov	r2, r5
 801bf1a:	4b09      	ldr	r3, [pc, #36]	; (801bf40 <_vfiprintf_r+0x258>)
 801bf1c:	a904      	add	r1, sp, #16
 801bf1e:	4630      	mov	r0, r6
 801bf20:	f7fd fffe 	bl	8019f20 <_printf_i>
 801bf24:	e7e4      	b.n	801bef0 <_vfiprintf_r+0x208>
 801bf26:	bf00      	nop
 801bf28:	0801cf78 	.word	0x0801cf78
 801bf2c:	0801cf98 	.word	0x0801cf98
 801bf30:	0801cf58 	.word	0x0801cf58
 801bf34:	0801d11c 	.word	0x0801d11c
 801bf38:	0801d126 	.word	0x0801d126
 801bf3c:	080199d9 	.word	0x080199d9
 801bf40:	0801bcc3 	.word	0x0801bcc3
 801bf44:	0801d122 	.word	0x0801d122

0801bf48 <__sread>:
 801bf48:	b510      	push	{r4, lr}
 801bf4a:	460c      	mov	r4, r1
 801bf4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf50:	f000 faba 	bl	801c4c8 <_read_r>
 801bf54:	2800      	cmp	r0, #0
 801bf56:	bfab      	itete	ge
 801bf58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bf5a:	89a3      	ldrhlt	r3, [r4, #12]
 801bf5c:	181b      	addge	r3, r3, r0
 801bf5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bf62:	bfac      	ite	ge
 801bf64:	6563      	strge	r3, [r4, #84]	; 0x54
 801bf66:	81a3      	strhlt	r3, [r4, #12]
 801bf68:	bd10      	pop	{r4, pc}

0801bf6a <__swrite>:
 801bf6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf6e:	461f      	mov	r7, r3
 801bf70:	898b      	ldrh	r3, [r1, #12]
 801bf72:	05db      	lsls	r3, r3, #23
 801bf74:	4605      	mov	r5, r0
 801bf76:	460c      	mov	r4, r1
 801bf78:	4616      	mov	r6, r2
 801bf7a:	d505      	bpl.n	801bf88 <__swrite+0x1e>
 801bf7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf80:	2302      	movs	r3, #2
 801bf82:	2200      	movs	r2, #0
 801bf84:	f000 f9de 	bl	801c344 <_lseek_r>
 801bf88:	89a3      	ldrh	r3, [r4, #12]
 801bf8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bf8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bf92:	81a3      	strh	r3, [r4, #12]
 801bf94:	4632      	mov	r2, r6
 801bf96:	463b      	mov	r3, r7
 801bf98:	4628      	mov	r0, r5
 801bf9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf9e:	f000 b877 	b.w	801c090 <_write_r>

0801bfa2 <__sseek>:
 801bfa2:	b510      	push	{r4, lr}
 801bfa4:	460c      	mov	r4, r1
 801bfa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfaa:	f000 f9cb 	bl	801c344 <_lseek_r>
 801bfae:	1c43      	adds	r3, r0, #1
 801bfb0:	89a3      	ldrh	r3, [r4, #12]
 801bfb2:	bf15      	itete	ne
 801bfb4:	6560      	strne	r0, [r4, #84]	; 0x54
 801bfb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bfba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bfbe:	81a3      	strheq	r3, [r4, #12]
 801bfc0:	bf18      	it	ne
 801bfc2:	81a3      	strhne	r3, [r4, #12]
 801bfc4:	bd10      	pop	{r4, pc}

0801bfc6 <__sclose>:
 801bfc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfca:	f000 b8e9 	b.w	801c1a0 <_close_r>
	...

0801bfd0 <__swbuf_r>:
 801bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfd2:	460e      	mov	r6, r1
 801bfd4:	4614      	mov	r4, r2
 801bfd6:	4605      	mov	r5, r0
 801bfd8:	b118      	cbz	r0, 801bfe2 <__swbuf_r+0x12>
 801bfda:	6983      	ldr	r3, [r0, #24]
 801bfdc:	b90b      	cbnz	r3, 801bfe2 <__swbuf_r+0x12>
 801bfde:	f7ff f88d 	bl	801b0fc <__sinit>
 801bfe2:	4b21      	ldr	r3, [pc, #132]	; (801c068 <__swbuf_r+0x98>)
 801bfe4:	429c      	cmp	r4, r3
 801bfe6:	d12b      	bne.n	801c040 <__swbuf_r+0x70>
 801bfe8:	686c      	ldr	r4, [r5, #4]
 801bfea:	69a3      	ldr	r3, [r4, #24]
 801bfec:	60a3      	str	r3, [r4, #8]
 801bfee:	89a3      	ldrh	r3, [r4, #12]
 801bff0:	071a      	lsls	r2, r3, #28
 801bff2:	d52f      	bpl.n	801c054 <__swbuf_r+0x84>
 801bff4:	6923      	ldr	r3, [r4, #16]
 801bff6:	b36b      	cbz	r3, 801c054 <__swbuf_r+0x84>
 801bff8:	6923      	ldr	r3, [r4, #16]
 801bffa:	6820      	ldr	r0, [r4, #0]
 801bffc:	1ac0      	subs	r0, r0, r3
 801bffe:	6963      	ldr	r3, [r4, #20]
 801c000:	b2f6      	uxtb	r6, r6
 801c002:	4283      	cmp	r3, r0
 801c004:	4637      	mov	r7, r6
 801c006:	dc04      	bgt.n	801c012 <__swbuf_r+0x42>
 801c008:	4621      	mov	r1, r4
 801c00a:	4628      	mov	r0, r5
 801c00c:	f000 f95e 	bl	801c2cc <_fflush_r>
 801c010:	bb30      	cbnz	r0, 801c060 <__swbuf_r+0x90>
 801c012:	68a3      	ldr	r3, [r4, #8]
 801c014:	3b01      	subs	r3, #1
 801c016:	60a3      	str	r3, [r4, #8]
 801c018:	6823      	ldr	r3, [r4, #0]
 801c01a:	1c5a      	adds	r2, r3, #1
 801c01c:	6022      	str	r2, [r4, #0]
 801c01e:	701e      	strb	r6, [r3, #0]
 801c020:	6963      	ldr	r3, [r4, #20]
 801c022:	3001      	adds	r0, #1
 801c024:	4283      	cmp	r3, r0
 801c026:	d004      	beq.n	801c032 <__swbuf_r+0x62>
 801c028:	89a3      	ldrh	r3, [r4, #12]
 801c02a:	07db      	lsls	r3, r3, #31
 801c02c:	d506      	bpl.n	801c03c <__swbuf_r+0x6c>
 801c02e:	2e0a      	cmp	r6, #10
 801c030:	d104      	bne.n	801c03c <__swbuf_r+0x6c>
 801c032:	4621      	mov	r1, r4
 801c034:	4628      	mov	r0, r5
 801c036:	f000 f949 	bl	801c2cc <_fflush_r>
 801c03a:	b988      	cbnz	r0, 801c060 <__swbuf_r+0x90>
 801c03c:	4638      	mov	r0, r7
 801c03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c040:	4b0a      	ldr	r3, [pc, #40]	; (801c06c <__swbuf_r+0x9c>)
 801c042:	429c      	cmp	r4, r3
 801c044:	d101      	bne.n	801c04a <__swbuf_r+0x7a>
 801c046:	68ac      	ldr	r4, [r5, #8]
 801c048:	e7cf      	b.n	801bfea <__swbuf_r+0x1a>
 801c04a:	4b09      	ldr	r3, [pc, #36]	; (801c070 <__swbuf_r+0xa0>)
 801c04c:	429c      	cmp	r4, r3
 801c04e:	bf08      	it	eq
 801c050:	68ec      	ldreq	r4, [r5, #12]
 801c052:	e7ca      	b.n	801bfea <__swbuf_r+0x1a>
 801c054:	4621      	mov	r1, r4
 801c056:	4628      	mov	r0, r5
 801c058:	f000 f82c 	bl	801c0b4 <__swsetup_r>
 801c05c:	2800      	cmp	r0, #0
 801c05e:	d0cb      	beq.n	801bff8 <__swbuf_r+0x28>
 801c060:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c064:	e7ea      	b.n	801c03c <__swbuf_r+0x6c>
 801c066:	bf00      	nop
 801c068:	0801cf78 	.word	0x0801cf78
 801c06c:	0801cf98 	.word	0x0801cf98
 801c070:	0801cf58 	.word	0x0801cf58

0801c074 <__ascii_wctomb>:
 801c074:	b149      	cbz	r1, 801c08a <__ascii_wctomb+0x16>
 801c076:	2aff      	cmp	r2, #255	; 0xff
 801c078:	bf85      	ittet	hi
 801c07a:	238a      	movhi	r3, #138	; 0x8a
 801c07c:	6003      	strhi	r3, [r0, #0]
 801c07e:	700a      	strbls	r2, [r1, #0]
 801c080:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c084:	bf98      	it	ls
 801c086:	2001      	movls	r0, #1
 801c088:	4770      	bx	lr
 801c08a:	4608      	mov	r0, r1
 801c08c:	4770      	bx	lr
	...

0801c090 <_write_r>:
 801c090:	b538      	push	{r3, r4, r5, lr}
 801c092:	4d07      	ldr	r5, [pc, #28]	; (801c0b0 <_write_r+0x20>)
 801c094:	4604      	mov	r4, r0
 801c096:	4608      	mov	r0, r1
 801c098:	4611      	mov	r1, r2
 801c09a:	2200      	movs	r2, #0
 801c09c:	602a      	str	r2, [r5, #0]
 801c09e:	461a      	mov	r2, r3
 801c0a0:	f000 fad8 	bl	801c654 <_write>
 801c0a4:	1c43      	adds	r3, r0, #1
 801c0a6:	d102      	bne.n	801c0ae <_write_r+0x1e>
 801c0a8:	682b      	ldr	r3, [r5, #0]
 801c0aa:	b103      	cbz	r3, 801c0ae <_write_r+0x1e>
 801c0ac:	6023      	str	r3, [r4, #0]
 801c0ae:	bd38      	pop	{r3, r4, r5, pc}
 801c0b0:	20002fc8 	.word	0x20002fc8

0801c0b4 <__swsetup_r>:
 801c0b4:	4b32      	ldr	r3, [pc, #200]	; (801c180 <__swsetup_r+0xcc>)
 801c0b6:	b570      	push	{r4, r5, r6, lr}
 801c0b8:	681d      	ldr	r5, [r3, #0]
 801c0ba:	4606      	mov	r6, r0
 801c0bc:	460c      	mov	r4, r1
 801c0be:	b125      	cbz	r5, 801c0ca <__swsetup_r+0x16>
 801c0c0:	69ab      	ldr	r3, [r5, #24]
 801c0c2:	b913      	cbnz	r3, 801c0ca <__swsetup_r+0x16>
 801c0c4:	4628      	mov	r0, r5
 801c0c6:	f7ff f819 	bl	801b0fc <__sinit>
 801c0ca:	4b2e      	ldr	r3, [pc, #184]	; (801c184 <__swsetup_r+0xd0>)
 801c0cc:	429c      	cmp	r4, r3
 801c0ce:	d10f      	bne.n	801c0f0 <__swsetup_r+0x3c>
 801c0d0:	686c      	ldr	r4, [r5, #4]
 801c0d2:	89a3      	ldrh	r3, [r4, #12]
 801c0d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c0d8:	0719      	lsls	r1, r3, #28
 801c0da:	d42c      	bmi.n	801c136 <__swsetup_r+0x82>
 801c0dc:	06dd      	lsls	r5, r3, #27
 801c0de:	d411      	bmi.n	801c104 <__swsetup_r+0x50>
 801c0e0:	2309      	movs	r3, #9
 801c0e2:	6033      	str	r3, [r6, #0]
 801c0e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c0e8:	81a3      	strh	r3, [r4, #12]
 801c0ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c0ee:	e03e      	b.n	801c16e <__swsetup_r+0xba>
 801c0f0:	4b25      	ldr	r3, [pc, #148]	; (801c188 <__swsetup_r+0xd4>)
 801c0f2:	429c      	cmp	r4, r3
 801c0f4:	d101      	bne.n	801c0fa <__swsetup_r+0x46>
 801c0f6:	68ac      	ldr	r4, [r5, #8]
 801c0f8:	e7eb      	b.n	801c0d2 <__swsetup_r+0x1e>
 801c0fa:	4b24      	ldr	r3, [pc, #144]	; (801c18c <__swsetup_r+0xd8>)
 801c0fc:	429c      	cmp	r4, r3
 801c0fe:	bf08      	it	eq
 801c100:	68ec      	ldreq	r4, [r5, #12]
 801c102:	e7e6      	b.n	801c0d2 <__swsetup_r+0x1e>
 801c104:	0758      	lsls	r0, r3, #29
 801c106:	d512      	bpl.n	801c12e <__swsetup_r+0x7a>
 801c108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c10a:	b141      	cbz	r1, 801c11e <__swsetup_r+0x6a>
 801c10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c110:	4299      	cmp	r1, r3
 801c112:	d002      	beq.n	801c11a <__swsetup_r+0x66>
 801c114:	4630      	mov	r0, r6
 801c116:	f7fd fadf 	bl	80196d8 <_free_r>
 801c11a:	2300      	movs	r3, #0
 801c11c:	6363      	str	r3, [r4, #52]	; 0x34
 801c11e:	89a3      	ldrh	r3, [r4, #12]
 801c120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c124:	81a3      	strh	r3, [r4, #12]
 801c126:	2300      	movs	r3, #0
 801c128:	6063      	str	r3, [r4, #4]
 801c12a:	6923      	ldr	r3, [r4, #16]
 801c12c:	6023      	str	r3, [r4, #0]
 801c12e:	89a3      	ldrh	r3, [r4, #12]
 801c130:	f043 0308 	orr.w	r3, r3, #8
 801c134:	81a3      	strh	r3, [r4, #12]
 801c136:	6923      	ldr	r3, [r4, #16]
 801c138:	b94b      	cbnz	r3, 801c14e <__swsetup_r+0x9a>
 801c13a:	89a3      	ldrh	r3, [r4, #12]
 801c13c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c144:	d003      	beq.n	801c14e <__swsetup_r+0x9a>
 801c146:	4621      	mov	r1, r4
 801c148:	4630      	mov	r0, r6
 801c14a:	f000 f933 	bl	801c3b4 <__smakebuf_r>
 801c14e:	89a0      	ldrh	r0, [r4, #12]
 801c150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c154:	f010 0301 	ands.w	r3, r0, #1
 801c158:	d00a      	beq.n	801c170 <__swsetup_r+0xbc>
 801c15a:	2300      	movs	r3, #0
 801c15c:	60a3      	str	r3, [r4, #8]
 801c15e:	6963      	ldr	r3, [r4, #20]
 801c160:	425b      	negs	r3, r3
 801c162:	61a3      	str	r3, [r4, #24]
 801c164:	6923      	ldr	r3, [r4, #16]
 801c166:	b943      	cbnz	r3, 801c17a <__swsetup_r+0xc6>
 801c168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c16c:	d1ba      	bne.n	801c0e4 <__swsetup_r+0x30>
 801c16e:	bd70      	pop	{r4, r5, r6, pc}
 801c170:	0781      	lsls	r1, r0, #30
 801c172:	bf58      	it	pl
 801c174:	6963      	ldrpl	r3, [r4, #20]
 801c176:	60a3      	str	r3, [r4, #8]
 801c178:	e7f4      	b.n	801c164 <__swsetup_r+0xb0>
 801c17a:	2000      	movs	r0, #0
 801c17c:	e7f7      	b.n	801c16e <__swsetup_r+0xba>
 801c17e:	bf00      	nop
 801c180:	20000100 	.word	0x20000100
 801c184:	0801cf78 	.word	0x0801cf78
 801c188:	0801cf98 	.word	0x0801cf98
 801c18c:	0801cf58 	.word	0x0801cf58

0801c190 <abort>:
 801c190:	b508      	push	{r3, lr}
 801c192:	2006      	movs	r0, #6
 801c194:	f000 f9d2 	bl	801c53c <raise>
 801c198:	2001      	movs	r0, #1
 801c19a:	f000 fa63 	bl	801c664 <_exit>
	...

0801c1a0 <_close_r>:
 801c1a0:	b538      	push	{r3, r4, r5, lr}
 801c1a2:	4d06      	ldr	r5, [pc, #24]	; (801c1bc <_close_r+0x1c>)
 801c1a4:	2300      	movs	r3, #0
 801c1a6:	4604      	mov	r4, r0
 801c1a8:	4608      	mov	r0, r1
 801c1aa:	602b      	str	r3, [r5, #0]
 801c1ac:	f000 fa0c 	bl	801c5c8 <_close>
 801c1b0:	1c43      	adds	r3, r0, #1
 801c1b2:	d102      	bne.n	801c1ba <_close_r+0x1a>
 801c1b4:	682b      	ldr	r3, [r5, #0]
 801c1b6:	b103      	cbz	r3, 801c1ba <_close_r+0x1a>
 801c1b8:	6023      	str	r3, [r4, #0]
 801c1ba:	bd38      	pop	{r3, r4, r5, pc}
 801c1bc:	20002fc8 	.word	0x20002fc8

0801c1c0 <__sflush_r>:
 801c1c0:	898a      	ldrh	r2, [r1, #12]
 801c1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1c6:	4605      	mov	r5, r0
 801c1c8:	0710      	lsls	r0, r2, #28
 801c1ca:	460c      	mov	r4, r1
 801c1cc:	d458      	bmi.n	801c280 <__sflush_r+0xc0>
 801c1ce:	684b      	ldr	r3, [r1, #4]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	dc05      	bgt.n	801c1e0 <__sflush_r+0x20>
 801c1d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	dc02      	bgt.n	801c1e0 <__sflush_r+0x20>
 801c1da:	2000      	movs	r0, #0
 801c1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c1e2:	2e00      	cmp	r6, #0
 801c1e4:	d0f9      	beq.n	801c1da <__sflush_r+0x1a>
 801c1e6:	2300      	movs	r3, #0
 801c1e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c1ec:	682f      	ldr	r7, [r5, #0]
 801c1ee:	602b      	str	r3, [r5, #0]
 801c1f0:	d032      	beq.n	801c258 <__sflush_r+0x98>
 801c1f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c1f4:	89a3      	ldrh	r3, [r4, #12]
 801c1f6:	075a      	lsls	r2, r3, #29
 801c1f8:	d505      	bpl.n	801c206 <__sflush_r+0x46>
 801c1fa:	6863      	ldr	r3, [r4, #4]
 801c1fc:	1ac0      	subs	r0, r0, r3
 801c1fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c200:	b10b      	cbz	r3, 801c206 <__sflush_r+0x46>
 801c202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c204:	1ac0      	subs	r0, r0, r3
 801c206:	2300      	movs	r3, #0
 801c208:	4602      	mov	r2, r0
 801c20a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c20c:	6a21      	ldr	r1, [r4, #32]
 801c20e:	4628      	mov	r0, r5
 801c210:	47b0      	blx	r6
 801c212:	1c43      	adds	r3, r0, #1
 801c214:	89a3      	ldrh	r3, [r4, #12]
 801c216:	d106      	bne.n	801c226 <__sflush_r+0x66>
 801c218:	6829      	ldr	r1, [r5, #0]
 801c21a:	291d      	cmp	r1, #29
 801c21c:	d82c      	bhi.n	801c278 <__sflush_r+0xb8>
 801c21e:	4a2a      	ldr	r2, [pc, #168]	; (801c2c8 <__sflush_r+0x108>)
 801c220:	40ca      	lsrs	r2, r1
 801c222:	07d6      	lsls	r6, r2, #31
 801c224:	d528      	bpl.n	801c278 <__sflush_r+0xb8>
 801c226:	2200      	movs	r2, #0
 801c228:	6062      	str	r2, [r4, #4]
 801c22a:	04d9      	lsls	r1, r3, #19
 801c22c:	6922      	ldr	r2, [r4, #16]
 801c22e:	6022      	str	r2, [r4, #0]
 801c230:	d504      	bpl.n	801c23c <__sflush_r+0x7c>
 801c232:	1c42      	adds	r2, r0, #1
 801c234:	d101      	bne.n	801c23a <__sflush_r+0x7a>
 801c236:	682b      	ldr	r3, [r5, #0]
 801c238:	b903      	cbnz	r3, 801c23c <__sflush_r+0x7c>
 801c23a:	6560      	str	r0, [r4, #84]	; 0x54
 801c23c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c23e:	602f      	str	r7, [r5, #0]
 801c240:	2900      	cmp	r1, #0
 801c242:	d0ca      	beq.n	801c1da <__sflush_r+0x1a>
 801c244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c248:	4299      	cmp	r1, r3
 801c24a:	d002      	beq.n	801c252 <__sflush_r+0x92>
 801c24c:	4628      	mov	r0, r5
 801c24e:	f7fd fa43 	bl	80196d8 <_free_r>
 801c252:	2000      	movs	r0, #0
 801c254:	6360      	str	r0, [r4, #52]	; 0x34
 801c256:	e7c1      	b.n	801c1dc <__sflush_r+0x1c>
 801c258:	6a21      	ldr	r1, [r4, #32]
 801c25a:	2301      	movs	r3, #1
 801c25c:	4628      	mov	r0, r5
 801c25e:	47b0      	blx	r6
 801c260:	1c41      	adds	r1, r0, #1
 801c262:	d1c7      	bne.n	801c1f4 <__sflush_r+0x34>
 801c264:	682b      	ldr	r3, [r5, #0]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d0c4      	beq.n	801c1f4 <__sflush_r+0x34>
 801c26a:	2b1d      	cmp	r3, #29
 801c26c:	d001      	beq.n	801c272 <__sflush_r+0xb2>
 801c26e:	2b16      	cmp	r3, #22
 801c270:	d101      	bne.n	801c276 <__sflush_r+0xb6>
 801c272:	602f      	str	r7, [r5, #0]
 801c274:	e7b1      	b.n	801c1da <__sflush_r+0x1a>
 801c276:	89a3      	ldrh	r3, [r4, #12]
 801c278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c27c:	81a3      	strh	r3, [r4, #12]
 801c27e:	e7ad      	b.n	801c1dc <__sflush_r+0x1c>
 801c280:	690f      	ldr	r7, [r1, #16]
 801c282:	2f00      	cmp	r7, #0
 801c284:	d0a9      	beq.n	801c1da <__sflush_r+0x1a>
 801c286:	0793      	lsls	r3, r2, #30
 801c288:	680e      	ldr	r6, [r1, #0]
 801c28a:	bf08      	it	eq
 801c28c:	694b      	ldreq	r3, [r1, #20]
 801c28e:	600f      	str	r7, [r1, #0]
 801c290:	bf18      	it	ne
 801c292:	2300      	movne	r3, #0
 801c294:	eba6 0807 	sub.w	r8, r6, r7
 801c298:	608b      	str	r3, [r1, #8]
 801c29a:	f1b8 0f00 	cmp.w	r8, #0
 801c29e:	dd9c      	ble.n	801c1da <__sflush_r+0x1a>
 801c2a0:	6a21      	ldr	r1, [r4, #32]
 801c2a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c2a4:	4643      	mov	r3, r8
 801c2a6:	463a      	mov	r2, r7
 801c2a8:	4628      	mov	r0, r5
 801c2aa:	47b0      	blx	r6
 801c2ac:	2800      	cmp	r0, #0
 801c2ae:	dc06      	bgt.n	801c2be <__sflush_r+0xfe>
 801c2b0:	89a3      	ldrh	r3, [r4, #12]
 801c2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2b6:	81a3      	strh	r3, [r4, #12]
 801c2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c2bc:	e78e      	b.n	801c1dc <__sflush_r+0x1c>
 801c2be:	4407      	add	r7, r0
 801c2c0:	eba8 0800 	sub.w	r8, r8, r0
 801c2c4:	e7e9      	b.n	801c29a <__sflush_r+0xda>
 801c2c6:	bf00      	nop
 801c2c8:	20400001 	.word	0x20400001

0801c2cc <_fflush_r>:
 801c2cc:	b538      	push	{r3, r4, r5, lr}
 801c2ce:	690b      	ldr	r3, [r1, #16]
 801c2d0:	4605      	mov	r5, r0
 801c2d2:	460c      	mov	r4, r1
 801c2d4:	b913      	cbnz	r3, 801c2dc <_fflush_r+0x10>
 801c2d6:	2500      	movs	r5, #0
 801c2d8:	4628      	mov	r0, r5
 801c2da:	bd38      	pop	{r3, r4, r5, pc}
 801c2dc:	b118      	cbz	r0, 801c2e6 <_fflush_r+0x1a>
 801c2de:	6983      	ldr	r3, [r0, #24]
 801c2e0:	b90b      	cbnz	r3, 801c2e6 <_fflush_r+0x1a>
 801c2e2:	f7fe ff0b 	bl	801b0fc <__sinit>
 801c2e6:	4b14      	ldr	r3, [pc, #80]	; (801c338 <_fflush_r+0x6c>)
 801c2e8:	429c      	cmp	r4, r3
 801c2ea:	d11b      	bne.n	801c324 <_fflush_r+0x58>
 801c2ec:	686c      	ldr	r4, [r5, #4]
 801c2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d0ef      	beq.n	801c2d6 <_fflush_r+0xa>
 801c2f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c2f8:	07d0      	lsls	r0, r2, #31
 801c2fa:	d404      	bmi.n	801c306 <_fflush_r+0x3a>
 801c2fc:	0599      	lsls	r1, r3, #22
 801c2fe:	d402      	bmi.n	801c306 <_fflush_r+0x3a>
 801c300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c302:	f7fe ffb0 	bl	801b266 <__retarget_lock_acquire_recursive>
 801c306:	4628      	mov	r0, r5
 801c308:	4621      	mov	r1, r4
 801c30a:	f7ff ff59 	bl	801c1c0 <__sflush_r>
 801c30e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c310:	07da      	lsls	r2, r3, #31
 801c312:	4605      	mov	r5, r0
 801c314:	d4e0      	bmi.n	801c2d8 <_fflush_r+0xc>
 801c316:	89a3      	ldrh	r3, [r4, #12]
 801c318:	059b      	lsls	r3, r3, #22
 801c31a:	d4dd      	bmi.n	801c2d8 <_fflush_r+0xc>
 801c31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c31e:	f7fe ffa3 	bl	801b268 <__retarget_lock_release_recursive>
 801c322:	e7d9      	b.n	801c2d8 <_fflush_r+0xc>
 801c324:	4b05      	ldr	r3, [pc, #20]	; (801c33c <_fflush_r+0x70>)
 801c326:	429c      	cmp	r4, r3
 801c328:	d101      	bne.n	801c32e <_fflush_r+0x62>
 801c32a:	68ac      	ldr	r4, [r5, #8]
 801c32c:	e7df      	b.n	801c2ee <_fflush_r+0x22>
 801c32e:	4b04      	ldr	r3, [pc, #16]	; (801c340 <_fflush_r+0x74>)
 801c330:	429c      	cmp	r4, r3
 801c332:	bf08      	it	eq
 801c334:	68ec      	ldreq	r4, [r5, #12]
 801c336:	e7da      	b.n	801c2ee <_fflush_r+0x22>
 801c338:	0801cf78 	.word	0x0801cf78
 801c33c:	0801cf98 	.word	0x0801cf98
 801c340:	0801cf58 	.word	0x0801cf58

0801c344 <_lseek_r>:
 801c344:	b538      	push	{r3, r4, r5, lr}
 801c346:	4d07      	ldr	r5, [pc, #28]	; (801c364 <_lseek_r+0x20>)
 801c348:	4604      	mov	r4, r0
 801c34a:	4608      	mov	r0, r1
 801c34c:	4611      	mov	r1, r2
 801c34e:	2200      	movs	r2, #0
 801c350:	602a      	str	r2, [r5, #0]
 801c352:	461a      	mov	r2, r3
 801c354:	f000 f960 	bl	801c618 <_lseek>
 801c358:	1c43      	adds	r3, r0, #1
 801c35a:	d102      	bne.n	801c362 <_lseek_r+0x1e>
 801c35c:	682b      	ldr	r3, [r5, #0]
 801c35e:	b103      	cbz	r3, 801c362 <_lseek_r+0x1e>
 801c360:	6023      	str	r3, [r4, #0]
 801c362:	bd38      	pop	{r3, r4, r5, pc}
 801c364:	20002fc8 	.word	0x20002fc8

0801c368 <__swhatbuf_r>:
 801c368:	b570      	push	{r4, r5, r6, lr}
 801c36a:	460e      	mov	r6, r1
 801c36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c370:	2900      	cmp	r1, #0
 801c372:	b096      	sub	sp, #88	; 0x58
 801c374:	4614      	mov	r4, r2
 801c376:	461d      	mov	r5, r3
 801c378:	da08      	bge.n	801c38c <__swhatbuf_r+0x24>
 801c37a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c37e:	2200      	movs	r2, #0
 801c380:	602a      	str	r2, [r5, #0]
 801c382:	061a      	lsls	r2, r3, #24
 801c384:	d410      	bmi.n	801c3a8 <__swhatbuf_r+0x40>
 801c386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c38a:	e00e      	b.n	801c3aa <__swhatbuf_r+0x42>
 801c38c:	466a      	mov	r2, sp
 801c38e:	f000 f8f1 	bl	801c574 <_fstat_r>
 801c392:	2800      	cmp	r0, #0
 801c394:	dbf1      	blt.n	801c37a <__swhatbuf_r+0x12>
 801c396:	9a01      	ldr	r2, [sp, #4]
 801c398:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c39c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c3a0:	425a      	negs	r2, r3
 801c3a2:	415a      	adcs	r2, r3
 801c3a4:	602a      	str	r2, [r5, #0]
 801c3a6:	e7ee      	b.n	801c386 <__swhatbuf_r+0x1e>
 801c3a8:	2340      	movs	r3, #64	; 0x40
 801c3aa:	2000      	movs	r0, #0
 801c3ac:	6023      	str	r3, [r4, #0]
 801c3ae:	b016      	add	sp, #88	; 0x58
 801c3b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c3b4 <__smakebuf_r>:
 801c3b4:	898b      	ldrh	r3, [r1, #12]
 801c3b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c3b8:	079d      	lsls	r5, r3, #30
 801c3ba:	4606      	mov	r6, r0
 801c3bc:	460c      	mov	r4, r1
 801c3be:	d507      	bpl.n	801c3d0 <__smakebuf_r+0x1c>
 801c3c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c3c4:	6023      	str	r3, [r4, #0]
 801c3c6:	6123      	str	r3, [r4, #16]
 801c3c8:	2301      	movs	r3, #1
 801c3ca:	6163      	str	r3, [r4, #20]
 801c3cc:	b002      	add	sp, #8
 801c3ce:	bd70      	pop	{r4, r5, r6, pc}
 801c3d0:	ab01      	add	r3, sp, #4
 801c3d2:	466a      	mov	r2, sp
 801c3d4:	f7ff ffc8 	bl	801c368 <__swhatbuf_r>
 801c3d8:	9900      	ldr	r1, [sp, #0]
 801c3da:	4605      	mov	r5, r0
 801c3dc:	4630      	mov	r0, r6
 801c3de:	f7fd f9e7 	bl	80197b0 <_malloc_r>
 801c3e2:	b948      	cbnz	r0, 801c3f8 <__smakebuf_r+0x44>
 801c3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3e8:	059a      	lsls	r2, r3, #22
 801c3ea:	d4ef      	bmi.n	801c3cc <__smakebuf_r+0x18>
 801c3ec:	f023 0303 	bic.w	r3, r3, #3
 801c3f0:	f043 0302 	orr.w	r3, r3, #2
 801c3f4:	81a3      	strh	r3, [r4, #12]
 801c3f6:	e7e3      	b.n	801c3c0 <__smakebuf_r+0xc>
 801c3f8:	4b0d      	ldr	r3, [pc, #52]	; (801c430 <__smakebuf_r+0x7c>)
 801c3fa:	62b3      	str	r3, [r6, #40]	; 0x28
 801c3fc:	89a3      	ldrh	r3, [r4, #12]
 801c3fe:	6020      	str	r0, [r4, #0]
 801c400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c404:	81a3      	strh	r3, [r4, #12]
 801c406:	9b00      	ldr	r3, [sp, #0]
 801c408:	6163      	str	r3, [r4, #20]
 801c40a:	9b01      	ldr	r3, [sp, #4]
 801c40c:	6120      	str	r0, [r4, #16]
 801c40e:	b15b      	cbz	r3, 801c428 <__smakebuf_r+0x74>
 801c410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c414:	4630      	mov	r0, r6
 801c416:	f000 f8bf 	bl	801c598 <_isatty_r>
 801c41a:	b128      	cbz	r0, 801c428 <__smakebuf_r+0x74>
 801c41c:	89a3      	ldrh	r3, [r4, #12]
 801c41e:	f023 0303 	bic.w	r3, r3, #3
 801c422:	f043 0301 	orr.w	r3, r3, #1
 801c426:	81a3      	strh	r3, [r4, #12]
 801c428:	89a0      	ldrh	r0, [r4, #12]
 801c42a:	4305      	orrs	r5, r0
 801c42c:	81a5      	strh	r5, [r4, #12]
 801c42e:	e7cd      	b.n	801c3cc <__smakebuf_r+0x18>
 801c430:	0801b095 	.word	0x0801b095

0801c434 <memmove>:
 801c434:	4288      	cmp	r0, r1
 801c436:	b510      	push	{r4, lr}
 801c438:	eb01 0402 	add.w	r4, r1, r2
 801c43c:	d902      	bls.n	801c444 <memmove+0x10>
 801c43e:	4284      	cmp	r4, r0
 801c440:	4623      	mov	r3, r4
 801c442:	d807      	bhi.n	801c454 <memmove+0x20>
 801c444:	1e43      	subs	r3, r0, #1
 801c446:	42a1      	cmp	r1, r4
 801c448:	d008      	beq.n	801c45c <memmove+0x28>
 801c44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c44e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c452:	e7f8      	b.n	801c446 <memmove+0x12>
 801c454:	4402      	add	r2, r0
 801c456:	4601      	mov	r1, r0
 801c458:	428a      	cmp	r2, r1
 801c45a:	d100      	bne.n	801c45e <memmove+0x2a>
 801c45c:	bd10      	pop	{r4, pc}
 801c45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c466:	e7f7      	b.n	801c458 <memmove+0x24>

0801c468 <_realloc_r>:
 801c468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c46c:	4680      	mov	r8, r0
 801c46e:	4614      	mov	r4, r2
 801c470:	460e      	mov	r6, r1
 801c472:	b921      	cbnz	r1, 801c47e <_realloc_r+0x16>
 801c474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c478:	4611      	mov	r1, r2
 801c47a:	f7fd b999 	b.w	80197b0 <_malloc_r>
 801c47e:	b92a      	cbnz	r2, 801c48c <_realloc_r+0x24>
 801c480:	f7fd f92a 	bl	80196d8 <_free_r>
 801c484:	4625      	mov	r5, r4
 801c486:	4628      	mov	r0, r5
 801c488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c48c:	f000 f894 	bl	801c5b8 <_malloc_usable_size_r>
 801c490:	4284      	cmp	r4, r0
 801c492:	4607      	mov	r7, r0
 801c494:	d802      	bhi.n	801c49c <_realloc_r+0x34>
 801c496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c49a:	d812      	bhi.n	801c4c2 <_realloc_r+0x5a>
 801c49c:	4621      	mov	r1, r4
 801c49e:	4640      	mov	r0, r8
 801c4a0:	f7fd f986 	bl	80197b0 <_malloc_r>
 801c4a4:	4605      	mov	r5, r0
 801c4a6:	2800      	cmp	r0, #0
 801c4a8:	d0ed      	beq.n	801c486 <_realloc_r+0x1e>
 801c4aa:	42bc      	cmp	r4, r7
 801c4ac:	4622      	mov	r2, r4
 801c4ae:	4631      	mov	r1, r6
 801c4b0:	bf28      	it	cs
 801c4b2:	463a      	movcs	r2, r7
 801c4b4:	f7fd f8fa 	bl	80196ac <memcpy>
 801c4b8:	4631      	mov	r1, r6
 801c4ba:	4640      	mov	r0, r8
 801c4bc:	f7fd f90c 	bl	80196d8 <_free_r>
 801c4c0:	e7e1      	b.n	801c486 <_realloc_r+0x1e>
 801c4c2:	4635      	mov	r5, r6
 801c4c4:	e7df      	b.n	801c486 <_realloc_r+0x1e>
	...

0801c4c8 <_read_r>:
 801c4c8:	b538      	push	{r3, r4, r5, lr}
 801c4ca:	4d07      	ldr	r5, [pc, #28]	; (801c4e8 <_read_r+0x20>)
 801c4cc:	4604      	mov	r4, r0
 801c4ce:	4608      	mov	r0, r1
 801c4d0:	4611      	mov	r1, r2
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	602a      	str	r2, [r5, #0]
 801c4d6:	461a      	mov	r2, r3
 801c4d8:	f000 f8a6 	bl	801c628 <_read>
 801c4dc:	1c43      	adds	r3, r0, #1
 801c4de:	d102      	bne.n	801c4e6 <_read_r+0x1e>
 801c4e0:	682b      	ldr	r3, [r5, #0]
 801c4e2:	b103      	cbz	r3, 801c4e6 <_read_r+0x1e>
 801c4e4:	6023      	str	r3, [r4, #0]
 801c4e6:	bd38      	pop	{r3, r4, r5, pc}
 801c4e8:	20002fc8 	.word	0x20002fc8

0801c4ec <_raise_r>:
 801c4ec:	291f      	cmp	r1, #31
 801c4ee:	b538      	push	{r3, r4, r5, lr}
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	460d      	mov	r5, r1
 801c4f4:	d904      	bls.n	801c500 <_raise_r+0x14>
 801c4f6:	2316      	movs	r3, #22
 801c4f8:	6003      	str	r3, [r0, #0]
 801c4fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c4fe:	bd38      	pop	{r3, r4, r5, pc}
 801c500:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c502:	b112      	cbz	r2, 801c50a <_raise_r+0x1e>
 801c504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c508:	b94b      	cbnz	r3, 801c51e <_raise_r+0x32>
 801c50a:	4620      	mov	r0, r4
 801c50c:	f000 f830 	bl	801c570 <_getpid_r>
 801c510:	462a      	mov	r2, r5
 801c512:	4601      	mov	r1, r0
 801c514:	4620      	mov	r0, r4
 801c516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c51a:	f000 b817 	b.w	801c54c <_kill_r>
 801c51e:	2b01      	cmp	r3, #1
 801c520:	d00a      	beq.n	801c538 <_raise_r+0x4c>
 801c522:	1c59      	adds	r1, r3, #1
 801c524:	d103      	bne.n	801c52e <_raise_r+0x42>
 801c526:	2316      	movs	r3, #22
 801c528:	6003      	str	r3, [r0, #0]
 801c52a:	2001      	movs	r0, #1
 801c52c:	e7e7      	b.n	801c4fe <_raise_r+0x12>
 801c52e:	2400      	movs	r4, #0
 801c530:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c534:	4628      	mov	r0, r5
 801c536:	4798      	blx	r3
 801c538:	2000      	movs	r0, #0
 801c53a:	e7e0      	b.n	801c4fe <_raise_r+0x12>

0801c53c <raise>:
 801c53c:	4b02      	ldr	r3, [pc, #8]	; (801c548 <raise+0xc>)
 801c53e:	4601      	mov	r1, r0
 801c540:	6818      	ldr	r0, [r3, #0]
 801c542:	f7ff bfd3 	b.w	801c4ec <_raise_r>
 801c546:	bf00      	nop
 801c548:	20000100 	.word	0x20000100

0801c54c <_kill_r>:
 801c54c:	b538      	push	{r3, r4, r5, lr}
 801c54e:	4d07      	ldr	r5, [pc, #28]	; (801c56c <_kill_r+0x20>)
 801c550:	2300      	movs	r3, #0
 801c552:	4604      	mov	r4, r0
 801c554:	4608      	mov	r0, r1
 801c556:	4611      	mov	r1, r2
 801c558:	602b      	str	r3, [r5, #0]
 801c55a:	f000 f855 	bl	801c608 <_kill>
 801c55e:	1c43      	adds	r3, r0, #1
 801c560:	d102      	bne.n	801c568 <_kill_r+0x1c>
 801c562:	682b      	ldr	r3, [r5, #0]
 801c564:	b103      	cbz	r3, 801c568 <_kill_r+0x1c>
 801c566:	6023      	str	r3, [r4, #0]
 801c568:	bd38      	pop	{r3, r4, r5, pc}
 801c56a:	bf00      	nop
 801c56c:	20002fc8 	.word	0x20002fc8

0801c570 <_getpid_r>:
 801c570:	f000 b83a 	b.w	801c5e8 <_getpid>

0801c574 <_fstat_r>:
 801c574:	b538      	push	{r3, r4, r5, lr}
 801c576:	4d07      	ldr	r5, [pc, #28]	; (801c594 <_fstat_r+0x20>)
 801c578:	2300      	movs	r3, #0
 801c57a:	4604      	mov	r4, r0
 801c57c:	4608      	mov	r0, r1
 801c57e:	4611      	mov	r1, r2
 801c580:	602b      	str	r3, [r5, #0]
 801c582:	f000 f829 	bl	801c5d8 <_fstat>
 801c586:	1c43      	adds	r3, r0, #1
 801c588:	d102      	bne.n	801c590 <_fstat_r+0x1c>
 801c58a:	682b      	ldr	r3, [r5, #0]
 801c58c:	b103      	cbz	r3, 801c590 <_fstat_r+0x1c>
 801c58e:	6023      	str	r3, [r4, #0]
 801c590:	bd38      	pop	{r3, r4, r5, pc}
 801c592:	bf00      	nop
 801c594:	20002fc8 	.word	0x20002fc8

0801c598 <_isatty_r>:
 801c598:	b538      	push	{r3, r4, r5, lr}
 801c59a:	4d06      	ldr	r5, [pc, #24]	; (801c5b4 <_isatty_r+0x1c>)
 801c59c:	2300      	movs	r3, #0
 801c59e:	4604      	mov	r4, r0
 801c5a0:	4608      	mov	r0, r1
 801c5a2:	602b      	str	r3, [r5, #0]
 801c5a4:	f000 f828 	bl	801c5f8 <_isatty>
 801c5a8:	1c43      	adds	r3, r0, #1
 801c5aa:	d102      	bne.n	801c5b2 <_isatty_r+0x1a>
 801c5ac:	682b      	ldr	r3, [r5, #0]
 801c5ae:	b103      	cbz	r3, 801c5b2 <_isatty_r+0x1a>
 801c5b0:	6023      	str	r3, [r4, #0]
 801c5b2:	bd38      	pop	{r3, r4, r5, pc}
 801c5b4:	20002fc8 	.word	0x20002fc8

0801c5b8 <_malloc_usable_size_r>:
 801c5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c5bc:	1f18      	subs	r0, r3, #4
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	bfbc      	itt	lt
 801c5c2:	580b      	ldrlt	r3, [r1, r0]
 801c5c4:	18c0      	addlt	r0, r0, r3
 801c5c6:	4770      	bx	lr

0801c5c8 <_close>:
 801c5c8:	4b02      	ldr	r3, [pc, #8]	; (801c5d4 <_close+0xc>)
 801c5ca:	2258      	movs	r2, #88	; 0x58
 801c5cc:	601a      	str	r2, [r3, #0]
 801c5ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c5d2:	4770      	bx	lr
 801c5d4:	20002fc8 	.word	0x20002fc8

0801c5d8 <_fstat>:
 801c5d8:	4b02      	ldr	r3, [pc, #8]	; (801c5e4 <_fstat+0xc>)
 801c5da:	2258      	movs	r2, #88	; 0x58
 801c5dc:	601a      	str	r2, [r3, #0]
 801c5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c5e2:	4770      	bx	lr
 801c5e4:	20002fc8 	.word	0x20002fc8

0801c5e8 <_getpid>:
 801c5e8:	4b02      	ldr	r3, [pc, #8]	; (801c5f4 <_getpid+0xc>)
 801c5ea:	2258      	movs	r2, #88	; 0x58
 801c5ec:	601a      	str	r2, [r3, #0]
 801c5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c5f2:	4770      	bx	lr
 801c5f4:	20002fc8 	.word	0x20002fc8

0801c5f8 <_isatty>:
 801c5f8:	4b02      	ldr	r3, [pc, #8]	; (801c604 <_isatty+0xc>)
 801c5fa:	2258      	movs	r2, #88	; 0x58
 801c5fc:	601a      	str	r2, [r3, #0]
 801c5fe:	2000      	movs	r0, #0
 801c600:	4770      	bx	lr
 801c602:	bf00      	nop
 801c604:	20002fc8 	.word	0x20002fc8

0801c608 <_kill>:
 801c608:	4b02      	ldr	r3, [pc, #8]	; (801c614 <_kill+0xc>)
 801c60a:	2258      	movs	r2, #88	; 0x58
 801c60c:	601a      	str	r2, [r3, #0]
 801c60e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c612:	4770      	bx	lr
 801c614:	20002fc8 	.word	0x20002fc8

0801c618 <_lseek>:
 801c618:	4b02      	ldr	r3, [pc, #8]	; (801c624 <_lseek+0xc>)
 801c61a:	2258      	movs	r2, #88	; 0x58
 801c61c:	601a      	str	r2, [r3, #0]
 801c61e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c622:	4770      	bx	lr
 801c624:	20002fc8 	.word	0x20002fc8

0801c628 <_read>:
 801c628:	4b02      	ldr	r3, [pc, #8]	; (801c634 <_read+0xc>)
 801c62a:	2258      	movs	r2, #88	; 0x58
 801c62c:	601a      	str	r2, [r3, #0]
 801c62e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c632:	4770      	bx	lr
 801c634:	20002fc8 	.word	0x20002fc8

0801c638 <_sbrk>:
 801c638:	4a04      	ldr	r2, [pc, #16]	; (801c64c <_sbrk+0x14>)
 801c63a:	6811      	ldr	r1, [r2, #0]
 801c63c:	4603      	mov	r3, r0
 801c63e:	b909      	cbnz	r1, 801c644 <_sbrk+0xc>
 801c640:	4903      	ldr	r1, [pc, #12]	; (801c650 <_sbrk+0x18>)
 801c642:	6011      	str	r1, [r2, #0]
 801c644:	6810      	ldr	r0, [r2, #0]
 801c646:	4403      	add	r3, r0
 801c648:	6013      	str	r3, [r2, #0]
 801c64a:	4770      	bx	lr
 801c64c:	20002fcc 	.word	0x20002fcc
 801c650:	20002fd0 	.word	0x20002fd0

0801c654 <_write>:
 801c654:	4b02      	ldr	r3, [pc, #8]	; (801c660 <_write+0xc>)
 801c656:	2258      	movs	r2, #88	; 0x58
 801c658:	601a      	str	r2, [r3, #0]
 801c65a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c65e:	4770      	bx	lr
 801c660:	20002fc8 	.word	0x20002fc8

0801c664 <_exit>:
 801c664:	e7fe      	b.n	801c664 <_exit>
	...

0801c668 <_init>:
 801c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c66a:	bf00      	nop
 801c66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c66e:	bc08      	pop	{r3}
 801c670:	469e      	mov	lr, r3
 801c672:	4770      	bx	lr

0801c674 <_fini>:
 801c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c676:	bf00      	nop
 801c678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c67a:	bc08      	pop	{r3}
 801c67c:	469e      	mov	lr, r3
 801c67e:	4770      	bx	lr
