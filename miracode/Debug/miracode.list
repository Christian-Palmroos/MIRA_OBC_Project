
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c748  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800c904  0800c904  0001c904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9d0  0800c9d0  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9d0  0800c9d0  0001c9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9d8  0800c9d8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9d8  0800c9d8  0001c9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9dc  0800c9dc  0001c9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800c9e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee0  20000190  0800cb70  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20002070  0800cb70  00022070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022108  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a86  00000000  00000000  000422c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  00046d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  00048848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003053d  00000000  00000000  0004a148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023cae  00000000  00000000  0007a685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f41b  00000000  00000000  0009e333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ad74e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007030  00000000  00000000  001ad7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800c8ec 	.word	0x0800c8ec

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	0800c8ec 	.word	0x0800c8ec

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fd85 	bl	8001012 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f836 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f9fe 	bl	800090c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000510:	f000 f884 	bl	800061c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000514:	f000 f8c2 	bl	800069c <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000518:	f000 f900 	bl	800071c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800051c:	f000 f920 	bl	8000760 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000520:	f000 f95c 	bl	80007dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f9a6 	bl	8000874 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000528:	f009 fd0c 	bl	8009f44 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800052c:	f00b fb8e 	bl	800bc4c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000530:	2108      	movs	r1, #8
 8000532:	4810      	ldr	r0, [pc, #64]	; (8000574 <main+0x74>)
 8000534:	f001 f8da 	bl	80016ec <HAL_GPIO_TogglePin>
	  HAL_Delay (300);
 8000538:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800053c:	f000 fdde 	bl	80010fc <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000540:	2110      	movs	r1, #16
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <main+0x74>)
 8000544:	f001 f8d2 	bl	80016ec <HAL_GPIO_TogglePin>
	  HAL_Delay (300);
 8000548:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800054c:	f000 fdd6 	bl	80010fc <HAL_Delay>
	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8000550:	2120      	movs	r1, #32
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <main+0x74>)
 8000554:	f001 f8ca 	bl	80016ec <HAL_GPIO_TogglePin>
	  HAL_Delay (300);
 8000558:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800055c:	f000 fdce 	bl	80010fc <HAL_Delay>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <main+0x74>)
 8000564:	f001 f8c2 	bl	80016ec <HAL_GPIO_TogglePin>
	  HAL_Delay (300);
 8000568:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800056c:	f000 fdc6 	bl	80010fc <HAL_Delay>
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000570:	e7de      	b.n	8000530 <main+0x30>
 8000572:	bf00      	nop
 8000574:	48000c00 	.word	0x48000c00

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	; 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	; 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f00c f9a8 	bl	800c8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800059a:	2000      	movs	r0, #0
 800059c:	f002 fbc6 	bl	8002d2c <HAL_PWREx_ControlVoltageScaling>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005a6:	f000 fa8f 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005aa:	2321      	movs	r3, #33	; 0x21
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005bc:	2303      	movs	r3, #3
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005c4:	231e      	movs	r3, #30
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fc5b 	bl	8002e94 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80005e4:	f000 fa70 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2303      	movs	r3, #3
 80005ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2105      	movs	r1, #5
 8000600:	4618      	mov	r0, r3
 8000602:	f003 f861 	bl	80036c8 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800060c:	f000 fa5c 	bl	8000ac8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000610:	f003 fa58 	bl	8003ac4 <HAL_RCC_EnableCSS>
}
 8000614:	bf00      	nop
 8000616:	3758      	adds	r7, #88	; 0x58
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_I2C1_Init+0x74>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <MX_I2C1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_I2C1_Init+0x74>)
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_I2C1_Init+0x7c>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_I2C1_Init+0x74>)
 8000634:	2201      	movs	r2, #1
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <MX_I2C1_Init+0x74>)
 8000658:	f001 f862 	bl	8001720 <HAL_I2C_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000662:	f000 fa31 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <MX_I2C1_Init+0x74>)
 800066a:	f001 f8e8 	bl	800183e <HAL_I2CEx_ConfigAnalogFilter>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000674:	f000 fa28 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2C1_Init+0x74>)
 800067c:	f001 f92a 	bl	80018d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 fa1f 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200001ac 	.word	0x200001ac
 8000694:	40005400 	.word	0x40005400
 8000698:	307075b1 	.word	0x307075b1

0800069c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_I2C2_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_I2C2_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_I2C2_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_I2C2_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_I2C2_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_I2C2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C2_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_I2C2_Init+0x74>)
 80006d8:	f001 f822 	bl	8001720 <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f000 f9f1 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ea:	f001 f8a8 	bl	800183e <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f9e8 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2C2_Init+0x74>)
 80006fc:	f001 f8ea 	bl	80018d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 f9df 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000200 	.word	0x20000200
 8000714:	40005800 	.word	0x40005800
 8000718:	307075b1 	.word	0x307075b1

0800071c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_SDMMC1_SD_Init+0x3c>)
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <MX_SDMMC1_SD_Init+0x40>)
 8000724:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_SDMMC1_SD_Init+0x3c>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_SDMMC1_SD_Init+0x3c>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_SDMMC1_SD_Init+0x3c>)
 8000734:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000738:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_SDMMC1_SD_Init+0x3c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MX_SDMMC1_SD_Init+0x3c>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <MX_SDMMC1_SD_Init+0x3c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000254 	.word	0x20000254
 800075c:	50062400 	.word	0x50062400

08000760 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_SPI1_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_SPI1_Init+0x74>)
 800076c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI1_Init+0x74>)
 800077a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800077e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x74>)
 800078e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000792:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007ae:	2207      	movs	r2, #7
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007ba:	2208      	movs	r2, #8
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007c0:	f006 fbf7 	bl	8006fb2 <HAL_SPI_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f97d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200002d4 	.word	0x200002d4
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007e2:	4a23      	ldr	r2, [pc, #140]	; (8000870 <MX_USART1_UART_Init+0x94>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_USART1_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_USART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000826:	f006 fc67 	bl	80070f8 <HAL_UART_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f94a 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000838:	f007 f998 	bl	8007b6c <HAL_UARTEx_SetTxFifoThreshold>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 f941 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <MX_USART1_UART_Init+0x90>)
 800084a:	f007 f9cd 	bl	8007be8 <HAL_UARTEx_SetRxFifoThreshold>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f938 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_USART1_UART_Init+0x90>)
 800085a:	f007 f94e 	bl	8007afa <HAL_UARTEx_DisableFifoMode>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 f930 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000338 	.word	0x20000338
 8000870:	40013800 	.word	0x40013800

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_USART2_UART_Init+0x90>)
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <MX_USART2_UART_Init+0x94>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_USART2_UART_Init+0x90>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_USART2_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_USART2_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_USART2_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_USART2_UART_Init+0x90>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008be:	f006 fc1b 	bl	80070f8 <HAL_UART_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 f8fe 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008d0:	f007 f94c 	bl	8007b6c <HAL_UARTEx_SetTxFifoThreshold>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008da:	f000 f8f5 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008e2:	f007 f981 	bl	8007be8 <HAL_UARTEx_SetRxFifoThreshold>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 f8ec 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008f2:	f007 f902 	bl	8007afa <HAL_UARTEx_DisableFifoMode>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f8e4 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200003c8 	.word	0x200003c8
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a63      	ldr	r2, [pc, #396]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a5d      	ldr	r2, [pc, #372]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	4b58      	ldr	r3, [pc, #352]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a57      	ldr	r2, [pc, #348]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b52      	ldr	r3, [pc, #328]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a51      	ldr	r2, [pc, #324]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a4b      	ldr	r2, [pc, #300]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b49      	ldr	r3, [pc, #292]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a45      	ldr	r2, [pc, #276]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80009b2:	2200      	movs	r2, #0
 80009b4:	f641 013c 	movw	r1, #6204	; 0x183c
 80009b8:	483f      	ldr	r0, [pc, #252]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 80009ba:	f000 fe7f 	bl	80016bc <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2130      	movs	r1, #48	; 0x30
 80009c2:	483e      	ldr	r0, [pc, #248]	; (8000abc <MX_GPIO_Init+0x1b0>)
 80009c4:	f000 fe7a 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2178      	movs	r1, #120	; 0x78
 80009cc:	483c      	ldr	r0, [pc, #240]	; (8000ac0 <MX_GPIO_Init+0x1b4>)
 80009ce:	f000 fe75 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80009d2:	f641 033c 	movw	r3, #6204	; 0x183c
 80009d6:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4833      	ldr	r0, [pc, #204]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 80009ec:	f000 fcbc 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 80009f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	482d      	ldr	r0, [pc, #180]	; (8000abc <MX_GPIO_Init+0x1b0>)
 8000a06:	f000 fcaf 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f000 fca2 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000a24:	2330      	movs	r3, #48	; 0x30
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4820      	ldr	r0, [pc, #128]	; (8000abc <MX_GPIO_Init+0x1b0>)
 8000a3c:	f000 fc94 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000a56:	f000 fc87 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f000 fc79 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000a76:	2378      	movs	r3, #120	; 0x78
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_GPIO_Init+0x1b4>)
 8000a8e:	f000 fc6b 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_GPIO_Init+0x1b8>)
 8000aa6:	f000 fc5f 	bl	8001368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3730      	adds	r7, #48	; 0x30
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48001000 	.word	0x48001000
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	48000c00 	.word	0x48000c00
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0b0      	sub	sp, #192	; 0xc0
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	2294      	movs	r2, #148	; 0x94
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f00b fecd 	bl	800c8dc <memset>
  if(hi2c->Instance==I2C1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a42      	ldr	r2, [pc, #264]	; (8000c50 <HAL_I2C_MspInit+0x134>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d13b      	bne.n	8000bc4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b4c:	2340      	movs	r3, #64	; 0x40
 8000b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 f89f 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff ffb0 	bl	8000ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	4a39      	ldr	r2, [pc, #228]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b80:	23c0      	movs	r3, #192	; 0xc0
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	2312      	movs	r3, #18
 8000b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	482c      	ldr	r0, [pc, #176]	; (8000c58 <HAL_I2C_MspInit+0x13c>)
 8000ba6:	f000 fbdf 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bc2:	e040      	b.n	8000c46 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <HAL_I2C_MspInit+0x140>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d13b      	bne.n	8000c46 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 f85e 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000be6:	f7ff ff6f 	bl	8000ac8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c26:	4619      	mov	r1, r3
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <HAL_I2C_MspInit+0x13c>)
 8000c2a:	f000 fb9d 	bl	8001368 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_I2C_MspInit+0x138>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
}
 8000c46:	bf00      	nop
 8000c48:	37c0      	adds	r7, #192	; 0xc0
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40005400 	.word	0x40005400
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	40005800 	.word	0x40005800

08000c60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0b0      	sub	sp, #192	; 0xc0
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	2294      	movs	r2, #148	; 0x94
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f00b fe2b 	bl	800c8dc <memset>
  if(hsd->Instance==SDMMC1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a33      	ldr	r2, [pc, #204]	; (8000d58 <HAL_SD_MspInit+0xf8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d15e      	bne.n	8000d4e <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000c90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fffb 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000cac:	f7ff ff0c 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_SD_MspInit+0xfc>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cf8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d12:	230c      	movs	r3, #12
 8000d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4810      	ldr	r0, [pc, #64]	; (8000d60 <HAL_SD_MspInit+0x100>)
 8000d20:	f000 fb22 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d24:	2304      	movs	r3, #4
 8000d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d46:	4619      	mov	r1, r3
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <HAL_SD_MspInit+0x104>)
 8000d4a:	f000 fb0d 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	37c0      	adds	r7, #192	; 0xc0
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	50062400 	.word	0x50062400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48000c00 	.word	0x48000c00

08000d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x7c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d128      	bne.n	8000ddc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d94:	6613      	str	r3, [r2, #96]	; 0x60
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dba:	23f0      	movs	r3, #240	; 0xf0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 fac6 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013000 	.word	0x40013000
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0b0      	sub	sp, #192	; 0xc0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	2294      	movs	r2, #148	; 0x94
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00b fd65 	bl	800c8dc <memset>
  if(huart->Instance==USART1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <HAL_UART_MspInit+0x138>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d13d      	bne.n	8000e98 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e20:	2300      	movs	r3, #0
 8000e22:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 ff37 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e34:	f7ff fe48 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e38:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3c:	4a3a      	ldr	r2, [pc, #232]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6613      	str	r3, [r2, #96]	; 0x60
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a34      	ldr	r2, [pc, #208]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8000e68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e82:	2307      	movs	r3, #7
 8000e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f000 fa69 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e96:	e040      	b.n	8000f1a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <HAL_UART_MspInit+0x140>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d13b      	bne.n	8000f1a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fef4 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000eba:	f7ff fe05 	bl	8000ac8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0x13c>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f06:	2307      	movs	r3, #7
 8000f08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f10:	4619      	mov	r1, r3
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f000 fa27 	bl	8001368 <HAL_GPIO_Init>
}
 8000f1a:	bf00      	nop
 8000f1c:	37c0      	adds	r7, #192	; 0xc0
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40004400 	.word	0x40004400

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000f34:	f002 fdd6 	bl	8003ae4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x8>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f89c 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <OTG_FS_IRQHandler+0x10>)
 8000f8e:	f000 fe40 	bl	8001c12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20001944 	.word	0x20001944

08000f9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc4:	f7ff ffea 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fca:	490d      	ldr	r1, [pc, #52]	; (8001000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <LoopForever+0xe>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	; (800100c <LoopForever+0x16>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fee:	f00b fc51 	bl	800c894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ff2:	f7ff fa85 	bl	8000500 <main>

08000ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff6:	e7fe      	b.n	8000ff6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001004:	0800c9e0 	.word	0x0800c9e0
  ldr r2, =_sbss
 8001008:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800100c:	20002070 	.word	0x20002070

08001010 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC1_IRQHandler>

08001012 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f961 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f80e 	bl	8001044 <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e001      	b.n	8001038 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001034:	f7ff fd4e 	bl	8000ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001038:	79fb      	ldrb	r3, [r7, #7]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_InitTick+0x6c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d023      	beq.n	80010a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_InitTick+0x70>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f96d 	bl	800134e <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10f      	bne.n	800109a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d809      	bhi.n	8001094 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001088:	f000 f937 	bl	80012fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_InitTick+0x74>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e007      	b.n	80010a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e004      	b.n	80010a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e001      	b.n	80010a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000458 	.word	0x20000458

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000458 	.word	0x20000458

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e166      	b.n	8001646 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8158 	beq.w	8001640 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0203 	and.w	r2, r3, #3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80b2 	beq.w	8001640 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b61      	ldr	r3, [pc, #388]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e0:	4a60      	ldr	r2, [pc, #384]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6613      	str	r3, [r2, #96]	; 0x60
 80014e8:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a5c      	ldr	r2, [pc, #368]	; (8001668 <HAL_GPIO_Init+0x300>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151e:	d02b      	beq.n	8001578 <HAL_GPIO_Init+0x210>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_GPIO_Init+0x304>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d025      	beq.n	8001574 <HAL_GPIO_Init+0x20c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a51      	ldr	r2, [pc, #324]	; (8001670 <HAL_GPIO_Init+0x308>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d01f      	beq.n	8001570 <HAL_GPIO_Init+0x208>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a50      	ldr	r2, [pc, #320]	; (8001674 <HAL_GPIO_Init+0x30c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d019      	beq.n	800156c <HAL_GPIO_Init+0x204>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4f      	ldr	r2, [pc, #316]	; (8001678 <HAL_GPIO_Init+0x310>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d013      	beq.n	8001568 <HAL_GPIO_Init+0x200>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4e      	ldr	r2, [pc, #312]	; (800167c <HAL_GPIO_Init+0x314>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00d      	beq.n	8001564 <HAL_GPIO_Init+0x1fc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4d      	ldr	r2, [pc, #308]	; (8001680 <HAL_GPIO_Init+0x318>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x1f8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_GPIO_Init+0x1f4>
 8001558:	2307      	movs	r3, #7
 800155a:	e00e      	b.n	800157a <HAL_GPIO_Init+0x212>
 800155c:	2308      	movs	r3, #8
 800155e:	e00c      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001560:	2306      	movs	r3, #6
 8001562:	e00a      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001564:	2305      	movs	r3, #5
 8001566:	e008      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001568:	2304      	movs	r3, #4
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x212>
 800156c:	2303      	movs	r3, #3
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001578:	2300      	movs	r3, #0
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158a:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_GPIO_Init+0x300>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_GPIO_Init+0x320>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015bc:	4a32      	ldr	r2, [pc, #200]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e6:	4a28      	ldr	r2, [pc, #160]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_GPIO_Init+0x320>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_GPIO_Init+0x320>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163a:	4a13      	ldr	r2, [pc, #76]	; (8001688 <HAL_GPIO_Init+0x320>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f ae91 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	48001000 	.word	0x48001000
 800167c:	48001400 	.word	0x48001400
 8001680:	48001800 	.word	0x48001800
 8001684:	48001c00 	.word	0x48001c00
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e001      	b.n	80016ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4013      	ands	r3, r2
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43d9      	mvns	r1, r3
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	400b      	ands	r3, r1
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e081      	b.n	8001836 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff f9e8 	bl	8000b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e006      	b.n	80017a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d104      	bne.n	80017ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69d9      	ldr	r1, [r3, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b20      	cmp	r3, #32
 8001852:	d138      	bne.n	80018c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800185e:	2302      	movs	r3, #2
 8001860:	e032      	b.n	80018c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2224      	movs	r2, #36	; 0x24
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001890:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2220      	movs	r2, #32
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
  }
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	d139      	bne.n	800195e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e033      	b.n	8001960 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2224      	movs	r2, #36	; 0x24
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001926:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800195e:	2302      	movs	r3, #2
  }
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	b08f      	sub	sp, #60	; 0x3c
 8001970:	af0a      	add	r7, sp, #40	; 0x28
 8001972:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e116      	b.n	8001bac <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f00a fb49 	bl	800c030 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f007 f85e 	bl	8008a7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	687e      	ldr	r6, [r7, #4]
 80019ca:	466d      	mov	r5, sp
 80019cc:	f106 0410 	add.w	r4, r6, #16
 80019d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019e0:	1d33      	adds	r3, r6, #4
 80019e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f006 ff71 	bl	80088cc <USB_CoreInit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0d7      	b.n	8001bac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f007 f84c 	bl	8008aa0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e04a      	b.n	8001aa4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	333d      	adds	r3, #61	; 0x3d
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	333c      	adds	r3, #60	; 0x3c
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	b298      	uxth	r0, r3
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	3344      	adds	r3, #68	; 0x44
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3340      	adds	r3, #64	; 0x40
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	3348      	adds	r3, #72	; 0x48
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	334c      	adds	r3, #76	; 0x4c
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a8a:	7bfa      	ldrb	r2, [r7, #15]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	3354      	adds	r3, #84	; 0x54
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3af      	bcc.n	8001a0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e044      	b.n	8001b3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3b5      	bcc.n	8001ab4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	687e      	ldr	r6, [r7, #4]
 8001b50:	466d      	mov	r5, sp
 8001b52:	f106 0410 	add.w	r4, r6, #16
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b66:	1d33      	adds	r3, r6, #4
 8001b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6a:	6838      	ldr	r0, [r7, #0]
 8001b6c:	f006 ffe4 	bl	8008b38 <USB_DevInit>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e014      	b.n	8001bac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f001 f882 	bl	8002ca4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f008 f86c 	bl	8009c82 <USB_DevDisconnect>

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_PCD_Start+0x1c>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e01c      	b.n	8001c0a <HAL_PCD_Start+0x56>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f006 ff33 	bl	8008a5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f008 f820 	bl	8009c40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c12:	b590      	push	{r4, r7, lr}
 8001c14:	b08d      	sub	sp, #52	; 0x34
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f008 f8de 	bl	8009dea <USB_GetMode>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 847e 	bne.w	8002532 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f008 f842 	bl	8009cc4 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8474 	beq.w	8002530 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f008 f82f 	bl	8009cc4 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d107      	bne.n	8001c80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f002 0202 	and.w	r2, r2, #2
 8001c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f008 f81d 	bl	8009cc4 <USB_ReadInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d161      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0210 	bic.w	r2, r2, #16
 8001ca2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f003 020f 	and.w	r2, r3, #15
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	0c5b      	lsrs	r3, r3, #17
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d124      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d035      	beq.n	8001d48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	6a38      	ldr	r0, [r7, #32]
 8001cf0:	f007 fe54 	bl	800999c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d00:	441a      	add	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d12:	441a      	add	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	621a      	str	r2, [r3, #32]
 8001d18:	e016      	b.n	8001d48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	0c5b      	lsrs	r3, r3, #17
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d110      	bne.n	8001d48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6a38      	ldr	r0, [r7, #32]
 8001d32:	f007 fe33 	bl	800999c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	6a1a      	ldr	r2, [r3, #32]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d42:	441a      	add	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0210 	orr.w	r2, r2, #16
 8001d56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 ffb1 	bl	8009cc4 <USB_ReadInterrupts>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d6c:	f040 80a7 	bne.w	8001ebe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f007 ffb6 	bl	8009cea <USB_ReadDevAllOutEpInterrupt>
 8001d7e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d80:	e099      	b.n	8001eb6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 808e 	beq.w	8001eaa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f007 ffda 	bl	8009d52 <USB_ReadDevOutEPInterrupt>
 8001d9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db6:	461a      	mov	r2, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fe96 	bl	8002af0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2308      	movs	r3, #8
 8001dde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fed2 	bl	8002b8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2310      	movs	r3, #16
 8001e02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d030      	beq.n	8001e70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b80      	cmp	r3, #128	; 0x80
 8001e18:	d109      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	78db      	ldrb	r3, [r3, #3]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d108      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4619      	mov	r1, r3
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f00a fa2d 	bl	800c2b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e86:	461a      	mov	r2, r3
 8001e88:	2320      	movs	r3, #32
 8001e8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f47f af62 	bne.w	8001d82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f007 fefe 	bl	8009cc4 <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ed2:	f040 80a4 	bne.w	800201e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f007 ff1f 	bl	8009d1e <USB_ReadDevAllInEpInterrupt>
 8001ee0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ee6:	e096      	b.n	8002016 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 808b 	beq.w	800200a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f007 ff45 	bl	8009d8e <USB_ReadDevInEPInterrupt>
 8001f04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	2201      	movs	r2, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69f9      	ldr	r1, [r7, #28]
 8001f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f30:	4013      	ands	r3, r2
 8001f32:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f40:	461a      	mov	r2, r3
 8001f42:	2301      	movs	r3, #1
 8001f44:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f00a f91e 	bl	800c18e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f84:	461a      	mov	r2, r3
 8001f86:	2310      	movs	r3, #16
 8001f88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2340      	movs	r3, #64	; 0x40
 8001fa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb2:	6a38      	ldr	r0, [r7, #32]
 8001fb4:	f006 ff0c 	bl	8008dd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	3338      	adds	r3, #56	; 0x38
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f00a f97b 	bl	800c2dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fcea 	bl	80029de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	3301      	adds	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	f47f af65 	bne.w	8001ee8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f007 fe4e 	bl	8009cc4 <USB_ReadInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800202e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002032:	d122      	bne.n	800207a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800205a:	2100      	movs	r1, #0
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f00a fbad 	bl	800c7bc <HAL_PCDEx_LPM_Callback>
 8002062:	e002      	b.n	800206a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f00a f8ff 	bl	800c268 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f007 fe20 	bl	8009cc4 <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800208e:	d112      	bne.n	80020b6 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f00a f8bb 	bl	800c21c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80020b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f007 fe02 	bl	8009cc4 <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ca:	d121      	bne.n	8002110 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80020da:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d111      	bne.n	800210a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	f003 020f 	and.w	r2, r3, #15
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002100:	2101      	movs	r1, #1
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f00a fb5a 	bl	800c7bc <HAL_PCDEx_LPM_Callback>
 8002108:	e002      	b.n	8002110 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f00a f886 	bl	800c21c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f007 fdd5 	bl	8009cc4 <USB_ReadInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002124:	f040 80b5 	bne.w	8002292 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2110      	movs	r1, #16
 8002142:	4618      	mov	r0, r3
 8002144:	f006 fe44 	bl	8008dd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214c:	e046      	b.n	80021dc <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215a:	461a      	mov	r2, r3
 800215c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002160:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002172:	0151      	lsls	r1, r2, #5
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	440a      	add	r2, r1
 8002178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800217c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002180:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218e:	461a      	mov	r2, r3
 8002190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002194:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a6:	0151      	lsls	r1, r2, #5
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	440a      	add	r2, r1
 80021ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c6:	0151      	lsls	r1, r2, #5
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	440a      	add	r2, r1
 80021cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d8:	3301      	adds	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3b3      	bcc.n	800214e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80021f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002212:	f043 030b 	orr.w	r3, r3, #11
 8002216:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002228:	f043 030b 	orr.w	r3, r3, #11
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	e015      	b.n	800225c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800223e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002242:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002246:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002256:	f043 030b 	orr.w	r3, r3, #11
 800225a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800226e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f007 fde5 	bl	8009e4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f007 fd14 	bl	8009cc4 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a6:	d124      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f007 fdaa 	bl	8009e06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f006 fe07 	bl	8008eca <USB_GetDevSpeed>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681c      	ldr	r4, [r3, #0]
 80022c8:	f001 fbc4 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 80022cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4620      	mov	r0, r4
 80022d8:	f006 fb24 	bl	8008924 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f009 ff7e 	bl	800c1de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f007 fce4 	bl	8009cc4 <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b08      	cmp	r3, #8
 8002304:	d10a      	bne.n	800231c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f009 ff5b 	bl	800c1c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f002 0208 	and.w	r2, r2, #8
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f007 fccf 	bl	8009cc4 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d122      	bne.n	8002376 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	e014      	b.n	800236c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fb0b 	bl	800297c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3301      	adds	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002372:	429a      	cmp	r2, r3
 8002374:	d3e5      	bcc.n	8002342 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f007 fca2 	bl	8009cc4 <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d13b      	bne.n	8002404 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800238c:	2301      	movs	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	e02b      	b.n	80023ea <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3340      	adds	r3, #64	; 0x40
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d115      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da12      	bge.n	80023e4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	333f      	adds	r3, #63	; 0x3f
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 facc 	bl	800297c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	3301      	adds	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3ce      	bcc.n	8002392 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f007 fc5b 	bl	8009cc4 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002418:	d155      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800241a:	2301      	movs	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	e045      	b.n	80024ac <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d12e      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002448:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	da2b      	bge.n	80024a6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800245a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800245e:	429a      	cmp	r2, r3
 8002460:	d121      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a2:	6053      	str	r3, [r2, #4]
            break;
 80024a4:	e007      	b.n	80024b6 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	3301      	adds	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d3b4      	bcc.n	8002420 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f007 fbfa 	bl	8009cc4 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d10a      	bne.n	80024f2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f009 ff0f 	bl	800c300 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f007 fbe4 	bl	8009cc4 <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d115      	bne.n	8002532 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f009 feff 	bl	800c31c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	e000      	b.n	8002532 <HAL_PCD_IRQHandler+0x920>
      return;
 8002530:	bf00      	nop
    }
  }
}
 8002532:	3734      	adds	r7, #52	; 0x34
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}

08002538 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_PCD_SetAddress+0x1a>
 800254e:	2302      	movs	r3, #2
 8002550:	e013      	b.n	800257a <HAL_PCD_SetAddress+0x42>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f007 fb42 	bl	8009bf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	461a      	mov	r2, r3
 8002590:	4603      	mov	r3, r0
 8002592:	70fb      	strb	r3, [r7, #3]
 8002594:	460b      	mov	r3, r1
 8002596:	803b      	strh	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da0f      	bge.n	80025c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	3338      	adds	r3, #56	; 0x38
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	705a      	strb	r2, [r3, #1]
 80025c6:	e00f      	b.n	80025e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 020f 	and.w	r2, r3, #15
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	3304      	adds	r3, #4
 80025e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025f4:	883a      	ldrh	r2, [r7, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	78ba      	ldrb	r2, [r7, #2]
 80025fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	785b      	ldrb	r3, [r3, #1]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002612:	78bb      	ldrb	r3, [r7, #2]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d102      	bne.n	800261e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_PCD_EP_Open+0xaa>
 8002628:	2302      	movs	r3, #2
 800262a:	e00e      	b.n	800264a <HAL_PCD_EP_Open+0xc8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	4618      	mov	r0, r3
 800263c:	f006 fc64 	bl	8008f08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002648:	7afb      	ldrb	r3, [r7, #11]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800265e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002662:	2b00      	cmp	r3, #0
 8002664:	da0f      	bge.n	8002686 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 020f 	and.w	r2, r3, #15
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3338      	adds	r3, #56	; 0x38
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	705a      	strb	r2, [r3, #1]
 8002684:	e00f      	b.n	80026a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	3304      	adds	r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_PCD_EP_Close+0x6e>
 80026bc:	2302      	movs	r3, #2
 80026be:	e00e      	b.n	80026de <HAL_PCD_EP_Close+0x8c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f006 fca2 	bl	8009018 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	460b      	mov	r3, r1
 80026f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f6:	7afb      	ldrb	r3, [r7, #11]
 80026f8:	f003 020f 	and.w	r2, r3, #15
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	3304      	adds	r3, #4
 800270e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2200      	movs	r2, #0
 8002720:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	b2da      	uxtb	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	4618      	mov	r0, r3
 8002746:	f006 ff23 	bl	8009590 <USB_EP0StartXfer>
 800274a:	e005      	b.n	8002758 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6979      	ldr	r1, [r7, #20]
 8002752:	4618      	mov	r0, r3
 8002754:	f006 fd3c 	bl	80091d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 020f 	and.w	r2, r3, #15
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002784:	681b      	ldr	r3, [r3, #0]
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	460b      	mov	r3, r1
 80027a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	f003 020f 	and.w	r2, r3, #15
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	3338      	adds	r3, #56	; 0x38
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2201      	movs	r2, #1
 80027d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027de:	7afb      	ldrb	r3, [r7, #11]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f006 fece 	bl	8009590 <USB_EP0StartXfer>
 80027f4:	e005      	b.n	8002802 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6979      	ldr	r1, [r7, #20]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f006 fce7 	bl	80091d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d901      	bls.n	800282a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e04e      	b.n	80028c8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800282a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	da0f      	bge.n	8002852 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 020f 	and.w	r2, r3, #15
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	3338      	adds	r3, #56	; 0x38
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	705a      	strb	r2, [r3, #1]
 8002850:	e00d      	b.n	800286e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_PCD_EP_SetStall+0x82>
 800288a:	2302      	movs	r3, #2
 800288c:	e01c      	b.n	80028c8 <HAL_PCD_EP_SetStall+0xbc>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68f9      	ldr	r1, [r7, #12]
 800289c:	4618      	mov	r0, r3
 800289e:	f007 f8d5 	bl	8009a4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d108      	bne.n	80028be <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f007 fac7 	bl	8009e4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d901      	bls.n	80028ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e042      	b.n	8002974 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	da0f      	bge.n	8002916 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	3338      	adds	r3, #56	; 0x38
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	705a      	strb	r2, [r3, #1]
 8002914:	e00f      	b.n	8002936 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	3304      	adds	r3, #4
 800292e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_PCD_EP_ClrStall+0x86>
 8002952:	2302      	movs	r3, #2
 8002954:	e00e      	b.n	8002974 <HAL_PCD_EP_ClrStall+0xa4>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	4618      	mov	r0, r3
 8002966:	f007 f8df 	bl	8009b28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800298c:	2b00      	cmp	r3, #0
 800298e:	da0c      	bge.n	80029aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	3338      	adds	r3, #56	; 0x38
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	3304      	adds	r3, #4
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e00c      	b.n	80029c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 020f 	and.w	r2, r3, #15
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	3304      	adds	r3, #4
 80029c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f006 ff02 	bl	80097d4 <USB_EPStopXfer>
 80029d0:	4603      	mov	r3, r0
 80029d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029d4:	7afb      	ldrb	r3, [r7, #11]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	3338      	adds	r3, #56	; 0x38
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d901      	bls.n	8002a16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d902      	bls.n	8002a32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3303      	adds	r3, #3
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a3a:	e026      	b.n	8002a8a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d902      	bls.n	8002a58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	3303      	adds	r3, #3
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6919      	ldr	r1, [r3, #16]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f006 ff5b 	bl	8009928 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	441a      	add	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1a      	ldr	r2, [r3, #32]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	441a      	add	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d809      	bhi.n	8002ab4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d203      	bcs.n	8002ab4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1c3      	bne.n	8002a3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d811      	bhi.n	8002ae4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	6939      	ldr	r1, [r7, #16]
 8002adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	333c      	adds	r3, #60	; 0x3c
 8002b08:	3304      	adds	r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <PCD_EP_OutXfrComplete_int+0x98>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d124      	bne.n	8002b70 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b42:	6093      	str	r3, [r2, #8]
 8002b44:	e01a      	b.n	8002b7c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2320      	movs	r3, #32
 8002b60:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f009 faf5 	bl	800c158 <HAL_PCD_DataOutStageCallback>
 8002b6e:	e005      	b.n	8002b7c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f009 faee 	bl	800c158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	4f54310a 	.word	0x4f54310a

08002b8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	333c      	adds	r3, #60	; 0x3c
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <PCD_EP_OutSetupPacket_int+0x64>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d90e      	bls.n	8002be0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f009 faa7 	bl	800c134 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	4f54300a 	.word	0x4f54300a

08002bf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
 8002c00:	4613      	mov	r3, r2
 8002c02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c12:	883b      	ldrh	r3, [r7, #0]
 8002c14:	0419      	lsls	r1, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c20:	e028      	b.n	8002c74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e00d      	b.n	8002c52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3340      	adds	r3, #64	; 0x40
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	4413      	add	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3ec      	bcc.n	8002c36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c5c:	883b      	ldrh	r3, [r7, #0]
 8002c5e:	0418      	lsls	r0, r3, #16
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4302      	orrs	r2, r0
 8002c6c:	3340      	adds	r3, #64	; 0x40
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	f043 0303 	orr.w	r3, r3, #3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfc:	d102      	bne.n	8002d04 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d02:	e00b      	b.n	8002d1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002d04:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d12:	d102      	bne.n	8002d1a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d18:	e000      	b.n	8002d1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002d1a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40007000 	.word	0x40007000

08002d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d141      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d3a:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d46:	d131      	bne.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4e:	4a46      	ldr	r2, [pc, #280]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d58:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d60:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2232      	movs	r2, #50	; 0x32
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	4a3f      	ldr	r2, [pc, #252]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	0c9b      	lsrs	r3, r3, #18
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7e:	e002      	b.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d102      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f2      	bne.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9a:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da6:	d158      	bne.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e057      	b.n	8002e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dac:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db2:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dbc:	e04d      	b.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc4:	d141      	bne.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d131      	bne.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dda:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de4:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2232      	movs	r2, #50	; 0x32
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	0c9b      	lsrs	r3, r3, #18
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0a:	e002      	b.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1e:	d102      	bne.n	8002e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f2      	bne.n	8002e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d112      	bne.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e011      	b.n	8002e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e48:	e007      	b.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e58:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	431bde83 	.word	0x431bde83

08002e74 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e82:	6053      	str	r3, [r2, #4]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40007000 	.word	0x40007000

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f000 bc08 	b.w	80036b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea8:	4b96      	ldr	r3, [pc, #600]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb2:	4b94      	ldr	r3, [pc, #592]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80e4 	beq.w	8003092 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4c>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	f040 808b 	bne.w	8002fee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f040 8087 	bne.w	8002fee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ee0:	4b88      	ldr	r3, [pc, #544]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x64>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e3df      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	4b81      	ldr	r3, [pc, #516]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_RCC_OscConfig+0x7e>
 8002f08:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f10:	e005      	b.n	8002f1e <HAL_RCC_OscConfig+0x8a>
 8002f12:	4b7c      	ldr	r3, [pc, #496]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d223      	bcs.n	8002f6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fdf8 	bl	8003b1c <RCC_SetFlashLatencyFromMSIRange>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e3c0      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f36:	4b73      	ldr	r3, [pc, #460]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a72      	ldr	r2, [pc, #456]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b70      	ldr	r3, [pc, #448]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	496d      	ldr	r1, [pc, #436]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f54:	4b6b      	ldr	r3, [pc, #428]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	4968      	ldr	r1, [pc, #416]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e025      	b.n	8002fb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6a:	4b66      	ldr	r3, [pc, #408]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b63      	ldr	r3, [pc, #396]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4960      	ldr	r1, [pc, #384]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f88:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	495b      	ldr	r1, [pc, #364]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fdb8 	bl	8003b1c <RCC_SetFlashLatencyFromMSIRange>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e380      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb6:	f000 fcc1 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b51      	ldr	r3, [pc, #324]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4950      	ldr	r1, [pc, #320]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a4e      	ldr	r2, [pc, #312]	; (800310c <HAL_RCC_OscConfig+0x278>)
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <HAL_RCC_OscConfig+0x27c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe f832 	bl	8001044 <HAL_InitTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d052      	beq.n	8003090 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	e364      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d032      	beq.n	800305c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ff6:	4b43      	ldr	r3, [pc, #268]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a42      	ldr	r2, [pc, #264]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003002:	f7fe f86f 	bl	80010e4 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800300a:	f7fe f86b 	bl	80010e4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e34d      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a35      	ldr	r2, [pc, #212]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b33      	ldr	r3, [pc, #204]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4930      	ldr	r1, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003046:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	492b      	ldr	r1, [pc, #172]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	e01a      	b.n	8003092 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a28      	ldr	r2, [pc, #160]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003068:	f7fe f83c 	bl	80010e4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003070:	f7fe f838 	bl	80010e4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e31a      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1dc>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d073      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x21c>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d10e      	bne.n	80030c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d063      	beq.n	8003184 <HAL_RCC_OscConfig+0x2f0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d15f      	bne.n	8003184 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e2f7      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x24c>
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e025      	b.n	800312c <HAL_RCC_OscConfig+0x298>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d114      	bne.n	8003114 <HAL_RCC_OscConfig+0x280>
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a02      	ldr	r2, [pc, #8]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e013      	b.n	800312c <HAL_RCC_OscConfig+0x298>
 8003104:	40021000 	.word	0x40021000
 8003108:	0800c94c 	.word	0x0800c94c
 800310c:	20000000 	.word	0x20000000
 8003110:	20000004 	.word	0x20000004
 8003114:	4ba0      	ldr	r3, [pc, #640]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a9f      	ldr	r2, [pc, #636]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b9d      	ldr	r3, [pc, #628]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a9c      	ldr	r2, [pc, #624]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fd ffd6 	bl	80010e4 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fd ffd2 	bl	80010e4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e2b4      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314e:	4b92      	ldr	r3, [pc, #584]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x2a8>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fd ffc2 	bl	80010e4 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd ffbe 	bl	80010e4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e2a0      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003176:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x2d0>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d060      	beq.n	8003254 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_OscConfig+0x310>
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d119      	bne.n	80031d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d116      	bne.n	80031d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a4:	4b7c      	ldr	r3, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x328>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e27d      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	4973      	ldr	r1, [pc, #460]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d0:	e040      	b.n	8003254 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d023      	beq.n	8003222 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031da:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fd ff7d 	bl	80010e4 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ee:	f7fd ff79 	bl	80010e4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e25b      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003200:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b62      	ldr	r3, [pc, #392]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	495f      	ldr	r1, [pc, #380]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
 8003220:	e018      	b.n	8003254 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fd ff59 	bl	80010e4 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7fd ff55 	bl	80010e4 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e237      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d03c      	beq.n	80032da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	4a4a      	ldr	r2, [pc, #296]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fd ff34 	bl	80010e4 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7fd ff30 	bl	80010e4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e212      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ef      	beq.n	8003280 <HAL_RCC_OscConfig+0x3ec>
 80032a0:	e01b      	b.n	80032da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a8:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fd ff17 	bl	80010e4 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fd ff13 	bl	80010e4 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1f5      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1ef      	bne.n	80032ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80a6 	beq.w	8003434 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10d      	bne.n	8003314 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003302:	6593      	str	r3, [r2, #88]	; 0x58
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003310:	2301      	movs	r3, #1
 8003312:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCC_OscConfig+0x508>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d118      	bne.n	8003352 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003320:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCC_OscConfig+0x508>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1d      	ldr	r2, [pc, #116]	; (800339c <HAL_RCC_OscConfig+0x508>)
 8003326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332c:	f7fd feda 	bl	80010e4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003334:	f7fd fed6 	bl	80010e4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e1b8      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_RCC_OscConfig+0x508>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d108      	bne.n	800336c <HAL_RCC_OscConfig+0x4d8>
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800336a:	e029      	b.n	80033c0 <HAL_RCC_OscConfig+0x52c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b05      	cmp	r3, #5
 8003372:	d115      	bne.n	80033a0 <HAL_RCC_OscConfig+0x50c>
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	4a03      	ldr	r2, [pc, #12]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x52c>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	40007000 	.word	0x40007000
 80033a0:	4b9d      	ldr	r3, [pc, #628]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	4a9c      	ldr	r2, [pc, #624]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b0:	4b99      	ldr	r3, [pc, #612]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4a98      	ldr	r2, [pc, #608]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d016      	beq.n	80033f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fd fe8c 	bl	80010e4 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fd fe88 	bl	80010e4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e168      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	4b8c      	ldr	r3, [pc, #560]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ed      	beq.n	80033d0 <HAL_RCC_OscConfig+0x53c>
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fd fe75 	bl	80010e4 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd fe71 	bl	80010e4 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e151      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003414:	4b80      	ldr	r3, [pc, #512]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ed      	bne.n	80033fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003422:	7ffb      	ldrb	r3, [r7, #31]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003428:	4b7b      	ldr	r3, [pc, #492]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	4a7a      	ldr	r2, [pc, #488]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 800342e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003432:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03c      	beq.n	80034ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01c      	beq.n	8003482 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003448:	4b73      	ldr	r3, [pc, #460]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 800344a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800344e:	4a72      	ldr	r2, [pc, #456]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fd fe44 	bl	80010e4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003460:	f7fd fe40 	bl	80010e4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e122      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003472:	4b69      	ldr	r3, [pc, #420]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ef      	beq.n	8003460 <HAL_RCC_OscConfig+0x5cc>
 8003480:	e01b      	b.n	80034ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003482:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003484:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003488:	4a63      	ldr	r2, [pc, #396]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fd fe27 	bl	80010e4 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800349a:	f7fd fe23 	bl	80010e4 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e105      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034ac:	4b5a      	ldr	r3, [pc, #360]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80034ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ef      	bne.n	800349a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80f9 	beq.w	80036b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	f040 80cf 	bne.w	800366c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034ce:	4b52      	ldr	r3, [pc, #328]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f003 0203 	and.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	429a      	cmp	r2, r3
 80034e0:	d12c      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	3b01      	subs	r3, #1
 80034ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d123      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d11b      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d113      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	3b01      	subs	r3, #1
 8003522:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d109      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	3b01      	subs	r3, #1
 8003536:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d071      	beq.n	8003620 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d068      	beq.n	8003614 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003542:	4b35      	ldr	r3, [pc, #212]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800354e:	4b32      	ldr	r3, [pc, #200]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0ac      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800355e:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003568:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800356a:	f7fd fdbb 	bl	80010e4 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd fdb7 	bl	80010e4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e099      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_RCC_OscConfig+0x788>)
 8003596:	4013      	ands	r3, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035a0:	3a01      	subs	r2, #1
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	4311      	orrs	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035aa:	0212      	lsls	r2, r2, #8
 80035ac:	4311      	orrs	r1, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035b2:	0852      	lsrs	r2, r2, #1
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0552      	lsls	r2, r2, #21
 80035b8:	4311      	orrs	r1, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035be:	0852      	lsrs	r2, r2, #1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0652      	lsls	r2, r2, #25
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ca:	06d2      	lsls	r2, r2, #27
 80035cc:	430a      	orrs	r2, r1
 80035ce:	4912      	ldr	r1, [pc, #72]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035d4:	4b10      	ldr	r3, [pc, #64]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80035da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 80035e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ec:	f7fd fd7a 	bl	80010e4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fd fd76 	bl	80010e4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e058      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <HAL_RCC_OscConfig+0x784>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003612:	e050      	b.n	80036b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e04f      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
 8003618:	40021000 	.word	0x40021000
 800361c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d144      	bne.n	80036b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003642:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003644:	f7fd fd4e 	bl	80010e4 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fd4a 	bl	80010e4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e02c      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x7b8>
 800366a:	e024      	b.n	80036b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d01f      	beq.n	80036b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 8003678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fd fd31 	bl	80010e4 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7fd fd2d 	bl	80010e4 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e00f      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	4905      	ldr	r1, [pc, #20]	; (80036c0 <HAL_RCC_OscConfig+0x82c>)
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_OscConfig+0x830>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60cb      	str	r3, [r1, #12]
 80036b0:	e001      	b.n	80036b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	feeefffc 	.word	0xfeeefffc

080036c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e11d      	b.n	800391c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b90      	ldr	r3, [pc, #576]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b8d      	ldr	r3, [pc, #564]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 020f 	bic.w	r2, r3, #15
 80036f6:	498b      	ldr	r1, [pc, #556]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b89      	ldr	r3, [pc, #548]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e105      	b.n	800391c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b81      	ldr	r3, [pc, #516]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003728:	429a      	cmp	r2, r3
 800372a:	d908      	bls.n	800373e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b7e      	ldr	r3, [pc, #504]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	497b      	ldr	r1, [pc, #492]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d079      	beq.n	800383e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d11e      	bne.n	8003790 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003752:	4b75      	ldr	r3, [pc, #468]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0dc      	b.n	800391c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003762:	f000 fa35 	bl	8003bd0 <RCC_GetSysClockFreqFromPLLSource>
 8003766:	4603      	mov	r3, r0
 8003768:	4a70      	ldr	r2, [pc, #448]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d946      	bls.n	80037fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800376e:	4b6e      	ldr	r3, [pc, #440]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d140      	bne.n	80037fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800377a:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003788:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e035      	b.n	80037fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003798:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d115      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0b9      	b.n	800391c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037b0:	4b5d      	ldr	r3, [pc, #372]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0ad      	b.n	800391c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0a5      	b.n	800391c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80037d0:	f000 f8b4 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4a55      	ldr	r2, [pc, #340]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d90f      	bls.n	80037fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037dc:	4b52      	ldr	r3, [pc, #328]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037e8:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f0:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80037f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037fc:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 0203 	bic.w	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4947      	ldr	r1, [pc, #284]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fd fc69 	bl	80010e4 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003814:	e00a      	b.n	800382c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003816:	f7fd fc65 	bl	80010e4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e077      	b.n	800391c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382c:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 020c 	and.w	r2, r3, #12
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	429a      	cmp	r2, r3
 800383c:	d1eb      	bne.n	8003816 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d105      	bne.n	8003850 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003844:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a37      	ldr	r2, [pc, #220]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800384a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003868:	429a      	cmp	r2, r3
 800386a:	d208      	bcs.n	800387e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386c:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	492b      	ldr	r1, [pc, #172]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d210      	bcs.n	80038ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388c:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 020f 	bic.w	r2, r3, #15
 8003894:	4923      	ldr	r1, [pc, #140]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	4313      	orrs	r3, r2
 800389a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e036      	b.n	800391c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4918      	ldr	r1, [pc, #96]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4910      	ldr	r1, [pc, #64]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ec:	f000 f826 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	490c      	ldr	r1, [pc, #48]	; (8003930 <HAL_RCC_ClockConfig+0x268>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
 8003908:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 800390a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd fb97 	bl	8001044 <HAL_InitTick>
 8003916:	4603      	mov	r3, r0
 8003918:	73fb      	strb	r3, [r7, #15]

  return status;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40022000 	.word	0x40022000
 8003928:	40021000 	.word	0x40021000
 800392c:	04c4b400 	.word	0x04c4b400
 8003930:	0800c94c 	.word	0x0800c94c
 8003934:	20000000 	.word	0x20000000
 8003938:	20000004 	.word	0x20000004

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394a:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003954:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x34>
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d121      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d11e      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003970:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800397c:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800397e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e005      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003998:	4a2b      	ldr	r2, [pc, #172]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x10c>)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e004      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80039c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d134      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d003      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0xac>
 80039e0:	e005      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80039e4:	617b      	str	r3, [r7, #20]
      break;
 80039e6:	e005      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80039ea:	617b      	str	r3, [r7, #20]
      break;
 80039ec:	e002      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	617b      	str	r3, [r7, #20]
      break;
 80039f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	3301      	adds	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	fb03 f202 	mul.w	r2, r3, r2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	0e5b      	lsrs	r3, r3, #25
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	3301      	adds	r3, #1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a34:	69bb      	ldr	r3, [r7, #24]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	0800c964 	.word	0x0800c964
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	007a1200 	.word	0x007a1200

08003a54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000000 	.word	0x20000000

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4904      	ldr	r1, [pc, #16]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	0800c95c 	.word	0x0800c95c

08003a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a9c:	f7ff ffda 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0adb      	lsrs	r3, r3, #11
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	0800c95c 	.word	0x0800c95c

08003ac4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_EnableCSS+0x1c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <HAL_RCC_EnableCSS+0x1c>)
 8003ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ad2:	6013      	str	r3, [r2, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af4:	d105      	bne.n	8003b02 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003af6:	f000 f809 	bl	8003b0c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003afa:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b00:	621a      	str	r2, [r3, #32]
  }
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000

08003b0c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b34:	f7ff f8da 	bl	8002cec <HAL_PWREx_GetVoltageRange>
 8003b38:	6178      	str	r0, [r7, #20]
 8003b3a:	e014      	b.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6593      	str	r3, [r2, #88]	; 0x58
 8003b48:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b54:	f7ff f8ca 	bl	8002cec <HAL_PWREx_GetVoltageRange>
 8003b58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6c:	d10b      	bne.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d913      	bls.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2ba0      	cmp	r3, #160	; 0xa0
 8003b78:	d902      	bls.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	e00d      	b.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b80:	2301      	movs	r3, #1
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	e00a      	b.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b7f      	cmp	r3, #127	; 0x7f
 8003b8a:	d902      	bls.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e004      	b.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b70      	cmp	r3, #112	; 0x70
 8003b96:	d101      	bne.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b98:	2301      	movs	r3, #1
 8003b9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 020f 	bic.w	r2, r3, #15
 8003ba4:	4909      	ldr	r1, [pc, #36]	; (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40022000 	.word	0x40022000

08003bd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d00b      	beq.n	8003bfe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d825      	bhi.n	8003c38 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d008      	beq.n	8003c04 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d11f      	bne.n	8003c38 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bfa:	613b      	str	r3, [r7, #16]
    break;
 8003bfc:	e01f      	b.n	8003c3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003bfe:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003c00:	613b      	str	r3, [r7, #16]
    break;
 8003c02:	e01c      	b.n	8003c3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c04:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e005      	b.n	8003c2c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003c2c:	4a1a      	ldr	r2, [pc, #104]	; (8003c98 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c34:	613b      	str	r3, [r7, #16]
    break;
 8003c36:	e002      	b.n	8003c3e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
    break;
 8003c3c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	3301      	adds	r3, #1
 8003c4a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	fb03 f202 	mul.w	r2, r3, r2
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0e5b      	lsrs	r3, r3, #25
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c7e:	683b      	ldr	r3, [r7, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	007a1200 	.word	0x007a1200
 8003c98:	0800c964 	.word	0x0800c964

08003c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca8:	2300      	movs	r3, #0
 8003caa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d040      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d02a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d825      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d026      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cc8:	2b60      	cmp	r3, #96	; 0x60
 8003cca:	d821      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d006      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d81d      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d010      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003cdc:	e018      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cde:	4b89      	ldr	r3, [pc, #548]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a88      	ldr	r2, [pc, #544]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cea:	e015      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 fa24 	bl	8005140 <RCCEx_PLLSAI1_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cfc:	e00c      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3320      	adds	r3, #32
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 fb0f 	bl	8005328 <RCCEx_PLLSAI2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d0e:	e003      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	74fb      	strb	r3, [r7, #19]
      break;
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10b      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1e:	4b79      	ldr	r3, [pc, #484]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d24:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2c:	4975      	ldr	r1, [pc, #468]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d34:	e001      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d047      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d030      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	d82a      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5a:	d02a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d60:	d824      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d008      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d81e      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d010      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d78:	e018      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d7a:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a61      	ldr	r2, [pc, #388]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d86:	e015      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 f9d6 	bl	8005140 <RCCEx_PLLSAI1_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d98:	e00c      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3320      	adds	r3, #32
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 fac1 	bl	8005328 <RCCEx_PLLSAI2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	74fb      	strb	r3, [r7, #19]
      break;
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dba:	4b52      	ldr	r3, [pc, #328]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	494e      	ldr	r1, [pc, #312]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dd0:	e001      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd2:	7cfb      	ldrb	r3, [r7, #19]
 8003dd4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 809f 	beq.w	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de4:	2300      	movs	r3, #0
 8003de6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003de8:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	4a40      	ldr	r2, [pc, #256]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e16:	2301      	movs	r3, #1
 8003e18:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a3a      	ldr	r2, [pc, #232]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e26:	f7fd f95d 	bl	80010e4 <HAL_GetTick>
 8003e2a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e2c:	e009      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fd f959 	bl	80010e4 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d902      	bls.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	74fb      	strb	r3, [r7, #19]
        break;
 8003e40:	e005      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ef      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d15b      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01f      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d019      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e9e:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d016      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd f918 	bl	80010e4 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fd f914 	bl	80010e4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d902      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ece:	e006      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ec      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003efc:	e008      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	74bb      	strb	r3, [r7, #18]
 8003f02:	e005      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f10:	7c7b      	ldrb	r3, [r7, #17]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f16:	4ba0      	ldr	r3, [pc, #640]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	4a9f      	ldr	r2, [pc, #636]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2e:	4b9a      	ldr	r3, [pc, #616]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f023 0203 	bic.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	4996      	ldr	r1, [pc, #600]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f50:	4b91      	ldr	r3, [pc, #580]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f023 020c 	bic.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	498e      	ldr	r1, [pc, #568]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f72:	4b89      	ldr	r3, [pc, #548]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	4985      	ldr	r1, [pc, #532]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f94:	4b80      	ldr	r3, [pc, #512]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa2:	497d      	ldr	r1, [pc, #500]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fb6:	4b78      	ldr	r3, [pc, #480]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc4:	4974      	ldr	r1, [pc, #464]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe6:	496c      	ldr	r1, [pc, #432]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffa:	4b67      	ldr	r3, [pc, #412]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004008:	4963      	ldr	r1, [pc, #396]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402a:	495b      	ldr	r1, [pc, #364]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800403e:	4b56      	ldr	r3, [pc, #344]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	4952      	ldr	r1, [pc, #328]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004060:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	494a      	ldr	r1, [pc, #296]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004082:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	4941      	ldr	r1, [pc, #260]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040a4:	4b3c      	ldr	r3, [pc, #240]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040aa:	f023 0203 	bic.w	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b2:	4939      	ldr	r1, [pc, #228]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d028      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d4:	4930      	ldr	r1, [pc, #192]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e6:	4b2c      	ldr	r3, [pc, #176]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f0:	60d3      	str	r3, [r2, #12]
 80040f2:	e011      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	2101      	movs	r1, #1
 8004104:	4618      	mov	r0, r3
 8004106:	f001 f81b 	bl	8005140 <RCCEx_PLLSAI1_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d04d      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412c:	d108      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800412e:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004130:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800413a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800413e:	e012      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004140:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004146:	4a14      	ldr	r2, [pc, #80]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800415e:	490e      	ldr	r1, [pc, #56]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800416a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416e:	d106      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a08      	ldr	r2, [pc, #32]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417a:	60d3      	str	r3, [r2, #12]
 800417c:	e020      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004186:	d109      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a02      	ldr	r2, [pc, #8]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004192:	60d3      	str	r3, [r2, #12]
 8004194:	e014      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2101      	movs	r1, #1
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 ffc7 	bl	8005140 <RCCEx_PLLSAI1_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d028      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041cc:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041da:	4947      	ldr	r1, [pc, #284]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ea:	d106      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ec:	4b42      	ldr	r3, [pc, #264]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a41      	ldr	r2, [pc, #260]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f6:	60d3      	str	r3, [r2, #12]
 80041f8:	e011      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004202:	d10c      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	2101      	movs	r1, #1
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ff98 	bl	8005140 <RCCEx_PLLSAI1_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01e      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800422a:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423a:	492f      	ldr	r1, [pc, #188]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424c:	d10c      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	2102      	movs	r1, #2
 8004254:	4618      	mov	r0, r3
 8004256:	f000 ff73 	bl	8005140 <RCCEx_PLLSAI1_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800427a:	f023 0204 	bic.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004284:	491c      	ldr	r1, [pc, #112]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800429a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800429e:	f023 0218 	bic.w	r2, r3, #24
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	4913      	ldr	r1, [pc, #76]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d017      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042cc:	490a      	ldr	r1, [pc, #40]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042de:	d105      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000

080042fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430e:	d13e      	bne.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004310:	4bb6      	ldr	r3, [pc, #728]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004322:	d028      	beq.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800432a:	f200 86f4 	bhi.w	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004334:	d005      	beq.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433c:	d00e      	beq.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800433e:	f000 beea 	b.w	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004342:	4baa      	ldr	r3, [pc, #680]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	f040 86e4 	bne.w	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8004352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004356:	61fb      	str	r3, [r7, #28]
      break;
 8004358:	f000 bedf 	b.w	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800435c:	4ba3      	ldr	r3, [pc, #652]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	f040 86d9 	bne.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800436c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004370:	61fb      	str	r3, [r7, #28]
      break;
 8004372:	f000 bed4 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004376:	4b9d      	ldr	r3, [pc, #628]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004382:	f040 86ce 	bne.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8004386:	4b9a      	ldr	r3, [pc, #616]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004388:	61fb      	str	r3, [r7, #28]
      break;
 800438a:	f000 beca 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800438e:	4b97      	ldr	r3, [pc, #604]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d036      	beq.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d840      	bhi.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d003      	beq.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d020      	beq.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80043b0:	e039      	b.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80043b2:	4b8e      	ldr	r3, [pc, #568]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d116      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80043be:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80043ca:	4b88      	ldr	r3, [pc, #544]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	e005      	b.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80043d6:	4b85      	ldr	r3, [pc, #532]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	4a84      	ldr	r2, [pc, #528]	; (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80043e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80043ea:	e01f      	b.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
      break;
 80043f0:	e01c      	b.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043f2:	4b7e      	ldr	r3, [pc, #504]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fe:	d102      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004400:	4b7d      	ldr	r3, [pc, #500]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004402:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004404:	e012      	b.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
      break;
 800440a:	e00f      	b.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800440c:	4b77      	ldr	r3, [pc, #476]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004418:	d102      	bne.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800441a:	4b78      	ldr	r3, [pc, #480]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800441c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800441e:	e005      	b.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]
      break;
 8004424:	e002      	b.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
      break;
 800442a:	bf00      	nop
    }

    switch(PeriphClk)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004432:	f000 8606 	beq.w	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800443c:	f200 8673 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004446:	f000 8469 	beq.w	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004450:	f200 8669 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	f000 8531 	beq.w	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004464:	f200 865f 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800446e:	f000 8187 	beq.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004478:	f200 8655 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004482:	f000 80cd 	beq.w	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800448c:	f200 864b 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004496:	f000 8430 	beq.w	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	f200 8641 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044aa:	f000 83e4 	beq.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b4:	f200 8637 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044be:	f000 80af 	beq.w	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c8:	f200 862d 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	f000 809d 	beq.w	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044dc:	f200 8623 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e6:	f000 808b 	beq.w	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f0:	f200 8619 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fa:	f000 8554 	beq.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004504:	f200 860f 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450e:	f000 8500 	beq.w	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004518:	f200 8605 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004522:	f000 84a1 	beq.w	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452c:	f200 85fb 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	f000 846c 	beq.w	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	f200 85f3 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b20      	cmp	r3, #32
 8004544:	d84c      	bhi.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 85ec 	beq.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3b01      	subs	r3, #1
 8004552:	2b1f      	cmp	r3, #31
 8004554:	f200 85e7 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004975 	.word	0x08004975
 8004564:	080049e3 	.word	0x080049e3
 8004568:	08005127 	.word	0x08005127
 800456c:	08004a77 	.word	0x08004a77
 8004570:	08005127 	.word	0x08005127
 8004574:	08005127 	.word	0x08005127
 8004578:	08005127 	.word	0x08005127
 800457c:	08004aef 	.word	0x08004aef
 8004580:	08005127 	.word	0x08005127
 8004584:	08005127 	.word	0x08005127
 8004588:	08005127 	.word	0x08005127
 800458c:	08005127 	.word	0x08005127
 8004590:	08005127 	.word	0x08005127
 8004594:	08005127 	.word	0x08005127
 8004598:	08005127 	.word	0x08005127
 800459c:	08004b73 	.word	0x08004b73
 80045a0:	08005127 	.word	0x08005127
 80045a4:	08005127 	.word	0x08005127
 80045a8:	08005127 	.word	0x08005127
 80045ac:	08005127 	.word	0x08005127
 80045b0:	08005127 	.word	0x08005127
 80045b4:	08005127 	.word	0x08005127
 80045b8:	08005127 	.word	0x08005127
 80045bc:	08005127 	.word	0x08005127
 80045c0:	08005127 	.word	0x08005127
 80045c4:	08005127 	.word	0x08005127
 80045c8:	08005127 	.word	0x08005127
 80045cc:	08005127 	.word	0x08005127
 80045d0:	08005127 	.word	0x08005127
 80045d4:	08005127 	.word	0x08005127
 80045d8:	08005127 	.word	0x08005127
 80045dc:	08004bf5 	.word	0x08004bf5
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	f000 83e8 	beq.w	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80045e8:	f000 bd9d 	b.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045ec:	40021000 	.word	0x40021000
 80045f0:	0003d090 	.word	0x0003d090
 80045f4:	0800c964 	.word	0x0800c964
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004606:	f000 ff83 	bl	8005510 <RCCEx_GetSAIxPeriphCLKFreq>
 800460a:	61f8      	str	r0, [r7, #28]
      break;
 800460c:	f000 bd8e 	b.w	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004616:	f000 ff7b 	bl	8005510 <RCCEx_GetSAIxPeriphCLKFreq>
 800461a:	61f8      	str	r0, [r7, #28]
      break;
 800461c:	f000 bd86 	b.w	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004620:	4b9a      	ldr	r3, [pc, #616]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004632:	d015      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800463a:	f200 8092 	bhi.w	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004644:	d029      	beq.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464c:	f200 8089 	bhi.w	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d07b      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800465c:	d04a      	beq.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800465e:	e080      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004660:	4b8a      	ldr	r3, [pc, #552]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d17d      	bne.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800466c:	4b87      	ldr	r3, [pc, #540]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004678:	4b84      	ldr	r3, [pc, #528]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	e005      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004684:	4b81      	ldr	r3, [pc, #516]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	4a7f      	ldr	r2, [pc, #508]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004696:	61fb      	str	r3, [r7, #28]
          break;
 8004698:	e066      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800469a:	4b7c      	ldr	r3, [pc, #496]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046a6:	d162      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80046a8:	4b78      	ldr	r3, [pc, #480]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b4:	d15b      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80046b6:	4b75      	ldr	r3, [pc, #468]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	fb03 f202 	mul.w	r2, r3, r2
 80046ca:	4b70      	ldr	r3, [pc, #448]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	3301      	adds	r3, #1
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80046dc:	4b6b      	ldr	r3, [pc, #428]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	0d5b      	lsrs	r3, r3, #21
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	61fb      	str	r3, [r7, #28]
          break;
 80046f2:	e03c      	b.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80046f4:	4b65      	ldr	r3, [pc, #404]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004700:	d138      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004702:	4b62      	ldr	r3, [pc, #392]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470e:	d131      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004710:	4b5e      	ldr	r3, [pc, #376]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	fb03 f202 	mul.w	r2, r3, r2
 8004724:	4b59      	ldr	r3, [pc, #356]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	3301      	adds	r3, #1
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004736:	4b55      	ldr	r3, [pc, #340]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	0d5b      	lsrs	r3, r3, #21
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	3301      	adds	r3, #1
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	61fb      	str	r3, [r7, #28]
          break;
 800474c:	e012      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800474e:	4b4f      	ldr	r3, [pc, #316]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b02      	cmp	r3, #2
 800475a:	d10e      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800475c:	4b4d      	ldr	r3, [pc, #308]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800475e:	61fb      	str	r3, [r7, #28]
          break;
 8004760:	e00b      	b.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004762:	bf00      	nop
 8004764:	f000 bce2 	b.w	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004768:	bf00      	nop
 800476a:	f000 bcdf 	b.w	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800476e:	bf00      	nop
 8004770:	f000 bcdc 	b.w	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004774:	bf00      	nop
 8004776:	f000 bcd9 	b.w	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800477a:	bf00      	nop
        break;
 800477c:	f000 bcd6 	b.w	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004780:	4b42      	ldr	r3, [pc, #264]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800478e:	d13d      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004790:	4b3e      	ldr	r3, [pc, #248]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800479c:	f040 84c5 	bne.w	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80047a0:	4b3a      	ldr	r3, [pc, #232]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ac:	f040 84bd 	bne.w	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047b0:	4b36      	ldr	r3, [pc, #216]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ba:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	fb03 f202 	mul.w	r2, r3, r2
 80047c4:	4b31      	ldr	r3, [pc, #196]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	3301      	adds	r3, #1
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80047d6:	4b2d      	ldr	r3, [pc, #180]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	0edb      	lsrs	r3, r3, #27
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80047f4:	2311      	movs	r3, #17
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e001      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80047fa:	2307      	movs	r3, #7
 80047fc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	61fb      	str	r3, [r7, #28]
      break;
 8004808:	f000 bc8f 	b.w	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800480c:	4b1f      	ldr	r3, [pc, #124]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800481e:	d016      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004826:	f200 809b 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004830:	d032      	beq.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004838:	f200 8092 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8084 	beq.w	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800484a:	d052      	beq.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800484c:	e088      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	f040 8084 	bne.w	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	e005      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	4a03      	ldr	r2, [pc, #12]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	61fb      	str	r3, [r7, #28]
          break;
 8004888:	e06c      	b.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	0800c964 	.word	0x0800c964
 8004894:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004898:	4ba5      	ldr	r3, [pc, #660]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a4:	d160      	bne.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80048a6:	4ba2      	ldr	r3, [pc, #648]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b2:	d159      	bne.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80048b4:	4b9e      	ldr	r3, [pc, #632]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048be:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	fb03 f202 	mul.w	r2, r3, r2
 80048c8:	4b99      	ldr	r3, [pc, #612]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	3301      	adds	r3, #1
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80048da:	4b95      	ldr	r3, [pc, #596]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	0d5b      	lsrs	r3, r3, #21
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	3301      	adds	r3, #1
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	61fb      	str	r3, [r7, #28]
          break;
 80048f0:	e03a      	b.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80048f2:	4b8f      	ldr	r3, [pc, #572]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fe:	d135      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004900:	4b8b      	ldr	r3, [pc, #556]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490c:	d12e      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800490e:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004918:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	fb03 f202 	mul.w	r2, r3, r2
 8004922:	4b83      	ldr	r3, [pc, #524]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	3301      	adds	r3, #1
 800492e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004932:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004934:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	0d5b      	lsrs	r3, r3, #21
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	3301      	adds	r3, #1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	61fb      	str	r3, [r7, #28]
          break;
 800494a:	e00f      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800494c:	4b78      	ldr	r3, [pc, #480]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800494e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d10a      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800495a:	4b76      	ldr	r3, [pc, #472]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800495c:	61fb      	str	r3, [r7, #28]
          break;
 800495e:	e007      	b.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004960:	bf00      	nop
 8004962:	e3e2      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004964:	bf00      	nop
 8004966:	e3e0      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004968:	bf00      	nop
 800496a:	e3de      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800496c:	bf00      	nop
 800496e:	e3dc      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004970:	bf00      	nop
      break;
 8004972:	e3da      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004974:	4b6e      	ldr	r3, [pc, #440]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b03      	cmp	r3, #3
 8004984:	d827      	bhi.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	0800499d 	.word	0x0800499d
 8004990:	080049a5 	.word	0x080049a5
 8004994:	080049ad 	.word	0x080049ad
 8004998:	080049c1 	.word	0x080049c1
          frequency = HAL_RCC_GetPCLK2Freq();
 800499c:	f7ff f87c 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 80049a0:	61f8      	str	r0, [r7, #28]
          break;
 80049a2:	e01d      	b.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80049a4:	f7fe ffca 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80049a8:	61f8      	str	r0, [r7, #28]
          break;
 80049aa:	e019      	b.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049ac:	4b60      	ldr	r3, [pc, #384]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b8:	d10f      	bne.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80049ba:	4b5f      	ldr	r3, [pc, #380]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049bc:	61fb      	str	r3, [r7, #28]
          break;
 80049be:	e00c      	b.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049c0:	4b5b      	ldr	r3, [pc, #364]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d107      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	61fb      	str	r3, [r7, #28]
          break;
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80049d6:	bf00      	nop
 80049d8:	e3a8      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80049da:	bf00      	nop
 80049dc:	e3a6      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80049de:	bf00      	nop
        break;
 80049e0:	e3a4      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80049e2:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	d83a      	bhi.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a31 	.word	0x08004a31
 8004a00:	08004a6b 	.word	0x08004a6b
 8004a04:	08004a6b 	.word	0x08004a6b
 8004a08:	08004a6b 	.word	0x08004a6b
 8004a0c:	08004a39 	.word	0x08004a39
 8004a10:	08004a6b 	.word	0x08004a6b
 8004a14:	08004a6b 	.word	0x08004a6b
 8004a18:	08004a6b 	.word	0x08004a6b
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a6b 	.word	0x08004a6b
 8004a24:	08004a6b 	.word	0x08004a6b
 8004a28:	08004a6b 	.word	0x08004a6b
 8004a2c:	08004a55 	.word	0x08004a55
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a30:	f7ff f81c 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004a34:	61f8      	str	r0, [r7, #28]
          break;
 8004a36:	e01d      	b.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a38:	f7fe ff80 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004a3c:	61f8      	str	r0, [r7, #28]
          break;
 8004a3e:	e019      	b.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a40:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4c:	d10f      	bne.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8004a4e:	4b3a      	ldr	r3, [pc, #232]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a50:	61fb      	str	r3, [r7, #28]
          break;
 8004a52:	e00c      	b.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a54:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d107      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8004a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a66:	61fb      	str	r3, [r7, #28]
          break;
 8004a68:	e003      	b.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004a6a:	bf00      	nop
 8004a6c:	e35e      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004a6e:	bf00      	nop
 8004a70:	e35c      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004a72:	bf00      	nop
        break;
 8004a74:	e35a      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b30      	cmp	r3, #48	; 0x30
 8004a86:	d021      	beq.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b30      	cmp	r3, #48	; 0x30
 8004a8c:	d829      	bhi.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d011      	beq.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d823      	bhi.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d004      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8004aa6:	e01c      	b.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f7fe ffe0 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004aac:	61f8      	str	r0, [r7, #28]
          break;
 8004aae:	e01d      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ab0:	f7fe ff44 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004ab4:	61f8      	str	r0, [r7, #28]
          break;
 8004ab6:	e019      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ac8:	61fb      	str	r3, [r7, #28]
          break;
 8004aca:	e00c      	b.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d107      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8004ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ade:	61fb      	str	r3, [r7, #28]
          break;
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004ae2:	bf00      	nop
 8004ae4:	e322      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004ae6:	bf00      	nop
 8004ae8:	e320      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004aea:	bf00      	nop
        break;
 8004aec:	e31e      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2bc0      	cmp	r3, #192	; 0xc0
 8004afe:	d027      	beq.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2bc0      	cmp	r3, #192	; 0xc0
 8004b04:	d82f      	bhi.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d017      	beq.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d829      	bhi.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8004b1e:	e022      	b.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fe ffa4 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004b24:	61f8      	str	r0, [r7, #28]
          break;
 8004b26:	e023      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b28:	f7fe ff08 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004b2c:	61f8      	str	r0, [r7, #28]
          break;
 8004b2e:	e01f      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8004b30:	40021000 	.word	0x40021000
 8004b34:	02dc6c00 	.word	0x02dc6c00
 8004b38:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b3c:	4b9b      	ldr	r3, [pc, #620]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b48:	d10f      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8004b4a:	4b99      	ldr	r3, [pc, #612]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004b4c:	61fb      	str	r3, [r7, #28]
          break;
 8004b4e:	e00c      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b50:	4b96      	ldr	r3, [pc, #600]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8004b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b62:	61fb      	str	r3, [r7, #28]
          break;
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8004b66:	bf00      	nop
 8004b68:	e2e0      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b6a:	bf00      	nop
 8004b6c:	e2de      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b6e:	bf00      	nop
        break;
 8004b70:	e2dc      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004b72:	4b8e      	ldr	r3, [pc, #568]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b84:	d025      	beq.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8c:	d82c      	bhi.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b94:	d013      	beq.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9c:	d824      	bhi.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	d004      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8004bac:	e01c      	b.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bae:	f7fe ff5d 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004bb2:	61f8      	str	r0, [r7, #28]
          break;
 8004bb4:	e01d      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe fec1 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
          break;
 8004bbc:	e019      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bbe:	4b7b      	ldr	r3, [pc, #492]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bca:	d10f      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8004bcc:	4b78      	ldr	r3, [pc, #480]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004bce:	61fb      	str	r3, [r7, #28]
          break;
 8004bd0:	e00c      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bd2:	4b76      	ldr	r3, [pc, #472]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8004be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be4:	61fb      	str	r3, [r7, #28]
          break;
 8004be6:	e003      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8004be8:	bf00      	nop
 8004bea:	e29f      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bec:	bf00      	nop
 8004bee:	e29d      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bf0:	bf00      	nop
        break;
 8004bf2:	e29b      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004bf4:	4b6d      	ldr	r3, [pc, #436]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c06:	d025      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c0e:	d82c      	bhi.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c16:	d013      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1e:	d824      	bhi.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2c:	d004      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8004c2e:	e01c      	b.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7fe ff1c 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004c34:	61f8      	str	r0, [r7, #28]
          break;
 8004c36:	e01d      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c38:	f7fe fe80 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004c3c:	61f8      	str	r0, [r7, #28]
          break;
 8004c3e:	e019      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c40:	4b5a      	ldr	r3, [pc, #360]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d10f      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8004c4e:	4b58      	ldr	r3, [pc, #352]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004c50:	61fb      	str	r3, [r7, #28]
          break;
 8004c52:	e00c      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c54:	4b55      	ldr	r3, [pc, #340]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d107      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8004c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c66:	61fb      	str	r3, [r7, #28]
          break;
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8004c6a:	bf00      	nop
 8004c6c:	e25e      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c6e:	bf00      	nop
 8004c70:	e25c      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c72:	bf00      	nop
        break;
 8004c74:	e25a      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004c76:	4b4d      	ldr	r3, [pc, #308]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c88:	d007      	beq.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c90:	d12f      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c92:	f7fe fe53 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004c96:	61f8      	str	r0, [r7, #28]
          break;
 8004c98:	e02e      	b.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004c9a:	4b44      	ldr	r3, [pc, #272]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca6:	d126      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004ca8:	4b40      	ldr	r3, [pc, #256]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d020      	beq.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004cb4:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cbe:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	fb03 f202 	mul.w	r2, r3, r2
 8004cc8:	4b38      	ldr	r3, [pc, #224]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004cda:	4b34      	ldr	r3, [pc, #208]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	0e5b      	lsrs	r3, r3, #25
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	61fb      	str	r3, [r7, #28]
          break;
 8004cf0:	e001      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8004cf2:	bf00      	nop
 8004cf4:	e21a      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cf6:	bf00      	nop
        break;
 8004cf8:	e218      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004d0c:	f7fe fec4 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8004d10:	61f8      	str	r0, [r7, #28]
        break;
 8004d12:	e20b      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d14:	f7fe fe12 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004d18:	61f8      	str	r0, [r7, #28]
        break;
 8004d1a:	e207      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004d1c:	4b23      	ldr	r3, [pc, #140]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d22:	f003 0318 	and.w	r3, r3, #24
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d834      	bhi.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d024      	beq.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8004d40:	e02d      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d48:	f000 fbe2 	bl	8005510 <RCCEx_GetSAIxPeriphCLKFreq>
 8004d4c:	61f8      	str	r0, [r7, #28]
          break;
 8004d4e:	e02b      	b.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004d50:	4b16      	ldr	r3, [pc, #88]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d122      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004d5c:	4b13      	ldr	r3, [pc, #76]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	e005      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8004d74:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d86:	61fb      	str	r3, [r7, #28]
          break;
 8004d88:	e00b      	b.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d96:	d106      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004d9a:	61fb      	str	r3, [r7, #28]
          break;
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8004d9e:	bf00      	nop
 8004da0:	e1c4      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004da2:	bf00      	nop
 8004da4:	e1c2      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004da6:	bf00      	nop
        break;
 8004da8:	e1c0      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	0800c964 	.word	0x0800c964
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004db8:	4b96      	ldr	r3, [pc, #600]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	d013      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	d819      	bhi.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de0:	d004      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fe fe42 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004de8:	61f8      	str	r0, [r7, #28]
          break;
 8004dea:	e010      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8004dec:	f7fe fda6 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004df0:	61f8      	str	r0, [r7, #28]
          break;
 8004df2:	e00c      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004df4:	4b87      	ldr	r3, [pc, #540]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e00:	d104      	bne.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8004e02:	4b85      	ldr	r3, [pc, #532]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004e04:	61fb      	str	r3, [r7, #28]
          break;
 8004e06:	e001      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8004e08:	bf00      	nop
 8004e0a:	e18f      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e0c:	bf00      	nop
        break;
 8004e0e:	e18d      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004e10:	4b80      	ldr	r3, [pc, #512]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e22:	d013      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2a:	d819      	bhi.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d004      	beq.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e38:	d004      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8004e3a:	e011      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7fe fe16 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004e40:	61f8      	str	r0, [r7, #28]
          break;
 8004e42:	e010      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e44:	f7fe fd7a 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004e48:	61f8      	str	r0, [r7, #28]
          break;
 8004e4a:	e00c      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e4c:	4b71      	ldr	r3, [pc, #452]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e58:	d104      	bne.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8004e5a:	4b6f      	ldr	r3, [pc, #444]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004e5c:	61fb      	str	r3, [r7, #28]
          break;
 8004e5e:	e001      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8004e60:	bf00      	nop
 8004e62:	e163      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e64:	bf00      	nop
        break;
 8004e66:	e161      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004e68:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e7a:	d013      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e82:	d819      	bhi.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d004      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8004e92:	e011      	b.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e94:	f7fe fdea 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004e98:	61f8      	str	r0, [r7, #28]
          break;
 8004e9a:	e010      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e9c:	f7fe fd4e 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004ea0:	61f8      	str	r0, [r7, #28]
          break;
 8004ea2:	e00c      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ea4:	4b5b      	ldr	r3, [pc, #364]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb0:	d104      	bne.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8004eb2:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004eb4:	61fb      	str	r3, [r7, #28]
          break;
 8004eb6:	e001      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8004eb8:	bf00      	nop
 8004eba:	e137      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004ebc:	bf00      	nop
        break;
 8004ebe:	e135      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004ec0:	4b54      	ldr	r3, [pc, #336]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d011      	beq.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d818      	bhi.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d004      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8004ee4:	e011      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ee6:	f7fe fdc1 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004eea:	61f8      	str	r0, [r7, #28]
          break;
 8004eec:	e010      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8004eee:	f7fe fd25 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004ef2:	61f8      	str	r0, [r7, #28]
          break;
 8004ef4:	e00c      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ef6:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	d104      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8004f04:	4b44      	ldr	r3, [pc, #272]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004f06:	61fb      	str	r3, [r7, #28]
          break;
 8004f08:	e001      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8004f0a:	bf00      	nop
 8004f0c:	e10e      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f0e:	bf00      	nop
        break;
 8004f10:	e10c      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004f12:	4b40      	ldr	r3, [pc, #256]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f24:	d02c      	beq.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f2c:	d833      	bhi.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f34:	d01a      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f3c:	d82b      	bhi.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f4a:	d004      	beq.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8004f4c:	e023      	b.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f4e:	f7fe fd8d 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004f52:	61f8      	str	r0, [r7, #28]
          break;
 8004f54:	e026      	b.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004f56:	4b2f      	ldr	r3, [pc, #188]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d11a      	bne.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8004f64:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004f68:	61fb      	str	r3, [r7, #28]
          break;
 8004f6a:	e016      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f6c:	4b29      	ldr	r3, [pc, #164]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d111      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8004f7a:	4b27      	ldr	r3, [pc, #156]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004f7c:	61fb      	str	r3, [r7, #28]
          break;
 8004f7e:	e00e      	b.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f80:	4b24      	ldr	r3, [pc, #144]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8004f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f92:	61fb      	str	r3, [r7, #28]
          break;
 8004f94:	e005      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8004f96:	bf00      	nop
 8004f98:	e0c8      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f9a:	bf00      	nop
 8004f9c:	e0c6      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f9e:	bf00      	nop
 8004fa0:	e0c4      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004fa2:	bf00      	nop
        break;
 8004fa4:	e0c2      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fb8:	d030      	beq.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fc0:	d837      	bhi.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fc8:	d01a      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fd0:	d82f      	bhi.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fde:	d004      	beq.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8004fe0:	e027      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fe2:	f7fe fd43 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004fe6:	61f8      	str	r0, [r7, #28]
          break;
 8004fe8:	e02a      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d11e      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8004ff8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ffc:	61fb      	str	r3, [r7, #28]
          break;
 8004ffe:	e01a      	b.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d115      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800500e:	4b02      	ldr	r3, [pc, #8]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005010:	61fb      	str	r3, [r7, #28]
          break;
 8005012:	e012      	b.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005014:	40021000 	.word	0x40021000
 8005018:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800501c:	4b46      	ldr	r3, [pc, #280]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d109      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800502a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502e:	61fb      	str	r3, [r7, #28]
          break;
 8005030:	e005      	b.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8005032:	bf00      	nop
 8005034:	e07a      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005036:	bf00      	nop
 8005038:	e078      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800503a:	bf00      	nop
 800503c:	e076      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800503e:	bf00      	nop
        break;
 8005040:	e074      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005042:	4b3d      	ldr	r3, [pc, #244]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005048:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005054:	d02c      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800505c:	d855      	bhi.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506a:	d004      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800506c:	e04d      	b.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800506e:	f7fe fc65 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8005072:	61f8      	str	r0, [r7, #28]
          break;
 8005074:	e04e      	b.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005076:	4b30      	ldr	r3, [pc, #192]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d145      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005082:	4b2d      	ldr	r3, [pc, #180]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800508e:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	e005      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800509a:	4b27      	ldr	r3, [pc, #156]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a0:	0a1b      	lsrs	r3, r3, #8
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	4a25      	ldr	r2, [pc, #148]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80050a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ac:	61fb      	str	r3, [r7, #28]
          break;
 80050ae:	e02e      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80050b0:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050bc:	d129      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ca:	d122      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	fb03 f202 	mul.w	r2, r3, r2
 80050e0:	4b15      	ldr	r3, [pc, #84]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	3301      	adds	r3, #1
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80050f2:	4b11      	ldr	r3, [pc, #68]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	0d5b      	lsrs	r3, r3, #21
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	3301      	adds	r3, #1
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	61fb      	str	r3, [r7, #28]
          break;
 8005108:	e003      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800510a:	bf00      	nop
 800510c:	e00e      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800510e:	bf00      	nop
 8005110:	e00c      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005112:	bf00      	nop
        break;
 8005114:	e00a      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005116:	bf00      	nop
 8005118:	e008      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800511a:	bf00      	nop
 800511c:	e006      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800512a:	bf00      	nop
    }
  }

  return(frequency);
 800512c:	69fb      	ldr	r3, [r7, #28]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40021000 	.word	0x40021000
 800513c:	0800c964 	.word	0x0800c964

08005140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800514e:	4b72      	ldr	r3, [pc, #456]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800515a:	4b6f      	ldr	r3, [pc, #444]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0203 	and.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d103      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
       ||
 800516e:	2b00      	cmp	r3, #0
 8005170:	d142      	bne.n	80051f8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
 8005176:	e03f      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d018      	beq.n	80051b2 <RCCEx_PLLSAI1_Config+0x72>
 8005180:	2b03      	cmp	r3, #3
 8005182:	d825      	bhi.n	80051d0 <RCCEx_PLLSAI1_Config+0x90>
 8005184:	2b01      	cmp	r3, #1
 8005186:	d002      	beq.n	800518e <RCCEx_PLLSAI1_Config+0x4e>
 8005188:	2b02      	cmp	r3, #2
 800518a:	d009      	beq.n	80051a0 <RCCEx_PLLSAI1_Config+0x60>
 800518c:	e020      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800518e:	4b62      	ldr	r3, [pc, #392]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11d      	bne.n	80051d6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800519e:	e01a      	b.n	80051d6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a0:	4b5d      	ldr	r3, [pc, #372]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d116      	bne.n	80051da <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b0:	e013      	b.n	80051da <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b2:	4b59      	ldr	r3, [pc, #356]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10f      	bne.n	80051de <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051be:	4b56      	ldr	r3, [pc, #344]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ce:	e006      	b.n	80051de <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      break;
 80051d4:	e004      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051d6:	bf00      	nop
 80051d8:	e002      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051da:	bf00      	nop
 80051dc:	e000      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051de:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80051e6:	4b4c      	ldr	r3, [pc, #304]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f023 0203 	bic.w	r2, r3, #3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4949      	ldr	r1, [pc, #292]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 8086 	bne.w	800530c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005200:	4b45      	ldr	r3, [pc, #276]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a44      	ldr	r2, [pc, #272]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800520a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520c:	f7fb ff6a 	bl	80010e4 <HAL_GetTick>
 8005210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005212:	e009      	b.n	8005228 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005214:	f7fb ff66 	bl	80010e4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d902      	bls.n	8005228 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	73fb      	strb	r3, [r7, #15]
        break;
 8005226:	e005      	b.n	8005234 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005228:	4b3b      	ldr	r3, [pc, #236]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1ef      	bne.n	8005214 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d168      	bne.n	800530c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d113      	bne.n	8005268 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005240:	4b35      	ldr	r3, [pc, #212]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	4b35      	ldr	r3, [pc, #212]	; (800531c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005246:	4013      	ands	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6892      	ldr	r2, [r2, #8]
 800524c:	0211      	lsls	r1, r2, #8
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68d2      	ldr	r2, [r2, #12]
 8005252:	06d2      	lsls	r2, r2, #27
 8005254:	4311      	orrs	r1, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6852      	ldr	r2, [r2, #4]
 800525a:	3a01      	subs	r2, #1
 800525c:	0112      	lsls	r2, r2, #4
 800525e:	430a      	orrs	r2, r1
 8005260:	492d      	ldr	r1, [pc, #180]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005262:	4313      	orrs	r3, r2
 8005264:	610b      	str	r3, [r1, #16]
 8005266:	e02d      	b.n	80052c4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d115      	bne.n	800529a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800526e:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6892      	ldr	r2, [r2, #8]
 800527a:	0211      	lsls	r1, r2, #8
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6912      	ldr	r2, [r2, #16]
 8005280:	0852      	lsrs	r2, r2, #1
 8005282:	3a01      	subs	r2, #1
 8005284:	0552      	lsls	r2, r2, #21
 8005286:	4311      	orrs	r1, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6852      	ldr	r2, [r2, #4]
 800528c:	3a01      	subs	r2, #1
 800528e:	0112      	lsls	r2, r2, #4
 8005290:	430a      	orrs	r2, r1
 8005292:	4921      	ldr	r1, [pc, #132]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005294:	4313      	orrs	r3, r2
 8005296:	610b      	str	r3, [r1, #16]
 8005298:	e014      	b.n	80052c4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800529a:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	4b21      	ldr	r3, [pc, #132]	; (8005324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6892      	ldr	r2, [r2, #8]
 80052a6:	0211      	lsls	r1, r2, #8
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6952      	ldr	r2, [r2, #20]
 80052ac:	0852      	lsrs	r2, r2, #1
 80052ae:	3a01      	subs	r2, #1
 80052b0:	0652      	lsls	r2, r2, #25
 80052b2:	4311      	orrs	r1, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6852      	ldr	r2, [r2, #4]
 80052b8:	3a01      	subs	r2, #1
 80052ba:	0112      	lsls	r2, r2, #4
 80052bc:	430a      	orrs	r2, r1
 80052be:	4916      	ldr	r1, [pc, #88]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052c4:	4b14      	ldr	r3, [pc, #80]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a13      	ldr	r2, [pc, #76]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fb ff08 	bl	80010e4 <HAL_GetTick>
 80052d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052d6:	e009      	b.n	80052ec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d8:	f7fb ff04 	bl	80010e4 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	73fb      	strb	r3, [r7, #15]
          break;
 80052ea:	e005      	b.n	80052f8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ef      	beq.n	80052d8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	4904      	ldr	r1, [pc, #16]	; (8005318 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005308:	4313      	orrs	r3, r2
 800530a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000
 800531c:	07ff800f 	.word	0x07ff800f
 8005320:	ff9f800f 	.word	0xff9f800f
 8005324:	f9ff800f 	.word	0xf9ff800f

08005328 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005336:	4b72      	ldr	r3, [pc, #456]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005342:	4b6f      	ldr	r3, [pc, #444]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0203 	and.w	r2, r3, #3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d103      	bne.n	800535a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
       ||
 8005356:	2b00      	cmp	r3, #0
 8005358:	d142      	bne.n	80053e0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
 800535e:	e03f      	b.n	80053e0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d018      	beq.n	800539a <RCCEx_PLLSAI2_Config+0x72>
 8005368:	2b03      	cmp	r3, #3
 800536a:	d825      	bhi.n	80053b8 <RCCEx_PLLSAI2_Config+0x90>
 800536c:	2b01      	cmp	r3, #1
 800536e:	d002      	beq.n	8005376 <RCCEx_PLLSAI2_Config+0x4e>
 8005370:	2b02      	cmp	r3, #2
 8005372:	d009      	beq.n	8005388 <RCCEx_PLLSAI2_Config+0x60>
 8005374:	e020      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005376:	4b62      	ldr	r3, [pc, #392]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11d      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005386:	e01a      	b.n	80053be <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005388:	4b5d      	ldr	r3, [pc, #372]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005398:	e013      	b.n	80053c2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800539a:	4b59      	ldr	r3, [pc, #356]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053a6:	4b56      	ldr	r3, [pc, #344]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053b6:	e006      	b.n	80053c6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
      break;
 80053bc:	e004      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d108      	bne.n	80053e0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80053ce:	4b4c      	ldr	r3, [pc, #304]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f023 0203 	bic.w	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4949      	ldr	r1, [pc, #292]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 8086 	bne.w	80054f4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053e8:	4b45      	ldr	r3, [pc, #276]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a44      	ldr	r2, [pc, #272]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f4:	f7fb fe76 	bl	80010e4 <HAL_GetTick>
 80053f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053fa:	e009      	b.n	8005410 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053fc:	f7fb fe72 	bl	80010e4 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d902      	bls.n	8005410 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	73fb      	strb	r3, [r7, #15]
        break;
 800540e:	e005      	b.n	800541c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005410:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ef      	bne.n	80053fc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d168      	bne.n	80054f4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d113      	bne.n	8005450 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005428:	4b35      	ldr	r3, [pc, #212]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	4b35      	ldr	r3, [pc, #212]	; (8005504 <RCCEx_PLLSAI2_Config+0x1dc>)
 800542e:	4013      	ands	r3, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6892      	ldr	r2, [r2, #8]
 8005434:	0211      	lsls	r1, r2, #8
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68d2      	ldr	r2, [r2, #12]
 800543a:	06d2      	lsls	r2, r2, #27
 800543c:	4311      	orrs	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6852      	ldr	r2, [r2, #4]
 8005442:	3a01      	subs	r2, #1
 8005444:	0112      	lsls	r2, r2, #4
 8005446:	430a      	orrs	r2, r1
 8005448:	492d      	ldr	r1, [pc, #180]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 800544a:	4313      	orrs	r3, r2
 800544c:	614b      	str	r3, [r1, #20]
 800544e:	e02d      	b.n	80054ac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d115      	bne.n	8005482 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005456:	4b2a      	ldr	r3, [pc, #168]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <RCCEx_PLLSAI2_Config+0x1e0>)
 800545c:	4013      	ands	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6892      	ldr	r2, [r2, #8]
 8005462:	0211      	lsls	r1, r2, #8
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6912      	ldr	r2, [r2, #16]
 8005468:	0852      	lsrs	r2, r2, #1
 800546a:	3a01      	subs	r2, #1
 800546c:	0552      	lsls	r2, r2, #21
 800546e:	4311      	orrs	r1, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6852      	ldr	r2, [r2, #4]
 8005474:	3a01      	subs	r2, #1
 8005476:	0112      	lsls	r2, r2, #4
 8005478:	430a      	orrs	r2, r1
 800547a:	4921      	ldr	r1, [pc, #132]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 800547c:	4313      	orrs	r3, r2
 800547e:	614b      	str	r3, [r1, #20]
 8005480:	e014      	b.n	80054ac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005482:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	4b21      	ldr	r3, [pc, #132]	; (800550c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005488:	4013      	ands	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6892      	ldr	r2, [r2, #8]
 800548e:	0211      	lsls	r1, r2, #8
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6952      	ldr	r2, [r2, #20]
 8005494:	0852      	lsrs	r2, r2, #1
 8005496:	3a01      	subs	r2, #1
 8005498:	0652      	lsls	r2, r2, #25
 800549a:	4311      	orrs	r1, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6852      	ldr	r2, [r2, #4]
 80054a0:	3a01      	subs	r2, #1
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	430a      	orrs	r2, r1
 80054a6:	4916      	ldr	r1, [pc, #88]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b8:	f7fb fe14 	bl	80010e4 <HAL_GetTick>
 80054bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054be:	e009      	b.n	80054d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054c0:	f7fb fe10 	bl	80010e4 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d902      	bls.n	80054d4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	73fb      	strb	r3, [r7, #15]
          break;
 80054d2:	e005      	b.n	80054e0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ef      	beq.n	80054c0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054e6:	4b06      	ldr	r3, [pc, #24]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	4904      	ldr	r1, [pc, #16]	; (8005500 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000
 8005504:	07ff800f 	.word	0x07ff800f
 8005508:	ff9f800f 	.word	0xff9f800f
 800550c:	f9ff800f 	.word	0xf9ff800f

08005510 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005510:	b480      	push	{r7}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552c:	d10b      	bne.n	8005546 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800552e:	4b7e      	ldr	r3, [pc, #504]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005534:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005538:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b60      	cmp	r3, #96	; 0x60
 800553e:	d112      	bne.n	8005566 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005540:	4b7a      	ldr	r3, [pc, #488]	; (800572c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e00f      	b.n	8005566 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554c:	d10b      	bne.n	8005566 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800554e:	4b76      	ldr	r3, [pc, #472]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005558:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005560:	d101      	bne.n	8005566 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005562:	4b72      	ldr	r3, [pc, #456]	; (800572c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005564:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 80d6 	bne.w	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d003      	beq.n	8005580 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557e:	d13b      	bne.n	80055f8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005580:	4b69      	ldr	r3, [pc, #420]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800558c:	f040 80c4 	bne.w	8005718 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005590:	4b65      	ldr	r3, [pc, #404]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80bd 	beq.w	8005718 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800559e:	4b62      	ldr	r3, [pc, #392]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	3301      	adds	r3, #1
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055b2:	4b5d      	ldr	r3, [pc, #372]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055bc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80055be:	4b5a      	ldr	r3, [pc, #360]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	0edb      	lsrs	r3, r3, #27
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80055d0:	4b55      	ldr	r3, [pc, #340]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80055dc:	2311      	movs	r3, #17
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e001      	b.n	80055e6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80055e2:	2307      	movs	r3, #7
 80055e4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	fb03 f202 	mul.w	r2, r3, r2
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80055f6:	e08f      	b.n	8005718 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d13a      	bne.n	8005674 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80055fe:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800560a:	f040 8086 	bne.w	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800560e:	4b46      	ldr	r3, [pc, #280]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d07f      	beq.n	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800561a:	4b43      	ldr	r3, [pc, #268]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	3301      	adds	r3, #1
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800562e:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005638:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	0edb      	lsrs	r3, r3, #27
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005658:	2311      	movs	r3, #17
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e001      	b.n	8005662 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800565e:	2307      	movs	r3, #7
 8005660:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	fb03 f202 	mul.w	r2, r3, r2
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	e052      	b.n	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d003      	beq.n	8005682 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005680:	d109      	bne.n	8005696 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568e:	d144      	bne.n	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005690:	4b27      	ldr	r3, [pc, #156]	; (8005730 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005692:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005694:	e041      	b.n	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b20      	cmp	r3, #32
 800569a:	d003      	beq.n	80056a4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a2:	d13a      	bne.n	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b0:	d133      	bne.n	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80056b2:	4b1d      	ldr	r3, [pc, #116]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d02d      	beq.n	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80056be:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	3301      	adds	r3, #1
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056dc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80056de:	4b12      	ldr	r3, [pc, #72]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	0edb      	lsrs	r3, r3, #27
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80056fc:	2311      	movs	r3, #17
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e001      	b.n	8005706 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005702:	2307      	movs	r3, #7
 8005704:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	fb03 f202 	mul.w	r2, r3, r2
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	fbb2 f3f3 	udiv	r3, r2, r3
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	e000      	b.n	800571a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005718:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800571a:	69fb      	ldr	r3, [r7, #28]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3724      	adds	r7, #36	; 0x24
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	40021000 	.word	0x40021000
 800572c:	001fff68 	.word	0x001fff68
 8005730:	00f42400 	.word	0x00f42400

08005734 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e078      	b.n	8005838 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d105      	bne.n	800575e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7fb fa81 	bl	8000c60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2203      	movs	r2, #3
 8005762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f86a 	bl	8005840 <HAL_SD_InitCard>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e060      	b.n	8005838 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005776:	f107 0308 	add.w	r3, r7, #8
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fdcd 	bl	800631c <HAL_SD_GetCardStatus>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e055      	b.n	8005838 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800578c:	7e3b      	ldrb	r3, [r7, #24]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005792:	7e7b      	ldrb	r3, [r7, #25]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10a      	bne.n	80057b6 <HAL_SD_Init+0x82>
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <HAL_SD_Init+0x78>
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80057b4:	e00b      	b.n	80057ce <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d104      	bne.n	80057c8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80057c6:	e002      	b.n	80057ce <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fe83 	bl	80064e0 <HAL_SD_ConfigWideBusOperation>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e029      	b.n	8005838 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80057e4:	f7fb fc7e 	bl	80010e4 <HAL_GetTick>
 80057e8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80057ea:	e014      	b.n	8005816 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80057ec:	f7fb fc7a 	bl	80010e4 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fa:	d10c      	bne.n	8005816 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005802:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e010      	b.n	8005838 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 ff76 	bl	8006708 <HAL_SD_GetCardState>
 800581c:	4603      	mov	r3, r0
 800581e:	2b04      	cmp	r3, #4
 8005820:	d1e4      	bne.n	80057ec <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3728      	adds	r7, #40	; 0x28
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b08e      	sub	sp, #56	; 0x38
 8005844:	af04      	add	r7, sp, #16
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005848:	2300      	movs	r3, #0
 800584a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005858:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800585c:	f7fe fd4e 	bl	80042fc <HAL_RCCEx_GetPeriphCLKFreq>
 8005860:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e079      	b.n	8005970 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	4a3d      	ldr	r2, [pc, #244]	; (8005978 <HAL_SD_InitCard+0x138>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d107      	bne.n	80058a8 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0210 	orr.w	r2, r2, #16
 80058a6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681d      	ldr	r5, [r3, #0]
 80058ac:	466c      	mov	r4, sp
 80058ae:	f107 0314 	add.w	r3, r7, #20
 80058b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058c0:	4628      	mov	r0, r5
 80058c2:	f002 fa1d 	bl	8007d00 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f002 fa60 	bl	8007d90 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80058dc:	4a27      	ldr	r2, [pc, #156]	; (800597c <HAL_SD_InitCard+0x13c>)
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	3301      	adds	r3, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fb fc08 	bl	80010fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 ffeb 	bl	80068c8 <SD_PowerON>
 80058f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e02e      	b.n	8005970 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 ff18 	bl	8006748 <SD_InitCard>
 8005918:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e01b      	b.n	8005970 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005940:	4618      	mov	r0, r3
 8005942:	f002 fabb 	bl	8007ebc <SDMMC_CmdBlockLength>
 8005946:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00f      	beq.n	800596e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <HAL_SD_InitCard+0x140>)
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3728      	adds	r7, #40	; 0x28
 8005974:	46bd      	mov	sp, r7
 8005976:	bdb0      	pop	{r4, r5, r7, pc}
 8005978:	014f8b59 	.word	0x014f8b59
 800597c:	00012110 	.word	0x00012110
 8005980:	1fe00fff 	.word	0x1fe00fff

08005984 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b092      	sub	sp, #72	; 0x48
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005992:	f7fb fba7 	bl	80010e4 <HAL_GetTick>
 8005996:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d107      	bne.n	80059b6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e170      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	f040 8163 	bne.w	8005c8a <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80059ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	441a      	add	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d907      	bls.n	80059e8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e157      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2203      	movs	r2, #3
 80059ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2200      	movs	r2, #0
 80059f6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d002      	beq.n	8005a06 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	025b      	lsls	r3, r3, #9
 8005a04:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a0a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	025b      	lsls	r3, r3, #9
 8005a10:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a12:	2390      	movs	r3, #144	; 0x90
 8005a14:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a16:	2302      	movs	r3, #2
 8005a18:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f107 0214 	add.w	r2, r7, #20
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f002 fa19 	bl	8007e64 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a40:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d90a      	bls.n	8005a5e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a54:	4618      	mov	r0, r3
 8005a56:	f002 fa77 	bl	8007f48 <SDMMC_CmdReadMultiBlock>
 8005a5a:	6478      	str	r0, [r7, #68]	; 0x44
 8005a5c:	e009      	b.n	8005a72 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f002 fa49 	bl	8007f02 <SDMMC_CmdReadSingleBlock>
 8005a70:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d012      	beq.n	8005a9e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a88      	ldr	r2, [pc, #544]	; (8005ca0 <HAL_SD_ReadBlocks+0x31c>)
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a86:	431a      	orrs	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e0fc      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005aa2:	e061      	b.n	8005b68 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d03c      	beq.n	8005b2c <HAL_SD_ReadBlocks+0x1a8>
 8005ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d039      	beq.n	8005b2c <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	643b      	str	r3, [r7, #64]	; 0x40
 8005abc:	e033      	b.n	8005b26 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f002 f946 	bl	8007d54 <SDMMC_ReadFIFO>
 8005ac8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ada:	3b01      	subs	r3, #1
 8005adc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aea:	3301      	adds	r3, #1
 8005aec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af0:	3b01      	subs	r3, #1
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	3301      	adds	r3, #1
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	3b01      	subs	r3, #1
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	0e1b      	lsrs	r3, r3, #24
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b12:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	3301      	adds	r3, #1
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b22:	3301      	adds	r3, #1
 8005b24:	643b      	str	r3, [r7, #64]	; 0x40
 8005b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b28:	2b07      	cmp	r3, #7
 8005b2a:	d9c8      	bls.n	8005abe <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005b2c:	f7fb fada 	bl	80010e4 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d902      	bls.n	8005b42 <HAL_SD_ReadBlocks+0x1be>
 8005b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d112      	bne.n	8005b68 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a56      	ldr	r2, [pc, #344]	; (8005ca0 <HAL_SD_ReadBlocks+0x31c>)
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e097      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d096      	beq.n	8005aa4 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b84:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d022      	beq.n	8005bda <HAL_SD_ReadBlocks+0x256>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d91f      	bls.n	8005bda <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d01b      	beq.n	8005bda <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f002 fa38 	bl	800801c <SDMMC_CmdStopTransfer>
 8005bac:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a39      	ldr	r2, [pc, #228]	; (8005ca0 <HAL_SD_ReadBlocks+0x31c>)
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e05e      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <HAL_SD_ReadBlocks+0x31c>)
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	f043 0208 	orr.w	r2, r3, #8
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e044      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d012      	beq.n	8005c42 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <HAL_SD_ReadBlocks+0x31c>)
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	f043 0202 	orr.w	r2, r3, #2
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e02a      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d012      	beq.n	8005c76 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <HAL_SD_ReadBlocks+0x31c>)
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e010      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <HAL_SD_ReadBlocks+0x320>)
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e006      	b.n	8005c98 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3748      	adds	r7, #72	; 0x48
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	1fe00fff 	.word	0x1fe00fff
 8005ca4:	18000f3a 	.word	0x18000f3a

08005ca8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b092      	sub	sp, #72	; 0x48
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cb6:	f7fb fa15 	bl	80010e4 <HAL_GetTick>
 8005cba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e174      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	f040 8167 	bne.w	8005fb6 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	441a      	add	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d907      	bls.n	8005d0c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e15b      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2203      	movs	r2, #3
 8005d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d002      	beq.n	8005d2a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	025b      	lsls	r3, r3, #9
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d2e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	025b      	lsls	r3, r3, #9
 8005d34:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d36:	2390      	movs	r3, #144	; 0x90
 8005d38:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f107 0218 	add.w	r2, r7, #24
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f002 f887 	bl	8007e64 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d64:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d90a      	bls.n	8005d82 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f002 f92b 	bl	8007fd4 <SDMMC_CmdWriteMultiBlock>
 8005d7e:	6478      	str	r0, [r7, #68]	; 0x44
 8005d80:	e009      	b.n	8005d96 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2210      	movs	r2, #16
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f002 f8fd 	bl	8007f8e <SDMMC_CmdWriteSingleBlock>
 8005d94:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d012      	beq.n	8005dc2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a8a      	ldr	r2, [pc, #552]	; (8005fcc <HAL_SD_WriteBlocks+0x324>)
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005daa:	431a      	orrs	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e100      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005dc6:	e065      	b.n	8005e94 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d040      	beq.n	8005e58 <HAL_SD_WriteBlocks+0x1b0>
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d03d      	beq.n	8005e58 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	643b      	str	r3, [r7, #64]	; 0x40
 8005de0:	e037      	b.n	8005e52 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	3301      	adds	r3, #1
 8005dec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df0:	3b01      	subs	r3, #1
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	021a      	lsls	r2, r3, #8
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	3301      	adds	r3, #1
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	041a      	lsls	r2, r3, #16
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e20:	3b01      	subs	r3, #1
 8005e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	061a      	lsls	r2, r3, #24
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	3301      	adds	r3, #1
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f107 0214 	add.w	r2, r7, #20
 8005e44:	4611      	mov	r1, r2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 ff91 	bl	8007d6e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4e:	3301      	adds	r3, #1
 8005e50:	643b      	str	r3, [r7, #64]	; 0x40
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	2b07      	cmp	r3, #7
 8005e56:	d9c4      	bls.n	8005de2 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e58:	f7fb f944 	bl	80010e4 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d902      	bls.n	8005e6e <HAL_SD_WriteBlocks+0x1c6>
 8005e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d112      	bne.n	8005e94 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a56      	ldr	r2, [pc, #344]	; (8005fcc <HAL_SD_WriteBlocks+0x324>)
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e097      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d092      	beq.n	8005dc8 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d022      	beq.n	8005f06 <HAL_SD_WriteBlocks+0x25e>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d91f      	bls.n	8005f06 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d01b      	beq.n	8005f06 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f002 f8a2 	bl	800801c <SDMMC_CmdStopTransfer>
 8005ed8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a39      	ldr	r2, [pc, #228]	; (8005fcc <HAL_SD_WriteBlocks+0x324>)
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e05e      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <HAL_SD_WriteBlocks+0x324>)
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	f043 0208 	orr.w	r2, r3, #8
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e044      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d012      	beq.n	8005f6e <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1f      	ldr	r2, [pc, #124]	; (8005fcc <HAL_SD_WriteBlocks+0x324>)
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	f043 0202 	orr.w	r2, r3, #2
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e02a      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d012      	beq.n	8005fa2 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <HAL_SD_WriteBlocks+0x324>)
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	f043 0210 	orr.w	r2, r3, #16
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e010      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <HAL_SD_WriteBlocks+0x328>)
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e006      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
  }
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3748      	adds	r7, #72	; 0x48
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	1fe00fff 	.word	0x1fe00fff
 8005fd0:	18000f3a 	.word	0x18000f3a

08005fd4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe2:	0f9b      	lsrs	r3, r3, #30
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fee:	0e9b      	lsrs	r3, r3, #26
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	0e1b      	lsrs	r3, r3, #24
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	b2da      	uxtb	r2, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	b2da      	uxtb	r2, r3
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800601e:	0a1b      	lsrs	r3, r3, #8
 8006020:	b2da      	uxtb	r2, r3
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602a:	b2da      	uxtb	r2, r3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006034:	0d1b      	lsrs	r3, r3, #20
 8006036:	b29a      	uxth	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	b2da      	uxtb	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006052:	0bdb      	lsrs	r3, r3, #15
 8006054:	b2db      	uxtb	r3, r3
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	b2da      	uxtb	r2, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006064:	0b9b      	lsrs	r3, r3, #14
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006076:	0b5b      	lsrs	r3, r3, #13
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006088:	0b1b      	lsrs	r3, r3, #12
 800608a:	b2db      	uxtb	r3, r3
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	b2da      	uxtb	r2, r3
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2200      	movs	r2, #0
 800609a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d163      	bne.n	800616c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a8:	009a      	lsls	r2, r3, #2
 80060aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060ae:	4013      	ands	r3, r2
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060b4:	0f92      	lsrs	r2, r2, #30
 80060b6:	431a      	orrs	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c0:	0edb      	lsrs	r3, r3, #27
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d2:	0e1b      	lsrs	r3, r3, #24
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e4:	0d5b      	lsrs	r3, r3, #21
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f6:	0c9b      	lsrs	r3, r3, #18
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006108:	0bdb      	lsrs	r3, r3, #15
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	b2da      	uxtb	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	7e1b      	ldrb	r3, [r3, #24]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	3302      	adds	r3, #2
 800612c:	2201      	movs	r2, #1
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006136:	fb03 f202 	mul.w	r2, r3, r2
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	7a1b      	ldrb	r3, [r3, #8]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 030f 	and.w	r3, r3, #15
 8006148:	2201      	movs	r2, #1
 800614a:	409a      	lsls	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006158:	0a52      	lsrs	r2, r2, #9
 800615a:	fb03 f202 	mul.w	r2, r3, r2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006168:	659a      	str	r2, [r3, #88]	; 0x58
 800616a:	e031      	b.n	80061d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d11d      	bne.n	80061b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	431a      	orrs	r2, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	3301      	adds	r3, #1
 8006190:	029a      	lsls	r2, r3, #10
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	659a      	str	r2, [r3, #88]	; 0x58
 80061ae:	e00f      	b.n	80061d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a58      	ldr	r2, [pc, #352]	; (8006318 <HAL_SD_GetCardCSD+0x344>)
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e09d      	b.n	800630c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d4:	0b9b      	lsrs	r3, r3, #14
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061e6:	09db      	lsrs	r3, r3, #7
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006208:	0fdb      	lsrs	r3, r3, #31
 800620a:	b2da      	uxtb	r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006214:	0f5b      	lsrs	r3, r3, #29
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	b2da      	uxtb	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006226:	0e9b      	lsrs	r3, r3, #26
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	b2da      	uxtb	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006238:	0d9b      	lsrs	r3, r3, #22
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	b2da      	uxtb	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800624a:	0d5b      	lsrs	r3, r3, #21
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006266:	0c1b      	lsrs	r3, r3, #16
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627a:	0bdb      	lsrs	r3, r3, #15
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	b2da      	uxtb	r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628e:	0b9b      	lsrs	r3, r3, #14
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	b2da      	uxtb	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a2:	0b5b      	lsrs	r3, r3, #13
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b6:	0b1b      	lsrs	r3, r3, #12
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ca:	0a9b      	lsrs	r3, r3, #10
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	1fe00fff 	.word	0x1fe00fff

0800631c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b094      	sub	sp, #80	; 0x50
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800632c:	f107 0308 	add.w	r3, r7, #8
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fbd4 	bl	8006ae0 <SD_SendSDStatus>
 8006338:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800633a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633c:	2b00      	cmp	r3, #0
 800633e:	d011      	beq.n	8006364 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a4f      	ldr	r2, [pc, #316]	; (8006484 <HAL_SD_GetCardStatus+0x168>)
 8006346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006362:	e070      	b.n	8006446 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	b2da      	uxtb	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	b2da      	uxtb	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	b29b      	uxth	r3, r3
 800638a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800638e:	b29a      	uxth	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	0e1b      	lsrs	r3, r3, #24
 8006394:	b29b      	uxth	r3, r3
 8006396:	4313      	orrs	r3, r2
 8006398:	b29a      	uxth	r2, r3
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	061a      	lsls	r2, r3, #24
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80063b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	0e1b      	lsrs	r3, r3, #24
 80063ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	0d1b      	lsrs	r3, r3, #20
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	4313      	orrs	r3, r2
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	0a9b      	lsrs	r3, r3, #10
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006408:	b2da      	uxtb	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	0a1b      	lsrs	r3, r3, #8
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	b2da      	uxtb	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	091b      	lsrs	r3, r3, #4
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	b2da      	uxtb	r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	b2da      	uxtb	r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	0e1b      	lsrs	r3, r3, #24
 8006440:	b2da      	uxtb	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fd34 	bl	8007ebc <SDMMC_CmdBlockLength>
 8006454:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00d      	beq.n	8006478 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a08      	ldr	r2, [pc, #32]	; (8006484 <HAL_SD_GetCardStatus+0x168>)
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006478:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800647c:	4618      	mov	r0, r3
 800647e:	3750      	adds	r7, #80	; 0x50
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	1fe00fff 	.word	0x1fe00fff

08006488 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80064e0:	b5b0      	push	{r4, r5, r7, lr}
 80064e2:	b090      	sub	sp, #64	; 0x40
 80064e4:	af04      	add	r7, sp, #16
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2203      	movs	r2, #3
 80064f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d02e      	beq.n	800655e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006506:	d106      	bne.n	8006516 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
 8006514:	e029      	b.n	800656a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651c:	d10a      	bne.n	8006534 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fbd6 	bl	8006cd0 <SD_WideBus_Enable>
 8006524:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
 8006532:	e01a      	b.n	800656a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fc13 	bl	8006d66 <SD_WideBus_Disable>
 8006540:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	639a      	str	r2, [r3, #56]	; 0x38
 800654e:	e00c      	b.n	800656a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
 800655c:	e005      	b.n	800656a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a60      	ldr	r2, [pc, #384]	; (80066f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006580:	e097      	b.n	80066b2 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006582:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006586:	f7fd feb9 	bl	80042fc <HAL_RCCEx_GetPeriphCLKFreq>
 800658a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 8086 	beq.w	80066a0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695a      	ldr	r2, [r3, #20]
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	4952      	ldr	r1, [pc, #328]	; (80066fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80065b2:	fba1 1303 	umull	r1, r3, r1, r3
 80065b6:	0e1b      	lsrs	r3, r3, #24
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d303      	bcc.n	80065c4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	e05a      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065cc:	d103      	bne.n	80065d6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e051      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065de:	d126      	bne.n	800662e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10e      	bne.n	8006606 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	4a45      	ldr	r2, [pc, #276]	; (8006700 <HAL_SD_ConfigWideBusOperation+0x220>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d906      	bls.n	80065fe <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	4a42      	ldr	r2, [pc, #264]	; (80066fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	0e5b      	lsrs	r3, r3, #25
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	e03d      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e039      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006612:	4a3b      	ldr	r2, [pc, #236]	; (8006700 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d906      	bls.n	8006626 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	4a38      	ldr	r2, [pc, #224]	; (80066fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	0e5b      	lsrs	r3, r3, #25
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e029      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	e025      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10e      	bne.n	8006654 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	4a32      	ldr	r2, [pc, #200]	; (8006704 <HAL_SD_ConfigWideBusOperation+0x224>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d906      	bls.n	800664c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	4a2e      	ldr	r2, [pc, #184]	; (80066fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	e016      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e012      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006660:	4a28      	ldr	r2, [pc, #160]	; (8006704 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d906      	bls.n	8006674 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	4a24      	ldr	r2, [pc, #144]	; (80066fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800666a:	fba2 2303 	umull	r2, r3, r2, r3
 800666e:	0e1b      	lsrs	r3, r3, #24
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	e002      	b.n	800667a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681d      	ldr	r5, [r3, #0]
 8006684:	466c      	mov	r4, sp
 8006686:	f107 0318 	add.w	r3, r7, #24
 800668a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800668e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006692:	f107 030c 	add.w	r3, r7, #12
 8006696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006698:	4628      	mov	r0, r5
 800669a:	f001 fb31 	bl	8007d00 <SDMMC_Init>
 800669e:	e008      	b.n	80066b2 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 fbfe 	bl	8007ebc <SDMMC_CmdBlockLength>
 80066c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00c      	beq.n	80066e2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80066ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3730      	adds	r7, #48	; 0x30
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bdb0      	pop	{r4, r5, r7, pc}
 80066f6:	bf00      	nop
 80066f8:	1fe00fff 	.word	0x1fe00fff
 80066fc:	55e63b89 	.word	0x55e63b89
 8006700:	02faf080 	.word	0x02faf080
 8006704:	017d7840 	.word	0x017d7840

08006708 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fab0 	bl	8006c80 <SD_SendStatus>
 8006720:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	0a5b      	lsrs	r3, r3, #9
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800673e:	693b      	ldr	r3, [r7, #16]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006748:	b5b0      	push	{r4, r5, r7, lr}
 800674a:	b090      	sub	sp, #64	; 0x40
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006750:	2301      	movs	r3, #1
 8006752:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f001 fb2b 	bl	8007db4 <SDMMC_GetPowerState>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006764:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006768:	e0a9      	b.n	80068be <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676e:	2b03      	cmp	r3, #3
 8006770:	d02e      	beq.n	80067d0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f001 fd70 	bl	800825c <SDMMC_CmdSendCID>
 800677c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800677e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <SD_InitCard+0x40>
    {
      return errorstate;
 8006784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006786:	e09a      	b.n	80068be <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f001 fb55 	bl	8007e3e <SDMMC_GetResponse>
 8006794:	4602      	mov	r2, r0
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2104      	movs	r1, #4
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 fb4c 	bl	8007e3e <SDMMC_GetResponse>
 80067a6:	4602      	mov	r2, r0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2108      	movs	r1, #8
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fb43 	bl	8007e3e <SDMMC_GetResponse>
 80067b8:	4602      	mov	r2, r0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	210c      	movs	r1, #12
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 fb3a 	bl	8007e3e <SDMMC_GetResponse>
 80067ca:	4602      	mov	r2, r0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d00d      	beq.n	80067f4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f107 020e 	add.w	r2, r7, #14
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 fd79 	bl	80082da <SDMMC_CmdSetRelAdd>
 80067e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <SD_InitCard+0xac>
    {
      return errorstate;
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	e064      	b.n	80068be <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d036      	beq.n	800686a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067fc:	89fb      	ldrh	r3, [r7, #14]
 80067fe:	461a      	mov	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680c:	041b      	lsls	r3, r3, #16
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f001 fd42 	bl	800829a <SDMMC_CmdSendCSD>
 8006816:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <SD_InitCard+0xda>
    {
      return errorstate;
 800681e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006820:	e04d      	b.n	80068be <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2100      	movs	r1, #0
 8006828:	4618      	mov	r0, r3
 800682a:	f001 fb08 	bl	8007e3e <SDMMC_GetResponse>
 800682e:	4602      	mov	r2, r0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2104      	movs	r1, #4
 800683a:	4618      	mov	r0, r3
 800683c:	f001 faff 	bl	8007e3e <SDMMC_GetResponse>
 8006840:	4602      	mov	r2, r0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2108      	movs	r1, #8
 800684c:	4618      	mov	r0, r3
 800684e:	f001 faf6 	bl	8007e3e <SDMMC_GetResponse>
 8006852:	4602      	mov	r2, r0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	210c      	movs	r1, #12
 800685e:	4618      	mov	r0, r3
 8006860:	f001 faed 	bl	8007e3e <SDMMC_GetResponse>
 8006864:	4602      	mov	r2, r0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2104      	movs	r1, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f001 fae4 	bl	8007e3e <SDMMC_GetResponse>
 8006876:	4603      	mov	r3, r0
 8006878:	0d1a      	lsrs	r2, r3, #20
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800687e:	f107 0310 	add.w	r3, r7, #16
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff fba5 	bl	8005fd4 <HAL_SD_GetCardCSD>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006894:	e013      	b.n	80068be <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6819      	ldr	r1, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	2200      	movs	r2, #0
 80068a2:	461c      	mov	r4, r3
 80068a4:	4615      	mov	r5, r2
 80068a6:	4622      	mov	r2, r4
 80068a8:	462b      	mov	r3, r5
 80068aa:	4608      	mov	r0, r1
 80068ac:	f001 fbec 	bl	8008088 <SDMMC_CmdSelDesel>
 80068b0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80068b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <SD_InitCard+0x174>
  {
    return errorstate;
 80068b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ba:	e000      	b.n	80068be <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3740      	adds	r7, #64	; 0x40
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080068c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	2300      	movs	r3, #0
 80068da:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80068dc:	f7fa fc02 	bl	80010e4 <HAL_GetTick>
 80068e0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fbf2 	bl	80080d0 <SDMMC_CmdGoIdleState>
 80068ec:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <SD_PowerON+0x30>
  {
    return errorstate;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	e0ed      	b.n	8006ad4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f001 fc05 	bl	800810c <SDMMC_CmdOperCond>
 8006902:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00d      	beq.n	8006926 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f001 fbdb 	bl	80080d0 <SDMMC_CmdGoIdleState>
 800691a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <SD_PowerON+0x64>
    {
      return errorstate;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	e0d6      	b.n	8006ad4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	2b01      	cmp	r3, #1
 8006932:	d137      	bne.n	80069a4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f001 fc06 	bl	800814c <SDMMC_CmdAppCommand>
 8006940:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02d      	beq.n	80069a4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006948:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800694c:	e0c2      	b.n	8006ad4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f001 fbf9 	bl	800814c <SDMMC_CmdAppCommand>
 800695a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	e0b6      	b.n	8006ad4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	495c      	ldr	r1, [pc, #368]	; (8006adc <SD_PowerON+0x214>)
 800696c:	4618      	mov	r0, r3
 800696e:	f001 fc10 	bl	8008192 <SDMMC_CmdAppOperCommand>
 8006972:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800697a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800697e:	e0a9      	b.n	8006ad4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fa59 	bl	8007e3e <SDMMC_GetResponse>
 800698c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	0fdb      	lsrs	r3, r3, #31
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <SD_PowerON+0xd2>
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <SD_PowerON+0xd4>
 800699a:	2300      	movs	r3, #0
 800699c:	61bb      	str	r3, [r7, #24]

    count++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d802      	bhi.n	80069b4 <SD_PowerON+0xec>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0cc      	beq.n	800694e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d902      	bls.n	80069c4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069c2:	e087      	b.n	8006ad4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d07e      	beq.n	8006acc <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d17a      	bne.n	8006ad2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d075      	beq.n	8006ad2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ec:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0208 	orr.w	r2, r2, #8
 80069fc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 fcd0 	bl	80083a8 <SDMMC_CmdVoltageSwitch>
 8006a08:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00c      	beq.n	8006a2a <SD_PowerON+0x162>
        {
          return errorstate;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	e05f      	b.n	8006ad4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a14:	f7fa fb66 	bl	80010e4 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a22:	d102      	bne.n	8006a2a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006a24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a28:	e054      	b.n	8006ad4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a38:	d1ec      	bne.n	8006a14 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a52:	d002      	beq.n	8006a5a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006a54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a58:	e03c      	b.n	8006ad4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	f000 fa9e 	bl	8006f9c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0204 	orr.w	r2, r2, #4
 8006a6e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006a70:	e00a      	b.n	8006a88 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a72:	f7fa fb37 	bl	80010e4 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a80:	d102      	bne.n	8006a88 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006a82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a86:	e025      	b.n	8006ad4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a96:	d1ec      	bne.n	8006a72 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab0:	d102      	bne.n	8006ab8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ab6:	e00d      	b.n	8006ad4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2213      	movs	r2, #19
 8006abe:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8006aca:	e002      	b.n	8006ad2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	c1100000 	.word	0xc1100000

08006ae0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	; 0x30
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006aea:	f7fa fafb 	bl	80010e4 <HAL_GetTick>
 8006aee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 f99f 	bl	8007e3e <SDMMC_GetResponse>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b0a:	d102      	bne.n	8006b12 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b10:	e0b0      	b.n	8006c74 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2140      	movs	r1, #64	; 0x40
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 f9cf 	bl	8007ebc <SDMMC_CmdBlockLength>
 8006b1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d005      	beq.n	8006b32 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	e0a0      	b.n	8006c74 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f001 fb04 	bl	800814c <SDMMC_CmdAppCommand>
 8006b44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	e08d      	b.n	8006c74 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b5c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006b5e:	2340      	movs	r3, #64	; 0x40
 8006b60:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006b62:	2360      	movs	r3, #96	; 0x60
 8006b64:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b66:	2302      	movs	r3, #2
 8006b68:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f107 0208 	add.w	r2, r7, #8
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f971 	bl	8007e64 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 fbec 	bl	8008364 <SDMMC_CmdStatusRegister>
 8006b8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02b      	beq.n	8006bec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	e069      	b.n	8006c74 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d013      	beq.n	8006bd6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006bae:	2300      	movs	r3, #0
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb2:	e00d      	b.n	8006bd0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f8cb 	bl	8007d54 <SDMMC_ReadFIFO>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	601a      	str	r2, [r3, #0]
        pData++;
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	3301      	adds	r3, #1
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	2b07      	cmp	r3, #7
 8006bd4:	d9ee      	bls.n	8006bb4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bd6:	f7fa fa85 	bl	80010e4 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be4:	d102      	bne.n	8006bec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006be6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bea:	e043      	b.n	8006c74 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0d2      	beq.n	8006ba0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c08:	2308      	movs	r3, #8
 8006c0a:	e033      	b.n	8006c74 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e02a      	b.n	8006c74 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d017      	beq.n	8006c5c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	e021      	b.n	8006c74 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 f88d 	bl	8007d54 <SDMMC_ReadFIFO>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	601a      	str	r2, [r3, #0]
    pData++;
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	3304      	adds	r3, #4
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c46:	f7fa fa4d 	bl	80010e4 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c54:	d102      	bne.n	8006c5c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c5a:	e00b      	b.n	8006c74 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e2      	bne.n	8006c30 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a03      	ldr	r2, [pc, #12]	; (8006c7c <SD_SendSDStatus+0x19c>)
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3730      	adds	r7, #48	; 0x30
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	18000f3a 	.word	0x18000f3a

08006c80 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c94:	e018      	b.n	8006cc8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f001 fb3b 	bl	800831e <SDMMC_CmdSendStatus>
 8006ca8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	e009      	b.n	8006cc8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f001 f8bf 	bl	8007e3e <SDMMC_GetResponse>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f8a9 	bl	8007e3e <SDMMC_GetResponse>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cf6:	d102      	bne.n	8006cfe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006cf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cfc:	e02f      	b.n	8006d5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006cfe:	f107 030c 	add.w	r3, r7, #12
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f879 	bl	8006dfc <SD_FindSCR>
 8006d0a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	e023      	b.n	8006d5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01c      	beq.n	8006d5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	f001 fa0d 	bl	800814c <SDMMC_CmdAppCommand>
 8006d32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	e00f      	b.n	8006d5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2102      	movs	r1, #2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 fa44 	bl	80081d2 <SDMMC_CmdBusWidth>
 8006d4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	e003      	b.n	8006d5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e001      	b.n	8006d5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 f85e 	bl	8007e3e <SDMMC_GetResponse>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d8c:	d102      	bne.n	8006d94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d92:	e02f      	b.n	8006df4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d94:	f107 030c 	add.w	r3, r7, #12
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f82e 	bl	8006dfc <SD_FindSCR>
 8006da0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	e023      	b.n	8006df4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01c      	beq.n	8006df0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f001 f9c2 	bl	800814c <SDMMC_CmdAppCommand>
 8006dc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	e00f      	b.n	8006df4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f9f9 	bl	80081d2 <SDMMC_CmdBusWidth>
 8006de0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	e003      	b.n	8006df4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e001      	b.n	8006df4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006df0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08e      	sub	sp, #56	; 0x38
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e06:	f7fa f96d 	bl	80010e4 <HAL_GetTick>
 8006e0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006e10:	2300      	movs	r3, #0
 8006e12:	60bb      	str	r3, [r7, #8]
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2108      	movs	r1, #8
 8006e22:	4618      	mov	r0, r3
 8006e24:	f001 f84a 	bl	8007ebc <SDMMC_CmdBlockLength>
 8006e28:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	e0ad      	b.n	8006f90 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3c:	041b      	lsls	r3, r3, #16
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f001 f983 	bl	800814c <SDMMC_CmdAppCommand>
 8006e46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	e09e      	b.n	8006f90 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006e58:	2308      	movs	r3, #8
 8006e5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006e5c:	2330      	movs	r3, #48	; 0x30
 8006e5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e60:	2302      	movs	r3, #2
 8006e62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f107 0210 	add.w	r2, r7, #16
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fff4 	bl	8007e64 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f9c9 	bl	8008218 <SDMMC_CmdSendSCR>
 8006e86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d027      	beq.n	8006ede <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	e07e      	b.n	8006f90 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d113      	bne.n	8006ec8 <SD_FindSCR+0xcc>
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d110      	bne.n	8006ec8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 ff52 	bl	8007d54 <SDMMC_ReadFIFO>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 ff4b 	bl	8007d54 <SDMMC_ReadFIFO>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	60fb      	str	r3, [r7, #12]
      index++;
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ec8:	f7fa f90c 	bl	80010e4 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed6:	d102      	bne.n	8006ede <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006ed8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006edc:	e058      	b.n	8006f90 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee4:	f240 532a 	movw	r3, #1322	; 0x52a
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0d1      	beq.n	8006e92 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2208      	movs	r2, #8
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f04:	2308      	movs	r3, #8
 8006f06:	e043      	b.n	8006f90 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e036      	b.n	8006f90 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2220      	movs	r2, #32
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006f38:	2320      	movs	r3, #32
 8006f3a:	e029      	b.n	8006f90 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <SD_FindSCR+0x19c>)
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	061a      	lsls	r2, r3, #24
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f5a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	0e1b      	lsrs	r3, r3, #24
 8006f60:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	601a      	str	r2, [r3, #0]
    scr++;
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	3304      	adds	r3, #4
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	061a      	lsls	r2, r3, #24
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f82:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	0e1b      	lsrs	r3, r3, #24
 8006f88:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3738      	adds	r7, #56	; 0x38
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	18000f3a 	.word	0x18000f3a

08006f9c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e095      	b.n	80070f0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d108      	bne.n	8006fde <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd4:	d009      	beq.n	8006fea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	61da      	str	r2, [r3, #28]
 8006fdc:	e005      	b.n	8006fea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7f9 feaf 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007020:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800702a:	d902      	bls.n	8007032 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e002      	b.n	8007038 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007036:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007040:	d007      	beq.n	8007052 <HAL_SPI_Init+0xa0>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800704a:	d002      	beq.n	8007052 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007094:	ea42 0103 	orr.w	r1, r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	f003 0204 	and.w	r2, r3, #4
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80070ce:	ea42 0103 	orr.w	r1, r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e042      	b.n	8007190 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7f9 fe65 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2224      	movs	r2, #36	; 0x24
 8007126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f82c 	bl	8007198 <UART_SetConfig>
 8007140:	4603      	mov	r3, r0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e022      	b.n	8007190 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fb1c 	bl	8007790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fba3 	bl	80078d4 <UART_CheckIdleState>
 800718e:	4603      	mov	r3, r0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800719c:	b08c      	sub	sp, #48	; 0x30
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	4313      	orrs	r3, r2
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4baa      	ldr	r3, [pc, #680]	; (8007470 <UART_SetConfig+0x2d8>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a9f      	ldr	r2, [pc, #636]	; (8007474 <UART_SetConfig+0x2dc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007200:	4313      	orrs	r3, r2
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800720e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007218:	430b      	orrs	r3, r1
 800721a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	f023 010f 	bic.w	r1, r3, #15
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a90      	ldr	r2, [pc, #576]	; (8007478 <UART_SetConfig+0x2e0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d125      	bne.n	8007288 <UART_SetConfig+0xf0>
 800723c:	4b8f      	ldr	r3, [pc, #572]	; (800747c <UART_SetConfig+0x2e4>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	2b03      	cmp	r3, #3
 8007248:	d81a      	bhi.n	8007280 <UART_SetConfig+0xe8>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0xb8>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007261 	.word	0x08007261
 8007254:	08007271 	.word	0x08007271
 8007258:	08007269 	.word	0x08007269
 800725c:	08007279 	.word	0x08007279
 8007260:	2301      	movs	r3, #1
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007266:	e116      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007268:	2302      	movs	r3, #2
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e112      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007270:	2304      	movs	r3, #4
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007276:	e10e      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007278:	2308      	movs	r3, #8
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727e:	e10a      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007280:	2310      	movs	r3, #16
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007286:	e106      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a7c      	ldr	r2, [pc, #496]	; (8007480 <UART_SetConfig+0x2e8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d138      	bne.n	8007304 <UART_SetConfig+0x16c>
 8007292:	4b7a      	ldr	r3, [pc, #488]	; (800747c <UART_SetConfig+0x2e4>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007298:	f003 030c 	and.w	r3, r3, #12
 800729c:	2b0c      	cmp	r3, #12
 800729e:	d82d      	bhi.n	80072fc <UART_SetConfig+0x164>
 80072a0:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <UART_SetConfig+0x110>)
 80072a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a6:	bf00      	nop
 80072a8:	080072dd 	.word	0x080072dd
 80072ac:	080072fd 	.word	0x080072fd
 80072b0:	080072fd 	.word	0x080072fd
 80072b4:	080072fd 	.word	0x080072fd
 80072b8:	080072ed 	.word	0x080072ed
 80072bc:	080072fd 	.word	0x080072fd
 80072c0:	080072fd 	.word	0x080072fd
 80072c4:	080072fd 	.word	0x080072fd
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072fd 	.word	0x080072fd
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	080072fd 	.word	0x080072fd
 80072d8:	080072f5 	.word	0x080072f5
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e0d8      	b.n	8007496 <UART_SetConfig+0x2fe>
 80072e4:	2302      	movs	r3, #2
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e0d4      	b.n	8007496 <UART_SetConfig+0x2fe>
 80072ec:	2304      	movs	r3, #4
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f2:	e0d0      	b.n	8007496 <UART_SetConfig+0x2fe>
 80072f4:	2308      	movs	r3, #8
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fa:	e0cc      	b.n	8007496 <UART_SetConfig+0x2fe>
 80072fc:	2310      	movs	r3, #16
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007302:	e0c8      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a5e      	ldr	r2, [pc, #376]	; (8007484 <UART_SetConfig+0x2ec>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d125      	bne.n	800735a <UART_SetConfig+0x1c2>
 800730e:	4b5b      	ldr	r3, [pc, #364]	; (800747c <UART_SetConfig+0x2e4>)
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007314:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007318:	2b30      	cmp	r3, #48	; 0x30
 800731a:	d016      	beq.n	800734a <UART_SetConfig+0x1b2>
 800731c:	2b30      	cmp	r3, #48	; 0x30
 800731e:	d818      	bhi.n	8007352 <UART_SetConfig+0x1ba>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d00a      	beq.n	800733a <UART_SetConfig+0x1a2>
 8007324:	2b20      	cmp	r3, #32
 8007326:	d814      	bhi.n	8007352 <UART_SetConfig+0x1ba>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <UART_SetConfig+0x19a>
 800732c:	2b10      	cmp	r3, #16
 800732e:	d008      	beq.n	8007342 <UART_SetConfig+0x1aa>
 8007330:	e00f      	b.n	8007352 <UART_SetConfig+0x1ba>
 8007332:	2300      	movs	r3, #0
 8007334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007338:	e0ad      	b.n	8007496 <UART_SetConfig+0x2fe>
 800733a:	2302      	movs	r3, #2
 800733c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007340:	e0a9      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007342:	2304      	movs	r3, #4
 8007344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007348:	e0a5      	b.n	8007496 <UART_SetConfig+0x2fe>
 800734a:	2308      	movs	r3, #8
 800734c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007350:	e0a1      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007352:	2310      	movs	r3, #16
 8007354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007358:	e09d      	b.n	8007496 <UART_SetConfig+0x2fe>
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a4a      	ldr	r2, [pc, #296]	; (8007488 <UART_SetConfig+0x2f0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d125      	bne.n	80073b0 <UART_SetConfig+0x218>
 8007364:	4b45      	ldr	r3, [pc, #276]	; (800747c <UART_SetConfig+0x2e4>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800736e:	2bc0      	cmp	r3, #192	; 0xc0
 8007370:	d016      	beq.n	80073a0 <UART_SetConfig+0x208>
 8007372:	2bc0      	cmp	r3, #192	; 0xc0
 8007374:	d818      	bhi.n	80073a8 <UART_SetConfig+0x210>
 8007376:	2b80      	cmp	r3, #128	; 0x80
 8007378:	d00a      	beq.n	8007390 <UART_SetConfig+0x1f8>
 800737a:	2b80      	cmp	r3, #128	; 0x80
 800737c:	d814      	bhi.n	80073a8 <UART_SetConfig+0x210>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <UART_SetConfig+0x1f0>
 8007382:	2b40      	cmp	r3, #64	; 0x40
 8007384:	d008      	beq.n	8007398 <UART_SetConfig+0x200>
 8007386:	e00f      	b.n	80073a8 <UART_SetConfig+0x210>
 8007388:	2300      	movs	r3, #0
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738e:	e082      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007390:	2302      	movs	r3, #2
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007396:	e07e      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007398:	2304      	movs	r3, #4
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739e:	e07a      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073a0:	2308      	movs	r3, #8
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a6:	e076      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073a8:	2310      	movs	r3, #16
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e072      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a35      	ldr	r2, [pc, #212]	; (800748c <UART_SetConfig+0x2f4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d12a      	bne.n	8007410 <UART_SetConfig+0x278>
 80073ba:	4b30      	ldr	r3, [pc, #192]	; (800747c <UART_SetConfig+0x2e4>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073c8:	d01a      	beq.n	8007400 <UART_SetConfig+0x268>
 80073ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ce:	d81b      	bhi.n	8007408 <UART_SetConfig+0x270>
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d4:	d00c      	beq.n	80073f0 <UART_SetConfig+0x258>
 80073d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073da:	d815      	bhi.n	8007408 <UART_SetConfig+0x270>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <UART_SetConfig+0x250>
 80073e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e4:	d008      	beq.n	80073f8 <UART_SetConfig+0x260>
 80073e6:	e00f      	b.n	8007408 <UART_SetConfig+0x270>
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ee:	e052      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073f0:	2302      	movs	r3, #2
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f6:	e04e      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073f8:	2304      	movs	r3, #4
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fe:	e04a      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007400:	2308      	movs	r3, #8
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007406:	e046      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740e:	e042      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a17      	ldr	r2, [pc, #92]	; (8007474 <UART_SetConfig+0x2dc>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d13a      	bne.n	8007490 <UART_SetConfig+0x2f8>
 800741a:	4b18      	ldr	r3, [pc, #96]	; (800747c <UART_SetConfig+0x2e4>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007428:	d01a      	beq.n	8007460 <UART_SetConfig+0x2c8>
 800742a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800742e:	d81b      	bhi.n	8007468 <UART_SetConfig+0x2d0>
 8007430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007434:	d00c      	beq.n	8007450 <UART_SetConfig+0x2b8>
 8007436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800743a:	d815      	bhi.n	8007468 <UART_SetConfig+0x2d0>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <UART_SetConfig+0x2b0>
 8007440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007444:	d008      	beq.n	8007458 <UART_SetConfig+0x2c0>
 8007446:	e00f      	b.n	8007468 <UART_SetConfig+0x2d0>
 8007448:	2300      	movs	r3, #0
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e022      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007450:	2302      	movs	r3, #2
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e01e      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007458:	2304      	movs	r3, #4
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e01a      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007460:	2308      	movs	r3, #8
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007466:	e016      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007468:	2310      	movs	r3, #16
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746e:	e012      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007470:	cfff69f3 	.word	0xcfff69f3
 8007474:	40008000 	.word	0x40008000
 8007478:	40013800 	.word	0x40013800
 800747c:	40021000 	.word	0x40021000
 8007480:	40004400 	.word	0x40004400
 8007484:	40004800 	.word	0x40004800
 8007488:	40004c00 	.word	0x40004c00
 800748c:	40005000 	.word	0x40005000
 8007490:	2310      	movs	r3, #16
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4aae      	ldr	r2, [pc, #696]	; (8007754 <UART_SetConfig+0x5bc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	f040 8097 	bne.w	80075d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074a6:	2b08      	cmp	r3, #8
 80074a8:	d823      	bhi.n	80074f2 <UART_SetConfig+0x35a>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <UART_SetConfig+0x318>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074d5 	.word	0x080074d5
 80074b4:	080074f3 	.word	0x080074f3
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074f3 	.word	0x080074f3
 80074c0:	080074e3 	.word	0x080074e3
 80074c4:	080074f3 	.word	0x080074f3
 80074c8:	080074f3 	.word	0x080074f3
 80074cc:	080074f3 	.word	0x080074f3
 80074d0:	080074eb 	.word	0x080074eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d4:	f7fc faca 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 80074d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074da:	e010      	b.n	80074fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074dc:	4b9e      	ldr	r3, [pc, #632]	; (8007758 <UART_SetConfig+0x5c0>)
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074e0:	e00d      	b.n	80074fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e2:	f7fc fa2b 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80074e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074e8:	e009      	b.n	80074fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074f0:	e005      	b.n	80074fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8130 	beq.w	8007766 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	4a94      	ldr	r2, [pc, #592]	; (800775c <UART_SetConfig+0x5c4>)
 800750c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007510:	461a      	mov	r2, r3
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	fbb3 f3f2 	udiv	r3, r3, r2
 8007518:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	d305      	bcc.n	8007536 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	429a      	cmp	r2, r3
 8007534:	d903      	bls.n	800753e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800753c:	e113      	b.n	8007766 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	2200      	movs	r2, #0
 8007542:	60bb      	str	r3, [r7, #8]
 8007544:	60fa      	str	r2, [r7, #12]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	4a84      	ldr	r2, [pc, #528]	; (800775c <UART_SetConfig+0x5c4>)
 800754c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007550:	b29b      	uxth	r3, r3
 8007552:	2200      	movs	r2, #0
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800755c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007560:	f7f8 fe4c 	bl	80001fc <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	020b      	lsls	r3, r1, #8
 8007576:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800757a:	0202      	lsls	r2, r0, #8
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	6849      	ldr	r1, [r1, #4]
 8007580:	0849      	lsrs	r1, r1, #1
 8007582:	2000      	movs	r0, #0
 8007584:	460c      	mov	r4, r1
 8007586:	4605      	mov	r5, r0
 8007588:	eb12 0804 	adds.w	r8, r2, r4
 800758c:	eb43 0905 	adc.w	r9, r3, r5
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	469a      	mov	sl, r3
 8007598:	4693      	mov	fp, r2
 800759a:	4652      	mov	r2, sl
 800759c:	465b      	mov	r3, fp
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	f7f8 fe2b 	bl	80001fc <__aeabi_uldivmod>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4613      	mov	r3, r2
 80075ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b4:	d308      	bcc.n	80075c8 <UART_SetConfig+0x430>
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075bc:	d204      	bcs.n	80075c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6a3a      	ldr	r2, [r7, #32]
 80075c4:	60da      	str	r2, [r3, #12]
 80075c6:	e0ce      	b.n	8007766 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075ce:	e0ca      	b.n	8007766 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d8:	d166      	bne.n	80076a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80075da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075de:	2b08      	cmp	r3, #8
 80075e0:	d827      	bhi.n	8007632 <UART_SetConfig+0x49a>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <UART_SetConfig+0x450>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	08007633 	.word	0x08007633
 80075f8:	08007623 	.word	0x08007623
 80075fc:	08007633 	.word	0x08007633
 8007600:	08007633 	.word	0x08007633
 8007604:	08007633 	.word	0x08007633
 8007608:	0800762b 	.word	0x0800762b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800760c:	f7fc fa2e 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007612:	e014      	b.n	800763e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007614:	f7fc fa40 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8007618:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800761a:	e010      	b.n	800763e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800761c:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <UART_SetConfig+0x5c0>)
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007620:	e00d      	b.n	800763e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007622:	f7fc f98b 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8007626:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007628:	e009      	b.n	800763e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800762a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007630:	e005      	b.n	800763e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800763c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8090 	beq.w	8007766 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	4a44      	ldr	r2, [pc, #272]	; (800775c <UART_SetConfig+0x5c4>)
 800764c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007650:	461a      	mov	r2, r3
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	fbb3 f3f2 	udiv	r3, r3, r2
 8007658:	005a      	lsls	r2, r3, #1
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	441a      	add	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	fbb2 f3f3 	udiv	r3, r2, r3
 800766a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	2b0f      	cmp	r3, #15
 8007670:	d916      	bls.n	80076a0 <UART_SetConfig+0x508>
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007678:	d212      	bcs.n	80076a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	b29b      	uxth	r3, r3
 800767e:	f023 030f 	bic.w	r3, r3, #15
 8007682:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	085b      	lsrs	r3, r3, #1
 8007688:	b29b      	uxth	r3, r3
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	b29a      	uxth	r2, r3
 8007690:	8bfb      	ldrh	r3, [r7, #30]
 8007692:	4313      	orrs	r3, r2
 8007694:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	8bfa      	ldrh	r2, [r7, #30]
 800769c:	60da      	str	r2, [r3, #12]
 800769e:	e062      	b.n	8007766 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076a6:	e05e      	b.n	8007766 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d828      	bhi.n	8007702 <UART_SetConfig+0x56a>
 80076b0:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <UART_SetConfig+0x520>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	080076e5 	.word	0x080076e5
 80076c0:	080076ed 	.word	0x080076ed
 80076c4:	08007703 	.word	0x08007703
 80076c8:	080076f3 	.word	0x080076f3
 80076cc:	08007703 	.word	0x08007703
 80076d0:	08007703 	.word	0x08007703
 80076d4:	08007703 	.word	0x08007703
 80076d8:	080076fb 	.word	0x080076fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076dc:	f7fc f9c6 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 80076e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076e2:	e014      	b.n	800770e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076e4:	f7fc f9d8 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 80076e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ea:	e010      	b.n	800770e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076ec:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <UART_SetConfig+0x5c0>)
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076f0:	e00d      	b.n	800770e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076f2:	f7fc f923 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076f8:	e009      	b.n	800770e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007700:	e005      	b.n	800770e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800770c:	bf00      	nop
    }

    if (pclk != 0U)
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d028      	beq.n	8007766 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	4a10      	ldr	r2, [pc, #64]	; (800775c <UART_SetConfig+0x5c4>)
 800771a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800771e:	461a      	mov	r2, r3
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	fbb3 f2f2 	udiv	r2, r3, r2
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	441a      	add	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	fbb2 f3f3 	udiv	r3, r2, r3
 8007736:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	2b0f      	cmp	r3, #15
 800773c:	d910      	bls.n	8007760 <UART_SetConfig+0x5c8>
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007744:	d20c      	bcs.n	8007760 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	b29a      	uxth	r2, r3
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60da      	str	r2, [r3, #12]
 8007750:	e009      	b.n	8007766 <UART_SetConfig+0x5ce>
 8007752:	bf00      	nop
 8007754:	40008000 	.word	0x40008000
 8007758:	00f42400 	.word	0x00f42400
 800775c:	0800c994 	.word	0x0800c994
      }
      else
      {
        ret = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2201      	movs	r2, #1
 800776a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2201      	movs	r2, #1
 8007772:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2200      	movs	r2, #0
 800777a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2200      	movs	r2, #0
 8007780:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007782:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007786:	4618      	mov	r0, r3
 8007788:	3730      	adds	r7, #48	; 0x30
 800778a:	46bd      	mov	sp, r7
 800778c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788e:	d10a      	bne.n	80078a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e4:	f7f9 fbfe 	bl	80010e4 <HAL_GetTick>
 80078e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10e      	bne.n	8007916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f82f 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e025      	b.n	8007962 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b04      	cmp	r3, #4
 8007922:	d10e      	bne.n	8007942 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f819 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e00f      	b.n	8007962 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b09c      	sub	sp, #112	; 0x70
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	4613      	mov	r3, r2
 8007978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800797a:	e0a9      	b.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800797c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007982:	f000 80a5 	beq.w	8007ad0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007986:	f7f9 fbad 	bl	80010e4 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007992:	429a      	cmp	r2, r3
 8007994:	d302      	bcc.n	800799c <UART_WaitOnFlagUntilTimeout+0x32>
 8007996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007998:	2b00      	cmp	r3, #0
 800799a:	d140      	bne.n	8007a1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079b0:	667b      	str	r3, [r7, #100]	; 0x64
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e6      	bne.n	800799c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	663b      	str	r3, [r7, #96]	; 0x60
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80079f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e5      	bne.n	80079ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e069      	b.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d051      	beq.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a3a:	d149      	bne.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	637b      	str	r3, [r7, #52]	; 0x34
 8007a66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	613b      	str	r3, [r7, #16]
   return(result);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a98:	623a      	str	r2, [r7, #32]
 8007a9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	69f9      	ldr	r1, [r7, #28]
 8007a9e:	6a3a      	ldr	r2, [r7, #32]
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e5      	bne.n	8007a78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e010      	b.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69da      	ldr	r2, [r3, #28]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	bf0c      	ite	eq
 8007ae0:	2301      	moveq	r3, #1
 8007ae2:	2300      	movne	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	f43f af46 	beq.w	800797c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3770      	adds	r7, #112	; 0x70
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e027      	b.n	8007b60 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2224      	movs	r2, #36	; 0x24
 8007b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e02d      	b.n	8007be0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2224      	movs	r2, #36	; 0x24
 8007b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0201 	bic.w	r2, r2, #1
 8007baa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f84f 	bl	8007c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e02d      	b.n	8007c5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2224      	movs	r2, #36	; 0x24
 8007c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0201 	bic.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f811 	bl	8007c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d108      	bne.n	8007c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c84:	e031      	b.n	8007cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c86:	2308      	movs	r3, #8
 8007c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	0e5b      	lsrs	r3, r3, #25
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	0f5b      	lsrs	r3, r3, #29
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	7b3a      	ldrb	r2, [r7, #12]
 8007cb2:	4911      	ldr	r1, [pc, #68]	; (8007cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8007cb4:	5c8a      	ldrb	r2, [r1, r2]
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cba:	7b3a      	ldrb	r2, [r7, #12]
 8007cbc:	490f      	ldr	r1, [pc, #60]	; (8007cfc <UARTEx_SetNbDataToProcess+0x98>)
 8007cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	7b7a      	ldrb	r2, [r7, #13]
 8007cd0:	4909      	ldr	r1, [pc, #36]	; (8007cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8007cd2:	5c8a      	ldrb	r2, [r1, r2]
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cd8:	7b7a      	ldrb	r2, [r7, #13]
 8007cda:	4908      	ldr	r1, [pc, #32]	; (8007cfc <UARTEx_SetNbDataToProcess+0x98>)
 8007cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cea:	bf00      	nop
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	0800c9ac 	.word	0x0800c9ac
 8007cfc:	0800c9b4 	.word	0x0800c9b4

08007d00 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007d00:	b084      	sub	sp, #16
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	f107 001c 	add.w	r0, r7, #28
 8007d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007d16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007d18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007d1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8007d1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8007d22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8007d26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <SDMMC_Init+0x50>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	b004      	add	sp, #16
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	ffc02c00 	.word	0xffc02c00

08007d54 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f043 0203 	orr.w	r2, r3, #3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007da4:	2002      	movs	r0, #2
 8007da6:	f7f9 f9a9 	bl	80010fc <HAL_Delay>

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0303 	and.w	r3, r3, #3
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007dee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007df4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007dfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <SDMMC_SendCommand+0x50>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	fffee0c0 	.word	0xfffee0c0

08007e24 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	b2db      	uxtb	r3, r3
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b085      	sub	sp, #20
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3314      	adds	r3, #20
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	4413      	add	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e8a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e90:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0

}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007eca:	2310      	movs	r3, #16
 8007ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007edc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ede:	f107 0308 	add.w	r3, r7, #8
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff ff73 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eee:	2110      	movs	r1, #16
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa7b 	bl	80083ec <SDMMC_GetCmdResp1>
 8007ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007f10:	2311      	movs	r3, #17
 8007f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f24:	f107 0308 	add.w	r3, r7, #8
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff ff50 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f34:	2111      	movs	r1, #17
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa58 	bl	80083ec <SDMMC_GetCmdResp1>
 8007f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007f56:	2312      	movs	r3, #18
 8007f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f6a:	f107 0308 	add.w	r3, r7, #8
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff ff2d 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f7a:	2112      	movs	r1, #18
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa35 	bl	80083ec <SDMMC_GetCmdResp1>
 8007f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f84:	69fb      	ldr	r3, [r7, #28]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3720      	adds	r7, #32
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b088      	sub	sp, #32
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f9c:	2318      	movs	r3, #24
 8007f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fb0:	f107 0308 	add.w	r3, r7, #8
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff ff0a 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc0:	2118      	movs	r1, #24
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fa12 	bl	80083ec <SDMMC_GetCmdResp1>
 8007fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fca:	69fb      	ldr	r3, [r7, #28]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007fe2:	2319      	movs	r3, #25
 8007fe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ff4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fee7 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008002:	f241 3288 	movw	r2, #5000	; 0x1388
 8008006:	2119      	movs	r1, #25
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f9ef 	bl	80083ec <SDMMC_GetCmdResp1>
 800800e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008010:	69fb      	ldr	r3, [r7, #28]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3720      	adds	r7, #32
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008028:	230c      	movs	r3, #12
 800802a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800802c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008032:	2300      	movs	r3, #0
 8008034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800803a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008054:	f107 0308 	add.w	r3, r7, #8
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff feb8 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008060:	4a08      	ldr	r2, [pc, #32]	; (8008084 <SDMMC_CmdStopTransfer+0x68>)
 8008062:	210c      	movs	r1, #12
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f9c1 	bl	80083ec <SDMMC_GetCmdResp1>
 800806a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008078:	69fb      	ldr	r3, [r7, #28]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3720      	adds	r7, #32
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	05f5e100 	.word	0x05f5e100

08008088 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	; 0x28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008098:	2307      	movs	r3, #7
 800809a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800809c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080a0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080a2:	2300      	movs	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080aa:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080ac:	f107 0310 	add.w	r3, r7, #16
 80080b0:	4619      	mov	r1, r3
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7ff fe8c 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80080b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080bc:	2107      	movs	r1, #7
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f994 	bl	80083ec <SDMMC_GetCmdResp1>
 80080c4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3728      	adds	r7, #40	; 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80080e0:	2300      	movs	r3, #0
 80080e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff fe6b 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fbb8 	bl	8008870 <SDMMC_GetCmdError>
 8008100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008102:	69fb      	ldr	r3, [r7, #28]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008114:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800811a:	2308      	movs	r3, #8
 800811c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800811e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800812c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800812e:	f107 0308 	add.w	r3, r7, #8
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff fe4b 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fb4a 	bl	80087d4 <SDMMC_GetCmdResp7>
 8008140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008142:	69fb      	ldr	r3, [r7, #28]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3720      	adds	r7, #32
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800815a:	2337      	movs	r3, #55	; 0x37
 800815c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800815e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800816c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fe2b 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800817a:	f241 3288 	movw	r2, #5000	; 0x1388
 800817e:	2137      	movs	r1, #55	; 0x37
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f933 	bl	80083ec <SDMMC_GetCmdResp1>
 8008186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008188:	69fb      	ldr	r3, [r7, #28]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b088      	sub	sp, #32
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80081a0:	2329      	movs	r3, #41	; 0x29
 80081a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081b4:	f107 0308 	add.w	r3, r7, #8
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff fe08 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fa4f 	bl	8008664 <SDMMC_GetCmdResp3>
 80081c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081c8:	69fb      	ldr	r3, [r7, #28]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b088      	sub	sp, #32
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80081e0:	2306      	movs	r3, #6
 80081e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081f4:	f107 0308 	add.w	r3, r7, #8
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff fde8 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008200:	f241 3288 	movw	r2, #5000	; 0x1388
 8008204:	2106      	movs	r1, #6
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f8f0 	bl	80083ec <SDMMC_GetCmdResp1>
 800820c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800820e:	69fb      	ldr	r3, [r7, #28]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008224:	2333      	movs	r3, #51	; 0x33
 8008226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800822c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800822e:	2300      	movs	r3, #0
 8008230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008236:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008238:	f107 0308 	add.w	r3, r7, #8
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff fdc6 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008244:	f241 3288 	movw	r2, #5000	; 0x1388
 8008248:	2133      	movs	r1, #51	; 0x33
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f8ce 	bl	80083ec <SDMMC_GetCmdResp1>
 8008250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008252:	69fb      	ldr	r3, [r7, #28]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008268:	2302      	movs	r3, #2
 800826a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800826c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800827a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800827c:	f107 0308 	add.w	r3, r7, #8
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fda4 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9a1 	bl	80085d0 <SDMMC_GetCmdResp2>
 800828e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008290:	69fb      	ldr	r3, [r7, #28]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3720      	adds	r7, #32
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b088      	sub	sp, #32
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80082a8:	2309      	movs	r3, #9
 80082aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80082ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80082b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082bc:	f107 0308 	add.w	r3, r7, #8
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fd84 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f981 	bl	80085d0 <SDMMC_GetCmdResp2>
 80082ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082d0:	69fb      	ldr	r3, [r7, #28]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b088      	sub	sp, #32
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80082e8:	2303      	movs	r3, #3
 80082ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082fc:	f107 0308 	add.w	r3, r7, #8
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff fd64 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	2103      	movs	r1, #3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f9e9 	bl	80086e4 <SDMMC_GetCmdResp6>
 8008312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008314:	69fb      	ldr	r3, [r7, #28]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b088      	sub	sp, #32
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800832c:	230d      	movs	r3, #13
 800832e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800833a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800833e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008340:	f107 0308 	add.w	r3, r7, #8
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fd42 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800834c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008350:	210d      	movs	r1, #13
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f84a 	bl	80083ec <SDMMC_GetCmdResp1>
 8008358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800835a:	69fb      	ldr	r3, [r7, #28]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3720      	adds	r7, #32
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008370:	230d      	movs	r3, #13
 8008372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800837a:	2300      	movs	r3, #0
 800837c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800837e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008382:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008384:	f107 0308 	add.w	r3, r7, #8
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff fd20 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008390:	f241 3288 	movw	r2, #5000	; 0x1388
 8008394:	210d      	movs	r1, #13
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f828 	bl	80083ec <SDMMC_GetCmdResp1>
 800839c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800839e:	69fb      	ldr	r3, [r7, #28]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80083b4:	230b      	movs	r3, #11
 80083b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083c8:	f107 0308 	add.w	r3, r7, #8
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff fcfe 	bl	8007dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80083d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d8:	210b      	movs	r1, #11
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f806 	bl	80083ec <SDMMC_GetCmdResp1>
 80083e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083e2:	69fb      	ldr	r3, [r7, #28]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3720      	adds	r7, #32
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	460b      	mov	r3, r1
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80083fa:	4b70      	ldr	r3, [pc, #448]	; (80085bc <SDMMC_GetCmdResp1+0x1d0>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a70      	ldr	r2, [pc, #448]	; (80085c0 <SDMMC_GetCmdResp1+0x1d4>)
 8008400:	fba2 2303 	umull	r2, r3, r2, r3
 8008404:	0a5a      	lsrs	r2, r3, #9
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	fb02 f303 	mul.w	r3, r2, r3
 800840c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	1e5a      	subs	r2, r3, #1
 8008412:	61fa      	str	r2, [r7, #28]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d102      	bne.n	800841e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800841c:	e0c9      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	4b67      	ldr	r3, [pc, #412]	; (80085c4 <SDMMC_GetCmdResp1+0x1d8>)
 8008428:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0ef      	beq.n	800840e <SDMMC_GetCmdResp1+0x22>
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1ea      	bne.n	800840e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2204      	movs	r2, #4
 8008448:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800844a:	2304      	movs	r3, #4
 800844c:	e0b1      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008460:	2301      	movs	r3, #1
 8008462:	e0a6      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4a58      	ldr	r2, [pc, #352]	; (80085c8 <SDMMC_GetCmdResp1+0x1dc>)
 8008468:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f7ff fcda 	bl	8007e24 <SDMMC_GetCommandResponse>
 8008470:	4603      	mov	r3, r0
 8008472:	461a      	mov	r2, r3
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	4293      	cmp	r3, r2
 8008478:	d001      	beq.n	800847e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800847a:	2301      	movs	r3, #1
 800847c:	e099      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800847e:	2100      	movs	r1, #0
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff fcdc 	bl	8007e3e <SDMMC_GetResponse>
 8008486:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4b50      	ldr	r3, [pc, #320]	; (80085cc <SDMMC_GetCmdResp1+0x1e0>)
 800848c:	4013      	ands	r3, r2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008492:	2300      	movs	r3, #0
 8008494:	e08d      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	da02      	bge.n	80084a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800849c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084a0:	e087      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80084ac:	2340      	movs	r3, #64	; 0x40
 80084ae:	e080      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80084ba:	2380      	movs	r3, #128	; 0x80
 80084bc:	e079      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80084c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084cc:	e071      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80084d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084dc:	e069      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80084e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ec:	e061      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80084f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084fc:	e059      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800850c:	e051      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800851c:	e049      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800852c:	e041      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800853c:	e039      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800854c:	e031      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008558:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800855c:	e029      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008568:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800856c:	e021      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008578:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800857c:	e019      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008588:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800858c:	e011      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008598:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800859c:	e009      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f003 0308 	and.w	r3, r3, #8
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80085a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80085ac:	e001      	b.n	80085b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80085ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3720      	adds	r7, #32
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000000 	.word	0x20000000
 80085c0:	10624dd3 	.word	0x10624dd3
 80085c4:	00200045 	.word	0x00200045
 80085c8:	002000c5 	.word	0x002000c5
 80085cc:	fdffe008 	.word	0xfdffe008

080085d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085d8:	4b1f      	ldr	r3, [pc, #124]	; (8008658 <SDMMC_GetCmdResp2+0x88>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a1f      	ldr	r2, [pc, #124]	; (800865c <SDMMC_GetCmdResp2+0x8c>)
 80085de:	fba2 2303 	umull	r2, r3, r2, r3
 80085e2:	0a5b      	lsrs	r3, r3, #9
 80085e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e8:	fb02 f303 	mul.w	r3, r2, r3
 80085ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1e5a      	subs	r2, r3, #1
 80085f2:	60fa      	str	r2, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085fc:	e026      	b.n	800864c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0ef      	beq.n	80085ee <SDMMC_GetCmdResp2+0x1e>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1ea      	bne.n	80085ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b00      	cmp	r3, #0
 8008622:	d004      	beq.n	800862e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2204      	movs	r2, #4
 8008628:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800862a:	2304      	movs	r3, #4
 800862c:	e00e      	b.n	800864c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008640:	2301      	movs	r3, #1
 8008642:	e003      	b.n	800864c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a06      	ldr	r2, [pc, #24]	; (8008660 <SDMMC_GetCmdResp2+0x90>)
 8008648:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	20000000 	.word	0x20000000
 800865c:	10624dd3 	.word	0x10624dd3
 8008660:	002000c5 	.word	0x002000c5

08008664 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800866c:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <SDMMC_GetCmdResp3+0x74>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a1a      	ldr	r2, [pc, #104]	; (80086dc <SDMMC_GetCmdResp3+0x78>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	0a5b      	lsrs	r3, r3, #9
 8008678:	f241 3288 	movw	r2, #5000	; 0x1388
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	1e5a      	subs	r2, r3, #1
 8008686:	60fa      	str	r2, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800868c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008690:	e01b      	b.n	80086ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008696:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0ef      	beq.n	8008682 <SDMMC_GetCmdResp3+0x1e>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1ea      	bne.n	8008682 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2204      	movs	r2, #4
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086be:	2304      	movs	r3, #4
 80086c0:	e003      	b.n	80086ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a06      	ldr	r2, [pc, #24]	; (80086e0 <SDMMC_GetCmdResp3+0x7c>)
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	20000000 	.word	0x20000000
 80086dc:	10624dd3 	.word	0x10624dd3
 80086e0:	002000c5 	.word	0x002000c5

080086e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	460b      	mov	r3, r1
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086f2:	4b35      	ldr	r3, [pc, #212]	; (80087c8 <SDMMC_GetCmdResp6+0xe4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a35      	ldr	r2, [pc, #212]	; (80087cc <SDMMC_GetCmdResp6+0xe8>)
 80086f8:	fba2 2303 	umull	r2, r3, r2, r3
 80086fc:	0a5b      	lsrs	r3, r3, #9
 80086fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	1e5a      	subs	r2, r3, #1
 800870c:	61fa      	str	r2, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008712:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008716:	e052      	b.n	80087be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0ef      	beq.n	8008708 <SDMMC_GetCmdResp6+0x24>
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1ea      	bne.n	8008708 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2204      	movs	r2, #4
 8008742:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008744:	2304      	movs	r3, #4
 8008746:	e03a      	b.n	80087be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800875a:	2301      	movs	r3, #1
 800875c:	e02f      	b.n	80087be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff fb60 	bl	8007e24 <SDMMC_GetCommandResponse>
 8008764:	4603      	mov	r3, r0
 8008766:	461a      	mov	r2, r3
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	4293      	cmp	r3, r2
 800876c:	d001      	beq.n	8008772 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800876e:	2301      	movs	r3, #1
 8008770:	e025      	b.n	80087be <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4a16      	ldr	r2, [pc, #88]	; (80087d0 <SDMMC_GetCmdResp6+0xec>)
 8008776:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008778:	2100      	movs	r1, #0
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7ff fb5f 	bl	8007e3e <SDMMC_GetResponse>
 8008780:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	b29a      	uxth	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008796:	2300      	movs	r3, #0
 8008798:	e011      	b.n	80087be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80087a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087a8:	e009      	b.n	80087be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80087b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087b8:	e001      	b.n	80087be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000000 	.word	0x20000000
 80087cc:	10624dd3 	.word	0x10624dd3
 80087d0:	002000c5 	.word	0x002000c5

080087d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087dc:	4b22      	ldr	r3, [pc, #136]	; (8008868 <SDMMC_GetCmdResp7+0x94>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a22      	ldr	r2, [pc, #136]	; (800886c <SDMMC_GetCmdResp7+0x98>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	0a5b      	lsrs	r3, r3, #9
 80087e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ec:	fb02 f303 	mul.w	r3, r2, r3
 80087f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	1e5a      	subs	r2, r3, #1
 80087f6:	60fa      	str	r2, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008800:	e02c      	b.n	800885c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008806:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0ef      	beq.n	80087f2 <SDMMC_GetCmdResp7+0x1e>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1ea      	bne.n	80087f2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2204      	movs	r2, #4
 800882c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800882e:	2304      	movs	r3, #4
 8008830:	e014      	b.n	800885c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008844:	2301      	movs	r3, #1
 8008846:	e009      	b.n	800885c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2240      	movs	r2, #64	; 0x40
 8008858:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800885a:	2300      	movs	r3, #0

}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	20000000 	.word	0x20000000
 800886c:	10624dd3 	.word	0x10624dd3

08008870 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008878:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <SDMMC_GetCmdError+0x50>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a11      	ldr	r2, [pc, #68]	; (80088c4 <SDMMC_GetCmdError+0x54>)
 800887e:	fba2 2303 	umull	r2, r3, r2, r3
 8008882:	0a5b      	lsrs	r3, r3, #9
 8008884:	f241 3288 	movw	r2, #5000	; 0x1388
 8008888:	fb02 f303 	mul.w	r3, r2, r3
 800888c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	1e5a      	subs	r2, r3, #1
 8008892:	60fa      	str	r2, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d102      	bne.n	800889e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800889c:	e009      	b.n	80088b2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f1      	beq.n	800888e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a06      	ldr	r2, [pc, #24]	; (80088c8 <SDMMC_GetCmdError+0x58>)
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	20000000 	.word	0x20000000
 80088c4:	10624dd3 	.word	0x10624dd3
 80088c8:	002000c5 	.word	0x002000c5

080088cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088cc:	b084      	sub	sp, #16
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	f107 001c 	add.w	r0, r7, #28
 80088da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 faf6 	bl	8009edc <USB_CoreReset>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80088f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	639a      	str	r2, [r3, #56]	; 0x38
 8008906:	e005      	b.n	8008914 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008914:	7bfb      	ldrb	r3, [r7, #15]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008920:	b004      	add	sp, #16
 8008922:	4770      	bx	lr

08008924 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	4613      	mov	r3, r2
 8008930:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d165      	bne.n	8008a04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4a3e      	ldr	r2, [pc, #248]	; (8008a34 <USB_SetTurnaroundTime+0x110>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d906      	bls.n	800894e <USB_SetTurnaroundTime+0x2a>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4a3d      	ldr	r2, [pc, #244]	; (8008a38 <USB_SetTurnaroundTime+0x114>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d202      	bcs.n	800894e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008948:	230f      	movs	r3, #15
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	e05c      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4a39      	ldr	r2, [pc, #228]	; (8008a38 <USB_SetTurnaroundTime+0x114>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d306      	bcc.n	8008964 <USB_SetTurnaroundTime+0x40>
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	4a38      	ldr	r2, [pc, #224]	; (8008a3c <USB_SetTurnaroundTime+0x118>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d202      	bcs.n	8008964 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800895e:	230e      	movs	r3, #14
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	e051      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4a35      	ldr	r2, [pc, #212]	; (8008a3c <USB_SetTurnaroundTime+0x118>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d306      	bcc.n	800897a <USB_SetTurnaroundTime+0x56>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4a34      	ldr	r2, [pc, #208]	; (8008a40 <USB_SetTurnaroundTime+0x11c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d202      	bcs.n	800897a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008974:	230d      	movs	r3, #13
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e046      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4a30      	ldr	r2, [pc, #192]	; (8008a40 <USB_SetTurnaroundTime+0x11c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d306      	bcc.n	8008990 <USB_SetTurnaroundTime+0x6c>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	4a2f      	ldr	r2, [pc, #188]	; (8008a44 <USB_SetTurnaroundTime+0x120>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d802      	bhi.n	8008990 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800898a:	230c      	movs	r3, #12
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	e03b      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4a2c      	ldr	r2, [pc, #176]	; (8008a44 <USB_SetTurnaroundTime+0x120>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d906      	bls.n	80089a6 <USB_SetTurnaroundTime+0x82>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4a2b      	ldr	r2, [pc, #172]	; (8008a48 <USB_SetTurnaroundTime+0x124>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d802      	bhi.n	80089a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089a0:	230b      	movs	r3, #11
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e030      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	4a27      	ldr	r2, [pc, #156]	; (8008a48 <USB_SetTurnaroundTime+0x124>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d906      	bls.n	80089bc <USB_SetTurnaroundTime+0x98>
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4a26      	ldr	r2, [pc, #152]	; (8008a4c <USB_SetTurnaroundTime+0x128>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d802      	bhi.n	80089bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089b6:	230a      	movs	r3, #10
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	e025      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4a23      	ldr	r2, [pc, #140]	; (8008a4c <USB_SetTurnaroundTime+0x128>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d906      	bls.n	80089d2 <USB_SetTurnaroundTime+0xae>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4a22      	ldr	r2, [pc, #136]	; (8008a50 <USB_SetTurnaroundTime+0x12c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d202      	bcs.n	80089d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80089cc:	2309      	movs	r3, #9
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	e01a      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	4a1e      	ldr	r2, [pc, #120]	; (8008a50 <USB_SetTurnaroundTime+0x12c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d306      	bcc.n	80089e8 <USB_SetTurnaroundTime+0xc4>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4a1d      	ldr	r2, [pc, #116]	; (8008a54 <USB_SetTurnaroundTime+0x130>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d802      	bhi.n	80089e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80089e2:	2308      	movs	r3, #8
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	e00f      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4a1a      	ldr	r2, [pc, #104]	; (8008a54 <USB_SetTurnaroundTime+0x130>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d906      	bls.n	80089fe <USB_SetTurnaroundTime+0xda>
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4a19      	ldr	r2, [pc, #100]	; (8008a58 <USB_SetTurnaroundTime+0x134>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d202      	bcs.n	80089fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80089f8:	2307      	movs	r3, #7
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	e004      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80089fe:	2306      	movs	r3, #6
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	e001      	b.n	8008a08 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a04:	2309      	movs	r3, #9
 8008a06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	029b      	lsls	r3, r3, #10
 8008a1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a20:	431a      	orrs	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	00d8acbf 	.word	0x00d8acbf
 8008a38:	00e4e1c0 	.word	0x00e4e1c0
 8008a3c:	00f42400 	.word	0x00f42400
 8008a40:	01067380 	.word	0x01067380
 8008a44:	011a499f 	.word	0x011a499f
 8008a48:	01312cff 	.word	0x01312cff
 8008a4c:	014ca43f 	.word	0x014ca43f
 8008a50:	016e3600 	.word	0x016e3600
 8008a54:	01a6ab1f 	.word	0x01a6ab1f
 8008a58:	01e84800 	.word	0x01e84800

08008a5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f043 0201 	orr.w	r2, r3, #1
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f023 0201 	bic.w	r2, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d115      	bne.n	8008aee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ace:	2001      	movs	r0, #1
 8008ad0:	f7f8 fb14 	bl	80010fc <HAL_Delay>
      ms++;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 f985 	bl	8009dea <USB_GetMode>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d01e      	beq.n	8008b24 <USB_SetCurrentMode+0x84>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b31      	cmp	r3, #49	; 0x31
 8008aea:	d9f0      	bls.n	8008ace <USB_SetCurrentMode+0x2e>
 8008aec:	e01a      	b.n	8008b24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d115      	bne.n	8008b20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b00:	2001      	movs	r0, #1
 8008b02:	f7f8 fafb 	bl	80010fc <HAL_Delay>
      ms++;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f96c 	bl	8009dea <USB_GetMode>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <USB_SetCurrentMode+0x84>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b31      	cmp	r3, #49	; 0x31
 8008b1c:	d9f0      	bls.n	8008b00 <USB_SetCurrentMode+0x60>
 8008b1e:	e001      	b.n	8008b24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e005      	b.n	8008b30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b32      	cmp	r3, #50	; 0x32
 8008b28:	d101      	bne.n	8008b2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e000      	b.n	8008b30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b38:	b084      	sub	sp, #16
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b086      	sub	sp, #24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b52:	2300      	movs	r3, #0
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	e009      	b.n	8008b6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	3340      	adds	r3, #64	; 0x40
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b0e      	cmp	r3, #14
 8008b70:	d9f2      	bls.n	8008b58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d11c      	bne.n	8008bb2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b86:	f043 0302 	orr.w	r3, r3, #2
 8008b8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	e005      	b.n	8008bbe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	461a      	mov	r2, r3
 8008bda:	680b      	ldr	r3, [r1, #0]
 8008bdc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bde:	2103      	movs	r1, #3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f959 	bl	8008e98 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008be6:	2110      	movs	r1, #16
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f8f1 	bl	8008dd0 <USB_FlushTxFifo>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f91d 	bl	8008e38 <USB_FlushRxFifo>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0e:	461a      	mov	r2, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c26:	461a      	mov	r2, r3
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
 8008c30:	e043      	b.n	8008cba <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c48:	d118      	bne.n	8008c7c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	e013      	b.n	8008c8e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c72:	461a      	mov	r2, r3
 8008c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	e008      	b.n	8008c8e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c88:	461a      	mov	r2, r3
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cac:	461a      	mov	r2, r3
 8008cae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d3b7      	bcc.n	8008c32 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	e043      	b.n	8008d50 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cde:	d118      	bne.n	8008d12 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	e013      	b.n	8008d24 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	e008      	b.n	8008d24 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1e:	461a      	mov	r2, r3
 8008d20:	2300      	movs	r3, #0
 8008d22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d30:	461a      	mov	r2, r3
 8008d32:	2300      	movs	r3, #0
 8008d34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d42:	461a      	mov	r2, r3
 8008d44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d3b7      	bcc.n	8008cc8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f043 0210 	orr.w	r2, r3, #16
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	4b10      	ldr	r3, [pc, #64]	; (8008dcc <USB_DevInit+0x294>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	f043 0208 	orr.w	r2, r3, #8
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d107      	bne.n	8008dba <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008db2:	f043 0304 	orr.w	r3, r3, #4
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dc6:	b004      	add	sp, #16
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	803c3800 	.word	0x803c3800

08008dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3301      	adds	r3, #1
 8008de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4a13      	ldr	r2, [pc, #76]	; (8008e34 <USB_FlushTxFifo+0x64>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d901      	bls.n	8008df0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e01b      	b.n	8008e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	daf2      	bge.n	8008dde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	019b      	lsls	r3, r3, #6
 8008e00:	f043 0220 	orr.w	r2, r3, #32
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4a08      	ldr	r2, [pc, #32]	; (8008e34 <USB_FlushTxFifo+0x64>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d901      	bls.n	8008e1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e006      	b.n	8008e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	d0f0      	beq.n	8008e08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	00030d40 	.word	0x00030d40

08008e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4a11      	ldr	r2, [pc, #68]	; (8008e94 <USB_FlushRxFifo+0x5c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d901      	bls.n	8008e56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e018      	b.n	8008e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	daf2      	bge.n	8008e44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2210      	movs	r2, #16
 8008e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a08      	ldr	r2, [pc, #32]	; (8008e94 <USB_FlushRxFifo+0x5c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d901      	bls.n	8008e7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e006      	b.n	8008e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0310 	and.w	r3, r3, #16
 8008e82:	2b10      	cmp	r3, #16
 8008e84:	d0f0      	beq.n	8008e68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	00030d40 	.word	0x00030d40

08008e98 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	68f9      	ldr	r1, [r7, #12]
 8008eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b087      	sub	sp, #28
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0306 	and.w	r3, r3, #6
 8008ee2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d002      	beq.n	8008ef0 <USB_GetDevSpeed+0x26>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b06      	cmp	r3, #6
 8008eee:	d102      	bne.n	8008ef6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	75fb      	strb	r3, [r7, #23]
 8008ef4:	e001      	b.n	8008efa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008ef6:	230f      	movs	r3, #15
 8008ef8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	785b      	ldrb	r3, [r3, #1]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d13a      	bne.n	8008f9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2a:	69da      	ldr	r2, [r3, #28]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	f003 030f 	and.w	r3, r3, #15
 8008f34:	2101      	movs	r1, #1
 8008f36:	fa01 f303 	lsl.w	r3, r1, r3
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	68f9      	ldr	r1, [r7, #12]
 8008f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f42:	4313      	orrs	r3, r2
 8008f44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d155      	bne.n	8009008 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	791b      	ldrb	r3, [r3, #4]
 8008f76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	059b      	lsls	r3, r3, #22
 8008f7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f80:	4313      	orrs	r3, r2
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	0151      	lsls	r1, r2, #5
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	440a      	add	r2, r1
 8008f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	e036      	b.n	8009008 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa0:	69da      	ldr	r2, [r3, #28]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	f003 030f 	and.w	r3, r3, #15
 8008faa:	2101      	movs	r1, #1
 8008fac:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb0:	041b      	lsls	r3, r3, #16
 8008fb2:	68f9      	ldr	r1, [r7, #12]
 8008fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d11a      	bne.n	8009008 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	791b      	ldrb	r3, [r3, #4]
 8008fec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009006:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d161      	bne.n	80090f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800904a:	d11f      	bne.n	800908c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	0151      	lsls	r1, r2, #5
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	440a      	add	r2, r1
 8009062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009066:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800906a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	440a      	add	r2, r1
 8009082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800908a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	2101      	movs	r1, #1
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	43db      	mvns	r3, r3
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ac:	4013      	ands	r3, r2
 80090ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	69da      	ldr	r2, [r3, #28]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	f003 030f 	and.w	r3, r3, #15
 80090c0:	2101      	movs	r1, #1
 80090c2:	fa01 f303 	lsl.w	r3, r1, r3
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	43db      	mvns	r3, r3
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090d0:	4013      	ands	r3, r2
 80090d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	0159      	lsls	r1, r3, #5
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	440b      	add	r3, r1
 80090ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ee:	4619      	mov	r1, r3
 80090f0:	4b35      	ldr	r3, [pc, #212]	; (80091c8 <USB_DeactivateEndpoint+0x1b0>)
 80090f2:	4013      	ands	r3, r2
 80090f4:	600b      	str	r3, [r1, #0]
 80090f6:	e060      	b.n	80091ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800910a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800910e:	d11f      	bne.n	8009150 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	440a      	add	r2, r1
 8009126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800912a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800912e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	440a      	add	r2, r1
 8009146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800914a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800914e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	2101      	movs	r1, #1
 8009162:	fa01 f303 	lsl.w	r3, r1, r3
 8009166:	041b      	lsls	r3, r3, #16
 8009168:	43db      	mvns	r3, r3
 800916a:	68f9      	ldr	r1, [r7, #12]
 800916c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009170:	4013      	ands	r3, r2
 8009172:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	f003 030f 	and.w	r3, r3, #15
 8009184:	2101      	movs	r1, #1
 8009186:	fa01 f303 	lsl.w	r3, r1, r3
 800918a:	041b      	lsls	r3, r3, #16
 800918c:	43db      	mvns	r3, r3
 800918e:	68f9      	ldr	r1, [r7, #12]
 8009190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009194:	4013      	ands	r3, r2
 8009196:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	0159      	lsls	r1, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	440b      	add	r3, r1
 80091ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b2:	4619      	mov	r1, r3
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <USB_DeactivateEndpoint+0x1b4>)
 80091b6:	4013      	ands	r3, r2
 80091b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	ec337800 	.word	0xec337800
 80091cc:	eff37800 	.word	0xeff37800

080091d0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	785b      	ldrb	r3, [r3, #1]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	f040 810a 	bne.w	8009402 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d132      	bne.n	800925c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	0151      	lsls	r1, r2, #5
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	440a      	add	r2, r1
 8009230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	0151      	lsls	r1, r2, #5
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	440a      	add	r2, r1
 8009250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009254:	0cdb      	lsrs	r3, r3, #19
 8009256:	04db      	lsls	r3, r3, #19
 8009258:	6113      	str	r3, [r2, #16]
 800925a:	e074      	b.n	8009346 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	0151      	lsls	r1, r2, #5
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	440a      	add	r2, r1
 8009272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009276:	0cdb      	lsrs	r3, r3, #19
 8009278:	04db      	lsls	r3, r3, #19
 800927a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	0151      	lsls	r1, r2, #5
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	440a      	add	r2, r1
 8009292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009296:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800929a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800929e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	6999      	ldr	r1, [r3, #24]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	440b      	add	r3, r1
 80092b8:	1e59      	subs	r1, r3, #1
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	fbb1 f3f3 	udiv	r3, r1, r3
 80092c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80092c4:	4b9e      	ldr	r3, [pc, #632]	; (8009540 <USB_EPStartXfer+0x370>)
 80092c6:	400b      	ands	r3, r1
 80092c8:	6939      	ldr	r1, [r7, #16]
 80092ca:	0148      	lsls	r0, r1, #5
 80092cc:	6979      	ldr	r1, [r7, #20]
 80092ce:	4401      	add	r1, r0
 80092d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092d4:	4313      	orrs	r3, r2
 80092d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ee:	6939      	ldr	r1, [r7, #16]
 80092f0:	0148      	lsls	r0, r1, #5
 80092f2:	6979      	ldr	r1, [r7, #20]
 80092f4:	4401      	add	r1, r0
 80092f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092fa:	4313      	orrs	r3, r2
 80092fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d11f      	bne.n	8009346 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009320:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009324:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009344:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009360:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009364:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	791b      	ldrb	r3, [r3, #4]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d015      	beq.n	800939a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 8106 	beq.w	8009584 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	f003 030f 	and.w	r3, r3, #15
 8009388:	2101      	movs	r1, #1
 800938a:	fa01 f303 	lsl.w	r3, r1, r3
 800938e:	6979      	ldr	r1, [r7, #20]
 8009390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009394:	4313      	orrs	r3, r2
 8009396:	634b      	str	r3, [r1, #52]	; 0x34
 8009398:	e0f4      	b.n	8009584 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d110      	bne.n	80093cc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	e00f      	b.n	80093ec <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	0151      	lsls	r1, r2, #5
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	440a      	add	r2, r1
 80093e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ea:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	6919      	ldr	r1, [r3, #16]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa94 	bl	8009928 <USB_WritePacket>
 8009400:	e0c0      	b.n	8009584 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800941c:	0cdb      	lsrs	r3, r3, #19
 800941e:	04db      	lsls	r3, r3, #19
 8009420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	4413      	add	r3, r2
 800942a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	0151      	lsls	r1, r2, #5
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	440a      	add	r2, r1
 8009438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800943c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009440:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009444:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d123      	bne.n	8009496 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945a:	691a      	ldr	r2, [r3, #16]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009464:	6939      	ldr	r1, [r7, #16]
 8009466:	0148      	lsls	r0, r1, #5
 8009468:	6979      	ldr	r1, [r7, #20]
 800946a:	4401      	add	r1, r0
 800946c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009470:	4313      	orrs	r3, r2
 8009472:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	440a      	add	r2, r1
 800948a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800948e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009492:	6113      	str	r3, [r2, #16]
 8009494:	e037      	b.n	8009506 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	699a      	ldr	r2, [r3, #24]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	4413      	add	r3, r2
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094aa:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	89fa      	ldrh	r2, [r7, #14]
 80094b2:	fb03 f202 	mul.w	r2, r3, r2
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	89fb      	ldrh	r3, [r7, #14]
 80094ca:	04d9      	lsls	r1, r3, #19
 80094cc:	4b1c      	ldr	r3, [pc, #112]	; (8009540 <USB_EPStartXfer+0x370>)
 80094ce:	400b      	ands	r3, r1
 80094d0:	6939      	ldr	r1, [r7, #16]
 80094d2:	0148      	lsls	r0, r1, #5
 80094d4:	6979      	ldr	r1, [r7, #20]
 80094d6:	4401      	add	r1, r0
 80094d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094dc:	4313      	orrs	r3, r2
 80094de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ec:	691a      	ldr	r2, [r3, #16]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094f6:	6939      	ldr	r1, [r7, #16]
 80094f8:	0148      	lsls	r0, r1, #5
 80094fa:	6979      	ldr	r1, [r7, #20]
 80094fc:	4401      	add	r1, r0
 80094fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009502:	4313      	orrs	r3, r2
 8009504:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	791b      	ldrb	r3, [r3, #4]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d12a      	bne.n	8009564 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951a:	2b00      	cmp	r3, #0
 800951c:	d112      	bne.n	8009544 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	0151      	lsls	r1, r2, #5
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	440a      	add	r2, r1
 8009534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	e011      	b.n	8009564 <USB_EPStartXfer+0x394>
 8009540:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	0151      	lsls	r1, r2, #5
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	440a      	add	r2, r1
 800955a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800955e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009562:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	0151      	lsls	r1, r2, #5
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	440a      	add	r2, r1
 800957a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800957e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop

08009590 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	f040 80ab 	bne.w	8009704 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d132      	bne.n	800961c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	0151      	lsls	r1, r2, #5
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	440a      	add	r2, r1
 80095cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	0151      	lsls	r1, r2, #5
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	440a      	add	r2, r1
 80095f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4413      	add	r3, r2
 8009602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	0151      	lsls	r1, r2, #5
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	440a      	add	r2, r1
 8009610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009614:	0cdb      	lsrs	r3, r3, #19
 8009616:	04db      	lsls	r3, r3, #19
 8009618:	6113      	str	r3, [r2, #16]
 800961a:	e04e      	b.n	80096ba <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	0151      	lsls	r1, r2, #5
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	440a      	add	r2, r1
 8009632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009636:	0cdb      	lsrs	r3, r3, #19
 8009638:	04db      	lsls	r3, r3, #19
 800963a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	0151      	lsls	r1, r2, #5
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	440a      	add	r2, r1
 8009652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009656:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800965a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800965e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	699a      	ldr	r2, [r3, #24]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	429a      	cmp	r2, r3
 800966a:	d903      	bls.n	8009674 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	68da      	ldr	r2, [r3, #12]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4413      	add	r3, r2
 800967c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	0151      	lsls	r1, r2, #5
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	440a      	add	r2, r1
 800968a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a0:	691a      	ldr	r2, [r3, #16]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	0148      	lsls	r0, r1, #5
 80096ae:	68f9      	ldr	r1, [r7, #12]
 80096b0:	4401      	add	r1, r0
 80096b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096b6:	4313      	orrs	r3, r2
 80096b8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	0151      	lsls	r1, r2, #5
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	440a      	add	r2, r1
 80096d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096d8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d071      	beq.n	80097c6 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	f003 030f 	and.w	r3, r3, #15
 80096f2:	2101      	movs	r1, #1
 80096f4:	fa01 f303 	lsl.w	r3, r1, r3
 80096f8:	68f9      	ldr	r1, [r7, #12]
 80096fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096fe:	4313      	orrs	r3, r2
 8009700:	634b      	str	r3, [r1, #52]	; 0x34
 8009702:	e060      	b.n	80097c6 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	0151      	lsls	r1, r2, #5
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	440a      	add	r2, r1
 800971a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800971e:	0cdb      	lsrs	r3, r3, #19
 8009720:	04db      	lsls	r3, r3, #19
 8009722:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800973e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009742:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009746:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800977a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800977e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978c:	691a      	ldr	r2, [r3, #16]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	0148      	lsls	r0, r1, #5
 800979a:	68f9      	ldr	r1, [r7, #12]
 800979c:	4401      	add	r1, r0
 800979e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097a2:	4313      	orrs	r3, r2
 80097a4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	0151      	lsls	r1, r2, #5
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	440a      	add	r2, r1
 80097bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	785b      	ldrb	r3, [r3, #1]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d14a      	bne.n	8009888 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800980a:	f040 8086 	bne.w	800991a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	0151      	lsls	r1, r2, #5
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	440a      	add	r2, r1
 8009828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009830:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	7812      	ldrb	r2, [r2, #0]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	440a      	add	r2, r1
 800984c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009854:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009862:	4293      	cmp	r3, r2
 8009864:	d902      	bls.n	800986c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	75fb      	strb	r3, [r7, #23]
          break;
 800986a:	e056      	b.n	800991a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009884:	d0e7      	beq.n	8009856 <USB_EPStopXfer+0x82>
 8009886:	e048      	b.n	800991a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800989c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098a0:	d13b      	bne.n	800991a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	7812      	ldrb	r2, [r2, #0]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	7812      	ldrb	r2, [r2, #0]
 80098da:	0151      	lsls	r1, r2, #5
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	440a      	add	r2, r1
 80098e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d902      	bls.n	8009900 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
          break;
 80098fe:	e00c      	b.n	800991a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	015a      	lsls	r2, r3, #5
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	4413      	add	r3, r2
 800990a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009918:	d0e7      	beq.n	80098ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800991a:	7dfb      	ldrb	r3, [r7, #23]
}
 800991c:	4618      	mov	r0, r3
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009928:	b480      	push	{r7}
 800992a:	b089      	sub	sp, #36	; 0x24
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	4611      	mov	r1, r2
 8009934:	461a      	mov	r2, r3
 8009936:	460b      	mov	r3, r1
 8009938:	71fb      	strb	r3, [r7, #7]
 800993a:	4613      	mov	r3, r2
 800993c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009946:	88bb      	ldrh	r3, [r7, #4]
 8009948:	3303      	adds	r3, #3
 800994a:	089b      	lsrs	r3, r3, #2
 800994c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800994e:	2300      	movs	r3, #0
 8009950:	61bb      	str	r3, [r7, #24]
 8009952:	e018      	b.n	8009986 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	031a      	lsls	r2, r3, #12
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	4413      	add	r3, r2
 800995c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009960:	461a      	mov	r2, r3
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	3301      	adds	r3, #1
 800996c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	3301      	adds	r3, #1
 8009972:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	3301      	adds	r3, #1
 8009978:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	3301      	adds	r3, #1
 800997e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	3301      	adds	r3, #1
 8009984:	61bb      	str	r3, [r7, #24]
 8009986:	69ba      	ldr	r2, [r7, #24]
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	429a      	cmp	r2, r3
 800998c:	d3e2      	bcc.n	8009954 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3724      	adds	r7, #36	; 0x24
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800999c:	b480      	push	{r7}
 800999e:	b08b      	sub	sp, #44	; 0x2c
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099b2:	88fb      	ldrh	r3, [r7, #6]
 80099b4:	089b      	lsrs	r3, r3, #2
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099ba:	88fb      	ldrh	r3, [r7, #6]
 80099bc:	f003 0303 	and.w	r3, r3, #3
 80099c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099c2:	2300      	movs	r3, #0
 80099c4:	623b      	str	r3, [r7, #32]
 80099c6:	e014      	b.n	80099f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	3301      	adds	r3, #1
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	3301      	adds	r3, #1
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	3301      	adds	r3, #1
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	3301      	adds	r3, #1
 80099ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	3301      	adds	r3, #1
 80099f0:	623b      	str	r3, [r7, #32]
 80099f2:	6a3a      	ldr	r2, [r7, #32]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d3e6      	bcc.n	80099c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099fa:	8bfb      	ldrh	r3, [r7, #30]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01e      	beq.n	8009a3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f107 0310 	add.w	r3, r7, #16
 8009a10:	6812      	ldr	r2, [r2, #0]
 8009a12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	701a      	strb	r2, [r3, #0]
      i++;
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	3301      	adds	r3, #1
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a32:	8bfb      	ldrh	r3, [r7, #30]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a38:	8bfb      	ldrh	r3, [r7, #30]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1ea      	bne.n	8009a14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	372c      	adds	r7, #44	; 0x2c
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	785b      	ldrb	r3, [r3, #1]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d12c      	bne.n	8009ac2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	db12      	blt.n	8009aa0 <USB_EPSetStall+0x54>
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00f      	beq.n	8009aa0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	0151      	lsls	r1, r2, #5
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	440a      	add	r2, r1
 8009a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	e02b      	b.n	8009b1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	db12      	blt.n	8009afa <USB_EPSetStall+0xae>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00f      	beq.n	8009afa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	0151      	lsls	r1, r2, #5
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	440a      	add	r2, r1
 8009af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009af8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	0151      	lsls	r1, r2, #5
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	440a      	add	r2, r1
 8009b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	785b      	ldrb	r3, [r3, #1]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d128      	bne.n	8009b96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	791b      	ldrb	r3, [r3, #4]
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d003      	beq.n	8009b74 <USB_EPClearStall+0x4c>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	791b      	ldrb	r3, [r3, #4]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d138      	bne.n	8009be6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	e027      	b.n	8009be6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	0151      	lsls	r1, r2, #5
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	440a      	add	r2, r1
 8009bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	791b      	ldrb	r3, [r3, #4]
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d003      	beq.n	8009bc6 <USB_EPClearStall+0x9e>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	791b      	ldrb	r3, [r3, #4]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d10f      	bne.n	8009be6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	0151      	lsls	r1, r2, #5
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	440a      	add	r2, r1
 8009bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009be4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c28:	68f9      	ldr	r1, [r7, #12]
 8009c2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c5a:	f023 0303 	bic.w	r3, r3, #3
 8009c5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c6e:	f023 0302 	bic.w	r3, r3, #2
 8009c72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb0:	f043 0302 	orr.w	r3, r3, #2
 8009cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	0c1b      	lsrs	r3, r3, #16
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	4013      	ands	r3, r2
 8009d40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	b29b      	uxth	r3, r3
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b085      	sub	sp, #20
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d62:	78fb      	ldrb	r3, [r7, #3]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d80:	68bb      	ldr	r3, [r7, #8]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b087      	sub	sp, #28
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	460b      	mov	r3, r1
 8009d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbe:	01db      	lsls	r3, r3, #7
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009dc8:	78fb      	ldrb	r3, [r7, #3]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	f003 0301 	and.w	r3, r3, #1
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b085      	sub	sp, #20
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e24:	f023 0307 	bic.w	r3, r3, #7
 8009e28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	333c      	adds	r3, #60	; 0x3c
 8009e5e:	3304      	adds	r3, #4
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	4a1c      	ldr	r2, [pc, #112]	; (8009ed8 <USB_EP0_OutStart+0x8c>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d90a      	bls.n	8009e82 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e7c:	d101      	bne.n	8009e82 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e024      	b.n	8009ecc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e88:	461a      	mov	r2, r3
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eb0:	f043 0318 	orr.w	r3, r3, #24
 8009eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ec8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	4f54300a 	.word	0x4f54300a

08009edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a13      	ldr	r2, [pc, #76]	; (8009f40 <USB_CoreReset+0x64>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d901      	bls.n	8009efa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e01b      	b.n	8009f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	daf2      	bge.n	8009ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f043 0201 	orr.w	r2, r3, #1
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3301      	adds	r3, #1
 8009f16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <USB_CoreReset+0x64>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d901      	bls.n	8009f24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e006      	b.n	8009f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d0f0      	beq.n	8009f12 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	00030d40 	.word	0x00030d40

08009f44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009f48:	4904      	ldr	r1, [pc, #16]	; (8009f5c <MX_FATFS_Init+0x18>)
 8009f4a:	4805      	ldr	r0, [pc, #20]	; (8009f60 <MX_FATFS_Init+0x1c>)
 8009f4c:	f001 fe6e 	bl	800bc2c <FATFS_LinkDriver>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	4b03      	ldr	r3, [pc, #12]	; (8009f64 <MX_FATFS_Init+0x20>)
 8009f56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009f58:	bf00      	nop
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20000460 	.word	0x20000460
 8009f60:	0800c9bc 	.word	0x0800c9bc
 8009f64:	2000045c 	.word	0x2000045c

08009f68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009f72:	f000 f879 	bl	800a068 <BSP_SD_IsDetected>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d001      	beq.n	8009f80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	e012      	b.n	8009fa6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009f80:	480b      	ldr	r0, [pc, #44]	; (8009fb0 <BSP_SD_Init+0x48>)
 8009f82:	f7fb fbd7 	bl	8005734 <HAL_SD_Init>
 8009f86:	4603      	mov	r3, r0
 8009f88:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f94:	4806      	ldr	r0, [pc, #24]	; (8009fb0 <BSP_SD_Init+0x48>)
 8009f96:	f7fc faa3 	bl	80064e0 <HAL_SD_ConfigWideBusOperation>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000254 	.word	0x20000254

08009fb4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af02      	add	r7, sp, #8
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	4806      	ldr	r0, [pc, #24]	; (8009fec <BSP_SD_ReadBlocks+0x38>)
 8009fd2:	f7fb fcd7 	bl	8005984 <HAL_SD_ReadBlocks>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	20000254 	.word	0x20000254

08009ff0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	68f9      	ldr	r1, [r7, #12]
 800a00c:	4806      	ldr	r0, [pc, #24]	; (800a028 <BSP_SD_WriteBlocks+0x38>)
 800a00e:	f7fb fe4b 	bl	8005ca8 <HAL_SD_WriteBlocks>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000254 	.word	0x20000254

0800a02c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a030:	4805      	ldr	r0, [pc, #20]	; (800a048 <BSP_SD_GetCardState+0x1c>)
 800a032:	f7fc fb69 	bl	8006708 <HAL_SD_GetCardState>
 800a036:	4603      	mov	r3, r0
 800a038:	2b04      	cmp	r3, #4
 800a03a:	bf14      	ite	ne
 800a03c:	2301      	movne	r3, #1
 800a03e:	2300      	moveq	r3, #0
 800a040:	b2db      	uxtb	r3, r3
}
 800a042:	4618      	mov	r0, r3
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20000254 	.word	0x20000254

0800a04c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4803      	ldr	r0, [pc, #12]	; (800a064 <BSP_SD_GetCardInfo+0x18>)
 800a058:	f7fc fa16 	bl	8006488 <HAL_SD_GetCardInfo>
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	20000254 	.word	0x20000254

0800a068 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a06e:	2301      	movs	r3, #1
 800a070:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a072:	f000 f80b 	bl	800a08c <BSP_PlatformIsDetected>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a07c:	2300      	movs	r3, #0
 800a07e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	b2db      	uxtb	r3, r3
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a092:	2301      	movs	r3, #1
 800a094:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a09a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a09e:	f7f7 faf5 	bl	800168c <HAL_GPIO_ReadPin>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
	...

0800a0b8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <SD_CheckStatus+0x38>)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a0c8:	f7ff ffb0 	bl	800a02c <BSP_SD_GetCardState>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d107      	bne.n	800a0e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a0d2:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <SD_CheckStatus+0x38>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	f023 0301 	bic.w	r3, r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <SD_CheckStatus+0x38>)
 800a0e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a0e2:	4b03      	ldr	r3, [pc, #12]	; (800a0f0 <SD_CheckStatus+0x38>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	b2db      	uxtb	r3, r3
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	20000009 	.word	0x20000009

0800a0f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a0fe:	4b0b      	ldr	r3, [pc, #44]	; (800a12c <SD_initialize+0x38>)
 800a100:	2201      	movs	r2, #1
 800a102:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a104:	f7ff ff30 	bl	8009f68 <BSP_SD_Init>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d107      	bne.n	800a11e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a10e:	79fb      	ldrb	r3, [r7, #7]
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff ffd1 	bl	800a0b8 <SD_CheckStatus>
 800a116:	4603      	mov	r3, r0
 800a118:	461a      	mov	r2, r3
 800a11a:	4b04      	ldr	r3, [pc, #16]	; (800a12c <SD_initialize+0x38>)
 800a11c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a11e:	4b03      	ldr	r3, [pc, #12]	; (800a12c <SD_initialize+0x38>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	b2db      	uxtb	r3, r3
}
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	20000009 	.word	0x20000009

0800a130 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff ffbb 	bl	800a0b8 <SD_CheckStatus>
 800a142:	4603      	mov	r3, r0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	60b9      	str	r1, [r7, #8]
 800a154:	607a      	str	r2, [r7, #4]
 800a156:	603b      	str	r3, [r7, #0]
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	6879      	ldr	r1, [r7, #4]
 800a168:	68b8      	ldr	r0, [r7, #8]
 800a16a:	f7ff ff23 	bl	8009fb4 <BSP_SD_ReadBlocks>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d107      	bne.n	800a184 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a174:	bf00      	nop
 800a176:	f7ff ff59 	bl	800a02c <BSP_SD_GetCardState>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1fa      	bne.n	800a176 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a184:	7dfb      	ldrb	r3, [r7, #23]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b086      	sub	sp, #24
 800a192:	af00      	add	r7, sp, #0
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a1a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	68b8      	ldr	r0, [r7, #8]
 800a1ac:	f7ff ff20 	bl	8009ff0 <BSP_SD_WriteBlocks>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d107      	bne.n	800a1c6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a1b6:	bf00      	nop
 800a1b8:	f7ff ff38 	bl	800a02c <BSP_SD_GetCardState>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1fa      	bne.n	800a1b8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08c      	sub	sp, #48	; 0x30
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	603a      	str	r2, [r7, #0]
 800a1da:	71fb      	strb	r3, [r7, #7]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a1e6:	4b25      	ldr	r3, [pc, #148]	; (800a27c <SD_ioctl+0xac>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <SD_ioctl+0x28>
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e03c      	b.n	800a272 <SD_ioctl+0xa2>

  switch (cmd)
 800a1f8:	79bb      	ldrb	r3, [r7, #6]
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d834      	bhi.n	800a268 <SD_ioctl+0x98>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <SD_ioctl+0x34>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a21d 	.word	0x0800a21d
 800a20c:	0800a235 	.word	0x0800a235
 800a210:	0800a24f 	.word	0x0800a24f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a21a:	e028      	b.n	800a26e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a21c:	f107 0308 	add.w	r3, r7, #8
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff ff13 	bl	800a04c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a226:	6a3a      	ldr	r2, [r7, #32]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a232:	e01c      	b.n	800a26e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a234:	f107 0308 	add.w	r3, r7, #8
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff ff07 	bl	800a04c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	b29a      	uxth	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a24c:	e00f      	b.n	800a26e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a24e:	f107 0308 	add.w	r3, r7, #8
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fefa 	bl	800a04c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	0a5a      	lsrs	r2, r3, #9
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a266:	e002      	b.n	800a26e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a268:	2304      	movs	r3, #4
 800a26a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a26e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a272:	4618      	mov	r0, r3
 800a274:	3730      	adds	r7, #48	; 0x30
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000009 	.word	0x20000009

0800a280 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a28c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a290:	f002 fae2 	bl	800c858 <USBD_static_malloc>
 800a294:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d105      	bne.n	800a2a8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e066      	b.n	800a376 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	7c1b      	ldrb	r3, [r3, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d119      	bne.n	800a2ec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a2b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2bc:	2202      	movs	r2, #2
 800a2be:	2181      	movs	r1, #129	; 0x81
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f002 f8b5 	bl	800c430 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a2cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f002 f8ab 	bl	800c430 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2210      	movs	r2, #16
 800a2e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a2ea:	e016      	b.n	800a31a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a2ec:	2340      	movs	r3, #64	; 0x40
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	2181      	movs	r1, #129	; 0x81
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f002 f89c 	bl	800c430 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a2fe:	2340      	movs	r3, #64	; 0x40
 800a300:	2202      	movs	r2, #2
 800a302:	2101      	movs	r1, #1
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f002 f893 	bl	800c430 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2210      	movs	r2, #16
 800a316:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a31a:	2308      	movs	r3, #8
 800a31c:	2203      	movs	r2, #3
 800a31e:	2182      	movs	r1, #130	; 0x82
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f002 f885 	bl	800c430 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	7c1b      	ldrb	r3, [r3, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d109      	bne.n	800a364 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a35a:	2101      	movs	r1, #1
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f002 f9e1 	bl	800c724 <USBD_LL_PrepareReceive>
 800a362:	e007      	b.n	800a374 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a36a:	2340      	movs	r3, #64	; 0x40
 800a36c:	2101      	movs	r1, #1
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f002 f9d8 	bl	800c724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	460b      	mov	r3, r1
 800a388:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a38a:	2181      	movs	r1, #129	; 0x81
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f002 f88d 	bl	800c4ac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a398:	2101      	movs	r1, #1
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f002 f886 	bl	800c4ac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a3a8:	2182      	movs	r1, #130	; 0x82
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f002 f87e 	bl	800c4ac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00e      	beq.n	800a3e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f002 fa4a 	bl	800c874 <USBD_static_free>
    pdev->pClassData = NULL;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a404:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	e0af      	b.n	800a57c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a424:	2b00      	cmp	r3, #0
 800a426:	d03f      	beq.n	800a4a8 <USBD_CDC_Setup+0xb4>
 800a428:	2b20      	cmp	r3, #32
 800a42a:	f040 809f 	bne.w	800a56c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	88db      	ldrh	r3, [r3, #6]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d02e      	beq.n	800a494 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	b25b      	sxtb	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	da16      	bge.n	800a46e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a44c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	88d2      	ldrh	r2, [r2, #6]
 800a452:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	88db      	ldrh	r3, [r3, #6]
 800a458:	2b07      	cmp	r3, #7
 800a45a:	bf28      	it	cs
 800a45c:	2307      	movcs	r3, #7
 800a45e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	89fa      	ldrh	r2, [r7, #14]
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 fb13 	bl	800ba92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a46c:	e085      	b.n	800a57a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	785a      	ldrb	r2, [r3, #1]
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	88db      	ldrh	r3, [r3, #6]
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a484:	6939      	ldr	r1, [r7, #16]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	88db      	ldrh	r3, [r3, #6]
 800a48a:	461a      	mov	r2, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 fb2c 	bl	800baea <USBD_CtlPrepareRx>
      break;
 800a492:	e072      	b.n	800a57a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	7850      	ldrb	r0, [r2, #1]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	4798      	blx	r3
      break;
 800a4a6:	e068      	b.n	800a57a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	785b      	ldrb	r3, [r3, #1]
 800a4ac:	2b0b      	cmp	r3, #11
 800a4ae:	d852      	bhi.n	800a556 <USBD_CDC_Setup+0x162>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <USBD_CDC_Setup+0xc4>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4e9 	.word	0x0800a4e9
 800a4bc:	0800a565 	.word	0x0800a565
 800a4c0:	0800a557 	.word	0x0800a557
 800a4c4:	0800a557 	.word	0x0800a557
 800a4c8:	0800a557 	.word	0x0800a557
 800a4cc:	0800a557 	.word	0x0800a557
 800a4d0:	0800a557 	.word	0x0800a557
 800a4d4:	0800a557 	.word	0x0800a557
 800a4d8:	0800a557 	.word	0x0800a557
 800a4dc:	0800a557 	.word	0x0800a557
 800a4e0:	0800a513 	.word	0x0800a513
 800a4e4:	0800a53d 	.word	0x0800a53d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d107      	bne.n	800a504 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a4f4:	f107 030a 	add.w	r3, r7, #10
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 fac8 	bl	800ba92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a502:	e032      	b.n	800a56a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 fa52 	bl	800b9b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a50c:	2303      	movs	r3, #3
 800a50e:	75fb      	strb	r3, [r7, #23]
          break;
 800a510:	e02b      	b.n	800a56a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d107      	bne.n	800a52e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a51e:	f107 030d 	add.w	r3, r7, #13
 800a522:	2201      	movs	r2, #1
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 fab3 	bl	800ba92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a52c:	e01d      	b.n	800a56a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 fa3d 	bl	800b9b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a536:	2303      	movs	r3, #3
 800a538:	75fb      	strb	r3, [r7, #23]
          break;
 800a53a:	e016      	b.n	800a56a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b03      	cmp	r3, #3
 800a546:	d00f      	beq.n	800a568 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f001 fa30 	bl	800b9b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a550:	2303      	movs	r3, #3
 800a552:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a554:	e008      	b.n	800a568 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 fa29 	bl	800b9b0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a55e:	2303      	movs	r3, #3
 800a560:	75fb      	strb	r3, [r7, #23]
          break;
 800a562:	e002      	b.n	800a56a <USBD_CDC_Setup+0x176>
          break;
 800a564:	bf00      	nop
 800a566:	e008      	b.n	800a57a <USBD_CDC_Setup+0x186>
          break;
 800a568:	bf00      	nop
      }
      break;
 800a56a:	e006      	b.n	800a57a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f001 fa1e 	bl	800b9b0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a574:	2303      	movs	r3, #3
 800a576:	75fb      	strb	r3, [r7, #23]
      break;
 800a578:	bf00      	nop
  }

  return (uint8_t)ret;
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a596:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e04f      	b.n	800a646 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a5ae:	78fa      	ldrb	r2, [r7, #3]
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	3318      	adds	r3, #24
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d029      	beq.n	800a618 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a5c4:	78fa      	ldrb	r2, [r7, #3]
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	440b      	add	r3, r1
 800a5d2:	3318      	adds	r3, #24
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	78f9      	ldrb	r1, [r7, #3]
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	440b      	add	r3, r1
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4403      	add	r3, r0
 800a5e4:	3348      	adds	r3, #72	; 0x48
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a5ec:	fb01 f303 	mul.w	r3, r1, r3
 800a5f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d110      	bne.n	800a618 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a5f6:	78fa      	ldrb	r2, [r7, #3]
 800a5f8:	6879      	ldr	r1, [r7, #4]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	440b      	add	r3, r1
 800a604:	3318      	adds	r3, #24
 800a606:	2200      	movs	r2, #0
 800a608:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a60a:	78f9      	ldrb	r1, [r7, #3]
 800a60c:	2300      	movs	r3, #0
 800a60e:	2200      	movs	r2, #0
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f002 f84f 	bl	800c6b4 <USBD_LL_Transmit>
 800a616:	e015      	b.n	800a644 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00b      	beq.n	800a644 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a640:	78fa      	ldrb	r2, [r7, #3]
 800a642:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a660:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e015      	b.n	800a69c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f002 f88d 	bl	800c794 <USBD_LL_GetRxDataSize>
 800a67a:	4602      	mov	r2, r0
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a696:	4611      	mov	r1, r2
 800a698:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e01b      	b.n	800a6f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d015      	beq.n	800a6f4 <USBD_CDC_EP0_RxReady+0x50>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a6ce:	2bff      	cmp	r3, #255	; 0xff
 800a6d0:	d010      	beq.n	800a6f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a6e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a6e8:	b292      	uxth	r2, r2
 800a6ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	22ff      	movs	r2, #255	; 0xff
 800a6f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2243      	movs	r2, #67	; 0x43
 800a70c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a70e:	4b03      	ldr	r3, [pc, #12]	; (800a71c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a710:	4618      	mov	r0, r3
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	20000094 	.word	0x20000094

0800a720 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2243      	movs	r2, #67	; 0x43
 800a72c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a72e:	4b03      	ldr	r3, [pc, #12]	; (800a73c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	20000050 	.word	0x20000050

0800a740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2243      	movs	r2, #67	; 0x43
 800a74c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a74e:	4b03      	ldr	r3, [pc, #12]	; (800a75c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a750:	4618      	mov	r0, r3
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	200000d8 	.word	0x200000d8

0800a760 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	220a      	movs	r2, #10
 800a76c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a76e:	4b03      	ldr	r3, [pc, #12]	; (800a77c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr
 800a77c:	2000000c 	.word	0x2000000c

0800a780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a790:	2303      	movs	r3, #3
 800a792:	e004      	b.n	800a79e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b087      	sub	sp, #28
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e008      	b.n	800a7da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e004      	b.n	800a80c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a826:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a832:	2303      	movs	r3, #3
 800a834:	e016      	b.n	800a864 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	7c1b      	ldrb	r3, [r3, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d109      	bne.n	800a852 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a844:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a848:	2101      	movs	r1, #1
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 ff6a 	bl	800c724 <USBD_LL_PrepareReceive>
 800a850:	e007      	b.n	800a862 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a858:	2340      	movs	r3, #64	; 0x40
 800a85a:	2101      	movs	r1, #1
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 ff61 	bl	800c724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4613      	mov	r3, r2
 800a878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a880:	2303      	movs	r3, #3
 800a882:	e01f      	b.n	800a8c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	79fa      	ldrb	r2, [r7, #7]
 800a8b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f001 fd3d 	bl	800c338 <USBD_LL_Init>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e016      	b.n	800a912 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00b      	beq.n	800a910 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	f107 020e 	add.w	r2, r7, #14
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
 800a908:	4602      	mov	r2, r0
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f001 fd52 	bl	800c3cc <USBD_LL_Start>
 800a928:	4603      	mov	r3, r0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a954:	2303      	movs	r3, #3
 800a956:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d009      	beq.n	800a976 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	78fa      	ldrb	r2, [r7, #3]
 800a96c:	4611      	mov	r1, r2
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a976:	7bfb      	ldrb	r3, [r7, #15]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	460b      	mov	r3, r1
 800a98a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	78fa      	ldrb	r2, [r7, #3]
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	4798      	blx	r3
  }

  return USBD_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 ffba 	bl	800b93c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9e4:	f003 031f 	and.w	r3, r3, #31
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d01a      	beq.n	800aa22 <USBD_LL_SetupStage+0x72>
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d822      	bhi.n	800aa36 <USBD_LL_SetupStage+0x86>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <USBD_LL_SetupStage+0x4a>
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d00a      	beq.n	800aa0e <USBD_LL_SetupStage+0x5e>
 800a9f8:	e01d      	b.n	800aa36 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa62 	bl	800aecc <USBD_StdDevReq>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa0c:	e020      	b.n	800aa50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fac6 	bl	800afa8 <USBD_StdItfReq>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa20:	e016      	b.n	800aa50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fb05 	bl	800b03a <USBD_StdEPReq>
 800aa30:	4603      	mov	r3, r0
 800aa32:	73fb      	strb	r3, [r7, #15]
      break;
 800aa34:	e00c      	b.n	800aa50 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 fd67 	bl	800c518 <USBD_LL_StallEP>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa4e:	bf00      	nop
  }

  return ret;
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b086      	sub	sp, #24
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	460b      	mov	r3, r1
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d138      	bne.n	800aae0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d14a      	bne.n	800ab16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d913      	bls.n	800aab4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	1ad2      	subs	r2, r2, r3
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	68da      	ldr	r2, [r3, #12]
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	bf28      	it	cs
 800aaa6:	4613      	movcs	r3, r2
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f001 f839 	bl	800bb24 <USBD_CtlContinueRx>
 800aab2:	e030      	b.n	800ab16 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d10b      	bne.n	800aad8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d005      	beq.n	800aad8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f001 f834 	bl	800bb46 <USBD_CtlSendStatus>
 800aade:	e01a      	b.n	800ab16 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d114      	bne.n	800ab16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00e      	beq.n	800ab16 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	7afa      	ldrb	r2, [r7, #11]
 800ab02:	4611      	mov	r1, r2
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	4798      	blx	r3
 800ab08:	4603      	mov	r3, r0
 800ab0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	e000      	b.n	800ab18 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d16b      	bne.n	800ac0c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3314      	adds	r3, #20
 800ab38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d156      	bne.n	800abf2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d914      	bls.n	800ab7a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	1ad2      	subs	r2, r2, r3
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	461a      	mov	r2, r3
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 ffae 	bl	800bac8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2100      	movs	r1, #0
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f001 fdd6 	bl	800c724 <USBD_LL_PrepareReceive>
 800ab78:	e03b      	b.n	800abf2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	68da      	ldr	r2, [r3, #12]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d11c      	bne.n	800abc0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d316      	bcc.n	800abc0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d20f      	bcs.n	800abc0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aba0:	2200      	movs	r2, #0
 800aba2:	2100      	movs	r1, #0
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f000 ff8f 	bl	800bac8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abb2:	2300      	movs	r3, #0
 800abb4:	2200      	movs	r2, #0
 800abb6:	2100      	movs	r1, #0
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f001 fdb3 	bl	800c724 <USBD_LL_PrepareReceive>
 800abbe:	e018      	b.n	800abf2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d10b      	bne.n	800abe4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d005      	beq.n	800abe4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800abe4:	2180      	movs	r1, #128	; 0x80
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f001 fc96 	bl	800c518 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f000 ffbd 	bl	800bb6c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d122      	bne.n	800ac42 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7ff fe98 	bl	800a932 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac0a:	e01a      	b.n	800ac42 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b03      	cmp	r3, #3
 800ac16:	d114      	bne.n	800ac42 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00e      	beq.n	800ac42 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	7afa      	ldrb	r2, [r7, #11]
 800ac2e:	4611      	mov	r1, r2
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	4798      	blx	r3
 800ac34:	4603      	mov	r3, r0
 800ac36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	e000      	b.n	800ac44 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3718      	adds	r7, #24
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e02f      	b.n	800ace0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00f      	beq.n	800acaa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6852      	ldr	r2, [r2, #4]
 800aca2:	b2d2      	uxtb	r2, r2
 800aca4:	4611      	mov	r1, r2
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acaa:	2340      	movs	r3, #64	; 0x40
 800acac:	2200      	movs	r2, #0
 800acae:	2100      	movs	r1, #0
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f001 fbbd 	bl	800c430 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2240      	movs	r2, #64	; 0x40
 800acc2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acc6:	2340      	movs	r3, #64	; 0x40
 800acc8:	2200      	movs	r2, #0
 800acca:	2180      	movs	r1, #128	; 0x80
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 fbaf 	bl	800c430 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2240      	movs	r2, #64	; 0x40
 800acdc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	78fa      	ldrb	r2, [r7, #3]
 800acf8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2204      	movs	r2, #4
 800ad22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d106      	bne.n	800ad56 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e012      	b.n	800ada0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d10b      	bne.n	800ad9e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d005      	beq.n	800ad9e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800adbe:	2303      	movs	r3, #3
 800adc0:	e014      	b.n	800adec <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d10d      	bne.n	800adea <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d007      	beq.n	800adea <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	78fa      	ldrb	r2, [r7, #3]
 800ade4:	4611      	mov	r1, r2
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e014      	b.n	800ae38 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d10d      	bne.n	800ae36 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d007      	beq.n	800ae36 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2e:	78fa      	ldrb	r2, [r7, #3]
 800ae30:	4611      	mov	r1, r2
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d009      	beq.n	800ae84 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6852      	ldr	r2, [r2, #4]
 800ae7c:	b2d2      	uxtb	r2, r2
 800ae7e:	4611      	mov	r1, r2
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	4798      	blx	r3
  }

  return USBD_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b087      	sub	sp, #28
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	3301      	adds	r3, #1
 800aea4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aeac:	8a3b      	ldrh	r3, [r7, #16]
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	b21a      	sxth	r2, r3
 800aeb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	b21b      	sxth	r3, r3
 800aeba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aebc:	89fb      	ldrh	r3, [r7, #14]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
	...

0800aecc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aee2:	2b40      	cmp	r3, #64	; 0x40
 800aee4:	d005      	beq.n	800aef2 <USBD_StdDevReq+0x26>
 800aee6:	2b40      	cmp	r3, #64	; 0x40
 800aee8:	d853      	bhi.n	800af92 <USBD_StdDevReq+0xc6>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00b      	beq.n	800af06 <USBD_StdDevReq+0x3a>
 800aeee:	2b20      	cmp	r3, #32
 800aef0:	d14f      	bne.n	800af92 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	4798      	blx	r3
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]
      break;
 800af04:	e04a      	b.n	800af9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	785b      	ldrb	r3, [r3, #1]
 800af0a:	2b09      	cmp	r3, #9
 800af0c:	d83b      	bhi.n	800af86 <USBD_StdDevReq+0xba>
 800af0e:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <USBD_StdDevReq+0x48>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af69 	.word	0x0800af69
 800af18:	0800af7d 	.word	0x0800af7d
 800af1c:	0800af87 	.word	0x0800af87
 800af20:	0800af73 	.word	0x0800af73
 800af24:	0800af87 	.word	0x0800af87
 800af28:	0800af47 	.word	0x0800af47
 800af2c:	0800af3d 	.word	0x0800af3d
 800af30:	0800af87 	.word	0x0800af87
 800af34:	0800af5f 	.word	0x0800af5f
 800af38:	0800af51 	.word	0x0800af51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f9de 	bl	800b300 <USBD_GetDescriptor>
          break;
 800af44:	e024      	b.n	800af90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fb6d 	bl	800b628 <USBD_SetAddress>
          break;
 800af4e:	e01f      	b.n	800af90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fbac 	bl	800b6b0 <USBD_SetConfig>
 800af58:	4603      	mov	r3, r0
 800af5a:	73fb      	strb	r3, [r7, #15]
          break;
 800af5c:	e018      	b.n	800af90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fc4b 	bl	800b7fc <USBD_GetConfig>
          break;
 800af66:	e013      	b.n	800af90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fc7c 	bl	800b868 <USBD_GetStatus>
          break;
 800af70:	e00e      	b.n	800af90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fcab 	bl	800b8d0 <USBD_SetFeature>
          break;
 800af7a:	e009      	b.n	800af90 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fcba 	bl	800b8f8 <USBD_ClrFeature>
          break;
 800af84:	e004      	b.n	800af90 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fd11 	bl	800b9b0 <USBD_CtlError>
          break;
 800af8e:	bf00      	nop
      }
      break;
 800af90:	e004      	b.n	800af9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fd0b 	bl	800b9b0 <USBD_CtlError>
      break;
 800af9a:	bf00      	nop
  }

  return ret;
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop

0800afa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afbe:	2b40      	cmp	r3, #64	; 0x40
 800afc0:	d005      	beq.n	800afce <USBD_StdItfReq+0x26>
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	d82f      	bhi.n	800b026 <USBD_StdItfReq+0x7e>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <USBD_StdItfReq+0x26>
 800afca:	2b20      	cmp	r3, #32
 800afcc:	d12b      	bne.n	800b026 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	3b01      	subs	r3, #1
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d81d      	bhi.n	800b018 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	889b      	ldrh	r3, [r3, #4]
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d813      	bhi.n	800b00e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	4798      	blx	r3
 800aff4:	4603      	mov	r3, r0
 800aff6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	88db      	ldrh	r3, [r3, #6]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d110      	bne.n	800b022 <USBD_StdItfReq+0x7a>
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10d      	bne.n	800b022 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fd9d 	bl	800bb46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b00c:	e009      	b.n	800b022 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fccd 	bl	800b9b0 <USBD_CtlError>
          break;
 800b016:	e004      	b.n	800b022 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fcc8 	bl	800b9b0 <USBD_CtlError>
          break;
 800b020:	e000      	b.n	800b024 <USBD_StdItfReq+0x7c>
          break;
 800b022:	bf00      	nop
      }
      break;
 800b024:	e004      	b.n	800b030 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fcc1 	bl	800b9b0 <USBD_CtlError>
      break;
 800b02e:	bf00      	nop
  }

  return ret;
 800b030:	7bfb      	ldrb	r3, [r7, #15]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	889b      	ldrh	r3, [r3, #4]
 800b04c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b056:	2b40      	cmp	r3, #64	; 0x40
 800b058:	d007      	beq.n	800b06a <USBD_StdEPReq+0x30>
 800b05a:	2b40      	cmp	r3, #64	; 0x40
 800b05c:	f200 8145 	bhi.w	800b2ea <USBD_StdEPReq+0x2b0>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00c      	beq.n	800b07e <USBD_StdEPReq+0x44>
 800b064:	2b20      	cmp	r3, #32
 800b066:	f040 8140 	bne.w	800b2ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	4798      	blx	r3
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]
      break;
 800b07c:	e13a      	b.n	800b2f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	785b      	ldrb	r3, [r3, #1]
 800b082:	2b03      	cmp	r3, #3
 800b084:	d007      	beq.n	800b096 <USBD_StdEPReq+0x5c>
 800b086:	2b03      	cmp	r3, #3
 800b088:	f300 8129 	bgt.w	800b2de <USBD_StdEPReq+0x2a4>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d07f      	beq.n	800b190 <USBD_StdEPReq+0x156>
 800b090:	2b01      	cmp	r3, #1
 800b092:	d03c      	beq.n	800b10e <USBD_StdEPReq+0xd4>
 800b094:	e123      	b.n	800b2de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d002      	beq.n	800b0a8 <USBD_StdEPReq+0x6e>
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d016      	beq.n	800b0d4 <USBD_StdEPReq+0x9a>
 800b0a6:	e02c      	b.n	800b102 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00d      	beq.n	800b0ca <USBD_StdEPReq+0x90>
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b80      	cmp	r3, #128	; 0x80
 800b0b2:	d00a      	beq.n	800b0ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 fa2d 	bl	800c518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0be:	2180      	movs	r1, #128	; 0x80
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 fa29 	bl	800c518 <USBD_LL_StallEP>
 800b0c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0c8:	e020      	b.n	800b10c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc6f 	bl	800b9b0 <USBD_CtlError>
              break;
 800b0d2:	e01b      	b.n	800b10c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	885b      	ldrh	r3, [r3, #2]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10e      	bne.n	800b0fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00b      	beq.n	800b0fa <USBD_StdEPReq+0xc0>
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	2b80      	cmp	r3, #128	; 0x80
 800b0e6:	d008      	beq.n	800b0fa <USBD_StdEPReq+0xc0>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	88db      	ldrh	r3, [r3, #6]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d104      	bne.n	800b0fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f001 fa0f 	bl	800c518 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fd23 	bl	800bb46 <USBD_CtlSendStatus>

              break;
 800b100:	e004      	b.n	800b10c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fc53 	bl	800b9b0 <USBD_CtlError>
              break;
 800b10a:	bf00      	nop
          }
          break;
 800b10c:	e0ec      	b.n	800b2e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b02      	cmp	r3, #2
 800b118:	d002      	beq.n	800b120 <USBD_StdEPReq+0xe6>
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d016      	beq.n	800b14c <USBD_StdEPReq+0x112>
 800b11e:	e030      	b.n	800b182 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00d      	beq.n	800b142 <USBD_StdEPReq+0x108>
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b80      	cmp	r3, #128	; 0x80
 800b12a:	d00a      	beq.n	800b142 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f001 f9f1 	bl	800c518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b136:	2180      	movs	r1, #128	; 0x80
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 f9ed 	bl	800c518 <USBD_LL_StallEP>
 800b13e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b140:	e025      	b.n	800b18e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fc33 	bl	800b9b0 <USBD_CtlError>
              break;
 800b14a:	e020      	b.n	800b18e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	885b      	ldrh	r3, [r3, #2]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d11b      	bne.n	800b18c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d004      	beq.n	800b168 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b15e:	7bbb      	ldrb	r3, [r7, #14]
 800b160:	4619      	mov	r1, r3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f001 fa0e 	bl	800c584 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fcec 	bl	800bb46 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	4798      	blx	r3
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b180:	e004      	b.n	800b18c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fc13 	bl	800b9b0 <USBD_CtlError>
              break;
 800b18a:	e000      	b.n	800b18e <USBD_StdEPReq+0x154>
              break;
 800b18c:	bf00      	nop
          }
          break;
 800b18e:	e0ab      	b.n	800b2e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d002      	beq.n	800b1a2 <USBD_StdEPReq+0x168>
 800b19c:	2b03      	cmp	r3, #3
 800b19e:	d032      	beq.n	800b206 <USBD_StdEPReq+0x1cc>
 800b1a0:	e097      	b.n	800b2d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d007      	beq.n	800b1b8 <USBD_StdEPReq+0x17e>
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	2b80      	cmp	r3, #128	; 0x80
 800b1ac:	d004      	beq.n	800b1b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fbfd 	bl	800b9b0 <USBD_CtlError>
                break;
 800b1b6:	e091      	b.n	800b2dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da0b      	bge.n	800b1d8 <USBD_StdEPReq+0x19e>
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	3310      	adds	r3, #16
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	e00b      	b.n	800b1f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1de:	4613      	mov	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fc47 	bl	800ba92 <USBD_CtlSendData>
              break;
 800b204:	e06a      	b.n	800b2dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b206:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	da11      	bge.n	800b232 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b20e:	7bbb      	ldrb	r3, [r7, #14]
 800b210:	f003 020f 	and.w	r2, r3, #15
 800b214:	6879      	ldr	r1, [r7, #4]
 800b216:	4613      	mov	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	440b      	add	r3, r1
 800b220:	3324      	adds	r3, #36	; 0x24
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d117      	bne.n	800b258 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fbc0 	bl	800b9b0 <USBD_CtlError>
                  break;
 800b230:	e054      	b.n	800b2dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b232:	7bbb      	ldrb	r3, [r7, #14]
 800b234:	f003 020f 	and.w	r2, r3, #15
 800b238:	6879      	ldr	r1, [r7, #4]
 800b23a:	4613      	mov	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	440b      	add	r3, r1
 800b244:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d104      	bne.n	800b258 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fbad 	bl	800b9b0 <USBD_CtlError>
                  break;
 800b256:	e041      	b.n	800b2dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	da0b      	bge.n	800b278 <USBD_StdEPReq+0x23e>
 800b260:	7bbb      	ldrb	r3, [r7, #14]
 800b262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b266:	4613      	mov	r3, r2
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	4413      	add	r3, r2
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	3310      	adds	r3, #16
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	4413      	add	r3, r2
 800b274:	3304      	adds	r3, #4
 800b276:	e00b      	b.n	800b290 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b27e:	4613      	mov	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	4413      	add	r3, r2
 800b28e:	3304      	adds	r3, #4
 800b290:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b292:	7bbb      	ldrb	r3, [r7, #14]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <USBD_StdEPReq+0x264>
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	2b80      	cmp	r3, #128	; 0x80
 800b29c:	d103      	bne.n	800b2a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	e00e      	b.n	800b2c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f001 f9a0 	bl	800c5f0 <USBD_LL_IsStallEP>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	e002      	b.n	800b2c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fbe1 	bl	800ba92 <USBD_CtlSendData>
              break;
 800b2d0:	e004      	b.n	800b2dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fb6b 	bl	800b9b0 <USBD_CtlError>
              break;
 800b2da:	bf00      	nop
          }
          break;
 800b2dc:	e004      	b.n	800b2e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fb65 	bl	800b9b0 <USBD_CtlError>
          break;
 800b2e6:	bf00      	nop
      }
      break;
 800b2e8:	e004      	b.n	800b2f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fb5f 	bl	800b9b0 <USBD_CtlError>
      break;
 800b2f2:	bf00      	nop
  }

  return ret;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b312:	2300      	movs	r3, #0
 800b314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	885b      	ldrh	r3, [r3, #2]
 800b31a:	0a1b      	lsrs	r3, r3, #8
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	3b01      	subs	r3, #1
 800b320:	2b0e      	cmp	r3, #14
 800b322:	f200 8152 	bhi.w	800b5ca <USBD_GetDescriptor+0x2ca>
 800b326:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <USBD_GetDescriptor+0x2c>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b39d 	.word	0x0800b39d
 800b330:	0800b3b5 	.word	0x0800b3b5
 800b334:	0800b3f5 	.word	0x0800b3f5
 800b338:	0800b5cb 	.word	0x0800b5cb
 800b33c:	0800b5cb 	.word	0x0800b5cb
 800b340:	0800b56b 	.word	0x0800b56b
 800b344:	0800b597 	.word	0x0800b597
 800b348:	0800b5cb 	.word	0x0800b5cb
 800b34c:	0800b5cb 	.word	0x0800b5cb
 800b350:	0800b5cb 	.word	0x0800b5cb
 800b354:	0800b5cb 	.word	0x0800b5cb
 800b358:	0800b5cb 	.word	0x0800b5cb
 800b35c:	0800b5cb 	.word	0x0800b5cb
 800b360:	0800b5cb 	.word	0x0800b5cb
 800b364:	0800b369 	.word	0x0800b369
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b36e:	69db      	ldr	r3, [r3, #28]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00b      	beq.n	800b38c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37a:	69db      	ldr	r3, [r3, #28]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	7c12      	ldrb	r2, [r2, #16]
 800b380:	f107 0108 	add.w	r1, r7, #8
 800b384:	4610      	mov	r0, r2
 800b386:	4798      	blx	r3
 800b388:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b38a:	e126      	b.n	800b5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fb0e 	bl	800b9b0 <USBD_CtlError>
        err++;
 800b394:	7afb      	ldrb	r3, [r7, #11]
 800b396:	3301      	adds	r3, #1
 800b398:	72fb      	strb	r3, [r7, #11]
      break;
 800b39a:	e11e      	b.n	800b5da <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	7c12      	ldrb	r2, [r2, #16]
 800b3a8:	f107 0108 	add.w	r1, r7, #8
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4798      	blx	r3
 800b3b0:	60f8      	str	r0, [r7, #12]
      break;
 800b3b2:	e112      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	7c1b      	ldrb	r3, [r3, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10d      	bne.n	800b3d8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c4:	f107 0208 	add.w	r2, r7, #8
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3d6:	e100      	b.n	800b5da <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	f107 0208 	add.w	r2, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	701a      	strb	r2, [r3, #0]
      break;
 800b3f2:	e0f2      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	885b      	ldrh	r3, [r3, #2]
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b05      	cmp	r3, #5
 800b3fc:	f200 80ac 	bhi.w	800b558 <USBD_GetDescriptor+0x258>
 800b400:	a201      	add	r2, pc, #4	; (adr r2, 800b408 <USBD_GetDescriptor+0x108>)
 800b402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b406:	bf00      	nop
 800b408:	0800b421 	.word	0x0800b421
 800b40c:	0800b455 	.word	0x0800b455
 800b410:	0800b489 	.word	0x0800b489
 800b414:	0800b4bd 	.word	0x0800b4bd
 800b418:	0800b4f1 	.word	0x0800b4f1
 800b41c:	0800b525 	.word	0x0800b525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	7c12      	ldrb	r2, [r2, #16]
 800b438:	f107 0108 	add.w	r1, r7, #8
 800b43c:	4610      	mov	r0, r2
 800b43e:	4798      	blx	r3
 800b440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b442:	e091      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fab2 	bl	800b9b0 <USBD_CtlError>
            err++;
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	3301      	adds	r3, #1
 800b450:	72fb      	strb	r3, [r7, #11]
          break;
 800b452:	e089      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00b      	beq.n	800b478 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7c12      	ldrb	r2, [r2, #16]
 800b46c:	f107 0108 	add.w	r1, r7, #8
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
 800b474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b476:	e077      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa98 	bl	800b9b0 <USBD_CtlError>
            err++;
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	3301      	adds	r3, #1
 800b484:	72fb      	strb	r3, [r7, #11]
          break;
 800b486:	e06f      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00b      	beq.n	800b4ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	7c12      	ldrb	r2, [r2, #16]
 800b4a0:	f107 0108 	add.w	r1, r7, #8
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4798      	blx	r3
 800b4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4aa:	e05d      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa7e 	bl	800b9b0 <USBD_CtlError>
            err++;
 800b4b4:	7afb      	ldrb	r3, [r7, #11]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ba:	e055      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00b      	beq.n	800b4e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	7c12      	ldrb	r2, [r2, #16]
 800b4d4:	f107 0108 	add.w	r1, r7, #8
 800b4d8:	4610      	mov	r0, r2
 800b4da:	4798      	blx	r3
 800b4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4de:	e043      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fa64 	bl	800b9b0 <USBD_CtlError>
            err++;
 800b4e8:	7afb      	ldrb	r3, [r7, #11]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ee:	e03b      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00b      	beq.n	800b514 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	7c12      	ldrb	r2, [r2, #16]
 800b508:	f107 0108 	add.w	r1, r7, #8
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3
 800b510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b512:	e029      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fa4a 	bl	800b9b0 <USBD_CtlError>
            err++;
 800b51c:	7afb      	ldrb	r3, [r7, #11]
 800b51e:	3301      	adds	r3, #1
 800b520:	72fb      	strb	r3, [r7, #11]
          break;
 800b522:	e021      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00b      	beq.n	800b548 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	7c12      	ldrb	r2, [r2, #16]
 800b53c:	f107 0108 	add.w	r1, r7, #8
 800b540:	4610      	mov	r0, r2
 800b542:	4798      	blx	r3
 800b544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b546:	e00f      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fa30 	bl	800b9b0 <USBD_CtlError>
            err++;
 800b550:	7afb      	ldrb	r3, [r7, #11]
 800b552:	3301      	adds	r3, #1
 800b554:	72fb      	strb	r3, [r7, #11]
          break;
 800b556:	e007      	b.n	800b568 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fa28 	bl	800b9b0 <USBD_CtlError>
          err++;
 800b560:	7afb      	ldrb	r3, [r7, #11]
 800b562:	3301      	adds	r3, #1
 800b564:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b566:	bf00      	nop
      }
      break;
 800b568:	e037      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	7c1b      	ldrb	r3, [r3, #16]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d109      	bne.n	800b586 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57a:	f107 0208 	add.w	r2, r7, #8
 800b57e:	4610      	mov	r0, r2
 800b580:	4798      	blx	r3
 800b582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b584:	e029      	b.n	800b5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fa11 	bl	800b9b0 <USBD_CtlError>
        err++;
 800b58e:	7afb      	ldrb	r3, [r7, #11]
 800b590:	3301      	adds	r3, #1
 800b592:	72fb      	strb	r3, [r7, #11]
      break;
 800b594:	e021      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7c1b      	ldrb	r3, [r3, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10d      	bne.n	800b5ba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a6:	f107 0208 	add.w	r2, r7, #8
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	4798      	blx	r3
 800b5ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	2207      	movs	r2, #7
 800b5b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5b8:	e00f      	b.n	800b5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f9f7 	bl	800b9b0 <USBD_CtlError>
        err++;
 800b5c2:	7afb      	ldrb	r3, [r7, #11]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5c8:	e007      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f9ef 	bl	800b9b0 <USBD_CtlError>
      err++;
 800b5d2:	7afb      	ldrb	r3, [r7, #11]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5d8:	bf00      	nop
  }

  if (err != 0U)
 800b5da:	7afb      	ldrb	r3, [r7, #11]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d11e      	bne.n	800b61e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	88db      	ldrh	r3, [r3, #6]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d016      	beq.n	800b616 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b5e8:	893b      	ldrh	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00e      	beq.n	800b60c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	88da      	ldrh	r2, [r3, #6]
 800b5f2:	893b      	ldrh	r3, [r7, #8]
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	bf28      	it	cs
 800b5f8:	4613      	movcs	r3, r2
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5fe:	893b      	ldrh	r3, [r7, #8]
 800b600:	461a      	mov	r2, r3
 800b602:	68f9      	ldr	r1, [r7, #12]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fa44 	bl	800ba92 <USBD_CtlSendData>
 800b60a:	e009      	b.n	800b620 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f9ce 	bl	800b9b0 <USBD_CtlError>
 800b614:	e004      	b.n	800b620 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa95 	bl	800bb46 <USBD_CtlSendStatus>
 800b61c:	e000      	b.n	800b620 <USBD_GetDescriptor+0x320>
    return;
 800b61e:	bf00      	nop
  }
}
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop

0800b628 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	889b      	ldrh	r3, [r3, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d131      	bne.n	800b69e <USBD_SetAddress+0x76>
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	88db      	ldrh	r3, [r3, #6]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d12d      	bne.n	800b69e <USBD_SetAddress+0x76>
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	885b      	ldrh	r3, [r3, #2]
 800b646:	2b7f      	cmp	r3, #127	; 0x7f
 800b648:	d829      	bhi.n	800b69e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b654:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d104      	bne.n	800b66c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f9a3 	bl	800b9b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b66a:	e01d      	b.n	800b6a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	7bfa      	ldrb	r2, [r7, #15]
 800b670:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 ffe5 	bl	800c648 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa61 	bl	800bb46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2202      	movs	r2, #2
 800b68e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b692:	e009      	b.n	800b6a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b69c:	e004      	b.n	800b6a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f985 	bl	800b9b0 <USBD_CtlError>
  }
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	885b      	ldrh	r3, [r3, #2]
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	4b4c      	ldr	r3, [pc, #304]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b6c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6c8:	4b4b      	ldr	r3, [pc, #300]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d905      	bls.n	800b6dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f96c 	bl	800b9b0 <USBD_CtlError>
    return USBD_FAIL;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	e088      	b.n	800b7ee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d002      	beq.n	800b6ee <USBD_SetConfig+0x3e>
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d025      	beq.n	800b738 <USBD_SetConfig+0x88>
 800b6ec:	e071      	b.n	800b7d2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6ee:	4b42      	ldr	r3, [pc, #264]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d01c      	beq.n	800b730 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b6f6:	4b40      	ldr	r3, [pc, #256]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b700:	4b3d      	ldr	r3, [pc, #244]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7ff f91e 	bl	800a948 <USBD_SetClassConfig>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b710:	7bfb      	ldrb	r3, [r7, #15]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d004      	beq.n	800b720 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f949 	bl	800b9b0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b71e:	e065      	b.n	800b7ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fa10 	bl	800bb46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2203      	movs	r2, #3
 800b72a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b72e:	e05d      	b.n	800b7ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fa08 	bl	800bb46 <USBD_CtlSendStatus>
      break;
 800b736:	e059      	b.n	800b7ec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b738:	4b2f      	ldr	r3, [pc, #188]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d112      	bne.n	800b766 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2202      	movs	r2, #2
 800b744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b748:	4b2b      	ldr	r3, [pc, #172]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	461a      	mov	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b752:	4b29      	ldr	r3, [pc, #164]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7ff f911 	bl	800a980 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f9f1 	bl	800bb46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b764:	e042      	b.n	800b7ec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b766:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	429a      	cmp	r2, r3
 800b772:	d02a      	beq.n	800b7ca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	4619      	mov	r1, r3
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f7ff f8ff 	bl	800a980 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b782:	4b1d      	ldr	r3, [pc, #116]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b78c:	4b1a      	ldr	r3, [pc, #104]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff f8d8 	bl	800a948 <USBD_SetClassConfig>
 800b798:	4603      	mov	r3, r0
 800b79a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00f      	beq.n	800b7c2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f903 	bl	800b9b0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff f8e4 	bl	800a980 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7c0:	e014      	b.n	800b7ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f9bf 	bl	800bb46 <USBD_CtlSendStatus>
      break;
 800b7c8:	e010      	b.n	800b7ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f9bb 	bl	800bb46 <USBD_CtlSendStatus>
      break;
 800b7d0:	e00c      	b.n	800b7ec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f8eb 	bl	800b9b0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7da:	4b07      	ldr	r3, [pc, #28]	; (800b7f8 <USBD_SetConfig+0x148>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff f8cd 	bl	800a980 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ea:	bf00      	nop
  }

  return ret;
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000464 	.word	0x20000464

0800b7fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	88db      	ldrh	r3, [r3, #6]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d004      	beq.n	800b818 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f8cd 	bl	800b9b0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b816:	e023      	b.n	800b860 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b02      	cmp	r3, #2
 800b822:	dc02      	bgt.n	800b82a <USBD_GetConfig+0x2e>
 800b824:	2b00      	cmp	r3, #0
 800b826:	dc03      	bgt.n	800b830 <USBD_GetConfig+0x34>
 800b828:	e015      	b.n	800b856 <USBD_GetConfig+0x5a>
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d00b      	beq.n	800b846 <USBD_GetConfig+0x4a>
 800b82e:	e012      	b.n	800b856 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3308      	adds	r3, #8
 800b83a:	2201      	movs	r2, #1
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f927 	bl	800ba92 <USBD_CtlSendData>
        break;
 800b844:	e00c      	b.n	800b860 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3304      	adds	r3, #4
 800b84a:	2201      	movs	r2, #1
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f91f 	bl	800ba92 <USBD_CtlSendData>
        break;
 800b854:	e004      	b.n	800b860 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f8a9 	bl	800b9b0 <USBD_CtlError>
        break;
 800b85e:	bf00      	nop
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	3b01      	subs	r3, #1
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d81e      	bhi.n	800b8be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	88db      	ldrh	r3, [r3, #6]
 800b884:	2b02      	cmp	r3, #2
 800b886:	d004      	beq.n	800b892 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f890 	bl	800b9b0 <USBD_CtlError>
        break;
 800b890:	e01a      	b.n	800b8c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d005      	beq.n	800b8ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	f043 0202 	orr.w	r2, r3, #2
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f8eb 	bl	800ba92 <USBD_CtlSendData>
      break;
 800b8bc:	e004      	b.n	800b8c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f875 	bl	800b9b0 <USBD_CtlError>
      break;
 800b8c6:	bf00      	nop
  }
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	885b      	ldrh	r3, [r3, #2]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d106      	bne.n	800b8f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f92b 	bl	800bb46 <USBD_CtlSendStatus>
  }
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	3b01      	subs	r3, #1
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d80b      	bhi.n	800b928 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	885b      	ldrh	r3, [r3, #2]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d10c      	bne.n	800b932 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f910 	bl	800bb46 <USBD_CtlSendStatus>
      }
      break;
 800b926:	e004      	b.n	800b932 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f840 	bl	800b9b0 <USBD_CtlError>
      break;
 800b930:	e000      	b.n	800b934 <USBD_ClrFeature+0x3c>
      break;
 800b932:	bf00      	nop
  }
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	781a      	ldrb	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3301      	adds	r3, #1
 800b956:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	781a      	ldrb	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3301      	adds	r3, #1
 800b964:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7ff fa91 	bl	800ae8e <SWAPBYTE>
 800b96c:	4603      	mov	r3, r0
 800b96e:	461a      	mov	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3301      	adds	r3, #1
 800b978:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3301      	adds	r3, #1
 800b97e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7ff fa84 	bl	800ae8e <SWAPBYTE>
 800b986:	4603      	mov	r3, r0
 800b988:	461a      	mov	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3301      	adds	r3, #1
 800b998:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff fa77 	bl	800ae8e <SWAPBYTE>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	80da      	strh	r2, [r3, #6]
}
 800b9a8:	bf00      	nop
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ba:	2180      	movs	r1, #128	; 0x80
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fdab 	bl	800c518 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fda7 	bl	800c518 <USBD_LL_StallEP>
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b086      	sub	sp, #24
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d036      	beq.n	800ba56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b9ec:	6938      	ldr	r0, [r7, #16]
 800b9ee:	f000 f836 	bl	800ba5e <USBD_GetLen>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	4413      	add	r3, r2
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	7812      	ldrb	r2, [r2, #0]
 800ba0a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	4413      	add	r3, r2
 800ba18:	2203      	movs	r2, #3
 800ba1a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba22:	e013      	b.n	800ba4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	4413      	add	r3, r2
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	7812      	ldrb	r2, [r2, #0]
 800ba2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	3301      	adds	r3, #1
 800ba34:	613b      	str	r3, [r7, #16]
    idx++;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba3c:	7dfb      	ldrb	r3, [r7, #23]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	4413      	add	r3, r2
 800ba42:	2200      	movs	r2, #0
 800ba44:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba46:	7dfb      	ldrb	r3, [r7, #23]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1e7      	bne.n	800ba24 <USBD_GetString+0x52>
 800ba54:	e000      	b.n	800ba58 <USBD_GetString+0x86>
    return;
 800ba56:	bf00      	nop
  }
}
 800ba58:	3718      	adds	r7, #24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b085      	sub	sp, #20
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba6e:	e005      	b.n	800ba7c <USBD_GetLen+0x1e>
  {
    len++;
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	3301      	adds	r3, #1
 800ba74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f5      	bne.n	800ba70 <USBD_GetLen+0x12>
  }

  return len;
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2202      	movs	r2, #2
 800baa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	2100      	movs	r1, #0
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 fdfb 	bl	800c6b4 <USBD_LL_Transmit>

  return USBD_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	2100      	movs	r1, #0
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f000 fdea 	bl	800c6b4 <USBD_LL_Transmit>

  return USBD_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2203      	movs	r2, #3
 800bafa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	2100      	movs	r1, #0
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f000 fe05 	bl	800c724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	2100      	movs	r1, #0
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f000 fdf4 	bl	800c724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b082      	sub	sp, #8
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2204      	movs	r2, #4
 800bb52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb56:	2300      	movs	r3, #0
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fda9 	bl	800c6b4 <USBD_LL_Transmit>

  return USBD_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2205      	movs	r2, #5
 800bb78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2100      	movs	r1, #0
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fdce 	bl	800c724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bba2:	2301      	movs	r3, #1
 800bba4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bbaa:	4b1f      	ldr	r3, [pc, #124]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbac:	7a5b      	ldrb	r3, [r3, #9]
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d131      	bne.n	800bc18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bbb4:	4b1c      	ldr	r3, [pc, #112]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbb6:	7a5b      	ldrb	r3, [r3, #9]
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	461a      	mov	r2, r3
 800bbbc:	4b1a      	ldr	r3, [pc, #104]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bbc2:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbc4:	7a5b      	ldrb	r3, [r3, #9]
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	4a17      	ldr	r2, [pc, #92]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bbd2:	4b15      	ldr	r3, [pc, #84]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbd4:	7a5b      	ldrb	r3, [r3, #9]
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	461a      	mov	r2, r3
 800bbda:	4b13      	ldr	r3, [pc, #76]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbdc:	4413      	add	r3, r2
 800bbde:	79fa      	ldrb	r2, [r7, #7]
 800bbe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bbe2:	4b11      	ldr	r3, [pc, #68]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbe4:	7a5b      	ldrb	r3, [r3, #9]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	b2d1      	uxtb	r1, r2
 800bbec:	4a0e      	ldr	r2, [pc, #56]	; (800bc28 <FATFS_LinkDriverEx+0x94>)
 800bbee:	7251      	strb	r1, [r2, #9]
 800bbf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bbf2:	7dbb      	ldrb	r3, [r7, #22]
 800bbf4:	3330      	adds	r3, #48	; 0x30
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	223a      	movs	r2, #58	; 0x3a
 800bc02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	3302      	adds	r3, #2
 800bc08:	222f      	movs	r2, #47	; 0x2f
 800bc0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	3303      	adds	r3, #3
 800bc10:	2200      	movs	r2, #0
 800bc12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	371c      	adds	r7, #28
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	20000468 	.word	0x20000468

0800bc2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bc36:	2200      	movs	r2, #0
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7ff ffaa 	bl	800bb94 <FATFS_LinkDriverEx>
 800bc40:	4603      	mov	r3, r0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc50:	2200      	movs	r2, #0
 800bc52:	4912      	ldr	r1, [pc, #72]	; (800bc9c <MX_USB_DEVICE_Init+0x50>)
 800bc54:	4812      	ldr	r0, [pc, #72]	; (800bca0 <MX_USB_DEVICE_Init+0x54>)
 800bc56:	f7fe fe09 	bl	800a86c <USBD_Init>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc60:	f7f4 ff32 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc64:	490f      	ldr	r1, [pc, #60]	; (800bca4 <MX_USB_DEVICE_Init+0x58>)
 800bc66:	480e      	ldr	r0, [pc, #56]	; (800bca0 <MX_USB_DEVICE_Init+0x54>)
 800bc68:	f7fe fe30 	bl	800a8cc <USBD_RegisterClass>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d001      	beq.n	800bc76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc72:	f7f4 ff29 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc76:	490c      	ldr	r1, [pc, #48]	; (800bca8 <MX_USB_DEVICE_Init+0x5c>)
 800bc78:	4809      	ldr	r0, [pc, #36]	; (800bca0 <MX_USB_DEVICE_Init+0x54>)
 800bc7a:	f7fe fd81 	bl	800a780 <USBD_CDC_RegisterInterface>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc84:	f7f4 ff20 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc88:	4805      	ldr	r0, [pc, #20]	; (800bca0 <MX_USB_DEVICE_Init+0x54>)
 800bc8a:	f7fe fe46 	bl	800a91a <USBD_Start>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d001      	beq.n	800bc98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc94:	f7f4 ff18 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc98:	bf00      	nop
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20000130 	.word	0x20000130
 800bca0:	20000474 	.word	0x20000474
 800bca4:	20000018 	.word	0x20000018
 800bca8:	2000011c 	.word	0x2000011c

0800bcac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4905      	ldr	r1, [pc, #20]	; (800bcc8 <CDC_Init_FS+0x1c>)
 800bcb4:	4805      	ldr	r0, [pc, #20]	; (800bccc <CDC_Init_FS+0x20>)
 800bcb6:	f7fe fd78 	bl	800a7aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcba:	4905      	ldr	r1, [pc, #20]	; (800bcd0 <CDC_Init_FS+0x24>)
 800bcbc:	4803      	ldr	r0, [pc, #12]	; (800bccc <CDC_Init_FS+0x20>)
 800bcbe:	f7fe fd92 	bl	800a7e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	20000f44 	.word	0x20000f44
 800bccc:	20000474 	.word	0x20000474
 800bcd0:	20000744 	.word	0x20000744

0800bcd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bcd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	2b23      	cmp	r3, #35	; 0x23
 800bcf8:	d84a      	bhi.n	800bd90 <CDC_Control_FS+0xac>
 800bcfa:	a201      	add	r2, pc, #4	; (adr r2, 800bd00 <CDC_Control_FS+0x1c>)
 800bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd00:	0800bd91 	.word	0x0800bd91
 800bd04:	0800bd91 	.word	0x0800bd91
 800bd08:	0800bd91 	.word	0x0800bd91
 800bd0c:	0800bd91 	.word	0x0800bd91
 800bd10:	0800bd91 	.word	0x0800bd91
 800bd14:	0800bd91 	.word	0x0800bd91
 800bd18:	0800bd91 	.word	0x0800bd91
 800bd1c:	0800bd91 	.word	0x0800bd91
 800bd20:	0800bd91 	.word	0x0800bd91
 800bd24:	0800bd91 	.word	0x0800bd91
 800bd28:	0800bd91 	.word	0x0800bd91
 800bd2c:	0800bd91 	.word	0x0800bd91
 800bd30:	0800bd91 	.word	0x0800bd91
 800bd34:	0800bd91 	.word	0x0800bd91
 800bd38:	0800bd91 	.word	0x0800bd91
 800bd3c:	0800bd91 	.word	0x0800bd91
 800bd40:	0800bd91 	.word	0x0800bd91
 800bd44:	0800bd91 	.word	0x0800bd91
 800bd48:	0800bd91 	.word	0x0800bd91
 800bd4c:	0800bd91 	.word	0x0800bd91
 800bd50:	0800bd91 	.word	0x0800bd91
 800bd54:	0800bd91 	.word	0x0800bd91
 800bd58:	0800bd91 	.word	0x0800bd91
 800bd5c:	0800bd91 	.word	0x0800bd91
 800bd60:	0800bd91 	.word	0x0800bd91
 800bd64:	0800bd91 	.word	0x0800bd91
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd91 	.word	0x0800bd91
 800bd70:	0800bd91 	.word	0x0800bd91
 800bd74:	0800bd91 	.word	0x0800bd91
 800bd78:	0800bd91 	.word	0x0800bd91
 800bd7c:	0800bd91 	.word	0x0800bd91
 800bd80:	0800bd91 	.word	0x0800bd91
 800bd84:	0800bd91 	.word	0x0800bd91
 800bd88:	0800bd91 	.word	0x0800bd91
 800bd8c:	0800bd91 	.word	0x0800bd91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd90:	bf00      	nop
  }

  return (USBD_OK);
 800bd92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bdaa:	6879      	ldr	r1, [r7, #4]
 800bdac:	4805      	ldr	r0, [pc, #20]	; (800bdc4 <CDC_Receive_FS+0x24>)
 800bdae:	f7fe fd1a 	bl	800a7e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bdb2:	4804      	ldr	r0, [pc, #16]	; (800bdc4 <CDC_Receive_FS+0x24>)
 800bdb4:	f7fe fd30 	bl	800a818 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bdb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20000474 	.word	0x20000474

0800bdc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bdda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
	...

0800bdec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	6039      	str	r1, [r7, #0]
 800bdf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2212      	movs	r2, #18
 800bdfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdfe:	4b03      	ldr	r3, [pc, #12]	; (800be0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800be00:	4618      	mov	r0, r3
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	20000150 	.word	0x20000150

0800be10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	6039      	str	r1, [r7, #0]
 800be1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2204      	movs	r2, #4
 800be20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be22:	4b03      	ldr	r3, [pc, #12]	; (800be30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be24:	4618      	mov	r0, r3
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	20000170 	.word	0x20000170

0800be34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	6039      	str	r1, [r7, #0]
 800be3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d105      	bne.n	800be52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	4907      	ldr	r1, [pc, #28]	; (800be68 <USBD_FS_ProductStrDescriptor+0x34>)
 800be4a:	4808      	ldr	r0, [pc, #32]	; (800be6c <USBD_FS_ProductStrDescriptor+0x38>)
 800be4c:	f7ff fdc1 	bl	800b9d2 <USBD_GetString>
 800be50:	e004      	b.n	800be5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	4904      	ldr	r1, [pc, #16]	; (800be68 <USBD_FS_ProductStrDescriptor+0x34>)
 800be56:	4805      	ldr	r0, [pc, #20]	; (800be6c <USBD_FS_ProductStrDescriptor+0x38>)
 800be58:	f7ff fdbb 	bl	800b9d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be5c:	4b02      	ldr	r3, [pc, #8]	; (800be68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20001744 	.word	0x20001744
 800be6c:	0800c904 	.word	0x0800c904

0800be70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	6039      	str	r1, [r7, #0]
 800be7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	4904      	ldr	r1, [pc, #16]	; (800be90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be80:	4804      	ldr	r0, [pc, #16]	; (800be94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be82:	f7ff fda6 	bl	800b9d2 <USBD_GetString>
  return USBD_StrDesc;
 800be86:	4b02      	ldr	r3, [pc, #8]	; (800be90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	20001744 	.word	0x20001744
 800be94:	0800c91c 	.word	0x0800c91c

0800be98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	6039      	str	r1, [r7, #0]
 800bea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	221a      	movs	r2, #26
 800bea8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800beaa:	f000 f855 	bl	800bf58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800beae:	4b02      	ldr	r3, [pc, #8]	; (800beb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	20000174 	.word	0x20000174

0800bebc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	4603      	mov	r3, r0
 800bec4:	6039      	str	r1, [r7, #0]
 800bec6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bec8:	79fb      	ldrb	r3, [r7, #7]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d105      	bne.n	800beda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	4907      	ldr	r1, [pc, #28]	; (800bef0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bed2:	4808      	ldr	r0, [pc, #32]	; (800bef4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bed4:	f7ff fd7d 	bl	800b9d2 <USBD_GetString>
 800bed8:	e004      	b.n	800bee4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	4904      	ldr	r1, [pc, #16]	; (800bef0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bede:	4805      	ldr	r0, [pc, #20]	; (800bef4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bee0:	f7ff fd77 	bl	800b9d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bee4:	4b02      	ldr	r3, [pc, #8]	; (800bef0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20001744 	.word	0x20001744
 800bef4:	0800c930 	.word	0x0800c930

0800bef8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	6039      	str	r1, [r7, #0]
 800bf02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf04:	79fb      	ldrb	r3, [r7, #7]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d105      	bne.n	800bf16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	4907      	ldr	r1, [pc, #28]	; (800bf2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf0e:	4808      	ldr	r0, [pc, #32]	; (800bf30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf10:	f7ff fd5f 	bl	800b9d2 <USBD_GetString>
 800bf14:	e004      	b.n	800bf20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	4904      	ldr	r1, [pc, #16]	; (800bf2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf1a:	4805      	ldr	r0, [pc, #20]	; (800bf30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf1c:	f7ff fd59 	bl	800b9d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf20:	4b02      	ldr	r3, [pc, #8]	; (800bf2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20001744 	.word	0x20001744
 800bf30:	0800c93c 	.word	0x0800c93c

0800bf34 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	6039      	str	r1, [r7, #0]
 800bf3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	220c      	movs	r2, #12
 800bf44:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bf46:	4b03      	ldr	r3, [pc, #12]	; (800bf54 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	20000164 	.word	0x20000164

0800bf58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf5e:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <Get_SerialNum+0x44>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf64:	4b0e      	ldr	r3, [pc, #56]	; (800bfa0 <Get_SerialNum+0x48>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf6a:	4b0e      	ldr	r3, [pc, #56]	; (800bfa4 <Get_SerialNum+0x4c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4413      	add	r3, r2
 800bf76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d009      	beq.n	800bf92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf7e:	2208      	movs	r2, #8
 800bf80:	4909      	ldr	r1, [pc, #36]	; (800bfa8 <Get_SerialNum+0x50>)
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f000 f814 	bl	800bfb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf88:	2204      	movs	r2, #4
 800bf8a:	4908      	ldr	r1, [pc, #32]	; (800bfac <Get_SerialNum+0x54>)
 800bf8c:	68b8      	ldr	r0, [r7, #8]
 800bf8e:	f000 f80f 	bl	800bfb0 <IntToUnicode>
  }
}
 800bf92:	bf00      	nop
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	1fff7590 	.word	0x1fff7590
 800bfa0:	1fff7594 	.word	0x1fff7594
 800bfa4:	1fff7598 	.word	0x1fff7598
 800bfa8:	20000176 	.word	0x20000176
 800bfac:	20000186 	.word	0x20000186

0800bfb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b087      	sub	sp, #28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	75fb      	strb	r3, [r7, #23]
 800bfc6:	e027      	b.n	800c018 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	0f1b      	lsrs	r3, r3, #28
 800bfcc:	2b09      	cmp	r3, #9
 800bfce:	d80b      	bhi.n	800bfe8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	0f1b      	lsrs	r3, r3, #28
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	7dfb      	ldrb	r3, [r7, #23]
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	4619      	mov	r1, r3
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	440b      	add	r3, r1
 800bfe0:	3230      	adds	r2, #48	; 0x30
 800bfe2:	b2d2      	uxtb	r2, r2
 800bfe4:	701a      	strb	r2, [r3, #0]
 800bfe6:	e00a      	b.n	800bffe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	0f1b      	lsrs	r3, r3, #28
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	7dfb      	ldrb	r3, [r7, #23]
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4619      	mov	r1, r3
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	440b      	add	r3, r1
 800bff8:	3237      	adds	r2, #55	; 0x37
 800bffa:	b2d2      	uxtb	r2, r2
 800bffc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	011b      	lsls	r3, r3, #4
 800c002:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c004:	7dfb      	ldrb	r3, [r7, #23]
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	3301      	adds	r3, #1
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	4413      	add	r3, r2
 800c00e:	2200      	movs	r2, #0
 800c010:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	3301      	adds	r3, #1
 800c016:	75fb      	strb	r3, [r7, #23]
 800c018:	7dfa      	ldrb	r2, [r7, #23]
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d3d3      	bcc.n	800bfc8 <IntToUnicode+0x18>
  }
}
 800c020:	bf00      	nop
 800c022:	bf00      	nop
 800c024:	371c      	adds	r7, #28
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
	...

0800c030 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b0b0      	sub	sp, #192	; 0xc0
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c038:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c03c:	2200      	movs	r2, #0
 800c03e:	601a      	str	r2, [r3, #0]
 800c040:	605a      	str	r2, [r3, #4]
 800c042:	609a      	str	r2, [r3, #8]
 800c044:	60da      	str	r2, [r3, #12]
 800c046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c048:	f107 0318 	add.w	r3, r7, #24
 800c04c:	2294      	movs	r2, #148	; 0x94
 800c04e:	2100      	movs	r1, #0
 800c050:	4618      	mov	r0, r3
 800c052:	f000 fc43 	bl	800c8dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c05e:	d163      	bne.n	800c128 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c064:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c066:	2300      	movs	r3, #0
 800c068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c06c:	f107 0318 	add.w	r3, r7, #24
 800c070:	4618      	mov	r0, r3
 800c072:	f7f7 fe13 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800c07c:	f7f4 fd24 	bl	8000ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c080:	4b2b      	ldr	r3, [pc, #172]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c084:	4a2a      	ldr	r2, [pc, #168]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c086:	f043 0301 	orr.w	r3, r3, #1
 800c08a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c08c:	4b28      	ldr	r3, [pc, #160]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c08e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c098:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c09c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0b2:	230a      	movs	r3, #10
 800c0b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c0bc:	4619      	mov	r1, r3
 800c0be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c0c2:	f7f5 f951 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0c6:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ca:	4a19      	ldr	r2, [pc, #100]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c0cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c0d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0d2:	4b17      	ldr	r3, [pc, #92]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c0da:	613b      	str	r3, [r7, #16]
 800c0dc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c0de:	4b14      	ldr	r3, [pc, #80]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d114      	bne.n	800c114 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c0ea:	4b11      	ldr	r3, [pc, #68]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c0ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ee:	4a10      	ldr	r2, [pc, #64]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c0f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0f4:	6593      	str	r3, [r2, #88]	; 0x58
 800c0f6:	4b0e      	ldr	r3, [pc, #56]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0fe:	60fb      	str	r3, [r7, #12]
 800c100:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800c102:	f7f6 feb7 	bl	8002e74 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c106:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c10a:	4a09      	ldr	r2, [pc, #36]	; (800c130 <HAL_PCD_MspInit+0x100>)
 800c10c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c110:	6593      	str	r3, [r2, #88]	; 0x58
 800c112:	e001      	b.n	800c118 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c114:	f7f6 feae 	bl	8002e74 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c118:	2200      	movs	r2, #0
 800c11a:	2100      	movs	r1, #0
 800c11c:	2043      	movs	r0, #67	; 0x43
 800c11e:	f7f5 f8ec 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c122:	2043      	movs	r0, #67	; 0x43
 800c124:	f7f5 f905 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c128:	bf00      	nop
 800c12a:	37c0      	adds	r7, #192	; 0xc0
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	40021000 	.word	0x40021000

0800c134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c148:	4619      	mov	r1, r3
 800c14a:	4610      	mov	r0, r2
 800c14c:	f7fe fc30 	bl	800a9b0 <USBD_LL_SetupStage>
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	460b      	mov	r3, r1
 800c162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c16a:	78fa      	ldrb	r2, [r7, #3]
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	4613      	mov	r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	440b      	add	r3, r1
 800c178:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	78fb      	ldrb	r3, [r7, #3]
 800c180:	4619      	mov	r1, r3
 800c182:	f7fe fc6a 	bl	800aa5a <USBD_LL_DataOutStage>
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	460b      	mov	r3, r1
 800c198:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c1a0:	78fa      	ldrb	r2, [r7, #3]
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	440b      	add	r3, r1
 800c1ae:	334c      	adds	r3, #76	; 0x4c
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f7fe fcb3 	bl	800ab20 <USBD_LL_DataInStage>
}
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe fdc7 	bl	800ad64 <USBD_LL_SOF>
}
 800c1d6:	bf00      	nop
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d001      	beq.n	800c1f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1f2:	f7f4 fc69 	bl	8000ac8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1fc:	7bfa      	ldrb	r2, [r7, #15]
 800c1fe:	4611      	mov	r1, r2
 800c200:	4618      	mov	r0, r3
 800c202:	f7fe fd71 	bl	800ace8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe fd1d 	bl	800ac4c <USBD_LL_Reset>
}
 800c212:	bf00      	nop
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c236:	f043 0301 	orr.w	r3, r3, #1
 800c23a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe fd60 	bl	800ad08 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a1b      	ldr	r3, [r3, #32]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d005      	beq.n	800c25c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c250:	4b04      	ldr	r3, [pc, #16]	; (800c264 <HAL_PCD_SuspendCallback+0x48>)
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	4a03      	ldr	r2, [pc, #12]	; (800c264 <HAL_PCD_SuspendCallback+0x48>)
 800c256:	f043 0306 	orr.w	r3, r3, #6
 800c25a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	e000ed00 	.word	0xe000ed00

0800c268 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	6812      	ldr	r2, [r2, #0]
 800c27e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c282:	f023 0301 	bic.w	r3, r3, #1
 800c286:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a1b      	ldr	r3, [r3, #32]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d007      	beq.n	800c2a0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c290:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <HAL_PCD_ResumeCallback+0x4c>)
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	4a07      	ldr	r2, [pc, #28]	; (800c2b4 <HAL_PCD_ResumeCallback+0x4c>)
 800c296:	f023 0306 	bic.w	r3, r3, #6
 800c29a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c29c:	f000 faf4 	bl	800c888 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe fd44 	bl	800ad34 <USBD_LL_Resume>
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	e000ed00 	.word	0xe000ed00

0800c2b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2ca:	78fa      	ldrb	r2, [r7, #3]
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe fd90 	bl	800adf4 <USBD_LL_IsoOUTIncomplete>
}
 800c2d4:	bf00      	nop
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2ee:	78fa      	ldrb	r2, [r7, #3]
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fe fd58 	bl	800ada8 <USBD_LL_IsoINIncomplete>
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fe fd96 	bl	800ae40 <USBD_LL_DevConnected>
}
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fd93 	bl	800ae56 <USBD_LL_DevDisconnected>
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d139      	bne.n	800c3bc <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c348:	4a1f      	ldr	r2, [pc, #124]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4a1d      	ldr	r2, [pc, #116]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c354:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c358:	4b1b      	ldr	r3, [pc, #108]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c35a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c35e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c360:	4b19      	ldr	r3, [pc, #100]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c362:	2206      	movs	r2, #6
 800c364:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c368:	2202      	movs	r2, #2
 800c36a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c36c:	4b16      	ldr	r3, [pc, #88]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c36e:	2200      	movs	r2, #0
 800c370:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c374:	2200      	movs	r2, #0
 800c376:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c378:	4b13      	ldr	r3, [pc, #76]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c37e:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c380:	2200      	movs	r2, #0
 800c382:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c384:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c386:	2200      	movs	r2, #0
 800c388:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c38a:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c390:	480d      	ldr	r0, [pc, #52]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c392:	f7f5 faeb 	bl	800196c <HAL_PCD_Init>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d001      	beq.n	800c3a0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800c39c:	f7f4 fb94 	bl	8000ac8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c3a0:	2180      	movs	r1, #128	; 0x80
 800c3a2:	4809      	ldr	r0, [pc, #36]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c3a4:	f7f6 fc6d 	bl	8002c82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c3a8:	2240      	movs	r2, #64	; 0x40
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	4806      	ldr	r0, [pc, #24]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c3ae:	f7f6 fc21 	bl	8002bf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c3b2:	2280      	movs	r2, #128	; 0x80
 800c3b4:	2101      	movs	r1, #1
 800c3b6:	4804      	ldr	r0, [pc, #16]	; (800c3c8 <USBD_LL_Init+0x90>)
 800c3b8:	f7f6 fc1c 	bl	8002bf4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20001944 	.word	0x20001944

0800c3cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7f5 fbe6 	bl	8001bb4 <HAL_PCD_Start>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d816      	bhi.n	800c420 <USBD_LL_Start+0x54>
 800c3f2:	a201      	add	r2, pc, #4	; (adr r2, 800c3f8 <USBD_LL_Start+0x2c>)
 800c3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f8:	0800c409 	.word	0x0800c409
 800c3fc:	0800c40f 	.word	0x0800c40f
 800c400:	0800c415 	.word	0x0800c415
 800c404:	0800c41b 	.word	0x0800c41b
    case HAL_OK :
      usb_status = USBD_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	73fb      	strb	r3, [r7, #15]
    break;
 800c40c:	e00b      	b.n	800c426 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c40e:	2303      	movs	r3, #3
 800c410:	73fb      	strb	r3, [r7, #15]
    break;
 800c412:	e008      	b.n	800c426 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c414:	2301      	movs	r3, #1
 800c416:	73fb      	strb	r3, [r7, #15]
    break;
 800c418:	e005      	b.n	800c426 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c41a:	2303      	movs	r3, #3
 800c41c:	73fb      	strb	r3, [r7, #15]
    break;
 800c41e:	e002      	b.n	800c426 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c420:	2303      	movs	r3, #3
 800c422:	73fb      	strb	r3, [r7, #15]
    break;
 800c424:	bf00      	nop
  }
  return usb_status;
 800c426:	7bfb      	ldrb	r3, [r7, #15]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	4608      	mov	r0, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	461a      	mov	r2, r3
 800c43e:	4603      	mov	r3, r0
 800c440:	70fb      	strb	r3, [r7, #3]
 800c442:	460b      	mov	r3, r1
 800c444:	70bb      	strb	r3, [r7, #2]
 800c446:	4613      	mov	r3, r2
 800c448:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c458:	78bb      	ldrb	r3, [r7, #2]
 800c45a:	883a      	ldrh	r2, [r7, #0]
 800c45c:	78f9      	ldrb	r1, [r7, #3]
 800c45e:	f7f6 f890 	bl	8002582 <HAL_PCD_EP_Open>
 800c462:	4603      	mov	r3, r0
 800c464:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c466:	7bbb      	ldrb	r3, [r7, #14]
 800c468:	2b03      	cmp	r3, #3
 800c46a:	d817      	bhi.n	800c49c <USBD_LL_OpenEP+0x6c>
 800c46c:	a201      	add	r2, pc, #4	; (adr r2, 800c474 <USBD_LL_OpenEP+0x44>)
 800c46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c472:	bf00      	nop
 800c474:	0800c485 	.word	0x0800c485
 800c478:	0800c48b 	.word	0x0800c48b
 800c47c:	0800c491 	.word	0x0800c491
 800c480:	0800c497 	.word	0x0800c497
    case HAL_OK :
      usb_status = USBD_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	73fb      	strb	r3, [r7, #15]
    break;
 800c488:	e00b      	b.n	800c4a2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c48a:	2303      	movs	r3, #3
 800c48c:	73fb      	strb	r3, [r7, #15]
    break;
 800c48e:	e008      	b.n	800c4a2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c490:	2301      	movs	r3, #1
 800c492:	73fb      	strb	r3, [r7, #15]
    break;
 800c494:	e005      	b.n	800c4a2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c496:	2303      	movs	r3, #3
 800c498:	73fb      	strb	r3, [r7, #15]
    break;
 800c49a:	e002      	b.n	800c4a2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c49c:	2303      	movs	r3, #3
 800c49e:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a0:	bf00      	nop
  }
  return usb_status;
 800c4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4c6:	78fa      	ldrb	r2, [r7, #3]
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7f6 f8c1 	bl	8002652 <HAL_PCD_EP_Close>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d816      	bhi.n	800c508 <USBD_LL_CloseEP+0x5c>
 800c4da:	a201      	add	r2, pc, #4	; (adr r2, 800c4e0 <USBD_LL_CloseEP+0x34>)
 800c4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c4f7 	.word	0x0800c4f7
 800c4e8:	0800c4fd 	.word	0x0800c4fd
 800c4ec:	0800c503 	.word	0x0800c503
    case HAL_OK :
      usb_status = USBD_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f4:	e00b      	b.n	800c50e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4fa:	e008      	b.n	800c50e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c500:	e005      	b.n	800c50e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c502:	2303      	movs	r3, #3
 800c504:	73fb      	strb	r3, [r7, #15]
    break;
 800c506:	e002      	b.n	800c50e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c508:	2303      	movs	r3, #3
 800c50a:	73fb      	strb	r3, [r7, #15]
    break;
 800c50c:	bf00      	nop
  }
  return usb_status;
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	460b      	mov	r3, r1
 800c522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c532:	78fa      	ldrb	r2, [r7, #3]
 800c534:	4611      	mov	r1, r2
 800c536:	4618      	mov	r0, r3
 800c538:	f7f6 f968 	bl	800280c <HAL_PCD_EP_SetStall>
 800c53c:	4603      	mov	r3, r0
 800c53e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c540:	7bbb      	ldrb	r3, [r7, #14]
 800c542:	2b03      	cmp	r3, #3
 800c544:	d816      	bhi.n	800c574 <USBD_LL_StallEP+0x5c>
 800c546:	a201      	add	r2, pc, #4	; (adr r2, 800c54c <USBD_LL_StallEP+0x34>)
 800c548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c54c:	0800c55d 	.word	0x0800c55d
 800c550:	0800c563 	.word	0x0800c563
 800c554:	0800c569 	.word	0x0800c569
 800c558:	0800c56f 	.word	0x0800c56f
    case HAL_OK :
      usb_status = USBD_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	73fb      	strb	r3, [r7, #15]
    break;
 800c560:	e00b      	b.n	800c57a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c562:	2303      	movs	r3, #3
 800c564:	73fb      	strb	r3, [r7, #15]
    break;
 800c566:	e008      	b.n	800c57a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c568:	2301      	movs	r3, #1
 800c56a:	73fb      	strb	r3, [r7, #15]
    break;
 800c56c:	e005      	b.n	800c57a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c56e:	2303      	movs	r3, #3
 800c570:	73fb      	strb	r3, [r7, #15]
    break;
 800c572:	e002      	b.n	800c57a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c574:	2303      	movs	r3, #3
 800c576:	73fb      	strb	r3, [r7, #15]
    break;
 800c578:	bf00      	nop
  }
  return usb_status;
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c59e:	78fa      	ldrb	r2, [r7, #3]
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7f6 f994 	bl	80028d0 <HAL_PCD_EP_ClrStall>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c5ac:	7bbb      	ldrb	r3, [r7, #14]
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d816      	bhi.n	800c5e0 <USBD_LL_ClearStallEP+0x5c>
 800c5b2:	a201      	add	r2, pc, #4	; (adr r2, 800c5b8 <USBD_LL_ClearStallEP+0x34>)
 800c5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b8:	0800c5c9 	.word	0x0800c5c9
 800c5bc:	0800c5cf 	.word	0x0800c5cf
 800c5c0:	0800c5d5 	.word	0x0800c5d5
 800c5c4:	0800c5db 	.word	0x0800c5db
    case HAL_OK :
      usb_status = USBD_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c5cc:	e00b      	b.n	800c5e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d2:	e008      	b.n	800c5e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d8:	e005      	b.n	800c5e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5de:	e002      	b.n	800c5e6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e4:	bf00      	nop
  }
  return usb_status;
 800c5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	da0b      	bge.n	800c624 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c60c:	78fb      	ldrb	r3, [r7, #3]
 800c60e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	4613      	mov	r3, r2
 800c616:	00db      	lsls	r3, r3, #3
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	440b      	add	r3, r1
 800c61e:	333e      	adds	r3, #62	; 0x3e
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	e00b      	b.n	800c63c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c624:	78fb      	ldrb	r3, [r7, #3]
 800c626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c62a:	68f9      	ldr	r1, [r7, #12]
 800c62c:	4613      	mov	r3, r2
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	440b      	add	r3, r1
 800c636:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c63a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c654:	2300      	movs	r3, #0
 800c656:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7f5 ff66 	bl	8002538 <HAL_PCD_SetAddress>
 800c66c:	4603      	mov	r3, r0
 800c66e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	2b03      	cmp	r3, #3
 800c674:	d816      	bhi.n	800c6a4 <USBD_LL_SetUSBAddress+0x5c>
 800c676:	a201      	add	r2, pc, #4	; (adr r2, 800c67c <USBD_LL_SetUSBAddress+0x34>)
 800c678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67c:	0800c68d 	.word	0x0800c68d
 800c680:	0800c693 	.word	0x0800c693
 800c684:	0800c699 	.word	0x0800c699
 800c688:	0800c69f 	.word	0x0800c69f
    case HAL_OK :
      usb_status = USBD_OK;
 800c68c:	2300      	movs	r3, #0
 800c68e:	73fb      	strb	r3, [r7, #15]
    break;
 800c690:	e00b      	b.n	800c6aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c692:	2303      	movs	r3, #3
 800c694:	73fb      	strb	r3, [r7, #15]
    break;
 800c696:	e008      	b.n	800c6aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c698:	2301      	movs	r3, #1
 800c69a:	73fb      	strb	r3, [r7, #15]
    break;
 800c69c:	e005      	b.n	800c6aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c6a2:	e002      	b.n	800c6aa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6a8:	bf00      	nop
  }
  return usb_status;
 800c6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	607a      	str	r2, [r7, #4]
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6d2:	7af9      	ldrb	r1, [r7, #11]
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	f7f6 f85b 	bl	8002792 <HAL_PCD_EP_Transmit>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c6e0:	7dbb      	ldrb	r3, [r7, #22]
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d816      	bhi.n	800c714 <USBD_LL_Transmit+0x60>
 800c6e6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <USBD_LL_Transmit+0x38>)
 800c6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ec:	0800c6fd 	.word	0x0800c6fd
 800c6f0:	0800c703 	.word	0x0800c703
 800c6f4:	0800c709 	.word	0x0800c709
 800c6f8:	0800c70f 	.word	0x0800c70f
    case HAL_OK :
      usb_status = USBD_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	75fb      	strb	r3, [r7, #23]
    break;
 800c700:	e00b      	b.n	800c71a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c702:	2303      	movs	r3, #3
 800c704:	75fb      	strb	r3, [r7, #23]
    break;
 800c706:	e008      	b.n	800c71a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c708:	2301      	movs	r3, #1
 800c70a:	75fb      	strb	r3, [r7, #23]
    break;
 800c70c:	e005      	b.n	800c71a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c70e:	2303      	movs	r3, #3
 800c710:	75fb      	strb	r3, [r7, #23]
    break;
 800c712:	e002      	b.n	800c71a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c714:	2303      	movs	r3, #3
 800c716:	75fb      	strb	r3, [r7, #23]
    break;
 800c718:	bf00      	nop
  }
  return usb_status;
 800c71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3718      	adds	r7, #24
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	607a      	str	r2, [r7, #4]
 800c72e:	603b      	str	r3, [r7, #0]
 800c730:	460b      	mov	r3, r1
 800c732:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c742:	7af9      	ldrb	r1, [r7, #11]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	f7f5 ffcd 	bl	80026e6 <HAL_PCD_EP_Receive>
 800c74c:	4603      	mov	r3, r0
 800c74e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c750:	7dbb      	ldrb	r3, [r7, #22]
 800c752:	2b03      	cmp	r3, #3
 800c754:	d816      	bhi.n	800c784 <USBD_LL_PrepareReceive+0x60>
 800c756:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <USBD_LL_PrepareReceive+0x38>)
 800c758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75c:	0800c76d 	.word	0x0800c76d
 800c760:	0800c773 	.word	0x0800c773
 800c764:	0800c779 	.word	0x0800c779
 800c768:	0800c77f 	.word	0x0800c77f
    case HAL_OK :
      usb_status = USBD_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	75fb      	strb	r3, [r7, #23]
    break;
 800c770:	e00b      	b.n	800c78a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c772:	2303      	movs	r3, #3
 800c774:	75fb      	strb	r3, [r7, #23]
    break;
 800c776:	e008      	b.n	800c78a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c778:	2301      	movs	r3, #1
 800c77a:	75fb      	strb	r3, [r7, #23]
    break;
 800c77c:	e005      	b.n	800c78a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c77e:	2303      	movs	r3, #3
 800c780:	75fb      	strb	r3, [r7, #23]
    break;
 800c782:	e002      	b.n	800c78a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c784:	2303      	movs	r3, #3
 800c786:	75fb      	strb	r3, [r7, #23]
    break;
 800c788:	bf00      	nop
  }
  return usb_status;
 800c78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7a6:	78fa      	ldrb	r2, [r7, #3]
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7f5 ffd9 	bl	8002762 <HAL_PCD_EP_GetRxCount>
 800c7b0:	4603      	mov	r3, r0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c7c8:	78fb      	ldrb	r3, [r7, #3]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <HAL_PCDEx_LPM_Callback+0x18>
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d01f      	beq.n	800c812 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c7d2:	e03b      	b.n	800c84c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a1b      	ldr	r3, [r3, #32]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d007      	beq.n	800c7ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c7dc:	f000 f854 	bl	800c888 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c7e0:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <HAL_PCDEx_LPM_Callback+0x98>)
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	4a1b      	ldr	r2, [pc, #108]	; (800c854 <HAL_PCDEx_LPM_Callback+0x98>)
 800c7e6:	f023 0306 	bic.w	r3, r3, #6
 800c7ea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	6812      	ldr	r2, [r2, #0]
 800c7fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c7fe:	f023 0301 	bic.w	r3, r3, #1
 800c802:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe fa92 	bl	800ad34 <USBD_LL_Resume>
    break;
 800c810:	e01c      	b.n	800c84c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	6812      	ldr	r2, [r2, #0]
 800c820:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c824:	f043 0301 	orr.w	r3, r3, #1
 800c828:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe fa69 	bl	800ad08 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d005      	beq.n	800c84a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c83e:	4b05      	ldr	r3, [pc, #20]	; (800c854 <HAL_PCDEx_LPM_Callback+0x98>)
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	4a04      	ldr	r2, [pc, #16]	; (800c854 <HAL_PCDEx_LPM_Callback+0x98>)
 800c844:	f043 0306 	orr.w	r3, r3, #6
 800c848:	6113      	str	r3, [r2, #16]
    break;
 800c84a:	bf00      	nop
}
 800c84c:	bf00      	nop
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	e000ed00 	.word	0xe000ed00

0800c858 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c860:	4b03      	ldr	r3, [pc, #12]	; (800c870 <USBD_static_malloc+0x18>)
}
 800c862:	4618      	mov	r0, r3
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	20001e50 	.word	0x20001e50

0800c874 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]

}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c88c:	f7f3 fe74 	bl	8000578 <SystemClock_Config>
}
 800c890:	bf00      	nop
 800c892:	bd80      	pop	{r7, pc}

0800c894 <__libc_init_array>:
 800c894:	b570      	push	{r4, r5, r6, lr}
 800c896:	4d0d      	ldr	r5, [pc, #52]	; (800c8cc <__libc_init_array+0x38>)
 800c898:	4c0d      	ldr	r4, [pc, #52]	; (800c8d0 <__libc_init_array+0x3c>)
 800c89a:	1b64      	subs	r4, r4, r5
 800c89c:	10a4      	asrs	r4, r4, #2
 800c89e:	2600      	movs	r6, #0
 800c8a0:	42a6      	cmp	r6, r4
 800c8a2:	d109      	bne.n	800c8b8 <__libc_init_array+0x24>
 800c8a4:	4d0b      	ldr	r5, [pc, #44]	; (800c8d4 <__libc_init_array+0x40>)
 800c8a6:	4c0c      	ldr	r4, [pc, #48]	; (800c8d8 <__libc_init_array+0x44>)
 800c8a8:	f000 f820 	bl	800c8ec <_init>
 800c8ac:	1b64      	subs	r4, r4, r5
 800c8ae:	10a4      	asrs	r4, r4, #2
 800c8b0:	2600      	movs	r6, #0
 800c8b2:	42a6      	cmp	r6, r4
 800c8b4:	d105      	bne.n	800c8c2 <__libc_init_array+0x2e>
 800c8b6:	bd70      	pop	{r4, r5, r6, pc}
 800c8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8bc:	4798      	blx	r3
 800c8be:	3601      	adds	r6, #1
 800c8c0:	e7ee      	b.n	800c8a0 <__libc_init_array+0xc>
 800c8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c6:	4798      	blx	r3
 800c8c8:	3601      	adds	r6, #1
 800c8ca:	e7f2      	b.n	800c8b2 <__libc_init_array+0x1e>
 800c8cc:	0800c9d8 	.word	0x0800c9d8
 800c8d0:	0800c9d8 	.word	0x0800c9d8
 800c8d4:	0800c9d8 	.word	0x0800c9d8
 800c8d8:	0800c9dc 	.word	0x0800c9dc

0800c8dc <memset>:
 800c8dc:	4402      	add	r2, r0
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d100      	bne.n	800c8e6 <memset+0xa>
 800c8e4:	4770      	bx	lr
 800c8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ea:	e7f9      	b.n	800c8e0 <memset+0x4>

0800c8ec <_init>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	bf00      	nop
 800c8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f2:	bc08      	pop	{r3}
 800c8f4:	469e      	mov	lr, r3
 800c8f6:	4770      	bx	lr

0800c8f8 <_fini>:
 800c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fa:	bf00      	nop
 800c8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8fe:	bc08      	pop	{r3}
 800c900:	469e      	mov	lr, r3
 800c902:	4770      	bx	lr
